uint64_t RERealityFileAssetDescriptorCreateFromExisting(const char *a1, const char *a2)
{
  const char *v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v7;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  __n128 v12;
  NSObject *v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  char v27;
  re::DynamicString *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;
  uint64_t v38;

  if (*((void *)a1 + 4)) {
    v4 = (const char *)*((void *)a1 + 5);
  }
  else {
    v4 = a1 + 33;
  }
  v5 = (_anonymous_namespace_ *)strcmp(v4, "RealityFileAsset");
  if (v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Only RealityFileAssetLoadDescriptor is supported for REAssetManagerCreateNewURLRealityFileAssetLoadDescriptorFromExisting.", (uint8_t *)&v14, 2u);
    }

    return 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v29, 0);
    *((void *)&v33 + 1) = 0;
    v34 = 0uLL;
    v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v33, 0);
    *((void *)&v35 + 1) = 0;
    v36 = 0uLL;
    re::DynamicString::setCapacity(&v35, 0);
    v37 = 0;
    v38 = 1;
    v11 = re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 24), &v28, 0);
    if (v11)
    {
      re::RealityFileDescriptor::makeWithURL((re::RealityFileDescriptor *)&v26, (uint64_t)&v14);
      LOBYTE(v28) = v14;
      re::DynamicString::operator=((re::DynamicString *)&v29, (re::DynamicString *)&v15);
      re::DynamicString::operator=((re::DynamicString *)&v33, (re::DynamicString *)&v17);
      if ((void)v17)
      {
        if (BYTE8(v17)) {
          (*(void (**)(void))(*(void *)v17 + 40))();
        }
        v17 = 0u;
        v18 = 0u;
      }
      if ((void)v15)
      {
        if (BYTE8(v15)) {
          (*(void (**)(void))(*(void *)v15 + 40))();
        }
        v15 = 0u;
        v16 = 0u;
      }
      if (v26 && (v27 & 1) != 0) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
      re::RealityFileAssetLoadDescriptorFactory::make((char *)&v28, (re::DynamicString *)(a1 + 136), (uint64_t)&v14);
      v12.n128_f64[0] = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>((re *)&v26, (uint64_t)&v14);
      if ((void)v24)
      {
        if (BYTE8(v24)) {
          (*(void (**)(double))(*(void *)v24 + 40))(v12.n128_f64[0]);
        }
        v12 = 0uLL;
        v24 = 0u;
        v25 = 0u;
      }
      if (v19)
      {
        if (v23) {
          (*(void (**)(__n128))(*(void *)v19 + 40))(v12);
        }
        v23 = 0;
        v20 = 0;
        v21 = 0;
        v19 = 0;
        ++v22;
      }
      if (*((void *)&v16 + 1))
      {
        if (*((void *)&v18 + 1)) {
          (*(void (**)(__n128))(**((void **)&v16 + 1) + 40))(v12);
        }
        *((void *)&v18 + 1) = 0;
        v17 = 0uLL;
        *((void *)&v16 + 1) = 0;
        LODWORD(v18) = v18 + 1;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v14 + 40))(v12);
      }
      v7 = v26;
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Failed to deserialize RealityFileAssetLoadDescriptorParameters.", (uint8_t *)&v14, 2u);
      }

      v7 = 0;
    }
    if ((void)v35)
    {
      if (BYTE8(v35)) {
        (*(void (**)(__n128))(*(void *)v35 + 40))(v12);
      }
      v12 = 0uLL;
      v35 = 0u;
      v36 = 0u;
    }
    if ((void)v33)
    {
      if (BYTE8(v33)) {
        (*(void (**)(__n128))(*(void *)v33 + 40))(v12);
      }
      v12 = 0uLL;
      v33 = 0u;
      v34 = 0u;
    }
    if (v29 && (v30 & 1) != 0) {
      (*(void (**)(__n128))(*v29 + 40))(v12);
    }
  }
  return v7;
}

uint64_t RERealityFileAssetDescriptorCreateFromURL(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v28, 0);
  *((void *)&v32 + 1) = 0;
  long long v33 = 0uLL;
  v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v32, 0);
  *((void *)&v34 + 1) = 0;
  long long v35 = 0uLL;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v34, 0);
  char v36 = 0;
  uint64_t v37 = 1;
  re::RealityFileDescriptor::makeWithURL((re::RealityFileDescriptor *)&v25, (uint64_t)v14);
  v27[0] = v14[0];
  re::DynamicString::operator=((re::DynamicString *)&v28, (re::DynamicString *)&v14[8]);
  re::DynamicString::operator=((re::DynamicString *)&v32, (re::DynamicString *)&v15);
  if ((void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = 0u;
    long long v16 = 0u;
  }
  if (*(void *)&v14[8])
  {
    if (v14[16]) {
      (*(void (**)(void))(**(void **)&v14[8] + 40))();
    }
    memset(&v14[8], 0, 32);
  }
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  size_t v9 = strlen(a2);
  *(void *)v14 = a2;
  *(void *)&v14[8] = v9;
  v10 = re::DynamicString::operator=((re::DynamicString *)&v34, (uint64_t)v14);
  re::RealityFileAssetLoadDescriptorFactory::make(v27, (re::DynamicString *)&v25, (uint64_t)v14);
  v11.n128_f64[0] = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>((re *)&v24, (uint64_t)v14);
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(double))(*(void *)v22 + 40))(v11.n128_f64[0]);
    }
    __n128 v11 = 0uLL;
    long long v22 = 0u;
    long long v23 = 0u;
  }
  if (v17)
  {
    if (v21) {
      (*(void (**)(__n128))(*(void *)v17 + 40))(v11);
    }
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    ++v20;
  }
  if (*(void *)&v14[32])
  {
    if (*((void *)&v16 + 1)) {
      (*(void (**)(__n128))(**(void **)&v14[32] + 40))(v11);
    }
    *((void *)&v16 + 1) = 0;
    long long v15 = 0uLL;
    *(void *)&v14[32] = 0;
    LODWORD(v16) = v16 + 1;
  }
  if (*(void *)v14)
  {
    if (v14[8]) {
      (*(void (**)(__n128))(**(void **)v14 + 40))(v11);
    }
    __n128 v11 = 0uLL;
    memset(v14, 0, 32);
  }
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v25 + 40))(v11);
  }
  uint64_t v12 = v24;
  if ((void)v34)
  {
    if (BYTE8(v34)) {
      (*(void (**)(__n128))(*(void *)v34 + 40))(v11);
    }
    __n128 v11 = 0uLL;
    long long v34 = 0u;
    long long v35 = 0u;
  }
  if ((void)v32)
  {
    if (BYTE8(v32)) {
      (*(void (**)(__n128))(*(void *)v32 + 40))(v11);
    }
    __n128 v11 = 0uLL;
    long long v32 = 0u;
    long long v33 = 0u;
  }
  if (v28 && (v29 & 1) != 0) {
    (*(void (**)(__n128))(*v28 + 40))(v11);
  }
  return v12;
}

uint64_t REAssetManagerCreateURLBasedRealityFileAssetDescriptor(uint64_t a1, _anonymous_namespace_ *a2, const char *a3)
{
  v6 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"sourcepath:%s", (re::DynamicString *)&v23, a3);
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v16, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  long long v22 = 0;
  if (v24) {
    v8 = *(char **)&v25[7];
  }
  else {
    v8 = v25;
  }
  double v9 = re::AssetPath::parse((re::AssetPath *)&v15, v8, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v12);
  if (!v12[0] && (void)v13)
  {
    if (BYTE8(v13)) {
      (*(void (**)(double))(*(void *)v13 + 40))(v9);
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  uint64_t v10 = RERealityFileAssetDescriptorCreateFromURL(a2, a3, *v22);
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    long long v20 = 0u;
    long long v21 = 0u;
  }
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  return v10;
}

uint64_t RERealityFileAssetDescriptorCreateFromBundle(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v31, 0);
  *((void *)&v35 + 1) = 0;
  long long v36 = 0uLL;
  double v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v35, 0);
  *((void *)&v37 + 1) = 0;
  long long v38 = 0uLL;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v37, 0);
  char v39 = 0;
  uint64_t v40 = 1;
  v16[0] = 2;
  re::DynamicString::DynamicString((re::DynamicString *)&v16[8], (const re::DynamicString *)&v28);
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v26);
  v30[0] = 2;
  re::DynamicString::operator=((re::DynamicString *)&v31, (re::DynamicString *)&v16[8]);
  re::DynamicString::operator=((re::DynamicString *)&v35, (re::DynamicString *)&v17);
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    long long v17 = 0u;
    long long v18 = 0u;
  }
  if (*(void *)&v16[8])
  {
    if (v16[16]) {
      (*(void (**)(void))(**(void **)&v16[8] + 40))();
    }
    memset(&v16[8], 0, 32);
  }
  if (v26 && (v27 & 1) != 0) {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
  if (v28 && (v29 & 1) != 0) {
    (*(void (**)(void))(*(void *)v28 + 40))();
  }
  *(void *)long long v16 = a3;
  *(void *)&v16[8] = strlen(a3);
  uint64_t v12 = re::DynamicString::operator=((re::DynamicString *)&v37, (uint64_t)v16);
  re::RealityFileAssetLoadDescriptorFactory::make(v30, (re::DynamicString *)&v28, (uint64_t)v16);
  v13.n128_f64[0] = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>((re *)&v26, (uint64_t)v16);
  if ((void)v24)
  {
    if (BYTE8(v24)) {
      (*(void (**)(double))(*(void *)v24 + 40))(v13.n128_f64[0]);
    }
    __n128 v13 = 0uLL;
    long long v24 = 0u;
    long long v25 = 0u;
  }
  if (v19)
  {
    if (v23) {
      (*(void (**)(__n128))(*(void *)v19 + 40))(v13);
    }
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    ++v22;
  }
  if (*(void *)&v16[32])
  {
    if (*((void *)&v18 + 1)) {
      (*(void (**)(__n128))(**(void **)&v16[32] + 40))(v13);
    }
    *((void *)&v18 + 1) = 0;
    long long v17 = 0uLL;
    *(void *)&v16[32] = 0;
    LODWORD(v18) = v18 + 1;
  }
  if (*(void *)v16)
  {
    if (v16[8]) {
      (*(void (**)(__n128))(**(void **)v16 + 40))(v13);
    }
    __n128 v13 = 0uLL;
    memset(v16, 0, 32);
  }
  if (v28 && (v29 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v28 + 40))(v13);
  }
  uint64_t v14 = v26;
  if ((void)v37)
  {
    if (BYTE8(v37)) {
      (*(void (**)(__n128))(*(void *)v37 + 40))(v13);
    }
    __n128 v13 = 0uLL;
    long long v37 = 0u;
    long long v38 = 0u;
  }
  if ((void)v35)
  {
    if (BYTE8(v35)) {
      (*(void (**)(__n128))(*(void *)v35 + 40))(v13);
    }
    __n128 v13 = 0uLL;
    long long v35 = 0u;
    long long v36 = 0u;
  }
  if (v31 && (v32 & 1) != 0) {
    (*(void (**)(__n128))(*v31 + 40))(v13);
  }
  return v14;
}

uint64_t REFrameworkAssetDescriptorCreateFromBundle(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  re::FrameworkAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v13, (re::DynamicString *)&v11, (re::DynamicString *)v10, (uint64_t)v15);
  v8.n128_f64[0] = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>((re *)&v28, (uint64_t)v15);
  if ((void)v26)
  {
    if (BYTE8(v26)) {
      (*(void (**)(double))(*(void *)v26 + 40))(v8.n128_f64[0]);
    }
    __n128 v8 = 0uLL;
    long long v26 = 0u;
    long long v27 = 0u;
  }
  if (v21)
  {
    if (v25) {
      (*(void (**)(__n128))(*(void *)v21 + 40))(v8);
    }
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    ++v24;
  }
  if (v16)
  {
    if (v20) {
      (*(void (**)(__n128))(*(void *)v16 + 40))(v8);
    }
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    ++v19;
  }
  if (*(void *)&v15[0])
  {
    if (BYTE8(v15[0])) {
      (*(void (**)(__n128))(**(void **)&v15[0] + 40))(v8);
    }
    __n128 v8 = 0uLL;
    memset(v15, 0, sizeof(v15));
  }
  if (*(void *)&v10[0])
  {
    if (BYTE8(v10[0])) {
      (*(void (**)(__n128))(**(void **)&v10[0] + 40))(v8);
    }
    __n128 v8 = 0uLL;
    memset(v10, 0, sizeof(v10));
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v11 + 40))(v8);
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v13 + 40))(v8);
  }
  return v28;
}

uint64_t REBuiltinTextureAssetDescriptorCreate(re::BuiltinTextureAssetProvider *a1)
{
  re::BuiltinTextureAssetProvider::makeDescriptor(a1, (uint64_t)&v3);
  v1.n128_f64[0] = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>((re *)&v17, (uint64_t)&v3);
  if ((void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(double))(*(void *)v15 + 40))(v1.n128_f64[0]);
    }
    __n128 v1 = 0uLL;
    long long v15 = 0u;
    long long v16 = 0u;
  }
  if (v10)
  {
    if (v14) {
      (*(void (**)(__n128))(*(void *)v10 + 40))(v1);
    }
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    ++v13;
  }
  if (v5)
  {
    if (v9) {
      (*(void (**)(__n128))(*(void *)v5 + 40))(v1);
    }
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    ++v8;
  }
  if (v3 && (v4 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v3 + 40))(v1);
  }
  return v17;
}

uint64_t REAssetManagerCreateBundleBasedRealityFileAssetDescriptor(uint64_t a1, _anonymous_namespace_ *a2, const char *a3, const char *a4)
{
  int v8 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"sourcepath:%s", (re::DynamicString *)&v25, a4);
  int v17 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v22 + 1) = 0;
  long long v23 = 0uLL;
  re::DynamicString::setCapacity(&v22, 0);
  int v24 = 0;
  if (v26) {
    uint64_t v10 = *(char **)&v27[7];
  }
  else {
    uint64_t v10 = v27;
  }
  double v11 = re::AssetPath::parse((re::AssetPath *)&v17, v10, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v14);
  if (!v14[0] && (void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(double))(*(void *)v15 + 40))(v11);
    }
    long long v15 = 0u;
    long long v16 = 0u;
  }
  uint64_t v12 = RERealityFileAssetDescriptorCreateFromBundle(a2, a3, a4, *v24);
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    long long v22 = 0u;
    long long v23 = 0u;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*v18 + 40))();
  }
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  return v12;
}

uint64_t REAssetManagerRegisterAssetDescriptor(os_unfair_lock_s *a1, uint64_t *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v9, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v11, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v14, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)(a2 + 17));
  os_unfair_lock_lock(a1 + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, (const re::AssetLoadDescriptor *)&v9, v8);
  os_unfair_lock_unlock(a1 + 16);
  if (v8[0])
  {
    id v4 = (id)(v8[0] + 8);
    id v5 = (id)(v8[0] + 8);
    uint64_t v6 = v8[0];
  }
  else
  {
    uint64_t v6 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  if (v17[0])
  {
    if (v17[1]) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    memset(v17, 0, sizeof(v17));
  }
  if (v14[0])
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    uint64_t v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (v11[0])
  {
    if (v13) {
      (*(void (**)(void))(*(void *)v11[0] + 40))();
    }
    uint64_t v13 = 0;
    memset(v11, 0, sizeof(v11));
    ++v12;
  }
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v6;
}

uint64_t REAssetHandleCreateWithAssetDescriptor(os_unfair_lock_s *a1, uint64_t *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v10, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v13, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)v16, (const re::DynamicString *)(a2 + 17));
  os_unfair_lock_lock(a1 + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, (const re::AssetLoadDescriptor *)&v8, v7);
  os_unfair_lock_unlock(a1 + 16);
  uint64_t v4 = v7[0];
  if (v7[0]) {
    id v5 = (id)(v7[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  if (v16[0])
  {
    if (v16[1]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))();
    }
    memset(v16, 0, sizeof(v16));
  }
  if (v13[0])
  {
    if (v15) {
      (*(void (**)(void))(*(void *)v13[0] + 40))();
    }
    uint64_t v15 = 0;
    memset(v13, 0, sizeof(v13));
    ++v14;
  }
  if (v10[0])
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    ++v11;
  }
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return v4;
}

uint64_t REAssetHandleGetAndRetainImmutableWithAssetDescriptor(re::AssetManager *a1, uint64_t a2)
{
  re::AssetManager::existingImmutableAssetHandle(a1, (const re::AssetLoadDescriptor *)(a2 + 24), (uint64_t)v5);
  if (!v5[0]) {
    return 0;
  }
  uint64_t v2 = v6[0];
  id v3 = (id)(v6[0] + 8);
  if (v5[0]) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  }
  return v2;
}

uint64_t REAssetHandleGetOrCreateImmutableWithAssetDescriptors(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v14 = 0;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      uint64_t v6 = *a2++;
      re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v12, (re::DynamicString *)(v6 + 24));
      --v4;
    }
    while (v4);
  }
  re::AssetManager::assetHandle(a1, v12, (uint64_t)v10);
  if (v10[0])
  {
    uint64_t v7 = v11[0];
    if (!v11[0] || (id v8 = (id)(v11[0] + 8), v10[0])) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v12);
  return v7;
}

uint64_t REAssetHandleCreateNewImmutableWithAssetDescriptors(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v15 = 0;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      uint64_t v6 = *a2++;
      re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v13, (re::DynamicString *)(v6 + 24));
      --v4;
    }
    while (v4);
  }
  re::AssetManager::createNewImmutableAssetHandle(a1, v13, 0, (uint64_t)v11);
  if (v11[0])
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)v12);
    uint64_t v7 = v10[0];
    if (v10[0]) {
      id v8 = (id)(v10[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
    if (v11[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v13);
  return v7;
}

uint64_t REAssetHandleCreateNewMutableWithAssetDescriptors(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      uint64_t v6 = *a2++;
      re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v11, (re::DynamicString *)(v6 + 24));
      --v4;
    }
    while (v4);
  }
  re::AssetManager::createNewMutableAssetHandle(a1, v11, 0, 1, (re::AssetHandle *)v10);
  uint64_t v7 = v10[0];
  if (v10[0]) {
    id v8 = (id)(v10[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v11);
  return v7;
}

uint64_t REAssetProviderCompiledDataLoadContextGetDescriptor(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t REAssetProviderCompiledDataLoadContextGetAssetId(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *REAssetManagerLoadRawDataForAssetDescriptor(uint64_t a1, uint64_t a2)
{
  buf[3] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 32)) {
    id v3 = *(const char **)(a2 + 40);
  }
  else {
    id v3 = (const char *)(a2 + 33);
  }
  RawProviderForScheme = re::AssetProviderRegistry::tryGetRawProviderForScheme(*(os_unfair_lock_s **)(a1 + 1128), v3);
  if (!RawProviderForScheme) {
    return 0;
  }
  uint64_t v5 = RawProviderForScheme[7];
  if (!v5) {
    return 0;
  }
  v13[2] = 0;
  buf[0] = a2 + 24;
  uint64_t v6 = (re *)(*(void *(**)(void *__return_ptr))(*(void *)v5 + 16))(v13);
  uint64_t v7 = (void *)v13[1];
  if (!LOBYTE(v13[0]))
  {
    id v8 = *re::assetsLogObjects(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      char v10 = v8;
      id v11 = [v7 description];
      uint64_t v12 = [v11 UTF8String];
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v12;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to load data: %s", (uint8_t *)buf, 0xCu);
    }
    return 0;
  }
  return v7;
}

uint64_t REAssetManagerResolveAssetDescriptor(uint64_t a1, uint64_t a2, re::path *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 32)) {
    uint64_t v6 = *(const char **)(a2 + 40);
  }
  else {
    uint64_t v6 = (const char *)(a2 + 33);
  }
  uint64_t v7 = re::path::ext(this, (const char *)a2);
  if (v7
    && *(unsigned char *)v7 == 46
    && (id v8 = (const char **)re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(*(re::internal::AssetTypeRegistry **)(a1 + 1040), (const char *)(v7 + 1))) != 0)
  {
    char v9 = *v8;
  }
  else
  {
    char v9 = "raw";
  }
  RawProviderForScheme = (re *)re::AssetProviderRegistry::tryGetRawProviderForScheme(*(os_unfair_lock_s **)(a1 + 1128), v6);
  if (RawProviderForScheme && (RawProviderForScheme = (re *)*((void *)RawProviderForScheme + 17)) != 0)
  {
    uint64_t v21 = this;
    *(void *)long long v22 = a2 + 24;
    uint64_t v20 = v9;
    id v11 = (re *)(*(void *(**)(uint8_t *__return_ptr))(*(void *)RawProviderForScheme + 16))(buf);
    if (buf[0])
    {
      re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)&v24[4], v22);
      uint64_t v12 = *(void *)v22;
    }
    else
    {
      int v14 = *(void **)&v24[4];
      uint64_t v15 = *re::assetsLogObjects(v11);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v17 = v15;
        id v18 = [v14 description];
        uint64_t v19 = [v18 UTF8String];
        *(_DWORD *)long long v22 = 136315138;
        *(void *)&v22[4] = v19;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Failed to resolve descriptor: %s", v22, 0xCu);
      }
      uint64_t v12 = 0;
    }
    re::Optional<re::AssetLoadDescriptor>::~Optional(buf);
  }
  else
  {
    uint64_t v13 = *re::assetsLogObjects(RawProviderForScheme);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)int v24 = v6;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "No raw resolve callback registered for %s", buf, 0xCu);
    }
    return 0;
  }
  return v12;
}

uint64_t REAssetProviderCompiledDataLoadContextGetFromPeerId(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t REAssetProviderBuilderCreate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(void *)(v3 + 80) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E7350D8;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  re::DynamicString::setCapacity((void *)(v3 + 24), 0);
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  v6[0] = a1;
  v6[1] = strlen((const char *)a1);
  re::DynamicString::operator=((re::DynamicString *)(v3 + 24), (uint64_t)v6);
  return v3;
}

uint64_t REAssetProviderBuilderSetUserData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

void REAssetProviderBuilderSetCopyCompiledDataCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;
}

void REAssetProviderBuilderSetREAssetRefLoadCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v3;
}

void REAssetProviderBuilderSetCompiledDataLoadCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;
}

void REAssetProviderBuilderSetAssetDescriptorResolveChildCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v3;
}

BOOL REAssetManagerRegisterAssetProviderBuilder(re::AssetManager *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(const void **)(a2 + 64);
  if (!v4 && !*(void *)(a2 + 80)) {
    return 0;
  }
  uint64_t v5 = (re *)_Block_copy(v4);
  uint64_t v38 = re::globalAllocators(v5)[2];
  char v39 = 0;
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable((uint64_t)v37);
    v37[0] = &unk_26E735120;
    v37[1] = v6;
    v37[2] = a1;
    char v39 = v37;
  }
  uint64_t v7 = (re *)_Block_copy(*(const void **)(a2 + 80));
  uint64_t v35 = re::globalAllocators(v7)[2];
  long long v36 = 0;
  if (v7)
  {
    id v8 = _Block_copy(v7);
    re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable((uint64_t)v34);
    v34[0] = &unk_26E735178;
    v34[1] = v8;
    v34[2] = a1;
    long long v36 = v34;
  }
  char v9 = (re *)_Block_copy(*(const void **)(a2 + 72));
  char v10 = re::globalAllocators(v9);
  uint64_t v32 = v10[2];
  uint64_t v33 = 0;
  if (v9)
  {
    id v11 = _Block_copy(v9);
    char v10 = (uint64_t *)re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable((uint64_t)v31);
    v31[0] = &unk_26E7351E0;
    v31[1] = v11;
    uint64_t v33 = v31;
  }
  uint64_t v12 = re::globalAllocators((re *)v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 192, 8);
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v13, 0);
  *(void *)uint64_t v13 = &unk_26E6CB708;
  uint64_t v15 = re::globalAllocators(v14);
  *(void *)(v13 + 48) = v15[2];
  *(void *)(v13 + 56) = 0;
  uint64_t v16 = re::globalAllocators((re *)v15);
  *(void *)(v13 + 88) = v16[2];
  *(void *)(v13 + 96) = 0;
  int v17 = re::globalAllocators((re *)v16);
  *(void *)(v13 + 128) = v17[2];
  *(void *)(v13 + 168) = 0;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  re::DynamicString::setCapacity((void *)(v13 + 144), 0);
  if (*(unsigned char *)(a2 + 32)) {
    id v18 = *(char **)(a2 + 40);
  }
  else {
    id v18 = (char *)(a2 + 33);
  }
  uint64_t v19 = *((void *)a1 + 130);
  uint64_t v29 = v38;
  uint64_t v30 = 0;
  re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::operator=<24ul>((uint64_t)v28, (uint64_t)v37);
  uint64_t v26 = v35;
  uint64_t v27 = 0;
  re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::operator=<24ul>((uint64_t)v25, (uint64_t)v34);
  uint64_t v23 = v32;
  uint64_t v24 = 0;
  re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::operator=<24ul>((uint64_t)v22, (uint64_t)v31);
  re::RawAssetProvider::init(v13, v18, v19, (uint64_t)v28, (uint64_t)v25, (uint64_t)v22);
  re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable((uint64_t)v22);
  re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable((uint64_t)v25);
  re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable((uint64_t)v28);
  BOOL v20 = re::AssetManager::registerAssetProvider(a1, (re::AssetProvider *)v13);

  re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable((uint64_t)v31);
  re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable((uint64_t)v34);

  re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable((uint64_t)v37);
  return v20;
}

double re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor>(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 168, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(void *)uint64_t v5 = &unk_26E6C91E0;
  double result = 0.0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 48) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(v5 + 24) = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 40);
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v8;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v9;
  *(void *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 80) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 56) = 0;
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(v5 + 56) = *(void *)(a2 + 32);
  *(void *)(v5 + 64) = v11;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v12 = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v12;
  uint64_t v13 = *(void *)(v5 + 88);
  *(void *)(v5 + 88) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v13;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(v5 + 80);
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 120) = 0;
  uint64_t v14 = *(void *)(a2 + 80);
  *(void *)(v5 + 96) = *(void *)(a2 + 72);
  *(void *)(v5 + 104) = v14;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v15 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v15;
  uint64_t v16 = *(void *)(v5 + 128);
  *(void *)(v5 + 128) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v16;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(v5 + 120);
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(void *)(v5 + 160) = *(void *)(a2 + 136);
  uint64_t v17 = *(void *)(a2 + 120);
  *(void *)(v5 + 136) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v18 = *(void *)(a2 + 128);
  *(void *)(a2 + 136) = 0;
  uint64_t v20 = *(void *)(v5 + 144);
  uint64_t v19 = *(void *)(v5 + 152);
  *(void *)(v5 + 144) = v17;
  *(void *)(v5 + 152) = v18;
  *(void *)(a2 + 120) = v20;
  *(void *)(a2 + 128) = v19;
  *(void *)a1 = v5;
  return result;
}

void AssetProviderBuilder::~AssetProviderBuilder(id *this)
{
  AssetProviderBuilder::~AssetProviderBuilder(this);
  JUMPOUT(0x237DBCBD0);
}

{
  *this = &unk_26E7350D8;

  re::DynamicString::deinit((re::DynamicString *)(this + 3));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor const&>((re *)&v12, *a2);
  uint64_t v7 = v12;
  v11[2] = v12;
  uint64_t v11[3] = v6;
  re::AssetManager::fromPeerID(*(os_unfair_lock_s **)(a1 + 16), v6, (uint64_t)v11);
  if (LOBYTE(v11[0])) {
    uint64_t v8 = v11[1];
  }
  else {
    uint64_t v8 = 0;
  }
  v11[4] = v8;
  v11[0] = 0;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  if (v7) {

  }
  uint64_t v10 = v11[0];
  if (!v11[0]) {
    uint64_t v10 = v9;
  }
  *(unsigned char *)a4 = v11[0] == 0;
  *(void *)(a4 + 8) = v10;
}

void *re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735120;
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E735120;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_0,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::size()
{
  return 24;
}

re::DynamicString *re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor const&>(re *a1, uint64_t *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 168, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *uint64_t v5 = &unk_26E6C91E0;
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 3), (const re::DynamicString *)a2);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v5 + 7), a2 + 4);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v5 + 12), a2 + 9);
  double result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 17), (const re::DynamicString *)(a2 + 14));
  *(void *)a1 = v5;
  return result;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

CFErrorRef re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::operator()(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor const&>((re *)&v11, *a2);
  uint64_t v5 = v11;
  _OWORD v10[2] = v11;
  void v10[3] = v4;
  re::AssetManager::fromPeerID(*(os_unfair_lock_s **)(a1 + 16), v4, (uint64_t)v10);
  if (LOBYTE(v10[0])) {
    uint64_t v6 = v10[1];
  }
  else {
    uint64_t v6 = 0;
  }
  v10[4] = v6;
  v10[0] = 0;
  int v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  if (v5) {

  }
  CFErrorRef result = (CFErrorRef)v10[0];
  if (v10[0]) {
    int v9 = 1;
  }
  else {
    int v9 = v7;
  }
  if (v9 != 1) {
    return CFErrorCreate(0, @"REAssetRefErrorDomain", 3, 0);
  }
  return result;
}

void *re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735178;
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E735178;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_1,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::size()
{
  return 24;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor const&>((re *)&v36, *a2);
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v5, (uint64_t *)&v35);
  uint64_t v34 = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v36;
  (*(void (**)(void))(v6 + 16))();
  if (v7) {

  }
  uint64_t v8 = v35;
  re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)(v35 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v27, v8 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v30, v8 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)v33, (const re::DynamicString *)(v8 + 17));
  if (v35)
  {

    uint64_t v35 = 0;
  }
  uint64_t v9 = v34;
  if (v34)
  {
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v9;
  }
  else
  {
    re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)&v11, (const re::AssetLoadDescriptor *)&v25);
    v10.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a3, (uint64_t)&v11);
    if ((void)v23)
    {
      if (BYTE8(v23)) {
        (*(void (**)(double))(*(void *)v23 + 40))(v10.n128_f64[0]);
      }
      __n128 v10 = 0uLL;
      long long v23 = 0u;
      long long v24 = 0u;
    }
    if (v18)
    {
      if (v22) {
        (*(void (**)(__n128))(*(void *)v18 + 40))(v10);
      }
      uint64_t v22 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      ++v21;
    }
    if (v13)
    {
      if (v17) {
        (*(void (**)(__n128))(*(void *)v13 + 40))(v10);
      }
      uint64_t v17 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      ++v16;
    }
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v11 + 40))(v10);
    }
  }
  if (v33[0])
  {
    if (v33[1]) {
      (*(void (**)(void))(*(void *)v33[0] + 40))();
    }
    memset(v33, 0, sizeof(v33));
  }
  if (v30[0])
  {
    if (v32) {
      (*(void (**)(void))(*(void *)v30[0] + 40))();
    }
    uint64_t v32 = 0;
    memset(v30, 0, sizeof(v30));
    ++v31;
  }
  if (v27[0])
  {
    if (v29) {
      (*(void (**)(void))(*(void *)v27[0] + 40))();
    }
    uint64_t v29 = 0;
    memset(v27, 0, sizeof(v27));
    ++v28;
  }
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  if (v35) {
}
  }

void *re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7351E0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7351E0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetProviderBuilder::$_2,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::size()
{
  return 16;
}

double REMakeDynamicOffset@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, double a5@<D3>, double a6@<D5>)
{
  int32x4_t v6 = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  *(float *)&a6 = *(float *)&a5 * 0.1;
  int32x4_t v7 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
  *(unsigned char *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(__n128 *)a1 = a2;
  *(__n128 *)(a1 + 16) = a3;
  *(__n128 *)(a1 + 32) = a4;
  *(__n128 *)(a1 + 48) = a2;
  *(__n128 *)(a1 + 64) = a3;
  *(__n128 *)(a1 + 80) = a4;
  *(__n128 *)(a1 + 96) = a2;
  *(__n128 *)(a1 + 112) = a3;
  *(__n128 *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x3F80000000000000;
  *(int32x4_t *)(a1 + 176) = v6;
  *(int32x4_t *)(a1 + 192) = v6;
  *(_DWORD *)(a1 + 208) = LODWORD(a5);
  *(void *)&long long v8 = 0x80000000800000;
  *((void *)&v8 + 1) = 0x80000000800000;
  int32x4_t v9 = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(a1 + 224) = v8;
  *(int32x4_t *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 256) = xmmword_23435FD80;
  *(void *)(a1 + 272) = 0x7F7FFFFFFF7FFFFFLL;
  int32x4_t v10 = vdupq_n_s32(0x3E4CCCCDu);
  *(_OWORD *)(a1 + 288) = v8;
  *(int32x4_t *)(a1 + 304) = v9;
  *(_OWORD *)(a1 + 320) = 0u;
  *(int32x4_t *)(a1 + 336) = v10;
  *(int32x4_t *)(a1 + 352) = v7;
  double result = 0.125;
  *(void *)(a1 + 368) = 0x3FC0000000000000;
  *(float *)(a1 + 376) = *(float *)&a5 * 0.1;
  *(_OWORD *)(a1 + 384) = 0u;
  *(int32x4_t *)(a1 + 400) = v10;
  *(int32x4_t *)(a1 + 416) = v7;
  *(_OWORD *)(a1 + 432) = 0u;
  return result;
}

uint64_t REDynamicOffsetIsInteraction(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 528);
}

double REDynamicOffsetCalculateConstrainedPose(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  re::DynamicOffsetF::calculateConstrainedPose(a1, v5, &v4);
  return *(double *)v4.i64;
}

double REDynamicOffsetCalculateConstrainedScale(float32x4_t *a1, float32x4_t a2)
{
  a2.i32[3] = 0;
  float32x4_t v2 = a1[18];
  float32x4_t v3 = a1[19];
  v2.i32[3] = 0;
  float32x4_t v4 = vmaxnmq_f32(a2, v2);
  v4.i32[3] = 0;
  v3.i32[3] = 0;
  *(void *)&double result = vminnmq_f32(v4, v3).u64[0];
  return result;
}

int32x4_t REDynamicOffsetStartInteraction(long long *a1)
{
  long long v1 = *a1;
  long long v2 = a1[1];
  a1[3] = *a1;
  a1[4] = v2;
  long long v3 = a1[2];
  a1[5] = v3;
  a1[6] = v1;
  a1[7] = v2;
  a1[8] = v3;
  int32x4_t result = vdupq_n_s32(0x7F7FFFFFu);
  a1[31] = (__int128)result;
  a1[32] = (__int128)result;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[30] = (__int128)result;
  *((unsigned char *)a1 + 528) = 1;
  return result;
}

void REDynamicOffsetUpdateInteraction(uint64_t a1, __n128 a2, __n128 a3, float32x4_t a4, float a5)
{
  v6[0] = a2;
  v6[1] = a3;
  float32x4_t v5 = a4;
  a2.n128_f32[0] = a5;
  re::DynamicOffsetF::updateInteraction(a1, (uint64_t)v6, &v5, a2.n128_f64[0]);
}

double REDynamicOffsetEndInteraction(float32x4_t *a1)
{
  *(void *)&double result = re::DynamicOffsetF::endInteraction(a1, 0.1).n128_u64[0];
  return result;
}

uint64_t REMemoryStatisticsGetGlobalStatistics(re *a1)
{
  long long v1 = re::globalMemoryTracker(a1);
  re::MemoryTracker::statistics((os_unfair_lock_s *)v1);
  return v2;
}

void REMemoryStatisticsLogGlobalLeaks(re *a1)
{
  long long v1 = re::globalMemoryTracker(a1);
  re::MemoryTracker::logMemoryLeaks((os_unfair_lock_s *)v1);
}

void *REAREnvironmentProbeComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *REProbeClusterExclusionComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REAREnvironmentProbeComponentSetTexture(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAREnvironmentProbeComponentGetTexture(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

__n128 REAREnvironmentProbeComponentGetExtents(__n128 *a1)
{
  return a1[4];
}

uint64_t REAREnvironmentProbeComponentSetExtents(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 64) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REAREnvironmentProbeComponentGetUseAsBackground(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t REAREnvironmentProbeComponentSetUseAsBackground(uint64_t this, char a2)
{
  *(unsigned char *)(this + 80) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REAREnvironmentProbeComponentGetClippingPointLux(uint64_t a1)
{
  return *(float *)(a1 + 84);
}

uint64_t REAREnvironmentProbeComponentSetClippingPointLux(uint64_t this, float a2)
{
  *(float *)(this + 84) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REAREnvironmentProbeComponentGetIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 296);
}

uint64_t REAREnvironmentProbeComponentGetPriority(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t REAREnvironmentProbeComponentSetPriority(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REAREnvironmentProbeComponentGetWeight(uint64_t a1)
{
  return *(float *)(a1 + 88);
}

uint64_t REAREnvironmentProbeComponentSetWeight(uint64_t this, float a2)
{
  *(float *)(this + 88) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

id REResourceFetchServiceCopyEndpoint(uint64_t a1)
{
  (*(void (**)(id *__return_ptr))(*(void *)a1 + 16))(&v3);
  long long v1 = [v3 _endpoint];

  return v1;
}

void REResourceSharingServiceConnectWithPeerEndpoint(uint64_t a1, void *a2, uint64_t a3)
{
  float32x4_t v5 = (objc_class *)MEMORY[0x263F08D98];
  id v6 = a2;
  id v8 = objc_alloc_init(v5);

  [v8 _setEndpoint:v6];
  uint64_t v7 = *(void (**)(uint64_t, id *, uint64_t))(*(void *)a1 + 16);

  v7(a1, &v8, a3);
}

uint64_t REPeerIDArrayGetSize(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REPeerIDArrayGetIDAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 56) + 8 * a2);
}

uint64_t REResourceSharingServiceCopyConnectedPeers(uint64_t a1)
{
  re::make::shared::object<SharedPeerIDArray>((re *)&v5);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 24))(v4, a1);
  uint64_t v2 = v5;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v5 + 24, (uint64_t)v4);
  if (v4[0] && v4[4]) {
    (*(void (**)(void))(*(void *)v4[0] + 40))();
  }
  return v2;
}

uint64_t REResourceFetchServiceCopyConnectedPeers(uint64_t a1)
{
  re::make::shared::object<SharedPeerIDArray>((re *)&v5);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 40))(v4, a1);
  uint64_t v2 = v5;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v5 + 24, (uint64_t)v4);
  if (v4[0] && v4[4]) {
    (*(void (**)(void))(*(void *)v4[0] + 40))();
  }
  return v2;
}

uint64_t REResourceFetchServiceTaskIdentifierForPeerID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t REResourceSharingServiceSendReferenceObject(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t (***REResourceFetchServiceSetReferenceObjectHandler(uint64_t a1, void *a2))(void)
{
  void v11[5] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (re *)_Block_copy(v3);
  uint64_t v5 = re::globalAllocators(v4)[2];
  v11[0] = &unk_26E735238;
  v11[1] = v4;
  uint64_t v11[3] = v5;
  v11[4] = v11;
  uint64_t v9 = v5;
  uint64_t v10 = 0;
  re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::operator=<24ul>((uint64_t)v8, (uint64_t)v11);
  id v6 = *(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 128);

  v6(a1, v8);
  re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable((uint64_t)v8);
  return re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable((uint64_t)v11);
}

uint64_t REResourceFetchServiceAddOnConnectionAddedCallback(uint64_t a1, void *a2)
{
  v12[5] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (re *)_Block_copy(v3);
  uint64_t v5 = re::globalAllocators(v4)[2];
  v12[0] = &unk_26E7352A0;
  v12[1] = v4;
  uint64_t v12[3] = v5;
  v12[4] = v12;
  uint64_t v10 = v5;
  uint64_t v11 = 0;
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v9, (uint64_t)v12);
  id v6 = *(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 136);

  uint64_t v7 = v6(a1, v9);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v9);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v12);
  return v7;
}

uint64_t REResourceFetchServiceRemoveOnConnectionAddedCallback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback(uint64_t a1, void *a2)
{
  v12[5] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (re *)_Block_copy(v3);
  uint64_t v5 = re::globalAllocators(v4)[2];
  v12[0] = &unk_26E735308;
  v12[1] = v4;
  uint64_t v12[3] = v5;
  v12[4] = v12;
  uint64_t v10 = v5;
  uint64_t v11 = 0;
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v9, (uint64_t)v12);
  id v6 = *(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 152);

  uint64_t v7 = v6(a1, v9);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v9);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v12);
  return v7;
}

uint64_t REResourceFetchServiceRemoveOnConnectionInterruptedOrInvalidatedCallback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735238;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E735238;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REResourceFetchServiceSetReferenceObjectHandler::$_0,void ()(NSObject  {objcproto13OS_xpc_object}*)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  return (*(uint64_t (**)(void, uint64_t, _OWORD *, void))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), v4, v7, *a4);
}

void *re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7352A0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7352A0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionAddedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  return (*(uint64_t (**)(void, uint64_t, _OWORD *, void))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), v4, v7, *a4);
}

void *re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735308;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E735308;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REResourceFetchServiceAddOnConnectionInterruptedOrInvalidatedCallback::$_0,void ()(int,audit_token_t,unsigned long long)>::size()
{
  return 16;
}

void re::make::shared::object<SharedPeerIDArray>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E735360;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void SharedPeerIDArray::~SharedPeerIDArray(SharedPeerIDArray *this)
{
  *(void *)this = &unk_26E735360;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E735360;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *RERigidBodyComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float RERigidBodyComponentGetMassFrame@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  long long v5 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)a3 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 64);
  float result = *(float *)(v4 + 80);
  *(float *)(a3 + 48) = result;
  return result;
}

uint64_t RERigidBodyComponentSetMassFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  int v4 = *(_DWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 64) = v5;
  *(_DWORD *)(v3 + 80) = v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetMaterial(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 96);
}

uint64_t RERigidBodyComponentSetMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v3 + 96) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetMotionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 120);
}

uint64_t RERigidBodyComponentSetMotionType(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(_DWORD *)(v3 + 120) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetCCDEnabled(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 132);
}

uint64_t RERigidBodyComponentSetCCDEnabled(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 132) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

float RERigidBodyComponentGetCCDVelocityThreshold(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 136);
}

uint64_t RERigidBodyComponentSetCCDVelocityThreshold(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 136) = a3;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t RERigidBodyComponentGetLockRotationX(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 140);
}

uint64_t RERigidBodyComponentSetLockRotationX(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 140) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetLockRotationY(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 141);
}

uint64_t RERigidBodyComponentSetLockRotationY(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 141) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetLockRotationZ(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 142);
}

uint64_t RERigidBodyComponentSetLockRotationZ(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 142) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetLockTranslationX(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 143);
}

uint64_t RERigidBodyComponentSetLockTranslationX(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 143) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetLockTranslationY(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 144);
}

uint64_t RERigidBodyComponentSetLockTranslationY(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 144) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetLockTranslationZ(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 145);
}

uint64_t RERigidBodyComponentSetLockTranslationZ(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 145) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetCanSleep(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 146);
}

uint64_t RERigidBodyComponentSetCanSleep(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 146) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetRemoteAuthorityAllowed(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 147);
}

uint64_t RERigidBodyComponentSetRemoteAuthorityAllowed(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 147) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetRigidBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    long long v6 = *(const re::ecs2::Scene **)(v5 + 16);
    if (v6) {
      re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(v6, v2);
    }
  }
  return *(void *)(v3 + 336);
}

uint64_t RERigidBodyGetEntity(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 72) + 40);
}

uint64_t RERigidBodyComponentTeleport(uint64_t a1, uint64_t a2)
{
  char v2 = (re::ecs2::RigidBodyComponent *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::ecs2::RigidBodyComponent::teleport(v2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v2);
}

uint64_t RERigidBodyComponentIncrementVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  ++*(_DWORD *)(v2 + 124);
  return re::ecs2::Component::enqueueMarkDirty(v2);
}

uint64_t RERigidBodyComponentSetLinearDamping(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 148) = a3;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

float RERigidBodyComponentGetLinearDamping(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 148);
}

uint64_t RERigidBodyComponentSetAngularDamping(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 152) = a3;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

float RERigidBodyComponentGetAngularDamping(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 152);
}

uint64_t RERigidBodyComponentSetGravityEnabled(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v3 + 156) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t RERigidBodyComponentGetGravityEnabled(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 156);
}

uint64_t RERigidBodyComponentAddUserForce(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3 = (float32x4_t *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  v3[10] = vaddq_f32(v3[10], a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

__n128 RERigidBodyComponentGetUserForce(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 160);
}

uint64_t RERigidBodyComponentAddUserTorque(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3 = (float32x4_t *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  v3[11] = vaddq_f32(v3[11], a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

__n128 RERigidBodyComponentGetUserTorque(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 176);
}

uint64_t RERigidBodyComponentAddUserLinearImpulse(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3 = (float32x4_t *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  v3[12] = vaddq_f32(v3[12], a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

__n128 RERigidBodyComponentGetUserLinearImpulse(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 192);
}

uint64_t RERigidBodyComponentAddUserAngularImpulse(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3 = (float32x4_t *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  v3[13] = vaddq_f32(v3[13], a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

__n128 RERigidBodyComponentGetUserAngularImpulse(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 208);
}

re::RealityFile **RERealityFileCreateByOpeningFileAtURL(__CFURL *a1, re::RealityFile **a2)
{
  if (v16) {
    uint64_t v3 = *(re::RealityFile **)&v17[7];
  }
  else {
    uint64_t v3 = (re::RealityFile *)v17;
  }
  re::RealityFile::makeByOpeningFileAtURL(v3, (uint64_t)v13);
  if (v13[0])
  {
    char v12 = v14;
    re::RealityFileDescriptor::makeWithURL((re::RealityFileDescriptor *)&v15, (uint64_t)v6);
    if ((void)v9)
    {
      if (BYTE8(v9)) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      long long v9 = 0u;
      long long v10 = 0u;
    }
    if (v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
    a2 = v11;
  }
  else if (a2)
  {
    uint64_t v4 = v14;
    *a2 = v4;
    if (v4) {
      CFRetain(v4);
    }
    a2 = 0;
  }
  re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v13);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  return a2;
}

void anonymous namespace'::toDynamicString(_anonymous_namespace_ *this, const __CFURL *a2)
{
  id v4 = [(__CFURL *)a2 absoluteString];
  uint64_t v3 = (_anonymous_namespace_ *)[v4 UTF8String];
}

uint64_t RERealityFileCreateByOpeningFileAtURLWithAliasName(uint64_t a1, const __CFURL *a2, const char *a3, CFErrorRef *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (v27) {
    uint64_t v7 = v29;
  }
  else {
    uint64_t v7 = (re::RealityFile *)v28;
  }
  re::RealityFile::makeByOpeningFileAtURL(v7, (uint64_t)v24);
  if (!v24[0])
  {
    if (a4)
    {
      uint64_t v13 = (__CFError *)v25;
      *a4 = v13;
      if (v13) {
        CFRetain(v13);
      }
    }
    goto LABEL_39;
  }
  long long v23 = (re::RealityFile *)v25;
  long long v9 = *(os_unfair_lock_s **)(a1 + 1232);
  re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)&v26);
  char v10 = re::NamedFileRegistry::registerFileNameAlias(v9, (uint64_t)v22, (const char *)v21);
  if (*(void *)&v21[0])
  {
    if (BYTE8(v21[0])) {
      (*(void (**)(void))(**(void **)&v21[0] + 40))();
    }
    memset(v21, 0, sizeof(v21));
  }
  uint64_t v11 = *(_anonymous_namespace_ **)&v22[0];
  if (*(void *)&v22[0])
  {
    if (BYTE8(v22[0])) {
      uint64_t v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v22[0] + 40))();
    }
    memset(v22, 0, sizeof(v22));
  }
  if (v10)
  {
    re::RealityFileDescriptor::makeWithNameAlias((const re::DynamicString *)v19, (uint64_t)buf);
    if ((void)v33)
    {
      if (BYTE8(v33)) {
        (*(void (**)(void, void))(*(void *)v33 + 40))(v33, v34);
      }
      long long v33 = 0u;
      long long v34 = 0u;
    }
    if (*(void *)&v31[4])
    {
      if (v31[12]) {
        (*(void (**)(void, void))(**(void **)&v31[4] + 40))(*(void *)&v31[4], v32);
      }
      *(_OWORD *)&v31[4] = 0u;
      long long v32 = 0u;
    }
    if (*(void *)&v19[0])
    {
      if (BYTE8(v19[0])) {
        (*(void (**)(void))(**(void **)&v19[0] + 40))();
      }
      memset(v19, 0, sizeof(v19));
    }
    uint64_t v12 = v20;
    goto LABEL_40;
  }
  if (!a4)
  {
LABEL_39:
    uint64_t v12 = 0;
    goto LABEL_40;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v14 = (id)CoreRELog::log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v27) {
      uint64_t v15 = v29;
    }
    else {
      uint64_t v15 = (re::RealityFile *)v28;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)int v31 = v15;
    *(_WORD *)&v31[8] = 2080;
    *(void *)&v31[10] = a3;
    _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "failed to register RealityFile %s, alias %s is already registered", buf, 0x16u);
  }

  uint64_t v12 = 0;
  *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 20, 0);
LABEL_40:
  re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v24);
  if (v26 && (v27 & 1) != 0) {
    (*(void (**)(uint64_t, re::RealityFile *, uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v29, v16, v17);
  }
  return v12;
}

_anonymous_namespace_::RealityFileWithDescriptor *RERealityFileCreateByOpeningFileInBundle(_anonymous_namespace_ *a1, const char *a2, CFErrorRef *a3)
{
  char v22 = 2;
  re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v20);
  re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)&v18);
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  LOBYTE(v15) = v22;
  re::DynamicString::DynamicString((re::DynamicString *)v16, (const re::DynamicString *)&v23);
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)&v25);
  if (v17[0])
  {
    if (v17[1]) {
      (*(void (**)(void))(*(void *)v17[0] + 40))(v17[0]);
    }
    memset(v17, 0, sizeof(v17));
  }
  if (v16[0])
  {
    if (v16[1]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    memset(v16, 0, sizeof(v16));
  }
  if ((void)v25)
  {
    if (BYTE8(v25)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(void *)v25 + 40))(v25, v26, v7, v8, v9, v10, v11, v12, v15);
    }
    long long v25 = 0u;
    long long v26 = 0u;
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  return v13;
}

_anonymous_namespace_::RealityFileWithDescriptor *anonymous namespace'::createFromRealityFileDescriptor(const re::RealityFileDescriptor *a1, os_unfair_lock_s *a2, os_unfair_lock_s *a3, CFErrorRef *a4)
{
  re::RealityFileDescriptor::getURL((uint64_t)a1, a2, a3, (uint64_t)v15);
  if (v15[0])
  {
    if (v17) {
      long long v6 = *(re::RealityFile **)&v18[7];
    }
    else {
      long long v6 = (re::RealityFile *)v18;
    }
    re::RealityFile::makeByOpeningFileAtURL(v6, (uint64_t)v13);
    if (v13[0])
    {
      uint64_t v8 = (re::RealityFile *)v14;
      uint64_t v9 = re::globalAllocators(v7);
      uint64_t v10 = (_anonymous_namespace_::RealityFileWithDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 104, 8);
    }
    else
    {
      if (a4)
      {
        uint64_t v11 = (__CFError *)v14;
        *a4 = v11;
        if (v11) {
          CFRetain(v11);
        }
      }
      uint64_t v10 = 0;
    }
    re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v13);
  }
  else
  {
    uint64_t v10 = 0;
    if (a4) {
      *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 10, 0);
    }
  }
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  return v10;
}

_anonymous_namespace_::RealityFileWithDescriptor *RERealityFileCreateWithFileInBundle(os_unfair_lock_s **a1, const char *a2, const char *a3, CFErrorRef *a4)
{
  char v18 = 2;
  re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v16);
  re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)&v14);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  v11[0] = v18;
  re::DynamicString::DynamicString((re::DynamicString *)v12, (const re::DynamicString *)&v19);
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)v21);
  if (v13[0])
  {
    if (v13[1]) {
      (*(void (**)(void))(*(void *)v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  if (v12[0])
  {
    if (v12[1]) {
      (*(void (**)(void))(*(void *)v12[0] + 40))();
    }
    memset(v12, 0, sizeof(v12));
  }
  if (v21[0])
  {
    if (v21[1]) {
      (*(void (**)(void))(*(void *)v21[0] + 40))();
    }
    memset(v21, 0, sizeof(v21));
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  return v9;
}

char **RERealityFileMountFileAtURL(uint64_t a1, const __CFURL *a2, char **a3)
{
  id v4 = *(dispatch_queue_t **)(a1 + 1176);
  re::RealityFileRegistry::getOrMountRealityFile(v4, (const re::DynamicString *)&v18, (uint64_t)v16);
  if (v16[0])
  {
    uint64_t v5 = v17;
    char v15 = (re::RealityFile *)v17;
    if (v17) {
      long long v6 = v17 + 8;
    }
    re::RealityFileDescriptor::makeWithURL((re::RealityFileDescriptor *)&v18, (uint64_t)v9);
    if ((void)v12)
    {
      if (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      long long v12 = 0u;
      long long v13 = 0u;
    }
    if (v10 && (v11 & 1) != 0) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    a3 = v14;
    if (v5) {
  }
    }
  else if (a3)
  {
    uint64_t v7 = v17;
    *a3 = v7;
    if (v7) {
      CFRetain(v7);
    }
    a3 = 0;
  }
  re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v16);
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 40))(v18, v20);
  }
  return a3;
}

uint64_t RERealityFileMountFileAtURLWithAliasName(uint64_t a1, const __CFURL *a2, const char *a3, CFErrorRef *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(dispatch_queue_t **)(a1 + 1176);
  re::RealityFileRegistry::getOrMountRealityFile(v7, (const re::DynamicString *)&v27, (uint64_t)v25);
  if (v25[0])
  {
    uint64_t v9 = (char *)v26;
    char v24 = (re::RealityFile *)v26;
    if (v26) {
      uint64_t v8 = (char *)v26 + 8;
    }
    uint64_t v10 = *(os_unfair_lock_s **)(a1 + 1232);
    re::DynamicString::DynamicString((re::DynamicString *)v22, (const re::DynamicString *)&v27);
    char v11 = re::NamedFileRegistry::registerFileNameAlias(v10, (uint64_t)v23, (const char *)v22);
    if (*(void *)&v22[0])
    {
      if (BYTE8(v22[0])) {
        (*(void (**)(void))(**(void **)&v22[0] + 40))();
      }
      memset(v22, 0, sizeof(v22));
    }
    long long v12 = *(_anonymous_namespace_ **)&v23[0];
    if (*(void *)&v23[0])
    {
      if (BYTE8(v23[0])) {
        long long v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v23[0] + 40))();
      }
      memset(v23, 0, sizeof(v23));
    }
    if (v11)
    {
      re::RealityFileDescriptor::makeWithNameAlias((const re::DynamicString *)v20, (uint64_t)buf);
      if ((void)v34)
      {
        if (BYTE8(v34)) {
          (*(void (**)(void, void))(*(void *)v34 + 40))(v34, v35);
        }
        long long v34 = 0u;
        long long v35 = 0u;
      }
      if (*(void *)&v32[4])
      {
        if (v32[12]) {
          (*(void (**)(void, void))(**(void **)&v32[4] + 40))(*(void *)&v32[4], v33);
        }
        *(_OWORD *)&v32[4] = 0u;
        long long v33 = 0u;
      }
      if (*(void *)&v20[0])
      {
        if (BYTE8(v20[0])) {
          (*(void (**)(void))(**(void **)&v20[0] + 40))();
        }
        memset(v20, 0, sizeof(v20));
      }
      uint64_t v13 = v21;
      if (!v9) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    if (!a4)
    {
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (v28) {
        uint64_t v16 = v30;
      }
      else {
        uint64_t v16 = v29;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)long long v32 = v16;
      *(_WORD *)&v32[8] = 2080;
      *(void *)&v32[10] = a3;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "failed to register RealityFile %s, alias %s is already registered", buf, 0x16u);
    }

    uint64_t v13 = 0;
    *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 20, 0);
    if (v9) {
LABEL_40:
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v14 = (__CFError *)v26;
      *a4 = v14;
      if (v14) {
        CFRetain(v14);
      }
    }
    uint64_t v13 = 0;
  }
LABEL_41:
  re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v25);
  if (v27 && (v28 & 1) != 0) {
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v27 + 40))(v27, v30, v17, v18);
  }
  return v13;
}

uint64_t RERealityFileMountFileInBundle(uint64_t a1, const char *a2, const char *a3, CFErrorRef *a4)
{
  uint64_t v8 = *(dispatch_queue_t **)(a1 + 1176);
  v24[0] = 2;
  re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)&v19);
  re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)&v22);
  if (v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*(void *)v22 + 40))();
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  re::RealityFileDescriptor::getURL((uint64_t)v24, *(os_unfair_lock_s **)(a1 + 1232), *(os_unfair_lock_s **)(a1 + 1240), (uint64_t)&v19);
  if ((_BYTE)v19)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)&v20);
    re::RealityFileRegistry::getOrMountRealityFile(v8, (const re::DynamicString *)&v22, (uint64_t)v17);
    if (v17[0])
    {
      uint64_t v16 = (re::RealityFile *)v18;
      if (v18)
      {
        uint64_t v10 = (char *)v18 + 8;
        char v11 = (char *)v18 + 8;
        uint64_t v12 = v15;
      }
      else
      {
        uint64_t v12 = v15;
      }
    }
    else
    {
      if (a4)
      {
        uint64_t v13 = (__CFError *)v18;
        *a4 = v13;
        if (v13) {
          CFRetain(v13);
        }
      }
      uint64_t v12 = 0;
    }
    re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v17);
    if (v22 && (v23 & 1) != 0) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
  }
  else
  {
    uint64_t v12 = 0;
    *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 10, 0);
  }
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if (v27[0])
  {
    if (v27[1]) {
      (*(void (**)(void))(*(void *)v27[0] + 40))();
    }
    memset(v27, 0, sizeof(v27));
  }
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  return v12;
}

re::RealityFileDescriptor **RERealityFileMountFileFromBuffer(uint64_t a1, void *a2, re::RealityFileDescriptor **a3)
{
  id v4 = *(dispatch_queue_t **)(a1 + 1176);
  id v17 = a2;
  re::RealityFileRegistry::mountRealityFileFromBuffer(v4, (const re::Data *)&v17, (uint64_t)v15);
  if (v15[0])
  {
    uint64_t v5 = v16;
    re::RealityFileDescriptor::makeWithMemoryFileID(v16, (uint64_t)v10);
    re::RealityFileRegistry::tryGetRealityFile(v4, (uint64_t)v5, &v9);
    a3 = v8;
    if (v9) {

    }
    if ((void)v13)
    {
      if (BYTE8(v13)) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v13 = 0u;
      long long v14 = 0u;
    }
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  else
  {
    if (!a3)
    {
LABEL_16:

      goto LABEL_17;
    }
    long long v6 = v16;
    *a3 = v6;
    if (v6) {
      CFRetain(v6);
    }
    a3 = 0;
  }
  if (!v15[0]) {
    goto LABEL_16;
  }
LABEL_17:

  return a3;
}

void RERealityFileUnmountAllRealityFiles(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1176);
  char v2 = (uint64_t *)(v1 + 8);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v1 + 32));
  std::__list_imp<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>>::clear(v2);
}

uint64_t RERealityFileUnmount(unsigned char *a1, uint64_t a2)
{
  id v4 = *(dispatch_queue_t **)(a2 + 1176);
  v7[0] = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)v10, (const re::DynamicString *)(a1 + 72));
  uint64_t v5 = re::RealityFileRegistry::unmountRealityFile(v4, (re::RealityFileDescriptor *)v7, *(os_unfair_lock_s **)(a2 + 1232), *(os_unfair_lock_s **)(a2 + 1240));
  if (v10[0])
  {
    if (v10[1]) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    memset(v10, 0, sizeof(v10));
  }
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  if (v5) {

  }
  return v5;
}

unint64_t RERealityFileVerifyIntegrityAtUrl(__CFURL *a1, unint64_t a2)
{
  if ((uint64_t)v8[0]) {
    uint64_t v3 = (re *)v8[1];
  }
  else {
    uint64_t v3 = (re *)((char *)v8 + 1);
  }
  re::filePathWithURL(v3, (re::DynamicString *)&v9);
  if (v7 && ((uint64_t)v8[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  if (v10) {
    id v4 = *(re::RealityFile **)&v11[7];
  }
  else {
    id v4 = (re::RealityFile *)v11;
  }
  re::RealityFile::verifyRealityFileIntegrityAtURL(v4, &v7);
  if ((_BYTE)v7)
  {
    a2 = LOBYTE(v8[0]) != 0;
  }
  else
  {
    if (!a2)
    {
LABEL_17:

      goto LABEL_18;
    }
    id v5 = v8[0];
    *(void *)a2 = v5;
    if (v5) {
      CFRetain(v5);
    }
    a2 = 0;
  }
  if (!(_BYTE)v7) {
    goto LABEL_17;
  }
LABEL_18:
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return a2;
}

const void *RERealityFileGetURL(unsigned char *a1)
{
  uint64_t v1 = (const void *)RERealityFileCopyURL(a1);
  CFAutorelease(v1);
  return v1;
}

uint64_t RERealityFileCopyURL(unsigned char *a1)
{
  LOBYTE(v7) = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)v10, (const re::DynamicString *)(a1 + 72));
  re::RealityFileDescriptor::getURL((uint64_t)&v7, 0, 0, (uint64_t)v11);
  if (v10[0])
  {
    if (v10[1]) {
      (*(void (**)(void))(*(void *)v10[0] + 40))(v10[0]);
    }
    memset(v10, 0, sizeof(v10));
  }
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  if (v11[0])
  {
    if (v13) {
      char v2 = *(unsigned char **)&v14[7];
    }
    else {
      char v2 = v14;
    }
    uint64_t v3 = objc_msgSend(NSString, "stringWithUTF8String:", v2, v7);
    id v4 = [NSURL URLWithString:v3];
    uint64_t v5 = [v4 copy];
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Failed to get URL for RealityFile", (uint8_t *)&v7, 2u);
    }
    uint64_t v5 = 0;
  }

  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  return v5;
}

const void *RERealityFileGetURLFromDescriptor(unsigned char *a1, uint64_t a2)
{
  char v2 = (const void *)RERealityFileCopyURLFromDescriptor(a1, a2);
  CFAutorelease(v2);
  return v2;
}

uint64_t RERealityFileCopyURLFromDescriptor(unsigned char *a1, uint64_t a2)
{
  LOBYTE(v9) = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)v12, (const re::DynamicString *)(a1 + 72));
  re::RealityFileDescriptor::getURL((uint64_t)&v9, *(os_unfair_lock_s **)(a2 + 1232), *(os_unfair_lock_s **)(a2 + 1240), (uint64_t)v13);
  if (v12[0])
  {
    if (v12[1]) {
      (*(void (**)(void))(*(void *)v12[0] + 40))(v12[0]);
    }
    memset(v12, 0, sizeof(v12));
  }
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  if (v13[0])
  {
    if (v15) {
      id v4 = *(unsigned char **)&v16[7];
    }
    else {
      id v4 = v16;
    }
    uint64_t v5 = objc_msgSend(NSString, "stringWithUTF8String:", v4, v9);
    long long v6 = [NSURL URLWithString:v5];
    uint64_t v7 = [v6 copy];
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed to get URL for RealityFile", (uint8_t *)&v9, 2u);
    }
    uint64_t v7 = 0;
  }

  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v7;
}

uint64_t RERealityFileGetAssetDescriptorCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    char v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 112);

    if (v4) {
      return *(void *)(v4 + 200);
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x70];
    if (MEMORY[0x70]) {
      return *(void *)(v4 + 200);
    }
  }
  return 0;
}

BOOL RERealityFileGetCertifiedFreeOfChangeSceneActions(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    char v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 112);

    if (v4) {
      return *(unsigned char *)(v4 + 104) != 0;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x70];
    if (MEMORY[0x70]) {
      return *(unsigned char *)(v4 + 104) != 0;
    }
  }
  return 0;
}

uint64_t RERealityFileGetMajorVersionNumber(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    char v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 104);
  }
  else
  {
    uint64_t v4 = MEMORY[0x68];
  }
  return *(int *)(v4 + 96);
}

uint64_t RERealityFileGetTargetPlatform(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    char v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 104);
  }
  else
  {
    uint64_t v4 = MEMORY[0x68];
  }
  unsigned int v5 = *(_DWORD *)(v4 + 152);
  if (v5 - 1 >= 4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t RERealityFileGetOriginPlatform(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    char v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 104);
  }
  else
  {
    uint64_t v4 = MEMORY[0x68];
  }
  unsigned int v5 = *(_DWORD *)(v4 + 88);
  if (v5 - 1 >= 4) {
    return 0;
  }
  else {
    return v5;
  }
}

CFStringRef RERealityFileCopyMetadataString(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = *((void *)a1 + 3);
  if (v3)
  {
    uint64_t v4 = (void *)(v3 + 8);
    id v5 = (id)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 104);
  }
  else
  {
    uint64_t v6 = MEMORY[0x68];
  }
  v10[0] = 0;
  v10[1] = "";
  uint64_t v7 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v6 + 104, v10);
  re::StringID::destroyString((re::StringID *)v10);
  if (!v7) {
    return 0;
  }
  if (*(unsigned char *)(v7 + 8)) {
    uint64_t v8 = *(const char **)(v7 + 16);
  }
  else {
    uint64_t v8 = (const char *)(v7 + 9);
  }
  return CFStringCreateWithCString(0, v8, 0x8000100u);
}

uint64_t RERealityFileGetAssetDescriptorAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = (void *)(v3 + 8);
    id v5 = (id)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 112);

    if (!v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x70];
    if (!MEMORY[0x70]) {
      return 0;
    }
  }
  if (*(void *)(v6 + 200) > a2) {
    return *(void *)(*(void *)(v6 + 216) + 8 * a2);
  }
  return 0;
}

uint64_t RERealityFileGetAssetDescriptorWithFilename(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = (void *)(v3 + 8);
    id v5 = (id)(v3 + 8);
    uint64_t v6 = *(re::AssetMap **)(v3 + 112);
  }
  else
  {
    uint64_t v6 = (re::AssetMap *)MEMORY[0x70];
  }
  re::AssetMap::assetDescriptorWithFileName(v6, a2, &v9);
  uint64_t v7 = v9;
  if (v9) {

  }
  return v7;
}

uint64_t RERealityFileGetAssetDescriptorWithLabel(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  uint64_t AssetDescriptorWithAssetName = re::RealityFile::findAssetDescriptorWithAssetName((re::RealityFile *)v3, a2);
  uint64_t v6 = AssetDescriptorWithAssetName;
  if (AssetDescriptorWithAssetName) {
    id v7 = (id)(AssetDescriptorWithAssetName + 8);
  }
  if (v3) {

  }
  if (v6) {
  return v6;
  }
}

uint64_t realityFileCreateAssetDescriptorWithEntryNameAndPostLoad(unsigned char *a1, char *a2, char a3, uint64_t a4, re::AssetManager *a5, CFErrorRef *a6)
{
  LOBYTE(v17) = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v18, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)(a1 + 72));
  if ((void)v21)
  {
    if (BYTE8(v21)) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    long long v21 = 0u;
    long long v22 = 0u;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  if (v27[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)v28);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v20, v29);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v23, v30);
    uint64_t v12 = re::DynamicString::DynamicString((re::DynamicString *)v26, (const re::DynamicString *)&v31);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v12, &v16);
    uint64_t v13 = v16;
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), (re::DynamicString *)&v17);
    re::DynamicArray<BOOL>::operator=(v13 + 56, &v20);
    re::DynamicArray<BOOL>::operator=(v13 + 96, v23);
    re::DynamicString::operator=((re::DynamicString *)(v13 + 136), (re::DynamicString *)v26);
    uint64_t v14 = v16;
    if (v26[0])
    {
      if (v26[1]) {
        (*(void (**)(void))(*(void *)v26[0] + 40))();
      }
      memset(v26, 0, sizeof(v26));
    }
    if (v23[0])
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v23[0] + 40))();
      }
      uint64_t v25 = 0;
      memset(v23, 0, sizeof(v23));
      ++v24;
    }
    if (v20)
    {
      if (*((void *)&v22 + 1)) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
      *((void *)&v22 + 1) = 0;
      long long v21 = 0uLL;
      uint64_t v20 = 0;
      LODWORD(v22) = v22 + 1;
    }
    if (v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (a6 && !v28[0])
    {
      uint64_t v14 = 0;
      *a6 = CFErrorCreate(0, @"RERealityFileErrorDomain", 9, 0);
    }
  }
  re::Optional<re::AssetLoadDescriptor>::~Optional(v27);
  return v14;
}

uint64_t *anonymous namespace'::makeAssetLoadDescriptor(_anonymous_namespace_ *this, const re::RealityFileDescriptor *a2, char *a3, char a4, uint64_t a5, re::AssetManager *a6)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v42, 0);
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  uint64_t v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v46, 0);
  *((void *)&v48 + 1) = 0;
  long long v49 = 0uLL;
  re::DynamicString::setCapacity(&v48, 0);
  char v50 = 0;
  uint64_t v51 = 1;
  v41[0] = *(unsigned char *)a2;
  re::DynamicString::operator=((re::DynamicString *)&v42, (const re::RealityFileDescriptor *)((char *)a2 + 8));
  re::DynamicString::operator=((re::DynamicString *)&v46, (const re::RealityFileDescriptor *)((char *)a2 + 40));
  size_t v14 = strlen(a3);
  *(void *)&long long buf = a3;
  *((void *)&buf + 1) = v14;
  re::DynamicString::operator=((re::DynamicString *)&v48, (uint64_t)&buf);
  char v50 = a4;
  uint64_t v51 = a5;
  if (!a3
    || (uint64_t v16 = (re::internal::AssetTypeRegistry *)*((void *)a6 + 130),
        uint64_t v17 = (unsigned char *)re::path::ext((re::path *)a3, v15),
        *v17 != 46)
    || (uint64_t v18 = v17 + 1, !v17[1]))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v26 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = a3;
    char v28 = "Can't parse a file extension from the archive entry name %s.";
    goto LABEL_44;
  }
  uint64_t v19 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(v16, v18);
  if (!v19)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v26 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v18;
    char v28 = "Can't find a registered asset type for the file extension %s.";
LABEL_44:
    _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, 0xCu);
LABEL_26:

    *(unsigned char *)this = 0;
    *((_DWORD *)this + 2) = 0;
    goto LABEL_27;
  }
  uint64_t v20 = *(const char **)v19;
  re::RealityFileAssetLoadDescriptorFactory::make(v41, (re::DynamicString *)&v29, (uint64_t)&buf);
  if (v29 && (v30 & 1) != 0) {
    (*(void (**)(void))(*(void *)v29 + 40))();
  }
  re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)&v29, (const re::AssetLoadDescriptor *)&buf);
  *(unsigned char *)this = 1;
  *((void *)this + 1) = v29;
  uint64_t v29 = 0;
  long long v21 = v31;
  *((_OWORD *)this + 1) = v30;
  *((_OWORD *)this + 3) = v32;
  long long v22 = v35;
  *(_OWORD *)((char *)this + 72) = v34;
  long long v30 = 0u;
  long long v31 = 0u;
  *((_OWORD *)this + 2) = v21;
  long long v32 = 0u;
  ++v33;
  *((_DWORD *)this + 16) = 1;
  *(_OWORD *)((char *)this + 88) = v22;
  long long v34 = 0u;
  long long v35 = 0u;
  ++v36;
  *((_DWORD *)this + 26) = 1;
  *((_OWORD *)this + 7) = v37;
  long long v37 = 0u;
  uint64_t v23 = v40;
  uint64_t v25 = v38;
  uint64_t v24 = v39;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  *((void *)this + 17) = v24;
  *((void *)this + 18) = v23;
  *((void *)this + 16) = v25;
  if ((void)v63)
  {
    if (BYTE8(v63)) {
      (*(void (**)(void))(*(void *)v63 + 40))();
    }
    long long v63 = 0u;
    long long v64 = 0u;
  }
  if (v58)
  {
    if (v62) {
      (*(void (**)(void))(*(void *)v58 + 40))();
    }
    uint64_t v62 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    ++v61;
  }
  if (v53)
  {
    if (v57) {
      (*(void (**)(void))(*(void *)v53 + 40))();
    }
    uint64_t v57 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v53 = 0;
    ++v56;
  }
  if (void)buf && (BYTE8(buf)) {
    (*(void (**)(void))(*(void *)buf + 40))();
  }
LABEL_27:
  if ((void)v48)
  {
    if (BYTE8(v48)) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    long long v48 = 0u;
    long long v49 = 0u;
  }
  if ((void)v46)
  {
    if (BYTE8(v46)) {
      (*(void (**)(void))(*(void *)v46 + 40))();
    }
    long long v46 = 0u;
    long long v47 = 0u;
  }
  float result = v42;
  if (v42)
  {
    if (v43) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v42 + 40))();
    }
  }
  return result;
}

uint64_t RERealityFileCreateAssetDescriptorWithEntryNameAndPostLoad(unsigned char *a1, char *a2, char a3, re::AssetManager *a4, CFErrorRef *a5)
{
  return realityFileCreateAssetDescriptorWithEntryNameAndPostLoad(a1, a2, a3, 1, a4, a5);
}

uint64_t RERealityFileCreateAssetDescriptorWithEntryName(unsigned char *a1, char *a2, re::AssetManager *a3, CFErrorRef *a4)
{
  return realityFileCreateAssetDescriptorWithEntryNameAndPostLoad(a1, a2, 0, 1, a3, a4);
}

uint64_t RERealityFileCreateAssetDescriptorWithEntryNameAndTextureDownsampleHint(unsigned char *a1, char *a2, uint64_t a3, re::AssetManager *a4, CFErrorRef *a5)
{
  uint64_t v7 = a3;
  if (!a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "textureDownsampleFactorHint should be >= 1. Setting to 1.", v12, 2u);
    }

    uint64_t v7 = 1;
  }
  return realityFileCreateAssetDescriptorWithEntryNameAndPostLoad(a1, a2, 0, v7, a4, a5);
}

uint64_t RERealityFileCreateAssetDescriptorFromLabel(uint64_t a1, char *a2, re::AssetManager *a3, CFErrorRef *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8)
  {
    uint64_t AssetDescriptorWithAssetName = re::RealityFile::findAssetDescriptorWithAssetName(0, a2);
    if (AssetDescriptorWithAssetName) {
      goto LABEL_3;
    }
    return 0;
  }
  id v9 = (id)(v8 + 8);
  uint64_t AssetDescriptorWithAssetName = re::RealityFile::findAssetDescriptorWithAssetName((re::RealityFile *)v8, a2);

  if (!AssetDescriptorWithAssetName) {
    return 0;
  }
LABEL_3:
  char v11 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)AssetDescriptorWithAssetName + 40))(AssetDescriptorWithAssetName);
  LOBYTE(v17) = *(unsigned char *)(a1 + 32);
  re::DynamicString::DynamicString((re::DynamicString *)&v18, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)(a1 + 72));
  if ((void)v21)
  {
    if (BYTE8(v21)) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    long long v21 = 0u;
    long long v22 = 0u;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  if (v27[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)v28);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v20, v29);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v23, v30);
    uint64_t v12 = re::DynamicString::DynamicString((re::DynamicString *)v26, (const re::DynamicString *)&v31);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v12, &v16);
    uint64_t v13 = v16;
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), (re::DynamicString *)&v17);
    re::DynamicArray<BOOL>::operator=(v13 + 56, &v20);
    re::DynamicArray<BOOL>::operator=(v13 + 96, v23);
    re::DynamicString::operator=((re::DynamicString *)(v13 + 136), (re::DynamicString *)v26);
    uint64_t v14 = v16;
    if (v26[0])
    {
      if (v26[1]) {
        (*(void (**)(void))(*(void *)v26[0] + 40))();
      }
      memset(v26, 0, sizeof(v26));
    }
    if (v23[0])
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v23[0] + 40))();
      }
      uint64_t v25 = 0;
      memset(v23, 0, sizeof(v23));
      ++v24;
    }
    if (v20)
    {
      if (*((void *)&v22 + 1)) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
      *((void *)&v22 + 1) = 0;
      long long v21 = 0uLL;
      uint64_t v20 = 0;
      LODWORD(v22) = v22 + 1;
    }
    if (v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (a4 && !v28[0])
    {
      uint64_t v14 = 0;
      *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 9, 0);
    }
  }
  re::Optional<re::AssetLoadDescriptor>::~Optional(v27);
  return v14;
}

id RERealityFileCreateDataByLoading(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    id v6 = (id)(v5 + 8);
    re::RealityFile::newDataByLoading((re::RealityFile *)v5, a2, (uint64_t)v11);
  }
  else
  {
    re::RealityFile::newDataByLoading(0, a2, (uint64_t)v11);
  }
  if (v11[0]) {
    return v12;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = re::WrappedError::localizedDescription(&v12);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v14 = v10;
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  if (a3)
  {
    id v9 = v12;
    *a3 = v9;
    if (v9) {
      CFRetain(v9);
    }
  }
  if (!v11[0]) {

  }
  return 0;
}

uint64_t RERealityFileCreateAssetWithFilename(unsigned char *a1, os_unfair_lock_s *a2, char *a3, CFErrorRef *a4)
{
  LOBYTE(v12) = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)v15, (const re::DynamicString *)(a1 + 72));
  if (v15[0])
  {
    if (v15[1]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))();
    }
    memset(v15, 0, sizeof(v15));
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  int v8 = v16[0];
  if (v16[0] || v17[0])
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v12, (const re::AssetHandle *)v17);
    if (v13)
    {
      uint64_t v9 = v12;
      id v10 = (id)(v12 + 8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
    if (v8) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
    }
  }
  else
  {
    uint64_t v9 = 0;
    *a4 = CFErrorCreate(0, @"RERealityFileErrorDomain", 9, 0);
  }
  return v9;
}

unsigned char *anonymous namespace'::makeAssetHandle(_anonymous_namespace_ *this, const re::RealityFileDescriptor *a2, char *a3, os_unfair_lock_s *a4)
{
  if (v20[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v11, (const re::DynamicString *)v21);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v13, v22);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v16, v23);
    re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)&v24);
    os_unfair_lock_lock(a4 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a4, (const re::AssetLoadDescriptor *)&v11, v10);
    os_unfair_lock_unlock(a4 + 16);
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v8, (const re::AssetHandle *)v10);
    *(unsigned char *)this = 1;
    *(_OWORD *)((char *)this + 8) = v8;
    long long v8 = 0uLL;
    *((void *)this + 3) = v9;
    uint64_t v9 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
    if (v19[0])
    {
      if (v19[1]) {
        (*(void (**)(void))(*(void *)v19[0] + 40))();
      }
      memset(v19, 0, sizeof(v19));
    }
    if (v16[0])
    {
      if (v18) {
        (*(void (**)(void))(*(void *)v16[0] + 40))();
      }
      uint64_t v18 = 0;
      memset(v16, 0, sizeof(v16));
      ++v17;
    }
    if (v13[0])
    {
      if (v15) {
        (*(void (**)(void))(*(void *)v13[0] + 40))();
      }
      uint64_t v15 = 0;
      memset(v13, 0, sizeof(v13));
      ++v14;
    }
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  else
  {
    int v6 = v21[0];
    *(unsigned char *)this = 0;
    *((_DWORD *)this + 2) = v6;
  }
  return re::Optional<re::AssetLoadDescriptor>::~Optional(v20);
}

uint64_t *RERealityFileCreateLoadedTextureAsset(unsigned char *a1, uint64_t a2, void *a3, const char *a4, uint64_t *a5)
{
  v74[1] = *MEMORY[0x263EF8340];
  v69[1] = 0;
  v69[2] = 0;
  v69[0] = *(void *)(a2 + 1040);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  id v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v59, 0);
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v63, 0);
  *((void *)&v65 + 1) = 0;
  long long v66 = 0uLL;
  re::DynamicString::setCapacity(&v65, 0);
  char v67 = 0;
  uint64_t v68 = 1;
  LOBYTE(v45) = a1[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v46, (const re::DynamicString *)(a1 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)&v49, (const re::DynamicString *)(a1 + 72));
  v58[0] = (char)v45;
  re::DynamicString::operator=((re::DynamicString *)&v59, (re::DynamicString *)&v46);
  re::DynamicString::operator=((re::DynamicString *)&v63, (re::DynamicString *)&v49);
  if ((void)v49)
  {
    if (BYTE8(v49)) {
      (*(void (**)(void))(*(void *)v49 + 40))();
    }
    long long v49 = 0u;
    long long v50 = 0u;
  }
  if (v46 && (v47 & 1) != 0) {
    (*(void (**)(void))(*(void *)v46 + 40))();
  }
  uint64_t v45 = a4;
  size_t v46 = strlen(a4);
  char v12 = re::DynamicString::operator=((re::DynamicString *)&v65, (uint64_t)&v45);
  uint64_t v13 = (_anonymous_namespace_ *)re::TextureAsset::assetType(v12);
  int v14 = *(const char **)v13;
  re::RealityFileAssetLoadDescriptorFactory::make(v58, (re::DynamicString *)&v38, (uint64_t)&v45);
  if (v38 && (v39 & 1) != 0) {
    (*(void (**)(void))(*(void *)v38 + 40))();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 64));
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a2, (const re::AssetLoadDescriptor *)&v45, v44);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 64));
  uint64_t v43 = a3;
  uint64_t v15 = re::TextureAsset::assetType(v43);
  uint64_t v16 = *((void *)re::AssetHandle::assetInfo((re::AssetHandle *)v44) + 10);
  if (v16 == -1) {
    uint64_t v16 = 0;
  }
  v36[0] = 1;
  uint64_t v37 = v16;
  re::AssetUtilities::loadCompiledAssetFromData((id *)&v43, v69, (const char **)v15, 0, 0, (uint64_t)v36, (uint64_t)&v38);
  if ((_BYTE)v38)
  {
    int v17 = v39;
    if (v39[122])
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v35, (const re::AssetHandle *)v44);
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)a2, v17, (uint64_t)v35, 0);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v35);
      a5 = (uint64_t *)v44[0];
      if (v44[0]) {
        id v18 = (id)(v44[0] + 8);
      }
      goto LABEL_40;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v34, (const re::AssetHandle *)v44);
    re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)a2, v17, (uint64_t)v34, 0);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v34);
    unint64_t v23 = v17[9];
    unint64_t v24 = v23 >> 1;
    if ((v23 & 1) == 0) {
      unint64_t v24 = v23 >> 1;
    }
    if (v24 > 6)
    {
      char v26 = (_DWORD *)((char *)v17 + 73);
      uint64_t v25 = (char *)v17[10];
      if (v23) {
        char v26 = (_DWORD *)v17[10];
      }
      if (*v26 == 1702064993 && *(_DWORD *)((char *)v26 + 3) == 796095589)
      {
        uint64_t v25 = (char *)v26 + 7;
        goto LABEL_39;
      }
      if (v23)
      {
LABEL_39:
        char v28 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)v44);
        re::AssetManager::assetHandleWithParentAssetPath((re::AssetManager *)a2, v25, v28, 0, (uint64_t *)buf);
        a5 = *(uint64_t **)buf;
        id v29 = (id)(*(void *)buf + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        goto LABEL_40;
      }
    }
    else if (v23)
    {
      uint64_t v25 = (char *)v17[10];
      goto LABEL_39;
    }
    uint64_t v25 = (char *)v17 + 73;
    goto LABEL_39;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v19 = (id)CoreRELog::log;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = re::AssetHandle::assetInfo((re::AssetHandle *)v44);
    if (v31[17]) {
      long long v32 = (char *)v31[18];
    }
    else {
      long long v32 = (char *)v31 + 137;
    }
    if (v40) {
      int v33 = v42;
    }
    else {
      int v33 = v41;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v32;
    __int16 v71 = 2080;
    v72 = v33;
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "Error loading compiled asset '%s': %s", buf, 0x16u);
  }

  if (a5)
  {
    uint64_t v73 = *MEMORY[0x263F08320];
    if (v40) {
      uint64_t v20 = v42;
    }
    else {
      uint64_t v20 = v41;
    }
    long long v21 = [NSString stringWithCString:v20 encoding:4];
    v74[0] = v21;
    long long v22 = [NSDictionary dictionaryWithObjects:v74 forKeys:&v73 count:1];

    *a5 = [MEMORY[0x263F087E8] errorWithDomain:@"RERealityFileErrorDomain" code:7 userInfo:v22];

    a5 = 0;
  }
LABEL_40:
  if (!(_BYTE)v38 && v39 && (v40 & 1) != 0) {
    (*(void (**)(void))(*(void *)v39 + 40))();
  }

  re::AssetHandle::~AssetHandle((re::AssetHandle *)v44);
  if ((void)v56)
  {
    if (BYTE8(v56)) {
      (*(void (**)(void))(*(void *)v56 + 40))();
    }
    long long v56 = 0u;
    long long v57 = 0u;
  }
  if (v51)
  {
    if (v55) {
      (*(void (**)(void))(*(void *)v51 + 40))();
    }
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v51 = 0;
    ++v54;
  }
  if (v48)
  {
    if (*((void *)&v50 + 1)) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    *((void *)&v50 + 1) = 0;
    long long v49 = 0uLL;
    uint64_t v48 = 0;
    LODWORD(v50) = v50 + 1;
  }
  if (v45 && (v46 & 1) != 0) {
    (*(void (**)(void))(*(void *)v45 + 40))();
  }
  if ((void)v65)
  {
    if (BYTE8(v65)) {
      (*(void (**)(void))(*(void *)v65 + 40))();
    }
    long long v65 = 0u;
    long long v66 = 0u;
  }
  if ((void)v63)
  {
    if (BYTE8(v63)) {
      (*(void (**)(void))(*(void *)v63 + 40))();
    }
    long long v63 = 0u;
    long long v64 = 0u;
  }
  if (v59 && (v60 & 1) != 0) {
    (*(void (**)(void))(*v59 + 40))();
  }
  return a5;
}

void REAssetLoadRequestAddRealityFileAsset(re::AssetLoadRequest::Data **a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  id v10 = *(re::AssetMap **)(v8 + 112);
  v11[0] = *(unsigned char *)(a2 + 32);
  re::DynamicString::DynamicString((re::DynamicString *)&v12, (const re::DynamicString *)(a2 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)v14, (const re::DynamicString *)(a2 + 72));
  if (v14[0])
  {
    if (v14[1]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    memset(v14, 0, sizeof(v14));
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
}

void anonymous namespace'::addAssetRecursive(re::AssetLoadRequest::Data **a1, os_unfair_lock_s *a2, const re::RealityFileDescriptor *a3, re::AssetMap *a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v10 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 40))(a5);
  if (v23[0])
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v24);
    re::AssetLoadRequest::addAsset(a1, (const re::AssetHandle *)buf);
    uint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 40))(a5);
    uint64_t v13 = re::AssetMap::assetDependenciesWithFileName(a4, v12);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = *(uint64_t **)(v13 + 32);
        uint64_t v16 = 8 * v14;
        do
        {
          uint64_t v17 = *v15;
          if (*v15)
          {
            id v18 = (id)(v17 + 8);
          }
          else
          {
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
  }
  else if (!v24[0])
  {
    uint64_t v19 = *re::assetsLogObjects(AssetHandle);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)a5 + 40);
      long long v21 = v19;
      uint64_t v22 = v20(a5);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v26 = v22;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Unsupported asset type (ignoring it and continuing the loading): %s", buf, 0xCu);
    }
  }
}

uint64_t RERealityFileAssetDescriptorGetLabel(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t RERealityFileAssetDescriptorGetFilename(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

CFStringRef RERealityFileAssetDescriptorCopyMetadataString(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    int v6 = (void *)(v5 + 8);
    id v7 = (id)(v5 + 8);
    uint64_t v8 = *(re::AssetMap **)(v5 + 112);
  }
  else
  {
    uint64_t v8 = (re::AssetMap *)MEMORY[0x70];
  }
  id v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v10 = re::AssetMap::metadataForFileName(v8, (const re::DynamicString *)&v15);
  uint64_t v11 = v15;
  if (v15 && (v16 & 1) != 0) {
    uint64_t v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v15 + 40))();
  }
  if (!v10) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v16 = "";
  uint64_t v12 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v15);
  re::StringID::destroyString((re::StringID *)&v15);
  if (!v12) {
    return 0;
  }
  if (*(unsigned char *)(v12 + 8)) {
    uint64_t v13 = *(const char **)(v12 + 16);
  }
  else {
    uint64_t v13 = (const char *)(v12 + 9);
  }
  return CFStringCreateWithCString(0, v13, 0x8000100u);
}

void *RERealityFileAssetDescriptorAsSceneDescriptor(void *result)
{
  if (result) {
  return result;
  }
}

uint64_t RESceneDescriptorCreateFromParams(re *a1, const char *a2, const char *a3)
{
  int v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 200, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(void *)(v7 + 192) = 0;
  uint64_t v8 = (re::SceneDescriptor *)((char *)re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)v7) + 24);
  uint64_t v12 = a1;
  size_t v13 = strlen((const char *)a1);
  re::DynamicString::operator=(v8, (uint64_t)&v12);
  size_t v9 = strlen(a2);
  uint64_t v12 = (void *)a2;
  size_t v13 = v9;
  uint64_t v10 = re::DynamicString::operator=((re::DynamicString *)(v7 + 56), (uint64_t)&v12);
  if (a3)
  {
    LOBYTE(v12) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)&v15);
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v7 + 88), &v12);
    if (_BYTE)v12 && v13 && (v14) {
      (*(void (**)(void))(*(void *)v13 + 40))();
    }
    if (v15 && (v16 & 1) != 0) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  return v7;
}

uint64_t RESceneDescriptorAddSceneCompatibilityVariant(uint64_t a1, int a2, const char *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  re::DynamicString::setCapacity(&v9, 0);
  int v8 = a2;
  size_t v6 = strlen(a3);
  v13[0] = a3;
  v13[1] = v6;
  re::DynamicString::operator=((re::DynamicString *)&v9, (uint64_t)v13);
  re::DynamicArray<re::SceneCompatibilityVariant>::add((_anonymous_namespace_ *)(a1 + 160), (re::DynamicString *)&v8);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*v9 + 40))();
    }
  }
  return result;
}

BOOL RERealityFileAssetDescriptorHasDependenciesArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  uint64_t v5 = *(re::AssetMap **)(v3 + 112);
  size_t v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v7 = re::AssetMap::assetDependenciesWithFileName(v5, v6);

  return v7 != 0;
}

uint64_t RERealityFileAssetDescriptorGetDependenciesArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  uint64_t v5 = *(re::AssetMap **)(v3 + 112);
  size_t v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v7 = re::AssetMap::assetDependenciesWithFileName(v5, v6);

  if (v7) {
    return *(void *)(v7 + 32);
  }
  else {
    return 0;
  }
}

BOOL RERealityFilePostLoadProcessing(re::TextureCompatibility *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v5 = *((void *)a1 + 7);
  if (v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    size_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v16 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "RERealityFilePostLoadProcessing: scene must not have been registered to an ECSService", v16, 2u);
    }
  }
  else
  {
    uint64_t v11 = (const re::AssetManager *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a3);
    uint64_t v12 = re::ServiceLocator::serviceOrNull<re::AssetService>(a3);
    if (v11 && *((void *)v11 + 19))
    {
      size_t v13 = (re::ecs2::Scene *)v12;
      if (a5
        && (CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a5, @"kRERealityFilePostLoadProcessingOptionRecompressTextures")) != 0)
      {
        uint64_t v15 = (const re::RenderManager *)(CFBooleanGetValue(Value) != 0);
      }
      else
      {
        uint64_t v15 = 0;
      }
      re::TextureCompatibility::postProcessLoadedTextures(a1, v13, v11, v15);
    }
  }
  return v5 == 0;
}

uint64_t RESceneDescriptorGetSceneName(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  unint64_t v2 = v1 >> 1;
  if ((v1 & 1) == 0) {
    unint64_t v2 = v1 >> 1;
  }
  if (!v2) {
    return 0;
  }
  if (v1) {
    return *(void *)(a1 + 72);
  }
  return a1 + 65;
}

uint64_t RESceneDescriptorGetSceneIdentifier(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 104)) {
      return *(void *)(a1 + 112);
    }
    else {
      return a1 + 105;
    }
  }
  else if (*(unsigned char *)(a1 + 136))
  {
    return *(void *)(a1 + 144);
  }
  else
  {
    return a1 + 137;
  }
}

uint64_t RESceneDescriptorGetSceneCompatibilityVariantCount(uint64_t a1)
{
  return *(void *)(a1 + 176);
}

uint64_t RESceneDescriptorGetSceneCompatibilityVariantAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 176) <= a2) {
    return 0;
  }
  else {
    return *(void *)(a1 + 192) + 40 * a2;
  }
}

uint64_t RESceneCompatibilityVariantGetVersion(unsigned int *a1)
{
  return *a1;
}

uint64_t RESceneCompatibilityVariantGetFileName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return *(void *)(a1 + 24);
  }
  else {
    return a1 + 17;
  }
}

id RERealityFileCopyConfigurationSetNames(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    id v2 = (id)(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 112);
  }
  else
  {
    uint64_t v3 = MEMORY[0x70];
  }
  id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (*(void *)(v3 + 120))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v3 + 128) + v5;
      if (*(unsigned char *)(v7 + 8)) {
        uint64_t v8 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v8 = v7 + 9;
      }
      size_t v9 = [NSString stringWithUTF8String:v8];
      [v4 addObject:v9];

      ++v6;
      v5 += 32;
    }
    while (v6 < *(void *)(v3 + 120));
  }
  CFRetain(v4);

  return v4;
}

id RERealityFileCopyDefaultConfigurationNames(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    id v2 = (id)(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 112);
  }
  else
  {
    uint64_t v3 = MEMORY[0x70];
  }
  id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (*(void *)(v3 + 144))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v3 + 152) + v5;
      if (*(unsigned char *)(v7 + 8)) {
        uint64_t v8 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v8 = v7 + 9;
      }
      size_t v9 = [NSString stringWithUTF8String:v8];
      [v4 addObject:v9];

      ++v6;
      v5 += 32;
    }
    while (v6 < *(void *)(v3 + 144));
  }
  CFRetain(v4);

  return v4;
}

id RERealityFileCopyConfigurationNamesAtSetIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    id v4 = (void *)(v3 + 8);
    id v5 = (id)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 112);
  }
  else
  {
    uint64_t v6 = MEMORY[0x70];
  }
  if (*(void *)(v6 + 424) <= a2) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 432);
  uint64_t v8 = v7 + 24 * a2;
  uint64_t v11 = *(void *)(v8 + 8);
  size_t v9 = (unint64_t *)(v8 + 8);
  uint64_t v10 = v11;
  id v12 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = (void *)(v7 + 24 * a2 + 16);
    do
    {
      if (*v9 <= v14)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v16 = *v15 + v13;
      if (*(unsigned char *)(v16 + 8)) {
        uint64_t v17 = *(void *)(v16 + 16);
      }
      else {
        uint64_t v17 = v16 + 9;
      }
      id v18 = [NSString stringWithUTF8String:v17];
      [v12 addObject:v18];

      ++v14;
      v13 += 32;
    }
    while (v10 != v14);
  }
  CFRetain(v12);

  return v12;
}

uint64_t RERealityFileGetRealityFileAssetDescriptorWithConfigurationSpecifications(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  id v4 = (_anonymous_namespace_ *)[v3 count];
  if (v19)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i < v19; ++i)
    {
      id v7 = [v3 objectAtIndexedSubscript:i];
      uint64_t v8 = (const char *)[v7 cStringUsingEncoding:4];
      unint64_t v9 = v19;
      if (v19 <= i)
      {
        uint64_t v21 = 0;
        memset(v30, 0, sizeof(v30));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        unint64_t v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 468;
        __int16 v26 = 2048;
        unint64_t v27 = i;
        __int16 v28 = 2048;
        unint64_t v29 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = v8;
      size_t v11 = strlen(v8);
      *(void *)&v30[0] = v10;
      *((void *)&v30[0] + 1) = v11;
      re::DynamicString::operator=((re::DynamicString *)(v20 + v5), (uint64_t)v30);

      v5 += 32;
    }
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12) {
    id v13 = (id)(v12 + 8);
  }
  unint64_t v14 = *(void **)(v12 + 112);
  re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v17, (uint64_t)&v18);
  re::AssetMap::assetDescriptorFromConfigurationNames(v14, (uint64_t)v17, v30);
  uint64_t v15 = *(void *)&v30[0];
  if (*(void *)&v30[0]) {

  }
  re::FixedArray<re::DynamicString>::deinit(v17);
  re::FixedArray<re::DynamicString>::deinit(&v18);

  return v15;
}

id RERealityFileCopyTextureDescriptor(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8 = a2[3];
  if (v8)
  {
    id v9 = (id)(v8 + 8);
    re::RealityFile::newDataByLoading((re::RealityFile *)v8, a3, (uint64_t)v32);
  }
  else
  {
    uint64_t v10 = (re::TextureAsset *)re::RealityFile::newDataByLoading(0, a3, (uint64_t)v32);
  }
  if (v32[0])
  {
    id v11 = v33;
    re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(a1, v33, a4);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    CFRelease(v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 1040);
    unint64_t v14 = re::TextureAsset::assetType(v10);
    uint64_t v15 = (re::TextureAssetLoader *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v13, (unint64_t)v14);
    uint64_t v16 = a2[3];
    if (v16) {
      id v17 = (id)(v16 + 8);
    }
    uint64_t v18 = (re::RealityFile *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
    re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)(a2 + 5));
    re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)(a2 + 9));
    if (v25) {
      unint64_t v19 = *(const char **)&v26[7];
    }
    else {
      unint64_t v19 = v26;
    }
    uint64_t v20 = (char *)re::WrappedError::localizedDescription(&v33);
    re::TextureAssetLoader::fetchSourceImageTextureDescriptor(v15, (re::RealityFile *)v16, v18, v19, v20, (uint64_t)v28);
    if (v27[0])
    {
      if (v27[1]) {
        (*(void (**)(void))(*(void *)v27[0] + 40))(v27[0]);
      }
      memset(v27, 0, sizeof(v27));
    }
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(uint64_t))(*(void *)v24 + 40))(v24);
    }
    if (v16) {

    }
    if (v28[0])
    {
      id v12 = v29;
    }
    else
    {
      if (v30) {
        int v22 = *(re::CoreREAssetUtils **)&v31[7];
      }
      else {
        int v22 = (re::CoreREAssetUtils *)v31;
      }
      re::CoreREAssetUtils::logAndSetErrorFromString(v22, a4, v21);
      id v12 = 0;
    }
  }
  if (!v32[0]) {

  }
  return v12;
}

uint64_t RERealityFileHeaderCreateFromVersionInfo(_anonymous_namespace_ *a1, const char *a2, int a3, int a4)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v22 + 1) = 0;
  long long v23 = 0uLL;
  re::DynamicString::setCapacity(&v22, 0);
  int v24 = 2;
  size_t v9 = strlen((const char *)a1);
  char v25 = a1;
  size_t v26 = v9;
  re::DynamicString::operator=((re::DynamicString *)&v18, (uint64_t)&v25);
  size_t v10 = strlen(a2);
  char v25 = (void *)a2;
  size_t v26 = v10;
  id v11 = re::DynamicString::operator=((re::DynamicString *)&v22, (uint64_t)&v25);
  if ((a3 - 1) >= 4) {
    int v12 = 0;
  }
  else {
    int v12 = a3;
  }
  int v24 = v12;
  uint64_t v13 = re::globalAllocators(v11);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 160, 8);
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v14, 0);
  *(void *)uint64_t v14 = &unk_26E6CA258;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  uint64_t v16 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v14 + 24), 0);
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  re::DynamicString::setCapacity((void *)(v14 + 56), 0);
  *(_DWORD *)(v14 + 88) = 2;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_DWORD *)(v14 + 136) = 0;
  *(void *)(v14 + 140) = 0x7FFFFFFFLL;
  *(_DWORD *)(v14 + 152) = 0;
  re::DynamicString::operator=((re::DynamicString *)(v14 + 24), (re::DynamicString *)&v18);
  re::DynamicString::operator=((re::DynamicString *)(v14 + 56), (re::DynamicString *)&v22);
  *(_DWORD *)(v14 + 88) = v24;
  *(_DWORD *)(v14 + 96) = a4;
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    long long v22 = 0u;
    long long v23 = 0u;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*v18 + 40))();
  }
  return v14;
}

uint64_t RERealityFileGetRealityFileHeader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return MEMORY[0x68];
  }
  id v2 = (void *)(v1 + 8);
  id v3 = (id)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 104);

  return v4;
}

uint64_t RERealityFileGetMinVersionFromRealityFileHeader(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

_anonymous_namespace_::RealityFileWithDescriptor *anonymous namespace'::RealityFileWithDescriptor::RealityFileWithDescriptor(_anonymous_namespace_::RealityFileWithDescriptor *this, re::RealityFile *a2, const re::RealityFileDescriptor *a3)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = a2;
  *(void *)this = &unk_26E7353A8;
  if (a2) {
    uint64_t v6 = (char *)a2 + 8;
  }
  *((unsigned char *)this + 32) = *(unsigned char *)a3;
  re::DynamicString::DynamicString((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 40), (const re::RealityFileDescriptor *)((char *)a3 + 8));
  re::DynamicString::DynamicString((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 72), (const re::RealityFileDescriptor *)((char *)a3 + 40));
  return this;
}

void anonymous namespace'::RealityFileWithDescriptor::~RealityFileWithDescriptor(_anonymous_namespace_::RealityFileWithDescriptor *this)
{
  *(void *)this = &unk_26E7353A8;
  re::DynamicString::deinit((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 72));
  re::DynamicString::deinit((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 40));
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7353A8;
  re::DynamicString::deinit((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 72));
  re::DynamicString::deinit((_anonymous_namespace_::RealityFileWithDescriptor *)((char *)this + 40));
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

_anonymous_namespace_::RealityFileWithDescriptor *re::make::shared::object<anonymous namespace'::RealityFileWithDescriptor,re::RealityFile *&,re::RealityFileDescriptor>(re *a1, re::RealityFile **a2, const re::RealityFileDescriptor *a3)
{
  uint64_t v6 = re::globalAllocators(a1);
  id v7 = (_anonymous_namespace_::RealityFileWithDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 104, 8);
  *(void *)a1 = result;
  return result;
}

void *REMaterialDefinitionAssetBuilderCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 2512, 8);
  bzero(v2, 0x9D0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *uint64_t v2 = &unk_26E7353F0;
  re::MaterialDefinitionAsset::MaterialDefinitionAsset((re::MaterialDefinitionAsset *)(v2 + 3));
  return v2;
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetName(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 32);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REAssetManagerMaterialDefinitionAssetBuilderBuild(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 2488, 8);
  bzero(v5, 0x9B8uLL);
  re::MaterialDefinitionAsset::MaterialDefinitionAsset((re::MaterialDefinitionAsset *)v5);
  re::MaterialDefinitionFile::operator=((uint64_t)v5 + 8, a2 + 32);
  uint64_t v6 = (re::MaterialDefinitionAsset *)re::AssetHandle::operator=((uint64_t)v5 + 752, (uint64_t *)(a2 + 776));
  id v7 = re::MaterialDefinitionAsset::assetType(v6);
  (*(void (**)(void *__return_ptr, re *, void *, uint64_t *, uint64_t, void, void))(*(void *)a1 + 416))(v11, a1, v5, v7, 1, 0, 0);
  uint64_t v8 = v11[0];
  if (v11[0]) {
    id v9 = (id)(v11[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

BOOL REAssetManagerMaterialDefinitionAssetBuilderUpdateExistingAsset(re::AssetManager *a1, re::internal::AssetEntry *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v6 = a2;
  if (a2) {
    a2 = (re::internal::AssetEntry *)*((void *)a2 + 3);
  }
  re::AssetHandle::AssetHandle(&v25, a2);
  if (*((unsigned char *)v26 + 257))
  {
    re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v25);
    if (v26)
    {
      if (!*((void *)v26 + 3))
      {
        uint64_t v13 = re::AssetHandle::assetInfo((re::AssetHandle *)&v25);
        if (v13[17]) {
          uint64_t v14 = (char *)v13[18];
        }
        else {
          uint64_t v14 = (char *)v13 + 137;
        }
        re::DynamicString::format((re::DynamicString *)"Can't mutate asset that is detached from the AssetManager. '%s'", (re::DynamicString *)&v27, v14);
        goto LABEL_17;
      }
      unsigned int v8 = atomic_load((unsigned int *)v26 + 176);
      if (v8 != 2 || (unsigned int v9 = atomic_load((unsigned int *)v26 + 176), v9 == 1))
      {
        size_t v10 = re::AssetHandle::assetInfo((re::AssetHandle *)&v25);
        if (v10[17]) {
          id v11 = (char *)v10[18];
        }
        else {
          id v11 = (char *)v10 + 137;
        }
        re::DynamicString::format((re::DynamicString *)"Can't mutate asset that is not fully loaded. '%s'", (re::DynamicString *)&v27, v11);
LABEL_17:
        if (v28) {
          uint64_t v15 = *(unsigned char **)&v29[7];
        }
        else {
          uint64_t v15 = v29;
        }
        re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)5, (uint64_t)v15, &v30);
        uint64_t v16 = v30;
        char v30 = 0;

        if (v27 && (v28 & 1) != 0) {
          (*(void (**)(void))(*(void *)v27 + 40))();
        }
        id v17 = v16;
        uint64_t v18 = v17;
        *a4 = (CFErrorRef)v17;
        if (v17) {
          CFRetain(v17);
        }

        goto LABEL_30;
      }
      ++*((_DWORD *)v26 + 65);
      uint64_t v19 = re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)&v25);
      if (!v19)
      {
        long long v23 = re::AssetHandle::assetInfo((re::AssetHandle *)&v25);
        if (v23[17]) {
          int v24 = (char *)v23[18];
        }
        else {
          int v24 = (char *)v23 + 137;
        }
        re::DynamicString::format((re::DynamicString *)"Failed to get mutable asset pointer for '%s'.", (re::DynamicString *)&v27, v24);
        goto LABEL_17;
      }
      uint64_t v20 = v19;
      re::AssetHandle::internalUnregisterAsset((re::AssetHandle *)&v25);
      re::MaterialDefinitionFile::operator=(v20 + 8, a3 + 32);
      re::AssetHandle::operator=(v20 + 752, (uint64_t *)(a3 + 776));
      re::AssetHandle::internalRegisterAsset((re::AssetHandle *)&v25);
      re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v26);
      re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v26);
    }
    re::AssetManager::loadNow(a1, *((re::internal::AssetEntry **)v6 + 3), 0);
    if (!v26)
    {
LABEL_30:
      BOOL v12 = 0;
      goto LABEL_31;
    }
    unsigned int v21 = atomic_load((unsigned int *)v26 + 176);
    BOOL v12 = v21 == 2;
  }
  else
  {
    BOOL v12 = 0;
    *a4 = CFErrorCreate(0, @"REAssetRefErrorDomain", 2, 0);
  }
LABEL_31:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
  return v12;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueMapping(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  unsigned int v8 = a3;
  uint64_t v4 = (uint64_t)a1 + 496;
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v4, (re::DynamicString *)&v6, 2, &v8);
  }
  else
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v4, (uint64_t)&v6);
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

void REMaterialDefinitionAssetBuilderSetLibrary(uint64_t a1, re::internal::AssetEntry *a2)
{
  if (a2) {
    a2 = (re::internal::AssetEntry *)*((void *)a2 + 3);
  }
  re::AssetHandle::AssetHandle((uint64_t *)&v5, a2);
  long long v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 128) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void REMaterialDefinitionAssetBuilderSetOverrideMaterial(uint64_t a1, re::internal::AssetEntry *a2)
{
  if (a2) {
    a2 = (re::internal::AssetEntry *)*((void *)a2 + 3);
  }
  re::AssetHandle::AssetHandle((uint64_t *)&v5, a2);
  long long v3 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REMaterialDefinitionAssetBuilderAddDebugMapping(void *a1)
{
  uint64_t v2 = (_anonymous_namespace_ *)(a1 + 74);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  re::DynamicString::setCapacity(&v5, 0);
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  re::DynamicArray<re::DebugMapping>::add(v2, &v5);
  double v3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(double))(*v5 + 40))(v3);
  }
  return a1[76] - 1;
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetDebugMappingName(uint64_t a1, unint64_t a2, char *__s)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 608) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double v3 = (re::DynamicString *)(*(void *)(a1 + 624) + 80 * a2);
  *(void *)&v5[0] = __s;
  *((void *)&v5[0] + 1) = strlen(__s);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

uint64_t REMaterialDefinitionAssetBuilderSetDebugMappingEntry(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, int a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v9 = a4;
  unint64_t v5 = *((void *)a1 + 76);
  if (v5 <= a2)
  {
    uint64_t v10 = 0;
    memset(v19, 0, sizeof(v19));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v11 = 136315906;
    BOOL v12 = "operator[]";
    __int16 v13 = 1024;
    int v14 = 789;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    __int16 v17 = 2048;
    unint64_t v18 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)a1 + 78) + 80 * a2 + 32;
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(v7, (re::DynamicString *)v19, &v9);
  uint64_t result = *(void *)&v19[0];
  if (*(void *)&v19[0])
  {
    if (BYTE8(v19[0])) {
      return (*(uint64_t (**)(void))(**(void **)&v19[0] + 40))();
    }
  }
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderRemoveDebugMappingEntry(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)a1 + 76);
  if (v4 <= a2)
  {
    memset(v34, 0, sizeof(v34));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    uint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 789;
    __int16 v30 = 2048;
    unint64_t v31 = a2;
    __int16 v32 = 2048;
    unint64_t v33 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)a1 + 78);
  unint64_t v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v26, (uint64_t)v34);
  if (*(void *)(v6 + 80 * a2 + 32))
  {
    uint64_t v8 = v6 + 80 * a2;
    unint64_t v9 = v7 % *(unsigned int *)(v8 + 56);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v11 = *(unsigned int *)(v10 + 4 * v9);
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = v6 + 80 * a2;
      uint64_t v15 = *(void *)(v12 + 48);
      __int16 v13 = (uint64_t *)(v12 + 48);
      uint64_t v14 = v15;
      if (re::DynamicString::operator==(v15 + 56 * v11 + 16, (uint64_t)v34))
      {
        *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v14 + 56 * v11 + 8) & 0x7FFFFFFF;
LABEL_9:
        uint64_t v18 = *v13;
        uint64_t v19 = *v13 + 56 * v11;
        int v22 = *(_DWORD *)(v19 + 8);
        unsigned int v21 = (int *)(v19 + 8);
        int v20 = v22;
        if (v22 < 0)
        {
          *unsigned int v21 = v20 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v18 + 56 * v11 + 16));
          uint64_t v18 = *v13;
          int v20 = *(_DWORD *)(*v13 + 56 * v11 + 8);
        }
        long long v23 = (_DWORD *)(v6 + 80 * a2);
        *(_DWORD *)(v18 + 56 * v11 + 8) = v23[17] | v20 & 0x80000000;
        --v23[15];
        int v24 = v23[18] + 1;
        v23[17] = v11;
        v23[18] = v24;
      }
      else
      {
        while (1)
        {
          unsigned int v16 = v11;
          int v17 = *(_DWORD *)(v14 + 56 * v11 + 8);
          uint64_t v11 = v17 & 0x7FFFFFFF;
          if ((v17 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::DynamicString::operator==(v14 + 56 * v11 + 16, (uint64_t)v34))
          {
            *(_DWORD *)(v14 + 56 * v16 + 8) = *(_DWORD *)(v14 + 56 * v16 + 8) & 0x80000000 | *(_DWORD *)(v14 + 56 * v11 + 8) & 0x7FFFFFFF;
            goto LABEL_9;
          }
        }
      }
    }
  }
  uint64_t result = *(void *)&v34[0];
  if (*(void *)&v34[0])
  {
    if (BYTE8(v34[0])) {
      return (*(uint64_t (**)(void))(**(void **)&v34[0] + 40))();
    }
  }
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderAddTechnique(void *a1)
{
  uint64_t v2 = (_anonymous_namespace_ *)(a1 + 52);
  uint64_t v10 = 0;
  long long v9 = 0u;
  double v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v8, 0);
  uint64_t v13 = 0;
  long long v12 = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v11, 0);
  memset(v17, 0, 32);
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  unint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v17, 0);
  uint64_t v18 = 0;
  memset(&v17[2], 0, 48);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v17[3] + 1, 0);
  unint64_t v19 = 0xFFFF000100010000;
  __int16 v20 = 1792;
  char v21 = 4;
  long long v22 = xmmword_2343AD2D0;
  uint64_t v23 = 5;
  int v24 = 15;
  long long v26 = 0u;
  int v27 = 0;
  v25[2] = 0;
  v25[0] = 0;
  *(void *)((char *)v25 + 5) = 0;
  memset(v28, 0, sizeof(v28));
  re::DynamicString::setCapacity(&v28[1], 0);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  DWORD1(v31) = 0x7FFFFFFF;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  DWORD1(v34) = 0x7FFFFFFF;
  uint64_t v35 = 0;
  long long v36 = 0u;
  int v37 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  uint64_t v41 = 0;
  HIDWORD(v40) = 0x7FFFFFFF;
  uint64_t v45 = 0;
  long long v42 = 0u;
  int v44 = 0;
  uint64_t v43 = 0;
  __int16 v46 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  DWORD1(v49) = 0x7FFFFFFF;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  DWORD1(v52) = 0x7FFFFFFF;
  __int16 v53 = 256;
  char v54 = 0;
  re::DynamicArray<re::MaterialTechniqueData>::add(v2, (uint64_t)&v8);
  re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)&v8);
  return a1[54] - 1;
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetTechniqueName(uint64_t a1, unint64_t a2, char *__s)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 432) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double v3 = (re::DynamicString *)(*(void *)(a1 + 448) + 664 * a2);
  *(void *)&v5[0] = __s;
  *((void *)&v5[0] + 1) = strlen(__s);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

void REMaterialDefinitionAssetBuilderSetTechniqueLibrary(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3) {
    unint64_t v5 = *(re::internal::AssetEntry **)(a3 + 24);
  }
  else {
    unint64_t v5 = 0;
  }
  re::AssetHandle::AssetHandle(&v11, v5);
  unint64_t v6 = *(void *)(a1 + 432);
  if (v6 <= a2)
  {
    uint64_t v14 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    long long v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v7 = (void *)(*(void *)(a1 + 448) + 664 * a2);
  uint64_t v8 = v7[9];
  v7[9] = v12;
  uint64_t v12 = v8;
  uint64_t v9 = v7[8];
  unsigned char v7[8] = 0;
  unsigned char v7[8] = v11;
  uint64_t v11 = v9;
  uint64_t v10 = v7[10];
  v7[10] = v13;
  uint64_t v13 = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderEntry(uint64_t a1, unint64_t a2, char *__s)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 432) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double v3 = (re::DynamicString *)(*(void *)(a1 + 448) + 664 * a2 + 112);
  *(void *)&v5[0] = __s;
  *((void *)&v5[0] + 1) = strlen(__s);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

void REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderLibrary(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, &v10);
  unint64_t v5 = *(void *)(a1 + 432);
  if (v5 <= a2)
  {
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2048;
    unint64_t v21 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = (void *)(*(void *)(a1 + 448) + 664 * a2);
  uint64_t v7 = v6[12];
  v6[12] = v11;
  uint64_t v11 = v7;
  uint64_t v8 = v6[11];
  v6[11] = 0;
  v6[11] = v10;
  uint64_t v10 = v8;
  uint64_t v9 = v6[13];
  v6[13] = v12;
  uint64_t v12 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetTechniquePixelShaderEntry(uint64_t a1, unint64_t a2, char *__s)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 432) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double v3 = (re::DynamicString *)(*(void *)(a1 + 448) + 664 * a2 + 168);
  *(void *)&v5[0] = __s;
  *((void *)&v5[0] + 1) = strlen(__s);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

void REMaterialDefinitionAssetBuilderSetTechniquePixelShaderLibrary(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, &v10);
  unint64_t v5 = *(void *)(a1 + 432);
  if (v5 <= a2)
  {
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2048;
    unint64_t v21 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = (void *)(*(void *)(a1 + 448) + 664 * a2);
  uint64_t v7 = v6[19];
  v6[19] = v11;
  uint64_t v11 = v7;
  uint64_t v8 = v6[18];
  v6[18] = 0;
  v6[18] = v10;
  uint64_t v10 = v8;
  uint64_t v9 = v6[20];
  v6[20] = v12;
  uint64_t v12 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

uint64_t REMaterialDefinitionAssetBuilderAddTechniqueVariation(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)a1 + 54);
  if (v4 <= a2)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v18 = 136315906;
    *(void *)&v18[4] = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)a1 + 56);
  uint64_t v7 = (void *)(v6 + 664 * a2 + 376);
  BOOL v8 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v7, (uint64_t)&v25);
  uint64_t v9 = (_anonymous_namespace_ *)v25;
  if (void)v25 && (BYTE8(v25)) {
    uint64_t v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v25 + 40))();
  }
  if (!v8)
  {
    *(void *)&long long v27 = 0;
    *(void *)&long long v26 = 0;
    long long v25 = 0uLL;
    DWORD2(v26) = 0;
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v7, (re::DynamicString *)v18, (uint64_t)&v25);
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v25);
    uint64_t v9 = *(_anonymous_namespace_ **)v18;
    if (*(void *)v18)
    {
      if (v18[8]) {
        uint64_t v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v18 + 40))();
      }
    }
  }
  unint64_t v10 = re::Hash<re::DynamicString>::operator()((uint64_t)v18, (uint64_t)&v25);
  uint64_t v11 = 0x7FFFFFFFLL;
  if (*v7)
  {
    uint64_t v12 = *(unsigned int *)(*(void *)(v6 + 664 * a2 + 384) + 4 * (v10 % *(unsigned int *)(v6 + 664 * a2 + 400)));
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(v6 + 664 * a2 + 392);
      uint64_t v11 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v13 + 88 * v12 + 16, (uint64_t)&v25))
      {
        uint64_t v12 = *(_DWORD *)(v13 + 88 * v12 + 8) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          goto LABEL_16;
        }
      }
      uint64_t v11 = v12;
    }
  }
LABEL_16:
  uint64_t v14 = *(void *)(v6 + 664 * a2 + 392);
  int v15 = (_anonymous_namespace_ *)v25;
  if (void)v25 && (BYTE8(v25)) {
    int v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v25 + 40))();
  }
  *((void *)&v25 + 1) = 0;
  long long v26 = 0uLL;
  re::DynamicString::setCapacity(&v25, 0);
  double v16 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)(v14 + 88 * v11 + 48), &v25);
  if (void)v25 && (BYTE8(v25)) {
    (*(void (**)(double))(*(void *)v25 + 40))(v16);
  }
  return *(void *)(v14 + 88 * v11 + 64);
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueVariation(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, unint64_t a4, const char *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v6 = *((void *)a1 + 54);
  if (v6 <= a2)
  {
    uint64_t v19 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    a4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    __int16 v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 789;
    __int16 v26 = 2048;
    unint64_t v27 = a2;
    __int16 v28 = 2048;
    unint64_t v29 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)a1 + 56);
  unint64_t v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)&v19);
  uint64_t v12 = 0x7FFFFFFFLL;
  if (*(void *)(v10 + 664 * a2 + 376))
  {
    uint64_t v13 = *(unsigned int *)(*(void *)(v10 + 664 * a2 + 384) + 4 * (v11 % *(unsigned int *)(v10 + 664 * a2 + 400)));
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *(void *)(v10 + 664 * a2 + 392);
      uint64_t v12 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v14 + 88 * v13 + 16, (uint64_t)&v19))
      {
        uint64_t v13 = *(_DWORD *)(v14 + 88 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          goto LABEL_9;
        }
      }
      uint64_t v12 = v13;
    }
  }
LABEL_9:
  uint64_t v15 = *(void *)(v10 + 664 * a2 + 392);
  unint64_t v6 = *(void *)(v15 + 88 * v12 + 64);
  if (v6 <= a4)
  {
LABEL_15:
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    __int16 v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 789;
    __int16 v26 = 2048;
    unint64_t v27 = a4;
    __int16 v28 = 2048;
    unint64_t v29 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double v16 = (re::DynamicString *)(*(void *)(v15 + 88 * v12 + 80) + 32 * a4);
  size_t v17 = strlen(a5);
  *(void *)&long long v30 = a5;
  *((void *)&v30 + 1) = v17;
  re::DynamicString::operator=(v16, (uint64_t)&v30);
  uint64_t result = v19;
  if (v19)
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
    }
  }
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderAddTechniqueDefaultVariation(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 54) <= a2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)a1 + 56);
  unint64_t v4 = (_anonymous_namespace_ *)(v3 + 664 * a2 + 424);
  *((void *)&v7 + 1) = 0;
  long long v8 = 0uLL;
  re::DynamicString::setCapacity(&v7, 0);
  double v5 = re::DynamicArray<re::DynamicString>::add(v4, &v7);
  if (void)v7 && (BYTE8(v7)) {
    (*(void (**)(double))(*(void *)v7 + 40))(v5);
  }
  return *(void *)(v3 + 664 * a2 + 440) - 1;
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetTechniqueDefaultVariation(uint64_t a1, unint64_t a2, unint64_t a3, char *__s)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 432) <= a2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 448);
  if (*(void *)(v4 + 664 * a2 + 440) <= a3) {
    goto LABEL_5;
  }
  double v5 = (re::DynamicString *)(*(void *)(v4 + 664 * a2 + 456) + 32 * a3);
  *(void *)&long long v7 = __s;
  *((void *)&v7 + 1) = strlen(__s);
  return re::DynamicString::operator=(v5, (uint64_t)&v7);
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueFunctionConstant(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v9[0] = a4;
  unint64_t v5 = *((void *)a1 + 54);
  if (v5 <= a2)
  {
    v9[1] = 0;
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v10 = 136315906;
    long long v11 = "operator[]";
    __int16 v12 = 1024;
    int v13 = 789;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    __int16 v16 = 2048;
    unint64_t v17 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)a1 + 56) + 664 * a2 + 328;
  if (a4)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v7, (re::DynamicString *)v18, 2, v9);
  }
  else
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v7, (uint64_t)v18);
  }
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0])
  {
    if (BYTE8(v18[0])) {
      return (*(uint64_t (**)(void))(**(void **)&v18[0] + 40))();
    }
  }
  return result;
}

re::DynamicString *REMaterialDefinitionAssetBuilderSetTechniqueDebugMapping(uint64_t a1, unint64_t a2, char *__s)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 432) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = (re::DynamicString *)(*(void *)(a1 + 448) + 664 * a2 + 296);
  *(void *)&v5[0] = __s;
  *((void *)&v5[0] + 1) = strlen(__s);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateAlphaBlend(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(result + 448) + 664 * a2 + 200) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateWriteDepth(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(result + 448) + 664 * a2 + 202) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateDepthCompareFunction(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(result + 448) + 664 * a2 + 210) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateCullMode(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(result + 448);
  uint64_t v4 = v3 + 664 * a2;
  int v6 = *(unsigned __int8 *)(v4 + 252);
  unint64_t v5 = (unsigned char *)(v4 + 252);
  if (!v6) {
    *unint64_t v5 = 1;
  }
  *(unsigned char *)(v3 + 664 * a2 + 253) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateColorWriteMask(uint64_t result, unint64_t a2, int a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*(void *)(result + 448) + 664 * a2 + 236) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueSupportsRuntimeFunctionConstants(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(result + 448) + 664 * a2 + 553) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetUseDynamicAttributeStride(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(result + 448) + 664 * a2 + 656) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetAllowRuntimeTechniqueStateOverride(uint64_t result, unint64_t a2, char a3)
{
  if (*(void *)(result + 432) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(result + 448);
  uint64_t v4 = v3 + 664 * a2;
  if (!*(unsigned char *)(v4 + 657)) {
    *(unsigned char *)(v4 + 657) = 1;
  }
  *(unsigned char *)(v3 + 664 * a2 + 658) = a3;
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueRuntimeFunctionConstantDefaults(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v9[0] = a4;
  unint64_t v5 = *((void *)a1 + 54);
  if (v5 <= a2)
  {
    v9[1] = 0;
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v10 = 136315906;
    long long v11 = "operator[]";
    __int16 v12 = 1024;
    int v13 = 789;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    __int16 v16 = 2048;
    unint64_t v17 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)a1 + 56) + 664 * a2 + 560;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v7, (re::DynamicString *)v18, 2, v9);
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0])
  {
    if (BYTE8(v18[0])) {
      return (*(uint64_t (**)(void))(**(void **)&v18[0] + 40))();
    }
  }
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniquePreloadOptions(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)a1 + 54);
  if (v5 <= a2)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v21 = 136315906;
    *(void *)&void v21[4] = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = *((void *)a1 + 56) + 664 * a2 + 608;
  BOOL v10 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v9, (uint64_t)&v28);
  long long v11 = (_anonymous_namespace_ *)v28;
  if (void)v28 && (BYTE8(v28)) {
    long long v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v28 + 40))();
  }
  if (!v10)
  {
    unint64_t v5 = *((void *)a1 + 54);
    if (v5 <= a2) {
      goto LABEL_27;
    }
    uint64_t v12 = *((void *)a1 + 56) + 664 * a2 + 608;
    *(void *)&long long v30 = 0;
    *(void *)&long long v29 = 0;
    long long v28 = 0uLL;
    DWORD2(v29) = 0;
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(v12, (re::DynamicString *)v21, (uint64_t)&v28);
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v28);
    long long v11 = *(_anonymous_namespace_ **)v21;
    if (*(void *)v21 && (v21[8] & 1) != 0) {
      long long v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v21 + 40))();
    }
  }
  unint64_t v5 = *((void *)a1 + 54);
  if (v5 <= a2)
  {
LABEL_26:
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v21 = 136315906;
    *(void *)&void v21[4] = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v21 = 136315906;
    *(void *)&void v21[4] = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 56);
  unint64_t v14 = re::Hash<re::DynamicString>::operator()((uint64_t)v21, (uint64_t)&v28);
  uint64_t v15 = 0x7FFFFFFFLL;
  if (*(void *)(v13 + 664 * a2 + 608))
  {
    uint64_t v16 = *(unsigned int *)(*(void *)(v13 + 664 * a2 + 616) + 4 * (v14 % *(unsigned int *)(v13 + 664 * a2 + 632)));
    if (v16 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(v13 + 664 * a2 + 624);
      uint64_t v15 = 0x7FFFFFFFLL;
      while (1)
      {
        unint64_t v14 = re::DynamicString::operator==(v17 + 88 * v16 + 16, (uint64_t)&v28);
        if (v14) {
          break;
        }
        uint64_t v16 = *(_DWORD *)(v17 + 88 * v16 + 8) & 0x7FFFFFFF;
        if (v16 == 0x7FFFFFFF) {
          goto LABEL_18;
        }
      }
      uint64_t v15 = v16;
    }
  }
LABEL_18:
  __int16 v18 = (_anonymous_namespace_ *)(*(void *)(v13 + 664 * a2 + 624) + 88 * v15 + 48);
  v19.n128_f64[0] = re::DynamicArray<re::DynamicString>::add(v18, v21);
  if (*(void *)v21 && (v21[8] & 1) != 0) {
    (*(void (**)(double))(**(void **)v21 + 40))(v19.n128_f64[0]);
  }
  uint64_t result = v28;
  if ((void)v28)
  {
    if (BYTE8(v28)) {
      return (*(uint64_t (**)(__n128))(*(void *)v28 + 40))(v19);
    }
  }
  return result;
}

uint64_t REMaterialDefinitionAssetBuilderSetShaderCompilationMode(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  int v8 = a3;
  uint64_t v4 = (uint64_t)a1 + 720;
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(v4, (re::DynamicString *)&v6, &v8);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

uint64_t re::MaterialDefinitionFile::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)((char *)v4 + 32), (re::DynamicString *)(a2 + 32));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 64), (re::DynamicString *)(a2 + 64));
  re::AssetHandle::operator=(a1 + 96, (uint64_t *)(a2 + 96));
  re::AssetHandle::operator=(a1 + 120, (uint64_t *)(a2 + 120));
  re::MaterialParameterData::operator=(a1 + 144, a2 + 144);
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a2 + 384);
    if (*(void *)(a1 + 384))
    {
      uint64_t v6 = (re::MaterialTechniqueData *)(a1 + 384);
      if (v5)
      {
        re::DynamicArray<re::MaterialTechniqueData>::copy(v6, a2 + 384);
        ++*(_DWORD *)(a1 + 408);
      }
      else
      {
        re::DynamicArray<re::MaterialTechniqueData>::clear(v6);
      }
    }
    else if (v5)
    {
      unint64_t v7 = *(void *)(a2 + 400);
      *(void *)(a1 + 384) = v5;
      re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)(a1 + 384), v7);
      ++*(_DWORD *)(a1 + 408);
      re::DynamicArray<re::MaterialTechniqueData>::copy((void *)(a1 + 384), a2 + 384);
    }
    uint64_t v8 = *(void *)(a2 + 424);
    if (*(void *)(a1 + 424))
    {
      uint64_t v9 = a1 + 424;
      if (v8)
      {
        re::DynamicArray<re::MaterialTechniqueGroupData>::copy(v9, a2 + 424);
        ++*(_DWORD *)(a1 + 448);
      }
      else
      {
        re::DynamicArray<re::MaterialTechniqueGroupData>::clear(v9);
      }
    }
    else if (v8)
    {
      unint64_t v10 = *(void *)(a2 + 440);
      *(void *)(a1 + 424) = v8;
      re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)(a1 + 424), v10);
      ++*(_DWORD *)(a1 + 448);
      re::DynamicArray<re::MaterialTechniqueGroupData>::copy(a1 + 424, a2 + 424);
    }
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 464, a2 + 464);
  if (a1 != a2)
  {
    uint64_t v11 = *(void *)(a2 + 512);
    if (*(void *)(a1 + 512))
    {
      uint64_t v12 = a1 + 512;
      if (v11)
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(v12, a2 + 512);
        ++*(_DWORD *)(a1 + 552);
      }
      else
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v12);
      }
    }
    else if (v11)
    {
      if (*(_DWORD *)(a2 + 540) <= 3u) {
        signed int v13 = 3;
      }
      else {
        signed int v13 = *(_DWORD *)(a2 + 540);
      }
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 512, v11, v13);
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 512, a2 + 512);
    }
    uint64_t v14 = *(void *)(a2 + 560);
    if (*(void *)(a1 + 560))
    {
      uint64_t v15 = a1 + 560;
      if (v14)
      {
        re::DynamicArray<re::DebugMapping>::copy(v15, a2 + 560);
        ++*(_DWORD *)(a1 + 584);
      }
      else
      {
        re::DynamicArray<re::DebugMapping>::clear(v15);
      }
    }
    else if (v14)
    {
      unint64_t v16 = *(void *)(a2 + 576);
      *(void *)(a1 + 560) = v14;
      re::DynamicArray<re::DebugMapping>::setCapacity((void *)(a1 + 560), v16);
      ++*(_DWORD *)(a1 + 584);
      re::DynamicArray<re::DebugMapping>::copy(a1 + 560, a2 + 560);
    }
    uint64_t v17 = *(void *)(a2 + 600);
    if (*(void *)(a1 + 600))
    {
      uint64_t v18 = a1 + 600;
      if (v17)
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(v18, a2 + 600);
        ++*(_DWORD *)(a1 + 640);
      }
      else
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v18);
      }
    }
    else if (v17)
    {
      if (*(_DWORD *)(a2 + 628) <= 3u) {
        signed int v19 = 3;
      }
      else {
        signed int v19 = *(_DWORD *)(a2 + 628);
      }
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 600, v17, v19);
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 600, a2 + 600);
    }
    uint64_t v20 = *(void *)(a2 + 648);
    if (*(void *)(a1 + 648))
    {
      uint64_t v21 = a1 + 648;
      if (v20)
      {
        re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy(v21, a2 + 648);
        ++*(_DWORD *)(a1 + 672);
      }
      else
      {
        re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::clear(v21);
      }
    }
    else if (v20)
    {
      unint64_t v22 = *(void *)(a2 + 664);
      *(void *)(a1 + 648) = v20;
      re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)(a1 + 648), v22);
      ++*(_DWORD *)(a1 + 672);
      re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy(a1 + 648, a2 + 648);
    }
  }
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 688, a2 + 688);
  return a1;
}

void REMaterialDefinitionAssetBuilder::~REMaterialDefinitionAssetBuilder(REMaterialDefinitionAssetBuilder *this)
{
  *(void *)this = &unk_26E7353F0;
  re::MaterialDefinitionAsset::~MaterialDefinitionAsset((REMaterialDefinitionAssetBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7353F0;
  re::MaterialDefinitionAsset::~MaterialDefinitionAsset((REMaterialDefinitionAssetBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void REPerfStatsBegin()
{
}

void REPerfStatsEnd(re::internal::PerfStats *a1)
{
  re::internal::PerfStats::endStatisticsCollection(a1, 1);
  if (a1)
  {
    JUMPOUT(0x237DBCBD0);
  }
}

uint64_t REMeshDeformationComponentGetDeformationInputsCount(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 392);
    if (v1) {
      return *(void *)(v1 + 88);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REMeshDeformationComponentGetDeformationInputByInputIndex(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 392);
    if (v3)
    {
      unint64_t v4 = *(void *)(v3 + 88);
      if (v4 <= a2)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v4);
        uint64_t result = _os_crash();
        __break(1u);
      }
      else
      {
        return *(void *)(*(void *)(v3 + 96) + 168 * a2 + 8 * a3 + 24);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *REHierarchicalFadeComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float *REHierarchicalFadeComponentSetOpacity(float *result, re::ecs2::Component *a2, float a3)
{
  if (a3 > 1.0) {
    a3 = 1.0;
  }
  if (a3 < 0.0) {
    a3 = 0.0;
  }
  if (result[7] != a3)
  {
    uint64_t v3 = (uint64_t)result;
    result[7] = a3;
    re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)result, a2);
    return (float *)re::ecs2::Component::enqueueMarkDirty(v3);
  }
  return result;
}

float REHierarchicalFadeComponentGetOpacity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REHierarchicalFadeComponentSetUseDepthPrePass(re::ecs2::HierarchicalFadeComponent *a1, int a2)
{
  uint64_t result = re::ecs2::HierarchicalFadeComponent::getUseDepthPrePass(a1);
  if (result != a2)
  {
    *((unsigned char *)a1 + 32) = a2;
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t RESceneAssetIsCompatibleWithVersion(uint64_t a1, const re::AssetHandle *a2)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v5);
    BOOL isSceneAssetCompatibleWithVersion = re::AssetCompatibility::isSceneAssetCompatibleWithVersion((re::AssetCompatibility *)v5, a2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
    return isSceneAssetCompatibleWithVersion;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "scene", "RESceneAssetIsCompatibleWithVersion", 15);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REAssetManagerSceneAssetCopyCompatibilityVariant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v8);
    re::AssetCompatibility::sceneAssetCopyCompatibilityVariant((re::AssetCompatibility *)v8, a3);
    uint64_t v4 = v7[0];
    id v5 = (id)(v7[0] + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
    return v4;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) ", "scene", "REAssetManagerSceneAssetCopyCompatibilityVariant", 23);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t RESceneAssetGetRequiredRealityFileVersion(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "scene", "RESceneAssetGetRequiredRealityFileVersion", 34);
    uint64_t v3 = (re::SceneAsset *)_os_crash();
    __break(1u);
    goto LABEL_6;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  if (!v9)
  {
LABEL_6:
    re::SceneAsset::assetType(v3);
    goto LABEL_7;
  }
  uint64_t v4 = *(uint64_t **)(v9 + 264);
  if (v4 == re::SceneAsset::assetType(v3))
  {
    uint64_t SceneRequiredMajorVersion = re::TypeAvailabilityUtilities::getSceneRequiredMajorVersion((re::SceneAsset *)&v8, a2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
    return SceneRequiredMajorVersion;
  }
LABEL_7:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "assetHandle.assetType() == SceneAsset::assetType()", "RESceneAssetGetRequiredRealityFileVersion", 36);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::ecs2::Scene *RESceneCreate(_anonymous_namespace_ *a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  v3[0] = 0;
  v3[1] = "";
  re::make::shared::object<re::ecs2::Scene,re::StringID>((re *)v3, &v4);
  re::StringID::destroyString((re::StringID *)v3);
  return v4;
}

uint64_t RESceneGetRequiresAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t RESceneAddDefaultSystems(re *a1, re::ecs2::Scene *a2)
{
  return 1;
}

uint64_t RESceneAddEngineSystem(void *a1, signed int a2)
{
  long long v40 = 0;
  EngineSystemTypeIDs = (_anonymous_namespace_ *)_REECSManagerGetEngineSystemTypeIDs(a2, &v40);
  if (EngineSystemTypeIDs)
  {
    uint64_t v6 = EngineSystemTypeIDs;
    long long v39 = 0;
    unint64_t v36 = 0;
    unint64_t v37 = 0;
    int v38 = 0;
    unint64_t v7 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v35, 0x40uLL);
    ++v38;
    uint64_t v8 = (re::Allocator *)re::globalAllocators(v7)[2];
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v34);
    for (unint64_t i = 0; i != v6; unint64_t i = (_anonymous_namespace_ *)((char *)i + 1))
    {
      long long v33 = v40[(void)i];
      long long v32 = v40[(void)i];
      if (!re::ecs2::Scene::containsDeprecatedSystem((uint64_t)a1, &v32))
      {
        if (v30[0])
        {
          if (a2 != 58)
          {
            uint64_t v10 = v31[0];
            uint64_t v11 = *(void *)v31[2];
            re::ecs2::RenderingSystem::renderingSubsystemTypes((uint64_t)&v27);
            if (v28)
            {
              uint64_t v12 = v29;
              uint64_t v13 = 8 * v28;
              while (1)
              {
                uint64_t v14 = *v12;
                if (*(void *)(*v12 + 32) == v10
                  && *(unsigned __int16 *)(v14 + 40) == (unsigned __int16)v11
                  && *(unsigned __int16 *)(v14 + 42) == WORD1(v11)
                  && ((*(_DWORD *)(v14 + 44) ^ HIDWORD(v11)) & 0xFFFFFF) == 0)
                {
                  break;
                }
                ++v12;
                v13 -= 8;
                if (!v13) {
                  goto LABEL_13;
                }
              }
              char v2 = RESceneAddEngineSystem(a1, 58);
              int v15 = 0;
            }
            else
            {
LABEL_13:
              int v15 = 1;
            }
            if (v27 && v29) {
              (*(void (**)(void))(*(void *)v27 + 40))();
            }
            if (!v15)
            {
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v34);
              goto LABEL_33;
            }
          }
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v31, v8, 0);
          uint64_t v17 = Instance;
          if (Instance) {
            uint64_t v18 = Instance + 1;
          }
          unint64_t v19 = v37;
          if (v37 >= v36)
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(&v35, v37 + 1);
            unint64_t v19 = v37;
          }
          v39[v19] = (uint64_t)v17;
          unint64_t v37 = v19 + 1;
          ++v38;
        }
      }
    }
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v34);
    if (v37)
    {
      uint64_t v20 = v39;
      uint64_t v21 = 8 * v37;
      do
      {
        uint64_t v22 = *v20;
        uint64_t v26 = v22;
        if (v22)
        {
          int v23 = (void *)(v22 + 8);
          id v24 = (id)(v22 + 8);
          re::ecs2::Scene::deprecatedAddSystem(a1, &v26);

          uint64_t v26 = 0;
        }
        else
        {
          re::ecs2::Scene::deprecatedAddSystem(a1, &v26);
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    char v2 = 1;
LABEL_33:
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v35);
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t RESceneGetEntityIndexInParent(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 376);
}

void RESceneAddEntity(uint64_t a1, uint64_t a2)
{
  char v2 = (void *)(*(void *)(a1 + 104) + 304);
  uint64_t v4 = a2;
  if (a2) {
    id v3 = (id)(a2 + 8);
  }
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v2, &v4);
  if (v4) {
}
  }

void RESceneRemoveEntity(uint64_t a1, uint64_t a2)
{
  int v4 = dyld_program_sdk_at_least();
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (re *)(v5 + 304);
  if (v4)
  {
    uint64_t v11 = a2;
    if (a2)
    {
      unint64_t v7 = (void *)(a2 + 8);
      id v8 = v7;
      re::ecs2::EntityChildCollection::remove(v6, &v11);
      uint64_t v9 = v7;
LABEL_8:

      return;
    }
    re::ecs2::EntityChildCollection::remove((re *)(v5 + 304), &v11);
  }
  else
  {
    uint64_t v11 = a2;
    if (a2) {
      id v10 = (id)(a2 + 8);
    }
    re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable((uint64_t)v6, &v11);
    if (v11)
    {
      uint64_t v9 = (void *)(v11 + 8);
      goto LABEL_8;
    }
  }
}

void RESceneSetEntityAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 104);
  if (a3) {
    id v6 = (id)(a3 + 8);
  }
  unint64_t v7 = *(void *)(v5 + 328);
  if (v7 <= a2)
  {
    uint64_t v13 = 0;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v14 = 136315906;
    *(void *)&void v14[4] = "operator[]";
    __int16 v15 = 1024;
    int v16 = 789;
    __int16 v17 = 2048;
    unint64_t v18 = a2;
    __int16 v19 = 2048;
    unint64_t v20 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *(void *)(*(void *)(v5 + 344) + 8 * a2);
  *(void *)uint64_t v14 = v8;
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  uint64_t v13 = a3;
  if (a3) {
    id v10 = (id)(a3 + 8);
  }
  uint64_t v11 = (re *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)(v5 + 304) + 40))(v5 + 304, a2, &v13);
  if (*(void *)(v5 + 328) <= a2)
  {
    uint64_t v12 = *re::foundationCoreLogObjects(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "void re::Collection<re::SharedPtr<re::ecs2::Entity>>::set(size_t, const T &) [T = r"
                                     "e::SharedPtr<re::ecs2::Entity>]";
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = a2;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willSet(), not setting", (uint8_t *)buf, 0x16u);
    }
  }
  else
  {
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(void *)(v5 + 344) + 8 * a2), v13);
    ++*(_DWORD *)(v5 + 336);
    (*(void (**)(uint64_t, unint64_t, unsigned char *, uint64_t *))(*(void *)(v5 + 304) + 64))(v5 + 304, a2, v14, &v13);
  }
  if (v13) {

  }
  if (*(void *)v14) {
  if (a3)
  }
}

uint64_t RESceneFindEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 152, &v3);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t RESceneFindEntityByName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  uint64_t v3 = *(void *)(v2 + 328);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(uint64_t **)(v2 + 344);
  uint64_t v6 = 8 * v3;
  while (1)
  {
    uint64_t v7 = *v5;
    *(void *)&v10.var0 = 0;
    v10.var1 = "";
    uint64_t v8 = re::ecs2::Entity::findInHierarchyByName(v7, &v10);
    re::StringID::destroyString((re::StringID *)&v10);
    if (v8) {
      break;
    }
    ++v5;
    v6 -= 8;
    if (!v6) {
      return 0;
    }
  }
  return v8;
}

uint64_t RESceneGetECSManager(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return *(void *)(a1 + 56);
}

uint64_t RESceneGetECSManagerNullable(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return *(void *)(a1 + 56);
}

uint64_t RESceneGetName(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t RESceneGetUniqueName(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 280);
}

uint64_t RESceneGetOrCreateCAContext()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "RESceneGetOrCreateCAContext is deprecated. Use RECALayerServiceGetOrCreateCAContext.", v2, 2u);
  }

  return 0;
}

uint64_t RESceneGetOrCreateCAContextWithOptions()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "RESceneGetOrCreateCAContextWithOptions is deprecated. Use RECALayerServiceGetOrCreateCAContextWithOptions.", v2, 2u);
  }

  return 0;
}

void RESceneInvalidateAndReleaseCAContext()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "RESceneInvalidateAndReleaseCAContext is deprecated. Use RECALayerServiceInvalidateAndReleaseCAContext.", v1, 2u);
  }
}

uint64_t RESceneGetEntitiesArray(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 344);
}

uint64_t RESceneGetAllEntitiesArray(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t RESceneCopyEntitiesArray(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 104);
  re::make::shared::object<re::Shareable<re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>>>((re *)v7);
  uint64_t v2 = v7[0];
  re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize(v7[0] + 24, *(void *)(v1 + 328));
  if (*(void *)(v1 + 328))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void *)(v2 + 40);
      if (v5 <= v4)
      {
        v7[1] = 0;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v16 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v8 = 136315906;
        id v9 = "operator[]";
        __int16 v10 = 1024;
        int v11 = 789;
        __int16 v12 = 2048;
        unint64_t v13 = v4;
        __int16 v14 = 2048;
        unint64_t v15 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(void *)(v2 + 56) + v3), *(void *)(*(void *)(v1 + 344) + 8 * v4++));
      v3 += 8;
    }
    while (v4 < *(void *)(v1 + 328));
  }
  return v2;
}

uint64_t RESceneCopyAllEntitiesArray(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 144);
  unint64_t v2 = *(void *)(a1 + 128);
  re::make::shared::object<re::Shareable<re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>>>((re *)v11);
  uint64_t v3 = v11[0];
  re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize(v11[0] + 24, v2);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v5 = *(void *)(v1 + 8 * i);
      if (v5) {
        id v6 = (id)(v5 + 8);
      }
      unint64_t v7 = *(void *)(v3 + 40);
      if (v7 <= i)
      {
        v11[1] = 0;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v12 = 136315906;
        unint64_t v13 = "operator[]";
        __int16 v14 = 1024;
        int v15 = 789;
        __int16 v16 = 2048;
        unint64_t v17 = i;
        __int16 v18 = 2048;
        unint64_t v19 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v8 = *(void *)(v3 + 56);
      uint64_t v9 = *(void *)(v8 + 8 * i);
      *(void *)(v8 + 8 * i) = v5;
      if (v9) {
    }
      }
  }
  return v3;
}

uint64_t REEntityArrayCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REEntityArrayGet(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 56) + 8 * a2);
  }
}

void RESceneAddLatencyEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v7, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
  id v6 = (re::ecs2::LatencyEventsComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::LatencyEventsComponent::addLatencyEvent(v6, a2, a3);
}

void *RESceneGetComponentsOfClass(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), a2);
  if (v2 && *(void *)(v2 + 24)) {
    return *(void **)(v2 + 40);
  }
  else {
    return &RESceneGetComponentsOfClass::EmptyResult;
  }
}

void *RESceneGetComponentsOfType(uint64_t a1, int a2)
{
  uint64_t v3 = (const re::ecs2::ComponentTypeBase *)REComponentClassFromType(a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), v3);
  if (v4 && *(void *)(v4 + 24)) {
    return *(void **)(v4 + 40);
  }
  else {
    return &RESceneGetComponentsOfClass::EmptyResult;
  }
}

void *RESceneGetComponentsOfCustomType(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), a2);
  if (v2 && *(void *)(v2 + 24)) {
    return *(void **)(v2 + 40);
  }
  else {
    return &RESceneGetComponentsOfClass::EmptyResult;
  }
}

uint64_t RESceneInitializeComponentCollectionPosition(_anonymous_namespace_ *a1, const char *a2, void *a3)
{
  v13[0] = 0;
  v13[1] = "";
  unint64_t v7 = re::ecs2::ComponentTypeRegistry::instance(v6);
  uint64_t v8 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v7, (const re::StringID *)v13);
  if (v8
    && (unint64_t v9 = *(unsigned __int16 *)(v8 + 16), *((void *)a1 + 28) > v9)
    && (uint64_t v10 = *(void *)(*((void *)a1 + 30) + 8 * v9)) != 0)
  {
    *a3 = v10;
    a3[1] = *(void *)(v10 + 24);
    a3[2] = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)v13);
  return v11;
}

void *RESceneDereferenceComponentCollectionPosition(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      unint64_t v2 = v1[2];
      if (v2 >= v1[1]) {
        return 0;
      }
      else {
        return *(void **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)result, v2);
      }
    }
  }
  return result;
}

re::ecs2::Entity *RESceneAddPrivateSceneDataEntity(re::ecs2::ComponentHelper *a1)
{
  return re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
}

re::ecs2::Entity *RESceneGetPrivateSceneDataEntity(re::ecs2::ComponentHelper *a1)
{
  return re::ecs2::ComponentHelper::privateSceneDataEntity(a1, 0);
}

void *RESceneGetNetworkComponent(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[7];
    if (result)
    {
      if ((*(unsigned int (**)(void *))(*result + 136))(result) == 1) {
        return *(void **)(v1[13] + 200);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL RESceneSaveToFileWithOptions(re::ecs2::ECSSerialization *a1, re::ecs2::Scene *a2, char *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v6 = open(a3, 1537, 384);
  if (v6 == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      int v12 = __error();
      unint64_t v13 = strerror(*v12);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v11;
      *(_WORD *)&buf[18] = 2080;
      int v15 = v13;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to open file \"%s\" for writing. Error code: %i, Error: %s", buf, 0x1Cu);
    }

    return 0;
  }
  else
  {
    *(void *)long long buf = &unk_26E6BE6A0;
    *(void *)&buf[8] = &unk_26E6BE6E8;
    *(_DWORD *)&buf[16] = v6;
    LOWORD(v15) = 0;
    HIDWORD(v15) = 0;
    __int16 v16 = &unk_26E6BE858;
    unint64_t v17 = &buf[8];
    __int16 v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0x2000;
    uint64_t v22 = 0;
    BOOL v8 = re::ecs2::ECSSerialization::saveToStream(a1, a2, (AssetService *)buf, v7);
    google::protobuf::io::FileOutputStream::~FileOutputStream((google::protobuf::io::FileOutputStream *)buf);
  }
  return v8;
}

BOOL RESceneLoadFromFile(re *a1, AssetService *a2, char *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v6 = open(a3, 0);
  if (v6 == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *__error();
      int v11 = __error();
      int v12 = strerror(*v11);
      *(_DWORD *)unint64_t v13 = 136315650;
      *(void *)&void v13[4] = a3;
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = v10;
      *(_WORD *)&v13[18] = 2080;
      __int16 v14 = v12;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Failed to open file \"%s\" for reading. Error code: %i, Error: %s", v13, 0x1Cu);
    }

    return 0;
  }
  else
  {
    *(void *)unint64_t v13 = &unk_26E6BE630;
    *(void *)&unsigned char v13[8] = &unk_26E6BE670;
    *(_DWORD *)&v13[16] = v6;
    LOWORD(v14) = 0;
    HIDWORD(v14) = 0;
    char v15 = 0;
    v16[0] = &unk_26E6BE818;
    v16[1] = &v13[8];
    __int16 v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0x2000;
    int v21 = 0;
    uint64_t v22 = 0;
    BOOL v7 = re::ecs2::ECSSerialization::loadFromStream(a1, a2, (uint64_t)v13);
    *(void *)unint64_t v13 = &unk_26E6BE630;
    google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::CopyingInputStreamAdaptor *)v16);
    google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream::CopyingFileInputStream *)&v13[8]);
  }
  return v7;
}

CFTypeRef RESceneSaveToStreamWithOptions(re::ecs2::ECSSerialization *a1, re::ecs2::Scene *a2)
{
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)&v7, -1);
  if (re::ecs2::ECSSerialization::saveToStream(a1, a2, &v7, v4))
  {
    char v8 = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v10);
    CFTypeRef v5 = *v9;
    CFRetain(*v9);
  }
  else
  {
    CFTypeRef v5 = 0;
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)&v7);
  return v5;
}

BOOL RESceneLoadFromStream(re *a1, AssetService *a2, CFDataRef theData)
{
  CFDataRef v17 = theData;
  int Length = CFDataGetLength(theData);
  __int16 v10 = 0;
  int v11 = &v17;
  unint64_t v9 = &unk_26E714A48;
  int v12 = &unk_26E6BE790;
  BytePtr = CFDataGetBytePtr(theData);
  int v14 = Length;
  int v15 = Length;
  uint64_t v16 = 0;
  BOOL v7 = re::ecs2::ECSSerialization::loadFromStream(a1, a2, (uint64_t)&v9);
  re::internal::MemoryInputStream<__CFData const*>::~MemoryInputStream((uint64_t)&v9);
  return v7;
}

uint64_t RESceneLoadFromAsset(re::ecs2::ECSSerialization *a1, AssetService *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)&v8);
  uint64_t v6 = re::ecs2::ECSSerialization::loadFromAsset(a1, a2, &v8, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v6;
}

uint64_t REEntitySubtreeLoadFromAsset(re::ecs2::ECSSerialization *a1, AssetService *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)&v8);
  uint64_t v6 = re::ecs2::ECSSerialization::loadFromAsset(a1, a2, &v8, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v6;
}

uint64_t REEntitySubtreeAddNetworkComponentRecursive(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(void *)(result + 200)) {
    uint64_t result = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  uint64_t v2 = *(void *)(v1 + 328);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(v1 + 344);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      uint64_t result = REEntitySubtreeAddNetworkComponentRecursive(v5);
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t RESceneAddNetworkComponentRecursive(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 104);
  uint64_t v2 = *(void *)(v1 + 328);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(v1 + 344);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      uint64_t result = REEntitySubtreeAddNetworkComponentRecursive(v5);
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t RESceneGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

uint64_t RESceneSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(result + 296) = a2;
  return result;
}

uint64_t RESceneGetEventBus(uint64_t a1)
{
  return *(void *)(a1 + 288);
}

uint64_t RESceneSetRealityRendererSceneGroup(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 376) = a2;
  }
  return result;
}

BOOL RESceneIsFromActiveRealityRendererSceneGroup(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 56);
    if (v2)
    {
      if ((*(uint64_t (**)(void))(*(void *)v2 + 224))(*(void *)(result + 56))) {
        uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 224))(v2) + 24);
      }
      else {
        uint64_t v3 = 1;
      }
      uint64_t v4 = *(void *)(v1 + 376);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 24);
      }
      else {
        uint64_t v5 = 1;
      }
      return v3 == v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL RESceneIsFromDefaultRealityRendererSceneGroup(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 376);
    return !v1 || *(void *)(v1 + 24) == 1;
  }
  return result;
}

uint64_t RESceneGetIsRenderingShared()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "Shared rendering for scenes support was removed. New approach is tracked under rdar://84507919", v2, 2u);
  }

  return 0;
}

void RESceneSetIsRenderingShared()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "Shared rendering for scenes support was removed. New approach is tracked under rdar://84507919", v1, 2u);
  }
}

uint64_t RESceneComponentTypeAddCallbacks(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = re::globalAllocators((re *)a1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 64, 8);
  int v14 = (const re::ecs2::ComponentTypeBase *)REComponentClassFromType(a2);
  *(void *)uint64_t v13 = a1;
  *(void *)(v13 + 8) = v14;
  *(unsigned char *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = a3;
  *(void *)(v13 + 32) = a4;
  *(void *)(v13 + 40) = a5;
  *(void *)(v13 + 48) = a6;
  *(void *)(v13 + 56) = 0;
  uint64_t v15 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), v14);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 112))(v15, v13);
  return v13;
}

uint64_t RESceneComponentTypeAddCallbacksWithContext(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (const re::ecs2::ComponentTypeBase *)REComponentClassFromType(a2);
  return RESceneComponentClassAddCallbacksWithContext(a1, v13, a3, a4, a5, a6, a7);
}

uint64_t RESceneComponentClassAddCallbacksWithContext(uint64_t a1, const re::ecs2::ComponentTypeBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = re::globalAllocators((re *)a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 64, 8);
  *(void *)uint64_t v15 = a1;
  *(void *)(v15 + 8) = a2;
  *(unsigned char *)(v15 + 16) = 1;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(void *)(v15 + 40) = a5;
  *(void *)(v15 + 48) = a6;
  *(void *)(v15 + 56) = a7;
  uint64_t v16 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 112))(v16, v15);
  return v15;
}

re *RESceneComponentTypeRemoveCallbacks(re *result)
{
  if (result)
  {
    uint64_t v1 = (const re::ecs2::ComponentTypeBase **)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    uint64_t v3 = re::ecs2::SceneComponentTable::get((const re::ecs2::ComponentTypeBase *)((char *)*v1 + 200), v1[1]);
    (*(void (**)(uint64_t, const re::ecs2::ComponentTypeBase **))(*(void *)v3 + 120))(v3, v1);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const re::ecs2::ComponentTypeBase **))(*(void *)v2 + 40);
    return (re *)v4(v2, v1);
  }
  return result;
}

void re::make::shared::object<re::Shareable<re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E735438;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void *re::Shareable<re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>>::~Shareable(void *a1)
{
  *a1 = &unk_26E735438;
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>>::~Shareable(void *a1)
{
  *a1 = &unk_26E735438;
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *REMaterialAssetBuilderCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 824, 8);
  bzero(v2, 0x338uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *uint64_t v2 = &unk_26E735490;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  re::DynamicString::setCapacity(v2 + 3, 0);
  *((_DWORD *)v2 + 22) = 0;
  *(_OWORD *)(v2 + 9) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 124) = 0u;
  *(void *)((char *)v2 + 140) = 0x7FFFFFFFLL;
  *((unsigned char *)v2 + 152) = 0;
  *((unsigned char *)v2 + 154) = 0;
  *((unsigned char *)v2 + 156) = 0;
  *((unsigned char *)v2 + 158) = 0;
  *((unsigned char *)v2 + 160) = 0;
  *((unsigned char *)v2 + 162) = 0;
  *((unsigned char *)v2 + 164) = 0;
  *((unsigned char *)v2 + 166) = 0;
  *((unsigned char *)v2 + 168) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_DWORD *)v2 + 52) = 0;
  *((_OWORD *)v2 + 11) = 0u;
  *(void *)((char *)v2 + 212) = 0x7FFFFFFFLL;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_DWORD *)v2 + 64) = 0;
  *(void *)((char *)v2 + 260) = 0x7FFFFFFFLL;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_DWORD *)v2 + 76) = 0;
  *(void *)((char *)v2 + 308) = 0x7FFFFFFFLL;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_DWORD *)v2 + 88) = 0;
  *(void *)((char *)v2 + 356) = 0x7FFFFFFFLL;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *(void *)((char *)v2 + 404) = 0x7FFFFFFFLL;
  *((_DWORD *)v2 + 100) = 0;
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)(v2 + 52));
  return v2;
}

uint64_t REMaterialAssetBuilderSetName(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 24), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

void REMaterialAssetBuilderSetMaterialDefinition(uint64_t a1, uint64_t a2)
{
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {

  }
  *(void *)(a1 + 56) = a2;
}

uint64_t REMaterialAssetBuilderSetFunctionConstant(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  AssetService v8 = a3;
  uint64_t v4 = (uint64_t)a1 + 104;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v4, (re::DynamicString *)&v6, 2, &v8);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

uint64_t REMaterialAssetBuilderSetDefaultCustomMaterialWrappingFunctionConstants(_anonymous_namespace_ *a1)
{
  uint64_t v1 = (uint64_t)a1 + 104;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  uint64_t v2 = v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v2 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  uint64_t v3 = v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v3 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  uint64_t v4 = v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  uint64_t v5 = v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>(v1, (re::DynamicString *)&v12, 2, "0");
  uint64_t v6 = v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  char v7 = v12;
  if (v12 && (v13 & 1) != 0) {
    char v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  AssetService v8 = v12;
  if (v12 && (v13 & 1) != 0) {
    AssetService v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  unint64_t v9 = v12;
  if (v12 && (v13 & 1) != 0) {
    unint64_t v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>(v1, (re::DynamicString *)&v12, 2, "0");
  __int16 v10 = v12;
  if (v12 && (v13 & 1) != 0) {
    __int16 v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(v1, (re::DynamicString *)&v12, 2, "false");
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

uint64_t REMaterialAssetBuilderRemoveFunctionConstant(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (uint64_t)a1 + 104;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v3, (uint64_t)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t REMaterialAssetBuilderSetMTLCullMode(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 154)) {
    *(unsigned char *)(result + 154) = 1;
  }
  *(unsigned char *)(result + 155) = a2;
  return result;
}

uint64_t REMaterialAssetBuilderSetNeedsVCABlur(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 168)) {
    *(unsigned char *)(result + 168) = 1;
  }
  *(unsigned char *)(result + 169) = a2;
  return result;
}

uint64_t REMaterialAssetBuilderSetNeedsPassthroughBlur(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 166)) {
    *(unsigned char *)(result + 166) = 1;
  }
  *(unsigned char *)(result + 167) = a2;
  return result;
}

uint64_t REFunctionLinkBuilderCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 296, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(void *)(v2 + 288) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E7354D8;
  *(unsigned char *)(v2 + 24) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v2 + 32), 0);
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  re::DynamicString::setCapacity((void *)(v2 + 64), 0);
  *(_OWORD *)(v2 + 180) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_DWORD *)(v2 + 144) = 0;
  *(void *)(v2 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_DWORD *)(v2 + 240) = 0;
  *(void *)(v2 + 244) = 0x7FFFFFFFLL;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 272) = 0;
  *(void *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 280) = 0;
  return v2;
}

uint64_t REFunctionLinkBuilderSetShaderStage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

re::DynamicString *REFunctionLinkBuilderSetShaderFunctionName(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 32);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

re::DynamicString *REFunctionLinkBuilderSetLinkedFunctionName(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 64);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

void REFunctionLinkBuilderSetLinkedFunctionLibrary(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 96) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void *REFunctionLinkBuilderSetLinkedShaderAPIs(void *result, int *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v5 = result + 15;
  if (result[16] >= a3)
  {
    if (!a3) {
      return result;
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationCommand>::setCapacity(result + 15, a3);
  }
  do
  {
    int v6 = *a2++;
    int v7 = v6;
    uint64_t result = re::DynamicArray<re::ShaderAPIFlags::Values>::add(v5, &v7);
    --v3;
  }
  while (v3);
  return result;
}

uint64_t REFunctionLinkBuilderSetFunctionConstant(uint64_t a1, const char *a2, const char *a3)
{
  char v13 = a3;
  unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)&v11);
  unint64_t v6 = v5;
  if (!*(void *)(a1 + 160))
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v5 % *(unsigned int *)(a1 + 184);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 168) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(a1 + 160, v7, v6, (re::DynamicString *)&v11, &v13);
    ++*(_DWORD *)(a1 + 200);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  while (!re::DynamicString::operator==(v9 + 80 * v8 + 16, (uint64_t)&v11))
  {
    uint64_t v8 = *(_DWORD *)(v9 + 80 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t result = v11;
  if (v11)
  {
    if (v12) {
      return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
    }
  }
  return result;
}

void REFunctionLinkBuilderSetFunctionConstantValues(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)[v3 newNamedConstantArray];
  if ([v4 count])
  {
    unint64_t v5 = 0;
    do
    {
      unint64_t v6 = [v4 objectAtIndex:v5];
      id v7 = [v6 name];
      uint64_t v8 = (const char *)[v7 cStringUsingEncoding:4];

      re::FunctionLink::appendFunctionConstant(a1 + 24, (re::DynamicString *)v20, (char *)[v6 data], objc_msgSend(v6, "dataType"));
      if (*(void *)&v20[0])
      {
        if (BYTE8(v20[0])) {
          (*(void (**)(void))(**(void **)&v20[0] + 40))();
        }
        memset(v20, 0, sizeof(v20));
      }

      ++v5;
    }
    while (v5 < [v4 count]);
  }
  __int16 v10 = (void *)[v3 newIndexedConstantArray];
  if ([v10 count])
  {
    unint64_t v11 = 0;
    uint64_t v12 = a1 + 24;
    do
    {
      char v13 = [v10 objectAtIndex:v11];
      char v14 = (re *)[v13 index];
      if ((unint64_t)v14 > 0x10000)
      {
        uint64_t v16 = *re::graphicsLogObjects(v14);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          CFDataRef v17 = v16;
          uint64_t v18 = [v13 index];
          *(_DWORD *)__str = 134217984;
          uint64_t v22 = v18;
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Index %lu in function constant values was too large", (uint8_t *)__str, 0xCu);
        }
      }
      else
      {
        uint64_t v15 = (_anonymous_namespace_ *)snprintf(__str, 6uLL, "%lu", [v13 index]);
        re::FunctionLink::appendFunctionConstant(v12, (re::DynamicString *)v19, (char *)[v13 data], objc_msgSend(v13, "dataType"));
        if (*(void *)&v19[0])
        {
          if (BYTE8(v19[0])) {
            (*(void (**)(void))(**(void **)&v19[0] + 40))();
          }
          memset(v19, 0, sizeof(v19));
        }
      }

      ++v11;
    }
    while (v11 < [v10 count]);
  }
}

uint64_t REMaterialAssetBuilderAddFunctionLinkBuilder(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >= *(void *)(a1 + 72))
  {
    re::DynamicArray<re::FunctionLink>::growCapacity((void *)(a1 + 64), v4 + 1);
    unint64_t v4 = *(void *)(a1 + 80);
  }
  unint64_t v5 = (unsigned char *)(*(void *)(a1 + 96) + 272 * v4);
  *unint64_t v5 = *(unsigned char *)(a2 + 24);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 8), (const re::DynamicString *)(a2 + 32));
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 40), (const re::DynamicString *)(a2 + 64));
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v5 + 72), (const re::AssetHandle *)(a2 + 96));
  re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray((uint64_t)(v5 + 96), (uint64_t *)(a2 + 120));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)(v5 + 136), a2 + 160);
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)(v5 + 184), a2 + 208);
  uint64_t result = re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v5 + 232), (uint64_t *)(a2 + 256));
  ++*(void *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  return result;
}

uint64_t REMaterialAssetBuilderAddFunctionLink(_anonymous_namespace_ *a1, char a2, const char *a3, const char *a4, uint64_t a5, int *a6, unint64_t a7)
{
  v24[0] = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v25, 0);
  *((void *)&v29 + 1) = 0;
  long long v30 = 0uLL;
  re::DynamicString::setCapacity(&v29, 0);
  memset(v35, 0, sizeof(v35));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v34 = 0;
  uint64_t v36 = 0x7FFFFFFFLL;
  memset(v37, 0, sizeof(v37));
  int v38 = 0;
  uint64_t v39 = 0x7FFFFFFFLL;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  *(void *)&long long v22 = a3;
  *((void *)&v22 + 1) = strlen(a3);
  re::DynamicString::operator=((re::DynamicString *)&v25, (uint64_t)&v22);
  size_t v13 = strlen(a4);
  *(void *)&long long v22 = a4;
  *((void *)&v22 + 1) = v13;
  re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v22);
  re::AssetAPIHelper::assetHandleCreate(a5, (uint64_t *)&v22);
  long long v14 = v31;
  long long v31 = v22;
  long long v22 = v14;
  uint64_t v15 = v32;
  *(void *)&long long v32 = v23;
  uint64_t v23 = v15;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  v24[0] = a2;
  if ((unint64_t)v33 >= a7)
  {
    uint64_t v16 = a1;
    if (!a7) {
      goto LABEL_5;
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)&v32 + 1, a7);
    uint64_t v16 = a1;
  }
  do
  {
    int v17 = *a6++;
    LODWORD(v22) = v17;
    re::DynamicArray<re::ShaderAPIFlags::Values>::add((void *)&v32 + 1, &v22);
    --a7;
  }
  while (a7);
LABEL_5:
  re::DynamicArray<re::FunctionLink>::add((_anonymous_namespace_ *)((char *)v16 + 64), (uint64_t)v24);
  if (v40)
  {
    if (v44) {
      (*(void (**)(void))(*(void *)v40 + 40))();
    }
    uint64_t v44 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    ++v43;
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v37);
  double v18 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v35[8]);
  if (*((void *)&v32 + 1))
  {
    if (*(void *)v35) {
      (*(void (**)(double))(**((void **)&v32 + 1) + 40))(v18);
    }
    *(void *)uint64_t v35 = 0;
    long long v33 = 0uLL;
    *((void *)&v32 + 1) = 0;
    ++v34;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v31);
  if ((void)v29)
  {
    if (BYTE8(v29)) {
      (*(void (**)(void))(*(void *)v29 + 40))();
    }
    long long v29 = 0u;
    long long v30 = 0u;
  }
  uint64_t result = (uint64_t)v25;
  if (v25)
  {
    if (v26) {
      return (*(uint64_t (**)(void))(*v25 + 40))();
    }
  }
  return result;
}

uint64_t assetManagerMaterialAssetBuilderBuild(re *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 1896, 8);
  bzero((void *)v7, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v7);
  re::DynamicString::operator=((re::DynamicString *)(v7 + 8), (re::DynamicString *)(a2 + 24));
  re::AssetAPIHelper::assetHandleCreate(*(void *)(a2 + 56), (uint64_t *)&v23);
  long long v8 = *(_OWORD *)(v7 + 40);
  *(_OWORD *)(v7 + 40) = v23;
  long long v23 = v8;
  uint64_t v9 = *(void *)(v7 + 56);
  *(void *)(v7 + 56) = v24;
  uint64_t v24 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v23);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v7 + 304, a2 + 104);
  re::MaterialRenderFlags::operator=((unsigned char *)(v7 + 352), (unsigned __int8 *)(a2 + 152));
  if (v7 + 376 != a2 + 64)
  {
    uint64_t v11 = *(void *)(v7 + 376);
    uint64_t v12 = *(void *)(a2 + 64);
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13 && v11 != v12)
    {
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    *(void *)(v7 + 376) = v12;
    *(void *)(a2 + 64) = v11;
    uint64_t v15 = *(void *)(v7 + 384);
    *(void *)(v7 + 384) = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v15;
    uint64_t v16 = *(void *)(v7 + 392);
    *(void *)(v7 + 392) = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = v16;
    uint64_t v17 = *(void *)(v7 + 408);
    *(void *)(v7 + 408) = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = v17;
    ++*(_DWORD *)(a2 + 88);
    ++*(_DWORD *)(v7 + 400);
  }
  re::MaterialParameterData::operator=(v7 + 64, a2 + 176);
  double v18 = re::ecs2::SerializableMaterialParameterBlock::populateMaterialParameterDataInMaterialFileFromBlock((_anonymous_namespace_ *)(v7 + 8), a2 + 416);
  uint64_t v19 = re::MaterialAsset::assetType(v18);
  (*(void (**)(long long *__return_ptr, re *, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v23, a1, v7, v19, 0, 0, a3);
  uint64_t v20 = v23;
  if ((void)v23) {
    id v21 = (id)(v23 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v23);
  return v20;
}

uint64_t REAssetManagerMaterialAssetBuilderBuild(re *a1, uint64_t a2)
{
  return assetManagerMaterialAssetBuilderBuild(a1, a2, 0);
}

uint64_t REAssetManagerMaterialAssetBuilderBuildAsync(re *a1, uint64_t a2)
{
  return assetManagerMaterialAssetBuilderBuild(a1, a2, 1);
}

unsigned __int8 *REMaterialAssetBuilderSetBool(uint64_t a1, char *a2, unsigned __int8 a3)
{
  unsigned __int8 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 2, &v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat(uint64_t a1, char *a2, float a3)
{
  float v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 1, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetInt(uint64_t a1, char *a2, int a3)
{
  int v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 3, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetUInt(uint64_t a1, char *a2, int a3)
{
  int v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 7, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat2(uint64_t a1, char *a2, double a3)
{
  double v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 32, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetInt2(uint64_t a1, char *a2, double a3)
{
  double v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 4, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetUInt2(uint64_t a1, char *a2, double a3)
{
  double v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 8, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat3(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 33, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

void REMaterialAssetBuilderSetColor3F(uint64_t a1, char *a2, unsigned int a3, int8x16_t a4)
{
  v4.i64[0] = a4.u32[1];
  v4.i64[1] = a3;
  int32x2_t v5 = vzip1_s32(*(int32x2_t *)a4.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL));
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  int8x16_t v7 = vorrq_s8((int8x16_t)vshlq_n_s64(v4, 0x20uLL), v6);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(a1 + 416, a2, v7.i64[0], v7.i64[1]);
}

unsigned __int8 *REMaterialAssetBuilderSetInt3(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 5, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetUInt3(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 9, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat4(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 34, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

void REMaterialAssetBuilderSetColor4F(uint64_t a1, char *a2, char a3, __n128 a4)
{
  __n128 v4 = a4;
  char v5 = a3;
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(a1 + 416, a2, (long long *)&v4);
}

unsigned __int8 *REMaterialAssetBuilderSetInt4(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 6, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetUInt4(uint64_t a1, char *a2, __n128 a3)
{
  __n128 v5 = a3;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 10, (unsigned __int8 *)&v5);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat2x2(uint64_t a1, char *a2, double a3, double a4)
{
  *(double *)int8x16_t v6 = a3;
  *(double *)&v6[1] = a4;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 48, (unsigned __int8 *)v6);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat3x3(uint64_t a1, char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  v7[0] = a3;
  v7[1] = a4;
  void v7[2] = a5;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 49, (unsigned __int8 *)v7);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

unsigned __int8 *REMaterialAssetBuilderSetFloat4x4(uint64_t a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  uint64_t v8[3] = a6;
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1 + 416, a2, 50, (unsigned __int8 *)v8);
  ++*(_DWORD *)(a1 + 816);
  return result;
}

void REMaterialAssetBuilderSetTextureFromAsset(uint64_t a1, char *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v6);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (const re::AssetHandle *)v6);
  re::ecs2::SerializableMaterialParameterBlock::setTexture(a1 + 416, a2, (const re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

void REMaterialAssetBuilderSetSampler(uint64_t a1, char *a2, void *a3)
{
  id v5 = a3;
  id v29 = v5;
  id v6 = v5;
  re::MaterialSamplerData::fromDescriptor(&v29, (uint64_t)v30);
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData((uint64_t)&v31, (uint64_t)v30);
  if (v5) {

  }
  v7[0] = v31;
  v7[1] = v32;
  if (v32) {
    void v7[2] = v33;
  }
  _OWORD v7[3] = v34;
  if (v34) {
    v7[4] = v35;
  }
  unsigned char v7[8] = v36;
  if (v36) {
    int v8 = v37;
  }
  char v9 = v38;
  if (v38) {
    int v10 = v39;
  }
  char v11 = v40;
  if (v40) {
    int v12 = v41;
  }
  char v13 = v42;
  if (v42) {
    int v14 = v43;
  }
  char v15 = v44;
  if (v44) {
    int v16 = v45;
  }
  char v17 = v46;
  if (v46) {
    int v18 = v47;
  }
  char v19 = v48;
  if (v48) {
    int v20 = v49;
  }
  char v21 = v50;
  if (v50) {
    int v22 = v51;
  }
  char v23 = v52;
  if (v52) {
    int v24 = v53;
  }
  char v25 = v54;
  if (v54) {
    int v26 = v55;
  }
  char v27 = v56;
  if (v56) {
    uint64_t v28 = v57;
  }
  re::ecs2::SerializableMaterialParameterBlock::setSampler(a1 + 416, a2, v7);
}

void REMaterialAssetBuilderBindTextureToSampler(uint64_t a1, const char *a2, const char *a3)
{
}

void REMaterialAssetBuilderSetUVIndexForTexture(uint64_t a1, const char *a2, int a3)
{
}

uint64_t REMaterialAssetBuilderSetTextureFromBinding(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v5 = (uint64_t)a1 + 272;
  re::MaterialTextureParam::MaterialTextureParam((re::MaterialTextureParam *)v10, (const re::DynamicString *)&v8);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v5, (re::DynamicString *)&v12, (uint64_t)v10);
  if (v11 != -1) {
    off_26E735470[v11]((int)&v14, (re::DynamicString *)v10);
  }
  int v11 = -1;
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

uint64_t REMaterialAssetBuilderSetBufferFromBinding(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v8 = a3;
  uint64_t v4 = (uint64_t)a1 + 224;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v4, (re::DynamicString *)&v6, 2, &v8);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

void REMaterialAssetBuilder::~REMaterialAssetBuilder(REMaterialAssetBuilder *this)
{
  REMaterialAssetBuilder::~REMaterialAssetBuilder(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26E735490;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {

    *((void *)this + 7) = 0;
  }
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 96);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 90);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 84);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 78);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 66);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 60);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 54);
  *((void *)this + 52) = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 424);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 46);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 40);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 22);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 13);
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)this + 64);
  re::DynamicString::deinit((REMaterialAssetBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void REFunctionLinkBuilder::~REFunctionLinkBuilder(REFunctionLinkBuilder *this)
{
  *(void *)this = &unk_26E7354D8;
  uint64_t v2 = (uint64_t *)((char *)this + 208);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256);
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::AssetHandle::~AssetHandle((REFunctionLinkBuilder *)((char *)this + 96));
  re::DynamicString::deinit((REFunctionLinkBuilder *)((char *)this + 64));
  re::DynamicString::deinit((REFunctionLinkBuilder *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7354D8;
  uint64_t v2 = (uint64_t *)((char *)this + 208);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256);
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::AssetHandle::~AssetHandle((REFunctionLinkBuilder *)((char *)this + 96));
  re::DynamicString::deinit((REFunctionLinkBuilder *)((char *)this + 64));
  re::DynamicString::deinit((REFunctionLinkBuilder *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RESkeletonDefinitionCreate()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_524, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_524))
  {
    byte_26AFA01D8 = 0;
    qword_26AFA01C8 = (uint64_t)&unk_26E6DEC70;
    unk_26AFA01D0 = "SkeletonDefinitionBuilder Allocator";
    __cxa_guard_release(&_MergedGlobals_524);
  }
  uint64_t v0 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(qword_26AFA01C8 + 32))(&qword_26AFA01C8, 264, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v0, 0);
  v1[2] = &qword_26AFA01C8;
  *uint64_t v1 = &unk_26E735520;
  v1[3] = 0;
  *(void *)(v0 + 32) = "";
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 64) = 0;
  *(_DWORD *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(_DWORD *)(v0 + 112) = 1;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = 0;
  *(void *)(v0 + 120) = 0;
  *(_DWORD *)(v0 + 144) = 0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 152) = 0;
  *(_DWORD *)(v0 + 168) = 1;
  *(void *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 200) = 0;
  *(void *)(v0 + 192) = 0;
  *(void *)(v0 + 208) = 0;
  *(void *)(v0 + 216) = 0;
  *(_DWORD *)(v0 + 224) = 1;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0;
  *(_DWORD *)(v0 + 256) = 0;
  *(void *)(v0 + 248) = 0;
  re::StringID::init((re::StringID *)(v1 + 3), (re::Allocator *)&qword_26AFA01C8, "", 0);
  re::BucketArray<re::StringID,32ul>::init(v0 + 40, (uint64_t)&qword_26AFA01C8, 1uLL);
  re::BucketArray<unsigned int,32ul>::init(v0 + 96, (uint64_t)&qword_26AFA01C8, 1uLL);
  re::BucketArray<simd_float4x4,32ul>::init(v0 + 152, (uint64_t)&qword_26AFA01C8, 1uLL);
  re::BucketArray<RESRT,32ul>::init(v0 + 208, (uint64_t)&qword_26AFA01C8, 1uLL);
  return v0;
}

void RESkeletonDefinitionSetName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  char v9 = "";
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  uint64_t v8 = 0;
  char v9 = "";
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 4);
  *((void *)a1 + 3) = v4;
  *((void *)a1 + 4) = v5;
  v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v10[1] = v7;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

void RESkeletonDefinitionSetJointNames(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = a1 + 40;
  uint64_t v6 = a3;
  re::BucketArray<re::StringID,32ul>::resize(a1 + 40, a3);
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      char v9 = *(const char **)(a2 + 8 * v8);
      uint64_t v15 = 0;
      int v16 = "";
      int v10 = (uint64_t *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, v8);
      uint64_t v11 = v15;
      uint64_t v12 = v16;
      uint64_t v15 = 0;
      int v16 = "";
      uint64_t v13 = *v10;
      uint64_t v14 = v10[1];
      uint64_t *v10 = v11;
      v10[1] = (uint64_t)v12;
      v17[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
      v17[1] = v14;
      re::StringID::destroyString((re::StringID *)v17);
      re::StringID::destroyString((re::StringID *)&v15);
      ++v8;
    }
    while (v6 != v8);
  }
}

void re::BucketArray<re::StringID,32ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v6 = a2;
      do
      {
        uint64_t v7 = (re::StringID *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](a1, v6);
        re::StringID::destroyString(v7);
        ++v6;
      }
      while (v6 != *(void *)(a1 + 40));
      *(void *)(a1 + 40) = a2;
    }
  }
  else
  {
    if (a2 > 32 * *(void *)(a1 + 8))
    {
      re::BucketArray<re::StringID,32ul>::setBucketsCapacity((uint64_t *)a1, (a2 + 31) >> 5);
      unint64_t v4 = *(void *)(a1 + 40);
    }
    for (*(void *)(a1 + 40) = a2; v4 != *(void *)(a1 + 40); ++v4)
    {
      uint64_t v5 = (void *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](a1, v4);
      *uint64_t v5 = 0;
      v5[1] = "";
    }
  }
  ++*(_DWORD *)(a1 + 48);
}

void RESkeletonDefinitionSetJointCount(uint64_t a1, unsigned int a2)
{
}

void RESkeletonDefinitionSetJointName(_anonymous_namespace_ *a1, unsigned int a2, const char *a3)
{
  uint64_t v5 = (uint64_t)a1 + 40;
  uint64_t v11 = 0;
  uint64_t v12 = "";
  unint64_t v6 = (uint64_t *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, a2);
  uint64_t v7 = v11;
  unint64_t v8 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = "";
  uint64_t v9 = *v6;
  uint64_t v10 = v6[1];
  uint64_t *v6 = v7;
  v6[1] = (uint64_t)v8;
  v13[0] = v7 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v13[1] = v10;
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)&v11);
}

_DWORD *RESkeletonDefinitionSetParentIndices(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = a1 + 96;
  uint64_t v6 = a3;
  uint64_t result = re::BucketArray<unsigned int,32ul>::resize((uint64_t *)(a1 + 96), a3);
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4 * v8);
      uint64_t result = (_DWORD *)re::BucketArray<unsigned int,32ul>::operator[](v5, v8);
      *uint64_t result = v9;
      ++v8;
    }
    while (v6 != v8);
  }
  return result;
}

uint64_t *re::BucketArray<unsigned int,32ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        uint64_t result = (uint64_t *)re::BucketArray<unsigned int,32ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > 32 * result[1])
    {
      uint64_t result = re::BucketArray<unsigned int,32ul>::setBucketsCapacity(result, (a2 + 31) >> 5);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      uint64_t result = (uint64_t *)re::BucketArray<unsigned int,32ul>::operator[](v3, v4);
      *(_DWORD *)uint64_t result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t re::BucketArray<unsigned int,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 4 * (a2 & 0x1F);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 4 * (a2 & 0x1F);
}

_DWORD *RESkeletonDefinitionGetParentIndices(_DWORD *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t)(result + 24);
    uint64_t v6 = a3;
    do
    {
      uint64_t result = (_DWORD *)re::BucketArray<unsigned int,32ul>::operator[](v5, v4);
      *(_DWORD *)(a2 + 4 * v4++) = *result;
    }
    while (v6 != v4);
  }
  return result;
}

__n128 RESkeletonDefinitionSetLocalRestPoses(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v5 = a1 + 208;
  uint64_t v6 = a3;
  re::BucketArray<RESRT,32ul>::resize(a1 + 208, a3);
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](v5, v8);
      long long v10 = a2[1];
      __n128 result = (__n128)a2[2];
      long long v11 = *a2;
      a2 += 3;
      *(_OWORD *)uint64_t v9 = v11;
      *(_OWORD *)(v9 + 16) = v10;
      *(__n128 *)(v9 + 32) = result;
      ++v8;
    }
    while (v6 != v8);
  }
  return result;
}

uint64_t re::BucketArray<RESRT,32ul>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        __n128 result = re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > 32 * *(void *)(result + 8))
    {
      __n128 result = (uint64_t)re::BucketArray<RESRT,32ul>::setBucketsCapacity((void *)result, (a2 + 31) >> 5);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      __n128 result = re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](v3, v4);
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

__n128 RESkeletonDefinitionGetLocalRestPoses(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 208;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = re::BucketArray<RESRT,32ul>::operator[](v5, v4);
      long long v9 = *(_OWORD *)(v7 + 16);
      __n128 result = *(__n128 *)(v7 + 32);
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_OWORD *)(a2 + 16) = v9;
      *(__n128 *)(a2 + 32) = result;
      ++v4;
      a2 += 48;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t re::BucketArray<RESRT,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 48 * (a2 & 0x1F);
}

__n128 RESkeletonDefinitionSetInverseBindPoses(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v6 = a1 + 152;
  uint64_t v7 = a3;
  unint64_t v8 = *(void *)(a1 + 192);
  if (v8 >= a3)
  {
    if (v8 > a3)
    {
      unint64_t v11 = a3;
      do
        re::BucketArray<simd_float4x4,32ul>::operator[](v6, v11++);
      while (v11 != *(void *)(a1 + 192));
      *(void *)(a1 + 192) = v7;
    }
  }
  else
  {
    if (a3 > (unint64_t)(32 * *(void *)(a1 + 160)))
    {
      re::BucketArray<simd_float4x4,32ul>::setBucketsCapacity((void *)(a1 + 152), ((unint64_t)a3 + 31) >> 5);
      unint64_t v8 = *(void *)(a1 + 192);
    }
    for (*(void *)(a1 + 192) = v7; v8 != *(void *)(a1 + 192); ++v8)
    {
      long long v10 = (_OWORD *)re::BucketArray<simd_float4x4,32ul>::operator[](v6, v8);
      result.n128_u64[0] = 0;
      _OWORD *v10 = 0u;
      v10[1] = 0u;
      void v10[2] = 0u;
      uint64_t v10[3] = 0u;
    }
  }
  ++*(_DWORD *)(a1 + 200);
  if (a3)
  {
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = re::BucketArray<simd_float4x4,32ul>::operator[](v6, v12);
      __n128 result = (__n128)a2[2];
      long long v14 = a2[3];
      long long v16 = *a2;
      long long v15 = a2[1];
      a2 += 4;
      *(__n128 *)(v13 + 32) = result;
      *(_OWORD *)(v13 + 48) = v14;
      *(_OWORD *)unint64_t v13 = v16;
      *(_OWORD *)(v13 + 16) = v15;
      ++v12;
    }
    while (v7 != v12);
  }
  return result;
}

unint64_t re::BucketArray<simd_float4x4,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + ((a2 & 0x1F) << 6);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + ((a2 & 0x1F) << 6);
}

BOOL RESkeletonDefinitionValidate(void *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v15 = 0x7FFFFFFFLL;
  id v9 = v12;
  if (a2 && v12) {
    *a2 = CFRetain(v12);
  }

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v13);
  return v9 == 0;
}

void anonymous namespace'::SkeletonDefinition::validate(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2[3] <= 1uLL)
  {
    id v12 = (unsigned char *)a2[4];
    if (v12)
    {
      if (!*v12)
      {
        return;
      }
    }
  }
  unint64_t v13 = a2[10];
  if (HIDWORD(v13))
  {
    uint64_t v48 = a2[4];
    int v14 = @"Skeleton '%s' has way too many joints";
    goto LABEL_36;
  }
  if (!v13)
  {
    uint64_t v48 = a2[4];
    int v14 = @"Expected skeleton '%s' to have at least one joint";
LABEL_36:
    char v31 = a1;
LABEL_37:
    return;
  }
  unsigned int v15 = 0;
  v55.i32[0] = 0;
  do
  {
    long long v16 = (StringID *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a2 + 5), v15);
    int v17 = *(_DWORD *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(a3, v16, &v55);
    if (v17 != v55.i32[0])
    {
      uint64_t v23 = a2[4];
      re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a2 + 5), v55.u32[0]);
      return;
    }
    unsigned int v15 = v17 + 1;
    v55.i32[0] = v17 + 1;
  }
  while (v17 + 1 < v13);
  uint64_t v18 = (uint64_t)(a2 + 12);
  uint64_t v19 = a2[17];
  if (v19)
  {
    if (v19 == v13)
    {
      char v52 = a1;
      unint64_t v20 = 0;
      while (1)
      {
        unint64_t v21 = *(unsigned int *)re::BucketArray<unsigned int,32ul>::operator[]((uint64_t)(a2 + 12), v20);
        if (v21 != -1 && v20 <= v21) {
          break;
        }
        if (v19 == ++v20) {
          goto LABEL_31;
        }
      }
      return;
    }
    uint64_t v48 = a2[4];
    int v14 = @"Expected all joint arrays for skeleton '%s' to have the same count";
    goto LABEL_36;
  }
  char v52 = a1;
  re::BucketArray<unsigned int,32ul>::resize(a2 + 12, v13);
  unint64_t v24 = 0;
  do
  {
    *(_DWORD *)re::BucketArray<unsigned int,32ul>::operator[]((uint64_t)(a2 + 12), v24) = -1;
    char v25 = *(char **)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a2 + 5), v24)+ 8);
    int v26 = strrchr(v25, 47);
    if (!v26) {
      goto LABEL_30;
    }
    size_t v27 = v26 - v25;
    v55.i64[0] = 0;
    v55.i64[1] = (uint64_t)"";
    uint64_t v28 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a3, &v55);
    if (!v28)
    {
LABEL_41:
      re::StringID::destroyString((re::StringID *)&v55);
      return;
    }
    unint64_t v29 = *v28;
    if (v24 <= v29)
    {
      goto LABEL_41;
    }
    *(_DWORD *)re::BucketArray<unsigned int,32ul>::operator[]((uint64_t)(a2 + 12), v24) = v29;
    re::StringID::destroyString((re::StringID *)&v55);
LABEL_30:
    ++v24;
  }
  while (v13 != v24);
LABEL_31:
  if (a2[24] != v13)
  {
LABEL_34:
    uint64_t v48 = a2[4];
    int v14 = @"Expected all joint arrays for skeleton '%s' to have the same count";
    char v31 = v52;
    goto LABEL_37;
  }
  uint64_t v30 = a2[31];
  if (v30)
  {
    if (v30 != v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v51 = (uint64_t)(a2 + 26);
    re::BucketArray<RESRT,32ul>::resize((uint64_t)(a2 + 26), v13);
    unint64_t v32 = 0;
    uint64_t v33 = (uint64_t)(a2 + 19);
    int v49 = a2 + 19;
    uint64_t v50 = v13;
    do
    {
      simd_float4x4 v59 = *(simd_float4x4 *)re::BucketArray<simd_float4x4,32ul>::operator[](v33, v32);
      simd_float4x4 v53 = __invert_f4(v59);
      if (*(_DWORD *)re::BucketArray<unsigned int,32ul>::operator[](v18, v32) == -1)
      {
        int32x4_t v55 = 0u;
        v54[0] = (int32x4_t)xmmword_23435FBB0;
        v57[0] = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v53, &v55, v54, v57);
        uint64_t v41 = v55.i64[1];
        uint64_t v42 = v55.i64[0];
        uint64_t v44 = v54[0].i64[1];
        uint64_t v43 = v54[0].i64[0];
        uint64_t v46 = *((void *)&v57[0] + 1);
        uint64_t v45 = *(void *)&v57[0];
      }
      else
      {
        char v34 = (unsigned int *)re::BucketArray<unsigned int,32ul>::operator[](v18, v32);
        char v35 = (float32x4_t *)re::BucketArray<simd_float4x4,32ul>::operator[](v33, *v34);
        uint64_t v36 = 0;
        float32x4_t v37 = *v35;
        float32x4_t v38 = v35[1];
        float32x4_t v39 = v35[2];
        float32x4_t v40 = v35[3];
        v54[0] = (int32x4_t)v53.columns[0];
        v54[1] = (int32x4_t)v53.columns[1];
        v54[2] = (int32x4_t)v53.columns[2];
        v54[3] = (int32x4_t)v53.columns[3];
        do
        {
          *(float32x4_t *)((char *)&v55 + v36 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, COERCE_FLOAT(*(_OWORD *)&v54[v36])), v38, *(float32x2_t *)v54[v36].i8, 1), v39, (float32x4_t)v54[v36], 2), v40, (float32x4_t)v54[v36], 3);
          ++v36;
        }
        while (v36 != 4);
        v54[0] = 0u;
        long long v56 = 0u;
        v57[0] = xmmword_23435FBB0;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v55, v54, v57, &v56);
        uint64_t v41 = v54[0].i64[1];
        uint64_t v42 = v54[0].i64[0];
        uint64_t v44 = *((void *)&v57[0] + 1);
        uint64_t v43 = *(void *)&v57[0];
        uint64_t v46 = *((void *)&v56 + 1);
        uint64_t v45 = v56;
      }
      int v47 = (void *)re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](v51, v32);
      *int v47 = v42;
      v47[1] = v41;
      v47[2] = v43;
      v47[3] = v44;
      ++v32;
      v47[4] = v45;
      v47[5] = v46;
      uint64_t v33 = (uint64_t)v49;
    }
    while (v32 != v50);
  }
  *char v52 = 0;
}

uint64_t RESkeletonDefinitionCreateGeomSkeletonV2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  long long v10 = &v42;
  unint64_t v42 = 0;
  uint64_t v43 = "";
  uint64_t v11 = &v44;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  int v51 = 0;
  uint64_t v52 = 0x7FFFFFFFLL;
  id v12 = v53;
  if (!v53)
  {
    unsigned int v15 = &v42;
    long long v16 = re::StringID::operator=(&v42, (uint64_t *)(a1 + 24));
    unint64_t v17 = *(unsigned int *)(a1 + 80);
    if (v17)
    {
      unint64_t v8 = 0;
      id v12 = 0;
      unint64_t v19 = a1 + 40;
      while (1)
      {
        unint64_t v20 = (uint64_t *)re::BucketArray<re::StringID,32ul>::operator[](a1 + 40, (unint64_t)v12);
        unint64_t v21 = (char *)*((void *)&v44 + 1);
        if (*((void *)&v44 + 1) <= (unint64_t)v12) {
          break;
        }
        uint64_t v18 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)((char *)v8 + v45), v20);
        ++v12;
        v8 += 2;
        if ((char *)v17 == v12) {
          goto LABEL_10;
        }
      }
      uint64_t v54 = 0;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v55 = 136315906;
      long long v56 = "operator[]";
      __int16 v57 = 1024;
      int v58 = 468;
      __int16 v59 = 2048;
      uint64_t v60 = v12;
      __int16 v61 = 2048;
      uint64_t v62 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_10:
      id v12 = (char *)&v45 + 8;
      if (!v17)
      {
LABEL_14:
        unint64_t v8 = &v42;
        if (!v17)
        {
LABEL_18:
          if (!v17)
          {
LABEL_22:
            char v34 = re::globalAllocators(v33);
            uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34[2] + 32))(v34[2], 184, 8);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)v14, 0);
            *(void *)uint64_t v14 = &unk_26E735568;
            *(_OWORD *)(v14 + 56) = 0u;
            *(_OWORD *)(v14 + 72) = 0u;
            *(_OWORD *)(v14 + 104) = 0u;
            *(_OWORD *)(v14 + 120) = 0u;
            *(_OWORD *)(v14 + 152) = 0u;
            *(void *)(v14 + 168) = 0x7FFFFFFF00000000;
            *(void *)(v14 + 176) = 0;
            *(_OWORD *)(v14 + 136) = 0u;
            *(_OWORD *)(v14 + 88) = 0u;
            *(_OWORD *)(v14 + 40) = 0u;
            unint64_t v35 = v42;
            uint64_t v36 = v43;
            unint64_t v37 = v42 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v42 = 0;
            uint64_t v43 = "";
            *(void *)long long buf = v37;
            *(void *)&buf[8] = "";
            *(void *)(v14 + 24) = v35;
            *(void *)(v14 + 32) = v36;
            re::StringID::destroyString((re::StringID *)buf);
            re::FixedArray<float>::operator=((uint64_t *)(v14 + 40), (uint64_t *)&v44);
            re::FixedArray<float>::operator=((uint64_t *)(v14 + 64), (uint64_t *)&v45 + 1);
            re::FixedArray<float>::operator=((uint64_t *)(v14 + 88), (uint64_t *)&v47);
            re::FixedArray<float>::operator=((uint64_t *)(v14 + 112), (uint64_t *)&v48 + 1);
            re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v14 + 136, (uint64_t *)v50);
            goto LABEL_23;
          }
          uint64_t v28 = 0;
          unint64_t v8 = 0;
          long long v10 = (unint64_t *)(a1 + 208);
          while (1)
          {
            unint64_t v29 = (long long *)re::BucketArray<RESRT,32ul>::operator[](a1 + 208, (unint64_t)v8);
            id v12 = (char *)*((void *)&v47 + 1);
            if (*((void *)&v47 + 1) <= (unint64_t)v8) {
              goto LABEL_39;
            }
            uint64_t v30 = (_OWORD *)(v48 + v28);
            long long v31 = *v29;
            long long v32 = v29[2];
            v30[1] = v29[1];
            v30[2] = v32;
            *uint64_t v30 = v31;
            unint64_t v8 = (unint64_t *)((char *)v8 + 1);
            v28 += 48;
            if ((unint64_t *)v17 == v8) {
              goto LABEL_22;
            }
          }
        }
        long long v10 = 0;
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v23 = (_anonymous_namespace_ *)re::BucketArray<simd_float4x4,32ul>::operator[](a1 + 152, (unint64_t)v15);
          id v12 = (char *)v49;
          if ((unint64_t)v49 <= (unint64_t)v15) {
            break;
          }
          long long v25 = *((_OWORD *)v23 + 2);
          long long v24 = *((_OWORD *)v23 + 3);
          long long v26 = *((_OWORD *)v23 + 1);
          size_t v27 = (_OWORD *)((char *)v10 + *((void *)&v49 + 1));
          *size_t v27 = *(_OWORD *)v23;
          v27[1] = v26;
          v27[2] = v25;
          void v27[3] = v24;
          unsigned int v15 = (unint64_t *)((char *)v15 + 1);
          v10 += 8;
          if ((unint64_t *)v17 == v15) {
            goto LABEL_18;
          }
        }
LABEL_38:
        uint64_t v54 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v55 = 136315906;
        long long v56 = "operator[]";
        __int16 v57 = 1024;
        int v58 = 468;
        __int16 v59 = 2048;
        uint64_t v60 = (char *)v15;
        __int16 v61 = 2048;
        uint64_t v62 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        uint64_t v54 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        *(_OWORD *)long long buf = 0u;
        uint64_t v11 = (long long *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v55 = 136315906;
        long long v56 = "operator[]";
        __int16 v57 = 1024;
        int v58 = 468;
        __int16 v59 = 2048;
        uint64_t v60 = (char *)v8;
        __int16 v61 = 2048;
        uint64_t v62 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_40;
      }
      unint64_t v19 = 0;
      unsigned int v15 = (unint64_t *)(a1 + 96);
      while (1)
      {
        int v22 = (_anonymous_namespace_ *)re::BucketArray<unsigned int,32ul>::operator[](a1 + 96, v19);
        unint64_t v21 = (char *)v46;
        if ((unint64_t)v46 <= v19) {
          break;
        }
        *(_DWORD *)(*((void *)&v46 + 1) + 4 * v19++) = *(_DWORD *)v22;
        if (v17 == v19) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v54 = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v55 = 136315906;
    long long v56 = "operator[]";
    __int16 v57 = 1024;
    int v58 = 468;
    __int16 v59 = 2048;
    uint64_t v60 = (char *)v19;
    __int16 v61 = 2048;
    uint64_t v62 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_38;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_40:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v40 = re::WrappedError::localizedDescription((id *)&v53);
    *(_DWORD *)long long buf = 136315138;
    *(unint64_t *)((char *)v10 + 228) = v40;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Failed to create skeleton: %s", buf, 0xCu);
  }

  uint64_t v14 = 0;
LABEL_23:
  v38.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v50);
  if (*((void *)&v48 + 1))
  {
    if ((void)v49)
    {
      (*(void (**)(double))(**((void **)&v48 + 1) + 40))(v38.n128_f64[0]);
      long long v49 = 0uLL;
    }
    *((void *)&v48 + 1) = 0;
  }
  if ((void)v47)
  {
    if (*((void *)&v47 + 1))
    {
      (*(void (**)(__n128))(*(void *)v47 + 40))(v38);
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
    }
    *(void *)&long long v47 = 0;
  }
  if (*((void *)&v45 + 1))
  {
    if ((void)v46)
    {
      (*(void (**)(__n128))(**((void **)&v45 + 1) + 40))(v38);
      long long v46 = 0uLL;
    }
    *((void *)&v45 + 1) = 0;
  }
  re::FixedArray<re::StringID>::deinit(v11);
  re::StringID::destroyString((re::StringID *)&v42);
  return v14;
}

void *RESkeletonDefinitionCreateMeshSkeletonDefinition(re *a1)
{
  re::make::shared::object<re::MeshSkeletonDefinition>(a1, (uint64_t *)&v12);
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v11 = 0x7FFFFFFFLL;
  if (createSkeleton<re::MeshSkeletonDefinition>((uint64_t)a1, v12, (uint64_t)v9, v2, v3, v4, v5, v6))
  {
    uint64_t v7 = v12;
    id v12 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v9);
  if (v12) {

  }
  return v7;
}

BOOL createSkeleton<re::MeshSkeletonDefinition>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v10 = v32;
  if (!v32)
  {
    id v12 = re::StringID::operator=(a2 + 3, (uint64_t *)(a1 + 24));
    unint64_t v13 = *(unsigned int *)(a1 + 80);
    if (v13)
    {
      unint64_t v15 = 0;
      while (1)
      {
        long long v16 = (uint64_t *)re::BucketArray<re::StringID,32ul>::operator[](a1 + 40, v15);
        unint64_t v17 = a2[6];
        if (v17 <= v15) {
          break;
        }
        uint64_t v14 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)(a2[7] + 16 * v15++), v16);
        if (v15 == v13) {
          goto LABEL_10;
        }
      }
      uint64_t v33 = 0;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v34 = 136315906;
      unint64_t v35 = "operator[]";
      __int16 v36 = 1024;
      int v37 = 468;
      __int16 v38 = 2048;
      unint64_t v39 = v15;
      __int16 v40 = 2048;
      unint64_t v41 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_10:
      if (!v13)
      {
LABEL_14:
        if (!v13)
        {
LABEL_18:
          if (!v13)
          {
LABEL_22:
            goto LABEL_23;
          }
          unint64_t v15 = 0;
          while (1)
          {
            long long v25 = (long long *)re::BucketArray<RESRT,32ul>::operator[](a1 + 208, v15);
            unint64_t v17 = a2[12];
            if (v17 <= v15) {
              goto LABEL_27;
            }
            long long v26 = (_OWORD *)(a2[13] + 48 * v15);
            long long v27 = *v25;
            long long v28 = v25[2];
            v26[1] = v25[1];
            v26[2] = v28;
            *long long v26 = v27;
            if (++v15 == v13) {
              goto LABEL_22;
            }
          }
        }
        unint64_t v15 = 0;
        uint64_t v20 = 32;
        while (1)
        {
          unint64_t v19 = (_anonymous_namespace_ *)re::BucketArray<simd_float4x4,32ul>::operator[](a1 + 152, v15);
          unint64_t v17 = a2[15];
          if (v17 <= v15) {
            break;
          }
          long long v22 = *((_OWORD *)v19 + 2);
          long long v21 = *((_OWORD *)v19 + 3);
          long long v23 = *((_OWORD *)v19 + 1);
          long long v24 = (_OWORD *)(a2[16] + v20);
          *(v24 - 2) = *(_OWORD *)v19;
          *(v24 - 1) = v23;
          *long long v24 = v22;
          v24[1] = v21;
          ++v15;
          v20 += 64;
          if (v13 == v15) {
            goto LABEL_18;
          }
        }
LABEL_26:
        uint64_t v33 = 0;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v34 = 136315906;
        unint64_t v35 = "operator[]";
        __int16 v36 = 1024;
        int v37 = 468;
        __int16 v38 = 2048;
        unint64_t v39 = v15;
        __int16 v40 = 2048;
        unint64_t v41 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        uint64_t v33 = 0;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v34 = 136315906;
        unint64_t v35 = "operator[]";
        __int16 v36 = 1024;
        int v37 = 468;
        __int16 v38 = 2048;
        unint64_t v39 = v15;
        __int16 v40 = 2048;
        unint64_t v41 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_28;
      }
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v18 = (_anonymous_namespace_ *)re::BucketArray<unsigned int,32ul>::operator[](a1 + 96, v15);
        unint64_t v17 = a2[9];
        if (v17 <= v15) {
          break;
        }
        *(_DWORD *)(a2[10] + 4 * v15++) = *(_DWORD *)v18;
        if (v13 == v15) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v33 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v34 = 136315906;
    unint64_t v35 = "operator[]";
    __int16 v36 = 1024;
    int v37 = 468;
    __int16 v38 = 2048;
    unint64_t v39 = v15;
    __int16 v40 = 2048;
    unint64_t v41 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_28:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = re::WrappedError::localizedDescription(&v32);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to create skeleton: %s", buf, 0xCu);
  }

LABEL_23:
  return v10 == 0;
}

uint64_t RESkeletonDefinitionCreateSkeletonAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  re::StringID::StringID((re::StringID *)v32, (const StringID *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 40);
  v33[0] = 0;
  v33[1] = 0;
  int v34 = 0;
  re::FixedArray<re::StringID>::init<>(v33, v5, *(void *)(a1 + 80));
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6)
  {
    unint64_t v2 = 0;
    uint64_t v7 = v34;
    do
    {
      unint64_t v8 = (uint64_t *)re::BucketArray<re::StringID,32ul>::operator[](a1 + 40, v2);
      re::StringID::operator=(v7, v8);
      ++v2;
      v7 += 2;
    }
    while (v6 != v2);
  }
  unint64_t v10 = a1 + 96;
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  re::FixedArray<int>::init<>(&v35, v9, *(void *)(a1 + 136));
  uint64_t v11 = *(void *)(a1 + 136);
  if (v11)
  {
    unint64_t v2 = 0;
    uint64_t v12 = v37;
    do
    {
      *(_DWORD *)(v12 + 4 * v2) = *(_DWORD *)re::BucketArray<unsigned int,32ul>::operator[](a1 + 96, v2);
      ++v2;
    }
    while (v11 != v2);
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  unint64_t v13 = (re *)re::FixedArray<re::GenericSRT<float>>::init<>(&v38, *(void *)(a1 + 208), *(void *)(a1 + 248));
  uint64_t v15 = *(void *)(a1 + 248);
  if (v15)
  {
    unint64_t v16 = 0;
    unint64_t v17 = v40;
    do
    {
      unint64_t v18 = *(void *)(a1 + 248);
      if (v18 <= v16)
      {
        re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, v16, v18);
        _os_crash();
        __break(1u);
LABEL_26:
        uint64_t v41 = 0;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        memset(v47, 0, sizeof(v47));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v42 = 136315906;
        *(void *)&v42[4] = "operator[]";
        __int16 v43 = 1024;
        int v44 = 866;
        __int16 v45 = 2048;
        *(void *)long long v46 = v10;
        *(_WORD *)&v46[8] = 2048;
        *(void *)&v46[10] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v10 = v16 >> 5;
      unint64_t v2 = *(void *)(a1 + 216);
      if (v2 <= v16 >> 5) {
        goto LABEL_26;
      }
      uint64_t v19 = a1 + 232;
      if ((*(unsigned char *)(a1 + 224) & 1) == 0) {
        uint64_t v19 = *(void *)(a1 + 240);
      }
      uint64_t v20 = (long long *)(*(void *)(v19 + 8 * v10) + 48 * (v16 & 0x1F));
      long long v21 = *v20;
      long long v22 = v20[2];
      v17[1] = v20[1];
      void v17[2] = v22;
      *unint64_t v17 = v21;
      v17 += 3;
      ++v16;
    }
    while (v15 != v16);
  }
  long long v23 = re::globalAllocators(v13);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23[2] + 32))(v23[2], 248, 8);
  re::SkeletonAsset::SkeletonAsset(v24, v32);
  *(void *)unint64_t v42 = &unk_26E7355F8;
  *(void *)&v46[4] = v42;
  *(void *)&long long v48 = (char *)v47 + 8;
  *(void *)&v47[0] = v25;
  *((void *)&v47[0] + 1) = &unk_26E7355F8;
  std::__function::__value_func<void ()(re::SkeletonAsset *)>::~__value_func[abi:nn180100](v42);
  if (v38)
  {
    if (v39)
    {
      (*(void (**)(void))(*(void *)v38 + 40))();
      uint64_t v39 = 0;
      __int16 v40 = 0;
    }
    uint64_t v38 = 0;
  }
  if (v35)
  {
    if (v36)
    {
      (*(void (**)(void))(*(void *)v35 + 40))();
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    uint64_t v35 = 0;
  }
  re::FixedArray<re::StringID>::deinit(v33);
  re::StringID::destroyString((re::StringID *)v32);
  uint64_t v26 = *(void *)&v47[0];
  long long v28 = re::SkeletonAsset::assetType(v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a2 + 416))(v32, a2, v26, v28, 0, 0, 0);
  uint64_t v29 = v32[0];
  if (v32[0])
  {
    id v30 = (id)(v32[0] + 8);
    *(void *)&v47[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v47);
  return v29;
}

void anonymous namespace'::makeError(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>, uint64_t a4)
{
  v13[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (objc_class *)NSString;
  id v7 = a2;
  unint64_t v8 = (void *)[[v6 alloc] initWithFormat:v7 arguments:&a4];

  uint64_t v9 = (void *)MEMORY[0x263F087E8];
  uint64_t v12 = *MEMORY[0x263F08320];
  v13[0] = v8;
  unint64_t v10 = [NSDictionary dictionaryWithObjects:v13 forKeys:&v12 count:1];
  id v11 = [v9 errorWithDomain:@"RESkeletonDefinitionErrorDomain" code:a1 userInfo:v10];
  *a3 = v11;
}

uint64_t *re::BucketArray<unsigned int,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 128, 0);
        __n128 result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<unsigned int,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<unsigned int,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<RESRT,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1536, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<RESRT,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<RESRT,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::StringID,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::StringID,32ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<simd_float4x4,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<simd_float4x4,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void anonymous namespace'::SkeletonDefinition::~SkeletonDefinition(_anonymous_namespace_::SkeletonDefinition *this)
{
  *(void *)this = &unk_26E735520;
  unint64_t v2 = (uint64_t *)((char *)this + 208);
  uint64_t v3 = *((void *)this + 31);
  if (v3)
  {
    for (unint64_t i = 0; i != v3; ++i)
      re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)v2, i);
  }
  while (*((void *)this + 27))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((void *)this + 31) = 0;
  ++*((_DWORD *)this + 64);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  uint64_t v5 = *((void *)this + 24);
  if (v5)
  {
    for (unint64_t j = 0; j != v5; ++j)
      re::BucketArray<simd_float4x4,32ul>::operator[]((uint64_t)this + 152, j);
  }
  while (*((void *)this + 20))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 19);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 152);
  *((void *)this + 24) = 0;
  ++*((_DWORD *)this + 50);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 152);
  uint64_t v7 = *((void *)this + 17);
  if (v7)
  {
    for (unint64_t k = 0; k != v7; ++k)
      re::BucketArray<unsigned int,32ul>::operator[]((uint64_t)this + 96, k);
  }
  while (*((void *)this + 13))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 12);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 96);
  *((void *)this + 17) = 0;
  ++*((_DWORD *)this + 36);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 96);
  uint64_t v9 = *((void *)this + 10);
  if (v9)
  {
    for (unint64_t m = 0; m != v9; ++m)
    {
      BOOL v11 = (re::StringID *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)this + 40, m);
      re::StringID::destroyString(v11);
    }
  }
  while (*((void *)this + 6))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 5);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 40);
  *((void *)this + 10) = 0;
  ++*((_DWORD *)this + 22);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 40);
  re::StringID::destroyString((_anonymous_namespace_::SkeletonDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::BucketArray<re::StringID,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void *re::BucketArray<simd_float4x4,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 2048, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::StringID,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 16 * (a2 & 0x1F);
}

void anonymous namespace'::SkeletonDefinition::clear(_anonymous_namespace_::SkeletonDefinition *this)
{
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)this + 208, i);
  }
  *((void *)this + 31) = 0;
  ++*((_DWORD *)this + 64);
  uint64_t v4 = *((void *)this + 24);
  if (v4)
  {
    for (unint64_t j = 0; j != v4; ++j)
      re::BucketArray<simd_float4x4,32ul>::operator[]((uint64_t)this + 152, j);
  }
  *((void *)this + 24) = 0;
  ++*((_DWORD *)this + 50);
  uint64_t v6 = *((void *)this + 17);
  if (v6)
  {
    for (unint64_t k = 0; k != v6; ++k)
      re::BucketArray<unsigned int,32ul>::operator[]((uint64_t)this + 96, k);
  }
  *((void *)this + 17) = 0;
  ++*((_DWORD *)this + 36);
  uint64_t v8 = *((void *)this + 10);
  if (v8)
  {
    for (unint64_t m = 0; m != v8; ++m)
    {
      unint64_t v10 = (re::StringID *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)this + 40, m);
      re::StringID::destroyString(v10);
    }
  }
  *((void *)this + 10) = 0;
  ++*((_DWORD *)this + 22);
  v12[0] = 0;
  v12[1] = "";
  uint64_t v11 = *((void *)this + 4);
  v13[0] = *((void *)this + 3) & 1;
  v13[1] = v11;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = "";
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
}

uint64_t *re::Shareable<re::GeomSkeleton>::~Shareable(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E735568;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 17);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 14);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<re::StringID>::deinit(a1 + 5);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = (uint64_t)&unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::GeomSkeleton>::~Shareable(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E735568;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 17);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 14);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<re::StringID>::deinit(a1 + 5);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = (uint64_t)&unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::make::shared::object<re::MeshSkeletonDefinition>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 136, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(void *)(v4 + 128) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E7355B0;
  *(void *)(v4 + 32) = "";
  double result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *a2 = v4;
  return result;
}

void re::MeshSkeletonDefinition::~MeshSkeletonDefinition(re::MeshSkeletonDefinition *this)
{
  *(void *)this = &unk_26E7355B0;
  uint64_t v2 = (re::MeshSkeletonDefinition *)((char *)this + 24);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 14);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8);
  re::FixedArray<re::StringID>::deinit((void *)this + 5);
  re::StringID::destroyString(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::StringID *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7355B0;
  uint64_t v2 = (re::MeshSkeletonDefinition *)((char *)this + 24);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 14);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8);
  re::FixedArray<re::StringID>::deinit((void *)this + 5);
  re::StringID::destroyString(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E7355F8;
  return result;
}

void std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7355F8;
}

re *std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::operator()(uint64_t a1, uint64_t **a2)
{
  return re::internal::destroyPersistent<re::SkeletonAsset>((re *)"operator()", 36, *a2);
}

uint64_t std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::SkeletonAsset,std::function<void ()(re::SkeletonAsset*)>> re::makeDefaultUniquePtr<re::SkeletonAsset,re::SkeletonAssetData>(re::SkeletonAssetData &&)::{lambda(re::SkeletonAsset*)#1},std::allocator<re::SkeletonAsset*>,void ()(re::SkeletonAssetData &&)>::target_type()
{
}

void *RECoordinateSpaceDefinitionComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *REColliderComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REColliderComponentGetShape(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 32);
}

uint64_t REColliderComponentSetShape(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REColliderComponentGetType()
{
  return 0;
}

uint64_t REColliderComponentGetInteractionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 60);
}

uint64_t REColliderComponentSetInteractionType(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(_DWORD *)(v3 + 60) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REColliderComponentGetGroup(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 64);
}

uint64_t REColliderComponentSetGroup(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(_DWORD *)(v3 + 64) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REColliderComponentGetMask(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 68);
}

uint64_t REColliderComponentSetMask(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(_DWORD *)(v3 + 68) = v2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REColliderComponentGetCollisionObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = *(const re::ecs2::Scene **)(v5 + 16);
    if (v6) {
      re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(v6, v3);
    }
  }
  return *(void *)(a1 + 96);
}

uint64_t REColliderComponentIsTrigger(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 96);
  uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v2 + 32))(v2);
  if (result) {
    return (v2[88] >> 1) & 1;
  }
  return result;
}

uint64_t RECollisionObjectGetEntity(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[257] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *REForceEffectComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REForceEffectComponentGetForceEffectCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t REForceEffectComponentResizeForceEffects(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t v5 = *(void *)(result + 48);
    if (v5)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = *(void *)(result + 48);
      do
      {
        if (v9 <= v8)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_15:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::EventBus::unsubscribe(a3, *(void *)(v4[8] + v7 + 240), *(void *)(v4[8] + v7 + 248));
        unint64_t v9 = v4[6];
        if (v9 <= v8) {
          goto LABEL_15;
        }
        unint64_t v10 = *(const void **)(v4[8] + v7 + 256);
        if (v10)
        {
          CFRelease(v10);
          unint64_t v9 = v4[6];
          if (v9 <= v8) {
            goto LABEL_16;
          }
          *(void *)(v4[8] + v7 + 256) = 0;
        }
        ++v8;
        v7 += 272;
      }
      while (v5 != v8);
    }
    re::DynamicArray<re::ecs2::ForceEffectDesc>::resize(v4 + 4, a2);
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)v4);
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectPosition(uint64_t result, unint64_t a2, __n128 a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(__n128 *)(v3 + 272 * a2) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

__n128 REForceEffectComponentGetForceEffectPosition(uint64_t a1, unint64_t a2)
{
  __n128 result = 0uLL;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      return *(__n128 *)(v3 + 272 * a2);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectOrientation(uint64_t result, unint64_t a2, __n128 a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(__n128 *)(v3 + 272 * a2 + 16) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

__n128 REForceEffectComponentGetForceEffectOrientation(uint64_t a1, unint64_t a2)
{
  __n128 result = 0uLL;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      return *(__n128 *)(v3 + 272 * a2 + 16);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectStrengthScale(uint64_t result, unint64_t a2, float a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(float *)(v3 + 272 * a2 + 32) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectStrengthScale(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      return *(float *)(v3 + 272 * a2 + 32);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetSimulationState(uint64_t result, char a2)
{
  if (result)
  {
    if (!*(unsigned char *)(result + 25)) {
      *(unsigned char *)(result + 25) = 1;
    }
    *(unsigned char *)(result + 26) = a2;
  }
  return result;
}

BOOL REForceEffectComponentHasSimulationState(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 25) != 0;
  }
  return result;
}

uint64_t REForceEffectComponentGetSimulationState(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 25)) {
      return *(unsigned __int8 *)(result + 26);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REForceEffectComponentRemoveSimulationState(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 25)) {
      *(unsigned char *)(result + 25) = 0;
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectMask(uint64_t result, unint64_t a2, int a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(_DWORD *)(v3 + 272 * a2 + 36) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectMask(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(unsigned int *)(v2 + 272 * a2 + 36);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectInputs(uint64_t result, unint64_t a2, int a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(_DWORD *)(v3 + 272 * a2 + 176) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectForceMode(uint64_t result, unint64_t a2, char a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      *(unsigned char *)(v3 + 272 * a2 + 40) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectForceMode(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(unsigned __int8 *)(v2 + 272 * a2 + 40);
    }
    else {
      return 0;
    }
  }
  return result;
}

_anonymous_namespace_ *REForceEffectComponentSetForceEffectEventKey(_anonymous_namespace_ *result, unint64_t a2, const char *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *((void *)result + 6);
    if (v5 <= a2)
    {
      memset(v18, 0, sizeof(v18));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v13 = 136315906;
      *(void *)&void v13[4] = "operator[]";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 789;
      __int16 v14 = 2048;
      unint64_t v15 = a2;
      __int16 v16 = 2048;
      unint64_t v17 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = *((void *)result + 8);
    if (v6)
    {
      *(void *)unint64_t v13 = 0;
      *(void *)&unsigned char v13[8] = "";
      uint64_t v8 = v6 + 272 * a2;
      uint64_t v9 = *(void *)v13;
      uint64_t v10 = *(void *)&v13[8];
      *(void *)unint64_t v13 = 0;
      *(void *)&unsigned char v13[8] = "";
      uint64_t v11 = *(void *)(v8 + 192);
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v8 + 184) & 1;
      *(void *)(v8 + 192) = v10;
      *(void *)&v18[0] = v12;
      *((void *)&v18[0] + 1) = v11;
      *(void *)(v8 + 184) = v9;
      re::StringID::destroyString((re::StringID *)v18);
      re::StringID::destroyString((re::StringID *)v13);
      return (_anonymous_namespace_ *)re::ecs2::Component::enqueueMarkDirty(v4);
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectEventKey(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(void *)(v2 + 272 * a2 + 192);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL REForceEffectComponentForceEffectHasTimedFalloff(BOOL result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    return v2 && *(unsigned __int8 *)(v2 + 272 * a2 + 64) != 0;
  }
  return result;
}

uint64_t REForceEffectComponentForceEffectRemoveTimedFalloff(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2)
    {
      uint64_t v3 = v2 + 272 * a2;
      int v5 = *(unsigned __int8 *)(v3 + 64);
      uint64_t v4 = (unsigned char *)(v3 + 64);
      if (v5) {
        *uint64_t v4 = 0;
      }
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectTimedFalloffDuration(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      memset(v12, 0, sizeof(v12));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = v3 + 272 * a2;
      int v7 = *(unsigned __int8 *)(v4 + 64);
      uint64_t v5 = v4 + 64;
      int v6 = v7;
      LODWORD(v12[0]) = 1065353216;
      uint64_t v8 = (_DWORD *)(v5 + 16);
      uint64_t v9 = (uint64_t *)v12;
      if (v7) {
        uint64_t v9 = (uint64_t *)(v5 + 16);
      }
      uint64_t v10 = *v9;
      double v11 = a3;
      if (v6)
      {
        _DWORD *v8 = v10;
      }
      else
      {
        *(unsigned char *)uint64_t v5 = 1;
        *(void *)uint64_t v8 = v10;
      }
      *(double *)(v5 + 8) = v11;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectTimedFalloffDuration(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 272 * a2 + 64)) {
        return *(double *)(v3 + 272 * a2 + 72);
      }
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectTimedFalloffRate(uint64_t result, unint64_t a2, float a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = v3 + 272 * a2;
      int v6 = *(unsigned __int8 *)(v4 + 64);
      uint64_t v5 = v4 + 64;
      int v7 = (double *)(v5 + 8);
      if (v6)
      {
        double v8 = *v7;
      }
      else
      {
        *(unsigned char *)uint64_t v5 = 1;
        double v8 = 1.0;
      }
      double *v7 = v8;
      *(float *)(v5 + 16) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectTimedFalloffRate(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 272 * a2 + 64)) {
        return *(float *)(v3 + 272 * a2 + 80);
      }
    }
  }
  return result;
}

BOOL REForceEffectComponentForceEffectHasSpatialFalloff(BOOL result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    return v2 && *(unsigned __int8 *)(v2 + 272 * a2 + 44) != 0;
  }
  return result;
}

uint64_t REForceEffectComponentForceEffectRemoveSpatialFalloff(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2)
    {
      uint64_t v3 = v2 + 272 * a2;
      int v5 = *(unsigned __int8 *)(v3 + 44);
      uint64_t v4 = (unsigned char *)(v3 + 44);
      if (v5) {
        *uint64_t v4 = 0;
      }
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectSpatialFalloffRate(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      memset(v10, 0, sizeof(v10));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = v3 + 272 * a2;
      int v7 = *(unsigned __int8 *)(v4 + 44);
      uint64_t v5 = v4 + 44;
      int v6 = v7;
      *(void *)&v10[0] = 1065353216;
      double v8 = (uint64_t *)v10;
      if (v7) {
        double v8 = (uint64_t *)(v5 + 4);
      }
      uint64_t v9 = *v8;
      if (!v6) {
        *(unsigned char *)uint64_t v5 = 1;
      }
      *(void *)(v5 + 4) = v9;
      *(float *)(v5 + 12) = a3;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectSpatialFalloffRate(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 272 * a2 + 44)) {
        return *(float *)(v3 + 272 * a2 + 56);
      }
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectSpatialFalloffOffset(uint64_t result, unint64_t a2, float a3)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = v3 + 272 * a2;
      int v6 = *(unsigned __int8 *)(v4 + 44);
      uint64_t v5 = v4 + 44;
      int v7 = (float *)(v5 + 4);
      if (v6)
      {
        float v8 = *v7;
        float v9 = *(float *)(v5 + 12);
      }
      else
      {
        *(unsigned char *)uint64_t v5 = 1;
        float v9 = 1.0;
        float v8 = 1.0;
      }
      float *v7 = v8;
      *(float *)(v5 + 8) = a3;
      *(float *)(v5 + 12) = v9;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectSpatialFalloffOffset(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 272 * a2 + 44)) {
        return *(float *)(v3 + 272 * a2 + 52);
      }
    }
  }
  return result;
}

uint64_t REForceEffectComponentSetForceEffectBoundSphereRadius(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      memset(v10, 0, sizeof(v10));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = v3 + 272 * a2;
      int v7 = *(unsigned __int8 *)(v4 + 44);
      uint64_t v5 = v4 + 44;
      int v6 = v7;
      *(void *)&v10[0] = 0x3F80000000000000;
      float v8 = (uint64_t *)(v5 + 8);
      if (!v7) {
        float v8 = (uint64_t *)v10;
      }
      uint64_t v9 = *v8;
      if (!v6) {
        *(unsigned char *)uint64_t v5 = 1;
      }
      *(float *)(v5 + 4) = a3;
      *(void *)(v5 + 8) = v9;
      return re::ecs2::Component::enqueueMarkDirty(result);
    }
  }
  return result;
}

float REForceEffectComponentGetForceEffectBoundSphereRadius(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 272 * a2 + 44)) {
        return *(float *)(v3 + 272 * a2 + 48);
      }
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectUserData(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(void *)(v2 + 272 * a2 + 232);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectUserDataSize(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(void *)(v2 + 272 * a2 + 216);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REForceEffectComponentResizeForceEffectUserData(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v4 = *(void *)(result + 64);
    if (v4)
    {
      re::DynamicArray<BOOL>::resize(v4 + 272 * a2 + 200, a3);
      return re::ecs2::Component::enqueueMarkDirty(v3);
    }
  }
  return result;
}

uint64_t REForceEffectComponentGetForceEffectUserClass(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v2 = *(void *)(result + 64);
    if (v2) {
      return *(void *)(v2 + 272 * a2 + 256);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *REForceEffectComponentSetAndRetainForceEffectUserClass(void *this, unint64_t a2, void *cf)
{
  if (this)
  {
    uint64_t v3 = (uint64_t)this;
    if (this[6] <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v4 = this[8];
    if (v4)
    {
      uint64_t v6 = v4 + 272 * a2;
      this = *(void **)(v6 + 256);
      if (this != cf)
      {
        if (this) {
          CFRelease(this);
        }
        if (cf)
        {
          CFRetain(cf);
          *(void *)(v6 + 256) = cf;
        }
        return (void *)re::ecs2::Component::enqueueMarkDirty(v3);
      }
    }
  }
  return this;
}

uint64_t REForceEffectEventFilter(char *a1)
{
  if (!a1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  char v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 2);
    do
    {
      uint64_t v1 = 31 * v1 + v2;
      int v4 = *v3++;
      char v2 = v4;
    }
    while (v4);
  }
  return v1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t REForceEffectComponentSetForceEffectSubscription(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 48) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = *(void *)(result + 64);
    if (v6)
    {
      uint64_t v9 = v6 + 272 * a2;
      re::EventBus::unsubscribe(a3, *(void *)(v9 + 240), *(void *)(v9 + 248));
      *(void *)(v9 + 240) = a4;
      *(void *)(v9 + 248) = a5;
      return re::ecs2::Component::enqueueMarkDirty(v5);
    }
  }
  return result;
}

void RERegisterCustomSystem(int a1, int a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  unint64_t v12 = a4;
  uint64_t v13 = (os_unfair_lock_s *)re::ecs2::CustomSystemRegistry::instance(v12);
  v79[0] = a1;
  v79[1] = a2;
  v80 = _Block_copy(v11);
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  v81 = _Block_copy(v12);
  __int16 v14 = v13 + 1;
  os_unfair_lock_lock(v13 + 1);
  re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)&v13[4], (uint64_t)v79);
  os_unfair_lock_unlock(v13 + 1);
  if (a5 && a6)
  {
    unint64_t v15 = (_anonymous_namespace_ *)&v13[14];
    __int16 v16 = (int *)(a5 + 4);
    do
    {
      int v17 = *(v16 - 1);
      if (v17 == 1000000)
      {
        {
          re::introspect<re::ecs2::PhysicsSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_PhysicsSystem(0);
        }
        long long v74 = *((_OWORD *)re::introspect<re::ecs2::PhysicsSystem>(void)::info + 2);
        int v75 = -1;
        uint64_t v76 = 0;
        uint64_t v77 = 0xFFFFFFFFLL;
        int v78 = *v16;
        unint64_t v18 = &v74;
      }
      else
      {
        int v19 = *v16;
        if (*v16 == 1000000)
        {
          v70[0] = 0;
          v70[1] = 0xFFFFFFFFLL;
          int v71 = v17;
          {
            re::introspect<re::ecs2::PhysicsSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_PhysicsSystem(0);
          }
          long long v72 = *((_OWORD *)re::introspect<re::ecs2::PhysicsSystem>(void)::info + 2);
          int v73 = -1;
          unint64_t v18 = (long long *)v70;
        }
        else if (v17 == 1000001)
        {
          {
            re::introspect<re::ecs2::NetworkSendSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkSendSystem(0);
          }
          long long v65 = *((_OWORD *)re::introspect<re::ecs2::NetworkSendSystem>(void)::info + 2);
          int v66 = -1;
          uint64_t v67 = 0;
          uint64_t v68 = 0xFFFFFFFFLL;
          int v69 = *v16;
          unint64_t v18 = &v65;
        }
        else if (v19 == 1000001)
        {
          v61[0] = 0;
          v61[1] = 0xFFFFFFFFLL;
          int v62 = v17;
          {
            re::introspect<re::ecs2::NetworkSendSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkSendSystem(0);
          }
          long long v63 = *((_OWORD *)re::introspect<re::ecs2::NetworkSendSystem>(void)::info + 2);
          int v64 = -1;
          unint64_t v18 = (long long *)v61;
        }
        else if (v17 == 1000002)
        {
          {
            re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkReceiveSystem(0);
          }
          long long v56 = *((_OWORD *)re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info + 2);
          int v57 = -1;
          uint64_t v58 = 0;
          uint64_t v59 = 0xFFFFFFFFLL;
          int v60 = *v16;
          unint64_t v18 = &v56;
        }
        else if (v19 == 1000002)
        {
          v52[0] = 0;
          v52[1] = 0xFFFFFFFFLL;
          int v53 = v17;
          {
            re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkReceiveSystem(0);
          }
          long long v54 = *((_OWORD *)re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info + 2);
          int v55 = -1;
          unint64_t v18 = (long long *)v52;
        }
        else if (v17 == 1000003)
        {
          {
            re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnimationUpdateSystem(0);
          }
          long long v47 = *((_OWORD *)re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info + 2);
          int v48 = -1;
          uint64_t v49 = 0;
          uint64_t v50 = 0xFFFFFFFFLL;
          int v51 = *v16;
          unint64_t v18 = &v47;
        }
        else if (v19 == 1000003)
        {
          v43[0] = 0;
          v43[1] = 0xFFFFFFFFLL;
          int v44 = v17;
          {
            re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnimationUpdateSystem(0);
          }
          long long v45 = *((_OWORD *)re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info + 2);
          int v46 = -1;
          unint64_t v18 = (long long *)v43;
        }
        else if (v17 == 1000004)
        {
          {
            re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SkeletalPoseSystem(0);
          }
          long long v38 = *((_OWORD *)re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info + 2);
          int v39 = -1;
          uint64_t v40 = 0;
          uint64_t v41 = 0xFFFFFFFFLL;
          int v42 = *v16;
          unint64_t v18 = &v38;
        }
        else if (v19 == 1000004)
        {
          v34[0] = 0;
          v34[1] = 0xFFFFFFFFLL;
          int v35 = v17;
          long long v36 = *(_OWORD *)(re::introspect<re::ecs2::SkeletalPoseSystem>() + 32);
          int v37 = -1;
          unint64_t v18 = (long long *)v34;
        }
        else if (v17 == 1000005)
        {
          long long v29 = *((_OWORD *)re::introspect<re::ecs2::CustomDeformerSystem>() + 2);
          int v30 = -1;
          uint64_t v31 = 0;
          uint64_t v32 = 0xFFFFFFFFLL;
          int v33 = *v16;
          unint64_t v18 = &v29;
        }
        else if (v19 == 1000005)
        {
          v25[0] = 0;
          v25[1] = 0xFFFFFFFFLL;
          int v26 = v17;
          long long v27 = *((_OWORD *)re::introspect<re::ecs2::CustomDeformerSystem>() + 2);
          int v28 = -1;
          unint64_t v18 = (long long *)v25;
        }
        else
        {
          v20[0] = 0;
          v20[1] = 0xFFFFFFFFLL;
          int v21 = v17;
          uint64_t v22 = 0;
          uint64_t v23 = 0xFFFFFFFFLL;
          unint64_t v18 = (long long *)v20;
          int v24 = v19;
        }
      }
      os_unfair_lock_lock(v14);
      re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::add(v15, (uint64_t)v18);
      os_unfair_lock_unlock(v14);
      v16 += 2;
      --a6;
    }
    while (a6);
  }
}

uint64_t re::introspect<re::ecs2::SkeletalPoseSystem>()
{
  uint64_t v0 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    uint64_t v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    if (v2)
    {
      re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SkeletalPoseSystem(0);
      uint64_t v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    }
  }
  return v0[186];
}

char *re::introspect<re::ecs2::CustomDeformerSystem>()
{
  uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<re::ecs2::CustomDeformerSystem>(void)::info = re::ecs2::introspect_CustomDeformerSystem(0);
      uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[166];
}

float RECustomSystemUpdateContextGetDeltaTime(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t RECustomSystemUpdateContextGetSystemsArePausedInEditor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t REECSManagerGetCustomSystemAtID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t REECSManagerVerifyDependency(uint64_t a1, signed int a2, int a3, signed int a4, int a5)
{
  if (a3)
  {
    int v34 = 0;
    uint64_t result = _REECSManagerGetEngineSystemTypeIDs(a2, &v34);
    if (!result) {
      return result;
    }
    uint64_t v33 = *(void *)v34;
    int v27 = (unsigned __int16)*((_DWORD *)v34 + 2);
    int v28 = HIWORD(*((_DWORD *)v34 + 2));
    int v29 = *((_DWORD *)v34 + 3);
    if (!a5) {
      goto LABEL_4;
    }
LABEL_6:
    int v34 = 0;
    uint64_t result = _REECSManagerGetEngineSystemTypeIDs(a4, &v34);
    if (!result) {
      return result;
    }
    uint64_t v11 = *(void *)v34;
    int v30 = (unsigned __int16)*((_DWORD *)v34 + 2);
    int v31 = HIWORD(*((_DWORD *)v34 + 2));
    int v32 = *((_DWORD *)v34 + 3);
    goto LABEL_8;
  }
  uint64_t v33 = 0;
  int v28 = 0xFFFF;
  int v29 = 0;
  int v27 = 0xFFFF;
  if (a5) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v11 = 0;
  int v31 = 0xFFFF;
  int v32 = 0;
  int v30 = 0xFFFF;
LABEL_8:
  uint64_t v12 = *(void *)(a1 + 72);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = 0;
  __int16 v14 = *(void **)(a1 + 88);
  uint64_t v15 = 8 * v12;
  while (1)
  {
    __int16 v16 = (_DWORD *)*v14;
    BOOL v17 = v13 != 0;
    if (!v13)
    {
      if (a3)
      {
        uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v16 + 32))(*v14);
        if (v33 == *(void *)(v22 + 32))
        {
          uint64_t v23 = *(void *)(v22 + 40);
          BOOL v24 = v27 == (unsigned __int16)v23 && v28 == WORD1(v23);
          if (v24 && ((v29 ^ HIDWORD(v23)) & 0xFFFFFF) == 0)
          {
LABEL_37:
            uint64_t v13 = v16;
            goto LABEL_23;
          }
        }
      }
      else if (v16[7] == a2)
      {
        goto LABEL_37;
      }
    }
    if (a5) {
      break;
    }
    if (v16[7] == a4) {
      goto LABEL_39;
    }
LABEL_23:
    ++v14;
    v15 -= 8;
    if (!v15)
    {
      int v26 = 0;
      BOOL v17 = 0;
      return v26 & v17;
    }
  }
  uint64_t v18 = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 32))(v16);
  if (v11 != *(void *)(v18 + 32)) {
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)(v18 + 40);
  BOOL v20 = v30 == (unsigned __int16)v19 && v31 == WORD1(v19);
  if (!v20 || ((v32 ^ HIDWORD(v19)) & 0xFFFFFF) != 0) {
    goto LABEL_23;
  }
LABEL_39:
  int v26 = 1;
  return v26 & v17;
}

uint64_t RECustomSystemPhysicsID()
{
  return 1000000;
}

uint64_t RECustomSystemNetworkSendID()
{
  return 1000001;
}

uint64_t RECustomSystemNetworkReceiveID()
{
  return 1000002;
}

uint64_t RECustomSystemAnimationPlaybackID()
{
  return 1000003;
}

uint64_t RECustomSkeletalPoseID()
{
  return 1000004;
}

uint64_t RECustomSystemMeshDeformerID()
{
  return 1000005;
}

uint64_t RECustomSystemGetSwiftSystemForScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 152, &v3);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void *REWorldRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RECreateWorldRoot(re *a1)
{
  re::make::shared::object<re::ecs2::SharedWorldRootToken>(a1, &v2);
  uuid_generate_random(out);
  uint64_t result = v2;
  *(void *)(v2 + 24) = (*(void *)&out[8] + (*(void *)out << 6) + (*(void *)out >> 2) - 0x61C8864680B583E9) ^ *(void *)out;
  return result;
}

uint64_t RECreateWorldRootDefault(re *a1)
{
  re::make::shared::object<re::ecs2::SharedWorldRootToken>(a1, &v2);
  uint64_t result = v2;
  *(void *)(v2 + 24) = 0;
  return result;
}

BOOL REWorldRootEquals(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t REWorldRootComponentSetWorldRoot(uint64_t this, uint64_t a2)
{
  *(void *)(this + 32) = *(void *)(a2 + 24);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REWorldRootComponentCopyWorldRoot(re *a1)
{
  re::make::shared::object<re::ecs2::SharedWorldRootToken>(a1, &v3);
  uint64_t result = v3;
  *(void *)(v3 + 24) = *((void *)a1 + 4);
  return result;
}

uint64_t REWorldRootComponentUnsetWorldRoot(uint64_t this)
{
  *(void *)(this + 32) = -1;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REWorldRootComponentGetWorldID(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REWorldRootComponentSetWorldID(uint64_t this, uint64_t a2)
{
  *(void *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REWorldRootComponentGetApplyToSelf(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t REWorldRootComponentSetApplyToSelf(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void re::make::shared::object<re::ecs2::SharedWorldRootToken>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 32, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E735678;
  *a2 = v4;
}

void re::ecs2::SharedWorldRootToken::~SharedWorldRootToken(re::ecs2::SharedWorldRootToken *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REAudioLibraryComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void REAudioLibraryComponentRegisterAsset(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v13);
  uint64_t v5 = (_anonymous_namespace_ *)[a3 UTF8String];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)v13);
  re::DynamicString::DynamicString((re::DynamicString *)v8, (const re::DynamicString *)&v10);
  re::ecs2::AudioLibraryComponent::registerAudioAsset(a1, (const re::AssetHandle *)v9, (uint64_t)v8);
  if (*(void *)&v8[0])
  {
    if (BYTE8(v8[0])) {
      (*(void (**)(void))(**(void **)&v8[0] + 40))();
    }
    memset(v8, 0, sizeof(v8));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v12, v6, v7);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

uint64_t REAudioLibraryComponentUnregisterAsset(uint64_t a1, id a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::DynamicString::DynamicString((re::DynamicString *)v7, (const re::DynamicString *)&v8);
  re::ecs2::AudioLibraryComponent::unregisterAudioAsset(a1, (uint64_t)v7);
  if (*(void *)&v7[0])
  {
    if (BYTE8(v7[0])) {
      (*(void (**)(void))(**(void **)&v7[0] + 40))();
    }
    memset(v7, 0, sizeof(v7));
  }
  uint64_t result = v8;
  if (v8)
  {
    if (v9) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 40))(v8, v10, v4, v5);
    }
  }
  return result;
}

uint64_t REAudioLibraryComponentGetAssetForName(uint64_t a1, id a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::ecs2::AudioLibraryComponent::getAsset(a1, (uint64_t)v6, (re::AssetHandle *)v7);
  if (*(void *)&v6[0])
  {
    if (BYTE8(v6[0])) {
      (*(void (**)(void))(**(void **)&v6[0] + 40))();
    }
    memset(v6, 0, sizeof(v6));
  }
  if (!v8) {
    return 0;
  }
  uint64_t v4 = v7[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v4;
}

uint64_t REAudioLibraryComponentCopyAssetNames(uint64_t a1)
{
  unsigned int v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v30 = 0x7FFFFFFFLL;
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(_DWORD *)(a1 + 60) <= 3u) {
      signed int v3 = 3;
    }
    else {
      signed int v3 = *(_DWORD *)(a1 + 60);
    }
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)&v27, v1, v3);
    re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)&v27);
    unsigned int v4 = *(_DWORD *)(a1 + 60);
    if (DWORD2(v28) < v4) {
      re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v27, v4);
    }
    unint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5)
    {
      uint64_t v6 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        char v8 = (unint64_t *)(*(void *)(a1 + 48) + v6);
        if ((v8[1] & 0x80000000) != 0)
        {
          unint64_t v9 = *v8;
          uint64_t v10 = v30;
          unint64_t v11 = *v8 % DWORD2(v28);
          if (v30 == 0x7FFFFFFF)
          {
            uint64_t v10 = v29;
            unsigned int v12 = v29;
            if (v29 == DWORD2(v28))
            {
              re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v27, 2 * HIDWORD(v28));
              unsigned int v12 = v29;
              unint64_t v11 = v9 % DWORD2(v28);
            }
            unsigned int v29 = v12 + 1;
            uint64_t v13 = v28;
            int v14 = *(_DWORD *)(v28 + 72 * v10 + 8);
          }
          else
          {
            uint64_t v13 = v28;
            int v14 = *(_DWORD *)(v28 + 72 * v30 + 8);
            LODWORD(v30) = v14 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v13 + 72 * v10 + 8) = v14 | 0x80000000;
          *(_DWORD *)(v28 + 72 * v10 + 8) = *(_DWORD *)(v28 + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v27 + 1) + 4 * v11);
          *(void *)(v28 + 72 * v10) = v9;
          re::DynamicString::DynamicString((re::DynamicString *)(v28 + 72 * v10 + 16), (const re::DynamicString *)(v8 + 2));
          re::AssetHandle::AssetHandle((re::AssetHandle *)(v28 + 72 * v10 + 48), (const re::AssetHandle *)(v8 + 6));
          *(_DWORD *)(*((void *)&v27 + 1) + 4 * v11) = v10;
          ++HIDWORD(v28);
          unint64_t v5 = *(unsigned int *)(a1 + 64);
        }
        v6 += 72;
      }
    }
  }
  uint64_t v15 = objc_msgSend(MEMORY[0x263EFF980], "array", (void)v27);
  if (v29)
  {
    uint64_t v16 = 0;
    BOOL v17 = (int *)(v28 + 8);
    while (1)
    {
      int v18 = *v17;
      v17 += 18;
      if (v18 < 0) {
        break;
      }
      if (v29 == ++v16)
      {
        LODWORD(v16) = v29;
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if (v29 != v16)
  {
    uint64_t v19 = v16;
    uint64_t v20 = v28;
    do
    {
      if (*(unsigned char *)(v20 + 72 * v19 + 24)) {
        uint64_t v21 = *(void *)(v20 + 72 * v19 + 32);
      }
      else {
        uint64_t v21 = v20 + 72 * v19 + 25;
      }
      uint64_t v22 = [NSString stringWithUTF8String:v21];
      [v15 addObject:v22];

      uint64_t v20 = v28;
      if (v29 <= (int)v16 + 1) {
        unsigned int v23 = v16 + 1;
      }
      else {
        unsigned int v23 = v29;
      }
      while (1)
      {
        uint64_t v19 = (v16 + 1);
        if (v23 - 1 == v16) {
          break;
        }
        LODWORD(v16) = v16 + 1;
        unsigned int v24 = v19;
        if ((*(_DWORD *)(v28 + 72 * v19 + 8) & 0x80000000) != 0) {
          goto LABEL_35;
        }
      }
      unsigned int v24 = v23;
LABEL_35:
      LODWORD(v16) = v24;
    }
    while (v29 != v24);
  }
  uint64_t v25 = [v15 copy];

  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v27);
  return v25;
}

uint64_t RENullTerminatedStringGet(uint64_t a1)
{
  return *(void *)a1;
}

char *RENullTerminatedStringSet(_anonymous_namespace_ *a1, char *__s, uint64_t *a3)
{
  signed int v3 = a3;
  if (!a3)
  {
  }
  size_t v6 = strlen(__s);
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t *, size_t, void))(*v3 + 32))(v3, v6, 0);
  *(void *)a1 = v7;
  return strcpy(v7, __s);
}

uint64_t REDynamicStringGetValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 8)) {
      return *(void *)(result + 16);
    }
    else {
      result += 9;
    }
  }
  return result;
}

uint64_t REDynamicStringGet(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 8)) {
      return *(void *)(result + 16);
    }
    else {
      result += 9;
    }
  }
  return result;
}

re::DynamicString *REDynamicStringSet(re::DynamicString *result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    v3[0] = __s;
    v3[1] = strlen(__s);
    return re::DynamicString::operator=(v2, (uint64_t)v3);
  }
  return result;
}

uint64_t REStringIDGet(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void REStringIDSet(_anonymous_namespace_ *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = "";
    uint64_t v4 = v8;
    unint64_t v5 = v9;
    uint64_t v8 = 0;
    unint64_t v9 = "";
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = v4;
    *((void *)a1 + 1) = v5;
    v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
    v10[1] = v7;
    re::StringID::destroyString((re::StringID *)v10);
    re::StringID::destroyString((re::StringID *)&v8);
  }
}

uint64_t REAssetHandleGet(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

void REAssetHandleSet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v3);
    re::AssetHandle::operator=(a1, v3);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  }
}

re::AssetHandle *REAssetHandleArrayClear(re::AssetHandle *result)
{
  if (result) {
    return re::DynamicArray<re::AssetHandle>::clear(result);
  }
  return result;
}

void REAssetHandleArrayAdd(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v3);
    re::DynamicArray<re::AssetHandle>::add(a1, (re::AssetHandle *)v3);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  }
}

uint64_t REAssetHandleArrayGet(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 16) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(void *)(*(void *)(result + 32) + 24 * a2);
  }
  return result;
}

uint64_t REAssetHandleArrayCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

char *REEntityHandleGet(id *a1)
{
  if (!a1) {
    return 0;
  }
  WeakRetained = (char *)objc_loadWeakRetained(a1);
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v2 = WeakRetained - 8;

  return v2;
}

void REEntityHandleSet(id *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      re::ecs2::EntityHandle::EntityHandle((uint64_t)location, a2);
    }
    else
    {
      objc_initWeak(location, 0);
      location[1] = 0;
      location[2] = 0;
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    }
    re::ecs2::EntityHandle::operator=(a1, (uint64_t)location);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_destroyWeak(location);
  }
}

uint64_t re::RENetLeaderElectionConsensus::create(re::RENetLeaderElectionConsensus *this, re::RENetLeaderElectionConsensus **a2)
{
  signed int v3 = re::globalAllocators(this);
  uint64_t v4 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 80, 8);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  RESyncCustomLeaderElectionCreate();
  RESyncCustomLeaderElectionDestroy();
  RESyncCustomLeaderElectionInit();
  RESyncCustomLeaderElectionDeinit();
  RESyncCustomLeaderElectionSetSession();
  RESyncCustomLeaderElectionProcessCapabilities();
  RESyncCustomLeaderElectionRunLoop();
  RESyncCustomLeaderElectionIsLeader();
  RESyncCustomLeaderElectionHandleMigration();
  RESyncCustomLeaderElectionAddPeer();
  RESyncCustomLeaderElectionRemovePeer();
  Custounint64_t m = RESyncLeaderElectionCreateCustom();
  RESyncRelease();
  if (this) {
    *(void *)this = v4;
  }
  return Custom;
}

re *___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke(re *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (v1)
  {
    uint64_t v2 = re::globalAllocators(result)[2];
    std::unique_ptr<re::RawNode>::reset[abi:nn180100]((re::Raft **)(v1 + 56), 0);
    v3.n128_f64[0] = re::Queue<re::Message>::deinit((uint64_t *)v1);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

void ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  v27[6] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(v3 + 72) = RESyncNetSessionObserverCreate();
  RESyncNetSessionObserverOnReceiveData();
  uint64_t v4 = (_anonymous_namespace_ *)RESyncNetSessionAddObserver();
  uint64_t __src = a2;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  re::DynamicArray<float *>::setCapacity(v15, 1uLL);
  ++v18;
  if (v17)
  {
    if (v17 == -1)
    {
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v20[0] = 136315906;
      *(void *)&v20[1] = "copy";
      __int16 v21 = 1024;
      int v22 = 643;
      __int16 v23 = 2048;
      uint64_t v24 = 0;
      __int16 v25 = 2048;
      uint64_t v26 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
    *(void *)uint64_t v19 = a2;
  }
  else
  {
    re::DynamicArray<float *>::growCapacity(v15, 1uLL);
    uint64_t v5 = v17;
    uint64_t v6 = &v15[8 * v17 - 8];
    if (v17)
    {
      uint64_t v7 = 8 * v17;
      memcpy(v19, &__src, 8 * v17);
      uint64_t v5 = v17;
    }
    else
    {
      uint64_t v7 = 0;
    }
    memcpy(&v19[8 * v5], v6, 8 - v7);
    uint64_t v17 = 1;
  }
  ++v18;
  *(void *)&long long v11 = 0;
  *(void *)&long long v10 = 0;
  memset(buf, 0, sizeof(buf));
  DWORD2(v10) = 0;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v20, (uint64_t *)v15);
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v27, (uint64_t *)buf);
  if (*(void *)buf && (void)v11) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  if (*(void *)v15 && v19) {
    (*(void (**)(void))(**(void **)v15 + 40))();
  }
  if (CoreRELog::onceToken == -1)
  {
LABEL_15:
    uint64_t v8 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "!! raft.nid = %llu", buf, 0xCu);
    }
    operator new();
  }
LABEL_19:
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  goto LABEL_15;
}

double ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  RESyncNetSessionRemoveObserver();
  RESyncRelease();
  if (*(void *)(v1 + 16))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(v1 + 40) + 384 * ((v2 + *(void *)(v1 + 24)) % *(void *)(v1 + 8));
      re::Snapshot::~Snapshot((re::Snapshot *)(v3 + 80));
      re::DynamicArray<unsigned long>::deinit(v3 + 40);
      re::DynamicArray<re::Entry>::deinit(v3);
      ++v2;
    }
    while (v2 < *(void *)(v1 + 16));
  }
  *(void *)(v1 + 16) = 0;
  ++*(_DWORD *)(v1 + 32);
  return re::Queue<re::Message>::deinit((uint64_t *)v1);
}

uint64_t ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_4(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 32) + 64) = a2;
  return result;
}

uint64_t ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_6(uint64_t a1)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  while (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(void *)(v1 + 56);
    re::Message::Message((uint64_t)v32, *(void *)(v1 + 40) + 384 * *(void *)(v1 + 24));
    uint64_t v3 = *(void *)(v1 + 40) + 384 * *(void *)(v1 + 24);
    re::Snapshot::~Snapshot((re::Snapshot *)(v3 + 80));
    re::DynamicArray<unsigned long>::deinit(v3 + 40);
    re::DynamicArray<re::Entry>::deinit(v3);
    uint64_t v4 = *(void *)(v1 + 24);
    if ((unint64_t)(v4 + 1) < *(void *)(v1 + 8)) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    --*(void *)(v1 + 16);
    *(void *)(v1 + 24) = v5;
    ++*(_DWORD *)(v1 + 32);
    re::Raft::step(v2, v32, v39);
    re::Snapshot::~Snapshot((re::Snapshot *)&v38);
    if (v33)
    {
      if (v37) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
      uint64_t v37 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      ++v36;
    }
    re::DynamicArray<re::Entry>::deinit((uint64_t)v32);
  }
  unint64_t v6 = *(void *)(v1 + 48);
  if (v6 >= 3)
  {
    re::Raft::tick(*(re::Raft **)(v1 + 56));
    unint64_t v6 = 0;
  }
  *(void *)(v1 + 48) = v6 + 1;
  uint64_t v7 = *(re::Raft **)(v1 + 56);
  LOBYTE(v78) = 0;
  uint64_t result = re::RawNode::hasReadySince((uint64_t)v7, (uint64_t)&v78);
  if (!result) {
    return result;
  }
  if (!RESyncNetSessionLeader())
  {
    if (!*((void *)v7 + 133)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*((void *)v7 + 133) != RESyncParticipantGetPeerID()) {
LABEL_15:
  }
    RESyncNetSessionSetLeader();
LABEL_16:
  RESyncNetSessionSetCapabilitiesIsLeader();
  LOBYTE(v96[0]) = 0;
  re::Ready::Ready((uint64_t)&v78, (uint64_t)v7, (uint64_t)v7 + 1160, (void *)v7 + 147, (uint64_t)v96);
  (*(void (**)(void *__return_ptr))(**(void **)v7 + 80))((void *)((char *)v75 + 2));
  if (!BYTE2(v75[0]) && (void)v76)
  {
    if (BYTE8(v76)) {
      (*(void (**)(void))(*(void *)v76 + 40))();
    }
    long long v76 = 0u;
    long long v77 = 0u;
  }
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  memset(v96, 0, sizeof(v96));
  if (v85[2])
  {
    re::Snapshot::~Snapshot((re::Snapshot *)v96);
LABEL_26:
    (*(void (**)(void *__return_ptr))(**(void **)v7 + 96))(v75);
    goto LABEL_27;
  }
  BOOL v9 = re::SnapshotMetadata::operator==(v86, (void *)&v97 + 1);
  re::Snapshot::~Snapshot((re::Snapshot *)v96);
  if (!v9) {
    goto LABEL_26;
  }
LABEL_27:
  v71[0] = v78;
  v71[1] = v79;
  uint64_t v10 = v80;
  uint64_t v72 = v80;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  long long v11 = v82;
  long long v74 = v82;
  uint64_t v82 = 0;
  ++v81;
  int v73 = 1;
  if (v72)
  {
    uint64_t v12 = 384 * v10;
    do
    {
      re::RENetLeaderElectionConsensus::sendMsg((re::RENetLeaderElectionConsensus *)v1, v11);
      long long v11 = (re::Message *)((char *)v11 + 384);
      v12 -= 384;
    }
    while (v12);
  }
  if (v87)
  {
    v67[0] = v88;
    v67[1] = v89;
    uint64_t v13 = v90;
    uint64_t v68 = v90;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    uint64_t v14 = v92;
    uint64_t v70 = v92;
    uint64_t v92 = 0;
    ++v91;
    int v69 = 1;
    if (v68)
    {
      uint64_t v29 = v14;
      uint64_t v15 = (unsigned char *)(v14 + 80);
      uint64_t v28 = v13;
      uint64_t v16 = 104 * v13;
      do
      {
        if (*((void *)v15 - 8) && *v15 == 1)
        {
          memset(v57, 0, sizeof(v57));
          int v58 = 0;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          memset(v63, 0, 25);
          unint64_t v64 = 0;
          uint64_t v65 = 0;
          v63[4] = 0;
          char v66 = 0;
          uint64_t v17 = *((void *)v15 - 8);
          uint64_t v18 = *((void *)v15 - 6);
          v40[0] = (uint64_t)&unk_26E7161C0;
          v40[1] = v18;
          v40[2] = v18;
          v40[3] = v18 + v17;
          re::OPackReader::OPackReader((uint64_t)v96, (uint64_t)v40);
          v95 = (re::OPackReader *)v96;
          uint64_t v19 = re::ConsensusReader::read(&v95, (uint64_t)v57);
          char v20 = v19;
          if ((v19 & 1) == 0)
          {
            uint64_t v31 = v93;
            char v30 = v94;
          }
          if (v110)
          {
            if (v114) {
              (*(void (**)(void))(*(void *)v110 + 40))();
            }
            uint64_t v114 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v110 = 0;
            ++v113;
          }
          re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v109);
          re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)((char *)&v98 + 8));
          if ((v20 & 1) == 0)
          {
            if (v31)
            {
              if (v30) {
                (*(void (**)(void))(*(void *)v31 + 40))();
              }
              char v30 = 0;
            }
            uint64_t v31 = 0;
          }
          switch(LOBYTE(v63[3]))
          {
            case 0:
              re::Raft::addVoterOrLearner(v7, v64, 0, v54);
              if (!v54[0] && v55)
              {
                if (v56) {
                  (*(void (**)(void))(*(void *)v55 + 40))();
                }
                __int16 v21 = &v55;
                goto LABEL_63;
              }
              break;
            case 1:
              re::Raft::removeNode(v7, v64, (uint64_t)v51);
              if (!v51[0] && v52)
              {
                if (v53) {
                  (*(void (**)(void))(*(void *)v52 + 40))();
                }
                __int16 v21 = &v52;
                goto LABEL_63;
              }
              break;
            case 2:
              re::Raft::addVoterOrLearner(v7, v64, 1, v48);
              if (!v48[0] && v49)
              {
                if (v50) {
                  (*(void (**)(void))(*(void *)v49 + 40))();
                }
                __int16 v21 = &v49;
LABEL_63:
                *(_OWORD *)__int16 v21 = 0u;
                *((_OWORD *)v21 + 1) = 0u;
              }
              break;
            case 3:
              re::Raft::beginMembershipChange((uint64_t)v7, (uint64_t)v57, v47);
              break;
            case 4:
              re::Raft::finalizeMembershipChange(v7, (uint64_t)v57, &v46);
              break;
            default:
              break;
          }
          re::ConfState::ConfState((_anonymous_namespace_ *)v40, (uint64_t)v7 + 744, (uint64_t)v7 + 792);
          if (!v22) {
            goto LABEL_102;
          }
          LOBYTE(v96[0]) = 0;
          MemStorageCore::setConfState((uint64_t)v22 + 8, v40, (uint64_t)v96);
          if (LOBYTE(v96[0]))
          {
            if ((void)v98)
            {
              if ((void)v100) {
                (*(void (**)(void))(*(void *)v98 + 40))();
              }
              *(void *)&long long v100 = 0;
              *(void *)&long long v99 = 0;
              long long v98 = 0uLL;
              ++DWORD2(v99);
            }
            if (v96[1] && *((void *)&v97 + 1)) {
              (*(void (**)(void))(*(void *)v96[1] + 40))();
            }
          }
          if (v41)
          {
            if (v45) {
              (*(void (**)(void))(*(void *)v41 + 40))();
            }
            uint64_t v45 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v41 = 0;
            ++v44;
          }
          if (v40[0] && v40[4]) {
            (*(void (**)(void))(*(void *)v40[0] + 40))();
          }
          if ((void)v62)
          {
            if (v63[2]) {
              (*(void (**)(void))(*(void *)v62 + 40))();
            }
            v63[2] = 0;
            v63[0] = 0;
            long long v62 = 0uLL;
            ++LODWORD(v63[1]);
          }
          if (*((void *)&v59 + 1))
          {
            if (*((void *)&v61 + 1)) {
              (*(void (**)(void))(**((void **)&v59 + 1) + 40))();
            }
            *((void *)&v61 + 1) = 0;
            long long v60 = 0uLL;
            *((void *)&v59 + 1) = 0;
            LODWORD(v61) = v61 + 1;
          }
          if (v57[0] && (void)v59) {
            (*(void (**)(void))(*(void *)v57[0] + 40))();
          }
        }
        v15 += 104;
        v16 -= 104;
      }
      while (v16);
      uint64_t v23 = *(void *)(v29 + 104 * (v28 - 1) + 88);
      uint64_t v24 = *(const void **)v7;
      if (!v25 {
        || (v25[16] = v23,
      }
            uint64_t v26 = *(void *)(v29 + 104 * (v28 - 1) + 96),
      {
LABEL_102:
        __cxa_bad_cast();
      }
      v27[14] = v26;
    }
    re::DynamicArray<re::Entry>::deinit((uint64_t)v67);
  }
  re::RawNode::advance(v7, (uint64_t)&v78);
  re::DynamicArray<re::Message>::deinit((uint64_t)v71);
  if (v87) {
    re::DynamicArray<re::Entry>::deinit((uint64_t)&v88);
  }
  re::Snapshot::~Snapshot((re::Snapshot *)v85);
  re::DynamicArray<re::ReadState>::deinit((uint64_t)&v84);
  re::DynamicArray<re::Entry>::deinit((uint64_t)&v83);
  return re::DynamicArray<re::Message>::deinit((uint64_t)&v78);
}

BOOL ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 56);
  return v1 && *(void *)(v1 + 1064) == *(void *)(v1 + 1056);
}

uint64_t ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 56) + 1064);
  if (v2 == a2) {
    RESyncNetSessionSetCapabilitiesIsLeader();
  }
  return v2;
}

void ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_9(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(re::Raft **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    re::Raft::addVoterOrLearner(v2, a2, 0, v5);
    if (!v5[0] && (void)v6)
    {
      if (BYTE8(v6)) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
      long long v6 = 0u;
      long long v7 = 0u;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v9 = a2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "REConsensus addNode: %llu", buf, 0xCu);
    }
  }
}

void ___ZN2re28RENetLeaderElectionConsensus6createEPPS0__block_invoke_13(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(re::Raft **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    re::Raft::removeNode(v2, a2, (uint64_t)v5);
    if (!v5[0] && (void)v6)
    {
      if (BYTE8(v6)) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
      long long v6 = 0u;
      long long v7 = 0u;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v9 = a2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "REConsensus addNode: %llu", buf, 0xCu);
    }
  }
}

uint64_t ___ZN2re28RENetLeaderElectionConsensus5setupEy_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  size_t RequiredSize = RESyncBitReaderGetRequiredSize();
  MEMORY[0x270FA5388](RequiredSize);
  bzero((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), RequiredSize);
  RESyncBitReaderConstructNoAlloc();
  uint64_t v26 = 0;
  MEMORY[0x237DBAF50]();
  unsigned int v25 = 0;
  RESyncBitReaderReadUInt32();
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v20 = 0;
  int v23 = 0;
  re::DynamicArray<BOOL>::resize((uint64_t)&v20, v25);
  RESyncBitReaderReadData();
  __n128 v12 = 0uLL;
  int v14 = 0;
  uint64_t v13 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = 0;
  memset(v18, 0, 233);
  memset(&v18[30], 0, 64);
  char v19 = 0;
  v28[0] = &unk_26E7161C0;
  v28[1] = v24;
  v28[2] = v24;
  v28[3] = v24 + v22;
  re::OPackReader::OPackReader((uint64_t)v29, (uint64_t)v28);
  long long v27 = (re::OPackReader *)v29;
  re::ConsensusReader::read(&v27, &v12);
  if (v32)
  {
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
    }
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    ++v35;
  }
  re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v31);
  re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)&v30);
  uint64_t v22 = 0;
  int v4 = ++v23;
  uint64_t v5 = v20;
  if (v20)
  {
    if (v24)
    {
      uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
      int v4 = v23;
    }
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v20 = 0;
    int v23 = v4 + 1;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = v6 + 1;
  unint64_t v8 = *(void *)(v1 + 8);
  if (v6 + 1 >= v8)
  {
    if (v8 < v7)
    {
      if (*(void *)v1)
      {
        unint64_t v9 = 2 * v8;
        if (!v8) {
          unint64_t v9 = 8;
        }
        if (v9 <= v7) {
          unint64_t v10 = v7;
        }
        else {
          unint64_t v10 = v9;
        }
        re::Queue<re::Message>::setCapacity((void *)v1, v10);
        uint64_t v6 = *(void *)(v1 + 16);
      }
      else
      {
        re::Queue<re::Message>::setCapacity((void *)v1, v7);
        uint64_t v6 = 0;
        *(void *)(v1 + 16) = 0;
        *(void *)(v1 + 24) = 0;
        *(_DWORD *)(v1 + 32) = 0;
      }
    }
    unint64_t v8 = *(void *)(v1 + 8);
  }
  re::Message::Message((re::Message *)(*(void *)(v1 + 40) + 384 * ((*(void *)(v1 + 24) + v6) % v8)), (const re::Message *)&v12);
  ++*(void *)(v1 + 16);
  ++*(_DWORD *)(v1 + 32);
  RESyncBitReaderDestructNoDealloc();
  re::Snapshot::~Snapshot((re::Snapshot *)&v18[1]);
  if (*((void *)&v15 + 1))
  {
    if (v18[0]) {
      (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
    }
    v18[0] = 0;
    long long v16 = 0uLL;
    *((void *)&v15 + 1) = 0;
    ++v17;
  }
  re::DynamicArray<re::Entry>::deinit((uint64_t)&v12);
  uint64_t result = (uint64_t)v20;
  if (v20)
  {
    if (v24) {
      return (*(uint64_t (**)(void))(*(void *)v20 + 40))();
    }
  }
  return result;
}

double re::Queue<re::Message>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      if (a1[2])
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = a1[5] + 384 * ((v4 + a1[3]) % (unint64_t)a1[1]);
          re::Snapshot::~Snapshot((re::Snapshot *)(v5 + 80));
          re::DynamicArray<unsigned long>::deinit(v5 + 40);
          re::DynamicArray<re::Entry>::deinit(v5);
          ++v4;
        }
        while (v4 != a1[2]);
        uint64_t v2 = *a1;
        uint64_t v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + 8) = 0;
  }
  return result;
}

void re::RENetLeaderElectionConsensus::sendMsg(re::RENetLeaderElectionConsensus *this, const re::Message *a2)
{
  _OWORD v15[2] = *MEMORY[0x263EF8340];
  if (RESyncNetSessionGetParticipantWithPeerID())
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)long long buf = 0;
    int v11 = 1;
    v15[0] = &unk_26E716118;
    v15[1] = buf;
    int v14 = v15;
    uint64_t v12 = 0;
    uint64_t v13 = (re::zerocopy **)&v14;
    uint64_t v3 = re::ConsensusWriter::write(&v13, a2);
    MEMORY[0x270FA5388](v3);
    size_t RequiredSize = RESyncBitWriterGetRequiredSize();
    MEMORY[0x270FA5388](RequiredSize);
    bzero(&buf[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], RequiredSize);
    uint64_t v6 = RESyncBitWriterConstructNoAlloc();
    RESyncBitWriterWriteUInt64();
    RESyncBitWriterWriteUInt32();
    MEMORY[0x237DBB060](v6, v12, v10);
    RESyncBitWriterData();
    RESyncBitWriterSize();
    RESyncNetSessionSendData();
    RESyncBitWriterDestructNoDealloc();
    if (*(void *)buf)
    {
      if (v12) {
        (*(void (**)(void))(**(void **)buf + 40))(*(void *)buf);
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v7 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "sendConsensusMessage: missing participant!", buf, 2u);
    }
  }
}

re::Raft *std::unique_ptr<re::RawNode>::reset[abi:nn180100](re::Raft **a1, re::Raft *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    re::Raft::~Raft(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void *re::Queue<re::Message>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 2;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::Queue<re::Message>::setCapacity(v5, a2);
        void *v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x180uLL))
        {
          uint64_t v2 = 384 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 384 * a2, 8);
          if (result)
          {
            unint64_t v8 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 384, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v8 = 0;
      if (!v3)
      {
LABEL_18:
        _OWORD v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        uint64_t v9 = 0;
        uint64_t v10 = v5[3];
        do
        {
          uint64_t v11 = v5[5] + 384 * ((unint64_t)(v9 + v5[3]) % v5[1]);
          re::Message::Message((uint64_t)&v8[48 * v10], v11);
          re::Snapshot::~Snapshot((re::Snapshot *)(v11 + 80));
          re::DynamicArray<unsigned long>::deinit(v11 + 40);
          re::DynamicArray<re::Entry>::deinit(v11);
          if (v10 + 1 < a2) {
            ++v10;
          }
          else {
            uint64_t v10 = 0;
          }
          ++v9;
        }
        while (v9 != v5[2]);
      }
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t REAnimationSceneAssetCreateWithTimeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v24);
  if (!v25 || (unsigned int v5 = atomic_load((unsigned int *)(v25 + 704)), v5 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    LOWORD(v21) = 0;
    uint64_t v9 = "Reference animation scene asset is not loaded.";
    goto LABEL_17;
  }
  uint64_t v6 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v7 = (uint64_t *)v25;
  if (v25) {
    uint64_t v7 = *(uint64_t **)(v25 + 264);
  }
  if (v6 == v7)
  {
    uint64_t v12 = re::globalAllocators((re *)v6);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 112, 8);
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 88) = 0;
    *(void *)(v13 + 80) = 0;
    *(void *)(v13 + 32) = "";
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 56) = 0;
    *(_DWORD *)(v13 + 64) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 96) = 0;
    *(void *)(v13 + 104) = 0;
    uint64_t v14 = re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v24);
    re::AssetHandle::operator=(v13, (uint64_t *)v14);
    re::StringID::operator=((unint64_t *)(v13 + 24), (uint64_t *)(v14 + 24));
    re::DynamicArray<re::AnimationSceneEntityData>::operator=(v13 + 40, (uint64_t *)(v14 + 40));
    *(unsigned char *)(v13 + 80) = *(unsigned char *)(v14 + 80);
    re::AssetHandle::operator=(v13 + 88, (uint64_t *)(v14 + 88));
    re::AssetAPIHelper::assetHandleCreate(a3, &v21);
    uint64_t v15 = v21;
    uint64_t v16 = *(void *)(v13 + 8);
    uint64_t v17 = *(void *)(v13 + 16);
    *(void *)(v13 + 8) = v22;
    uint64_t v22 = v16;
    uint64_t v18 = *(void *)v13;
    *(void *)uint64_t v13 = v15;
    *(void *)(v13 + 16) = v23;
    uint64_t v21 = v18;
    uint64_t v23 = v17;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
    char v19 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v21, a1, v13, v19, 0, 0, 0);
    uint64_t v10 = v21;
    id v20 = (id)(v21 + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
    goto LABEL_14;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v21) = 0;
    uint64_t v9 = "Asset reference is not a valid Animation Scene Asset.";
LABEL_17:
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v21, 2u);
  }
LABEL_13:

  uint64_t v10 = 0;
LABEL_14:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
  return v10;
}

uint64_t REAnimationSceneAssetGetRootTimeline(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (!v10 || (unsigned int v1 = atomic_load((unsigned int *)(v10 + 704)), v1 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_WORD *)unint64_t v8 = 0;
    unsigned int v5 = "Animation scene asset is not loaded.";
    goto LABEL_17;
  }
  uint64_t v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v3 = (uint64_t *)v10;
  if (v10) {
    uint64_t v3 = *(uint64_t **)(v10 + 264);
  }
  if (v2 == v3)
  {
    uint64_t v6 = *(void *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v9);
    goto LABEL_14;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v8 = 0;
    unsigned int v5 = "Asset reference is not a valid Animation Scene Asset.";
LABEL_17:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, v5, v8, 2u);
  }
LABEL_13:

  uint64_t v6 = 0;
LABEL_14:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  return v6;
}

uint64_t REAnimationSceneAssetCreateWithTimelineAndEntityDefinition(re *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    int v29 = 0;
    memset(v28, 0, sizeof(v28));
    uint64_t v30 = 0x7FFFFFFFLL;
    uint64_t v7 = re::globalAllocators(a1);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 112, 8);
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = 0;
    *(void *)(v8 + 32) = "";
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 56) = 0;
    *(_DWORD *)(v8 + 64) = 0;
    *(void *)(v8 + 40) = 0;
    *(void *)(v8 + 96) = 0;
    *(void *)(v8 + 104) = 0;
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    uint64_t v22 = 0;
    uint64_t v23 = "";
    uint64_t v11 = *(void *)(v8 + 24);
    uint64_t v12 = *(void *)(v8 + 32);
    *(void *)(v8 + 24) = v9;
    *(void *)(v8 + 32) = v10;
    v31[0] = v9 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
    v31[1] = v12;
    re::StringID::destroyString((re::StringID *)v31);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v24);
    *(unsigned char *)(v8 + 80) = v25;
    long long v13 = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v8 + 88) = v26;
    long long v26 = v13;
    uint64_t v14 = *(void *)(v8 + 104);
    *(void *)(v8 + 104) = v27;
    uint64_t v27 = v14;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
    re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v24);
    re::StringID::destroyString((re::StringID *)&v22);
    re::AssetAPIHelper::assetHandleCreate(a2, &v22);
    uint64_t v15 = v22;
    uint64_t v16 = *(const char **)(v8 + 8);
    uint64_t v17 = *(void *)(v8 + 16);
    *(void *)(v8 + 8) = v23;
    uint64_t v23 = v16;
    uint64_t v18 = *(void *)v8;
    *(void *)uint64_t v8 = v15;
    *(void *)(v8 + 16) = v24[0];
    uint64_t v22 = v18;
    v24[0] = v17;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
    char v19 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    (*(void (**)(uint64_t *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v22, a1, v8, v19, 0, 0, 0);
    uint64_t v3 = v22;
    id v20 = (id)(v22 + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
    re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v28);
  }
  return v3;
}

void anonymous namespace'::REAnimationSceneEntityDefinitionImpl::makeAnimationSceneEntityData(re::StringID *a1, unint64_t a2, uint64_t a3)
{
  re::StringID::StringID(a1, (const StringID *)(a2 + 24));
  *((void *)a1 + 2) = 0;
  uint64_t v6 = (void *)((char *)a1 + 16);
  v6[4] = 0;
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *((_DWORD *)v6 + 6) = 0;
  *((unsigned char *)v6 + 40) = *(unsigned char *)(a2 + 40);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v6 + 6), (const re::AssetHandle *)(a2 + 48));
  unint64_t v7 = *(void *)(a2 + 88);
  if (v6[1] < v7) {
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(v6, v7);
  }
  v22[0] = a2;
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  unint64_t v10 = *(unsigned int *)(a3 + 24);
  if (v10)
  {
    unint64_t v11 = v9 % v10;
    uint64_t v12 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * (v9 % v10));
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(a3 + 16);
      if (*(void *)(v13 + 24 * v12 + 16) == a2) {
        goto LABEL_11;
      }
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v13 + 24 * v12 + 8) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 24 * v12 + 16) == a2) {
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  ++*(_DWORD *)(a3 + 40);
LABEL_11:
  uint64_t v14 = *(void *)(a2 + 88);
  if (v14)
  {
    uint64_t v15 = *(unint64_t **)(a2 + 104);
    uint64_t v16 = &v15[v14];
    do
    {
      unint64_t v17 = *v15;
      unint64_t v18 = *(unsigned int *)(a3 + 24);
      if (!v18
        || (unint64_t v19 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27)),
            uint64_t v20 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * ((v19 ^ (v19 >> 31)) % v18)),
            v20 == 0x7FFFFFFF))
      {
LABEL_18:
        re::DynamicArray<re::AnimationSceneEntityData>::add(v6, v22);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
        re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)&v23);
        re::StringID::destroyString((re::StringID *)v22);
      }
      else
      {
        uint64_t v21 = *(void *)(a3 + 16);
        while (*(void *)(v21 + 24 * v20 + 16) != v17)
        {
          LODWORD(v20) = *(_DWORD *)(v21 + 24 * v20 + 8) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF) {
            goto LABEL_18;
          }
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
}

uint64_t REAnimationSceneEntityDefinitionCreate(re *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7356E0;
  *(void *)(v3 + 32) = "";
  *(unsigned char *)(v3 + 40) = 0;
  *(void *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  uint64_t v10 = 0;
  unint64_t v11 = "";
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v10 = 0;
  unint64_t v11 = "";
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v6;
  v12[0] = v5 & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v12[1] = v8;
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v10);
  return v3;
}

uint64_t REAnimationSceneEntityDefinitionGetEntityName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t REAnimationSceneEntityDefinitionSetHasTransformAnimations(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 40) = a2;
  }
  return result;
}

BOOL REAnimationSceneEntityDefinitionGetHasTransformAnimations(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 40) != 0;
  }
  return result;
}

uint64_t REAnimationSceneEntityDefinitionGetChildCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t REAnimationSceneEntityDefinitionAddChildDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t result = -1;
  if (a1 && a2)
  {
    uint64_t v5 = (_anonymous_namespace_ *)(id)(a2 + 8);
    unint64_t v6 = *(void *)(a1 + 80);
    unint64_t v7 = *(void *)(a1 + 88);
    unint64_t v8 = v7 + 1;
    if (v7 >= v6 && v6 < v8)
    {
      if (*(void *)(a1 + 72))
      {
        uint64_t v10 = 2 * v6;
        BOOL v11 = v6 == 0;
        unint64_t v12 = 8;
        if (!v11) {
          unint64_t v12 = v10;
        }
        if (v12 <= v8) {
          unint64_t v13 = v8;
        }
        else {
          unint64_t v13 = v12;
        }
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a1 + 72), v13);
      }
      else
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a1 + 72), v8);
        ++*(_DWORD *)(a1 + 96);
      }
    }
    uint64_t result = *(void *)(a1 + 88);
    *(void *)(*(void *)(a1 + 104) + 8 * result) = a2;
    *(void *)(a1 + 88) = result + 1;
    ++*(_DWORD *)(a1 + 96);
  }
  return result;
}

uint64_t REAnimationSceneEntityDefinitionGetChildAtIndex(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 88) <= a2) {
      return 0;
    }
    else {
      return *(void *)(*(void *)(result + 104) + 8 * a2);
    }
  }
  return result;
}

BOOL REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
      long long v3 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 48) = v7;
      long long v7 = v3;
      uint64_t v4 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = v8;
    }
    else
    {
      long long v5 = *(_OWORD *)(a1 + 48);
      uint64_t v4 = *(void *)(a1 + 64);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 48) = 0;
      long long v7 = v5;
    }
    uint64_t v8 = v4;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  return a1 != 0;
}

uint64_t REAnimationSceneEntityDefinitionGetSkeletalPoseDefinitionAsset(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 56)) {
      return *(void *)(result + 48);
    }
    else {
      return 0;
    }
  }
  return result;
}

void re::HashSetBase<anonymous namespace'::REAnimationSceneEntityDefinitionImpl const*,anonymous namespace'::REAnimationSceneEntityDefinitionImpl const*,re::internal::ValueAsKey<anonymous namespace'::REAnimationSceneEntityDefinitionImpl const*>,re::Hash<anonymous namespace'::REAnimationSceneEntityDefinitionImpl const*>,re::EqualTo<anonymous namespace'::REAnimationSceneEntityDefinitionImpl const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      int v9 = *(_DWORD *)(a1 + 28);
      signed int v10 = 2 * v9;
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v10) {
          BOOL v12 = v7 == v10;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12 && (v9 & 0x80000000) == 0)
        {
          memset(v23, 0, 36);
          *(void *)&v23[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v23, v11, v10);
          long long v13 = *(_OWORD *)v23;
          *(_OWORD *)uint64_t v23 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v13;
          uint64_t v14 = *(void *)&v23[16];
          uint64_t v15 = *(void *)(a1 + 16);
          *(void *)&v23[16] = v15;
          *(void *)(a1 + 16) = v14;
          long long v17 = *(_OWORD *)&v23[24];
          *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
          unsigned int v16 = *(_DWORD *)&v23[32];
          *(_OWORD *)(a1 + 24) = v17;
          uint64_t v18 = v16;
          if (v16)
          {
            uint64_t v19 = v15 + 16;
            do
            {
              if ((*(_DWORD *)(v19 - 8) & 0x80000000) != 0) {
              v19 += 24;
              }
              --v18;
            }
            while (v18);
          }
          re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v23);
        }
      }
      else
      {
        if (v10) {
          signed int v22 = v10;
        }
        else {
          signed int v22 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 24 * v7 + 8);
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 24 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v20 + 24 * v7 + 8) = v21 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v7) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v7 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
}

void anonymous namespace'::REAnimationSceneEntityDefinitionImpl::~REAnimationSceneEntityDefinitionImpl(_anonymous_namespace_::REAnimationSceneEntityDefinitionImpl *this)
{
  *(void *)this = &unk_26E7356E0;
  long long v3 = (void *)((char *)this + 72);
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 13);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 11);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        do
        {
          if (*(void *)v4)
          {

            *(void *)uint64_t v4 = 0;
          }
          v4 += 8;
          v6 -= 8;
        }
        while (v6);
        uint64_t v2 = *((void *)this + 9);
        uint64_t v4 = *((void *)this + 13);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v4);
    }
    *((void *)this + 13) = 0;
    v3[1] = 0;
    void v3[2] = 0;
    *long long v3 = 0;
    ++*((_DWORD *)this + 24);
  }
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::REAnimationSceneEntityDefinitionImpl *)((char *)this + 48));
  re::StringID::destroyString((_anonymous_namespace_::REAnimationSceneEntityDefinitionImpl *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_26E7356E0;
  long long v3 = (void *)((char *)this + 72);
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 13);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 11);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        do
        {
          if (*(void *)v4)
          {

            *(void *)uint64_t v4 = 0;
          }
          v4 += 8;
          v6 -= 8;
        }
        while (v6);
        uint64_t v2 = *((void *)this + 9);
        uint64_t v4 = *((void *)this + 13);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v4);
    }
    *((void *)this + 13) = 0;
    v3[1] = 0;
    void v3[2] = 0;
    *long long v3 = 0;
    ++*((_DWORD *)this + 24);
  }
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::REAnimationSceneEntityDefinitionImpl *)((char *)this + 48));
  re::StringID::destroyString((_anonymous_namespace_::REAnimationSceneEntityDefinitionImpl *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REStatic3DTextComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REStatic3DTextComponentSetText(uint64_t a1, const char *a2)
{
  if (!re::DynamicString::operator==(a1 + 128, (uint64_t)&v6))
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + 128), (re::DynamicString *)&v6);
    *(void *)&long long v4 = 0x7F0000007FLL;
    *((void *)&v4 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(a1 + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(a1 + 64) = v4;
    *(unsigned char *)(a1 + 44) = 1;
  }
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REStatic3DTextComponentSetFont(uint64_t a1, const char *a2)
{
  if (!re::DynamicString::operator==(a1 + 96, (uint64_t)&v6))
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + 96), (re::DynamicString *)&v6);
    *(void *)&long long v4 = 0x7F0000007FLL;
    *((void *)&v4 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(a1 + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(a1 + 64) = v4;
    *(unsigned char *)(a1 + 44) = 1;
  }
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REStatic3DTextComponentSetFontSize(uint64_t this, float a2)
{
  if (*(float *)(this + 32) != a2)
  {
    *(float *)(this + 32) = a2;
    *(void *)&long long v3 = 0x7F0000007FLL;
    *((void *)&v3 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v3;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetTextFrameOrigin(uint64_t this, float32x2_t a2)
{
  uint32x2_t v2 = (uint32x2_t)vceq_f32(*(float32x2_t *)(this + 80), a2);
  if ((vpmin_u32(v2, v2).u32[0] & 0x80000000) == 0)
  {
    *(double *)(this + 80) = *(double *)&a2;
    *(void *)&long long v3 = 0x7F0000007FLL;
    *((void *)&v3 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v3;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetTextFrameSize(uint64_t this, float32x2_t a2)
{
  uint32x2_t v2 = (uint32x2_t)vceq_f32(*(float32x2_t *)(this + 88), a2);
  if ((vpmin_u32(v2, v2).u32[0] & 0x80000000) == 0)
  {
    *(double *)(this + 88) = *(double *)&a2;
    *(void *)&long long v3 = 0x7F0000007FLL;
    *((void *)&v3 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v3;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetTextAlignment(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 37) != a2)
  {
    *(unsigned char *)(this + 37) = a2;
    *(void *)&long long v2 = 0x7F0000007FLL;
    *((void *)&v2 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetLineBreakMode(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 38) != a2)
  {
    *(unsigned char *)(this + 38) = a2;
    *(void *)&long long v2 = 0x7F0000007FLL;
    *((void *)&v2 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetVerticalTextAlignment(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 39) != a2)
  {
    *(unsigned char *)(this + 39) = a2;
    *(void *)&long long v2 = 0x7F0000007FLL;
    *((void *)&v2 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetSegmentDensity(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 36) != a2)
  {
    *(unsigned char *)(this + 36) = a2;
    *(void *)&long long v2 = 0x7F0000007FLL;
    *((void *)&v2 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentSetExtrusionDepth(uint64_t this, float a2)
{
  if (*(float *)(this + 28) != a2)
  {
    *(float *)(this + 28) = a2;
    *(void *)&long long v3 = 0x7F0000007FLL;
    *((void *)&v3 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v3;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REStatic3DTextComponentGetText(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    return *(void *)(a1 + 144);
  }
  else {
    return a1 + 137;
  }
}

uint64_t REStatic3DTextComponentGetFont(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return *(void *)(a1 + 112);
  }
  else {
    return a1 + 105;
  }
}

uint64_t REStatic3DTextComponentGetSegmentDensity(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

float REStatic3DTextComponentGetExtrusionDepth(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

__n128 REStatic3DTextComponentGetObjectSpaceBounds(__n128 *a1)
{
  return a1[3];
}

BOOL REStatic3DTextComponentGetIsLoaded(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 176);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = atomic_load((unsigned int *)(v3 + 704));
  return v4 == 2;
}

float REStatic3DTextComponentGetFontSize(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

double REStatic3DTextComponentGetTextFrameOrigin(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

double REStatic3DTextComponentGetTextFrameSize(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t REStatic3DTextComponentGetTextAlignment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 37);
}

uint64_t REStatic3DTextComponentGetLineBreakMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 38);
}

uint64_t REStatic3DTextComponentGetVerticalTextAlignment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 39);
}

uint64_t REStatic3DTextComponentSetGenerateRayTracingMetaData(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 40) != a2)
  {
    *(unsigned char *)(this + 40) = a2;
    *(void *)&long long v2 = 0x7F0000007FLL;
    *((void *)&v2 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(this + 48) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(this + 64) = v2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL REStatic3DTextComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned char *)(a1 + 40) != 0;
}

double REStatic3DTextComponentComputeMinimumFrameSize(const char *a1, const char *a2, float a3)
{
}

float REStatic3DTextComponentComputeMinimumFrameHeight(const char *a1, const char *a2, char a3, float a4, float a5)
{
  return result;
}

double REStatic3DTextComponentGetFontMetrics(re::GeomBuildExtrudedTextOptions *a1, const char *a2, float a3)
{
  re::GeomBuildExtrudedTextOptions::getFontMetrics(a1, a2, a3);
  return v3;
}

uint64_t REStatic3DTextComponentSetGenerateInstancedGlyphs(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 41) != a2)
  {
    *(unsigned char *)(this + 41) = a2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL REStatic3DTextComponentGetAreGlyphsInstanced(uint64_t a1)
{
  return *(unsigned char *)(a1 + 41) != 0;
}

uint64_t REStatic3DTextComponentSetGenerateSideStrips(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 42) != a2)
  {
    *(unsigned char *)(this + 42) = a2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL REStatic3DTextComponentGetAreSideStripsGenerated(uint64_t a1)
{
  return *(unsigned char *)(a1 + 42) != 0;
}

uint64_t REStatic3DTextComponentSetGenerateBackFace(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 43) != a2)
  {
    *(unsigned char *)(this + 43) = a2;
    *(unsigned char *)(this + 44) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL REStatic3DTextComponentGetIsBackFaceGenerated(uint64_t a1)
{
  return *(unsigned char *)(a1 + 43) != 0;
}

double REStatic3DTextDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x3E8000003F800000;
  *(unsigned char *)(a1 + 8) = 5;
  *(unsigned char *)(a1 + 38) = 1;
  *(void *)&double result = 16778240;
  *(_DWORD *)(a1 + 32) = 16778240;
  *(_WORD *)(a1 + 36) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t REShadowManagerSetEnabled(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(result + 208) = a2;
  return result;
}

uint64_t REShadowManagerGetShadowEnabled(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v2);
  return v3;
}

uint64_t REShadowManagerGetShadowPatchFlatteningEnabled()
{
  return re::internal::shadows::g_enableShadowFlattening;
}

uint64_t RENeverUseThisFunctionToSetShadowFlattening(uint64_t result)
{
  re::internal::shadows::g_enableShadowFlattening = result;
  return result;
}

uint64_t REShadowManagerSetPrioritizeShadowMarkers(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(result + 209) = a2;
  return result;
}

uint64_t REShadowManagerUseOnlyShadowMarkers(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(result + 210) = a2;
  return result;
}

void REShadowManagerSetEntityAsMeshShadowReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 176);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(v5);
    if (*(void *)(v2 + 72))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::AssetHandle::operator=(*(void *)(v2 + 88) + v3, v5);
        ++v4;
        v3 += 24;
      }
      while (v4 < *(void *)(v2 + 72));
    }
    re::ecs2::Component::enqueueMarkDirty(v2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  }
}

uint64_t REShadowManagerSetShadowResolution(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t REShadowManagerGetShadowResolution(uint64_t a1)
{
  return *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 4);
}

uint64_t REShadowManagerSetShadowDecayRateFromReceiver(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 52) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowDecayRateFromReceiver(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 52);
}

uint64_t REShadowManagerSetShadowDecayRateWithinBounds(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 48) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowDecayRateWithinBounds(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 48);
}

uint64_t REShadowManagerSetShadowDecayRateBelowReceiver(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 56) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowDecayRateBelowReceiver(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 56);
}

uint64_t REShadowManagerSetShadowIntensityScale(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 60) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowIntensityScale(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 60);
}

uint64_t REShadowManagerSetShadowOpacityCurveFactor(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 68) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowOpacityCurveFactor(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 68);
}

uint64_t REShadowManagerSetShadowBoundingRatio(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 24) = a2;
  return result;
}

float REShadowManagerGetShadowBoundingRatio(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 24);
}

uint64_t REShadowManagerSetShadowNormalThreshold(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 104) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowNormalThreshold(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 104);
}

uint64_t REShadowManagerSetShadowIntensityMax(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 64) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetShadowIntensityMax(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 64);
}

uint64_t REShadowManagerSetNearFadeStart(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 76) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetNearFadeStart(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 76);
}

uint64_t REShadowManagerSetNearFadeEnd(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 80) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetNearFadeEnd(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 80);
}

uint64_t REShadowManagerSetFalloffBias(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 88) = a2;
  *(unsigned char *)(result + 144) = 1;
  return result;
}

float REShadowManagerGetFalloffBias(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 88);
}

float32x4_t REShadowManagerSetLightDirection(uint64_t a1, float32x4_t a2)
{
  uint64_t v2 = (float32x4_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int32x4_t v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  float32x4_t result = vmulq_n_f32(a2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  v2[8] = result;
  v2[9].i8[0] = 1;
  return result;
}

__n128 REShadowManagerGetLightDirection(uint64_t a1)
{
  return *(__n128 *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 128);
}

uint64_t REShadowManagerSetDebugClearShadowTextureArray(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(result + 33) = a2;
  return result;
}

uint64_t REShadowManagerGetDebugClearShadowTextureArray(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 33);
}

float *REShadowManagerSetBlurSizeScale(uint64_t a1, float a2)
{
  uint64_t result = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *uint64_t result = a2;
  return result;
}

float REShadowManagerGetBlurSizeScale(uint64_t a1)
{
  return *(float *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

uint64_t REShadowManagerSetMaxMipDistance(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 96) = a2;
  return result;
}

float REShadowManagerGetMaxMipDistance(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 96);
}

uint64_t REShadowManagerSetNormalThresholdForFlatShadow(uint64_t a1, float a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(float *)(result + 108) = a2;
  return result;
}

float REShadoeManagerGetNormalThresholdForFlatShadow(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 108);
}

uint64_t RENeverUseThisFunctionToSetPatchShadows(uint64_t result)
{
  re::internal::shadows::g_enablePatchShadows = result;
  return result;
}

uint64_t RENeverUseThisFunctionToSetFlatShadows(uint64_t result)
{
  re::internal::shadows::g_enableShadowFlattening = result;
  return result;
}

uint64_t RENeverUseThisFunctionToSetFallbackShadows(uint64_t result)
{
  re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening = result;
  return result;
}

uint64_t RENeverUseThisFunctionToSetAbsoluteSpace(uint64_t result)
{
  re::internal::shadows::g_enableAbsoluteSpace = result;
  return result;
}

uint64_t RENeverUseThisFunctionToSetMaxBlend(uint64_t result)
{
  re::internal::shadows::g_enableMaxBlend = result;
  return result;
}

uint64_t REShadowsSetEnableDefaultShadows(uint64_t result)
{
  re::internal::shadows::g_enableShadowsByDefault = result;
  return result;
}

uint64_t REShadowsGetEnableDefaultShadows()
{
  return re::internal::shadows::g_enableShadowsByDefault;
}

void REShadowManagerSetShadowClusterRootUpdateHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  _OWORD v6[2] = __REShadowManagerSetShadowClusterRootUpdateHandler_block_invoke;
  uint64_t v6[3] = &unk_264BE9930;
  id v7 = v3;
  float32x2_t v4 = *(void (**)(uint64_t, void *))(*(void *)a1 + 80);
  id v5 = v3;
  v4(a1, v6);
}

uint64_t __REShadowManagerSetShadowClusterRootUpdateHandler_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t REShadowManagerClearShadowClusterRootUpdateHandler(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

float REShadowCalculateShadowProxyThicknessInLocalCoordinate(float32x2_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x2_t v7 = a1;
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  uint64_t v6[3] = a5;
  return re::MeshShadowCasterParams::PlaneProxyParams::calcShadowProxyThicknessInLocalCoord(&v7, v6);
}

void *REDirectMaterialParametersArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REDirectParameterBufferCreate(re *a1)
{
  unsigned int v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 88, 8);
  if (re::ecs2::DirectParameterBuffer::DirectParameterBuffer((re::ecs2::DirectParameterBuffer *)v2))
  {
    id v3 = (id)(v2 + 8);
  }
  return v2 + 8;
}

uint64_t REDirectParameterBufferCreateWithSize(uint64_t a1, const re::DirectResourceAssetTracker *a2)
{
  id v3 = (re *)re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a1);
  float32x2_t v4 = re::globalAllocators(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 88, 8);
  if (re::ecs2::DirectParameterBuffer::DirectParameterBuffer((re::ecs2::DirectParameterBuffer *)v5, (id *)v3, a2))
  {
    id v6 = (id)(v5 + 8);
  }
  return v5 + 8;
}

uint64_t REDirectParameterBufferCopy(char *a1, uint64_t a2)
{
  id v3 = (re *)re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  float32x2_t v4 = (id *)v3;
  if (a1) {
    uint64_t v5 = a1 - 8;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1) {
    id v3 = a1;
  }
  id v6 = re::globalAllocators(v3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 88, 8);
  if (re::ecs2::DirectParameterBuffer::DirectParameterBuffer((re::ecs2::DirectParameterBuffer *)v7, (const re::ecs2::DirectParameterBuffer *)v5, v4))
  {
    id v8 = (id)(v7 + 8);
  }
  return v7 + 8;
}

uint64_t REDirectParameterBufferGetSize(char *a1, uint64_t a2)
{
  id v3 = (const re::DirectResourceAssetTracker *)re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  if (a1)
  {
    float32x2_t v4 = a1;
    uint64_t Size = re::ecs2::DirectParameterBuffer::getSize((re::ecs2::DirectParameterBuffer *)(a1 - 8), v3);

    return Size;
  }
  else
  {
    return re::ecs2::DirectParameterBuffer::getSize(0, v3);
  }
}

void REDirectParameterBufferResize(char *a1, uint64_t a2, re::DirectResourceAssetTracker *a3)
{
  uint64_t v5 = (id *)re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  if (a1)
  {
    id v6 = a1;
    re::ecs2::DirectParameterBuffer::resize((re::ecs2::DirectParameterBuffer *)(a1 - 8), v5, a3);
  }
  else
  {
    re::ecs2::DirectParameterBuffer::resize(0, v5, a3);
  }
}

BOOL REDirectParameterBufferIsEmpty(unsigned __int8 *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    int is_null = uuid_is_null(a1 + 16);
  }
  else
  {
    int is_null = uuid_is_null((const unsigned __int8 *)0x18);
  }
  return is_null != 0;
}

id REDirectParameterBufferGetDirectBuffer(char *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  if (a1) {
    float32x2_t v4 = (const unsigned __int8 *)(a1 - 8);
  }
  else {
    float32x2_t v4 = 0;
  }
  if (a1) {
    uint64_t v5 = a1;
  }
  uuid_copy(dst, v4 + 24);
  id v6 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet(v3 + 40, dst);
  if (v6) {
    uint64_t v7 = *v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = v7;
  int v9 = DRResourceAsBuffer();

  if (a1) {
  return v9;
  }
}

void REDirectParameterBufferSetTextureAssetAtOffset(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a1) {
    id v6 = a1 - 8;
  }
  else {
    id v6 = 0;
  }
  if (a1) {
    uint64_t v7 = a1;
  }
  uint64_t v8 = *((void *)v6 + 7);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (*(void *)(*((void *)v6 + 9) + 24 + v9) != a2)
    {
      ++v10;
      v9 += 32;
      if (v8 == v10) {
        goto LABEL_10;
      }
    }
    re::AssetAPIHelper::assetHandleCreate(a3, &v17);
    unint64_t v12 = *((void *)v6 + 7);
    if (v12 <= v10)
    {
      uint64_t v20 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      signed int v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      unint64_t v26 = v10;
      __int16 v27 = 2048;
      unint64_t v28 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v13 = (uint64_t *)(*((void *)v6 + 9) + v9);
    uint64_t v14 = v13[1];
    v13[1] = v18;
    uint64_t v18 = v14;
    uint64_t v15 = *v13;
    *long long v13 = 0;
    *long long v13 = v17;
    uint64_t v17 = v15;
    uint64_t v16 = v13[2];
    void v13[2] = v19;
    uint64_t v19 = v16;
    uint64_t v11 = (re::AssetHandle *)&v17;
  }
  else
  {
LABEL_10:
    re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)&v29);
    *((void *)&v30 + 1) = a2;
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::add((void *)v6 + 5, (uint64_t *)&v29);
    uint64_t v11 = (re::AssetHandle *)&v29;
  }
  re::AssetHandle::~AssetHandle(v11);
  if (a1) {
}
  }

uint64_t REDirectParameterBufferGetTextureAssetAtOffset(char *a1, uint64_t a2)
{
  if (a1) {
    float32x2_t v4 = a1 - 8;
  }
  else {
    float32x2_t v4 = 0;
  }
  if (a1) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *((void *)v4 + 7);
  if (!v6)
  {
LABEL_10:
    uint64_t v8 = 0;
    if (!a1) {
      return v8;
    }
LABEL_11:

    return v8;
  }
  uint64_t v7 = (uint64_t *)*((void *)v4 + 9);
  while (v7[3] != a2)
  {
    v7 += 4;
    if (!--v6) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = *v7;
  if (a1) {
    goto LABEL_11;
  }
  return v8;
}

uint64_t REDirectMaterialParametersArrayComponentGetData(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  re::ecs2::DirectMaterialParametersArrayComponent::getParameterData(a1, a2, a3, a4, &v6);
  if (!v6) {
    return 0;
  }
  uint64_t v4 = v6 + 8;

  return v4;
}

void REDirectMaterialParametersArrayComponentSetData(void *a1, char a2, unint64_t a3, unint64_t a4, char *a5)
{
  if (a5)
  {
    unint64_t v10 = a5 - 8;
    uint64_t v11 = a5;
    unint64_t v12 = a5;
  }
  else
  {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  re::ecs2::DirectMaterialParametersArrayComponent::setParameterData(a1, a2, a3, a4, (uint64_t *)&v13);
  if (v13)
  {

    long long v13 = 0;
  }
  if (a5) {
}
  }

void *REImageBasedReflectionRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

re::MaterialParameterBlock *RERenderManagerMaterialParameterBlockCreateWithAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v8);
  if (!v8[1])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RERenderManagerMaterialParameterBlockCreateWithAsset was called with a NULL material handle. This will crash in the future.", buf, 2u);
    }
  }
  *(void *)long long buf = a1;
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, &v6);
  uint64_t v4 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v4;
}

re::MaterialParameterBlock *REMaterialParameterBlockCreate(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v8);
  if (!v8[1])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "REMaterialParameterBlockCreate was called with a NULL material handle. This will crash in the future.", buf, 2u);
    }
  }
  *(void *)long long buf = a1;
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, &v6);
  uint64_t v4 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v4;
}

void *REMaterialParameterBlockCopyParams(uint64_t a1, re::Allocator *a2)
{
  uint64_t v3 = *(re::MaterialParameterTableBuilder **)(re::RenderFrameBox::get(*(void *)(a1 + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)+ 376);
  return re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(a2, v3);
}

uint64_t REMaterialParameterBlockCreateCopy(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 1008, 8);
  return re::MaterialParameterBlock::MaterialParameterBlock(v3, a1);
}

void REMaterialParameterBlockClearParameter(re::MaterialParameterBlock *a1, const char *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::removeParameter(a1, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      uint64_t v4 = "REMaterialParameterBlockClearParameter";
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetBool(re::MaterialParameterBlock *a1, const char *a2, char a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setBool(a1, a2, a3, (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetBool";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat(re::MaterialParameterBlock *a1, const char *a2, float a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setFloat(a1, a2, a3, (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetFloat";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetInt(re::MaterialParameterBlock *a1, const char *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setInt(a1, a2, a3, (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetInt";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetUInt(re::MaterialParameterBlock *a1, const char *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setUint(a1, a2, a3, (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetUInt";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

double REMaterialParameterBlockSetFloat2(re::MaterialParameterBlock *a1, char *a2, double result)
{
  if (a1) {
    return re::MaterialParameterBlock::setVector2F(a1, a2, *(uint64_t *)&result, (uint64_t)&v3);
  }
  return result;
}

void REMaterialParameterBlockSetInt2(re::MaterialParameterBlock *a1, char *a2, double a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setInt2(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetInt2";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetUInt2(re::MaterialParameterBlock *a1, char *a2, double a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setUint2(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetUInt2";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat3(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setVector3F(a1, a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = "REMaterialParameterBlockSetFloat3";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetColor3(re::MaterialParameterBlock *a1, char *a2, unsigned int a3, int8x16_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    v4.i64[0] = a4.u32[1];
    v4.i64[1] = a3;
    int32x2_t v5 = vzip1_s32(*(int32x2_t *)a4.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL));
    v6.i64[0] = v5.u32[0];
    v6.i64[1] = v5.u32[1];
    int8x16_t v7 = vorrq_s8((int8x16_t)vshlq_n_s64(v4, 0x20uLL), v6);
    re::MaterialParameterBlock::setColorGamut3F(a1, a2, v7.i64[0], v7.i64[1], (uint64_t)&v9);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v11 = "REMaterialParameterBlockSetColor3";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetInt3(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setInt3(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int8x16_t v6 = "REMaterialParameterBlockSetInt3";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetUInt3(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setUint3(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int8x16_t v6 = "REMaterialParameterBlockSetUInt3";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat4(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setVector4F(a1, a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)&v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int8x16_t v6 = "REMaterialParameterBlockSetFloat4";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetColor4(re::MaterialParameterBlock *a1, char *a2, char a3, __n128 a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __n128 v5 = a4;
    char v6 = a3;
    re::MaterialParameterBlock::setColorGamut4F(a1, a2, (uint64_t)&v5, (uint64_t)v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = "REMaterialParameterBlockSetColor4";
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetInt4(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setInt4(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v6 = "REMaterialParameterBlockSetInt4";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetUInt4(re::MaterialParameterBlock *a1, char *a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setUint4(a1, a2, (uint64_t)&v4, a3);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v6 = "REMaterialParameterBlockSetUInt4";
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat2x2(re::MaterialParameterBlock *a1, char *a2, double a3, double a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setMatrix2x2F(a1, a2, *(uint64_t *)&a3, *(uint64_t *)&a4, (uint64_t)&v5);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v7 = "REMaterialParameterBlockSetFloat2x2";
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat3x3(re::MaterialParameterBlock *a1, char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    v6[0] = a3;
    v6[1] = a4;
    _OWORD v6[2] = a5;
    re::MaterialParameterBlock::setMatrix3x3F(a1, a2, v6, (uint64_t)v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = "REMaterialParameterBlockSetFloat3x3";
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetFloat4x4(re::MaterialParameterBlock *a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    v7[0] = a3;
    v7[1] = a4;
    _OWORD v7[2] = a5;
    void v7[3] = a6;
    re::MaterialParameterBlock::setMatrix4x4F(a1, a2, v7, (uint64_t)v8);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v10 = "REMaterialParameterBlockSetFloat4x4";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetTextureFromAsset(re::MaterialParameterBlock *a1, const char *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)buf);
    uint64_t v5 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)buf);
    if (v5)
    {
      re::MaterialParameterBlock::setTextureHandle(a1, a2, (const re::TextureHandle *)(v5 + 48), (uint64_t)v7);
      v7[0] = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = "REMaterialParameterBlockSetTextureFromAsset";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetTextureBinding(_anonymous_namespace_ *a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setBinding(a1, a2, a3, a4, 2, (uint64_t)&v5);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v7 = "REMaterialParameterBlockSetTextureBinding";
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetBufferBinding(_anonymous_namespace_ *a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setBinding(a1, a2, a3, a4, 3, (uint64_t)&v5);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v7 = "REMaterialParameterBlockSetBufferBinding";
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetSamplerBinding(_anonymous_namespace_ *a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::setBinding(a1, a2, a3, a4, 4, (uint64_t)&v5);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v7 = "REMaterialParameterBlockSetSamplerBinding";
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

uint64_t REMaterialParameterBlockGetBool(re::MaterialParameterBlock *a1, const char *a2, unsigned char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 2;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(unsigned char *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetBool";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat(re::MaterialParameterBlock *a1, const char *a2, _DWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 1;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetFloat";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetInt(re::MaterialParameterBlock *a1, const char *a2, _DWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 3;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetInt";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetUInt(re::MaterialParameterBlock *a1, const char *a2, _DWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 7;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetUInt";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat2(re::MaterialParameterBlock *a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 32;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(void *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetFloat2";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetInt2(re::MaterialParameterBlock *a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 4;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(void *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetInt2";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetUInt2(re::MaterialParameterBlock *a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 8;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(void *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetUInt2";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat3(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 33;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "REMaterialParameterBlockGetFloat3";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetColor3(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3, unsigned char *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v14);
    BOOL v7 = (v16 & 7) == 1 && v17 == 20;
    uint64_t v8 = v7;
    if (v7)
    {
      *(void *)&long long v9 = re::MaterialParameterBlock::colorGamut3FValue((uint64_t)a1, (uint64_t)&v14);
      DWORD2(v9) = v10;
      *a3 = v9;
      *a4 = v11;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315138;
      uint64_t v15 = "REMaterialParameterBlockGetColor3";
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v14, 0xCu);
    }

    return 0;
  }
  return v8;
}

uint64_t REMaterialParameterBlockGetInt3(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 5;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      int v10 = "REMaterialParameterBlockGetInt3";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetUInt3(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 9;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      int v10 = "REMaterialParameterBlockGetUInt3";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat4(re::MaterialParameterBlock *a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    if ((v11 & 7) == 1 && (v12 == 48 || v12 == 34))
    {
      Constant = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
      uint64_t v6 = Constant[1];
      *a3 = *Constant;
      a3[1] = v6;
      return 1;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      int v10 = "REMaterialParameterBlockGetFloat4";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }
  }
  return 0;
}

uint64_t REMaterialParameterBlockGetColor4(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3, unsigned char *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)buf);
    if ((v13 & 7) == 1 && (v14 & 0xFE) == 0x14)
    {
      re::MaterialParameterBlock::colorGamut4FValue((uint64_t)a1, (uint64_t)buf, (uint64_t)&v9);
      *a3 = v9;
      *a4 = v10;
      return 1;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v12 = "REMaterialParameterBlockGetColor4";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
  return 0;
}

uint64_t REMaterialParameterBlockGetInt4(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 6;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      char v10 = "REMaterialParameterBlockGetInt4";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetUInt4(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v9);
    BOOL v5 = (v11 & 7) == 1 && v12 == 10;
    uint64_t v6 = v5;
    if (v5) {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v9);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      char v10 = "REMaterialParameterBlockGetUInt4";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v9, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat2x2(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v7);
    if ((v9 & 7) == 1 && (v10 == 48 || v10 == 34))
    {
      *a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v7);
      return 1;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = "REMaterialParameterBlockGetFloat2x2";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v7, 0xCu);
    }
  }
  return 0;
}

uint64_t REMaterialParameterBlockGetFloat3x3(re::MaterialParameterBlock *a1, const char *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v15);
    BOOL v5 = (v17 & 7) == 1 && v18 == 49;
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t Constant = re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v15);
      int v8 = *(_DWORD *)(Constant + 8);
      int v9 = *(_DWORD *)(Constant + 24);
      uint64_t v10 = *(void *)(Constant + 16);
      int v11 = *(_DWORD *)(Constant + 40);
      uint64_t v12 = *(void *)(Constant + 32);
      *(void *)a3 = *(void *)Constant;
      *(_DWORD *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 32) = v12;
      *(_DWORD *)(a3 + 40) = v11;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315138;
      char v16 = "REMaterialParameterBlockGetFloat3x3";
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v15, 0xCu);
    }

    return 0;
  }
  return v6;
}

uint64_t REMaterialParameterBlockGetFloat4x4(re::MaterialParameterBlock *a1, const char *a2, _OWORD *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v13);
    BOOL v5 = (v15 & 7) == 1 && v16 == 49;
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)&v13);
      long long v8 = Constant[1];
      long long v9 = Constant[2];
      long long v10 = Constant[3];
      *a3 = *Constant;
      a3[1] = v8;
      a3[2] = v9;
      a3[3] = v10;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      char v14 = "REMaterialParameterBlockGetFloat4x4";
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v13, 0xCu);
    }

    return 0;
  }
  return v6;
}

void REMaterialParameterBlockSetTexture(re::MaterialParameterBlock *a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    id v10 = v5;
    id v7 = v5;
    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*((void *)a1 + 121) + 64), &v10, (os_unfair_lock_s **)buf);
    if (v10) {

    }
    re::MaterialParameterBlock::setTextureHandle(a1, a2, (const re::TextureHandle *)buf, (uint64_t)v9);
    v9[0] = 0;
    re::TextureHandle::invalidate((re::TextureHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = "REMaterialParameterBlockSetTexture";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetBuffer(re::MaterialParameterBlock *a1, char *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    id v7 = v5;
    id v8 = v6;
    LODWORD(v11) = 0;
    HIDWORD(v11) = objc_msgSend(v6, sel_length, v8, v11);
    re::MaterialParameterBlock::setBuffer(a1, a2, (uint64_t)&v10, (uint64_t)v12);
    v12[0] = 0;
    if (v8) {

    }
    if (v6) {
  }
    }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v14 = "REMaterialParameterBlockSetBuffer";
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetBufferOffsetSize(re::MaterialParameterBlock *a1, char *a2, void *a3, int a4, int a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v9 = a3;
  uint64_t v10 = v9;
  if (a1)
  {
    id v11 = v9;
    id v13 = v11;
    int v14 = a4;
    int v15 = a5;
    re::MaterialParameterBlock::setBuffer(a1, a2, (uint64_t)&v13, (uint64_t)v16);
    v16[0] = 0;
    if (v11) {
  }
    }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v18 = "REMaterialParameterBlockSetBufferOffsetSize";
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

void REMaterialParameterBlockSetSampler(re::MaterialParameterBlock *a1, char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    id v9 = v5;
    id v7 = v5;
    re::MaterialParameterBlock::setSampler(a1, a2, &v9, (uint64_t)v10);
    v10[0] = 0;
    if (v6) {
  }
    }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = "REMaterialParameterBlockSetSampler";
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }
  }
}

uint64_t REMaterialParameterBlockSetDepthBiasState(uint64_t a1, float a2, float a3, float a4)
{
  v5[0] = 1;
  float v6 = a2;
  float v7 = a3;
  float v8 = a4;
  return re::MaterialParameterBlock::setDepthBiasState(a1, v5);
}

BOOL REMaterialParameterBlockGetDepthBiasState(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 948);
  if (*(unsigned char *)(a1 + 948))
  {
    int v5 = *(_DWORD *)(a1 + 956);
    int v6 = *(_DWORD *)(a1 + 960);
    if (a2) {
      *a2 = *(_DWORD *)(a1 + 952);
    }
    if (a3) {
      *a3 = v5;
    }
    if (a4) {
      *a4 = v6;
    }
  }
  return v4 != 0;
}

BOOL REMaterialParameterBlockBindTextureToSamplerWithDefaultArray(void *a1, char *a2, char *a3, void *a4)
{
  id v7 = a4;
  id v22 = v7;
  id v8 = v7;
  re::MaterialSamplerData::fromDescriptor(&v22, (uint64_t)v23);
  if (v7) {

  }
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        id v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v9;
  if (a3)
  {
    uint64_t v13 = *a3;
    if (*a3)
    {
      char v14 = a3[1];
      if (v14)
      {
        int v15 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v13;
  unint64_t v17 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)v23);
  BOOL v18 = re::MaterialParameterBlock::bindTextureToSampler(a1, &v21, &v20, v17);
  uint64_t v20 = 0;
  uint64_t v21 = 0;

  return v18;
}

BOOL REMaterialParameterBlockBindTextureToSampler(void *a1, char *a2, char *a3, uint64_t a4, void *a5)
{
  return REMaterialParameterBlockBindTextureToSamplerWithDefaultArray(a1, a2, a3, a5);
}

BOOL REMaterialParameterBlockUnbindTextureFromSamplers(uint64_t *a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      char v3 = a2[1];
      if (v3)
      {
        int v4 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v2 = 31 * v2 + v3;
          int v5 = *v4++;
          char v3 = v5;
        }
        while (v5);
      }
      v2 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v7 = v2;
  return re::MaterialParameterBlock::unbindTextureFromSamplers(a1, &v7);
}

id REMaterialParameterBlockGetTexture(re::MaterialParameterBlock *a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v11 = "REMaterialParameterBlockGetTexture";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }

    goto LABEL_14;
  }
  re::MaterialParameterBlock::handle(a1, a2, (uint64_t)buf);
  int v3 = v12 & 7;
  if ((v12 & 7) == 0 || v3 != 2 && (v3 != 1 || v13 != 64))
  {
LABEL_14:
    int v5 = 0;
    goto LABEL_15;
  }
  re::MaterialParameterBlock::textureHandleValue((uint64_t)a1, (uint64_t)buf, (re::TextureHandle *)v8);
  re::TextureHandle::metalTexture(v8, &v9);
  id v4 = v9;
  int v5 = v4;
  if (v4) {

  }
  re::TextureHandle::invalidate((re::TextureHandle *)v8);
LABEL_15:
  return v5;
}

id REMaterialParameterBlockGetBuffer(re::MaterialParameterBlock *a1, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    re::MaterialParameterBlock::handle(a1, a2, (uint64_t)&v7);
    int v3 = v9 & 7;
    if ((v9 & 7) != 0 && (v3 == 3 || v3 == 1 && v10 == 128))
    {
      id v4 = *(id *)re::MaterialParameterBlock::bufferValue((uint64_t)a1, (uint64_t)&v7);
      goto LABEL_13;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      id v8 = "REMaterialParameterBlockGetBuffer";
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", (uint8_t *)&v7, 0xCu);
    }
  }
  id v4 = 0;
LABEL_13:
  return v4;
}

CFStringRef REMaterialParameterBlockCopyTextureBindingStructName(re::MaterialParameterBlock *a1, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v8 = "REMaterialParameterBlockCopyTextureBindingStructName";
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }

    return 0;
  }
  re::MaterialParameterBlock::handle(a1, a2, (uint64_t)buf);
  int v3 = v9 & 7;
  if (!v3) {
    return 0;
  }
  if (v3 == 2)
  {
    if ((v9 & 0x10) != 0)
    {
LABEL_10:
      re::MaterialParameterBlock::bindingValue(a1, (uint64_t *)buf, (uint64_t)v6);
      return CFStringCreateWithCString(0, re::s_materialTableIDMappings[v6[16]], 0x8000100u);
    }
    return 0;
  }
  if (v3 != 1) {
    return 0;
  }
  CFStringRef result = 0;
  if ((v9 & 0x10) != 0 && v10 == 64) {
    goto LABEL_10;
  }
  return result;
}

CFStringRef REMaterialParameterBlockCopyTextureBindingMemberName(re::MaterialParameterBlock *a1, const char *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      char v9 = "REMaterialParameterBlockCopyTextureBindingMemberName";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "nil REMaterialParameterBlockRef passed to %s", buf, 0xCu);
    }

    return 0;
  }
  re::MaterialParameterBlock::handle(a1, a2, (uint64_t)buf);
  int v3 = v10 & 7;
  if (!v3) {
    return 0;
  }
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      CFStringRef result = 0;
      if ((v10 & 0x10) == 0 || v11 != 64) {
        return result;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if ((v10 & 0x10) == 0) {
    return 0;
  }
LABEL_9:
  re::MaterialParameterBlock::bindingValue(a1, (uint64_t *)buf, (uint64_t)v7);
  uint64_t v5 = 0;
  while (v7[3] != (REMaterialParameterBlockCopyTextureBindingMemberName::kTextureNames[v5] & 0x7FFFFFFFFFFFFFFFLL))
  {
    v5 += 2;
    if (v5 == 12) {
      return 0;
    }
  }
  return CFStringCreateWithCString(0, (const char *)REMaterialParameterBlockCopyTextureBindingMemberName::kTextureNames[v5 + 1], 0x8000100u);
}

void *REMaterialParameterBlockAddPassTechniqueMapping(re::MaterialParameterBlock *a1, char *__s, const char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, &v11);
    unint64_t v7 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    unint64_t v7 = 0;
  }
  size_t v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, &v11);
    unint64_t v9 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  return re::MaterialParameterBlock::addPassTechniqueMapping(a1, v7, v9, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
}

BOOL REMaterialParameterBlockGetPassTechniqueMapping(re::MaterialParameterBlock *a1, char *__s, void *a3)
{
  void v10[2] = *MEMORY[0x263EF8340];
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v10);
    unint64_t v7 = (v10[1] + (v10[0] << 6) + (v10[0] >> 2) - 0x61C8864680B583E9) ^ v10[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  PassTechniqueMapping = (void *)re::MaterialParameterBlock::tryGetPassTechniqueMapping(a1, v7, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (PassTechniqueMapping) {
    *a3 = *PassTechniqueMapping;
  }
  return PassTechniqueMapping != 0;
}

uint64_t REMaterialParameterBlockRemovePassTechniqueMapping(re::MaterialParameterBlock *a1, char *__s)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, v7);
    unint64_t v5 = (v7[1] + (v7[0] << 6) + (v7[0] >> 2) - 0x61C8864680B583E9) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  return re::MaterialParameterBlock::removePassTechniqueMapping(a1, v5, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
}

void *REReferenceComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REReferenceComponentGetLoadingPolicy(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t REReferenceComponentGetLoadingState(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98);
}

uint64_t REReferenceComponentGetEntityName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return *(void *)(a1 + 48);
  }
  else {
    return a1 + 41;
  }
}

uint64_t REReferenceComponentGetReferenceSourceType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

char *REReferenceComponentGetSubscene(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 104), *(void *)(a1 + 16));
}

uint64_t REReferenceComponentSetLoadingPolicy(uint64_t result, char a2)
{
  *(unsigned char *)(result + 97) = a2;
  return result;
}

uint64_t REReferenceComponentSetLoadingState(uint64_t result, char a2)
{
  *(unsigned char *)(result + 98) = a2;
  return result;
}

uint64_t REReferenceComponentSetEntityName(unsigned char *a1, const char *a2)
{
  a1[96] = 0;
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

re::ecs2::EntityHandle *REReferenceComponentSetSubscene(uint64_t a1, uint64_t a2)
{
  return re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 104), a2);
}

uint64_t REReferenceComponentSetBundlePath(unsigned char *a1, const char *a2)
{
  a1[96] = 0;
  re::DynamicString::operator=((re::DynamicString *)(a1 + 64), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t REReferenceComponentGetBundlePath(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return *(void *)(a1 + 80);
  }
  else {
    return a1 + 73;
  }
}

void *RECustomDeformerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECustomDeformerComponentSetCustomDeformationModel(void *a1, uint64_t a2, char *a3, char a4, const char *a5, const char *a6, const void *a7, size_t a8, uint64_t a9, long long a10)
{
  void v43[2] = *MEMORY[0x263EF8340];
  uint64_t v17 = re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  if (!v17)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v24 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(buf) = 0;
    __int16 v25 = "Cannot set custom deformation model without a render manager";
    unint64_t v26 = v24;
    uint32_t v27 = 2;
    goto LABEL_25;
  }
  uint64_t v18 = v17;
  uint64_t v19 = *(re::CustomDeformers **)(*(void *)(v17 + 40) + 1128);
  if (a3)
  {
    uint64_t v20 = *a3;
    if (*a3)
    {
      char v21 = a3[1];
      if (v21)
      {
        id v22 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v20 = 31 * v20 + v21;
          int v23 = *v22++;
          char v21 = v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  *(void *)&long long buf = 2 * v20;
  *((void *)&buf + 1) = a3;
  unint64_t v28 = re::CustomDeformers::customDeformerID(v19, (const re::StringID *)&buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v28 == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v24 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = a3;
    __int16 v25 = "Cannot set custom deformation model for an unknown custom deformer: %s";
    unint64_t v26 = v24;
    uint32_t v27 = 12;
LABEL_25:
    _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
LABEL_21:

    return 0;
  }
  LOBYTE(buf) = a4;
  *((void *)&buf + 1) = 0;
  uint64_t v42 = "";
  v43[0] = 0;
  v43[1] = "";
  if (a6)
  {
  }
  if (a7)
  {
    long long v31 = re::globalAllocators(v30);
    long long v32 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v31[2] + 32))(v31[2], a8, a9);
    uint64_t v34 = &unk_26E735728;
    long long v35 = a10;
    uint64_t v36 = &v34;
    uint64_t v40 = &v38;
    __uuid_t dst = v32;
    uint64_t v38 = &unk_26E735728;
    long long v39 = a10;
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](&v34);
    memcpy(__dst, a7, a8);
  }
  else
  {
    __uuid_t dst = 0;
    uint64_t v40 = 0;
  }
  re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationModel(a1, v18, v28, (uint64_t)&buf, (uint64_t *)&__dst);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&__dst);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)v43);
  re::StringID::destroyString((re::StringID *)((char *)&buf + 8));
  return 1;
}

uint64_t RECustomDeformerComponentSetCustomDeformationInput(void *a1, uint64_t a2, char *a3, char a4, const char *a5, const char *a6, const void *a7, size_t a8, uint64_t a9, long long a10)
{
  void v43[2] = *MEMORY[0x263EF8340];
  uint64_t v17 = re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  if (!v17)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v24 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(buf) = 0;
    __int16 v25 = "Cannot set custom deformation input without a render manager";
    unint64_t v26 = v24;
    uint32_t v27 = 2;
    goto LABEL_25;
  }
  uint64_t v18 = v17;
  uint64_t v19 = *(re::CustomDeformers **)(*(void *)(v17 + 40) + 1128);
  if (a3)
  {
    uint64_t v20 = *a3;
    if (*a3)
    {
      char v21 = a3[1];
      if (v21)
      {
        id v22 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v20 = 31 * v20 + v21;
          int v23 = *v22++;
          char v21 = v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  *(void *)&long long buf = 2 * v20;
  *((void *)&buf + 1) = a3;
  unint64_t v28 = re::CustomDeformers::customDeformerID(v19, (const re::StringID *)&buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v28 == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v24 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = a3;
    __int16 v25 = "Cannot set custom deformation input for an unknown custom deformer: %s";
    unint64_t v26 = v24;
    uint32_t v27 = 12;
LABEL_25:
    _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
LABEL_21:

    return 0;
  }
  LOBYTE(buf) = a4;
  *((void *)&buf + 1) = 0;
  uint64_t v42 = "";
  v43[0] = 0;
  v43[1] = "";
  if (a6)
  {
  }
  if (a7)
  {
    long long v31 = re::globalAllocators(v30);
    long long v32 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v31[2] + 32))(v31[2], a8, a9);
    uint64_t v34 = &unk_26E7357A8;
    long long v35 = a10;
    uint64_t v36 = &v34;
    uint64_t v40 = &v38;
    __uuid_t dst = v32;
    uint64_t v38 = &unk_26E7357A8;
    long long v39 = a10;
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](&v34);
    memcpy(__dst, a7, a8);
  }
  else
  {
    __uuid_t dst = 0;
    uint64_t v40 = 0;
  }
  re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationInput(a1, v18, v28, (uint64_t)&buf, (uint64_t *)&__dst);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&__dst);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)v43);
  re::StringID::destroyString((re::StringID *)((char *)&buf + 8));
  return 1;
}

uint64_t RECustomDeformerComponentForceContinuousDeformations(void *a1, uint64_t a2, char *a3, char a4, const char *a5, const char *a6, unint64_t a7)
{
  v29[2] = *MEMORY[0x263EF8340];
  uint64_t v13 = re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  if (!v13)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    LOWORD(v27) = 0;
    uint64_t v20 = "Cannot set custom deformation continuous deformation without a render manager";
    char v21 = v19;
    uint32_t v22 = 2;
    goto LABEL_22;
  }
  uint64_t v14 = *(re::CustomDeformers **)(*(void *)(v13 + 40) + 1128);
  if (a3)
  {
    uint64_t v15 = *a3;
    if (*a3)
    {
      char v16 = a3[1];
      if (v16)
      {
        uint64_t v17 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v15 = 31 * v15 + v16;
          int v18 = *v17++;
          char v16 = v18;
        }
        while (v18);
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)&long long v27 = 2 * v15;
  *((void *)&v27 + 1) = a3;
  unint64_t v23 = re::CustomDeformers::customDeformerID(v14, (const re::StringID *)&v27);
  re::StringID::destroyString((re::StringID *)&v27);
  if (v23 == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    LODWORD(v27) = 136315138;
    *(void *)((char *)&v27 + 4) = a3;
    uint64_t v20 = "Cannot set custom deformation continuous deformation for an unknown custom deformer: %s";
    char v21 = v19;
    uint32_t v22 = 12;
LABEL_22:
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v27, v22);
LABEL_20:

    return 0;
  }
  LOBYTE(v27) = a4;
  *((void *)&v27 + 1) = 0;
  unint64_t v28 = "";
  v29[0] = 0;
  v29[1] = "";
  if (a6)
  {
  }
  re::ecs2::CustomDeformerComponent::setForceContinuousDeformations(a1, v23, (uint64_t)&v27, a7);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)v29);
  re::StringID::destroyString((re::StringID *)((char *)&v27 + 8));
  return 1;
}

void std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E735728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E735728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

re *std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = (uint64_t (*)(uint64_t, void))*((void *)result + 1);
  if (v3) {
    __n128 result = (re *)v3(v2, *((void *)result + 2));
  }
  if (v2)
  {
    size_t v4 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(result)[2] + 40);
    return (re *)v4();
  }
  return result;
}

uint64_t std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RECustomDeformerComponentSetCustomDeformationModel::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationModel::$_0>,void ()(void *)>::target_type()
{
}

void std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E7357A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7357A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

re *std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = (uint64_t (*)(uint64_t, void))*((void *)result + 1);
  if (v3) {
    __n128 result = (re *)v3(v2, *((void *)result + 2));
  }
  if (v2)
  {
    size_t v4 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(result)[2] + 40);
    return (re *)v4();
  }
  return result;
}

uint64_t std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RECustomDeformerComponentSetCustomDeformationInput::$_0,std::allocator<RECustomDeformerComponentSetCustomDeformationInput::$_0>,void ()(void *)>::target_type()
{
}

void *REStateMachineComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void REStateMachineComponentAssignAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void REStateMachineComponentAssignStateParameterBlackboardAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void REStateMachineComponentSetStateParameterInt(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  v9[0] = 0;
  v9[1] = "";
  uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 184, v9);
  if (v6)
  {
    uint64_t v7 = *v6;
    uint64_t v10 = a3;
    if (*(void *)(v7 + 32))
    {
      size_t v8 = (re::BindPoint *)(v7 + 8);
      if (re::BindPoint::isAlive((re::BindPoint *)(v7 + 8))) {
        re::BindPoint::setValue<long long>(v8, &v10);
      }
    }
  }
  re::StringID::destroyString((re::StringID *)v9);
}

void REStateMachineComponentSetStateParameterFloat(_anonymous_namespace_ *a1, const char *a2, float a3)
{
  v9[0] = 0;
  v9[1] = "";
  uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 232, v9);
  if (v6)
  {
    uint64_t v7 = *v6;
    float v10 = a3;
    if (*(void *)(v7 + 32))
    {
      uint64_t v8 = v7 + 8;
      if (re::BindPoint::isAlive((re::BindPoint *)(v7 + 8))) {
        re::BindPoint::setValue<float>(v8, &v10);
      }
    }
  }
  re::StringID::destroyString((re::StringID *)v9);
}

void REStateMachineComponentSetStateParameterBool(_anonymous_namespace_ *a1, const char *a2, unsigned __int8 a3)
{
  v7[0] = 0;
  v7[1] = "";
  uint64_t v6 = (re::StateParameterBool **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 280, v7);
  if (v6) {
    re::StateParameterBool::setValue(*v6, a3);
  }
  re::StringID::destroyString((re::StringID *)v7);
}

void REStateMachineComponentSetStateParameterTrigger(uint64_t a1, const char *a2)
{
  v4[0] = 0;
  v4[1] = "";
  re::StateParameterBlackboard::setStateParameterTriggerValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v4, 1u);
  re::StringID::destroyString((re::StringID *)v4);
}

void REStateMachineComponentResetStateParameterTrigger(uint64_t a1, const char *a2)
{
  v4[0] = 0;
  v4[1] = "";
  re::StateParameterBlackboard::setStateParameterTriggerValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v4, 0);
  re::StringID::destroyString((re::StringID *)v4);
}

BOOL REStateMachineComponentGetStateParameterInt(uint64_t a1, const char *a2, uint64_t *a3)
{
  v8[0] = 0;
  v8[1] = "";
  StateParameterIntCFBooleanRef Value = re::StateParameterBlackboard::getStateParameterIntValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return StateParameterIntValue;
}

BOOL REStateMachineComponentGetStateParameterFloat(uint64_t a1, const char *a2, float *a3)
{
  v8[0] = 0;
  v8[1] = "";
  StateParameterFloatCFBooleanRef Value = re::StateParameterBlackboard::getStateParameterFloatValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return StateParameterFloatValue;
}

BOOL REStateMachineComponentGetStateParameterBool(uint64_t a1, const char *a2, BOOL *a3)
{
  v8[0] = 0;
  v8[1] = "";
  StateParameterBoolCFBooleanRef Value = re::StateParameterBlackboard::getStateParameterBoolValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return StateParameterBoolValue;
}

BOOL REStateMachineComponentGetStateParameterTrigger(uint64_t a1, const char *a2, BOOL *a3)
{
  v8[0] = 0;
  v8[1] = "";
  StateParameterTriggerCFBooleanRef Value = re::StateParameterBlackboard::getStateParameterTriggerValue((re::StateParameterBlackboard *)(a1 + 176), (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return StateParameterTriggerValue;
}

uint64_t REStateMachineComponentGetCurrentStateName(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::ecs2::StateMachineComponent::currentState(a1, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return *(void *)(v4 + 96);
  }
  else {
    return 0;
  }
}

uint64_t REStateMachineComponentGetPreviousStateName(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::ecs2::StateMachineComponent::previousState(a1, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return *(void *)(v4 + 96);
  }
  else {
    return 0;
  }
}

unint64_t REStateMachineComponentGetCurrentTransitionName(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::ecs2::StateMachineComponent::currentTransition(a1, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return v4[6];
  }
  else {
    return 0;
  }
}

uint64_t REStateMachineComponentGetStateMachineAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REStateMachineComponentGetBoundParameterCount(uint64_t a1)
{
  return *(void *)(a1 + 392);
}

uint64_t REStateMachineComponentHasBoundParameterAtName(uint64_t a1, char *a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        long long v5 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v8[0] = 2 * v3;
  v8[1] = a2;
  re::StateMachineParameterBinding::indexOf(a1 + 376, v8, a3, (uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v8);
  return v9[0];
}

uint64_t REStateMachineComponentGetBoundParameterIndexAtName(uint64_t a1, char *a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        long long v5 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v8[0] = 2 * v3;
  v8[1] = a2;
  re::StateMachineParameterBinding::indexOf(a1 + 376, v8, a3, (uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v8);
  return v10;
}

uint64_t REStateMachineComponentGetBoundParameterTypeAtIndex(uint64_t a1, unint64_t a2)
{
  return re::StateMachineParameterBinding::type((re::StateMachineParameterBinding *)(a1 + 376), a2);
}

uint64_t REStateMachineComponentGetBoundParameterNameAtIndex(uint64_t a1, unint64_t a2)
{
  return *(void *)(re::StateMachineParameterBinding::name((re::StateMachineParameterBinding *)(a1 + 376), a2) + 8);
}

uint64_t REStateMachineComponentGetBoundParameterBindTargetAtIndex(uint64_t a1, unint64_t a2)
{
  return *(void *)(re::StateMachineParameterBinding::bindTarget((re::StateMachineParameterBinding *)(a1 + 376), a2) + 8);
}

void REStateMachineComponentSetBoundParameterBindTargetAtIndex(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 376);
  v6[0] = 0;
  v6[1] = "";
  re::StateMachineParameterBinding::setBindTarget(v5, a2, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
}

void REStateMachineComponentRemoveBoundParameterAtName(uint64_t a1, char *a2, int a3)
{
  uint64_t v3 = a1 + 376;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        int v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  v8[0] = 2 * v4;
  v8[1] = a2;
  re::StateMachineParameterBinding::indexOf(a1 + 376, v8, a3, (uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v8);
  if (v9[0]) {
    re::DynamicArray<re::StateMachineParameterBindingItem>::removeAt(v3, v10);
  }
}

uint64_t REStateMachineComponentRemoveAllBoundParameters(uint64_t a1)
{
  return re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 376);
}

void REStateMachineComponentAddBoundParameter(_anonymous_namespace_ *a1, const char *a2, char a3, const char *a4)
{
  int v7 = (void *)((char *)a1 + 376);
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  *(void *)&v9.var0 = 0;
  v9.var1 = "";
  re::StateMachineParameterBinding::add(v7, &v10, a3, &v9);
  re::StringID::destroyString((re::StringID *)&v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

re::StateParameterBool **re::StateParameterBlackboard::setStateParameterTriggerValue(re::StateParameterBlackboard *this, const re::StringID *a2, unsigned __int8 a3)
{
  __n128 result = (re::StateParameterBool **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 152, a2);
  if (result)
  {
    char v5 = *result;
    return (re::StateParameterBool **)re::StateParameterBool::setValue(v5, a3);
  }
  return result;
}

uint64_t RESceneUnderstandingServiceSetDepthFeatheringEnabled(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) != 0
    && (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) != 0
     || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1)))
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, 0);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 48))(a1, 0);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
  return v4(a1, a2);
}

uint64_t RESceneUnderstandingServiceIsDepthFeatheringEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionSupportEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t RESceneUnderstandingServiceIsGuidedFilterOcclusionSupportEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionUseSingleMTLEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionEnabled(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
      (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, 0);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 64);
  return v4(a1, a2);
}

uint64_t RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void RESceneUnderstandingServiceSetGuidedFilterOcclusionCameraFeed(uint64_t a1, void *a2, void *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __n128 a14, __n128 a15, __n128 a16, __n128 a17)
{
  id v20 = a2;
  id v21 = a3;
  id v29 = v20;
  id v22 = v20;
  id v28 = v21;
  id v23 = v21;
  (*(void (**)(uint64_t, id *, id *))(*(void *)a1 + 88))(a1, &v29, &v28);
  if (v28) {

  }
  if (v29) {
  (*(void (**)(uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96))(a1, a4, a5, a6, a7);
  }
  (*(void (**)(uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 104))(a1, a14, a15, a16, a17);
  (*(void (**)(uint64_t, double))(*(void *)a1 + 112))(a1, a8);
}

uint64_t RECreateLayeredStateGraphs(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 48, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E735828;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 24) = 0;
  return v3;
}

uint64_t RELayeredStateGraphsGetLayerCount(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *RELayeredStateGraphsAddStateGraph(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32) <= a2)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = (void *)(*(void *)(a1 + 40) + 40 * a2);
  *(void *)&v5[0] = a3 + 24;
  return re::DynamicArray<re::TransitionCondition *>::add(v3, v5);
}

uint64_t RECreateStateGraph(_anonymous_namespace_ *a1)
{
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  uint64_t v3 = re::globalAllocators(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 96, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E735870;
  *(void *)(v4 + 24) = &unk_26E6D7F50;
  re::StringID::StringID((re::StringID *)(v4 + 32), &v6);
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  re::StringID::destroyString((re::StringID *)&v6);
  return v4;
}

void *REStateGraphAddState(re *a1, const char *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 112, 8);
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  *(void *)uint64_t v5 = &unk_26E6D7F80;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(void *)(v5 + 80) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  re::StringID::StringID((re::StringID *)(v5 + 88), &v7);
  *(void *)(v5 + 104) = 0;
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.var0 = v5;
  return re::DynamicArray<re::TransitionCondition *>::add((void *)a1 + 6, &v7);
}

void *REStateGraphAddAnyState(re *a1, const char *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 112, 8);
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  *(void *)uint64_t v5 = &unk_26E6D7F80;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(void *)(v5 + 80) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  re::StringID::StringID((re::StringID *)(v5 + 88), &v7);
  *(void *)(v5 + 104) = 0;
  re::StringID::destroyString((re::StringID *)&v7);
  return re::StateGraph::addAnyState((void *)a1 + 3, (re::StateMachineState *)v5);
}

BOOL REStateGraphCreateStateTransition(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, char a8, float a9)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  *(void *)&v34[0] = 0;
  *((void *)&v34[0] + 1) = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)v34);
  re::StringID::destroyString((re::StringID *)v34);
  if (!GraphByName) {
    return 0;
  }
  unint64_t v20 = *((void *)a1 + 4);
  if (v20 <= a2)
  {
    v28[0] = 0;
    memset(v34, 0, sizeof(v34));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)id v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 468;
    __int16 v30 = 2048;
    unint64_t v31 = a2;
    __int16 v32 = 2048;
    unint64_t v33 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v21 = *((void *)a1 + 5) + 40 * a2;
  *(void *)&v34[0] = 0;
  *((void *)&v34[0] + 1) = "";
  *(void *)id v29 = 0;
  *(void *)&v29[8] = "";
  v28[0] = 0;
  v28[1] = "";
  *(void *)&v27.var0 = 0;
  v27.var1 = "";
  BOOL v25 = re::StateGraph::createStateTransition(GraphByName, v21, (re::StringID *)v34, v29, (const re::StringID *)v28, &v27, a8, a9);
  re::StringID::destroyString((re::StringID *)&v27);
  re::StringID::destroyString((re::StringID *)v28);
  re::StringID::destroyString((re::StringID *)v29);
  re::StringID::destroyString((re::StringID *)v34);
  return v25;
}

uint64_t re::SharedLayeredStateGraphs::findGraphByName(re::SharedLayeredStateGraphs *this, unint64_t a2, const re::StringID *a3)
{
  if (*((void *)this + 4) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *(void *)(v3 + 40 * a2 + 16);
  if (!v4) {
    return 0;
  }
  for (unint64_t i = *(uint64_t **)(v3 + 40 * a2 + 32); ; ++i)
  {
    uint64_t v7 = *i;
    if (re::StringID::operator==((void *)(*i + 8), a3)) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return v7;
}

uint64_t REStateGraphAddStateTransitionConditionInt(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6, char a7, int a8)
{
  uint64_t v24 = 0;
  BOOL v25 = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v24);
  if (!GraphByName) {
    return 0;
  }
  uint64_t v24 = 0;
  BOOL v25 = "";
  v23[0] = 0;
  v23[1] = "";
  *(void *)&v22.var0 = 0;
  v22.var1 = "";
  uint64_t v20 = re::StateGraph::addIntTransitionCondition(GraphByName, (const re::StringID *)&v24, v23, &v22, a7, a8);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v24);
  return v20;
}

uint64_t REStateGraphAddStateTransitionConditionFloat(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6, char a7, float a8)
{
  uint64_t v24 = 0;
  BOOL v25 = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v24);
  if (!GraphByName) {
    return 0;
  }
  uint64_t v24 = 0;
  BOOL v25 = "";
  v23[0] = 0;
  v23[1] = "";
  *(void *)&v22.var0 = 0;
  v22.var1 = "";
  uint64_t v20 = re::StateGraph::addFloatTransitionCondition(GraphByName, (const re::StringID *)&v24, v23, &v22, a7, a8);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v24);
  return v20;
}

uint64_t REStateGraphAddStateTransitionConditionBool(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6, char a7, char a8)
{
  uint64_t v24 = 0;
  BOOL v25 = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v24);
  if (!GraphByName) {
    return 0;
  }
  uint64_t v24 = 0;
  BOOL v25 = "";
  v23[0] = 0;
  v23[1] = "";
  *(void *)&v22.var0 = 0;
  v22.var1 = "";
  uint64_t v20 = re::StateGraph::addBoolTransitionCondition(GraphByName, (const re::StringID *)&v24, v23, &v22, a7, a8);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v24);
  return v20;
}

re::StateMachineState *REStateGraphAddStateTransitionConditionTrigger(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t v20 = 0;
  uint64_t v21 = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v20);
  if (!GraphByName) {
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = "";
  v19[0] = 0;
  v19[1] = "";
  *(void *)&v18.var0 = 0;
  v18.var1 = "";
  char v16 = re::StateGraph::addTriggerTransitionCondition(GraphByName, (const re::StringID *)&v20, (const re::StringID *)v19, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)&v20);
  return v16;
}

void *REStateGraphAddStateCommand(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = "";
  uint64_t StateByName = re::StateGraph::findStateByName(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  v8[0] = a3;
  return re::DynamicArray<re::TransitionCondition *>::add((void *)(StateByName + 48), v8);
}

uint64_t REStateGraphSetStateExitTime(_anonymous_namespace_ *a1, unint64_t a2, const char *a3, const char *a4, float a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = "";
  GraphByName = (re::StateGraph *)re::SharedLayeredStateGraphs::findGraphByName(a1, a2, (const re::StringID *)&v16);
  re::StringID::destroyString((re::StringID *)&v16);
  if (!GraphByName) {
    return 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = "";
  uint64_t StateByName = re::StateGraph::findStateByName(GraphByName, (const re::StringID *)&v16, &v18);
  BOOL v13 = a5 < 0.0 || StateByName == 0;
  uint64_t v14 = !v13;
  if (!v13) {
    *(float *)(StateByName + 104) = a5;
  }
  re::StringID::destroyString((re::StringID *)&v16);
  return v14;
}

void re::SharedLayeredStateGraphs::~SharedLayeredStateGraphs(re::SharedLayeredStateGraphs *this)
{
  *(void *)this = &unk_26E735828;
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((void *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E735828;
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((void *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::SharedStateGraph::~SharedStateGraph(_anonymous_namespace_::SharedStateGraph *this)
{
  *(void *)this = &unk_26E735870;
  uint64_t v2 = (char *)this + 48;
  re::StateGraph::deinit((_anonymous_namespace_::SharedStateGraph *)((char *)this + 24));
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::SharedStateGraph *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E735870;
  uint64_t v2 = (char *)this + 48;
  re::StateGraph::deinit((_anonymous_namespace_::SharedStateGraph *)((char *)this + 24));
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::SharedStateGraph *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REPhysicsSimulationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPhysicsSimulationComponentGetKinematicVsStaticFlag(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 25);
}

uint64_t REPhysicsSimulationComponentGetKinematicVsKinematicFlag(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 26);
}

uint64_t REPhysicsSimulationComponentSetKinematicFlags(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a2;
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(v5 + 26) = a3;
  *(unsigned char *)(v5 + 25) = v4;
  return re::ecs2::Component::enqueueMarkDirty(v5);
}

uint64_t REPhysicsSimulationComponentSetGravityOverride(uint64_t a1, long long *a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2);
  if (a2)
  {
    long long v4 = *a2;
    if (!*(unsigned char *)(v3 + 32)) {
      *(unsigned char *)(v3 + 32) = 1;
    }
    *(_OWORD *)(v3 + 48) = v4;
  }
  else if (*(unsigned char *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 32) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPhysicsSimulationComponentGetGravityOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(unsigned char *)(v2 + 32)) {
    return v2 + 48;
  }
  else {
    return 0;
  }
}

uint64_t REPhysicsSimulationComponentSetFixedTimeStepOverride(uint64_t a1, int *a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2);
  if (a2)
  {
    int v4 = *a2;
    if (!*(unsigned char *)(v3 + 64)) {
      *(unsigned char *)(v3 + 64) = 1;
    }
    *(_DWORD *)(v3 + 68) = v4;
  }
  else if (*(unsigned char *)(v3 + 64))
  {
    *(unsigned char *)(v3 + 64) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPhysicsSimulationComponentGetFixedTimeStepOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(unsigned char *)(v2 + 64)) {
    return v2 + 68;
  }
  else {
    return 0;
  }
}

uint64_t REPhysicsSimulationComponentGetParentTimebase(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 96);
}

uint64_t REPhysicsSimulationComponentSetParentTimebase(uint64_t a1, const void *a2)
{
  int v4 = (re::ecs2::PhysicsSimulationComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2);
  re::ecs2::PhysicsSimulationComponent::setLocallyManagedParentTimebase(v4, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPhysicsSimulationComponentSetSolverIterations(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(double *)(v4 + 72) = a3;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

double REPhysicsSimulationComponentGetSolverIterations(uint64_t a1, uint64_t a2)
{
  return *(double *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 72);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *((void *)v3[136] + 4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *REBlendShapeWeightsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition(void *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v9);
  long long v3 = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 2) = v9;
  long long v9 = v3;
  uint64_t v4 = a1[6];
  a1[6] = v10;
  uint64_t v10 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  uint64_t v5 = a1[5];
  if (v5)
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 704));
    if (v6 == 2)
    {
      uint64_t v7 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)(a1 + 4));
    }
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REBlendShapeWeightsComponentGetBlendShapeWeightsCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsCount(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::BlendShapeWeights>::resize(a1 + 56, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REBlendShapeWeightsComponentGetBlendWeightCount(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 88) + 32 * a2 + 8);
}

uint64_t REBlendShapeWeightsComponentSetBlendWeightCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v6 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(*(void *)(a1 + 88) + 32 * a2));
  if (*(void *)(a1 + 72) <= a2) {
    goto LABEL_7;
  }
  uint64_t v7 = (uint64_t *)(*(void *)(a1 + 88) + 32 * a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

float REBlendShapeWeightsComponentGetBlendWeight(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 88) + 32 * a2;
  if (*(void *)(v3 + 8) <= a3) {
    goto LABEL_5;
  }
  return *(float *)(*(void *)(v3 + 16) + 4 * a3);
}

uint64_t REBlendShapeWeightsComponentSetBlendWeight(uint64_t a1, unint64_t a2, unint64_t a3, float a4)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 88) + 32 * a2;
  if (*(void *)(v4 + 8) <= a3) {
    goto LABEL_7;
  }
  *(float *)(*(void *)(v4 + 16) + 4 * a3) = a4;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REBlendShapeWeightsComponentGetBlendWeights(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(result + 88) + 32 * a2;
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v7 = 4 * v4 - 4;
    do
    {
      *(_DWORD *)(a3 + 4 * v5) = *(_DWORD *)(v6 + 4 * v5);
      if (v5 + 1 >= v4) {
        break;
      }
      uint64_t v8 = v7;
      v7 -= 4;
      ++v5;
    }
    while (v8);
  }
  return result;
}

uint64_t REBlendShapeWeightsComponentGetBlendFactorAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REBlendShapeWeightsComponentGetBlendFactorCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REBlendShapeWeightsComponentSetBlendFactorCount(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::BlendShapeWeights>::resize(a1 + 56, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REBlendFactorComponentGetBlendFactorAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REBlendFactorComponentGetBlendFactorCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REBlendFactorComponentSetBlendFactorCount(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::BlendShapeWeights>::resize(a1 + 56, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REVertexCacheDefinitionCreateVertexCacheAsset(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v2 = (id)(*(void *)(a1 + 96) * *(void *)(a1 + 104) * *(void *)(a1 + 88));
  if (*(unsigned char *)(a1 + 152))
  {
    id v3 = *(id *)(a1 + 160);
  }
  else
  {
    unint64_t v4 = *(void **)(a1 + 136);
    if (v4) {
      id v3 = objc_msgSend(v4, sel_length);
    }
    else {
      id v3 = 0;
    }
  }
  if (v2 == v3)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v5 + 704));
      if (v6 == 2)
      {
        uint64_t v7 = re::AssetHandle::asset<re::VertexCacheAsset>((re::VertexCacheAsset *)(a1 + 168));
        if (re::MeshIdentifierAsset::operator==((unsigned __int8 *)(a1 + 32), (unsigned __int8 *)(v7 + 8))
          && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(v7 + 48)
          && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(v7 + 49)
          && *(float *)(a1 + 80) == *(float *)(v7 + 56)
          && *(void *)(a1 + 88) == *(void *)(v7 + 64)
          && *(void *)(a1 + 96) == *(void *)(v7 + 72)
          && *(void *)(a1 + 104) == *(void *)(v7 + 80))
        {
          uint64_t v8 = *(void *)(v7 + 96);
          if (*(void *)(a1 + 120) == v8)
          {
            if (v8)
            {
              long long v9 = *(float32x4_t **)(a1 + 128);
              uint64_t v10 = &v9[2 * v8];
              unint64_t v11 = *(float32x4_t **)(v7 + 104);
              while (1)
              {
                uint32x4_t v12 = (uint32x4_t)vceqq_f32(*v9, *v11);
                v12.i32[3] = v12.i32[2];
                if ((vminvq_u32(v12) & 0x80000000) == 0) {
                  break;
                }
                uint32x4_t v13 = (uint32x4_t)vceqq_f32(v9[1], v11[1]);
                v13.i32[3] = v13.i32[2];
                if ((vminvq_u32(v13) & 0x80000000) == 0) {
                  break;
                }
                v9 += 2;
                v11 += 2;
                if (v9 == v10) {
                  goto LABEL_22;
                }
              }
            }
            else
            {
LABEL_22:
              if (*(void *)(a1 + 136) == *(void *)(v7 + 112))
              {
LABEL_26:
                re::AssetHandle::AssetHandle((re::AssetHandle *)v28, (const re::AssetHandle *)(a1 + 168));
                uint64_t v24 = *(void *)v28;
                if (*(void *)v28) {
                  id v25 = (id)(*(void *)v28 + 8);
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
                return v24;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = (re *)re::ServiceLocator::service<re::AssetService>(*(void *)(a1 + 144));
    uint64_t v15 = re::globalAllocators(v14);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 120, 8);
    *(void *)uint64_t v16 = &unk_26E6D8A48;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(a1 + 32);
    re::StringID::StringID((re::StringID *)(v16 + 16), (const StringID *)(a1 + 40));
    re::StringID::StringID((re::StringID *)(v16 + 32), (const StringID *)(a1 + 56));
    long long v17 = *(_OWORD *)(a1 + 72);
    long long v18 = *(_OWORD *)(a1 + 88);
    *(void *)(v16 + 80) = *(void *)(a1 + 104);
    *(_OWORD *)(v16 + 48) = v17;
    *(_OWORD *)(v16 + 64) = v18;
    *(void *)(v16 + 88) = 0;
    *(void *)(v16 + 96) = 0;
    *(void *)(v16 + 104) = 0;
    uint64_t v19 = *(void *)(a1 + 112);
    if (v19)
    {
      re::FixedArray<re::AABB>::init<>(v16 + 88, v19, *(void *)(a1 + 120));
      re::FixedArray<re::AABB>::copy((void *)(v16 + 88), *(void *)(a1 + 120), *(const void **)(a1 + 128));
    }
    uint64_t v20 = (re::VertexCacheAsset *)*(id *)(a1 + 136);
    *(void *)(v16 + 112) = v20;
    uint64_t v21 = re::VertexCacheAsset::assetType(v20);
    (*(void (**)(unsigned char *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)v14
                                                                                                  + 416))(v28, v14, v16, v21, 0, 0, 0);
    long long v22 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v28;
    *(_OWORD *)id v28 = v22;
    uint64_t v23 = *(void *)(a1 + 184);
    *(void *)(a1 + 184) = *(void *)&v28[16];
    *(void *)&v28[16] = v23;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
    goto LABEL_26;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v26 = (id)CoreRELog::log;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v28 = 134218240;
    *(void *)&void v28[4] = v2;
    *(_WORD *)&v28[12] = 2048;
    *(void *)&v28[14] = v3;
    _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Vertex Cache Definition does not have expected vertex data size: %zu != %zu", v28, 0x16u);
  }

  return 0;
}

double REVertexCacheDefinitionCreate(re *a1)
{
  id v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 192, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E7358B8;
  *(void *)(v3 + 24) = &unk_26E6D8A48;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = "";
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = "";
  *(_WORD *)(v3 + 72) = 0;
  *(void *)(v3 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = a1;
  *(unsigned char *)(v3 + 152) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  return result;
}

uint64_t REVertexCacheDefinitionCreateFromAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v20);
  if (!v21 || (unsigned int v4 = atomic_load((unsigned int *)(v21 + 704)), v4 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_WORD *)uint64_t v19 = 0;
    long long v17 = "Cannot create vertex cache definition from unloaded asset.";
    goto LABEL_20;
  }
  uint64_t v5 = *(uint64_t **)(v21 + 264);
  unsigned int v6 = re::VertexCacheAsset::assetType(v3);
  if (v5 != v6)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_WORD *)uint64_t v19 = 0;
    long long v17 = "Can only create vertex cache definition from vertex cache asset.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v17, v19, 2u);
LABEL_17:

    uint64_t v8 = 0;
    goto LABEL_18;
  }
  uint64_t v7 = re::globalAllocators((re *)v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 192, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v8, 0);
  *(void *)uint64_t v8 = &unk_26E7358B8;
  *(void *)(v8 + 24) = &unk_26E6D8A48;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = "";
  *(void *)(v8 + 56) = 0;
  *(_WORD *)(v8 + 72) = 0;
  *(void *)(v8 + 64) = "";
  *(void *)(v8 + 76) = 1023969417;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 144) = a1;
  *(unsigned char *)(v8 + 152) = 0;
  long long v9 = re::AssetHandle::AssetHandle((re::AssetHandle *)(v8 + 168), (const re::AssetHandle *)&v20);
  uint64_t v10 = *(void *)(v8 + 176);
  if (v10)
  {
    unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
    if (v11 == 2)
    {
      uint64_t v12 = re::AssetHandle::asset<re::VertexCacheAsset>(v9);
      *(unsigned char *)(v8 + 32) = *(unsigned char *)(v12 + 8);
      re::StringID::operator=((unint64_t *)(v8 + 40), (uint64_t *)(v12 + 16));
      re::StringID::operator=((unint64_t *)(v8 + 56), (uint64_t *)(v12 + 32));
      long long v13 = *(_OWORD *)(v12 + 48);
      long long v14 = *(_OWORD *)(v12 + 64);
      *(void *)(v8 + 104) = *(void *)(v12 + 80);
      *(_OWORD *)(v8 + 72) = v13;
      *(_OWORD *)(v8 + 88) = v14;
      if (v8 + 24 != v12)
      {
        uint64_t v15 = *(void *)(v12 + 88);
        if (*(void *)(v8 + 112))
        {
          if (!v15) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        if (v15)
        {
          re::FixedArray<re::AABB>::init<>(v8 + 112, v15, *(void *)(v12 + 96));
LABEL_23:
          re::FixedArray<re::AABB>::copy((void *)(v8 + 112), *(void *)(v12 + 96), *(const void **)(v12 + 104));
        }
      }
LABEL_24:
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v8 + 136), (void **)(v12 + 112));
    }
  }
LABEL_18:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
  return v8;
}

uint64_t REVertexCacheDefinitionGetMeshIdentifierType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t REVertexCacheDefinitionSetMeshIdentifierType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

uint64_t REVertexCacheDefinitionGetMeshName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void REVertexCacheDefinitionSetMeshName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  long long v9 = "";
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  uint64_t v8 = 0;
  long long v9 = "";
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v7 = *((void *)a1 + 6);
  *((void *)a1 + 5) = v4;
  *((void *)a1 + 6) = v5;
  v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v10[1] = v7;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REVertexCacheDefinitionGetMeshPartName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void REVertexCacheDefinitionSetMeshPartName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  long long v9 = "";
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  uint64_t v8 = 0;
  long long v9 = "";
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 7) = v4;
  *((void *)a1 + 8) = v5;
  v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v10[1] = v7;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REVertexCacheDefinitionIsInterpolatedByDefault(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t REVertexCacheDefinitionSetInterpolatedByDefault(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t REVertexCacheDefinitionGetVertexFormat(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 73);
}

uint64_t REVertexCacheDefinitionSetVertexFormat(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (a2 <= 0x19u)
  {
    if (a2 != 8 && a2 != 11) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  if (a2 == 30)
  {
    uint64_t v6 = 12;
    goto LABEL_13;
  }
  if (a2 == 26)
  {
LABEL_11:
    uint64_t v6 = ((unsigned __int16)re::sizeFromVertexFormat(a2, a2) + 3) & 0x1FC;
LABEL_13:
    *(unsigned char *)(a1 + 73) = v2;
    *(void *)(a1 + 104) = v6;
    return 1;
  }
LABEL_4:
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Cannot set vertex cache definition with unsupported vertex format.", v7, 2u);
  }

  return 0;
}

float REVertexCacheDefinitionGetFrameInterval(uint64_t a1)
{
  return *(float *)(a1 + 76);
}

uint64_t REVertexCacheDefinitionSetFrameInterval(uint64_t result, float a2)
{
  *(float *)(result + 76) = a2;
  return result;
}

float REVertexCacheDefinitionGetStartTime(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

uint64_t REVertexCacheDefinitionSetStartTime(uint64_t result, float a2)
{
  *(float *)(result + 80) = a2;
  return result;
}

uint64_t REVertexCacheDefinitionGetFrameCount(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t REVertexCacheDefinitionSetFrameCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t REVertexCacheDefinitionGetVertexCount(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t REVertexCacheDefinitionSetVertexCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

id REVertexCacheDefinitionGetVertexDataSize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152)) {
    return *(id *)(a1 + 160);
  }
  id result = *(id *)(a1 + 136);
  if (result) {
    return objc_msgSend(result, sel_length);
  }
  return result;
}

id REVertexCacheDefinitionGetVertexData(uint64_t a1)
{
  id result = *(id *)(a1 + 136);
  if (result) {
    return objc_msgSend(result, sel_contents);
  }
  return result;
}

void REVertexCacheDefinitionSetVertexData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(*(id *)(re::ServiceLocator::service<re::RenderManager>(*(void *)(a1 + 144)) + 184), sel_newBufferWithBytes_length_options_, a2, a3, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 136), &v4);
  if (v4) {
}
  }

uint64_t re::AssetHandle::asset<re::VertexCacheAsset>(re::VertexCacheAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v2 = re::VertexCacheAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    id v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      uint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void *re::FixedArray<re::AABB>::copy(void *result, uint64_t a2, const void *a3)
{
  if (result[1] == a2)
  {
    if (a2)
    {
      uint64_t v3 = (void *)result[2];
      return memmove(v3, a3, 32 * a2);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    id result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void REVertexCacheDefinition::~REVertexCacheDefinition(REVertexCacheDefinition *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((REVertexCacheDefinition *)((char *)this + 168));
  re::VertexCacheAsset::~VertexCacheAsset((REVertexCacheDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REMeshDeformationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REMeshDeformationComponentGetMeshDeformationDefinition(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REMeshDeformationComponentSetMeshDeformationDefinition(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshDeformationComponentSetCustomDeformationModel(uint64_t a1, uint64_t a2, char *a3, char a4, const char *a5, const char *a6, const void *a7, size_t a8, uint64_t a9, long long a10)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 && (*(unsigned char *)(v10 + 288) & 0x80) != 0)
  {
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    char v13 = a4;
    long long v14 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    char v13 = a4;
    long long v14 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  long long v17 = (void *)REEntityGetOrAddComponentByClass(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  return RECustomDeformerComponentSetCustomDeformationModel(v17, v11, v12, v13, v14, v15, v16, a8, a9, a10);
}

uint64_t REMeshDeformationComponentSetCustomDeformationInput(uint64_t a1, uint64_t a2, char *a3, char a4, const char *a5, const char *a6, const void *a7, size_t a8, uint64_t a9, long long a10)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 && (*(unsigned char *)(v10 + 288) & 0x80) != 0)
  {
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    char v13 = a4;
    long long v14 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    char v13 = a4;
    long long v14 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  long long v17 = (void *)REEntityGetOrAddComponentByClass(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  return RECustomDeformerComponentSetCustomDeformationInput(v17, v11, v12, v13, v14, v15, v16, a8, a9, a10);
}

void *REClippingPrimitiveComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REClippingPrimitiveComponentClipToBox(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 32) = a2;
  *(__n128 *)(this + 48) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void REClippingPrimitiveComponentClipToSphere()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "REClippingPrimitiveComponentClipToSphere is deprecated. Sphere clipping shapes are no longer supported.                Use REClippingPrimitiveComponentClipToBox.", v1, 2u);
  }
}

void REClippingPrimitiveComponentClipToCylinder()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "REClippingPrimitiveComponentClipToCylinder is deprecated. Cylinder clipping shapes are no longer supported.                Use REClippingPrimitiveComponentClipToBox.", v1, 2u);
  }
}

__n128 REClippingPrimitiveComponentGetLocalBounds(__n128 *a1)
{
  return a1[2];
}

uint64_t REClippingPrimitiveComponentGetPrimitiveShape()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "REClippingPrimitiveComponentGetPrimitiveShape is deprecated. Non-box clipping shapes are no longer supported.", v2, 2u);
  }

  return 0;
}

uint64_t REClippingPrimitiveComponentSetFeatherIntervalPercentage(uint64_t this, int32x2_t a2)
{
  float32x4_t v2 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v2.i32[3] = 0;
  float32x4_t v3 = vmaxnmq_f32(v2, (float32x4_t)0);
  v3.i32[3] = 0;
  float32x4_t v4 = vminnmq_f32(v3, (float32x4_t)xmmword_2343679C0);
  *(float32x4_t *)(this + 64) = v4;
  *(float32x4_t *)(this + 80) = v4;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REClippingPrimitiveComponentGetFeatherIntervalPercentage(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t REClippingPrimitiveComponentSetFeatherIntervalPercentagePerAxis(uint64_t this, float32x4_t a2)
{
  a2.i32[3] = 0;
  float32x4_t v2 = vmaxnmq_f32(a2, (float32x4_t)0);
  v2.i32[3] = 0;
  float32x4_t v3 = vminnmq_f32(v2, (float32x4_t)xmmword_2343679C0);
  *(float32x4_t *)(this + 64) = v3;
  *(float32x4_t *)(this + 80) = v3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REClippingPrimitiveComponentGetFeatherIntervalPercentagePerAxis(__n128 *a1)
{
  return a1[4];
}

uint64_t REClippingPrimitiveComponentSetFeatherIntervalFractionPerEdge(uint64_t this, float32x4_t a2, float32x4_t a3)
{
  a2.i32[3] = 0;
  float32x4_t v3 = vmaxnmq_f32(a2, (float32x4_t)0);
  v3.i32[3] = 0;
  a3.i32[3] = 0;
  float32x4_t v4 = vmaxnmq_f32(a3, (float32x4_t)0);
  v4.i32[3] = 0;
  *(float32x4_t *)(this + 64) = vminnmq_f32(v3, (float32x4_t)xmmword_2343679C0);
  *(float32x4_t *)(this + 80) = vminnmq_f32(v4, (float32x4_t)xmmword_2343679C0);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REClippingPrimitiveComponentSetFeatherUseCubicFalloff(uint64_t this, unsigned int a2)
{
  *(float *)(this + 96) = (float)a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL REClippingPrimitiveComponentGetFeatherUseCubicFalloff(uint64_t a1)
{
  return *(float *)(a1 + 96) != 0.0;
}

__n128 REClippingPrimitiveComponentGetFeatherIntervalFractionPerPositiveEdge(__n128 *a1)
{
  return a1[4];
}

__n128 REClippingPrimitiveComponentGetFeatherIntervalFractionPerNegativeEdge(__n128 *a1)
{
  return a1[5];
}

uint64_t REClippingPrimitiveComponentSetShouldClipChildren(uint64_t this, char a2)
{
  *(unsigned char *)(this + 100) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REClippingPrimitiveComponentGetShouldClipChildren(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t REClippingPrimitiveComponentSetShouldClipSelf(uint64_t this, char a2)
{
  *(unsigned char *)(this + 101) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REClippingPrimitiveComponentGetShouldClipSelf(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101);
}

void REClippingPrimitiveComponentSetPositiveSpace()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "REClippingPrimitiveComponentSetPositiveSpace is deprecated. Negative-space clipping is no longer supported.", v1, 2u);
  }
}

uint64_t REClippingPrimitiveComponentGetIsPositiveSpace()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float32x4_t v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "REClippingPrimitiveComponentGetIsPositiveSpace is deprecated. Negative-space clipping is no longer supported.", v2, 2u);
  }

  return 1;
}

void *REAudioDebugComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

re::ecs2::Entity *RESceneAddAudioDebugComponent(re::ecs2::ComponentHelper *a1)
{
  id result = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  float32x4_t v2 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
  uint64_t v3 = *((unsigned __int16 *)result + 41);
  if (!*((_WORD *)result + 41)) {
    goto LABEL_7;
  }
  float32x4_t v4 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
                       + 16);
  uint64_t v5 = (int16x8_t *)*((void *)result + 11);
  int16x8_t v6 = vld1q_dup_s16(v4);
  int v7 = 1;
  while (1)
  {
    uint16x8_t v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_23436BBD0);
    v8.i16[0] = vmaxvq_u16(v8);
    if (v8.i32[0]) {
      break;
    }
    v7 -= 8;
    ++v5;
    if (!--v3) {
      goto LABEL_7;
    }
  }
  if (v8.u16[0] - v7 >= *((unsigned __int16 *)result + 40))
  {
LABEL_7:
    int v9 = (re::ecs2::Entity *)((char *)result + 32);
    return (re::ecs2::Entity *)re::ecs2::EntityComponentCollection::add(v9, v2);
  }
  return result;
}

void RESceneRemoveAudioDebugComponent(re::ecs2::ComponentHelper *a1)
{
  unsigned int v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, 0);
  if (v1)
  {
    float32x4_t v2 = (re::ecs2::Entity *)((char *)v1 + 32);
    uint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v3);
  }
}

uint64_t RESceneSetAudioDebugDrawLevel(re::ecs2::ComponentHelper *a1, char a2)
{
  uint64_t v3 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t RESceneGetAudioDebugDrawLevel(re::ecs2::ComponentHelper *a1)
{
  unsigned int v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)+ 25);
}

uint64_t REAudioDebugComponentGetDrawLevel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REAudioDebugComponentSetDrawLevel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t RESceneSetAudioDebugDrawOptions(re::ecs2::ComponentHelper *a1, int a2)
{
  uint64_t v3 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t RESceneGetAudioDebugDrawOptions(re::ecs2::ComponentHelper *a1)
{
  unsigned int v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  return *(unsigned int *)(re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)+ 32);
}

uint64_t REAudioDebugComponentGetDrawOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t REAudioDebugComponentSetDrawOptions(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t REAudioDebugComponentGetDrawMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t REAudioDebugComponentSetDrawMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

void *REEnvironmentLightingConfigurationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight(uint64_t this, float a2)
{
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

FILE *RECompressionQuery(const char *a1, int *a2, int *a3, int *a4, off_t *a5, off_t *a6)
{
  __ptr[1] = *MEMORY[0x263EF8340];
  if (stat(a1, &v25) < 0) {
    return 0;
  }
  uint64_t result = fopen(a1, "r");
  if (result)
  {
    char v13 = result;
    __ptr[0] = 0;
    size_t v14 = fread(__ptr, 1uLL, 8uLL, result);
    fclose(v13);
    if (v14 < 8) {
      return 0;
    }
    if (LOWORD(__ptr[0]) == 30306 && BYTE2(__ptr[0]) == 120)
    {
      int v19 = 1;
      int v18 = 4;
    }
    else if (LOWORD(__ptr[0]) == 30306 && BYTE2(__ptr[0]) == 52)
    {
      int v18 = 1;
      int v19 = 1;
    }
    else
    {
      if (LOBYTE(__ptr[0]) != 253 || *(_DWORD *)((char *)__ptr + 1) != 1515747895)
      {
        if (LOWORD(__ptr[0]) != 25200 || BYTE2(__ptr[0]) != 122) {
          goto LABEL_19;
        }
        switch(BYTE3(__ptr[0]))
        {
          case '4':
            int v18 = 1;
            break;
          case 'e':
            int v18 = 4;
            break;
          case 'x':
            int v18 = 3;
            break;
          default:
LABEL_19:
            int v18 = 0;
            int v19 = 0;
            goto LABEL_27;
        }
        int v22 = 3;
        int v19 = 1;
        off_t st_size = v25.st_size;
        if (!a2) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      int v19 = 1;
      int v18 = 3;
    }
LABEL_27:
    off_t st_size = v25.st_size;
    if (v25.st_size < 0x100000uLL) {
      int v21 = 1;
    }
    else {
      int v21 = v19;
    }
    if (v21) {
      int v22 = 2;
    }
    else {
      int v22 = 3;
    }
    if (!a2) {
      goto LABEL_35;
    }
LABEL_34:
    *a2 = v19;
LABEL_35:
    if (a3) {
      *a3 = v18;
    }
    if (a4) {
      *a4 = v22;
    }
    if (a5)
    {
      if (v19) {
        off_t v23 = 0;
      }
      else {
        off_t v23 = st_size;
      }
      *a5 = v23;
    }
    if (a6)
    {
      if (v19) {
        off_t v24 = st_size;
      }
      else {
        off_t v24 = 0;
      }
      *a6 = v24;
    }
    return (FILE *)1;
  }
  return result;
}

uint64_t RECompressionCreate(_anonymous_namespace_ *a1)
{
  *(unsigned char *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 40) = 0;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 452) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(unsigned char *)(v1 + 528) = 0;
  *(void *)(v1 + 488) = 0x800000;
  *(void *)(v1 + 504) = 0x800000;
  return v1;
}

uint64_t RECompressionInit(Compression *this, int a2, int a3, int a4, re::FileStreamReader *a5, re::FileStreamWriter *a6)
{
  if (a2)
  {
    if (a2 != 1) {
      return 0;
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 1;
  }
  *((_DWORD *)this + 118) = v7;
  if ((a3 - 1) <= 3)
  {
    *((_DWORD *)this + 117) = dword_23442B2E0[a3 - 1];
    *((_DWORD *)this + 119) = a4;
    uint64_t result = Compression::open(this, a5, a6);
    if (!result) {
      return result;
    }
    int v9 = *((_DWORD *)this + 119);
    if (v9 == 1 || v9 == 3)
    {
      Compression::reallocBuffer(this, *((void *)this + 21), (unint64_t *)this + 61, (unsigned __int8 **)this + 60);
      Compression::reallocBuffer(this, 0x800000uLL, (unint64_t *)this + 63, (unsigned __int8 **)this + 62);
      if (*((_DWORD *)this + 119) == 1)
      {
        compression_algorithm v11 = *((_DWORD *)this + 117);
        if (*((_DWORD *)this + 118) == 1) {
          size_t v12 = compression_decode_scratch_buffer_size(v11);
        }
        else {
          size_t v12 = compression_encode_scratch_buffer_size(v11);
        }
        Compression::reallocBuffer(this, v12, (unint64_t *)this + 65, (unsigned __int8 **)this + 64);
      }
    }
    else if (v9 == 2)
    {
      compression_status v10 = compression_stream_init((compression_stream *)((char *)this + 424), *((compression_stream_operation *)this + 118), *((compression_algorithm *)this + 117));
      *((_DWORD *)this + 116) = v10;
      if (v10 == COMPRESSION_STATUS_OK)
      {
        uint64_t result = 1;
        *((unsigned char *)this + 528) = 1;
        return result;
      }
      Compression::close(this);
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t Compression::open(Compression *this, re::FileStreamReader *a2, re::FileStreamWriter *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 119) <= 2u)
  {
    re::FileStreamReader::open(a2, (uint64_t)v36);
    if (v36[0])
    {
      v33.__r_.__value_.__s.__data_[0] = 1;
      v33.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_26E714440;
      v33.__r_.__value_.__r.__words[2] = v38;
      char v35 = v40;
      uint64_t v34 = v39;
      std::string::size_type v38 = 0;
      char v40 = 0;
      re::Optional<re::FileStreamReader>::operator=((uint64_t)this, (unsigned __int8 *)&v33);
      if (v33.__r_.__value_.__s.__data_[0] && v33.__r_.__value_.__r.__words[2] && v35) {
        fclose((FILE *)v33.__r_.__value_.__r.__words[2]);
      }
      re::FileStreamWriter::open(a3, (uint64_t)&v33);
      if (v33.__r_.__value_.__s.__data_[0])
      {
        v43.__r_.__value_.__s.__data_[0] = 1;
        v43.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_26E715030;
        v43.__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
        char v44 = v34;
        v33.__r_.__value_.__r.__words[2] = 0;
        LOBYTE(v34) = 0;
        re::Optional<re::FileStreamWriter>::operator=((uint64_t)this + 40, (unsigned __int8 *)&v43);
        if (v43.__r_.__value_.__s.__data_[0] && v43.__r_.__value_.__r.__words[2] && v44) {
          fclose((FILE *)v43.__r_.__value_.__r.__words[2]);
        }
        if ((stat((const char *)a2, (stat *)((char *)this + 72)) & 0x80000000) == 0
          && (stat((const char *)a3, (stat *)((char *)this + 216)) & 0x80000000) == 0)
        {
          re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)&v33);
LABEL_62:
          re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v36);
          return 1;
        }
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        StringID v27 = (id)CoreRELog::log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          re::formattedErrorMessage<re::DetailedError>((uint64_t)&v33.__r_.__value_.__l.__size_, (re::DynamicString *)&v43);
          uint64_t v29 = (v43.__r_.__value_.__s.__data_[8] & 1) != 0
              ? (std::string::size_type *)v43.__r_.__value_.__r.__words[2]
              : (std::string::size_type *)((char *)&v43.__r_.__value_.__r.__words[1] + 1);
          LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
          _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v41, 0xCu);
          if (v43.__r_.__value_.__r.__words[0])
          {
            if (v43.__r_.__value_.__s.__data_[8]) {
              (*(void (**)(void))(*(void *)v43.__r_.__value_.__l.__data_ + 40))();
            }
          }
        }
      }
      Compression::close(this);
      re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)&v33);
      goto LABEL_78;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    compression_algorithm v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_77:

LABEL_78:
      re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v36);
      return 0;
    }
    re::formattedErrorMessage<re::DetailedError>((uint64_t)&v37, (re::DynamicString *)&v33);
    if (v33.__r_.__value_.__s.__data_[8]) {
      size_t v12 = (std::string::value_type *)v33.__r_.__value_.__r.__words[2];
    }
    else {
      size_t v12 = &v33.__r_.__value_.__s.__data_[9];
    }
    LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
LABEL_97:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v43, 0xCu);
    if (v33.__r_.__value_.__r.__words[0] && (v33.__r_.__value_.__s.__data_[8] & 1) != 0) {
      (*(void (**)(void))(*(void *)v33.__r_.__value_.__l.__data_ + 40))();
    }
    goto LABEL_77;
  }
  if (!*((_DWORD *)this + 118))
  {
    re::FileStreamReader::open(a2, (uint64_t)v36);
    if (v36[0])
    {
      if ((stat((const char *)a2, (stat *)((char *)this + 72)) & 0x80000000) == 0)
      {
        v33.__r_.__value_.__s.__data_[0] = 1;
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_26E714440;
        v33.__r_.__value_.__r.__words[2] = v38;
        char v35 = v40;
        uint64_t v34 = v39;
        std::string::size_type v38 = 0;
        char v40 = 0;
        re::Optional<re::FileStreamReader>::operator=((uint64_t)this, (unsigned __int8 *)&v33);
        if (v33.__r_.__value_.__s.__data_[0] && v33.__r_.__value_.__r.__words[2] && v35) {
          fclose((FILE *)v33.__r_.__value_.__r.__words[2]);
        }
        unint64_t v13 = *((void *)this + 21) >> 20;
        if (v13 >= 0xB) {
          unint64_t v13 = 11;
        }
        unint64_t v14 = v13 + 1;
        std::to_string(&v41, 0x100000uLL);
        uint64_t v15 = std::string::insert(&v41, 0, "w,b=");
        std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        long long v17 = std::string::append(&v43, "b,a=lzfse,t=");
        std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v32, v14);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v19 = &v32;
        }
        else {
          int v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v32.__r_.__value_.__l.__size_;
        }
        int v21 = std::string::append(&v33, (const std::string::value_type *)v19, size);
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
        v42[0] = v21->__r_.__value_.__l.__size_;
        *(void *)((char *)v42 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
        char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)this + 423) < 0) {
          operator delete(*((void **)this + 50));
        }
        uint64_t v24 = v42[0];
        *((void *)this + 50) = v22;
        *((void *)this + 51) = v24;
        *(void *)((char *)this + 415) = *(void *)((char *)v42 + 7);
        *((unsigned char *)this + 423) = v23;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        uint64_t v25 = ParallelCompressionFileOpen();
        *((void *)this + 46) = v25;
        if (v25 && (stat((const char *)a3, (stat *)((char *)this + 216)) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        Compression::close(this);
      }
      goto LABEL_78;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    compression_algorithm v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    re::formattedErrorMessage<re::DetailedError>((uint64_t)&v37, (re::DynamicString *)&v33);
    if (v33.__r_.__value_.__s.__data_[8]) {
      unint64_t v31 = (std::string::value_type *)v33.__r_.__value_.__r.__words[2];
    }
    else {
      unint64_t v31 = &v33.__r_.__value_.__s.__data_[9];
    }
    LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    goto LABEL_97;
  }
  re::FileStreamWriter::open(a3, (uint64_t)v36);
  if (v36[0])
  {
    if ((stat((const char *)a3, (stat *)((char *)this + 216)) & 0x80000000) == 0)
    {
      v33.__r_.__value_.__s.__data_[0] = 1;
      v33.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_26E715030;
      v33.__r_.__value_.__r.__words[2] = v38;
      LOBYTE(v34) = v39;
      std::string::size_type v38 = 0;
      LOBYTE(v39) = 0;
      re::Optional<re::FileStreamWriter>::operator=((uint64_t)this + 40, (unsigned __int8 *)&v33);
      if (v33.__r_.__value_.__s.__data_[0] && v33.__r_.__value_.__r.__words[2] && (_BYTE)v34) {
        fclose((FILE *)v33.__r_.__value_.__r.__words[2]);
      }
      std::to_string(&v33, 2uLL);
      int16x8_t v6 = std::string::insert(&v33, 0, "r,c=");
      std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = v6->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
      char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 399) < 0) {
        operator delete(*((void **)this + 47));
      }
      std::string::size_type v9 = v43.__r_.__value_.__r.__words[0];
      *((void *)this + 47) = v7;
      *((void *)this + 48) = v9;
      *(void *)((char *)this + 391) = *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7);
      *((unsigned char *)this + 399) = v8;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = ParallelCompressionFileOpen();
      *((void *)this + 45) = v10;
      if (v10)
      {
        if ((stat((const char *)a2, (stat *)((char *)this + 72)) & 0x80000000) == 0)
        {
          re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v36);
          return 1;
        }
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v28 = (id)CoreRELog::log;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      re::formattedErrorMessage<re::DetailedError>((uint64_t)&v37, (re::DynamicString *)&v33);
      __int16 v30 = (v33.__r_.__value_.__s.__data_[8] & 1) != 0
          ? (std::string::size_type *)v33.__r_.__value_.__r.__words[2]
          : (std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 1);
      LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v43, 0xCu);
      if (v33.__r_.__value_.__r.__words[0])
      {
        if (v33.__r_.__value_.__s.__data_[8]) {
          (*(void (**)(void))(*(void *)v33.__r_.__value_.__l.__data_ + 40))();
        }
      }
    }
  }
  Compression::close(this);
  re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v36);
  return 0;
}

uint64_t Compression::close(Compression *this)
{
  if (*((_DWORD *)this + 119) > 2u)
  {
    if (*((_DWORD *)this + 118))
    {
      v3[0] = 0;
      re::Optional<re::FileStreamWriter>::operator=((uint64_t)this + 40, v3);
      if (v3[0] && v4 && v5) {
        fclose(v4);
      }
      ParallelCompressionFileClose();
      *((void *)this + 45) = 0;
    }
    else
    {
      v3[0] = 0;
      re::Optional<re::FileStreamReader>::operator=((uint64_t)this, v3);
      if (v3[0] && v4 && v6) {
        fclose(v4);
      }
      ParallelCompressionFileClose();
      *((void *)this + 46) = 0;
    }
  }
  else
  {
    v3[0] = 0;
    re::Optional<re::FileStreamReader>::operator=((uint64_t)this, v3);
    if (v3[0] && v4 && v6) {
      fclose(v4);
    }
    v3[0] = 0;
    re::Optional<re::FileStreamWriter>::operator=((uint64_t)this + 40, v3);
    if (v3[0] && v4 && v5) {
      fclose(v4);
    }
  }
  return 1;
}

uint64_t Compression::reallocBuffer(Compression *this, unint64_t a2, unint64_t *a3, unsigned __int8 **a4)
{
  if (a3) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = !v4;
  if (!v4 && *a3 < a2)
  {
    if (*a4)
    {
    }
    *a3 = a2;
  }
  return v5;
}

uint64_t RECompressionDeinit(Compression *this)
{
  if (*((_DWORD *)this + 119) == 2) {
    compression_stream_destroy((compression_stream *)((char *)this + 424));
  }
  return Compression::close(this);
}

uint64_t RECompressionDestroy(_anonymous_namespace_ *a1)
{
  if (*((void *)a1 + 60))
  {
    *((void *)a1 + 60) = 0;
  }
  if (*((void *)a1 + 62))
  {
    *((void *)a1 + 62) = 0;
  }
  if (*((void *)a1 + 64))
  {
    *((void *)a1 + 64) = 0;
    *((void *)a1 + 65) = 0;
  }
  Compression::~Compression((void **)a1);
                                                                    + 40);
}

size_t RECompressionProcess(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  switch(*(_DWORD *)(a1 + 476))
  {
    case 0:
      BOOL v4 = *(void **)(a1 + 480);
      size_t v5 = *(void *)(a1 + 168);
      if (fread(v4, 1uLL, v5, *(FILE **)(a1 + 16)) != v5) {
        goto LABEL_42;
      }
      BOOL v6 = v5 == fwrite(v4, 1uLL, v5, *(FILE **)(a1 + 56));
      goto LABEL_47;
    case 1:
      size_t v23 = *(void *)(a1 + 168);
      if (fread(*(void **)(a1 + 480), 1uLL, v23, *(FILE **)(a1 + 16)) != v23) {
        goto LABEL_42;
      }
      size_t v24 = *(void *)(a1 + 504);
      if (*(_DWORD *)(a1 + 472) == 1)
      {
        size_t v17 = compression_decode_buffer(*(uint8_t **)(a1 + 496), *(void *)(a1 + 504), *(const uint8_t **)(a1 + 480), v23, *(void **)(a1 + 512), (compression_algorithm)*(_DWORD *)(a1 + 468));
        if (v17 < v24) {
          goto LABEL_45;
        }
        do
        {
          Compression::reallocBuffer((Compression *)a1, v24 + (v24 >> 2), (unint64_t *)(a1 + 504), (unsigned __int8 **)(a1 + 496));
          size_t v24 = *(void *)(a1 + 504);
          size_t v25 = compression_decode_buffer(*(uint8_t **)(a1 + 496), v24, *(const uint8_t **)(a1 + 480), v23, *(void **)(a1 + 512), (compression_algorithm)*(_DWORD *)(a1 + 468));
        }
        while (v25 >= v24);
      }
      else
      {
        size_t v25 = compression_encode_buffer(*(uint8_t **)(a1 + 496), *(void *)(a1 + 504), *(const uint8_t **)(a1 + 480), v23, *(void **)(a1 + 512), (compression_algorithm)*(_DWORD *)(a1 + 468));
      }
      size_t v17 = v25;
LABEL_45:
      if (!v17) {
        goto LABEL_50;
      }
      BOOL v6 = v17 == fwrite(*(const void **)(a1 + 496), 1uLL, v17, *(FILE **)(a1 + 56));
      goto LABEL_47;
    case 2:
      uint64_t v7 = 0;
      char v8 = 0;
      unint64_t v9 = 0;
      uint64_t v28 = *(void *)(a1 + 168);
      uint64_t v10 = *(char **)(a1 + 480);
      compression_algorithm v11 = *(unsigned char **)(a1 + 496);
      break;
    case 3:
      if (*(_DWORD *)(a1 + 472))
      {
        do
        {
          int64_t v22 = ParallelCompressionFileRead();
          BOOL v6 = v22 == 0;
          if (v22 <= 0) {
            goto LABEL_47;
          }
        }
        while (v22 == fwrite(*(const void **)(a1 + 496), 1uLL, v22, *(FILE **)(a1 + 56)));
      }
      else
      {
        size_t v26 = *(void *)(a1 + 488);
        size_t v17 = 1;
        while (1)
        {
          fread(*(void **)(a1 + 480), 1uLL, v26, *(FILE **)(a1 + 16));
          if (ferror(*(FILE **)(a1 + 16)) || ParallelCompressionFileWrite() < 0) {
            break;
          }
          if (feof(*(FILE **)(a1 + 16))) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_42;
    default:
      goto LABEL_27;
  }
  do
  {
    while (1)
    {
      if ((v8 & 1) != 0 || v9 >> 23)
      {
        *(void *)(a1 + 440) = v10;
        *(void *)(a1 + 448) = v9;
        *(void *)(a1 + 424) = v11;
        *(void *)(a1 + 432) = 0x800000;
        if (v8) {
          goto LABEL_11;
        }
        char v8 = 0;
        BOOL v14 = 0;
      }
      else
      {
        size_t v12 = fread(&v10[v9], 1uLL, 0x800000 - v9, *(FILE **)(a1 + 16));
        size_t v13 = v12 + v9;
        v7 += v12;
        if (v12 < 0x800000 - v9)
        {
          if (v7 != v28)
          {
LABEL_42:
            size_t v17 = 0;
            goto LABEL_50;
          }
          uint64_t v7 = v28;
          *(void *)(a1 + 440) = v10;
          *(void *)(a1 + 448) = v13;
          *(void *)(a1 + 424) = v11;
          *(void *)(a1 + 432) = 0x800000;
LABEL_11:
          BOOL v14 = *(_DWORD *)(a1 + 472) == 0;
          char v8 = 1;
          goto LABEL_14;
        }
        char v8 = 0;
        BOOL v14 = 0;
        *(void *)(a1 + 440) = v10;
        *(void *)(a1 + 448) = v13;
        *(void *)(a1 + 424) = v11;
        *(void *)(a1 + 432) = 0x800000;
      }
LABEL_14:
      compression_status v15 = compression_stream_process((compression_stream *)(a1 + 424), v14);
      *(_DWORD *)(a1 + 464) = v15;
      if (v15 == COMPRESSION_STATUS_END)
      {
        char v16 = 1;
      }
      else
      {
        char v16 = 0;
        size_t v17 = 0;
        if (v15 == COMPRESSION_STATUS_ERROR) {
          goto LABEL_50;
        }
      }
      std::string::size_type v18 = *(unsigned char **)(a1 + 424);
      unint64_t v9 = *(void *)(a1 + 448);
      if (v9) {
        memmove(v10, *(const void **)(a1 + 440), *(void *)(a1 + 448));
      }
      if (v18 != v11) {
        break;
      }
      if (v16)
      {
LABEL_27:
        size_t v17 = 1;
        goto LABEL_50;
      }
    }
    size_t v19 = v18 - v11;
    size_t v20 = fwrite(v11, 1uLL, v19, *(FILE **)(a1 + 56));
    BOOL v6 = v20 == v19;
    if (v20 == v19) {
      char v21 = v16;
    }
    else {
      char v21 = 1;
    }
  }
  while ((v21 & 1) == 0);
LABEL_47:
  size_t v17 = v6;
LABEL_50:
  if (a2) {
    a2(a3);
  }
  return v17;
}

uint64_t RECompressionCreateBank()
{
  return 0;
}

uint64_t RECompressionProcessBank()
{
  return 0;
}

uint64_t re::Optional<re::FileStreamReader>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v10 = *(FILE **)(a1 + 16);
      uint64_t v7 = (unsigned char *)a1;
      if (v10)
      {
        uint64_t v7 = (unsigned char *)a1;
        if (*(unsigned char *)(a1 + 32))
        {
          fclose(v10);
          *(void *)(a1 + 16) = 0;
          *(unsigned char *)(a1 + 32) = 0;
          uint64_t v7 = (unsigned char *)a1;
        }
      }
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6)
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = &unk_26E714440;
        *(unsigned char *)(a1 + 32) = 0;
      }
      unsigned __int8 v8 = a2[32];
      uint64_t v7 = a2 + 32;
      *(unsigned char *)(a1 + 32) = v8;
      uint64_t v9 = *((void *)v7 - 1);
      *(void *)(a1 + 16) = *((void *)v7 - 2);
      *(void *)(a1 + 24) = v9;
      *((void *)v7 - 2) = 0;
    }
    unsigned char *v7 = 0;
  }
  return a1;
}

uint64_t re::Optional<re::FileStreamWriter>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v9 = *(FILE **)(a1 + 16);
      uint64_t v7 = (unsigned char *)a1;
      if (v9)
      {
        uint64_t v7 = (unsigned char *)a1;
        if (*(unsigned char *)(a1 + 24))
        {
          fclose(v9);
          *(void *)(a1 + 16) = 0;
          *(unsigned char *)(a1 + 24) = 0;
          uint64_t v7 = (unsigned char *)a1;
        }
      }
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6)
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = &unk_26E715030;
        *(void *)(a1 + 16) = 0;
        *(unsigned char *)(a1 + 24) = 0;
      }
      unsigned __int8 v8 = a2[24];
      uint64_t v7 = a2 + 24;
      *(void *)(a1 + 16) = *((void *)v7 - 1);
      *(unsigned char *)(a1 + 24) = v8;
      *((void *)v7 - 1) = 0;
    }
    unsigned char *v7 = 0;
  }
  return a1;
}

void Compression::~Compression(void **this)
{
  if (*((char *)this + 423) < 0) {
    operator delete(this[50]);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  if (*((unsigned char *)this + 40))
  {
    float32x4_t v2 = (FILE *)this[7];
    if (v2)
    {
      if (*((unsigned char *)this + 64))
      {
        fclose(v2);
        this[7] = 0;
        *((unsigned char *)this + 64) = 0;
      }
    }
  }
  if (*(unsigned char *)this)
  {
    int v3 = (FILE *)this[2];
    if (v3)
    {
      if (*((unsigned char *)this + 32))
      {
        fclose(v3);
        this[2] = 0;
        *((unsigned char *)this + 32) = 0;
      }
    }
  }
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions(uint64_t a1, re *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = re::BlendShapeWeightsDefinitionAsset::assetType(BlendShapeWeightDefinition);
  (*(void (**)(void *__return_ptr, uint64_t, _anonymous_namespace_ *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v11, a1, BlendShapeWeightDefinition, v7, 0, 0, 0);
  uint64_t v8 = v11[0];
  if (v11[0]) {
    id v9 = (id)(v11[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

_anonymous_namespace_ *anonymous namespace'::createBlendShapeWeightDefinition(re *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, const char **a6)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 136, 8);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_DWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_DWORD *)(v9 + 104) = 0;
  *(void *)(v9 + 112) = 0;
  *(void *)(v9 + 120) = v9;
  char v35 = (void *)(v9 + 40);
  *(void *)(v9 + 128) = v9 + 40;
  uint64_t v10 = (_anonymous_namespace_ *)re::BlendShapeWeightsDefinitionAsset::init((re::BlendShapeWeightsDefinitionAsset *)v9, 0);
  std::string::size_type v38 = (_anonymous_namespace_ *)v9;
  if (*(void *)(v9 + 8) >= (unint64_t)a1)
  {
    if (!a1) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)v9, (unint64_t)a1);
  }
  compression_algorithm v11 = 0;
  do
  {
    size_t v12 = (unint64_t *)(a2 + 16 * (void)v11);
    unint64_t v13 = *v12;
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    if (*v12)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        size_t v17 = *(const char **)(v12[1] + 8 * v16);
        uint64_t v39 = 0;
        char v40 = "";
        unint64_t v18 = v42;
        if (v42 <= v16)
        {
          uint64_t v44 = 0;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v53 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v45 = 136315906;
          __int16 v46 = "operator[]";
          __int16 v47 = 1024;
          int v48 = 468;
          __int16 v49 = 2048;
          unint64_t v50 = v16;
          __int16 v51 = 2048;
          unint64_t v52 = v18;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        size_t v19 = (void *)(v43 + v15);
        uint64_t v20 = v39;
        char v21 = v40;
        uint64_t v39 = 0;
        char v40 = "";
        uint64_t v22 = *(void *)(v43 + v15 + 8);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v43 + v15) & 1;
        v19[1] = v21;
        *(void *)&long long v53 = v23;
        *((void *)&v53 + 1) = v22;
        *size_t v19 = v20;
        re::StringID::destroyString((re::StringID *)&v53);
        re::StringID::destroyString((re::StringID *)&v39);
        ++v16;
        v15 += 16;
      }
      while (v16 < *v12);
    }
    uint64_t v9 = (uint64_t)v38;
    re::DynamicArray<re::FixedArray<re::StringID>>::add(v38, &v41);
    uint64_t v10 = (_anonymous_namespace_ *)re::FixedArray<re::StringID>::deinit(&v41);
    compression_algorithm v11 = (re *)((char *)v11 + 1);
  }
  while (v11 != a1);
LABEL_10:
  if (*(void *)(v9 + 48) >= a3)
  {
    size_t v24 = v35;
    size_t v25 = a6;
    uint64_t v26 = a5;
    if (!a3) {
      goto LABEL_15;
    }
  }
  else
  {
    size_t v24 = v35;
    uint64_t v10 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v35, a3);
    size_t v25 = a6;
    uint64_t v26 = a5;
  }
  uint64_t v27 = a4 + 16;
  do
  {
    LOBYTE(v53) = *(unsigned char *)(v27 - 16);
    uint64_t v28 = *(const char **)(v27 - 8);
    *((void *)&v53 + 1) = 0;
    *(void *)&long long v54 = "";
    uint64_t v29 = *(const char **)v27;
    *((void *)&v54 + 1) = 0;
    *(void *)&long long v55 = "";
    *((void *)&v55 + 1) = *(unsigned int *)(v27 + 8);
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(v24, (uint64_t)&v53);
    re::StringID::destroyString((re::StringID *)((char *)&v54 + 8));
    re::StringID::destroyString((re::StringID *)((char *)&v53 + 8));
    v27 += 32;
    --a3;
  }
  while (a3);
LABEL_15:
  while (v26)
  {
    unint64_t v31 = *v25++;
    *(void *)&long long v53 = 0;
    *((void *)&v53 + 1) = "";
    re::DynamicArray<re::StringID>::add((void *)v38 + 10, (uint64_t *)&v53);
    re::StringID::destroyString((re::StringID *)&v53);
    --v26;
  }
  return v38;
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames(uint64_t a1, re *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char **a7)
{
  uint64_t v9 = re::BlendShapeWeightsDefinitionAsset::assetType(BlendShapeWeightDefinition);
  (*(void (**)(void *__return_ptr, uint64_t, _anonymous_namespace_ *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, BlendShapeWeightDefinition, v9, 0, 0, 0);
  uint64_t v10 = v13[0];
  if (v13[0]) {
    id v11 = (id)(v13[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetForMesh(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v14);
  int v3 = (re *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v14);
  if (v3)
  {
    BOOL v4 = v3;
    BOOL v5 = re::globalAllocators(v3);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 136, 8);
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 24) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_DWORD *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_DWORD *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 120) = v6;
    *(void *)(v6 + 128) = v6 + 40;
    uint64_t v7 = *((void *)v4 + 47);
    v13[0] = *((void *)v4 + 49);
    v13[1] = v7;
    re::BlendShapeWeightsDefinitionAsset::init((_anonymous_namespace_ *)v6, v4, v13, 0);
    uint64_t v9 = re::BlendShapeWeightsDefinitionAsset::assetType(v8);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, v6, v9, 0, 0, 0);
    uint64_t v10 = v13[0];
    if (v13[0]) {
      id v11 = (id)(v13[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  }
  else
  {
    uint64_t v10 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v10;
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

const char *REBlendShapeWeightsDefinitionAssetGetBlendShapeName(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v3 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v8);
  if (!v3) {
    goto LABEL_7;
  }
  unint64_t v4 = *(void *)(v3 + 96);
  if (!v4) {
    goto LABEL_7;
  }
  if (v4 <= a2)
  {
    uint64_t v8[3] = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    uint64_t v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 797;
    __int16 v13 = 2048;
    unint64_t v14 = a2;
    __int16 v15 = 2048;
    unint64_t v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  BOOL v5 = (void *)(*(void *)(v3 + 112) + 16 * a2);
  uint64_t v6 = (const char *)v5[1];
  if (*v5 <= 1uLL && v6 && !*v6) {
LABEL_7:
  }
    uint64_t v6 = "";
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendWeightCount(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    if (v4 <= a2)
    {
      unint64_t v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      int v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *(void *)(*(void *)(v3 + 32) + 24 * a2 + 8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

const char *REBlendShapeWeightsDefinitionAssetGetBlendWeightName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v5 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v10);
  if (!v5)
  {
    int v8 = "";
    goto LABEL_6;
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a2)
  {
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 797;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 476;
    __int16 v16 = 2048;
    unint64_t v17 = a3;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 32);
  unint64_t v6 = *(void *)(v7 + 24 * a2 + 8);
  if (v6 <= a3) {
    goto LABEL_8;
  }
  int v8 = *(const char **)(*(void *)(v7 + 24 * a2 + 16) + 16 * a3 + 8);
LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v8;
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMapCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 56);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMap(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v11);
  uint64_t v5 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)v11);
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 56);
    if (v6 <= a2)
    {
      void v11[3] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      unint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      unint64_t v17 = a2;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v7 = *(void *)(v5 + 72);
    uint64_t v8 = v7 + 48 * a2;
    *(unsigned char *)a3 = *(unsigned char *)v8;
    *(void *)(a3 + 8) = *(void *)(v8 + 16);
    int v9 = *(unsigned char **)(v8 + 32);
    if (v9 && !*v9) {
      int v9 = 0;
    }
    *(void *)(a3 + 16) = v9;
    int v10 = *(_DWORD *)(v7 + 48 * a2 + 40);
  }
  else
  {
    int v10 = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = "";
    *(void *)(a3 + 16) = "";
  }
  *(_DWORD *)(a3 + 24) = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

uint64_t REUnlitMaterialParametersGetID(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

uint64_t REUnlitMaterialParametersSetColorTint(uint64_t a1, char a2, __n128 a3)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(__n128 *)(v4 + 28) = a3;
  *(unsigned char *)(v4 + 44) = a2;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

__n128 REUnlitMaterialParametersGetColorTint(uint64_t a1, __n128 *a2, unsigned char *a3)
{
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  __n128 result = *(__n128 *)(v5 + 28);
  *a2 = result;
  *a3 = *(unsigned char *)(v5 + 44);
  return result;
}

uint64_t REUnlitMaterialParametersSetOpacity(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(float *)(v3 + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

float REUnlitMaterialParametersGetOpacity(uint64_t a1)
{
  return *(float *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 40);
}

uint64_t REUnlitMaterialParametersGetBlendingType(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 76);
}

uint64_t REUnlitMaterialParametersSetColorTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v3 + 48) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REUnlitMaterialParametersGetColorTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 48);
}

float REUnlitMaterialParametersGetOpacityThreshold(uint64_t a1)
{
  return *(float *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 72);
}

uint64_t REUnlitMaterialParametersSetOpacityThreshold(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(float *)(v3 + 72) = a2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REUnlitMaterialParametersGetDisableTonemap(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 77);
}

uint64_t REUnlitMaterialParametersGetMaterialAsset(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 80);
}

void *REEDRColorManagementComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RESceneAddEDRColorManagementComponent(uint64_t a1)
{
  v4[0] = 0;
  uint64_t v1 = (re::ecs2::Entity *)((char *)makeSceneDataEntity(a1, (uint64_t)v4, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0)
                          + 32);
  uint64_t v2 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  return re::ecs2::EntityComponentCollection::getOrAdd(v1, v2);
}

void RESceneRemoveEDRColorManagementComponent(uint64_t a1)
{
  v4[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v4, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  if (SceneDataEntity)
  {
    uint64_t v2 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
    uint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v3);
  }
}

re::ecs2::Entity *RESceneGetEDRColorManagementComponent(uint64_t a1)
{
  v2[0] = 0;
  __n128 result = makeSceneDataEntity(a1, (uint64_t)v2, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  if (result) {
    return (re::ecs2::Entity *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return result;
}

void REEDRColorManagementComponentSetHeadroomCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  long long v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v3;
}

uint64_t REComponentGetEntity(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if ((*(unsigned char *)(result + 288) & 0x80) != 0) {
      return 0;
    }
  }
  return result;
}

uint64_t REComponentGetClass(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t REComponentContainsAssetReference(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  void v3[2] = __REComponentContainsAssetReference_block_invoke;
  uint64_t v3[3] = &unk_264BE99B8;
  v3[4] = &v4;
  v3[5] = a1;
  REGlobalTypeRegistryWithReadLock((uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __REComponentContainsAssetReference_block_invoke(uint64_t a1, re *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  (*(void (**)(re **__return_ptr))(**(void **)(a1 + 40) + 56))(v6);
  RETypeRegistryGetTypeInfoByTypeID(a2, v6[0], v6[1], v7);
  re::TypeInfo::TypeInfo((uint64_t)v5, (uint64_t)v7);
  uint64_t result = re::AssetHandle::hasAssetHandle(v5);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void REComponentFixupAssetReferences(const re::IntrospectionBase **a1, uint64_t a2, void *a3)
{
  uint64_t v11[4] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  uint64_t v5 = (*((uint64_t (**)(const re::IntrospectionBase **))*a1 + 5))(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  v10[0] = &unk_26E735900;
  v10[1] = v7;
  void v10[2] = _Block_copy(v4);
  uint64_t v10[3] = v10;
  v11[0] = &unk_26E6CA550;
  v11[1] = v10;
  void v11[3] = v11;
  re::IntrospectionWalker::walk(v6, a1, (uint64_t)v11);
  std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](v11);
  std::__function::__value_func<void ()(re::AssetHandle *)>::~__value_func[abi:nn180100](v10);
  if (v7[0] && v9) {
    (*(void (**)(void))(*(void *)v7[0] + 40))();
  }
}

uint64_t REComponentArrayBufferFrom(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t REComponentTypeSetCloneCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)(result + 8) = a2;
      return result;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component type must not be null.", "cComponentType", "REComponentTypeSetCloneCallback", 95);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Clone callback must not be null.", "clone", "REComponentTypeSetCloneCallback", 96);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REComponentTypeGetTypeID(uint64_t result)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 56))(&v1);
    return v1;
  }
  return result;
}

uint64_t REComponentIsCustomComponentClass(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t REComponentIsCustomComponent(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  return v1();
}

uint64_t std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 16);
  *uint64_t v2 = &unk_26E735900;
  v2[1] = v4;
  v2[2] = _Block_copy(v3);
  return v2;
}

void *std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 16);
  *a2 = &unk_26E735900;
  a2[1] = v4;
  uint64_t result = _Block_copy(v3);
  a2[2] = result;
  return result;
}

void std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  re::AssetAPIHelper::assetHandleCreate(v3, v4);
  re::AssetHandle::operator=(v2, v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REComponentFixupAssetReferences::$_0,std::allocator<REComponentFixupAssetReferences::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

uint64_t REIkRigAssetBuilderCreate(_anonymous_namespace_ *a1)
{
  uint64_t v2 = re::globalAllocators(v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E735980;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)(v3 + 24), 0);
  *(void *)(v3 + 24) = &unk_26E7359C8;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(void *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_DWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_DWORD *)(v3 + 272) = 0;
  re::DynamicArray<float *>::setCapacity((void *)(v3 + 48), 0);
  ++*(_DWORD *)(v3 + 72);
  re::DynamicArray<re::DynamicString>::setCapacity((void *)(v3 + 88), 0);
  ++*(_DWORD *)(v3 + 112);
  re::DynamicArray<re::StringID>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  re::DynamicArray<re::StringID>::setCapacity((void *)(v3 + 168), 0);
  ++*(_DWORD *)(v3 + 192);
  re::DynamicArray<re::StringID>::setCapacity((void *)(v3 + 208), 0);
  ++*(_DWORD *)(v3 + 232);
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((void *)(v3 + 248), 0);
  ++*(_DWORD *)(v3 + 272);
  return v3;
}

void *REIkRigAssetBuilderAddRig(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6, uint64_t a7)
{
  int v12 = a1;
  uint64_t v27 = a7;
  unint64_t v13 = *((void *)a1 + 7);
  unint64_t v14 = *((void *)a1 + 8);
  if (v14 >= v13)
  {
    unint64_t v15 = v14 + 1;
    if (v13 < v14 + 1)
    {
      if (*((void *)a1 + 6))
      {
        uint64_t v16 = 2 * v13;
        BOOL v17 = v13 == 0;
        unint64_t v18 = 8;
        if (!v17) {
          unint64_t v18 = v16;
        }
        if (v18 <= v15) {
          unint64_t v19 = v15;
        }
        else {
          unint64_t v19 = v18;
        }
        a1 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)a1 + 6, v19);
      }
      else
      {
        a1 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v12 + 6, v15);
        ++*((_DWORD *)v12 + 18);
      }
    }
    unint64_t v14 = *((void *)v12 + 8);
  }
  *(void *)(*((void *)v12 + 10) + 8 * v14) = a2;
  *((void *)v12 + 8) = v14 + 1;
  ++*((_DWORD *)v12 + 18);
  double v20 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)((char *)v12 + 88), &v25);
  long long v21 = v25;
  if (v25 && (v26 & 1) != 0) {
    long long v21 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(*(void *)v25 + 40))(v20);
  }
  uint64_t v25 = 0;
  uint64_t v26 = "";
  re::DynamicArray<re::StringID>::add((void *)v12 + 16, (uint64_t *)&v25);
  re::StringID::destroyString((re::StringID *)&v25);
  uint64_t v25 = 0;
  uint64_t v26 = "";
  re::DynamicArray<re::StringID>::add((void *)v12 + 21, (uint64_t *)&v25);
  re::StringID::destroyString((re::StringID *)&v25);
  uint64_t v25 = 0;
  uint64_t v26 = "";
  re::DynamicArray<re::StringID>::add((void *)v12 + 26, (uint64_t *)&v25);
  re::StringID::destroyString((re::StringID *)&v25);
  return re::DynamicArray<unsigned long>::add((void *)v12 + 31, &v27);
}

uint64_t REIkRigAssetCreate(re *a1, uint64_t a2, CFErrorRef *a3)
{
  v20[4] = *MEMORY[0x263EF8340];
  if (a1 && *(void *)(a2 + 64))
  {
    uint64_t v6 = re::globalAllocators(a1);
    char v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 144, 8);
    _OWORD *v7 = 0u;
    v7[1] = 0u;
    _OWORD v7[2] = 0u;
    void v7[3] = 0u;
    uint64_t v7[4] = 0u;
    v7[5] = 0u;
    v7[6] = 0u;
    v7[7] = 0u;
    unsigned char v7[8] = 0u;
    v18[0] = &unk_26E735A10;
    v18[3] = v18;
    _DWORD v20[3] = v20;
    *(void *)long long buf = v7;
    v20[0] = &unk_26E735A10;
    std::__function::__value_func<void ()(re::IKRigAsset *)>::~__value_func[abi:nn180100](v18);
    uint64_t v9 = (re::IKRigAsset *)re::IKRigAsset::init(*(uint64_t **)buf, *(void *)(a2 + 80), *(void *)(a2 + 64), *(void *)(a2 + 120), *(void *)(a2 + 104), *(void *)(a2 + 160), *(void *)(a2 + 144), v8, *(void *)(a2 + 200), *(void *)(a2 + 184), *(void *)(a2 + 240), *(void *)(a2 + 224), *(void *)(a2 + 280), *(void *)(a2 + 264));
    int v10 = *(uint64_t **)buf;
    uint64_t v11 = re::IKRigAsset::assetType(v9);
    (*(void (**)(void *__return_ptr, re *, uint64_t *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v18, a1, v10, v11, 0, 0, 0);
    if (v18[1])
    {
      *(void *)long long buf = 0;
      uint64_t v12 = v18[0];
      if (v18[0]) {
        id v13 = (id)(v18[0] + 8);
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)BOOL v17 = 0;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "IKRigAsset Creation Error - Failed registering the new asset", v17, 2u);
      }

      makeError(@"REAssetRefErrorDomain", "Failed registering the new asset", 32, a3);
      uint64_t v12 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    std::unique_ptr<re::IKRigAsset,std::function<void ()(re::IKRigAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "IkRigAsset Creation Error - NULL argument detected", buf, 2u);
    }

    makeError(@"REAssetRefErrorDomain", "NULL argument detected", 22, a3);
    return 0;
  }
  return v12;
}

uint64_t REIkRigAssetCreateForMultipleSolvers(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, CFErrorRef *a7)
{
  char v7 = a7;
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (a1 && a6)
  {
    uint64_t v12 = re::globalAllocators(a1);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 144, 8);
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(void *)&long long buf = &unk_26E735AA0;
    *((void *)&v83 + 1) = &buf;
    v73[3] = v73;
    uint64_t v72 = (uint64_t *)v13;
    v73[0] = &unk_26E735AA0;
    unint64_t v14 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(re::IKRigAsset *)>::~__value_func[abi:nn180100](&buf);
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v59 = 0;
    unint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v56 = 0;
    unint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      long long v22 = (_anonymous_namespace_ *)[*(id *)(a2 + 8 * v21) UTF8String];
      unint64_t v23 = v69;
      if (v69 <= v21)
      {
        uint64_t v71 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v74 = 136315906;
        int v75 = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v21;
        __int16 v80 = 2048;
        unint64_t v81 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        uint64_t v71 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v74 = 136315906;
        int v75 = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v21;
        __int16 v80 = 2048;
        unint64_t v81 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        uint64_t v71 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v74 = 136315906;
        int v75 = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v21;
        __int16 v80 = 2048;
        unint64_t v81 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        uint64_t v71 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v74 = 136315906;
        int v75 = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v21;
        __int16 v80 = 2048;
        unint64_t v81 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        uint64_t v54 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long buf = 0u;
        char v7 = (CFErrorRef *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v74 = 136315906;
        int v75 = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v21;
        __int16 v80 = 2048;
        unint64_t v81 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_35;
      }
      re::DynamicString::operator=((re::DynamicString *)(v70 + v19), (re::DynamicString *)&v54);
      if (v54 && (v55 & 1) != 0) {
        (*(void (**)(void))(*(void *)v54 + 40))();
      }
      long long v24 = (_anonymous_namespace_ *)[*(id *)(a3 + 8 * v21) UTF8String];
      uint64_t v54 = 0;
      long long v55 = "";
      unint64_t v23 = v66;
      if (v66 <= v21) {
        goto LABEL_31;
      }
      uint64_t v25 = (void *)(v67 + v20);
      uint64_t v26 = v54;
      uint64_t v27 = v55;
      uint64_t v54 = 0;
      long long v55 = "";
      uint64_t v28 = *(void *)(v67 + v20 + 8);
      unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v67 + v20) & 1;
      v25[1] = v27;
      *(void *)&long long buf = v29;
      *((void *)&buf + 1) = v28;
      *uint64_t v25 = v26;
      re::StringID::destroyString((re::StringID *)&buf);
      re::StringID::destroyString((re::StringID *)&v54);
      __int16 v30 = (_anonymous_namespace_ *)[*(id *)(a4 + 8 * v21) UTF8String];
      uint64_t v54 = 0;
      long long v55 = "";
      unint64_t v23 = v63;
      if (v63 <= v21) {
        goto LABEL_32;
      }
      unint64_t v31 = (void *)(v64 + v20);
      uint64_t v32 = v54;
      std::string v33 = v55;
      uint64_t v54 = 0;
      long long v55 = "";
      uint64_t v34 = *(void *)(v64 + v20 + 8);
      unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v64 + v20) & 1;
      v31[1] = v33;
      *(void *)&long long buf = v35;
      *((void *)&buf + 1) = v34;
      *unint64_t v31 = v32;
      re::StringID::destroyString((re::StringID *)&buf);
      re::StringID::destroyString((re::StringID *)&v54);
      uint64_t v36 = (_anonymous_namespace_ *)[*(id *)(a5 + 8 * v21) UTF8String];
      uint64_t v54 = 0;
      long long v55 = "";
      unint64_t v23 = v60;
      if (v60 <= v21) {
        goto LABEL_33;
      }
      uint64_t v37 = (void *)(v61 + v20);
      uint64_t v38 = v54;
      uint64_t v39 = v55;
      uint64_t v54 = 0;
      long long v55 = "";
      uint64_t v40 = *(void *)(v61 + v20 + 8);
      unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v61 + v20) & 1;
      v37[1] = v39;
      *(void *)&long long buf = v41;
      *((void *)&buf + 1) = v40;
      *uint64_t v37 = v38;
      re::StringID::destroyString((re::StringID *)&buf);
      re::StringID::destroyString((re::StringID *)&v54);
      uint64_t v42 = [*(id *)(a5 + 8 * v21) hash];
      unint64_t v23 = v57;
      if (v57 <= v21) {
        goto LABEL_34;
      }
      uint64_t v44 = v58;
      *(void *)(v58 + 8 * v21++) = v42;
      v20 += 16;
      v19 += 32;
    }
    while (a6 != v21);
    int v45 = (re::IKRigAsset *)re::IKRigAsset::init(v72, v70, v69, v67, v66, v64, v63, v43, v61, v60, v44, v57);
    re::IKRigAsset::assetType(v45);
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 416))(&buf);
    if (*((void *)&buf + 1))
    {
      uint64_t v72 = 0;
      uint64_t v46 = buf;
      if ((void)buf) {
        id v47 = (id)(buf + 8);
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      __int16 v49 = (id)CoreRELog::log;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v74 = 0;
        _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "IKRigAsset Creation Error - Failed registering the new asset", v74, 2u);
      }

      makeError(@"REAssetRefErrorDomain", "Failed registering the new asset", 32, a7);
      uint64_t v46 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf);
    if (v56 && v57) {
      (*(void (**)(void))(*(void *)v56 + 40))();
    }
    re::FixedArray<re::StringID>::deinit(&v59);
    re::FixedArray<re::StringID>::deinit(&v62);
    re::FixedArray<re::StringID>::deinit(&v65);
    re::FixedArray<re::DynamicString>::deinit(&v68);
    std::unique_ptr<re::IKRigAsset,std::function<void ()(re::IKRigAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v72);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
LABEL_35:
    }
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    int v48 = (id)CoreRELog::log;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "IkRigAsset Creation Error - NULL argument detected", (uint8_t *)&buf, 2u);
    }

    makeError(@"REAssetRefErrorDomain", "NULL argument detected", 22, v7);
    return 0;
  }
  return v46;
}

uint64_t REIkRigAssetGetDefinitionCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(void *)(re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v3) + 32);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

const char *REIkRigAssetGetDefinitionSourceTarget(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v6);
  if (*(void *)(v3 + 80) <= a2) {
    uint64_t v4 = "";
  }
  else {
    uint64_t v4 = *(const char **)(*(void *)(v3 + 88) + 16 * a2 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

const char *REIkRigAssetGetDefinitionOutputTarget(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v6);
  if (*(void *)(v3 + 104) <= a2) {
    uint64_t v4 = "";
  }
  else {
    uint64_t v4 = *(const char **)(*(void *)(v3 + 112) + 16 * a2 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

const char *REIkRigAssetGetDefinitionSolverName(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v6);
  if (*(void *)(v3 + 32) <= a2) {
    uint64_t v4 = "";
  }
  else {
    uint64_t v4 = *(const char **)(*(void *)(v3 + 40) + 16 * a2 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REIkRigAssetGetDefinitionSolverID(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v6);
  if (*(void *)(v3 + 56) <= a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(v3 + 64) + 8 * a2);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REIkRigAssetGetDefinitionRig(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::IKRigAsset>((re::IKRigAsset *)v6);
  if (*(void *)(v3 + 128) <= a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(v3 + 136) + 40 * a2);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

void *re::Shareable<anonymous namespace'::IkRigAssetBuilder>::~Shareable(void *a1)
{
  *a1 = &unk_26E735980;
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<anonymous namespace'::IkRigAssetBuilder>::~Shareable(void *a1)
{
  *a1 = &unk_26E735980;
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::IkRigAssetBuilder::~IkRigAssetBuilder(_anonymous_namespace_::IkRigAssetBuilder *this)
{
  *(void *)this = &unk_26E7359C8;
  uint64_t v2 = (char *)this + 64;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 224);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v2);
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    if (*((void *)this + 7)) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    *((void *)this + 7) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::~__func()
{
}

void *std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E735A10;
  return result;
}

void std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735A10;
}

re *std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::operator()(uint64_t a1, void **a2)
{
  return re::internal::destroyPersistent<re::IKRigAsset>((re *)"operator()", 94, *a2);
}

uint64_t std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REIkRigAssetCreate::$_0,std::allocator<REIkRigAssetCreate::$_0>,void ()(re::IKRigAsset *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::IKRigAsset *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::IKRigAsset,std::function<void ()(re::IKRigAsset*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v5 = v2;
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x2342C458CLL);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
  }
  std::__function::__value_func<void ()(re::IKRigAsset *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::~__func()
{
}

void *std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E735AA0;
  return result;
}

void std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735AA0;
}

re *std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::operator()(uint64_t a1, void **a2)
{
  return re::internal::destroyPersistent<re::IKRigAsset>((re *)"operator()", 125, *a2);
}

uint64_t std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REIkRigAssetCreateForMultipleSolvers::$_0,std::allocator<REIkRigAssetCreateForMultipleSolvers::$_0>,void ()(re::IKRigAsset *)>::target_type()
{
}

void *REImageBasedLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REImageBasedLightReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REImageBasedLightComponentSetTextureContentUpdateTimestamp(uint64_t this, uint64_t a2)
{
  *(void *)(this + 1264) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentGetTextureContentUpdateTimestamp(uint64_t a1)
{
  return *(void *)(a1 + 1264);
}

uint64_t REIBLComponentSetDiffuseTexture(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REIBLComponentGetDiffuseTexture(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REIBLComponentSetSpecularTexture(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REIBLComponentGetSpecularTexture(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t REIBLComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REIBLComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REImageBasedLightComponentSetIntensityExponent(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetMixFactor(uint64_t this, float a2)
{
  *(float *)(this + 1200) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetMixColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 1280) = a2;
  *(unsigned char *)(this + 1296) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetMixColorGamut(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 1280) = a3;
  *(unsigned char *)(this + 1296) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REImageBasedLightComponentGetMixFactor(uint64_t a1)
{
  return *(float *)(a1 + 1200);
}

double REImageBasedLightComponentGetMixColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 1288) | ((unint64_t)*(unsigned __int8 *)(a1 + 1296) << 32);
  v3[0] = *(void *)(a1 + 1280);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 REImageBasedLightComponentGetMixColorGamut(__n128 *a1, __n128 *a2, unsigned __int8 *a3)
{
  __n128 result = a1[80];
  unsigned __int8 v4 = a1[81].n128_u8[0];
  *a2 = result;
  *a3 = v4;
  return result;
}

uint64_t REImageBasedLightComponentSetWPCStrength(uint64_t this, float a2)
{
  float v2 = fmaxf(a2, 0.0);
  if (v2 > 1.0) {
    float v2 = 1.0;
  }
  *(float *)(this + 1204) = v2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REImageBasedLightComponentGetIntensityExponent(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REImageBasedLightComponentSetIBLNullable(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 88) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REImageBasedLightComponentGetIBL(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t REImageBasedLightComponentSetIBLBlendNullable(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REImageBasedLightComponentGetIBLBlend(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t REImageBasedLightComponentSetEnableBlend(uint64_t this, char a2)
{
  *(unsigned char *)(this + 136) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentGetEnableBlend(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t REImageBasedLightComponentSetBlendIBLsFactor(uint64_t this, float a2)
{
  *(float *)(this + 140) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REImageBasedLightComponentGetBlendIBLsFactor(uint64_t a1)
{
  return *(float *)(a1 + 140);
}

uint64_t REImageBasedLightComponentSetEnablePostBlendSum(uint64_t this, float a2)
{
  *(unsigned char *)(this + 137) = a2 != 0.0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetPostBlendSumFactor(uint64_t this, float a2)
{
  *(float *)(this + 144) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetGlobalIBL(uint64_t this, char a2)
{
  *(unsigned char *)(this + 148) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentIsGlobalIBL(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 148);
}

uint64_t REImageBasedLightComponentSetBlendIBLRotation(uint64_t this, float32x4_t a2, double a3, __n128 a4, __n128 a5)
{
  float v5 = (float)(a2.f32[0] + a2.f32[0]) * a2.f32[0];
  float v6 = vmuls_lane_f32(a2.f32[1] + a2.f32[1], *(float32x2_t *)a2.f32, 1);
  float v7 = vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 2);
  float v8 = vmuls_lane_f32(a2.f32[0] + a2.f32[0], *(float32x2_t *)a2.f32, 1);
  float v9 = vmuls_lane_f32(a2.f32[0] + a2.f32[0], a2, 2);
  float v10 = vmuls_lane_f32(a2.f32[1] + a2.f32[1], a2, 2);
  float v11 = vmuls_lane_f32(a2.f32[0] + a2.f32[0], a2, 3);
  a4.n128_f32[0] = vmuls_lane_f32(a2.f32[1] + a2.f32[1], a2, 3);
  a2.f32[0] = vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 3);
  a5.n128_f32[0] = 1.0 - (float)(v6 + v7);
  a5.n128_f32[1] = v8 + a2.f32[0];
  a5.n128_f32[2] = v9 - a4.n128_f32[0];
  a2.f32[0] = v8 - a2.f32[0];
  a2.f32[1] = 1.0 - (float)(v5 + v7);
  a2.f32[2] = v10 + v11;
  a4.n128_f32[0] = v9 + a4.n128_f32[0];
  a4.n128_f32[1] = v10 - v11;
  a4.n128_f32[2] = 1.0 - (float)(v5 + v6);
  *(__n128 *)(this + 1216) = a5;
  *(float32x4_t *)(this + 1232) = a2;
  *(__n128 *)(this + 1248) = a4;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentSetRotationEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1208) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightComponentGetRotationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1208);
}

uint64_t REImageBasedLightComponentSetBlendRotationEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1209) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REImageBasedLightReceiverComponentSetIBLEntity(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 32), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

char *REImageBasedLightReceiverComponentGetIBLEntity(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
}

char *REImageBasedLightReceiverComponentGetIBLEntityNullable(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
}

uint64_t REIBLAssetGetSkyboxTexture(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  if (*(unsigned char *)(v4[1] + 312))
  {
    unint64_t v1 = (uint64_t *)re::AssetHandle::maybeUnregisteredMemoryAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v1 = (uint64_t *)re::AssetHandle::asset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1)
    {
LABEL_7:
      uint64_t v2 = 0;
      goto LABEL_8;
    }
  }
  if (!v1[1]) {
    goto LABEL_7;
  }
  uint64_t v2 = *v1;
LABEL_8:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t re::AssetHandle::maybeUnregisteredMemoryAsset<re::ImageBasedLightAsset>(re::ImageBasedLightAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)a1 + 1) + 312))
  {
    uint64_t v2 = re::ImageBasedLightAsset::assetType(a1);
    uint64_t result = re::AssetHandle::assetWithTypeRaw((uint64_t)a1, (uint64_t)v2, 1);
    if (result) {
      return result;
    }
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      float v5 = v4;
      float v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        float v7 = (char *)v6[18];
      }
      else {
        float v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      float v9 = v7;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return 0;
}

uint64_t REIBLAssetGetDiffuseTexture(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  if (*(unsigned char *)(v4[1] + 312))
  {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v1 = re::AssetHandle::asset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1)
    {
LABEL_7:
      uint64_t v2 = 0;
      goto LABEL_8;
    }
  }
  if (!*(void *)(v1 + 32)) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v1 + 24);
LABEL_8:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REIBLAssetGetSpecularTexture(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  if (*(unsigned char *)(v4[1] + 312))
  {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v1 = re::AssetHandle::asset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v4);
    if (!v1)
    {
LABEL_7:
      uint64_t v2 = 0;
      goto LABEL_8;
    }
  }
  if (!*(void *)(v1 + 56)) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v1 + 48);
LABEL_8:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetManagerIBLMemoryAssetCreateWithMTLTexture(uint64_t *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v45 = a3;
  id v8 = a4;
  float v9 = (re *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a1[151]);
  id v44 = v8;
  if (v9 && (v10 = (unsigned __int8 *)*((void *)v9 + 19)) != 0 && (unsigned int v11 = *v10 - 1, v11 <= 2)) {
    uint64_t v12 = (void **)qword_264BE99D8[(char)v11];
  }
  else {
    uint64_t v12 = (void **)MEMORY[0x263F00230];
  }
  uint64_t v13 = *v12;
  unint64_t v14 = re::globalAllocators(v9);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 104, 8);
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(void *)(v15 + 96) = 0;
  re::DynamicString::setCapacity((void *)(v15 + 72), 0);
  id v16 = v7;
  LOBYTE(v46) = 0;
  id v17 = v7;
  v47[0] = v17;
  unsigned int v48 = 0;
  unint64_t v18 = v13;
  __int16 v49 = v18;
  if (v7) {

  }
  int v19 = 1;
  if (v17)
  {
    unsigned int v20 = objc_msgSend(v17, sel_isShareable);
    memset(&buf[12], 0, 13);
    *(_DWORD *)long long buf = 16777473;
    uint8_t buf[4] = 1;
    *(_DWORD *)&uint8_t buf[8] = 1;
    int v51 = 0;
    TextureAsset = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)&v46, 4, (long long *)buf);
    long long v22 = re::TextureAsset::assetType(TextureAsset);
    (*(void (**)(uint8_t *__return_ptr, uint64_t *, re::TextureAsset *, uint64_t *, void, void, void))(*a1 + 416))(buf, a1, TextureAsset, v22, 0, 0, 0);
    re::AssetHandle::operator=(v15, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    unint64_t v23 = v49;
    int v19 = v20;
  }
  else
  {
    unint64_t v23 = v18;
  }
  long long v24 = v45;

  if (v48 != -1) {
    ((void (*)(uint8_t *, id *))*(&off_26E735B10 + v48))(buf, v47);
  }
  if (!v17) {
    goto LABEL_31;
  }
  id v25 = v45;
  LOBYTE(v46) = v46 & 0x80;
  v47[0] = v45;
  unsigned int v48 = 0;
  __int16 v49 = 0;
  objc_storeStrong((id *)&v49, v13);
  if (v45) {

  }
  if (!v48) {
    goto LABEL_21;
  }
  if (v48 != 1 || (int v26 = 0, v47[3]) && v47[0])
  {
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_21:
    if (v47[0])
    {
      v19 &= objc_msgSend(v47[0], sel_isShareable);
      memset(&buf[12], 0, 13);
      *(_DWORD *)long long buf = 16777473;
      int v26 = 1;
      uint8_t buf[4] = 1;
      *(_DWORD *)&uint8_t buf[8] = 1;
      int v51 = 0;
      uint64_t v27 = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)&v46, 4, (long long *)buf);
      uint64_t v28 = re::TextureAsset::assetType(v27);
      unint64_t v29 = v27;
      long long v24 = v45;
      (*(void (**)(uint8_t *__return_ptr, uint64_t *, re::TextureAsset *, uint64_t *, void, void, void))(*a1 + 416))(buf, a1, v29, v28, 0, 0, 0);
      re::AssetHandle::operator=(v15 + 24, (uint64_t *)buf);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    }
    else
    {
      int v26 = 0;
    }
  }

  if (v48 != -1) {
    ((void (*)(uint8_t *, id *))*(&off_26E735B10 + v48))(buf, v47);
  }
  if (!v26)
  {
LABEL_31:
    uint64_t v37 = 0;
    __int16 v30 = v44;
    goto LABEL_50;
  }
  __int16 v30 = v44;
  id v31 = v44;
  LOBYTE(v46) = 0;
  id v32 = v44;
  v47[0] = v32;
  unsigned int v48 = 0;
  CFStringRef v33 = v18;
  __int16 v49 = (__CFString *)v33;
  if (v44) {

  }
  if (v32)
  {
    LOBYTE(v19) = objc_msgSend(v32, sel_isShareable) & v19;
    memset(&buf[12], 0, 13);
    *(_DWORD *)long long buf = 16777473;
    uint8_t buf[4] = 1;
    *(_DWORD *)&uint8_t buf[8] = 1;
    int v51 = 0;
    uint64_t v34 = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)&v46, 4, (long long *)buf);
    unint64_t v35 = re::TextureAsset::assetType(v34);
    (*(void (**)(uint8_t *__return_ptr, uint64_t *, re::TextureAsset *, uint64_t *, void, void, void))(*a1 + 416))(buf, a1, v34, v35, 0, 0, 0);
    re::AssetHandle::operator=(v15 + 48, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    uint64_t v36 = v49;
  }
  else
  {
    uint64_t v36 = (__CFString *)v33;
  }

  if (v48 != -1) {
    ((void (*)(uint8_t *, id *))*(&off_26E735B10 + v48))(buf, v47);
  }
  if (v32)
  {
    CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v33, 0x8000100u);
    re::DynamicString::operator=((re::DynamicString *)(v15 + 72), (re::DynamicString *)&v46);
    uint64_t v39 = (re::ImageBasedLightAsset *)v46;
    if (v46 && ((uint64_t)v47[0] & 1) != 0) {
      uint64_t v39 = (re::ImageBasedLightAsset *)(*(uint64_t (**)(void))(*(void *)v46 + 40))();
    }
    uint64_t v40 = re::ImageBasedLightAsset::assetType(v39);
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, void, void, void))(*a1 + 416))(&v46, a1, v15, v40, 0, 0, 0);
    long long v24 = v45;
    if ((v19 & 1) == 0 && *((unsigned char *)a1 + 1344))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v41 = (id)CoreRELog::log;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_233120000, v41, OS_LOG_TYPE_DEFAULT, "REAssetManagerIBLMemoryAssetCreateWithMTLTexture: should create all textures as shared textures for efficiency", buf, 2u);
      }
    }
    uint64_t v37 = v46;
    if (v46) {
      id v42 = (id)(v46 + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
  }
  else
  {
    uint64_t v37 = 0;
    long long v24 = v45;
  }
LABEL_50:

  return v37;
}

void *RESelectableSceneContentIdentifierGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RESelectableSceneContentIdentifierComponentGetIdentifier(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

uint64_t RESelectableSceneContentIdentifierComponentSetIdentifier(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

void RENetSessionDefaultConfiguration(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
}

uint64_t RENetSessionShutdown()
{
  return MEMORY[0x270F592E8]();
}

uint64_t RENetSessionGetDiscoveryView()
{
  return MEMORY[0x270F591E8]();
}

uint64_t RENetSessionObserverCreate(uint64_t *a1)
{
  uint64_t v2 = RESyncNetSessionObserverCreate();
  RENetSessionObserverOnStart(v2, *a1);
  RENetSessionObserverOnStop(v2, a1[1]);
  RENetSessionObserverOnReceiveUserData(v2, a1[4]);
  RENetSessionObserverOnParticipantJoin(v2, a1[2]);
  RENetSessionObserverOnParticipantLeave(v2, a1[3]);
  return v2;
}

uint64_t RENetSessionObserverOnStart(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnStart();
  }
  return result;
}

uint64_t RENetSessionObserverOnStop(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnStop();
  }
  return result;
}

uint64_t RENetSessionObserverOnReceiveUserData(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnReceiveUserData();
  }
  return result;
}

uint64_t RENetSessionObserverOnParticipantJoin(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnParticipantJoin();
  }
  return result;
}

uint64_t RENetSessionObserverOnParticipantLeave(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnParticipantLeave();
  }
  return result;
}

uint64_t __RENetSessionObserverOnStart_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetSessionObserverOnStop_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetSessionObserverOnParticipantJoin_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetSessionObserverOnParticipantLeave_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetSessionObserverOnReceiveUserData_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetSessionObserverOnReceiveData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return RESyncNetSessionObserverOnReceiveData();
  }
  return result;
}

uint64_t __RENetSessionObserverOnReceiveData_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetSessionObserverOnLeaderChanged(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnLeaderChanged();
  }
  return result;
}

uint64_t __RENetSessionObserverOnLeaderChanged_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetSessionObserverOnConnectionConnected(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnConnectionConnected();
  }
  return result;
}

uint64_t __RENetSessionObserverOnConnectionConnected_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetSessionObserverOnConnectionDisconnected(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncNetSessionObserverOnConnectionDisconnected();
  }
  return result;
}

uint64_t __RENetSessionObserverOnConnectionDisconnected_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetSessionDropParticipant()
{
  return MEMORY[0x270F591E0]();
}

uint64_t RENetSessionSetDisconnectTimeout()
{
  return MEMORY[0x270F592D0]();
}

uint64_t RENetSessionGetIsLocal(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return RESyncNetSessionGetIsLocal();
}

uint64_t RENetSessionIncomingUpdate()
{
  return MEMORY[0x270F59210]();
}

uint64_t RENetSessionOutgoingUpdate()
{
  return MEMORY[0x270F59298]();
}

double RENetSessionLastStatsAggregated@<D0>(uint64_t a1@<X8>)
{
  RESyncNetSessionLastStatsAggregated();
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0uLL;
  return result;
}

double RENetSessionAveragedStatsAggregated@<D0>(uint64_t a1@<X8>)
{
  RESyncNetSessionAveragedStatsAggregated();
  *(_OWORD *)a1 = 0uLL;
  double result = 0.0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t RENetSessionCopyLocalAddresses()
{
  return MEMORY[0x270F591D0]();
}

uint64_t RENetParticipantGetIdentity()
{
  return MEMORY[0x270F59368]();
}

uint64_t RENetParticipantGetUserContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RESyncParticipantGetUserContext();
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t RENetParticipantGetAddress()
{
  return MEMORY[0x270F59360]();
}

uint64_t RENetLeaderElectionCreateConsensus(uint64_t a1, re::RENetLeaderElectionConsensus **a2)
{
  return re::RENetLeaderElectionConsensus::create(0, a2);
}

uint64_t RENetSessionConfigurationSetAllowLeaderMigration(uint64_t a1, int a2)
{
  if (a2)
  {
    RESyncLeaderElectionCreateLowestPeerID();
    RESyncNetSessionConfigurationSetLeaderElection();
    return RESyncRelease();
  }
  else
  {
    return RESyncNetSessionConfigurationSetLeaderElection();
  }
}

uint64_t RENetSessionConfigurationSetLeaderElectionPolicy(uint64_t a1, re::RENetLeaderElectionConsensus **a2)
{
  if (a2 == 1)
  {
    RESyncLeaderElectionCreateLowestPeerID();
    goto LABEL_5;
  }
  if (a2 == 2)
  {
    re::RENetLeaderElectionConsensus::create(0, a2);
LABEL_5:
    RESyncNetSessionConfigurationSetLeaderElection();
    return RESyncRelease();
  }
  return RESyncNetSessionConfigurationSetLeaderElection();
}

uint64_t RENetSessionConfigurationSetUserContext()
{
  return RESyncNetSessionConfigurationSetUserContext();
}

uint64_t RENetSessionConfigurationSetIsPrivileged()
{
  return MEMORY[0x270F59178]();
}

uint64_t RENetSessionConfigurationSetUnreliableSyncEnabled()
{
  return MEMORY[0x270F591C0]();
}

uint64_t RENetSessionConfigurationSetUnreliableResendTimeout()
{
  return MEMORY[0x270F591B8]();
}

uint64_t RENetSessionConfigurationSetCompressionMethod()
{
  return MEMORY[0x270F59148]();
}

uint64_t RENetSessionConfigurationSetSyncDeltaCompression()
{
  return MEMORY[0x270F59198]();
}

uint64_t RENetSessionConfigurationSetInitTimeOutMs()
{
  return MEMORY[0x270F59160]();
}

uint64_t RENetSessionConfigurationSetHandshakeTimeOutMs()
{
  return MEMORY[0x270F59158]();
}

uint64_t RENetSessionConfigurationSetMaxUnreliablePacketSize()
{
  return MEMORY[0x270F59188]();
}

uint64_t RENetSessionConfigurationSetIsLocal()
{
  return MEMORY[0x270F59170]();
}

uint64_t RENetSessionConfigurationSetTransportIsThrottled()
{
  return MEMORY[0x270F591A8]();
}

uint64_t RENetSessionConfigurationSetTransportIsFragmented()
{
  return MEMORY[0x270F591A0]();
}

uint64_t RENetSessionConfigurationSetShutdownOnVersionMismatch()
{
  return MEMORY[0x270F59190]();
}

void introspect_RENetCompatibilityTokenVersion(BOOL a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA01F0, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AFA01F0);
    if (v24)
    {
      id v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = 1;
      *(void *)(v26 + 16) = "Version1";
      qword_26AFA01E8 = v26;
      __cxa_guard_release(&qword_26AFA01F0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA01F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA01F8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AFA0238, "RENetCompatibilityTokenVersion", 1, 1, 1, 1);
    qword_26AFA0238 = (uint64_t)&unk_26E715E00;
    qword_26AFA0278 = (uint64_t)&introspect_RENetCompatibilityTokenVersion(BOOL)::enumTable;
    dword_26AFA0248 = 9;
    __cxa_guard_release(&qword_26AFA01F8);
  }
  if ((_MergedGlobals_525 & 1) == 0)
  {
    _MergedGlobals_525 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AFA0238, a2);
    uint64_t v28 = 0x2734E6B19552CDCALL;
    unint64_t v29 = "RENetCompatibilityTokenVersion";
    v32[0] = 0x31CD534126;
    v32[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v32);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v32);
      uint64_t v4 = (unsigned int *)qword_26AFA0278;
      v31[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v32, &v28, 1, 1, (uint64_t)v31);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v30.var0 = 2 * v10;
            v30.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v32, v14, &v30);
            re::StringID::destroyString((re::StringID *)&v30);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              id v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unsigned int v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v30.var0 = 2 * v18;
              v30.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v32, v22, &v30);
              re::StringID::destroyString((re::StringID *)&v30);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v32, v23);
      xmmword_26AFA0258 = (__int128)v30;
      re::StringID::destroyString((re::StringID *)&v28);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v32);
      re::internal::assertLog((re::internal *)5, v27, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RENetCompatibilityTokenVersion", v28, v29);
      _os_crash();
      __break(1u);
    }
  }
}

void *allocInfo_RENetCompatibilityToken(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0200))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AFA0280, "RENetCompatibilityToken");
    __cxa_guard_release(&qword_26AFA0200);
  }
  return &unk_26AFA0280;
}

void initInfo_RENetCompatibilityToken(re::IntrospectionBase *a1)
{
  v12[0] = 0xB1AFC2F05AA56CE6;
  v12[1] = "RENetCompatibilityToken";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)a1 + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0208, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = (re *)__cxa_guard_acquire(&qword_26AFA0208);
    if (v3)
    {
      uint64_t v4 = re::introspectionAllocator(v3);
      introspect_RENetCompatibilityTokenVersion((BOOL)v4, v5);
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "version";
      *(void *)(v6 + 16) = &qword_26AFA0238;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0x1800000001;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AFA0228 = v6;
      id v7 = re::introspectionAllocator((re *)v6);
      float v9 = re::introspect_uint32_t((re *)1, v8);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "sessionProtocolVersion";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1C00000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AFA0230 = v10;
      __cxa_guard_release(&qword_26AFA0208);
    }
  }
  *((void *)a1 + 2) = 0x2000000008;
  *((_DWORD *)a1 + 6) = 8;
  *((_WORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 14) = 2;
  *((void *)a1 + 8) = &qword_26AFA0228;
  *((void *)a1 + 9) = re::internal::defaultConstruct<RENetCompatibilityToken>;
  *((void *)a1 + 10) = re::internal::defaultDestruct<RENetCompatibilityToken>;
  *((void *)a1 + 11) = re::internal::defaultRetain<RENetCompatibilityToken>(void)::{lambda(void *)#1}::__invoke;
  *((void *)a1 + 12) = re::internal::defaultRelease<RENetCompatibilityToken>(void)::{lambda(void *)#1}::__invoke;
  *((void *)a1 + 13) = re::internal::defaultConstructV2<RENetCompatibilityToken>;
  *((void *)a1 + 14) = re::internal::defaultDestructV2<RENetCompatibilityToken>;
  re::IntrospectionRegistry::add(a1, v2);
  long long v11 = v13;
}

void re::internal::defaultConstruct<RENetCompatibilityToken>(_anonymous_namespace_ *a1, uint64_t a2, ArcSharedObject *a3)
{
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a3, 0);
  *(void *)a3 = &unk_26E735B30;
}

uint64_t re::internal::defaultDestruct<RENetCompatibilityToken>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<RENetCompatibilityToken>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)a1 = &unk_26E735B30;
}

uint64_t re::internal::defaultDestructV2<RENetCompatibilityToken>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void RENetCompatibilityCreateLocalToken(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 32, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E735B30;
  *(unsigned char *)(v2 + 24) = 1;
  *(_DWORD *)(v2 + 28) = 7;
}

re *RENetCompatibilityCreateDataFromToken(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0220))
  {
    qword_26AFA0218 = re::internal::getOrCreateInfo((re::internal *)"RENetCompatibilityToken", (uint64_t (*)(re::internal *))allocInfo_RENetCompatibilityToken, (re::IntrospectionBase *(*)(void))initInfo_RENetCompatibilityToken, (void (*)(re::IntrospectionBase *))&unk_26AFA0210, 0);
    __cxa_guard_release(&qword_26AFA0220);
  }
  long long v13 = *(_OWORD *)(qword_26AFA0218 + 32);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  re::TypeRegistry::typeInfo((re *)v13, (re **)&v13, v7);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v8);
  Mutable = CFDataCreateMutable(0, 256);
  uint64_t v3 = re::globalAllocators(Mutable);
  serializeJSON(a1, (const re::TypeInfo *)v11, (const re::TypeInfo *)v11, (re::Allocator *)v3[2], 0, Mutable, 0, (uint64_t)v7);
  if (!v7[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Failed to serialize RENetCompatibilityToken.", v6, 2u);
    }
    RESyncRelease();
    if (!v7[0] && v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
    Mutable = 0;
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  return Mutable;
}

uint64_t RENetCompatibilityCreateTokenFromData(const __CFData *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0220))
  {
    qword_26AFA0218 = re::internal::getOrCreateInfo((re::internal *)"RENetCompatibilityToken", (uint64_t (*)(re::internal *))allocInfo_RENetCompatibilityToken, (re::IntrospectionBase *(*)(void))initInfo_RENetCompatibilityToken, (void (*)(re::IntrospectionBase *))&unk_26AFA0210, 0);
    __cxa_guard_release(&qword_26AFA0220);
  }
  long long v14 = *(_OWORD *)(qword_26AFA0218 + 32);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
  re::TypeRegistry::typeInfo((re *)v14, (re **)&v14, buf);
  uint64_t v2 = (re *)re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v16[4]);
  uint64_t v3 = re::globalAllocators(v2);
  deserializeJSON(a1, (const re::TypeInfo *)v12, (const re::TypeInfo *)v12, (re::Allocator *)v3[2], 0, (uint64_t)buf);
  if (buf[0])
  {
    uint64_t v4 = *(void *)&v16[4];
  }
  else
  {
    float v5 = v19;
    char v6 = v18;
    v11[1] = v19;
    void v11[2] = v20;
    uint64_t v10 = v17;
    v11[0] = v18;
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v7 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (char *)v11 + 1;
      if (v6) {
        uint64_t v8 = v5;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v16 = v8;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Failed to deserialize RENetCompatibilityToken. Message: %s", buf, 0xCu);
    }
    if (v10 && (v11[0] & 1) != 0) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    uint64_t v4 = 0;
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
  return v4;
}

BOOL RENetCompatibilityCheckCompatibility(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28);
}

void RENetCompatibilityToken::~RENetCompatibilityToken(RENetCompatibilityToken *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

id re::internal::defaultRetain<RENetCompatibilityToken>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<RENetCompatibilityToken>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t REFrameAnalysisServiceGetBottleneckCount(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  return v1;
}

uint64_t REFrameAnalysisServiceGetBottleneck(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v4 <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v3 + a2);
  }
}

uint64_t REFrameAnalysisServiceHasModifiedRenderData(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
  }
  unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
  return v4(a1);
}

uint64_t REFrameAnalysisServiceOverrideHasModifiedRenderData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t REFrameAnalysisServiceHasModifiedEnvironmentLayerRenderData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t REFrameAnalysisServiceModifiedRenderDataAddIgnoredEntity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t REFrameAnalysisServiceModifiedRenderDataRemoveIgnoredEntity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t REFrameAnalysisServiceModifiedRenderDataClearIgnoredEntities(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t REFrameAnalysisServiceModifiedRenderDataSetDebugBlock(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t REFrameAnalysisServiceModifiedRenderDataEventType(unsigned int *a1)
{
  return *a1;
}

uint64_t REFrameAnalysisServiceModifiedRenderDataDirtiedComponentName(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t REFrameAnalysisServiceModifiedRenderDataDirtiedEntityName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t REFrameAnalysisServiceModifiedRenderDataDirtiedEntityInvisible(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t REFrameAnalysisServiceModifiedRenderDataQueryECSDirtied(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) & 1;
}

uint64_t REFrameAnalysisServiceModifiedRenderDataQueryVideoDirtied(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t REFrameAnalysisServiceModifiedRenderDataQueryCAREDirtied(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t REFrameAnalysisServiceModifiedRenderDataQueryDrawableQueueDirtied(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

uint64_t REFrameAnalysisServiceModifiedRenderDataQueryCustomMaterialDirtied(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 4) & 1;
}

void *REPreviewSupportGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double RETextureDrawableQueueDescriptorCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E735BD0;
  *(void *)(v2 + 32) = 0;
  *(void *)&double result = 0xFFFFLL;
  *(void *)(v2 + 40) = 0xFFFFLL;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetWidth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetHeight(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetPixelFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetTextureUsage(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetResourceOptions(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetMipMapMode(uint64_t result, int a2)
{
  *(unsigned char *)(result + 44) = a2 != 2;
  if (a2) {
    BOOL v2 = a2 == 3;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = v2;
  *(unsigned char *)(result + 45) = v3;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetShareable(uint64_t result, char a2)
{
  *(unsigned char *)(result + 46) = a2;
  return result;
}

uint64_t RETextureDrawableQueueDescriptorSetPresentsWithNextUpdate(uint64_t result, char a2)
{
  *(unsigned char *)(result + 47) = a2;
  return result;
}

uint64_t RETextureDrawableQueueCreateWithDescriptor(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::globalAllocators((re *)a1);
  float v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 448, 8);
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)float v5 = &unk_26E735C18;
  return result;
}

__n128 REDrawableQueueGetEyeTransform(uint64_t a1, int a2)
{
  uint64_t v2 = atomic_load((unsigned int *)(*(void *)(*(void *)(a1 + 432) + 32) + 12));
  int v3 = a2 & 1;
  if (a2 < 0) {
    int v3 = -v3;
  }
  return *(__n128 *)(*(void *)(*(void *)(a1 + 432) + 32) + (v2 << 7) + ((uint64_t)v3 << 6) + 80);
}

uint64_t RETextureDrawableQueueCreateNextDrawable(uint64_t a1)
{
  v3[0] = 0;
  uint64_t result = re::DrawableQueue::nextDrawable(a1, (uint64_t)v3);
  if (result)
  {
    re::make::shared::object<REDrawable,re::Drawable &>((re *)&v2, result);
    return v2;
  }
  return result;
}

uint64_t RETextureDrawableQueueCreateNextDrawableWithTimeout(uint64_t a1, float a2)
{
  v4[0] = 1;
  float v5 = a2;
  uint64_t result = re::DrawableQueue::nextDrawable(a1, (uint64_t)v4);
  if (result)
  {
    re::make::shared::object<REDrawable,re::Drawable &>((re *)&v3, result);
    return v3;
  }
  return result;
}

uint64_t RETextureDrawableQueueCreateNextDrawableWithTimeoutAndPollingInterval(uint64_t a1, float a2)
{
  v4[0] = 1;
  float v5 = a2;
  uint64_t result = re::DrawableQueue::nextDrawable(a1, (uint64_t)v4);
  if (result)
  {
    re::make::shared::object<REDrawable,re::Drawable &>((re *)&v3, result);
    return v3;
  }
  return result;
}

void RETextureAssetReplaceDrawableQueue(re::TextureAsset *a1, uint64_t a2, uint64_t a3)
{
  char v6 = re::TextureAsset::assetType(a1);
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a3 + 1040), (unint64_t)v6);
  re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v16);
  re::AssetHandle::loadNow((uint64_t)v17, 0);
  if (!v17) {
    goto LABEL_36;
  }
  unsigned int v8 = atomic_load((unsigned int *)v17 + 176);
  if (v8 != 2) {
    goto LABEL_36;
  }
  ++*((_DWORD *)v17 + 65);
  uint64_t v9 = (id *)re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v16);
  if (!v9) {
    goto LABEL_36;
  }
  uint64_t v10 = v9;
  if (v9[14])
  {
    if (a2)
    {
      long long v11 = re::AssetHandle::assetInfo((re::AssetHandle *)&v16);
      int v19 = *v11;
      re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)(v11 + 2));
      re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)(v11 + 10));
      int v12 = v11[22];
      uint64_t v13 = *((void *)v11 + 10);
      void v21[4] = *((void *)v11 + 9);
      v21[5] = v13;
      int v22 = v12;
      re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v11 + 24));
      re::DynamicString::DynamicString((re::DynamicString *)v24, (const re::DynamicString *)(v11 + 32));
      re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v11 + 40));
      re::DynamicString::DynamicString((re::DynamicString *)v26, (const re::DynamicString *)(v11 + 48));
      re::TextureAssetLoader::setDirectTextureForTextureAsset(v7, v10, 0, (uint64_t)&v19);
      if (v26[0])
      {
        if (v26[1]) {
          (*(void (**)(void))(*(void *)v26[0] + 40))();
        }
        memset(v26, 0, 32);
      }
      if (v25[0])
      {
        if (v25[1]) {
          (*(void (**)(void))(*(void *)v25[0] + 40))();
        }
        memset(v25, 0, sizeof(v25));
      }
      if (v24[0])
      {
        if (v24[1]) {
          (*(void (**)(void))(*(void *)v24[0] + 40))();
        }
        memset(v24, 0, sizeof(v24));
      }
      if (v23[0])
      {
        if (v23[1]) {
          (*(void (**)(void))(*(void *)v23[0] + 40))();
        }
        memset(v23, 0, sizeof(v23));
      }
      if (v21[0])
      {
        if (v21[1]) {
          (*(void (**)(void))(*(void *)v21[0] + 40))();
        }
        memset(v21, 0, 32);
      }
      if (v20[0])
      {
        if (v20[1]) {
          (*(void (**)(void))(*(void *)v20[0] + 40))();
        }
        memset(v20, 0, sizeof(v20));
      }
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v18 = a2;
    re::TextureAssetLoader::setDrawableQueueForTextureAsset(v7, v9, &v18);
    goto LABEL_33;
  }
  if (!a2) {
    goto LABEL_32;
  }
LABEL_31:
  id v14 = (id)(a2 + 8);
  uint64_t v18 = a2;
  re::TextureAssetLoader::setDrawableQueueForTextureAsset(v7, v10, &v18);

LABEL_33:
  uint64_t v15 = *((void *)v10[12] + 50);
  if (v15) {
    re::AssetHandle::operator=(v15 + 32, &v16);
  }
  re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v17);
  re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v17);
LABEL_36:
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v16);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
}

void RETextureAssetRemoveDrawableQueue(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10)
  {
    unsigned int v2 = atomic_load((unsigned int *)v10 + 176);
    if (v2 == 2)
    {
      uint64_t v3 = *((void *)v10 + 3);
      unint64_t v4 = re::TextureAsset::assetType(v1);
      uint64_t v5 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v3 + 1040), (unint64_t)v4);
      if (v10)
      {
        unsigned int v6 = atomic_load((unsigned int *)v10 + 176);
        if (v6 == 2)
        {
          uint64_t v7 = v5;
          ++*((_DWORD *)v10 + 65);
          unsigned int v8 = (void *)re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v9);
          if (v8)
          {
            uint64_t v11 = 0;
            re::TextureAssetLoader::setDrawableQueueForTextureAsset(v7, v8, &v11);
            re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v10);
            re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v10);
          }
        }
      }
      re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v9);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

id REDrawableGetTexture(uint64_t a1)
{
  id v1 = *(id *)(*(void *)(a1 + 24) + 16);
  return v1;
}

void REDrawablePresent(uint64_t a1)
{
  id v1 = *(re::DrawableQueue ***)(a1 + 24);
  re::DrawableQueue::checkAndGenerateMipmapsSynchronous(*v1, (re::Drawable *)v1);
  unsigned int v2 = *v1;
  int v3 = *((unsigned __int8 *)*v1 + 47);
  re::DrawableQueue::present(v2, (re::Drawable *)v1, v3);
}

void REDrawablePresentWithNextUpdate(uint64_t a1)
{
  id v1 = *(re::DrawableQueue ***)(a1 + 24);
  unsigned int v2 = *v1;
  re::DrawableQueue::checkAndGenerateMipmapsSynchronous(*v1, (re::Drawable *)v1);
  re::DrawableQueue::present(v2, (re::Drawable *)v1, 1);
}

void REDrawablePresentWithCommandBuffer(uint64_t a1, void *a2)
{
  v16[5] = *MEMORY[0x263EF8340];
  id v3 = a2;
  unint64_t v4 = v3;
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  if (*(unsigned char *)(*v5 + 47))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "REDrawablePresentWithCommandBuffer was called on a drawable queue with update synchronized presention! Please use REDrawablePresent instead. Skipping.", buf, 2u);
    }

    goto LABEL_12;
  }
  id v7 = v3;
  *(void *)long long buf = v7;
  if (!v7)
  {
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) CommandBuffer is not initialized!", "commandBuffer.isValid()", "REDrawablePresentWithCommandBuffer", 266);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Command buffer was committed before calling present() on the drawable", "status < mtl::CommandBufferStatus::kCommitted", "REDrawablePresentWithCommandBuffer", 269);
    _os_crash();
    __break(1u);
  }
  uint64_t v9 = v7;
  if ((int)[v7 status] >= 2) {
    goto LABEL_14;
  }
  uint64_t v11 = (re *)(id)(a1 + 8);
  uint64_t v12 = *v5;
  if (*(unsigned char *)(v12 + 45))
  {
    id v14 = v9;
    re::DrawableQueue::encodeMipmapsGenerationJob(v12, &v14, *(void *)(a1 + 24));
  }
  uint64_t v13 = re::globalAllocators(v11)[2];
  v16[0] = &unk_26E735B78;
  v16[1] = a1;
  void v16[3] = v13;
  void v16[4] = v16;
  re::mtl::CommandBuffer::addCompletionHandler((void **)buf, (uint64_t)v16);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v16);

LABEL_12:
}

void re::internal::Callable<REDrawablePresentWithCommandBuffer::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<REDrawablePresentWithCommandBuffer::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3 = *a2;
  re::DrawableQueue::present(**(re::DrawableQueue ***)(*(void *)(a1 + 8) + 24), *(re::Drawable **)(*(void *)(a1 + 8) + 24), *(unsigned __int8 *)(**(void **)(*(void *)(a1 + 8) + 24) + 47));
}

void *re::internal::Callable<REDrawablePresentWithCommandBuffer::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E735B78;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REDrawablePresentWithCommandBuffer::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E735B78;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REDrawablePresentWithCommandBuffer::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 16;
}

void REDrawableQueueDescriptor::~REDrawableQueueDescriptor(REDrawableQueueDescriptor *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void REDrawableQueue::~REDrawableQueue(REDrawableQueue *this)
{
  re::DrawableQueue::~DrawableQueue(this);
  JUMPOUT(0x237DBCBD0);
}

void re::make::shared::object<REDrawable,re::Drawable &>(re *a1, uint64_t a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 32, 8);
  ArcSharedObject::ArcSharedObject(v5, 0);
  *((void *)v5 + 3) = a2;
  *(void *)uint64_t v5 = &unk_26E735C60;
  *(void *)a1 = v5;
}

void REDrawable::~REDrawable(re::Drawable **this)
{
  *this = (re::Drawable *)&unk_26E735C60;
  re::Drawable::reclaimFromClient(this[3]);
  *this = (re::Drawable *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  *this = (re::Drawable *)&unk_26E735C60;
  re::Drawable::reclaimFromClient(this[3]);
  *this = (re::Drawable *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

void *REDebugMeshComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REDebugMeshComponentSetShaderDebugMode(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (re::DynamicString *)&v5);
  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REDebugMeshComponentGetShaderDebugMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return *(void *)(a1 + 48);
  }
  else {
    return a1 + 41;
  }
}

uint64_t REDebugMeshComponentReset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    *(void *)(this + 40) = 1;
    uint64_t v2 = *(unsigned char **)(this + 48);
  }
  else
  {
    *(unsigned char *)(this + 40) = v1 & 1;
    uint64_t v2 = (unsigned char *)(this + 41);
  }
  *uint64_t v2 = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

re::ecs2::Entity *RESceneAddDebugMeshComponent(re::ecs2::ComponentHelper *a1)
{
  uint64_t result = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t v2 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  uint64_t v3 = *((unsigned __int16 *)result + 41);
  if (!*((_WORD *)result + 41)) {
    goto LABEL_7;
  }
  unint64_t v4 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                       + 16);
  uint64_t v5 = (int16x8_t *)*((void *)result + 11);
  int16x8_t v6 = vld1q_dup_s16(v4);
  int v7 = 1;
  while (1)
  {
    uint16x8_t v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_23436BBD0);
    v8.i16[0] = vmaxvq_u16(v8);
    if (v8.i32[0]) {
      break;
    }
    v7 -= 8;
    ++v5;
    if (!--v3) {
      goto LABEL_7;
    }
  }
  if (v8.u16[0] - v7 >= *((unsigned __int16 *)result + 40))
  {
LABEL_7:
    uint64_t v9 = (re::ecs2::Entity *)((char *)result + 32);
    return (re::ecs2::Entity *)re::ecs2::EntityComponentCollection::add(v9, v2);
  }
  return result;
}

void RESceneRemoveDebugMeshComponent(re::ecs2::ComponentHelper *a1)
{
  uint64_t v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, 0);
  if (v1)
  {
    uint64_t v2 = (re::ecs2::Entity *)((char *)v1 + 32);
    uint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v3);
  }
}

uint64_t RESceneSetShaderDebugMode(re::ecs2::ComponentHelper *a1, const char *a2)
{
  uint64_t v3 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::DynamicString::operator=((re::DynamicString *)(v4 + 32), (re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t RESceneGetShaderDebugMode(re::ecs2::ComponentHelper *a1)
{
  uint64_t v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t v2 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(unsigned char *)(v2 + 40)) {
    return *(void *)(v2 + 48);
  }
  else {
    return v2 + 41;
  }
}

uint64_t RESceneDebugMeshComponentReset(re::ecs2::ComponentHelper *a1)
{
  uint64_t v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
  uint64_t v2 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v3)
  {
    *(void *)(v2 + 40) = 1;
    uint64_t v4 = *(unsigned char **)(v2 + 48);
  }
  else
  {
    *(unsigned char *)(v2 + 40) = v3 & 1;
    uint64_t v4 = (unsigned char *)(v2 + 41);
  }
  *uint64_t v4 = 0;
  return re::ecs2::Component::enqueueMarkDirty(v2);
}

void *RETintComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 *RETintComponentSetTintColor(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 RETintComponentGetTintColor(__n128 *a1)
{
  return a1[2];
}

uint64_t RETintComponentSetTintVirtualObject(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t RETintComponentGetTintVirtualObject(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void *REAccessibilityComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REAccessibilityComponentIsRoot(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REAccessibilityComponentSetIsRoot(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REAccessibilityComponentIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t REAccessibilityComponentSetEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t REAccessibilityComponentGetIdentifier(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48)) {
    return *(void *)(a1 + 56);
  }
  return a1 + 49;
}

unsigned __int8 *REAccessibilityComponentSetIdentifier(unsigned __int8 *a1, const char *a2)
{
  if (a2)
  {
    v9[1] = v6;
    void v9[4] = v8;
    *(_OWORD *)&void v9[2] = v7;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    long long v7 = 0uLL;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  LOBYTE(v9[0]) = v4;
  uint64_t result = re::Optional<re::DynamicString>::operator=(a1 + 32, v9);
  if (LOBYTE(v9[0]))
  {
    uint64_t result = (unsigned __int8 *)v9[1];
    if (v9[1])
    {
      if (v9[2]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v9[1] + 40))();
      }
      memset(&v9[1], 0, 32);
    }
  }
  if (a2)
  {
    uint64_t result = v6;
    if (v6)
    {
      if (v7) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
      }
    }
  }
  return result;
}

uint64_t REAccessibilityComponentGetLabel(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 88)) {
    return *(void *)(a1 + 96);
  }
  return a1 + 89;
}

unsigned __int8 *REAccessibilityComponentSetLabel(unsigned __int8 *a1, const char *a2)
{
  if (a2)
  {
    v9[1] = v6;
    void v9[4] = v8;
    *(_OWORD *)&void v9[2] = v7;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    long long v7 = 0uLL;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  LOBYTE(v9[0]) = v4;
  uint64_t result = re::Optional<re::DynamicString>::operator=(a1 + 72, v9);
  if (LOBYTE(v9[0]))
  {
    uint64_t result = (unsigned __int8 *)v9[1];
    if (v9[1])
    {
      if (v9[2]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v9[1] + 40))();
      }
      memset(&v9[1], 0, 32);
    }
  }
  if (a2)
  {
    uint64_t result = v6;
    if (v6)
    {
      if (v7) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
      }
    }
  }
  return result;
}

uint64_t REAccessibilityComponentGetDescription(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 128)) {
    return *(void *)(a1 + 136);
  }
  return a1 + 129;
}

unsigned __int8 *REAccessibilityComponentSetDescription(unsigned __int8 *a1, const char *a2)
{
  if (a2)
  {
    v9[1] = v6;
    void v9[4] = v8;
    *(_OWORD *)&void v9[2] = v7;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    long long v7 = 0uLL;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  LOBYTE(v9[0]) = v4;
  uint64_t result = re::Optional<re::DynamicString>::operator=(a1 + 112, v9);
  if (LOBYTE(v9[0]))
  {
    uint64_t result = (unsigned __int8 *)v9[1];
    if (v9[1])
    {
      if (v9[2]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v9[1] + 40))();
      }
      memset(&v9[1], 0, 32);
    }
  }
  if (a2)
  {
    uint64_t result = v6;
    if (v6)
    {
      if (v7) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
      }
    }
  }
  return result;
}

uint64_t REAccessibilityComponentGetCustomContentCount(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

CFStringRef REAccessibilityComponentGetCustomContentLabelAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 168) <= a2)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (unsigned char *)(*(void *)(a1 + 184) + 72 * a2);
  re::DynamicString::DynamicString((re::DynamicString *)&v6, (const re::DynamicString *)v2);
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(v2 + 32));
  LOBYTE(v10) = v2[64];
  if (BYTE8(v6)) {
    uint64_t v3 = (const char *)v7;
  }
  else {
    uint64_t v3 = (char *)&v6 + 9;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0x8000100u);
  if ((void)v8)
  {
    if (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    long long v8 = 0u;
    long long v9 = 0u;
  }
  if (void)v6 && (BYTE8(v6)) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v4;
}

CFStringRef REAccessibilityComponentGetCustomContentValueAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 168) <= a2)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (unsigned char *)(*(void *)(a1 + 184) + 72 * a2);
  re::DynamicString::DynamicString((re::DynamicString *)v6, (const re::DynamicString *)v2);
  re::DynamicString::DynamicString((re::DynamicString *)&v7, (const re::DynamicString *)(v2 + 32));
  LOBYTE(v9) = v2[64];
  if (BYTE8(v7)) {
    uint64_t v3 = (const char *)v8;
  }
  else {
    uint64_t v3 = (char *)&v7 + 9;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0x8000100u);
  if ((void)v7)
  {
    if (BYTE8(v7)) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
    long long v7 = 0u;
    long long v8 = 0u;
  }
  if (*(void *)&v6[0] && (BYTE8(v6[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v6[0] + 40))();
  }
  return v4;
}

BOOL REAccessibilityComponentGetCustomContentImportanceAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 168) <= a2)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (unsigned __int8 *)(*(void *)(a1 + 184) + 72 * a2);
  re::DynamicString::DynamicString((re::DynamicString *)v5, (const re::DynamicString *)v2);
  re::DynamicString::DynamicString((re::DynamicString *)&v6, (const re::DynamicString *)(v2 + 32));
  int v3 = v2[64];
  LOBYTE(v8) = v3;
  if ((void)v6)
  {
    if (BYTE8(v6)) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    long long v6 = 0u;
    long long v7 = 0u;
  }
  if (*(void *)&v5[0] && (BYTE8(v5[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v5[0] + 40))();
  }
  return v3 != 0;
}

uint64_t REAccessibilityComponentAddCustomContent(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v16, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(a2, 0x8000100u);
  re::DynamicString::operator=((re::DynamicString *)&v16, (re::DynamicString *)&v14);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  uint64_t v10 = (_anonymous_namespace_ *)CFStringGetCStringPtr(a3, 0x8000100u);
  re::DynamicString::operator=((re::DynamicString *)&v20, (re::DynamicString *)&v14);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v22 = a4 == 1;
  unint64_t v11 = *(void *)(a1 + 168);
  if (v11 >= *(void *)(a1 + 160))
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::growCapacity((void *)(a1 + 152), v11 + 1);
    unint64_t v11 = *(void *)(a1 + 168);
  }
  uint64_t v12 = (unsigned char *)(*(void *)(a1 + 184) + 72 * v11);
  re::DynamicString::DynamicString((re::DynamicString *)v12, (const re::DynamicString *)&v16);
  re::DynamicString::DynamicString((re::DynamicString *)(v12 + 32), (const re::DynamicString *)&v20);
  v12[64] = v22;
  ++*(void *)(a1 + 168);
  ++*(_DWORD *)(a1 + 176);
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    long long v20 = 0u;
    long long v21 = 0u;
  }
  uint64_t result = (uint64_t)v16;
  if (v16)
  {
    if (v17) {
      return (*(uint64_t (**)(void))(*v16 + 40))();
    }
  }
  return result;
}

uint64_t REAccessibilityComponentGetValue(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 208)) {
    return *(void *)(a1 + 216);
  }
  return a1 + 209;
}

unsigned __int8 *REAccessibilityComponentSetValue(unsigned __int8 *a1, const char *a2)
{
  if (a2)
  {
    v9[1] = v6;
    void v9[4] = v8;
    *(_OWORD *)&void v9[2] = v7;
    uint64_t v8 = 0;
    long long v6 = 0;
    long long v7 = 0uLL;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  LOBYTE(v9[0]) = v4;
  uint64_t result = re::Optional<re::DynamicString>::operator=(a1 + 192, v9);
  if (LOBYTE(v9[0]))
  {
    uint64_t result = (unsigned __int8 *)v9[1];
    if (v9[1])
    {
      if (v9[2]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v9[1] + 40))();
      }
      memset(&v9[1], 0, 32);
    }
  }
  if (a2)
  {
    uint64_t result = v6;
    if (v6)
    {
      if (v7) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
      }
    }
  }
  return result;
}

void REAccessibilityComponentClearCustomContent(uint64_t a1)
{
}

uint64_t REAccessibilityComponentGetTraits(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t REAccessibilityComponentSetTraits(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

uint64_t REAccessibilityComponentGetSystemRotorsCount(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t REAccessibilityComponentGetSystemRotorAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 256) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 272) + 8 * a2);
}

void *REAccessibilityComponentAddSystemRotor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((void *)(a1 + 240), &v3);
}

uint64_t REAccessibilityComponentClearSystemRotors(uint64_t result)
{
  *(void *)(result + 256) = 0;
  ++*(_DWORD *)(result + 264);
  return result;
}

uint64_t REAccessibilityComponentGetCustomRotorsCount(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

CFStringRef REAccessibilityComponentGetCustomRotorAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 296) <= a2)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v5, (const re::DynamicString *)(*(void *)(a1 + 312) + 32 * a2));
  if (BYTE8(v5)) {
    uint64_t v2 = (const char *)v6;
  }
  else {
    uint64_t v2 = (char *)&v5 + 9;
  }
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, 0x8000100u);
  if (void)v5 && (BYTE8(v5)) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return v3;
}

uint64_t REAccessibilityComponentAddCustomRotor(uint64_t a1, CFStringRef theString)
{
  uint64_t v2 = (_anonymous_namespace_ *)(a1 + 280);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(theString, 0x8000100u);
  double v4 = re::DynamicArray<re::DynamicString>::add(v2, &v6);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(double))(*(void *)v6 + 40))(v4);
    }
  }
  return result;
}

void REAccessibilityComponentClearCustomRotors(uint64_t a1)
{
}

uint64_t REAccessibilityComponentGetSystemActions(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t REAccessibilityComponentSetSystemActions(uint64_t result, uint64_t a2)
{
  *(void *)(result + 320) = a2;
  return result;
}

uint64_t REAccessibilityComponentGetCustomActionsCount(uint64_t a1)
{
  return *(void *)(a1 + 344);
}

CFStringRef REAccessibilityComponentGetCustomActionAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 344) <= a2)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v5, (const re::DynamicString *)(*(void *)(a1 + 360) + 32 * a2));
  if (BYTE8(v5)) {
    uint64_t v2 = (const char *)v6;
  }
  else {
    uint64_t v2 = (char *)&v5 + 9;
  }
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, 0x8000100u);
  if (void)v5 && (BYTE8(v5)) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return v3;
}

uint64_t REAccessibilityComponentAddCustomAction(uint64_t a1, CFStringRef theString)
{
  uint64_t v2 = (_anonymous_namespace_ *)(a1 + 328);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(theString, 0x8000100u);
  double v4 = re::DynamicArray<re::DynamicString>::add(v2, &v6);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(double))(*(void *)v6 + 40))(v4);
    }
  }
  return result;
}

void REAccessibilityComponentClearCustomActions(uint64_t a1)
{
}

uint64_t RECustomSystemCreateSystemDependency(re *a1, int a2, signed int a3, int a4)
{
  signed int v7 = (int)a1;
  long long v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 72, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v9, 0);
  *(void *)uint64_t v9 = &unk_26E735CA8;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_DWORD *)(v9 + 32) = -1;
  *(_DWORD *)(v9 + 40) = -1;
  *(_DWORD *)(v9 + 56) = -1;
  *(_DWORD *)(v9 + 64) = -1;
  unint64_t v11 = 0;
  if (!a2)
  {
    *(_DWORD *)(v9 + 40) = v7;
    if (!a4)
    {
      *(_DWORD *)(v9 + 64) = a3;
      return v9;
    }
    if (_REECSManagerGetEngineSystemTypeIDs(a3, &v11))
    {
      *(_OWORD *)(v9 + 48) = *v11;
      return v9;
    }
LABEL_8:

    return 0;
  }
  if (a4) {
    goto LABEL_8;
  }
  *(_DWORD *)(v9 + 64) = a3;
  if (!_REECSManagerGetEngineSystemTypeIDs(v7, &v11)) {
    goto LABEL_8;
  }
  *(_OWORD *)(v9 + 24) = *v11;
  return v9;
}

uint64_t REECSManagerAddCustomSystem(re *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 2)
  {
    *(_DWORD *)uint64_t v10 = *(_DWORD *)(a2 + 24);
    memset(&v10[4], 0, 20);
    int8x16_t v11 = vextq_s8(*(int8x16_t *)(a2 + 8), *(int8x16_t *)(a2 + 8), 8uLL);
    (*(void (**)(re *, unsigned char *))(*(void *)a1 + 64))(a1, v10);
    if (*(void *)(a2 + 32) && *(_DWORD *)(a2 + 40))
    {
      unint64_t v7 = 0;
      do
        (*(void (**)(re *, uint64_t))(*(void *)a1 + 72))(a1, *(void *)(*(void *)(a2 + 32) + 8 * v7++) + 24);
      while (v7 < *(unsigned int *)(a2 + 40));
    }

    return 0;
  }
  if (*(_DWORD *)a2 != 1) {
    return 0;
  }
  re::make::shared::object<re::ecs2::CustomSystem>(a1, v10);
  uint64_t v4 = *(void *)v10;
  *(_OWORD *)(*(void *)v10 + 120) = *(_OWORD *)(a2 + 8);
  uint64_t v9 = v4;
  id v5 = (id)(v4 + 8);
  (*(void (**)(re *, uint64_t *, uint64_t, void))(*(void *)a1 + 48))(a1, &v9, 0xFFFFFFFFLL, 0);
  if (v9)
  {

    uint64_t v9 = 0;
  }
  uint64_t v6 = *(void *)v10;
  if (*(void *)v10) {

  }
  return v6;
}

void REECSManagerRemoveCustomSystem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a2) {
    id v3 = (id)(a2 + 8);
  }
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 56))(a1, &v4, 0);
  if (v4) {
}
  }

uint64_t RECustomSystemEnqueueUpdate(re::ecs2::System *a1)
{
  return 1;
}

uint64_t RECustomSystemEnqueueUpdateWithDeadline(re::ecs2::System *a1, float a2)
{
  return 1;
}

uint64_t REECSManagerGetDefaultCustomSystemScheduleType(uint64_t a1)
{
  return *(unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
}

uint64_t REECSManagerSetDefaultCustomSystemScheduleType(uint64_t a1, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v5 = *(_DWORD *)(v4 + 8);
  uint64_t v7 = *(void *)v4;
  int v8 = v5;
  LOBYTE(v7) = a2;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 160))(a1, &v7);
  return 1;
}

uint64_t REECSManagerGetDefaultCustomSystemOverscheduleStrategy(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1) + 1);
}

uint64_t REECSManagerSetDefaultCustomSystemOverscheduleStrategy(uint64_t a1, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v5 = *(_DWORD *)(v4 + 8);
  uint64_t v7 = *(void *)v4;
  int v8 = v5;
  BYTE1(v7) = a2;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 160))(a1, &v7);
  return 1;
}

float REECSManagerGetDefaultCustomSystemUpdateInterval(uint64_t a1)
{
  return *(float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1) + 4);
}

uint64_t REECSManagerSetDefaultCustomSystemUpdateInterval(uint64_t a1, float a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v5 = *(_DWORD *)(v4 + 8);
  v7[0] = *(void *)v4;
  _OWORD v7[2] = v5;
  *(float *)&v7[1] = a2;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 160))(a1, v7);
  return 1;
}

uint64_t RECustomSystemGetScheduleType(uint64_t a1)
{
  uint64_t v1 = 72;
  if (!*(unsigned char *)(a1 + 68)) {
    uint64_t v1 = 52;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t RECustomSystemSetScheduleType(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = a1 + 72;
  }
  else {
    uint64_t v3 = a1 + 52;
  }
  uint64_t v5 = *(void *)v3;
  int v6 = *(_DWORD *)(v3 + 8);
  LOBYTE(v5) = a2;
  re::ecs2::System::setTaskOptions((void *)a1, &v5);
  if (*(unsigned char *)(a1 + 200) != 1) {
    *(unsigned char *)(a1 + 200) = 1;
  }
  return 1;
}

uint64_t RECustomSystemGetOverscheduleStrategy(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v1 = a1 + 72;
  }
  else {
    uint64_t v1 = a1 + 52;
  }
  return *(unsigned __int8 *)(v1 + 1);
}

uint64_t RECustomSystemSetOverscheduleStrategy(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = a1 + 72;
  }
  else {
    uint64_t v3 = a1 + 52;
  }
  uint64_t v5 = *(void *)v3;
  int v6 = *(_DWORD *)(v3 + 8);
  BYTE1(v5) = a2;
  re::ecs2::System::setTaskOptions((void *)a1, &v5);
  if (*(unsigned char *)(a1 + 200) != 1) {
    *(unsigned char *)(a1 + 200) = 1;
  }
  return 1;
}

float RECustomSystemGetUpdateInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v1 = a1 + 72;
  }
  else {
    uint64_t v1 = a1 + 52;
  }
  return *(float *)(v1 + 4);
}

uint64_t RECustomSystemSetUpdateInterval(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = a1 + 72;
  }
  else {
    uint64_t v3 = a1 + 52;
  }
  uint64_t v5 = *(void *)v3;
  int v6 = *(_DWORD *)(v3 + 8);
  *((float *)&v5 + 1) = a2;
  re::ecs2::System::setTaskOptions((void *)a1, &v5);
  if (*(unsigned char *)(a1 + 200) != 1) {
    *(unsigned char *)(a1 + 200) = 1;
  }
  return 1;
}

uint64_t RECustomSystemResetScheduleOptions(void *a1)
{
  return 1;
}

uint64_t RECustomSystemGetMaxOverscheduleSubsteps(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v1 = a1 + 72;
  }
  else {
    uint64_t v1 = a1 + 52;
  }
  return *(unsigned __int8 *)(v1 + 8);
}

uint64_t RECustomSystemSetMaxOverscheduleSubsteps(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = a1 + 72;
  }
  else {
    uint64_t v2 = a1 + 52;
  }
  int v5 = *(_DWORD *)(v2 + 8);
  uint64_t v4 = *(void *)v2;
  LOBYTE(v5) = a2;
  re::ecs2::System::setTaskOptions((void *)a1, &v4);
  return 1;
}

void *re::Shareable<re::ecs2::CustomSystemRegistry::SystemDependency>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::CustomSystemRegistry::SystemDependency>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *RENetworkSystemObserverOnEntityDidCreate(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 24) = result;
  return result;
}

void *RENetworkSystemObserverOnEntityDidUpdate(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void *RENetworkSystemObserverOnEntityWillDestroy(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void *RENetworkSystemObserverOnComponentDidUpdate(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 56) = result;
  return result;
}

uint64_t RENetworkSystemObserverCreate(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 1)
  {
    re::make::shared::object<NetworkSystemObserver>((re *)v6);
    uint64_t v2 = *(void *)v6;
    RENetworkSystemObserverOnEntityDidCreate(*(uint64_t *)v6, *(void **)(a1 + 8));
    RENetworkSystemObserverOnEntityDidUpdate(v2, *(void **)(a1 + 16));
    RENetworkSystemObserverOnEntityWillDestroy(v2, *(void **)(a1 + 24));
    RENetworkSystemObserverOnComponentDidUpdate(v2, *(void **)(a1 + 32));
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = CoreRELog::log;
    if (os_log_type_enabled((os_log_t)CoreRELog::log, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)a1;
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RENetworkSystemObserverCreate called with unknown version %d", (uint8_t *)v6, 8u);
    }
    return 0;
  }
  return v2;
}

uint64_t RENetworkSystemObserverCreateEx()
{
  re::make::shared::object<NetworkSystemObserver>((re *)&v1);
  return v1;
}

void *RENetworkSystemObserverOnComponentDidAdd(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 48);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void *RENetworkSystemObserverOnComponentWillRemove(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 64) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalEntityDidCreate(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 72);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 72) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalEntityDidUpdate(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 80);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 80) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalEntityWillDestroy(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 88);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalComponentDidAdd(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 96);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 96) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalComponentDidUpdate(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 104);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 104) = result;
  return result;
}

void *RENetworkSystemObserverOnLocalComponentWillRemove(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 112);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 112) = result;
  return result;
}

void *RENetworkSystemObserverOnSceneDidCreate(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 120);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 120) = result;
  return result;
}

void *RENetworkSystemObserverOnSceneWillDestroy(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 128);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 128) = result;
  return result;
}

void *RENetworkSystemObserverOnFoundDirty(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 136);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 136) = result;
  return result;
}

void *RENetworkSystemObserverOnDataDidArrive(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 144);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 144) = result;
  return result;
}

void *RENetworkSystemObserverOnTopLevelEntityDidCreate(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 152);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 152) = result;
  return result;
}

void *RENetworkSystemObserverOnReceiveQueueWarning(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 160);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 160) = result;
  return result;
}

void *RENetworkSystemObserverOnPeerDidBecomeUnresponsive(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 168);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 168) = result;
  return result;
}

void *RENetworkSystemObserverOnDidSyncECS(uint64_t a1, void *aBlock)
{
  int v4 = *(const void **)(a1 + 176);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 176) = result;
  return result;
}

double RENetworkSystemAddObserver(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = a2 + 1;
  if (a2[3])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::entityDidCreate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)a1, (uint64_t)&v18);
  }
  if (a2[4])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::entityDidUpdate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 88), (uint64_t)&v18);
  }
  if (a2[5])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::entityWillDestroy;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 176), (uint64_t)&v18);
  }
  if (a2[6])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::componentDidAdd;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 264), (uint64_t)&v18);
  }
  if (a2[7])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::componentDidUpdate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 352), (uint64_t)&v18);
  }
  if (a2[8])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::componentWillRemove;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 440), (uint64_t)&v18);
  }
  if (a2[9])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localEntityDidCreate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 528), (uint64_t)&v18);
  }
  if (a2[10])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localEntityDidUpdate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 616), (uint64_t)&v18);
  }
  if (a2[11])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localEntityWillDestroy;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 704), (uint64_t)&v18);
  }
  if (a2[12])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localComponentDidAdd;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 792), (uint64_t)&v18);
  }
  if (a2[13])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localComponentDidUpdate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 880), (uint64_t)&v18);
  }
  if (a2[14])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::localComponentWillRemove;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(a1 + 968), (uint64_t)&v18);
  }
  if (a2[15])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::sceneDidCreate;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Scene *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Scene *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Scene *>::Subscription const&,re::ecs2::Scene *&&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1056), (uint64_t)&v18);
  }
  if (a2[16])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::sceneWillDestroy;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem,re::ecs2::Scene *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Scene *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Scene *>::Subscription const&,re::ecs2::Scene *&&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1144), (uint64_t)&v18);
  }
  if (a2[17])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::didFindDirty;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem>::Subscription const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1848), (uint64_t)&v18);
  }
  if (a2[18])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::dataDidArrive;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem>::Subscription const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1232), (uint64_t)&v18);
  }
  if (a2[19])
  {
    *(void *)&long long v16 = a2;
    *((void *)&v16 + 1) = NetworkSystemObserver::topLevelEntityDidCreate;
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::Subscription const&,re::ecs2::Entity *&&,re::TLEInfo *&&,re::NewUnboundTLEHandlerResult *&&)#1}::__invoke;
    int v4 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1 + 1408, &v16, (uint64_t)&v18);
    if (!(_BYTE)v18)
    {
      if (*(_DWORD *)(a1 + 1488))
      {
        LOBYTE(v18) = 1;
        long long v19 = v16;
        long long v20 = v17;
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 1448, (uint64_t)&v18);
      }
      else
      {
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1408), (uint64_t)&v16);
      }
    }
  }
  if (a2[20])
  {
    *(void *)&long long v16 = a2;
    *((void *)&v16 + 1) = NetworkSystemObserver::receiveQueueWarning;
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = re::Event<re::NetworkSystem,int,unsigned long>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,int,unsigned long))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,int,unsigned long>::Subscription const&,int &&,unsigned long &&)#1}::__invoke;
    unint64_t v5 = *(void *)(a1 + 1952);
    int v6 = *(char **)(a1 + 1968);
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = 32 * v5;
      uint64_t v7 = *(char **)(a1 + 1968);
      while (*(void **)v7 != a2 || *((void *)v7 + 1) != *((void *)&v16 + 1) || *((void *)v7 + 2) != (void)v17)
      {
        v7 += 32;
        v8 -= 32;
        if (!v8)
        {
          uint64_t v7 = &v6[32 * v5];
          break;
        }
      }
    }
    if (v5 == (v7 - v6) >> 5)
    {
      if (*(_DWORD *)(a1 + 2016))
      {
        LOBYTE(v18) = 1;
        long long v19 = v16;
        long long v20 = v17;
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 1976, (uint64_t)&v18);
      }
      else
      {
        unint64_t v10 = *(void *)(a1 + 1944);
        if (v5 >= v10)
        {
          unint64_t v11 = v5 + 1;
          if (v10 < v5 + 1)
          {
            if (*(void *)(a1 + 1936))
            {
              unint64_t v12 = 2 * v10;
              if (!v10) {
                unint64_t v12 = 8;
              }
              if (v12 <= v11) {
                unint64_t v13 = v11;
              }
              else {
                unint64_t v13 = v12;
              }
              re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1936), v13);
            }
            else
            {
              re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1936), v11);
              ++*(_DWORD *)(a1 + 1960);
            }
          }
          unint64_t v5 = *(void *)(a1 + 1952);
          int v6 = *(char **)(a1 + 1968);
        }
        uint64_t v14 = &v6[32 * v5];
        *(_OWORD *)uint64_t v14 = v16;
        *((_OWORD *)v14 + 1) = v17;
        ++*(void *)(a1 + 1952);
        ++*(_DWORD *)(a1 + 1960);
      }
    }
  }
  if (a2[21])
  {
    *(void *)&long long v16 = a2;
    *((void *)&v16 + 1) = NetworkSystemObserver::peerDidBecomeUnresponsive;
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = re::Event<re::NetworkSystem,unsigned long long>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,unsigned long long))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,unsigned long long>::Subscription const&,unsigned long long &&)#1}::__invoke;
    re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1 + 2024, &v16, (uint64_t)&v18);
    if (!(_BYTE)v18)
    {
      if (*(_DWORD *)(a1 + 2104))
      {
        LOBYTE(v18) = 1;
        long long v19 = v16;
        long long v20 = v17;
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 2064, (uint64_t)&v18);
      }
      else
      {
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 2024), (uint64_t)&v16);
      }
    }
  }
  if (a2[22])
  {
    uint64_t v18 = a2;
    *(void *)&long long v19 = NetworkSystemObserver::didSyncECS;
    *((void *)&v19 + 1) = 0;
    *(void *)&long long v20 = re::Event<re::NetworkSystem>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem>::Subscription const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1672), (uint64_t)&v18);
  }
  uint64_t v18 = a2;
  *(void *)&long long v19 = NetworkSystemObserver::systemWillDestroy;
  *((void *)&v19 + 1) = 0;
  *(void *)&long long v20 = re::Event<re::NetworkSystem>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem>::Subscription const&)#1}::__invoke;
  return re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1320), (uint64_t)&v18);
}

void RENetworkSystemRemoveObserver(re::NetworkSystem *a1, NetworkSystemObserver *this)
{
  NetworkSystemObserver::unsubscribe(this, a1, 0);
}

void NetworkSystemObserver::unsubscribe(NetworkSystemObserver *this, re::NetworkSystem *a2, char a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((a3 & 1) == 0) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1320, (uint64_t)this);
  }
  if (*((void *)this + 18) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 144)) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1232, (uint64_t)this);
  }
  if (*((void *)this + 17) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 136)) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1848, (uint64_t)this);
  }
  if (*((void *)this + 3) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 24)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2, (uint64_t)this);
  }
  if (*((void *)this + 4) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 32)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 88, (uint64_t)this);
  }
  if (*((void *)this + 5) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 40)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 176, (uint64_t)this);
  }
  if (*((void *)this + 6) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 48)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 264, (uint64_t)this);
  }
  if (*((void *)this + 7) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 56)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 352, (uint64_t)this);
  }
  if (*((void *)this + 8) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 64)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 440, (uint64_t)this);
  }
  if (*((void *)this + 9) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 72)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 528, (uint64_t)this);
  }
  if (*((void *)this + 10) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 80)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 616, (uint64_t)this);
  }
  if (*((void *)this + 11) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 88)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 704, (uint64_t)this);
  }
  if (*((void *)this + 12) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 96)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 792, (uint64_t)this);
  }
  if (*((void *)this + 13) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 104)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 880, (uint64_t)this);
  }
  if (*((void *)this + 14) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 112)) {
    re::Event<re::NetworkSystem,re::ecs2::Component *>::unsubscribe<re::NetworkAssetManager>((uint64_t)a2 + 968, (uint64_t)this);
  }
  if (*((void *)this + 15) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 120)) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1056, (uint64_t)this);
  }
  if (*((void *)this + 16) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 128)) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1144, (uint64_t)this);
  }
  if (*((void *)this + 19)
    && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 152)
    && *((void *)a2 + 178))
  {
    unint64_t v5 = 0;
    do
    {
      int v6 = (_OWORD *)(*((void *)a2 + 180) + 32 * v5);
      if (*(NetworkSystemObserver **)v6 == this)
      {
        if (!*((_DWORD *)a2 + 372))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a2 + 176, v5);
          continue;
        }
        LOBYTE(v16[0]) = 0;
        *(_OWORD *)((char *)v16 + 8) = *v6;
        *(_OWORD *)((char *)&v16[1] + 8) = v6[1];
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add((uint64_t)a2 + 1448, (uint64_t)v16);
      }
      ++v5;
    }
    while (v5 < *((void *)a2 + 178));
  }
  if (*((void *)this + 20))
  {
    if (*((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 160))
    {
      unint64_t v7 = *((void *)a2 + 244);
      if (v7)
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = *((void *)a2 + 246);
          unint64_t v10 = (_OWORD *)(v9 + 32 * v8);
          if (*(NetworkSystemObserver **)v10 == this)
          {
            if (*((_DWORD *)a2 + 504))
            {
              LOBYTE(v16[0]) = 0;
              *(_OWORD *)((char *)v16 + 8) = *v10;
              *(_OWORD *)((char *)&v16[1] + 8) = v10[1];
              re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add((uint64_t)a2 + 1976, (uint64_t)v16);
              ++v8;
              unint64_t v7 = *((void *)a2 + 244);
            }
            else
            {
              if (v7 <= v8)
              {
                memset(v16, 0, sizeof(v16));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              uint64_t v11 = v7 - 1;
              if (v7 - 1 > v8)
              {
                unint64_t v12 = (char *)(v9 + 32 * v7);
                if (v12 != (char *)(v10 + 2))
                {
                  memmove(v10, v10 + 2, v12 - (char *)(v10 + 2));
                  uint64_t v11 = *((void *)a2 + 244) - 1;
                }
              }
              *((void *)a2 + 244) = v11;
              ++*((_DWORD *)a2 + 490);
              unint64_t v7 = v11;
            }
          }
          else
          {
            ++v8;
          }
        }
        while (v8 < v7);
      }
    }
  }
  if (*((void *)this + 21)
    && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 168)
    && *((void *)a2 + 255))
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = (_OWORD *)(*((void *)a2 + 257) + 32 * v13);
      if (*(NetworkSystemObserver **)v14 == this)
      {
        if (!*((_DWORD *)a2 + 526))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a2 + 253, v13);
          continue;
        }
        LOBYTE(v16[0]) = 0;
        *(_OWORD *)((char *)v16 + 8) = *v14;
        *(_OWORD *)((char *)&v16[1] + 8) = v14[1];
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add((uint64_t)a2 + 2064, (uint64_t)v16);
      }
      ++v13;
    }
    while (v13 < *((void *)a2 + 255));
  }
  if (*((void *)this + 22) && *((NetworkSystemObserver **)this + 23) != (NetworkSystemObserver *)((char *)this + 176)) {
    re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>((uint64_t)a2 + 1672, (uint64_t)this);
  }
  if (*((void *)this + 23))
  {
    *((unsigned char *)this + 192) = 1;
    char v15 = (char *)this + 8;
  }
}

uint64_t RENetworkSystemFindEntityWithGuid()
{
  uint64_t SyncableWithGuid = RESyncServiceFindSyncableWithGuid();
  re::ecs2::NetworkComponent::getEntityBoundTo(SyncableWithGuid, &v3);
  uint64_t v1 = v3;
  if (v3) {

  }
  return v1;
}

uint64_t RENetworkSystemGetLocalSession(uint64_t result)
{
  if (result) {
    return *(void *)(result + 2440);
  }
  return result;
}

uint64_t RENetworkSystemGetNetworkSession(uint64_t result)
{
  if (result) {
    return *(void *)(result + 2424);
  }
  return result;
}

re::NetworkSystem *RENetworkSystemEnableMultipeerConnectivity(re::NetworkSystem *this)
{
  if (this)
  {
    uint64_t v1 = this;
    this = (re::NetworkSystem *)*((void *)this + 319);
    if (!this)
    {
      re::NetworkSystem::initMCService(v1);
      return (re::NetworkSystem *)*((void *)v1 + 319);
    }
  }
  return this;
}

uint64_t NetworkSystemObserver::entityDidCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(v5 + 160) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::entityDidUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(v5 + 152) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::entityWillDestroy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(v5 + 144) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::componentDidAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v5 + 136) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::componentDidUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(v5 + 128) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::componentWillRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(v5 + 120) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localEntityDidCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 72;
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(v5 + 112) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localEntityDidUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 80;
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(v5 + 104) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localEntityWillDestroy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 88;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(v5 + 96) = v5;
  if (v4 && (*(unsigned char *)(a3 + 288) & 0x80) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localComponentDidAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 96;
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(v5 + 88) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localComponentDidUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 104;
  uint64_t v4 = *(void *)(a1 + 104);
  *(void *)(v5 + 80) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::localComponentWillRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)(v5 + 72) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 288) & 0x80) == 0) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
      }
    }
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::sceneDidCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 120;
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)(v5 + 64) = v5;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::sceneWillDestroy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 128;
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(v5 + 56) = v5;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::didFindDirty(uint64_t a1)
{
  uint64_t v3 = a1 + 136;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(v3 + 48) = v3;
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::dataDidArrive(uint64_t a1)
{
  uint64_t v3 = a1 + 144;
  uint64_t v2 = *(void *)(a1 + 144);
  *(void *)(v3 + 40) = v3;
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::topLevelEntityDidCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = a1 + 152;
  uint64_t v6 = *(void *)(a1 + 152);
  *(void *)(v7 + 32) = v7;
  if (v6) {
    *a5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, a3, a4);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::receiveQueueWarning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 + 160;
  uint64_t v5 = *(void *)(a1 + 160);
  *(void *)(v6 + 24) = v6;
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, a3, a4);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::peerDidBecomeUnresponsive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 168;
  uint64_t v4 = *(void *)(a1 + 168);
  *(void *)(v5 + 16) = v5;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a3);
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::didSyncECS(uint64_t a1)
{
  uint64_t v3 = a1 + 176;
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(v3 + 8) = v3;
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 192)) {
    return 0;
  }

  return 1;
}

uint64_t NetworkSystemObserver::systemWillDestroy(NetworkSystemObserver *this, re::NetworkSystem *a2)
{
  return 1;
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Scene *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Scene *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Scene *>::Subscription const&,re::ecs2::Scene *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::NetworkSystem>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem>::Subscription const&)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t (*)(void *, uint64_t))a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, uint64_t))(*v5 + v3);
  }
  return v3(v5, a1);
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::Subscription const&,re::ecs2::Entity *&&,re::TLEInfo *&&,re::NewUnboundTLEHandlerResult *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, void, void, void))a2[1];
  uint64_t v7 = a2[2];
  unint64_t v8 = (void *)(*a2 + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, void, void, void))(*v8 + v6);
  }
  return v6(v8, a1, *a3, *a4, *a5);
}

uint64_t re::Event<re::NetworkSystem,int,unsigned long>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,int,unsigned long))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,int,unsigned long>::Subscription const&,int &&,unsigned long &&)#1}::__invoke(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  uint64_t v5 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (void *)(*a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, void, void))(*v7 + v5);
  }
  return v5(v7, a1, *a3, *a4);
}

uint64_t re::Event<re::NetworkSystem,unsigned long long>::createSubscription<NetworkSystemObserver>(NetworkSystemObserver *,REEventHandlerResult (NetworkSystemObserver::*)(re::NetworkSystem*,unsigned long long))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,unsigned long long>::Subscription const&,unsigned long long &&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

void re::Event<re::NetworkSystem>::unsubscribe<NetworkSystemObserver>(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = (long long *)(*(void *)(a1 + 32) + 32 * v4);
      if (*(void *)v6 == a2)
      {
        if (!*(_DWORD *)(a1 + 80))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v4);
          continue;
        }
        v8[0] = 0;
        long long v7 = v6[1];
        long long v9 = *v6;
        long long v10 = v7;
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(v5, (uint64_t)v8);
      }
      ++v4;
    }
    while (v4 < *(void *)(a1 + 16));
  }
}

double re::make::shared::object<NetworkSystemObserver>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 200, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E735CF0;
  double result = 0.0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 177) = 0u;
  *(void *)a1 = v3;
  return result;
}

void NetworkSystemObserver::~NetworkSystemObserver(NetworkSystemObserver *this)
{
  NetworkSystemObserver::~NetworkSystemObserver(this);
  JUMPOUT(0x237DBCBD0);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  *(void *)this = &unk_26E735CF0;
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    _Block_release(v2);
    *((void *)this + 3) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 4);
  if (v3)
  {
    _Block_release(v3);
    *((void *)this + 4) = 0;
  }
  unint64_t v4 = (const void *)*((void *)this + 5);
  if (v4)
  {
    _Block_release(v4);
    *((void *)this + 5) = 0;
  }
  uint64_t v5 = (const void *)*((void *)this + 6);
  if (v5)
  {
    _Block_release(v5);
    *((void *)this + 6) = 0;
  }
  uint64_t v6 = (const void *)*((void *)this + 7);
  if (v6)
  {
    _Block_release(v6);
    *((void *)this + 7) = 0;
  }
  long long v7 = (const void *)*((void *)this + 8);
  if (v7)
  {
    _Block_release(v7);
    *((void *)this + 8) = 0;
  }
  unint64_t v8 = (const void *)*((void *)this + 9);
  if (v8)
  {
    _Block_release(v8);
    *((void *)this + 9) = 0;
  }
  long long v9 = (const void *)*((void *)this + 10);
  if (v9)
  {
    _Block_release(v9);
    *((void *)this + 10) = 0;
  }
  long long v10 = (const void *)*((void *)this + 11);
  if (v10)
  {
    _Block_release(v10);
    *((void *)this + 11) = 0;
  }
  uint64_t v11 = (const void *)*((void *)this + 12);
  if (v11)
  {
    _Block_release(v11);
    *((void *)this + 12) = 0;
  }
  unint64_t v12 = (const void *)*((void *)this + 13);
  if (v12)
  {
    _Block_release(v12);
    *((void *)this + 13) = 0;
  }
  unint64_t v13 = (const void *)*((void *)this + 14);
  if (v13)
  {
    _Block_release(v13);
    *((void *)this + 14) = 0;
  }
  uint64_t v14 = (const void *)*((void *)this + 15);
  if (v14)
  {
    _Block_release(v14);
    *((void *)this + 15) = 0;
  }
  char v15 = (const void *)*((void *)this + 16);
  if (v15)
  {
    _Block_release(v15);
    *((void *)this + 16) = 0;
  }
  long long v16 = (const void *)*((void *)this + 17);
  if (v16)
  {
    _Block_release(v16);
    *((void *)this + 17) = 0;
  }
  uint64_t v17 = (const void *)*((void *)this + 18);
  if (v17)
  {
    _Block_release(v17);
    *((void *)this + 18) = 0;
  }
  uint64_t v18 = (const void *)*((void *)this + 19);
  if (v18)
  {
    _Block_release(v18);
    *((void *)this + 19) = 0;
  }
  long long v19 = (const void *)*((void *)this + 20);
  if (v19)
  {
    _Block_release(v19);
    *((void *)this + 20) = 0;
  }
  long long v20 = (const void *)*((void *)this + 21);
  if (v20)
  {
    _Block_release(v20);
    *((void *)this + 21) = 0;
  }
  uint64_t v21 = (const void *)*((void *)this + 22);
  if (v21)
  {
    _Block_release(v21);
    *((void *)this + 22) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t REAssignedMeshDeformationAssetCreateWithMeshIdentifiers(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 40, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(void *)(v7 + 32) = 0;
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)v7, 0);
  ++*(_DWORD *)(v7 + 24);
  if (a2)
  {
    long long v9 = (const char **)(a3 + 16);
    do
    {
      LOBYTE(v17) = *((unsigned char *)v9 - 16);
      long long v10 = *(v9 - 1);
      v18[0] = 0;
      v18[1] = "";
      uint64_t v11 = *v9;
      v9 += 3;
      v19[0] = 0;
      v19[1] = "";
      re::DynamicArray<re::MeshIdentifierAsset>::add((void *)v7, (uint64_t)&v17);
      re::StringID::destroyString((re::StringID *)v19);
      re::StringID::destroyString((re::StringID *)v18);
      --a2;
    }
    while (a2);
  }
  unint64_t v13 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  (*(void (**)(uint64_t *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v17, a1, v7, v13, 0, 0, 0);
  uint64_t v14 = v17;
  if (v17) {
    id v15 = (id)(v17 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  return v14;
}

uint64_t REAssignedMeshDeformationAssetGetMeshIdentifierCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssignedMeshDeformationAssetGetAssignedMeshIdentifierType(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)v6);
  if (v3 && *(void *)(v3 + 16) > a2) {
    uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 + 32) + 40 * a2);
  }
  else {
    uint64_t v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

CFTypeRef REAssignedMeshDeformationAssetGetAssignedMeshIdentifierName(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)v7);
  if (v3 && *(void *)(v3 + 16) > a2)
  {
    CFStringRef v4 = CFStringCreateWithCString(0, *(const char **)(*(void *)(v3 + 32) + 40 * a2 + 16), 0x8000100u);
    CFTypeRef v5 = CFAutorelease(v4);
  }
  else
  {
    CFTypeRef v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

CFTypeRef REAssignedMeshDeformationAssetGetAssignedMeshIdentifierPartName(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)v7);
  if (v3 && *(void *)(v3 + 16) > a2)
  {
    CFStringRef v4 = CFStringCreateWithCString(0, *(const char **)(*(void *)(v3 + 32) + 40 * a2 + 32), 0x8000100u);
    CFTypeRef v5 = CFAutorelease(v4);
  }
  else
  {
    CFTypeRef v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

void *REMeshSortingComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

BOOL REMeshSortingComponentSortGroupIsValid(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

uint64_t REMeshSortingComponentSetSortingConfiguration(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  *(void *)(this + 304) = 0;
  *(void *)(this + 312) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetSortingConfiguration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REMeshSortingComponentSetPriorityInSortGroup(uint64_t this, int a2)
{
  *(_DWORD *)(this + 160) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetPriorityInSortGroup(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t REMeshSortingComponentSetMeshPartPrioritiesInSortGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a3;
  v5[1] = a2;
  re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(a1 + 320), (uint64_t)v5);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSortingComponentSetMeshPartDepthPrioritiesInSortGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a3;
  v5[1] = a2;
  re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(a1 + 360), (uint64_t)v5);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSortingComponentUnsetMeshPartPrioritiesInSortGroup(uint64_t this)
{
  *(void *)(this + 336) = 0;
  ++*(_DWORD *)(this + 344);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentUnsetMeshPartDepthPrioritiesInSortGroup(uint64_t this)
{
  *(void *)(this + 376) = 0;
  ++*(_DWORD *)(this + 384);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentSetDepthPriorityInSortGroup(uint64_t this, int a2)
{
  *(_DWORD *)(this + 164) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetDepthPriorityInSortGroup(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t RECreateMeshSortGroup()
{
  re::make::shared::object<re::ecs2::SharedMeshSortGroupToken>((re *)&v7);
  v3[0] = 0;
  char v4 = 0;
  char v5 = 0;
  char v6 = 0;
  re::ecs2::MeshSortGroupToken::createNewToken((uint64_t)v3, (uint64_t)v2);
  uint64_t v0 = v7;
  re::ecs2::MeshSortGroupToken::operator=(v7 + 32, (uint64_t)v2);
  return v0;
}

uint64_t RECreateMeshSortGroupWithConfiguration(char a1)
{
  re::make::shared::object<re::ecs2::SharedMeshSortGroupToken>((re *)&v6);
  v5[1] = 0;
  v5[16] = 0;
  v5[48] = 0;
  v5[80] = 0;
  v5[0] = a1;
  re::ecs2::MeshSortGroupToken::createNewToken((uint64_t)v5, (uint64_t)v4);
  uint64_t v2 = v6;
  re::ecs2::MeshSortGroupToken::operator=(v6 + 32, (uint64_t)v4);
  return v2;
}

BOOL REMeshSortGroupIsValid(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

uint64_t REMeshSortGroupGetSortingConfiguration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t REMeshSortingComponentMakeNewSortGroupOnComponent(uint64_t a1)
{
  v4[0] = 0;
  char v5 = 0;
  char v6 = 0;
  char v7 = 0;
  re::ecs2::MeshSortGroupToken::createNewToken(a1, (uint64_t)v4, (uint64_t)v3);
  re::ecs2::MeshSortGroupToken::operator=(a1 + 32, (uint64_t)v3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSortingComponentMakeNewSortGroupOnComponentWithConfiguration(uint64_t a1, char a2)
{
  v5[1] = 0;
  v5[16] = 0;
  v5[48] = 0;
  v5[80] = 0;
  v5[0] = a2;
  re::ecs2::MeshSortGroupToken::createNewToken(a1, (uint64_t)v5, (uint64_t)v4);
  re::ecs2::MeshSortGroupToken::operator=(a1 + 32, (uint64_t)v4);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSortingComponentSetSortGroup(__n128 *a1, __n128 *a2)
{
  if (a2)
  {
    re::ecs2::MeshSortGroupToken::operator=(a1 + 2, a2 + 2);
  }
  else
  {
    char v6 = 0;
    char v7 = 0;
    char v8 = 0;
    uint64_t v4 = 0;
    __int16 v5 = 0;
    re::ecs2::MeshSortGroupToken::operator=((uint64_t)&a1[2], (uint64_t)&v4);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMeshSortingComponentShareSortGroup(__n128 *a1, __n128 *a2)
{
  re::ecs2::MeshSortGroupToken::operator=(a2 + 2, a1 + 2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a2);
}

__n128 *REMeshSortingComponentCopySortGroup(__n128 *a1)
{
  re::make::shared::object<re::ecs2::SharedMeshSortGroupToken>((re *)&v5);
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v5;
  re::ecs2::MeshSortGroupToken::operator=(v5 + 2, v2);
  return v3;
}

BOOL REMeshSortingComponentCheckIfEqual(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t REMeshSortingComponentSetIsUI(uint64_t this, char a2)
{
  *(unsigned char *)(this + 168) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetIsUI(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

void re::make::shared::object<re::ecs2::SharedMeshSortGroupToken>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 160, 16);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E735D38;
  *(void *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)a1 = v3;
}

void re::ecs2::SharedMeshSortGroupToken::~SharedMeshSortGroupToken(re::ecs2::SharedMeshSortGroupToken *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RERealityArchiveCreateByOpeningFileAtPath(re::RealityArchive *a1, CFErrorRef *a2)
{
  *(void *)&v8[9] = *MEMORY[0x263EF8340];
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    *(void *)char v8 = a1;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "RERealityArchive: Opening file at path: %s", (uint8_t *)&v7, 0xCu);
  }

  re::RealityArchive::makeByOpeningFileAtPath(a1, 0, (uint64_t)&v7);
  if ((_BYTE)v7)
  {
    uint64_t v5 = *(void *)&v8[1];
    *(void *)&v8[1] = 0;
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      *a2 = CFErrorCreate(0, @"RERealityArchiveErrorDomain", 1, 0);
    }
  }
  re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)&v7);
  return v5;
}

uint64_t RERealityArchiveCreateFromFile(FILE *a1, CFErrorRef *a2)
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "RERealityArchive: Creating from file", v7, 2u);
  }

  re::RealityArchive::makeFromFile(a1, 0, (uint64_t)v7);
  if (v7[0])
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      *a2 = CFErrorCreate(0, @"RERealityArchiveErrorDomain", 1, 0);
    }
  }
  re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)v7);
  return v5;
}

__CFArray *RERealityArchiveCopyEntryNames(re::RealityArchive *a1)
{
  re::RealityArchive::entryNames(a1, (uint64_t)v7);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (v8)
  {
    uint64_t v2 = 32 * v8;
    uint64_t v3 = (const char **)(v9 + 16);
    do
    {
      if (*(unsigned char *)(v3 - 1)) {
        uint64_t v4 = *v3;
      }
      else {
        uint64_t v4 = (char *)v3 - 7;
      }
      CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v7);
  return Mutable;
}

uint64_t RERealityArchiveCreateDataByReadingEntry(re::RealityArchive *a1, char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::RealityArchive::newDataByLoadingEntryWithName(a1, a2, (uint64_t)v5);
  if (v5[0]) {
    return v6;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    if (v7) {
      uint64_t v4 = *(unsigned char **)&v8[7];
    }
    else {
      uint64_t v4 = v8;
    }
    *(_DWORD *)long long buf = 136315138;
    long long v10 = v4;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  if (v5[0]) {
    return 0;
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    return 0;
  }
  return result;
}

BOOL RERealityArchiveUnarchiveToDirectory(re::RealityArchive *a1, re *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)unint64_t v12 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "RERealityArchive: Unarchiving to directory %s.", buf, 0xCu);
  }

  re::RealityArchive::unarchiveToDirectory(a1, a2, (uint64_t)buf);
  int v5 = buf[0];
  if (!buf[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (v13) {
        uint64_t v8 = *(unsigned char **)&v14[7];
      }
      else {
        uint64_t v8 = v14;
      }
      int v9 = 136315138;
      long long v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v9, 0xCu);
    }

    if (!buf[0] && *(void *)&v12[4] && (v13 & 1) != 0) {
      (*(void (**)(void))(**(void **)&v12[4] + 40))();
    }
  }
  return v5 != 0;
}

BOOL RERealityArchiveArchiveFromDirectory(char *a1, char *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::RealityArchive::archiveFromDirectory(a1, a2, 2, (uint64_t)v6);
  int v2 = v6[0];
  if (!v6[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      if (v8) {
        int v5 = *(unsigned char **)&v9[7];
      }
      else {
        int v5 = v9;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v11 = v5;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }

    if (!v6[0] && v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
  }
  return v2 != 0;
}

BOOL RERealityArchiveArchiveFromDirectoryWithEnvelope(char *a1, char *a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::RealityArchive::archiveFromDirectory(a1, a2, a3, (uint64_t)v7);
  int v3 = v7[0];
  if (!v7[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if (v9) {
        uint64_t v6 = *(unsigned char **)&v10[7];
      }
      else {
        uint64_t v6 = v10;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = v6;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }

    if (!v7[0] && v8 && (v9 & 1) != 0) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
  }
  return v3 != 0;
}

uint64_t RERealityArchiveUpgradeToEnvelopeV2(const char *a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = a1;
    __int16 v8 = 2080;
    char v9 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "RERealityArchive: Upgrading %s to a envelope v2 reality file at %s.", (uint8_t *)&v6, 0x16u);
  }

  return reality_archive_file_upgrade(a1, a2, 0);
}

id *RESceneImportOperationCreateWithURL(void *a1, re *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    objc_storeStrong(v18 + 12, a1);
    uint64_t v4 = v18;
    *((unsigned char *)v18 + 28) = 1;
    id v5 = [v4[12] lastPathComponent];
    int v6 = (const char *)[v5 fileSystemRepresentation];

    uint64_t v7 = (atomic_uint *)v18[18];
    char v9 = re::SceneAsset::assetType(v8);
    re::AssetManager::generateRootAssetPathForImportedAsset(v7, (re **)v9, v6, &v12);
    uint64_t v10 = v18;
    *((_DWORD *)v18 + 50) = v12;
    re::DynamicString::operator=((re::DynamicString *)(v10 + 26), (re::DynamicString *)&v13);
    re::DynamicString::operator=((re::DynamicString *)(v10 + 30), (re::DynamicString *)&v15);
    uint64_t v11 = v15;
    v10[34] = v17;
    if (v11)
    {
      if (BYTE8(v15)) {
        (*(void (**)(uint64_t, void))(*(void *)v11 + 40))(v11, v16);
      }
      long long v15 = 0u;
      long long v16 = 0u;
    }
    if (v13)
    {
      if (v14) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
    }
    return v18;
  }
  return result;
}

uint64_t re::anonymous namespace'::createSceneImportOperation@<X0>(re *a1@<X0>, re::RESceneImportOperation **a2@<X8>)
{
  re::make::shared::object<re::RESceneImportOperation>(a1, a2);
  *((void *)*a2 + 17) = a1;
  *((void *)*a2 + 18) = re::ServiceLocator::serviceOrNull<re::AssetService>((uint64_t)a1);
  uint64_t v4 = (id *)re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>((uint64_t)a1);
  re::ImportGraphicsContext::ImportGraphicsContext((re::ImportGraphicsContext *)&v16, v4);
  id v5 = *a2;
  int v6 = (id *)((char *)*a2 + 152);
  if (v6 != &v16)
  {
    id v7 = v16;
    id v16 = 0;
    id v8 = *v6;
    id *v6 = v7;

    char v9 = v17;
    uint64_t v17 = 0;
    uint64_t v10 = (void *)*((void *)v5 + 20);
    *((void *)v5 + 20) = v9;
  }
  *((_WORD *)v5 + 84) = v18;
  *((unsigned char *)v5 + 170) = v19;
  if (*((unsigned char *)v5 + 171)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v20 == 0;
  }
  if (!v11)
  {
    if (*((unsigned char *)v5 + 171)) {
      BOOL v12 = v20 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      *((unsigned char *)v5 + 171) = 0;
    }
    else
    {
      if (*((unsigned char *)v5 + 171)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v20 == 0;
      }
      if (!v13) {
        *((unsigned char *)v5 + 171) = 1;
      }
      *((unsigned char *)v5 + 172) = v21;
    }
  }
  char v14 = v17;
  *((void *)v5 + 22) = v22;

  uint64_t result = re::ServiceLocator::serviceOrNull<re::ResourceSharingService>((uint64_t)a1);
  if (result) {
    *((unsigned char *)*a2 + 186) = 1;
  }
  return result;
}

id *RESceneImportOperationCreateWithBundleResource(void *a1, void *a2, re *a3)
{
  v37[5] = *MEMORY[0x263EF8340];
  id v5 = a1;
  int v6 = 0;
  if (v5 && a2 && a3)
  {
    id v7 = a2;
    id v8 = [v7 pathExtension];
    char v9 = [v8 isEqual:@"reality"];

    if (v9) {
      goto LABEL_20;
    }
    uint64_t v10 = 0;
    v37[0] = 0;
    v37[1] = @"usdz";
    v37[2] = @"usd";
    void v37[3] = @"usdc";
    uint64_t v37[4] = @"usda";
    do
    {
      id v11 = (id)v37[v10];
      BOOL v12 = [v5 URLForResource:v7 withExtension:v11];

      if (v12) {
        break;
      }
    }
    while (v10++ != 4);
    for (uint64_t i = 4; i != -1; --i)

    if (!v12)
    {
LABEL_20:
      int v6 = 0;
    }
    else
    {
      objc_storeStrong(v34 + 12, v12);
      *((unsigned char *)v34 + 28) = 1;
      id v15 = [v5 bundleIdentifier];
      uint64_t v16 = [v15 UTF8String];
      id v17 = [v12 lastPathComponent];
      __int16 v18 = (re::SceneAsset *)[v17 UTF8String];
      char v19 = re::SceneAsset::assetType(v18);
      re::DynamicString::format((re::DynamicString *)"%s/%s/root.%s", (re::DynamicString *)&v31, v16, v18, v19[1]);

      id v20 = [v7 lastPathComponent];
      char v21 = (const char *)[v20 fileSystemRepresentation];
      size_t v22 = strlen(v21);
      unint64_t v35 = v21;
      size_t v36 = v22;
      re::DynamicString::operator=((re::DynamicString *)(v34 + 4), (uint64_t)&v35);

      id v23 = [v5 bundleIdentifier];
      long long v24 = (const char *)[v23 UTF8String];
      size_t v25 = strlen(v24);
      unint64_t v35 = v24;
      size_t v36 = v25;
      re::DynamicString::operator=((re::DynamicString *)(v34 + 8), (uint64_t)&v35);

      uint64_t v27 = (char *)(v34 + 25);
      if (v32) {
        uint64_t v28 = *(char **)&v33[7];
      }
      else {
        uint64_t v28 = v33;
      }
      unint64_t v29 = re::SceneAsset::assetType(v26);
      re::AssetPath::initSingleFileArchiveAssetPath((uint64_t)v27, v28, (uint64_t)v29);
      int v6 = v34;
      uint64_t v34 = 0;
      if (v31)
      {
        if (v32)
        {
          (*(void (**)(void))(*(void *)v31 + 40))();
          if (v34) {
        }
          }
      }
    }
  }

  return v6;
}

void **RESceneImportOperationCreateWithUSKScene(void *a1, re *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    id v5 = a1;
    re::ObjCObject::operator=(v18 + 14, v5);

    int v6 = v18;
    *((_WORD *)v18 + 14) = 0;
    id v7 = (atomic_uint *)v6[18];
    char v9 = re::SceneAsset::assetType(v8);
    re::AssetManager::generateRootAssetPathForImportedAsset(v7, (re **)v9, 0, &v12);
    uint64_t v10 = v18;
    *((_DWORD *)v18 + 50) = v12;
    re::DynamicString::operator=((re::DynamicString *)(v10 + 26), (re::DynamicString *)&v13);
    re::DynamicString::operator=((re::DynamicString *)(v10 + 30), (re::DynamicString *)&v15);
    uint64_t v11 = v15;
    v10[34] = v17;
    if (v11)
    {
      if (BYTE8(v15)) {
        (*(void (**)(uint64_t, void))(*(void *)v11 + 40))(v11, v16);
      }
      long long v15 = 0u;
      long long v16 = 0u;
    }
    if (v13)
    {
      if (v14) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
    }
    return v18;
  }
  return result;
}

void **RESceneImportOperationCreateWithMDLAsset(void *a1, re *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    id v5 = a1;
    re::ObjCObject::operator=(v18 + 13, v5);

    id v7 = v18;
    *((_WORD *)v18 + 14) = 256;
    if (!*((unsigned char *)v7 + 193)) {
      *((unsigned char *)v7 + 193) = 1;
    }
    *((unsigned char *)v7 + 194) = 0;
    id v8 = (atomic_uint *)v7[18];
    char v9 = re::SceneAsset::assetType(v6);
    re::AssetManager::generateRootAssetPathForImportedAsset(v8, (re **)v9, 0, &v12);
    uint64_t v10 = v18;
    *((_DWORD *)v18 + 50) = v12;
    re::DynamicString::operator=((re::DynamicString *)(v10 + 26), (re::DynamicString *)&v13);
    re::DynamicString::operator=((re::DynamicString *)(v10 + 30), (re::DynamicString *)&v15);
    uint64_t v11 = v15;
    v10[34] = v17;
    if (v11)
    {
      if (BYTE8(v15)) {
        (*(void (**)(uint64_t, void))(*(void *)v11 + 40))(v11, v16);
      }
      long long v15 = 0u;
      long long v16 = 0u;
    }
    if (v13)
    {
      if (v14) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
    }
    return v18;
  }
  return result;
}

uint64_t RESceneImportOperationGetServiceLocator(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t RESceneImportOperationSetAssetManager(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(void *)(result + 144) = a2;
  }
  return result;
}

void RESceneImportOperationSetRenderManager(uint64_t a1, re::ImportGraphicsContext *this)
{
  if (!*(_DWORD *)(a1 + 24))
  {
    re::ImportGraphicsContext::createFromAvailableManagers(this, 0, (re::ImportGraphicsContext *)&v9);
    int v3 = (id *)(a1 + 152);
    if ((id *)(a1 + 152) != &v9)
    {
      id v4 = v9;
      id v9 = 0;
      id v5 = *v3;
      *int v3 = v4;
    }
    if (v3 != &v9)
    {
      int v6 = v10;
      uint64_t v10 = 0;
      id v7 = *(void **)(a1 + 160);
      *(void *)(a1 + 160) = v6;
    }
    *(_WORD *)(a1 + 168) = v11;
    *(unsigned char *)(a1 + 170) = v12;
    if (*(unsigned char *)(a1 + 171) || v13)
    {
      if (!*(unsigned char *)(a1 + 171) || v13)
      {
        if (!*(unsigned char *)(a1 + 171))
        {
          if (v13) {
            *(unsigned char *)(a1 + 171) = 1;
          }
        }
        *(unsigned char *)(a1 + 172) = v14;
      }
      else
      {
        *(unsigned char *)(a1 + 171) = 0;
      }
    }
    id v8 = v10;
    *(void *)(a1 + 176) = v15;
  }
}

uint64_t RESceneImportOperationSetIsolateFromEngine(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 184) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetCompressTextures(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 185) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetUnpackagedTextureMode(uint64_t result, int a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(_DWORD *)(result + 188) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetMergeIntoSingleEntity(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 192) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetPlayDefaultAnimationsImmediately(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    if (!*(unsigned char *)(result + 193)) {
      *(unsigned char *)(result + 193) = 1;
    }
    *(unsigned char *)(result + 194) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetEnableAnimationInterpolation(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 195) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetGenerateDecimatedMesh(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 196) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetVertexCacheOptimize(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 197) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationCopySourceURL(uint64_t a1)
{
  return [*(id *)(a1 + 96) copy];
}

CFStringRef RESceneImportOperationCopyRootSceneAssetPath(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  int v2 = (re::DynamicString *)(a1 + 200);
  uint64_t v3 = *(void *)(a1 + 208);
  id v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = v3;
  uint64_t v8 = 0;
  re::DynamicString::setCapacity(&v7, 0);
  re::AssetPath::fullAssetPath(v2, (re::DynamicString *)&v7);
  if (v8) {
    id v4 = v9;
  }
  else {
    id v4 = (char *)&v8 + 1;
  }
  CFStringRef v5 = CFStringCreateWithCString(v1, v4, 0x8000100u);
  if (v7 && (v8 & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  return v5;
}

_DWORD *RESceneImportOperationSetRootSceneAssetPath(_DWORD *result, char *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!result[6])
  {
    uint64_t v3 = result;
    uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)result + 24))(result);
    uint64_t v5 = *((void *)v3 + 18);
    int v13 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v14 = (_DWORD *)v4;
    uint64_t v15 = 0;
    re::DynamicString::setCapacity(&v14, 0);
    long long v19 = 0uLL;
    long long v18 = (unint64_t)v4;
    re::DynamicString::setCapacity(&v18, 0);
    uint64_t v20 = 0;
    re::AssetPath::parse((re::AssetPath *)&v13, a2, 0, *(const re::internal::AssetTypeRegistry **)(v5 + 1040), *(os_unfair_lock_s **)(v5 + 1128), v9);
    if (v9[0])
    {
      v3[50] = v13;
      re::DynamicString::operator=((re::DynamicString *)(v3 + 52), (re::DynamicString *)&v14);
      re::DynamicString::operator=((re::DynamicString *)(v3 + 60), (re::DynamicString *)&v18);
      *((void *)v3 + 34) = v20;
    }
    else
    {
      uint64_t v7 = *re::pipelineLogObjects(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        if (v11) {
          uint64_t v8 = *(unsigned char **)&v12[7];
        }
        else {
          uint64_t v8 = v12;
        }
        *(_DWORD *)long long buf = 136315138;
        size_t v22 = v8;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "RESceneImportOperationSetRootSceneAssetPath error: %s", buf, 0xCu);
      }
    }
    if (!v9[0] && v10 && (v11 & 1) != 0) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    if ((void)v18)
    {
      if (BYTE8(v18)) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      long long v18 = 0u;
      long long v19 = 0u;
    }
    uint64_t result = v14;
    if (v14)
    {
      if (v15) {
        return (_DWORD *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  return result;
}

double RESceneImportOperationSetMaterialDefinitionPath(_DWORD *a1, const char *a2)
{
  if (!a1[6])
  {
    uint64_t v4 = (re::Allocator *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    uint64_t v5 = (re::DynamicString *)(a1 + 70);
    if (a2 && *a2)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v7, a2, v4);
      re::DynamicString::operator=(v5, (re::DynamicString *)&v7);
      if (v7)
      {
        if (v8) {
          (*(void (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
    else
    {
      return re::DynamicString::deinit(v5);
    }
  }
  return result;
}

uint64_t RESceneImportOperationSetFunctionConstant(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  char v8 = a3;
  uint64_t v4 = (uint64_t)a1 + 320;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(v4, (re::DynamicString *)&v6, 2, &v8);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

uint64_t RESceneImportOperationSetUnitType(uint64_t result, int a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(_DWORD *)(result + 312) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetRetainSubdivisionSurfaceInfo(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 316) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetImportCustomBlendshapes(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 317) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetMakeAnimationsAdditive(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 318) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationSetImportAllMeshAttributes(uint64_t result, char a2)
{
  if (!*(_DWORD *)(result + 24)) {
    *(unsigned char *)(result + 198) = a2;
  }
  return result;
}

uint64_t RESceneImportOperationPreflight(uint64_t a1, CFErrorRef *a2)
{
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v3 = 0;
    if (a2) {
      *a2 = CFErrorCreate(0, @"REPipelineErrorDomain", 1, 0);
    }
  }
  else
  {
    uint64_t v5 = _os_activity_create(&dword_233120000, "RE scene import preflight", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &v9);
    uint64_t v6 = (void *)MEMORY[0x237DBDCF0]();
    os_activity_scope_leave(&v9);
  }
  return v3;
}

uint64_t re::anonymous namespace'::sceneImportPreflight(id *this, CFErrorRef *a2, __CFError **a3)
{
  v52[6] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 29))
  {
    if (!*((unsigned char *)this + 28)
      || (id v15 = objc_alloc(MEMORY[0x263F83F00]),
          id v16 = this[12],
          id v45 = 0,
          uint64_t v17 = (void *)[v15 initSceneFromURL:v16 error:&v45],
          id v18 = v45,
          re::ObjCObject::operator=(this + 14, v17),
          v17,
          this[14])
      && !v18)
    {
      size_t v22 = *re::pipelineLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        id v42 = this[12];
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v42;
        _os_log_debug_impl(&dword_233120000, v22, OS_LOG_TYPE_DEBUG, "Preflighting scene import with URL '%@'", buf, 0xCu);
      }
      uint64_t v23 = *((unsigned int *)this + 102);
      if (v23)
      {
        uint64_t v24 = 0;
        size_t v25 = (char *)this[49] + 8;
        while ((*v25 & 0x80000000) == 0)
        {
          v25 += 72;
          if (v23 == ++v24)
          {
            LODWORD(v24) = *((_DWORD *)this + 102);
            break;
          }
        }
      }
      else
      {
        LODWORD(v24) = 0;
      }
      if (v23 != v24)
      {
        uint64_t v31 = v24;
        do
        {
          re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)(this + 89), buf);
          if (*(void *)buf) {

          }
          if (*((_DWORD *)this + 102) <= (v24 + 1)) {
            int v32 = v24 + 1;
          }
          else {
            int v32 = *((_DWORD *)this + 102);
          }
          while (1)
          {
            uint64_t v31 = (v24 + 1);
            if (v32 - 1 == v24) {
              break;
            }
            LODWORD(v24) = v24 + 1;
            int v33 = v31;
            if ((*((_DWORD *)this[49] + 72 * v31 + 2) & 0x80000000) != 0) {
              goto LABEL_48;
            }
          }
          int v33 = v32;
LABEL_48:
          LODWORD(v24) = v33;
        }
        while (v23 != v33);
      }
      double v34 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v52);
      if ((void)v50)
      {
        if (BYTE8(v50)) {
          (*(void (**)(double))(*(void *)v50 + 40))(v34);
        }
        long long v50 = 0u;
        long long v51 = 0u;
      }

      unint64_t v35 = *(void **)v49;
      goto LABEL_72;
    }
    unint64_t v29 = *re::pipelineLogObjects(v19);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      id v44 = this[12];
      *(_DWORD *)__int16 v49 = 138412290;
      *(void *)&v49[4] = v44;
      _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Failed to open scene '%@'.", v49, 0xCu);
      if (a2) {
        goto LABEL_34;
      }
    }
    else if (a2)
    {
LABEL_34:
      if (v18) {
        CFErrorRef v30 = (CFErrorRef)v18;
      }
      else {
        CFErrorRef v30 = CFErrorCreate(0, @"REPipelineErrorDomain", 2, 0);
      }
      *a2 = v30;
    }

    return 0;
  }
  id v47 = this[13];
  if (!*((unsigned char *)this + 28)
    || (id v5 = objc_alloc(MEMORY[0x263F135E8]),
        id v6 = this[12],
        id v46 = 0,
        char v7 = (void *)[v5 initWithURL:v6 bufferAllocator:0 preserveIndexing:1 error:&v46],
        id v8 = v46,
        re::ObjCObject::operator=(&v47, v7),
        v7,
        v47)
    && !v8)
  {
    char v11 = *re::pipelineLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      id v41 = this[12];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v41;
      _os_log_debug_impl(&dword_233120000, v11, OS_LOG_TYPE_DEBUG, "Using Model I/O to import scene with URL '%@'", buf, 0xCu);
    }
    if (re::importSceneWithMDLAsset(this + 46, &v47, (uint64_t)v49, a2))
    {
      uint64_t v12 = *((unsigned int *)this + 102);
      if (v12)
      {
        uint64_t v13 = 0;
        char v14 = (char *)this[49] + 8;
        while ((*v14 & 0x80000000) == 0)
        {
          v14 += 72;
          if (v12 == ++v13)
          {
            LODWORD(v13) = *((_DWORD *)this + 102);
            break;
          }
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      if (v12 != v13)
      {
        uint64_t v36 = v13;
        do
        {
          re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)(this + 89), buf);
          if (*(void *)buf) {

          }
          if (*((_DWORD *)this + 102) <= (v13 + 1)) {
            int v37 = v13 + 1;
          }
          else {
            int v37 = *((_DWORD *)this + 102);
          }
          while (1)
          {
            uint64_t v36 = (v13 + 1);
            if (v37 - 1 == v13) {
              break;
            }
            LODWORD(v13) = v13 + 1;
            int v38 = v36;
            if ((*((_DWORD *)this[49] + 72 * v36 + 2) & 0x80000000) != 0) {
              goto LABEL_66;
            }
          }
          int v38 = v37;
LABEL_66:
          LODWORD(v13) = v38;
        }
        while (v12 != v38);
      }
      this[46] = this[18];
      double v39 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v52);
      if ((void)v50)
      {
        if (BYTE8(v50)) {
          (*(void (**)(double))(*(void *)v50 + 40))(v39);
        }
        long long v50 = 0u;
        long long v51 = 0u;
      }

      unint64_t v35 = v47;
LABEL_72:

      uint64_t result = 1;
      *((_DWORD *)this + 6) = 1;
      return result;
    }
    double v26 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v52);
    if ((void)v50)
    {
      if (BYTE8(v50)) {
        (*(void (**)(double))(*(void *)v50 + 40))(v26);
      }
      long long v50 = 0u;
      long long v51 = 0u;
    }

    goto LABEL_76;
  }
  uint64_t v27 = *re::pipelineLogObjects(v9);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    id v43 = this[12];
    *(_DWORD *)__int16 v49 = 138412546;
    *(void *)&v49[4] = v43;
    *(_WORD *)&v49[12] = 2112;
    *(void *)&v49[14] = v8;
    _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "Failed to open asset '%@': %@", v49, 0x16u);
    if (a2) {
      goto LABEL_30;
    }
  }
  else if (a2)
  {
LABEL_30:
    if (v8) {
      CFErrorRef v28 = (CFErrorRef)v8;
    }
    else {
      CFErrorRef v28 = CFErrorCreate(0, @"REPipelineErrorDomain", 2, 0);
    }
    *a2 = v28;
  }

LABEL_76:
  return 0;
}

uint64_t RESceneImportOperationGetTextureCount(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)) {
    return *(void *)(a1 + 728);
  }
  else {
    return 0;
  }
}

uint64_t RESceneImportOperationGetTexture(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 728) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 744) + 8 * a2);
}

uint64_t RESceneImportOperationEstimateMemoryCost(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 712);
    unint64_t v4 = *(void *)(a1 + 728);
    if (v4)
    {
      if (v4 >> 61)
      {
LABEL_21:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 8, v4);
        _os_crash();
        __break(1u);
LABEL_22:
        re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      id v5 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v3 + 32))(*(void *)(a1 + 712), 8 * v4, 8);
      if (!v5) {
        goto LABEL_22;
      }
      char v7 = v5;
      id v8 = v5;
      if (v4 != 1)
      {
        bzero(v5, 8 * v4 - 8);
        id v8 = &v7[v4 - 1];
      }
      void *v8 = 0;
      uint64_t v9 = *(void *)(a1 + 728);
      if (v9)
      {
        uint64_t v10 = 0;
        while (v4 != v10)
        {
          v7[v10] = *(void *)(*(void *)(*(void *)(a1 + 744) + 8 * v10) + 496);
          if (v9 == ++v10) {
            goto LABEL_16;
          }
        }
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      char v7 = 0;
    }
LABEL_16:
    id v13 = [*(id *)(a1 + 96) absoluteString];
    *(void *)long long buf = v7;
    *(void *)&uint8_t buf[8] = v4;
    uint64_t v12 = re::estimateSceneMemoryCost([v13 UTF8String], (uint64_t)buf, (id *)(a1 + 152));

    if (v3 && v4) {
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 40))(v3, v7);
    }
  }
  else
  {
    char v11 = *re::pipelineLogObjects((re *)a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RESceneImportOperationEstimateMemoryCost should only be called during SceneImportState::kPreflighted.", buf, 2u);
    }
    return 0;
  }
  return v12;
}

uint64_t RESceneImportOperationSetSceneCreateCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  return result;
}

void RESceneImportOperationSetSceneCreateCompletionHandler(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  unint64_t v4 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v3;
}

uint64_t RESceneImportOperationRun(uint64_t a1, CFErrorRef *a2)
{
  int v2 = a2;
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    uint64_t v3 = 0;
    if (a2) {
      *a2 = CFErrorCreate(0, @"REPipelineErrorDomain", 1, 0);
    }
  }
  else
  {
    id v5 = _os_activity_create(&dword_233120000, "RE scene import operation", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);
    id v8 = (void *)MEMORY[0x237DBDCF0]();
      goto LABEL_74;
    if (*(unsigned char *)(a1 + 29)) {
      goto LABEL_72;
    }
    uint64_t v9 = [*(id *)(a1 + 96) path];
    uint64_t v10 = [v9 pathExtension];

    char v11 = (re *)[v10 caseInsensitiveCompare:@"usdz"];
    if (!v11)
    {
      uint64_t v12 = (re *)[*(id *)(a1 + 96) fileSystemRepresentation];
      if (re::ZipArchiveGetDefaultLayerMTime(v12, 0, v13) >= 1688194860.0) {
        char v84 = 0;
      }
    }
    char v14 = *re::pipelineLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v67 = *(void *)(a1 + 96);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v67;
      _os_log_debug_impl(&dword_233120000, v14, OS_LOG_TYPE_DEBUG, "Importing scene with URL '%@'", (uint8_t *)&buf, 0xCu);
    }
    id v15 = (void **)(a1 + 112);
    char v16 = re::importSceneWithUSDScene(a1 + 368, (id *)(a1 + 112), (uint64_t)v81);
    if (v16)
    {
      if (!*(unsigned char *)(a1 + 193))
      {
        char v17 = *(unsigned char *)(a1 + 697);
        *(unsigned char *)(a1 + 193) = 1;
        *(unsigned char *)(a1 + 194) = v17;
      }
      id v80 = *(id *)(a1 + 704);
      re::convertActionAssetsToAssetPaths(&v80, (const re::AssetPath *)(a1 + 200), *(void *)(a1 + 144), &buf);
      objc_storeStrong((id *)(a1 + 752), (id)buf);

      if (*(void *)(a1 + 120) || *(void *)(a1 + 128))
      {
        char v68 = v16;
        int v77 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:*(unsigned int *)(a1 + 452)];
        uint64_t v18 = *(unsigned int *)(a1 + 456);
        uint64_t v70 = v8;
        uint64_t v71 = v5;
        unint64_t v69 = v10;
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = (int *)(*(void *)(a1 + 440) + 8);
          while (1)
          {
            int v21 = *v20;
            v20 += 20;
            if (v21 < 0) {
              break;
            }
            if (v18 == ++v19)
            {
              size_t v22 = v2;
              LODWORD(v19) = *(_DWORD *)(a1 + 456);
              goto LABEL_27;
            }
          }
          size_t v22 = v2;
        }
        else
        {
          size_t v22 = v2;
          LODWORD(v19) = 0;
        }
LABEL_27:
        if (v18 != v19)
        {
          uint64_t v23 = v19;
          do
          {
            uint64_t v24 = *(void *)(a1 + 440);
            uint64_t v25 = v24 + 80 * v23;
            if (*(unsigned char *)(v25 + 56)) {
              uint64_t v26 = *(void *)(v24 + 80 * v23 + 64);
            }
            else {
              uint64_t v26 = v24 + 80 * v23 + 57;
            }
            uint64_t v27 = [NSString stringWithUTF8String:v26];
            if (*(unsigned char *)(v24 + 80 * v23 + 24)) {
              uint64_t v28 = *(void *)(v24 + 80 * v23 + 32);
            }
            else {
              uint64_t v28 = v25 + 25;
            }
            unint64_t v29 = [NSString stringWithUTF8String:v28];
            [v77 setObject:v27 forKey:v29];

            unsigned int v30 = *(_DWORD *)(a1 + 456);
            if (v30 <= (int)v19 + 1) {
              unsigned int v30 = v19 + 1;
            }
            while (1)
            {
              uint64_t v23 = (v19 + 1);
              if (v30 - 1 == v19) {
                break;
              }
              LODWORD(v19) = v19 + 1;
              unsigned int v31 = v23;
              if ((*(_DWORD *)(*(void *)(a1 + 440) + 80 * v23 + 8) & 0x80000000) != 0) {
                goto LABEL_41;
              }
            }
            unsigned int v31 = v30;
LABEL_41:
            LODWORD(v19) = v31;
          }
          while (v18 != v31);
        }
        int v32 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:*(void *)(a1 + 672)];
        uint64_t v33 = *(void *)(a1 + 672);
        int v2 = v22;
        if (v33)
        {
          uint64_t v34 = *(void *)(a1 + 688);
          uint64_t v35 = v34 + 160 * v33;
          uint64_t v36 = v34 + 65;
          unint64_t v37 = 0x263F08000uLL;
          do
          {
            uint64_t v38 = v36 - 65;
            double v39 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v36 - 65];
            uint64_t v40 = v36;
            if (*(unsigned char *)(v36 - 1)) {
              uint64_t v40 = *(void *)(v36 + 7);
            }
            id v41 = [NSString stringWithUTF8String:v40];
            [v32 setObject:v39 forKey:v41];

            v36 += 160;
          }
          while (v38 + 160 != v35);
          uint64_t v42 = *(void *)(a1 + 672);
          if (v42)
          {
            uint64_t v43 = *(void *)(a1 + 688);
            uint64_t v44 = 160 * v42;
            uint64_t v72 = v32;
            do
            {
              uint64_t v75 = v44;
              *(void *)&long long buf = 0x5C9974BF2918;
              *((void *)&buf + 1) = "tempScene";
              re::make::shared::object<re::ecs2::Scene,re::ConstStringID>((re *)&buf, &v79);
              re::ecs2::ECSSerialization::loadFromAssetData(v79, *(AssetService **)(a1 + 144), *(void *)(v43 + 48));
              __int16 v76 = v79;
              id v45 = *(id *)(a1 + 96);
              id v46 = [v45 lastPathComponent];
              if (*(unsigned char *)(v43 + 64)) {
                uint64_t v47 = *(void *)(v43 + 72);
              }
              else {
                uint64_t v47 = v43 + 65;
              }
              unsigned int v48 = [NSString stringWithUTF8String:v47];
              __int16 v49 = (objc_class *)MEMORY[0x263F83EE8];
              id v50 = *(id *)(a1 + 112);
              long long v51 = (void *)[[v49 alloc] initWithString:v48];
              unint64_t v52 = [v50 nodeAtPath:v51];

              long long v53 = (void *)[objc_alloc(*(Class *)(v37 + 3128)) initWithUUIDBytes:v43];
              uint64_t v54 = *(void *)(a1 + 128);
              long long v55 = *(void **)(a1 + 112);
              if (v54)
              {
                int v73 = v48;
                id v74 = v45;
                uint64_t v56 = v46;
                unint64_t v57 = v2;
                uint64_t v58 = *(void (**)(uint64_t, uint64_t, void *, id, re::ecs2::Scene *, void *, void *))(v54 + 16);
                id v59 = v55;
                uint64_t v60 = v54;
                int v32 = v72;
                v58(v60, a1, v52, v59, v76, v53, v77);
                int v2 = v57;
                uint64_t v61 = (__CFError *)objc_claimAutoreleasedReturnValue();

                if (v57) {
                  *unint64_t v57 = v61;
                }

                unint64_t v37 = 0x263F08000;
                id v46 = v56;
                id v45 = v74;
                unsigned int v48 = v73;
              }
              else
              {
                int v32 = v72;
                (*(void (**)(void *, void *, re::ecs2::Scene *, void *, void *, void *, void *, CFErrorRef *))(a1 + 120))(v52, v55, v76, v53, v77, v72, v46, v2);
              }
              re::DynamicArray<re::ecs2::EntityAssetData>::clear(*(re::ecs2::EntityAssetData **)(v43 + 48));
              re::ecs2::ECSSerialization::saveIntoSceneAssetData(v79, *(void *)(v43 + 48), 0);

              if (v79) {
              v43 += 160;
              }
              uint64_t v44 = v75 - 160;
            }
            while (v75 != 160);
          }
        }

        id v8 = v70;
        id v5 = v71;
        uint64_t v10 = v69;
        char v16 = v68;
        id v15 = (void **)(a1 + 112);
      }
      re::ObjCObject::operator=(v15, 0);
      uint64_t v62 = *(void *)(a1 + 728);
      *(void *)(a1 + 728) = 0;
      if (v62)
      {
        uint64_t v63 = *(void *)(a1 + 744);
        uint64_t v64 = 8 * v62;
        do
        {
          if (*(void *)v63)
          {

            *(void *)uint64_t v63 = 0;
          }
          v63 += 8;
          v64 -= 8;
        }
        while (v64);
      }
      ++*(_DWORD *)(a1 + 736);
      *(void *)(a1 + 368) = *(void *)(a1 + 144);
    }
    else if (v2)
    {
      *int v2 = CFErrorCreate(0, @"REPipelineErrorDomain", 2, 0);
    }

    double v65 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v85);
    if ((void)v82)
    {
      if (BYTE8(v82)) {
        (*(void (**)(double))(*(void *)v82 + 40))(v65);
      }
      long long v82 = 0u;
      long long v83 = 0u;
    }

    if (v16)
    {
LABEL_72:
      *(_DWORD *)(a1 + 24) = 2;
      if (*(unsigned char *)(a1 + 184)) {
        uint64_t v3 = 1;
      }
      else {
    }
      }
    else
    {
LABEL_74:
      uint64_t v3 = 0;
    }
    os_activity_scope_leave(&state);
  }
  return v3;
}

uint64_t re::anonymous namespace'::sceneImportPublishToEngine(id *this, re::RESceneImportOperation *a2, __CFError **a3, const re::AssetPath *a4)
{
  id v30 = 0;
  if (*((unsigned char *)this + 29)) {
    re::ObjCObject::operator=(&v30, this + 19);
  }
  re::registerImportedScene((re *)(this + 46), (re::SceneImportResult *)&v30, (const re::mtl::Device *)(this + 25), a4);
  id v6 = this[84];
  if (v6)
  {
    uint64_t v7 = (uint64_t)this[86] + 104;
    uint64_t v8 = 160 * (void)v6;
    while (1)
    {
      if (*(void *)v7)
      {
        unsigned int v9 = atomic_load((unsigned int *)(*(void *)v7 + 704));
        if (v9 == 3) {
          break;
        }
      }
      v7 += 160;
      v8 -= 160;
      if (!v8) {
        goto LABEL_8;
      }
    }
    uint64_t v28 = 0;
    if (a2) {
      *(void *)a2 = CFErrorCreate(0, @"REPipelineErrorDomain", 2, 0);
    }
  }
  else
  {
LABEL_8:
    if (*((unsigned char *)this + 194))
    {
      id v10 = this[84];
      if (v10)
      {
        char v11 = (char *)this[86];
        uint64_t v12 = &v11[160 * (void)v10];
        do
        {
          re::AssetHandle::loadNow(*((void *)v11 + 13), 0);
          uint64_t v13 = *((void *)v11 + 13);
          if (v13)
          {
            unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
            if (v14 == 2)
            {
              ++*(_DWORD *)(*((void *)v11 + 13) + 260);
              uint64_t v15 = re::AssetHandle::loadedAsset<re::SceneAsset>((re::SceneAsset *)(v11 + 96));
              if (v15)
              {
                uint64_t v16 = *(void *)(v15 + 16);
                if (v16)
                {
                  uint64_t v17 = *(void *)(v15 + 32);
                  uint64_t v18 = v17 + 112 * v16;
                  do
                  {
                    if (*(void *)(v17 + 32))
                    {
                      uint64_t v19 = *(void *)(v17 + 48);
                      if (v19)
                      {
                        uint64_t v20 = (uint64_t *)(*(void *)(v17 + 64) + 8);
                        uint64_t v21 = 24 * v19;
                        while (*(v20 - 1) != *((void *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                              + 3) >> 1)
                        {
                          v20 += 3;
                          v21 -= 24;
                          if (!v21) {
                            goto LABEL_32;
                          }
                        }
                        uint64_t v22 = *v20;
                        if (v22)
                        {
                          uint64_t v23 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v22 + 32));
                          if (!*(void *)(v17 + 32)) {
                            goto LABEL_30;
                          }
                          uint64_t v24 = *(void *)(v17 + 48);
                          if (!v24) {
                            goto LABEL_30;
                          }
                          uint64_t v25 = (id ***)(*(void *)(v17 + 64) + 8);
                          uint64_t v26 = 24 * v24;
                          while (*(v25 - 1) != (id **)(*((void *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                        + 3) >> 1))
                          {
                            v25 += 3;
                            v26 -= 24;
                            if (!v26) {
                              goto LABEL_30;
                            }
                          }
                          uint64_t v27 = *v25;
                          if (!*v25) {
LABEL_30:
                          }
                            uint64_t v27 = re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationComponent>((_DWORD *)v17);
                          char v35 = 0;
                          uint64_t v34 = 0;
                          uint64_t v32 = 0;
                          long long v31 = 0uLL;
                          __int16 v33 = 0;
                          unsigned int v36 = 0x80000000;
                          unint64_t v37 = "";
                          uint64_t v38 = 0;
                          uint64_t v39 = 0;
                          re::AssetHandle::operator=((uint64_t)&v31, *(uint64_t **)(v23 + 152));
                          __int16 v33 = 256;
                          re::DynamicArray<re::ecs2::AnimationComponentEntry>::add((uint64_t)(v27 + 4), &v31);
                          re::ecs2::Component::markDirty(v27);
                          re::ecs2::AnimationComponentEntry::deinit((re::ecs2::AnimationComponentEntry *)&v31);
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v31);
                        }
                      }
                    }
LABEL_32:
                    v17 += 112;
                  }
                  while (v17 != v18);
                }
              }
            }
          }
          v11 += 160;
        }
        while (v11 != v12);
      }
    }
    *((_DWORD *)this + 6) = 3;
    uint64_t v28 = 1;
  }

  return v28;
}

uint64_t RESceneImportOperationPublishToEngine(uint64_t a1, re::RESceneImportOperation *a2)
{
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    unint64_t v4 = _os_activity_create(&dword_233120000, "RE scene import publish", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &v10);
    id v5 = (void *)MEMORY[0x237DBDCF0]();
    os_activity_scope_leave(&v10);
  }
  else
  {
    uint64_t v8 = 0;
    if (a2) {
      *(void *)a2 = CFErrorCreate(0, @"REPipelineErrorDomain", 4, 0);
    }
  }
  return v8;
}

id RESceneImportOperationGetUSKScene(uint64_t a1)
{
  if (*(int *)(a1 + 24) < 1) {
    id v1 = 0;
  }
  else {
    id v1 = *(id *)(a1 + 112);
  }
  return v1;
}

uint64_t RESceneImportOperationGetSceneCount(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) == 3) {
    return *(void *)(a1 + 672);
  }
  else {
    return 0;
  }
}

uint64_t RESceneImportOperationGetSceneAsset(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) == 3 && *(void *)(a1 + 672)) {
    return *(void *)(*(void *)(a1 + 688) + 96);
  }
  else {
    return 0;
  }
}

id RESceneImportOperationCopySceneIdentifierAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) == 3 && *(void *)(a1 + 672) > a2)
  {
    id v4 = objc_alloc(MEMORY[0x263F08C38]);
    if (*(void *)(a1 + 672) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    id v5 = (void *)[v4 initWithUUIDBytes:*(void *)(a1 + 688) + 160 * a2];
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

CFStringRef RESceneImportOperationCopySceneNameAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != 3 || *(void *)(a1 + 672) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 688);
  if (*(unsigned char *)(v2 + 160 * a2 + 24)) {
    uint64_t v3 = *(const char **)(v2 + 160 * a2 + 32);
  }
  else {
    uint64_t v3 = (const char *)(v2 + 160 * a2 + 25);
  }
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0x8000100u);
}

uint64_t RESceneImportOperationGetSceneAssetAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) == 3 && *(void *)(a1 + 672) > a2) {
    return *(void *)(*(void *)(a1 + 688) + 160 * a2 + 96);
  }
  else {
    return 0;
  }
}

BOOL RESceneImportOperationIsSceneActiveAtIndex(uint64_t a1, unint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == 3
      && *(void *)(a1 + 672) > a2
      && *(unsigned char *)(*(void *)(a1 + 688) + 160 * a2 + 88) != 0;
}

re::ecs2::Scene *RESceneImportOperationCreateHierarchyScene(uint64_t a1, _anonymous_namespace_ *a2)
{
  if (*(_DWORD *)(a1 + 24) != 1) {
    return 0;
  }
  char v45 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0x7FFFFFFFLL;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 0;
  uint64_t v17 = 0x7FFFFFFFLL;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  int v24 = 0;
  int v27 = 0;
  uint64_t v28 = 0x7FFFFFFFLL;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  uint64_t v41 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int v32 = 0;
  int v35 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  int v38 = 0;
  id v4 = (re::SceneAsset *)re::importSceneWithUSDScene((uint64_t)v12, (id *)(a1 + 112), (uint64_t)v42);
  if (*((void *)&v37 + 1)) {
    uint64_t v5 = *(void *)(v39 + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = re::SceneAsset::assetType(v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 192))(v11, v7, v5, v8, a1 + 200);
  id v6 = RESceneCreate(a2);
  RESceneLoadFromAsset(v6, *(AssetService **)(a1 + 144), v11[0]);
  re::DynamicArray<re::ImportedScene>::clear((uint64_t)&v36 + 8);
  re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)v11);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  re::SceneImportResult::~SceneImportResult((re::SceneImportResult *)v12);
  double v9 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v46);
  if ((void)v43)
  {
    if (BYTE8(v43)) {
      (*(void (**)(double))(*(void *)v43 + 40))(v9);
    }
    long long v43 = 0u;
    long long v44 = 0u;
  }

  return v6;
}

uint64_t re::anonymous namespace'::sceneImportOptionsForOperation(re::_anonymous_namespace_ *this, re::RESceneImportOperation *a2, id *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v6 = *a3;
  if (*a3 && *((unsigned char *)a2 + 186))
  {
    char v7 = [v6 supportsSharedTextureHandles];
    id v6 = *a3;
  }
  else
  {
    char v7 = 0;
  }
  *(void *)this = v6;
  *((void *)this + 1) = a3[1];
  *((_WORD *)this + 8) = *((_WORD *)a3 + 8);
  *((unsigned char *)this + 18) = *((unsigned char *)a3 + 18);
  int v8 = *((unsigned __int8 *)a3 + 19);
  *((unsigned char *)this + 19) = v8;
  if (v8) {
    *((unsigned char *)this + 20) = *((unsigned char *)a3 + 20);
  }
  *((void *)this + 3) = a3[3];
  re::DynamicString::DynamicString((re::_anonymous_namespace_ *)((char *)this + 32), (re::RESceneImportOperation *)((char *)a2 + 280));
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 185);
  *((unsigned char *)this + 65) = v7;
  *((unsigned char *)this + 66) = *((_DWORD *)a2 + 47) == 1;
  *((unsigned char *)this + 67) = *((unsigned char *)a2 + 192);
  double v9 = [*((id *)a2 + 14) metadata];
  os_activity_scope_state_s v10 = [v9 objectForKeyedSubscript:@"metersPerUnit"];

  if (v10)
  {
    uint64_t v12 = (re *)[v10 floatValue];
    float v14 = v13;
    if (!*((_DWORD *)a2 + 78))
    {
      long long v15 = *re::pipelineLogObjects(v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 12);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v20 = v16;
        __int16 v21 = 2048;
        double v22 = v14;
        _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Import operation [%@] has unit type set to meters but is overriden by a metersPerUnit value [%f] coming from the usd data", buf, 0x16u);
      }
    }
    goto LABEL_15;
  }
  int v17 = *((_DWORD *)a2 + 78);
  if (v17 == 1)
  {
    float v14 = 0.01;
    goto LABEL_15;
  }
  if (!v17)
  {
    float v14 = 1.0;
LABEL_15:

    *((unsigned char *)this + 72) = *((unsigned char *)a2 + 196);
    *(_WORD *)((char *)this + 73) = *(_WORD *)((char *)a2 + 197);
    *(_WORD *)((char *)this + 75) = *((_WORD *)a2 + 158);
    *((unsigned char *)this + 77) = 1;
    *((unsigned char *)this + 78) = *((unsigned char *)a2 + 195);
    *((unsigned char *)this + 79) = *((unsigned char *)a2 + 318);
    *((_WORD *)this + 40) = 256;
    *((float *)this + 17) = v14;
    return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 88, (uint64_t)a2 + 320);
  }
  re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Invalid unit type specified!", "!\"Unreachable code\"", "calculateScaleForImportOperation", 200);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

id RESceneImportGetUSDNodeToEntityMapping(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) == 2)
  {
    uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:*(unsigned int *)(a1 + 452)];
    uint64_t v3 = *(unsigned int *)(a1 + 456);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (int *)(*(void *)(a1 + 440) + 8);
      while (1)
      {
        int v6 = *v5;
        v5 += 20;
        if (v6 < 0) {
          break;
        }
        if (v3 == ++v4)
        {
          LODWORD(v4) = *(_DWORD *)(a1 + 456);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if (v3 != v4)
    {
      uint64_t v7 = v4;
      do
      {
        uint64_t v8 = *(void *)(a1 + 440);
        uint64_t v9 = v8 + 80 * v7;
        if (*(unsigned char *)(v9 + 56)) {
          uint64_t v10 = *(void *)(v8 + 80 * v7 + 64);
        }
        else {
          uint64_t v10 = v8 + 80 * v7 + 57;
        }
        uint64_t v11 = [NSString stringWithUTF8String:v10];
        if (*(unsigned char *)(v8 + 80 * v7 + 24)) {
          uint64_t v12 = *(void *)(v8 + 80 * v7 + 32);
        }
        else {
          uint64_t v12 = v9 + 25;
        }
        float v13 = [NSString stringWithUTF8String:v12];
        [v2 setObject:v11 forKey:v13];

        unsigned int v14 = *(_DWORD *)(a1 + 456);
        if (v14 <= (int)v4 + 1) {
          unsigned int v14 = v4 + 1;
        }
        while (1)
        {
          uint64_t v7 = (v4 + 1);
          if (v14 - 1 == v4) {
            break;
          }
          LODWORD(v4) = v4 + 1;
          unsigned int v15 = v7;
          if ((*(_DWORD *)(*(void *)(a1 + 440) + 80 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_23;
          }
        }
        unsigned int v15 = v14;
LABEL_23:
        LODWORD(v4) = v15;
      }
      while (v3 != v15);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

id RESceneImportGetUSDActionAssets(uint64_t a1)
{
  id v1 = (void *)[*(id *)(a1 + 752) copy];
  uint64_t v2 = v1;
  if (!v1) {
    id v1 = (void *)MEMORY[0x263EFFA78];
  }
  id v3 = v1;

  return v3;
}

re::RESceneImportOperation *re::make::shared::object<re::RESceneImportOperation>@<X0>(re *a1@<X0>, re::RESceneImportOperation **a2@<X8>)
{
  id v3 = re::globalAllocators(a1);
  uint64_t v4 = (re::RESceneImportOperation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 760, 8);
  uint64_t result = re::RESceneImportOperation::RESceneImportOperation(v4);
  *a2 = result;
  return result;
}

re::RESceneImportOperation *re::RESceneImportOperation::RESceneImportOperation(re::RESceneImportOperation *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E735D80;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  id v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 4, 0);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  re::DynamicString::setCapacity((void *)this + 8, 0);
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 42) = 65793;
  *((_WORD *)this + 92) = 0;
  *((unsigned char *)this + 186) = 0;
  *((_DWORD *)this + 47) = 0;
  *((_WORD *)this + 96) = 0;
  *(_DWORD *)((char *)this + 195) = 1;
  uint64_t v4 = (*(uint64_t (**)(re::RESceneImportOperation *))(*(void *)this + 24))(this);
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = v4;
  re::DynamicString::setCapacity((void *)this + 26, 0);
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 30) = v4;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 30, 0);
  *((void *)this + 38) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  re::DynamicString::setCapacity((void *)this + 35, 0);
  *((void *)this + 44) = 0x7FFFFFFF00000000;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 78) = 0;
  *(_DWORD *)((char *)this + 315) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(void *)((char *)this + 412) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_DWORD *)this + 114) = 0;
  *(void *)((char *)this + 460) = 0x7FFFFFFFLL;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((_DWORD *)this + 122) = 1;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 130) = 0;
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 140) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(void *)((char *)this + 564) = 0x7FFFFFFFLL;
  *((void *)this + 74) = 0;
  *((_DWORD *)this + 150) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 86) = 0;
  *((_WORD *)this + 348) = 0;
  *((void *)this + 88) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 170) = 0;
  uint64_t v6 = (*(uint64_t (**)(re::RESceneImportOperation *))(*(void *)this + 24))(this);
  *((void *)this + 93) = 0;
  *((void *)this + 91) = 0;
  *((void *)this + 90) = 0;
  *((_DWORD *)this + 184) = 0;
  *((void *)this + 89) = v6;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 89, 0);
  ++*((_DWORD *)this + 184);
  *((void *)this + 94) = MEMORY[0x263EFFA78];
  return this;
}

void re::RESceneImportOperation::~RESceneImportOperation(re::RESceneImportOperation *this)
{
  re::RESceneImportOperation::~RESceneImportOperation(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_26E735D80;

  uint64_t v2 = *((void *)this + 89);
  if (v2)
  {
    id v3 = *((void *)this + 93);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 91);
      if (v4)
      {
        uint64_t v5 = 8 * v4;
        do
        {
          if (*(void *)v3)
          {

            *(void *)id v3 = 0;
          }
          v3 += 8;
          v5 -= 8;
        }
        while (v5);
        uint64_t v2 = *((void *)this + 89);
        id v3 = *((void *)this + 93);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    *((void *)this + 93) = 0;
    *((void *)this + 90) = 0;
    *((void *)this + 91) = 0;
    *((void *)this + 89) = 0;
    ++*((_DWORD *)this + 184);
  }
  re::SceneImportResult::~SceneImportResult((re::RESceneImportOperation *)((char *)this + 368));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 40);
  re::DynamicString::deinit((re::RESceneImportOperation *)((char *)this + 280));
  re::DynamicString::deinit((re::RESceneImportOperation *)((char *)this + 240));
  re::DynamicString::deinit((re::RESceneImportOperation *)((char *)this + 208));

  re::DynamicString::deinit((re::RESceneImportOperation *)((char *)this + 64));
  re::DynamicString::deinit((re::RESceneImportOperation *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void re::anonymous namespace'::createTextureImportOperation(re *a1, uint64_t a2, uint64_t a3, re::TextureProvider *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 144);
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (re::TextureImportOperation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 512, 8);
  uint64_t v11 = re::TextureImportOperation::TextureImportOperation(v10, a4, 0, (re::AssetManager *)v8);
  *(void *)a1 = v11;
  uint64_t v12 = (re::TextureImportOperation *)((char *)v11 + 32);
  if (*(unsigned char *)(a3 + 8)) {
    float v13 = *(char **)(a3 + 16);
  }
  else {
    float v13 = (char *)(a3 + 9);
  }
  re::AssetPath::parse(v12, v13, (const re::AssetPath *)(a2 + 200), *(const re::internal::AssetTypeRegistry **)(v8 + 1040), *(os_unfair_lock_s **)(v8 + 1128), v17);
  if (!v17[0])
  {
    unsigned int v15 = *re::pipelineLogObjects(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (v19) {
        uint64_t v16 = *(unsigned char **)&v20[7];
      }
      else {
        uint64_t v16 = v20;
      }
      *(_DWORD *)long long buf = 136315138;
      double v22 = v16;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Unable to create texture asset path for import operation: %s", buf, 0xCu);
    }
    if (!v17[0] && v18 && (v19 & 1) != 0) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
  }
}

uint64_t RETimeSyncedComponentTimeSyncSourceMode()
{
  return 0;
}

double RETimeSyncedComponentGetTimeStamp()
{
  return 0.0;
}

uint64_t REEnumBuilderCreate()
{
  id v1 = re::introspectionAllocator(v0);
  uint64_t v2 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 72, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_WORD *)(v3 + 28) = 0;
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)uint64_t v3 = &unk_26E715E00;
  *(void *)(v3 + 16) = 9;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 24, 8);
  *(_WORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 40, 8);
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  *(void *)uint64_t v5 = v1;
  re::DynamicArray<float *>::setCapacity((void *)v5, 0);
  ++*(_DWORD *)(v5 + 24);
  *(void *)(v4 + 8) = v5;
  return v4;
}

uint64_t REEnumBuilderDestroy(uint64_t a1)
{
  uint64_t v2 = re::introspectionAllocator((re *)a1);
  if (!*(unsigned char *)(a1 + 17))
  {
    re::internal::destroy(*(unsigned int ***)a1, 0);
    *(void *)a1 = 0;
    re::internal::destroy(*(re **)(*(void *)(a1 + 8) + 32), *(void *)(*(void *)(a1 + 8) + 16));
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      if (*v3)
      {
        if (v3[4]) {
          (*(void (**)(void))(*(void *)*v3 + 40))(*v3);
        }
        v3[4] = 0;
        v3[1] = 0;
        uint64_t v3[2] = 0;
        *uint64_t v3 = 0;
        ++*((_DWORD *)v3 + 6);
      }
      (*(void (**)(void *, void *))(*(void *)v2 + 40))(v2, v3);
    }
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t))(*(void *)v2 + 40);
  return v4(v2, a1);
}

uint64_t REEnumBuilderInit(re *a1, const char *a2, int a3)
{
  uint64_t v6 = re::introspectionAllocator(a1);
  size_t v7 = strlen(a2);
  uint64_t v8 = (char *)(*(uint64_t (**)(void *, size_t, void))(*(void *)v6 + 32))(v6, v7 + 1, 0);
  uint64_t v9 = strcpy(v8, a2);
  uint64_t v10 = *(void *)a1;
  *(void *)(v10 + 48) = v9;
  *(_DWORD *)(v10 + 20) = a3;
  *((unsigned char *)a1 + 16) = 1;
  return 1;
}

_anonymous_namespace_ *REEnumBuilderAddCase(re *a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = re::introspectionAllocator(a1);
  size_t v7 = strlen(a2);
  uint64_t v8 = (char *)(*(uint64_t (**)(void *, size_t, void))(*(void *)v6 + 32))(v6, v7 + 1, 0);
  strcpy(v8, a2);
  uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 24, 8);
  uint64_t v10 = result;
  *(_DWORD *)uint64_t result = 1;
  *((void *)result + 1) = a3;
  *((void *)result + 2) = v8;
  uint64_t v11 = *((void *)a1 + 1);
  unint64_t v12 = *(void *)(v11 + 8);
  unint64_t v13 = *(void *)(v11 + 16);
  if (v13 >= v12)
  {
    unint64_t v14 = v13 + 1;
    if (v12 < v13 + 1)
    {
      if (*(void *)v11)
      {
        uint64_t v15 = 2 * v12;
        BOOL v16 = v12 == 0;
        unint64_t v17 = 8;
        if (!v16) {
          unint64_t v17 = v15;
        }
        if (v17 <= v14) {
          unint64_t v18 = v14;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v11, v18);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v11, v14);
        ++*(_DWORD *)(v11 + 24);
      }
    }
    unint64_t v13 = *(void *)(v11 + 16);
  }
  *(void *)(*(void *)(v11 + 32) + 8 * v13) = v10;
  *(void *)(v11 + 16) = v13 + 1;
  ++*(_DWORD *)(v11 + 24);
  return result;
}

uint64_t RECIntrospectionEnumRegister(uint64_t *a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = (re *)re::IntrospectionRegistry::lookupType(*(re::IntrospectionRegistry **)(*a1 + 48), a2);
  if (v4)
  {
    uint64_t v5 = *re::foundationIntrospectionLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(v3 + 48);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v41 = v20;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed to register enum \"%s\". Name is already registered.", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    *a1 = 0;
    *((unsigned char *)a1 + 17) = 1;
    uint64_t v6 = re::introspectionAllocator(0);
    size_t v7 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 16, 8);
    uint64_t v8 = a1[1];
    unsigned int *v7 = *(void *)(v8 + 16);
    *((void *)v7 + 1) = *(void *)(v8 + 32);
    *(void *)(v3 + 64) = v7;
    (*(void (**)(void *))(*(void *)v6 + 40))(v6);
    a1[1] = 0;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v3, v9);
    uint64_t v10 = (ArcSharedObject *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 64, 8);
    ArcSharedObject::ArcSharedObject(v10, 0);
    *(void *)(v11 + 16) = 0x800000001;
    *(_DWORD *)(v11 + 24) = 8;
    *(_WORD *)(v11 + 28) = 0;
    *(void *)(v11 + 32) = 0;
    unint64_t v12 = (_OWORD *)(v11 + 32);
    *(void *)(v11 + 40) = 0xFFFFFFFFLL;
    *(void *)uint64_t v11 = &unk_26E6CDA08;
    *(void *)(v11 + 48) = v3;
    *(void *)(v11 + 56) = 0;
    BOOL v14 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v11, v13);
    if (!*(void *)(v3 + 32))
    {
      BOOL v16 = re::introspectionSharedMutex(v15);
      std::__shared_mutex_base::lock(v16);
      switch(*(_DWORD *)(v3 + 20))
      {
        case 1:
          uint64_t v18 = 0x31CD534126;
          char v19 = "uint8_t";
          break;
        case 2:
          uint64_t v18 = 0x607DD0D4E68;
          char v19 = "uint16_t";
          break;
        case 4:
          uint64_t v18 = 0x607DD0F01DCLL;
          char v19 = "uint32_t";
          break;
        case 8:
          uint64_t v18 = 0x607DD11CB1ALL;
          char v19 = "uint64_t";
          break;
        default:
          re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Invalid enum size.", "!\"Unreachable code\"", "RECIntrospectionEnumRegister", 168);
          _os_crash();
          __break(1u);
          JUMPOUT(0x2342D0A64);
      }
      *(void *)&v37.var0 = v18;
      v37.var1 = v19;
      __int16 v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v37);
      if (v21)
      {
        uint64_t v22 = *v21;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0xFFFFFFFFLL;
      }
      re::StringID::destroyString((re::StringID *)&v37);
      v35[0] = v23;
      v35[1] = (re *)v22;
      re::TypeRegistry::typeInfo(v23, v35, &v37);
      if (v37.var0) {
        int v24 = *(_DWORD *)(v39 + 64);
      }
      else {
        int v24 = -1;
      }
      v34[0] = v23;
      v34[1] = v22;
      re::TypeBuilder::beginEnumType((uint64_t)buf, (uint64_t *)&v36, 1, v24, (uint64_t)v34);
      re::StringID::destroyString((re::StringID *)&v36);
      unint64_t v25 = *v7;
      if (v25)
      {
        for (unint64_t i = 0; i < v25; ++i)
        {
          uint64_t v27 = *(void *)(*((void *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v27 == 1)
          {
            uint64_t v28 = *(void *)(v27 + 8);
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)buf, v28, &v37);
            re::StringID::destroyString((re::StringID *)&v37);
            unint64_t v25 = *v7;
          }
        }
      }
      *(_OWORD *)(v3 + 32) = v36;
      re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v37, *(void *)(v3 + 48));
      if ((uint64_t)v37.var1) {
        uint64_t v29 = v38;
      }
      else {
        uint64_t v29 = (char *)&v37.var1 + 1;
      }
      uint64_t v30 = *((void *)&v36 + 1);
      int v43 = -1;
      memset(v44, 0, sizeof(v44));
      long long v45 = 0u;
      uint64_t v46 = 0xFFFFFFFFLL;
      int v47 = 1;
      uint64_t v48 = 0xFFFFFFFFLL;
      char v49 = 1;
      uint64_t v50 = 0xFFFFFFFFLL;
      int v51 = 0;
      buf[0] = 9;
      re::StringID::operator=((unint64_t *)((char *)&v41 + 4), (uint64_t *)&v33);
      int v42 = 1;
      *(void *)&v44[1] = 0x800000008;
      *(void *)((char *)&v45 + 4) = 0;
      *(void *)&uint64_t v44[3] = 0;
      *(void *)&v44[5] = 0;
      int v47 = -1;
      uint64_t v48 = v30;
      char v49 = 1;
      re::StringID::destroyString((re::StringID *)&v33);
      *unint64_t v12 = v33;
      if (*(void *)&v37.var0 && ((uint64_t)v37.var1 & 1) != 0) {
        (*(void (**)(void))(**(void **)&v37.var0 + 40))();
      }
      std::__shared_mutex_base::unlock(v16);
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)buf, v31);
    }
  }
  return v3;
}

uint64_t (***RECIntrospectionEnumUnregister(uint64_t a1, uint64_t a2))(void)
{
  void v20[5] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 16) != 9)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid type info. Enum type expected.", "enumInfo->type == IntrospectionType::kEnum", "RECIntrospectionEnumUnregister", 199);
    _os_crash();
    __break(1u);
  }
  uint64_t v3 = re::introspectionSharedMutex((re *)a1);
  std::__shared_mutex_base::lock(v3);
  long long v19 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = re::introspectionSharedMutex(v4);
  std::__shared_mutex_base::unlock(v5);
  size_t v7 = re::globalAllocators(v6);
  uint64_t v8 = v7[2];
  v20[0] = &unk_26E735DC8;
  v20[1] = a1;
  _DWORD v20[3] = v8;
  void v20[4] = v20;
  uint64_t v18 = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  re::DynamicArray<float *>::setCapacity(v15, 0);
  ++v17;
  re::IntrospectionRegistry::query((uint64_t)v20, v15);
  re::IntrospectionRegistry::remove((re::IntrospectionRegistry *)a1, v9);
  if (v16)
  {
    uint64_t v11 = v18;
    uint64_t v12 = 8 * v16;
    do
    {
      unint64_t v13 = *v11++;
      re::internal::destroy(v13, v10);
      v12 -= 8;
    }
    while (v12);
  }
  if (v15[0] && v18) {
    (*(void (**)(void))(*(void *)v15[0] + 40))();
  }
  return re::FunctionBase<24ul,BOOL ()(re::IntrospectionBase const*)>::destroyCallable((uint64_t)v20);
}

BOOL RECIntrospectionEnumIsRegistered(re::IntrospectionRegistry *a1, const char *a2)
{
  return re::IntrospectionRegistry::lookupType(a1, a2) != 0;
}

void re::internal::Callable<RECIntrospectionEnumUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::~Callable()
{
}

BOOL re::internal::Callable<RECIntrospectionEnumUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(v2 + 16);
  return (v4 == 2 || v4 == 1) && *(void *)(v2 + 48) == v3;
}

void *re::internal::Callable<RECIntrospectionEnumUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E735DC8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<RECIntrospectionEnumUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E735DC8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECIntrospectionEnumUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::size()
{
  return 16;
}

uint64_t (***re::FunctionBase<24ul,BOOL ()(re::IntrospectionBase const*)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *REAnchorComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *REClientAnchorSyncComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REAnchorComponentGetAnchorIdentifier(uint64_t a1)
{
}

uint64_t REAnchorComponentSetAnchorIdentifier(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(v3 + 25) = *a2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

__n128 REAnchorComponentGetWorldTransform(uint64_t a1)
{
}

uint64_t REAnchorComponentSetWorldTransform(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  uint64_t v12[3] = a5;
  re::ecs2::AnchorComponent::setWorldTransform(v6, v12);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REAnchorComponentGetWorldTransformLastSyncWithNetwork(uint64_t a1)
{
}

uint64_t REAnchorComponentSetWorldTransformLastSyncWithNetwork(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  v5[7] = a2;
  unsigned char v5[8] = a3;
  v5[9] = a4;
  v5[10] = a5;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v5);
}

uint64_t REAnchorComponentGetRequiresLocalAnchoring(uint64_t a1)
{
}

uint64_t REAnchorComponentSetRequiresLocalAnchoring(re::ecs2::AnchorComponent *a1, int a2)
{
  char v2 = a2;
  {
    *((unsigned char *)a1 + 176) = v2;
    re::ecs2::AnchorComponent::onAnchorStateChanged(a1);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnchorComponentGetAnchoredLocally(uint64_t a1)
{
}

uint64_t REAnchorComponentSetAnchoredLocally(re::ecs2::AnchorComponent *a1, int a2)
{
  char v2 = a2;
  {
    *((unsigned char *)a1 + 177) = v2;
    re::ecs2::AnchorComponent::onAnchorStateChanged(a1);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnchorComponentGetIsAnchorExternal(uint64_t a1)
{
}

uint64_t REAnchorComponentSetIsAnchorExternal(re::ecs2::AnchorComponent *a1, int a2)
{
  char v2 = a2;
  {
    *((unsigned char *)a1 + 178) = v2;
    re::ecs2::AnchorComponent::onAnchorStateChanged(a1);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnchorComponentGetEnableShadows(uint64_t a1)
{
}

uint64_t REAnchorComponentSetEnableShadows(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 41) = a2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REAnchorComponentSetAllowSync(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(result + 179) != 0) != a2)
  {
    *(unsigned char *)(result + 179) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchorComponentGetLateLatchId(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 184)) {
    return *(void *)(v1 + 192);
  }
  else {
    return 0;
  }
}

uint64_t REAnchorComponentSetLateLatchId(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(result + 184)) {
    *(unsigned char *)(result + 184) = 1;
  }
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t REAnchorComponentSetReceiveIsAnchoredOnClient(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(result + 200) != 0) != a2)
  {
    *(unsigned char *)(result + 200) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchorComponentSetSendIsAnchoredToClient(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(result + 201) != 0) != a2)
  {
    *(unsigned char *)(result + 201) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchorComponentGetSendIsAnchoredToClient(uint64_t a1)
{
}

uint64_t REClientAnchorSyncComponentSetIsAnchored(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REClientAnchorSyncComponentIsAnchored(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REClientAnchorSyncComponentSetIsExternal(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t REClientAnchorSyncComponentIsExternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

__n128 *REClientAnchorSyncComponentSetAnchorTransform(__n128 *result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  return result;
}

__n128 REClientAnchorSyncComponentGetAnchorTransform(__n128 *a1)
{
  return a1[2];
}

void REMetricLoadFile(char *a1, int a2)
{
  uint64_t v3 = strrchr(a1, 46);
  int v4 = @"unknown";
  if (v3)
  {
    uint64_t v5 = v3;
    if (!strcasecmp(v3, ".usda"))
    {
      int v4 = @"usda";
    }
    else if (!strcasecmp(v5, ".usdz"))
    {
      int v4 = @"usdz";
    }
    else if (!strcasecmp(v5, ".usd"))
    {
      int v4 = @"usd";
    }
    else if (!strcasecmp(v5, ".reality"))
    {
      int v4 = @"reality";
    }
    else if (!strcasecmp(v5, ".obj"))
    {
      int v4 = @"obj";
    }
  }
  uint64_t v6 = v4;
  if ((a2 - 1) > 3) {
    size_t v7 = @"unknown";
  }
  else {
    size_t v7 = (__CFString *)*((void *)&off_264BE9B80 + a2 - 1);
  }
  if (qword_26AFA0300 != -1) {
    dispatch_once(&qword_26AFA0300, &__block_literal_global_63);
  }
  uint64_t v9 = v7;
  uint64_t v8 = v6;
  AnalyticsSendEventLazy();
}

id __REMetricLoadFile_block_invoke(uint64_t a1)
{
  uint64_t v7[3] = *MEMORY[0x263EF8340];
  v7[0] = *(void *)(a1 + 32);
  v6[0] = @"callsite";
  v6[1] = @"isAppleModelViewerApp";
  char v2 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  int v6[2] = @"type";
  uint64_t v3 = *(void *)(a1 + 40);
  v7[1] = v2;
  _OWORD v7[2] = v3;
  int v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];

  return v4;
}

void ___ZN12_GLOBAL__N_121isAppleModelViewerAppEv_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F086E0] mainBundle];
  id v2 = [v0 bundleIdentifier];

  BOOL v1 = ![v2 caseInsensitiveCompare:@"com.apple.AssetViewer.ASVAssetViewer"]
    || ![v2 caseInsensitiveCompare:@"com.apple.AssetViewer.ASVAssetThumbnail"]
    || ![v2 caseInsensitiveCompare:@"com.apple.RAQLPreviewExtension"]
    || ![v2 caseInsensitiveCompare:@"com.apple.RAQLThumbnailExtension"]
    || ![v2 caseInsensitiveCompare:@"com.apple.RealityComposer"]
    || ![v2 caseInsensitiveCompare:@"com.apple.RealityConverter"]
    || [v2 caseInsensitiveCompare:@"com.apple.dt.Xcode"] == 0;
  _MergedGlobals_526 = v1;
}

void *REGroundPlaneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REGroundPlaneComponentSetIsSceneUnderstandingMeshPhysicsFallback(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REGroundPlaneComponentGetIsSceneUnderstandingMeshPhysicsFallback(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

void *REAudioAnimationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REAudioAnimationComponentSetMute(uint64_t result, char a2)
{
  *(unsigned char *)(result + 68) = a2;
  return result;
}

uint64_t REAudioAnimationComponentGetMute(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

uint64_t REAudioAnimationComponentSetLinearGain(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

float REAudioAnimationComponentGetLinearGain(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t REAudioAnimationComponentSetMediaOffset(uint64_t result, float a2)
{
  *(float *)(result + 60) = a2;
  return result;
}

float REAudioAnimationComponentGetMediaOffset(uint64_t a1)
{
  return *(float *)(a1 + 60);
}

uint64_t REAudioAnimationComponentSetAnimationGain(uint64_t result, float a2)
{
  *(float *)(result + 56) = a2;
  return result;
}

float REAudioAnimationComponentGetAnimationGain(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

void REAudioAnimationComponentSetAudioAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v4);
  re::AssetHandle::operator=(a1 + 72, &v4);
  if (v5)
  {
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 704));
    if (v3 == 2)
    {
      if (*(unsigned char *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v4) + 153)) {
        *(unsigned char *)(a1 + 44) = 1;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
}

uint64_t re::AssetHandle::asset<re::AudioFileAsset>(re::AudioFileAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v2 = re::AudioFileAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      size_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void REAudioAnimationComponentSetAudioAssetForEvent(re::ecs2::AudioAnimationComponent *a1, uint64_t a2, void *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v8);
  uint64_t v5 = (_anonymous_namespace_ *)[a3 UTF8String];
  re::ecs2::AudioAnimationComponent::setAudioAssetForEvent(a1, (re::AssetHandle *)v8, (const re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

uint64_t REAudioAnimationComponentRemoveAudioAssetForEvent(re::ecs2::AudioAnimationComponent *a1, id a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::ecs2::AudioAnimationComponent::removeAudioAssetForEvent(a1, (const re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t REAudioAnimationComponentGetPlaybackTokenForEvent(re::ecs2::AudioAnimationComponent *a1, id a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)[a2 UTF8String];
  uint64_t PlaybackTokenForEvent = re::ecs2::AudioAnimationComponent::getPlaybackTokenForEvent(a1, (const re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return PlaybackTokenForEvent;
}

uint64_t REAudioAnimationComponentGetPlaybackToken(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateAudioEventTimeline()
{
  TypedEventTimeline = RETimelineDefinitionCreateTypedEventTimeline((re *)"AudioEventTimeline", "AudioEventTimeline", -1);
  for (uint64_t i = 0; i != 2; ++i)
    RETimelineDefinitionEventTimelineAddParameter(TypedEventTimeline, off_264BE9BA0[i], 3);
  return TypedEventTimeline;
}

uint64_t RETimelineDefinitionEventTimelineAddPlaySound(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, id a3)
{
  uint64_t v5 = (const char *)[a3 UTF8String];
  return RETimelineDefinitionEventTimelineSetParameterString(a1, "playSound", a2, v5);
}

uint64_t RETimelineDefinitionEventTimelineAddStopSound(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, id a3)
{
  uint64_t v5 = (const char *)[a3 UTF8String];
  return RETimelineDefinitionEventTimelineSetParameterString(a1, "stopSound", a2, v5);
}

uint64_t RECustomProtocolLayerCallbacksCreate()
{
  return MEMORY[0x270F593C8]();
}

uint64_t RECustomProtocolLayerCallbacksOnCreate(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnCreate();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnCreate_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnDestroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnDestroy();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnDestroy_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnInit(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnInit();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnInit_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnDeinit(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnDeinit();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnDeinit_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnOpen(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnOpenNullable();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnOpen_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnClose(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnClose();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnClose_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnDisconnect(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnDisconnect();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnDisconnect_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnUpdate(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnUpdate();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnUpdate_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnWait(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnWait();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnWait_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnWakeup(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnWakeup();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnWakeup_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnLocalAddresses(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnLocalAddresses();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnLocalAddresses_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnHostStats(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnHostStats();
  }
  return result;
}

double __RECustomProtocolLayerCallbacksOnHostStats_block_invoke(uint64_t a1, uint64_t a2)
{
  long long v5 = 0uLL;
  uint64_t v4 = 0;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))())
  {
    *(void *)a2 = v4;
    double result = *(double *)&v5;
    *(_OWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t RECustomProtocolLayerCallbacksOnSetDisconnectTimeout(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnSetDisconnectTimeout();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnSetDisconnectTimeout_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECustomProtocolLayerCallbacksOnPreferredPacketSize(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return RESyncProtocolLayerObserverOnPreferredPacketSize();
  }
  return result;
}

uint64_t __RECustomProtocolLayerCallbacksOnPreferredPacketSize_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RECreateDefaultProtocolLayerUDP()
{
  return MEMORY[0x270F58F00]();
}

uint64_t RECreateDefaultProtocolLayerTCP()
{
  return MEMORY[0x270F58F00]();
}

uint64_t RECreateDefaultProtocolLayerNW()
{
  return MEMORY[0x270F58EF8]();
}

uint64_t RECreateProtocolLayerNWWithoutListener()
{
  return MEMORY[0x270F58F08]();
}

uint64_t RECreateDefaultProtocolLayerDebug()
{
  return MEMORY[0x270F58EF0]();
}

uint64_t RECustomProtocolLayerCreateEx()
{
  return MEMORY[0x270F58F88]();
}

uint64_t RECustomProtocolLayerOnConnected()
{
  return MEMORY[0x270F58F90]();
}

uint64_t RECustomProtocolLayerOnDisconnected()
{
  return MEMORY[0x270F58F98]();
}

uint64_t RECustomProtocolLayerOnError()
{
  return MEMORY[0x270F58FA0]();
}

uint64_t RECustomProtocolLayerOnReceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t result = RESyncCustomProtocolLayerOnReceiveData();
  *a6 = 1;
  return result;
}

uint64_t REPacketPoolAllocPacket()
{
  return MEMORY[0x270F59348]();
}

uint64_t REPacketPoolFreePacket()
{
  return MEMORY[0x270F59350]();
}

uint64_t RENetAddressListCreate()
{
  return MEMORY[0x270F58D68]();
}

uint64_t RENetAddressListGetAddressAtIndex()
{
  return MEMORY[0x270F58D70]();
}

uint64_t RENetAddressListGetSize()
{
  return MEMORY[0x270F58D78]();
}

uint64_t REPacketGetData()
{
  return MEMORY[0x270F59330]();
}

uint64_t REPacketGetSize()
{
  return MEMORY[0x270F59340]();
}

uint64_t REPacketSetSize()
{
  return MEMORY[0x270F59358]();
}

uint64_t REPacketGetCapacity()
{
  return MEMORY[0x270F59328]();
}

uint64_t REPacketGetDeliveryMethod()
{
  return MEMORY[0x270F59338]();
}

uint64_t REProtocolHandleCreate()
{
  return MEMORY[0x270F59398]();
}

uint64_t REProtocolHandleGetConnection()
{
  return MEMORY[0x270F593A0]();
}

uint64_t REProtocolHandleConnectionSetStats()
{
  return RESyncProtocolHandleConnectionSetStats();
}

double REProtocolHandleConnectionGetStats@<D0>(uint64_t a1@<X8>)
{
  RESyncProtocolHandleConnectionGetStats();
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0uLL;
  return result;
}

uint64_t REProtocolHandleGetUserData()
{
  return MEMORY[0x270F593A8]();
}

uint64_t REProtocolHandleSetUserData()
{
  return MEMORY[0x270F593C0]();
}

uint64_t RENetGetChannelIdMaxChannels()
{
  return MEMORY[0x270F59068]();
}

uint64_t REProtocolHandleQueueDeqeue()
{
  return MEMORY[0x270F593B0]();
}

uint64_t REProtocolHandleQueueDeqeueNullable()
{
  return MEMORY[0x270F593B0]();
}

uint64_t REProtocolHandleQueueEnqeue()
{
  return MEMORY[0x270F593B8]();
}

void *createAudioFileAssetConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 32) = 0;
  id v2 = (unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 1) = *(_DWORD *)(a2 + 8) == -1;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 4) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 24);
  int v3 = *(_DWORD *)(a2 + 48);
  if (v3)
  {
    *(unsigned char *)(a1 + 72) = 1;
    *(_DWORD *)(a1 + 76) = v3;
  }
  double result = *(void **)(a2 + 40);
  if (result)
  {
    long long v5 = (_anonymous_namespace_ *)[result UTF8String];
    LOBYTE(v6) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v7, (const re::DynamicString *)&v9);
    re::Optional<re::DynamicString>::operator=(v2, &v6);
    if (_BYTE)v6 && v7 && (v8) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
    double result = v9;
    if (v9)
    {
      if (v10) {
        return (void *)(*(uint64_t (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  return result;
}

uint64_t REAudioFileAssetGetSupportedFileExtensions()
{
  if (qword_26AFA0310 != -1) {
    dispatch_once(&qword_26AFA0310, &__block_literal_global_64);
  }
  return _MergedGlobals_527;
}

uint64_t __REAudioFileAssetGetSupportedFileExtensions_block_invoke()
{
  _MergedGlobals_527 = (uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  re::AudioFileAsset::supportedExtensions((uint64_t)&v5);
  if (v6)
  {
    uint64_t v0 = v7;
    uint64_t v1 = 8 * v6;
    do
    {
      id v2 = *v0++;
      CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
      CFArrayAppendValue((CFMutableArrayRef)_MergedGlobals_527, v3);
      CFRelease(v3);
      v1 -= 8;
    }
    while (v1);
  }
  uint64_t result = v5;
  if (v5)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

void REAudioFileAssetSetLoopCount(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "loopCount"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(_DWORD *)(v4 + 96) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

BOOL audioFileAssetCanBeModified(re::AssetHandle *a1, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 1);
  if (v3 && (unsigned int v4 = atomic_load((unsigned int *)(v3 + 704)), v4 == 2))
  {
    uint64_t v5 = (re *)re::AssetHandle::asset<re::AudioFileAsset>(a1);
    if (v5 && !*((unsigned char *)v5 + 153)) {
      return 1;
    }
    uint64_t v6 = *re::audioLogObjects(v5);
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v9 = 136315138;
      char v10 = a2;
      char v8 = "[CoreRE] [REAudioFileAsset] Cannot set %s when asset after load completion.";
LABEL_11:
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v9, 0xCu);
      return 0;
    }
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(a1);
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v9 = 136315138;
      char v10 = a2;
      char v8 = "[CoreRE] [REAudioFileAsset] Cannot set %s when asset is not yet loaded.";
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t REAudioFileAssetGetLoopCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(unsigned int *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 96);
  }
  else
  {
    unsigned int v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get loopCount when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

void REAudioFileAssetSetLayoutTag(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "layoutTag"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(_DWORD *)(v4 + 128) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REAudioFileAssetGetLayoutTag(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10 && (unsigned int v2 = atomic_load((unsigned int *)(v10 + 704)), v2 == 2))
  {
    uint64_t v3 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v9);
    uint64_t v5 = *(unsigned int *)(v3 + 128);
    if (v5 == -65536) {
      uint64_t v5 = re::audio::layoutTagFromFormat(*(re::audio **)(*(void *)(v3 + 8) + 8), v4);
    }
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get layoutTag when asset is not yet loaded.", v8, 2u);
    }
    uint64_t v5 = 4294901760;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  return v5;
}

double REAudioFileAssetGetLengthInSeconds(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  if (v11 && (unsigned int v2 = atomic_load((unsigned int *)(v11 + 704)), v2 == 2))
  {
    uint64_t v3 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v10);
    double v4 = (double)*(unint64_t *)(v3 + 136);
    [*(id *)(*(void *)(v3 + 8) + 8) sampleRate];
    double v6 = v4 / v5;
  }
  else
  {
    uint64_t v7 = *re::audioLogObjects(v1);
    double v6 = 0.0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get audio length when asset is not yet loaded.", v9, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  return v6;
}

void REAudioFileAssetSetStreaming(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "streaming"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(unsigned char *)(v4 + 100) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

BOOL REAudioFileAssetGetStreaming(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    BOOL v3 = *(unsigned char *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 100) != 0;
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get streaming flag when asset is not yet loaded.", v6, 2u);
    }
    BOOL v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

void REAudioFileAssetSetInputMode(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "inputMode"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(unsigned char *)(v4 + 52) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REAudioFileAssetGetInputMode(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(unsigned __int8 *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 52);
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get randomizeStart when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

id REAudioFileGetAVAudioFormat(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)v7);
  if (v1)
  {
    id v2 = **(id **)(v1 + 8);
    uint64_t v3 = [v2 fileFormat];
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get AVAudio format when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v3;
}

void REAudioFileAssetSetMixGroupName(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v11);
  if (v12 && (unsigned int v4 = atomic_load((unsigned int *)(v12 + 704)), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)(v12 + 704));
    if (v5 == 2)
    {
      ++*(_DWORD *)(v12 + 260);
      uint64_t v6 = (unsigned __int8 *)re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v11);
      if (v6)
      {
        uint64_t v7 = v6;
        if (a2)
        {
          LOBYTE(buf) = 1;
          re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v13);
          re::Optional<re::DynamicString>::operator=(v7 + 56, &buf);
          if (_BYTE)buf && v17 && (v18) {
            (*(void (**)(void))(*(void *)v17 + 40))();
          }
          uint64_t v8 = v13;
          if (v13 && (v14 & 1) != 0)
          {
            uint64_t v9 = v15;
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, v9);
          }
        }
        else
        {
          LOBYTE(buf) = 0;
          re::Optional<re::DynamicString>::operator=(v6 + 56, &buf);
          if ((_BYTE)buf)
          {
            uint64_t v8 = v17;
            if (v17)
            {
              if (v18)
              {
                uint64_t v9 = v19;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot set mix group name when asset is not yet loaded.", (uint8_t *)&buf, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
}

id REAudioFileAssetGetMixGroupName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  if (v11 && (unsigned int v2 = atomic_load((unsigned int *)(v11 + 704)), v2 == 2))
  {
    if (*(unsigned char *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v10) + 56))
    {
      uint64_t v3 = NSString;
      uint64_t v4 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v10);
      if (*(unsigned char *)(v4 + 72)) {
        uint64_t v5 = *(void *)(v4 + 80);
      }
      else {
        uint64_t v5 = v4 + 73;
      }
      uint64_t v7 = [v3 stringWithUTF8String:v5];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get mix group name when asset is not yet loaded.", v9, 2u);
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  return v7;
}

void REAudioFileAssetSetRandomizeStart(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "randomizeStart"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(unsigned char *)(v4 + 101) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

BOOL REAudioFileAssetGetRandomizeStart(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    BOOL v3 = *(unsigned char *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 101) != 0;
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get streaming flag when asset is not yet loaded.", v6, 2u);
    }
    BOOL v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

void REAudioFileAssetSetNormalizationMode(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "normalizationMode"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(_DWORD *)(v4 + 104) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REAudioFileAssetGetNormalizationMode(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(unsigned int *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 104);
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get normalizationMode when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

void REAudioFileAssetSetCalibrationMode(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "calibrationMode"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(_DWORD *)(v4 + 108) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REAudioFileAssetGetCalibrationMode(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(unsigned int *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 108);
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get calibrationMode when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

void REAudioFileAssetSetCalibrationLevel(uint64_t a1, double a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (audioFileAssetCanBeModified((re::AssetHandle *)&v5, "calibrationLevel"))
  {
    if (v6)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v6 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v6 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v5);
        if (v4) {
          *(double *)(v4 + 112) = a2;
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

double REAudioFileAssetGetCalibrationLevel(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    double v3 = *(double *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 112);
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    double v3 = -1.0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get calibrationLevel when asset is not yet loaded.", v6, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

double REAudioFileAssetGetTargetLUFS(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    double v3 = *(double *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 120);
  }
  else
  {
    uint64_t v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get target LUFS when asset is not yet loaded.", v6, 2u);
    }
    double v3 = -INFINITY;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

CFTypeRef REAudioFileAssetGetType(re::AudioFileAsset *a1)
{
  uint64_t v1 = re::AudioFileAsset::assetType(a1);
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)*v1, 0x8000100u);
  return CFAutorelease(v2);
}

uint64_t REAudioFileAssetIsEqual(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v11);
  re::AssetAPIHelper::assetHandleCreate(a2, &v9);
  if (v12
    && (unsigned int v3 = atomic_load((unsigned int *)(v12 + 704)), v3 == 2)
    && v10
    && (unsigned int v4 = atomic_load((unsigned int *)(v10 + 704)), v4 == 2))
  {
    uint64_t v5 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v11);
    uint64_t v6 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v9);
    uint64_t v7 = re::AudioFileAsset::Impl::operator==(*(uint64_t **)(v5 + 8), *(void **)(v6 + 8));
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return v7;
}

void REAudioFileAssetCompleteLoad(uint64_t a1)
{
  AssetManager = (uint64_t *)REAssetGetAssetManager(a1);
  CFStringRef v2 = re::AudioFileAsset::assetType((re::AudioFileAsset *)AssetManager);
  unsigned int v3 = *(re **)(re::internal::AssetTypeRegistry::assetLoaderWithAssetType(AssetManager[130], (unint64_t)v2) + 8);
  if (v3) {
    unsigned int v3 = (re *)(*(uint64_t (**)(re *))(*(void *)v3 + 24))(v3);
  }
  REAudioFileAssetCompleteLoadWithService(v3);
}

void REAudioFileAssetCompleteLoadWithService(re *a1)
{
  uint64_t v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CFStringRef v2 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] REAudioFileAssetCompleteLoadWithService is deprecated - remove call", v2, 2u);
  }
}

uint64_t REAudioFileAssetGetNonIntrospectionNonSharedDataByteSize(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 160);
  }
  else
  {
    unsigned int v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get asset memory in bytes when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

uint64_t REAudioFileAssetCreateWithMappedDataNullable(uint64_t a1, void *a2, char *__s)
{
  v28[11] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = strrchr(__s, 46);
  if (v6)
  {
    uint64_t v7 = v6 + 1;
    uint64_t v8 = (re *)re::AudioFileAsset::supportedExtensions((uint64_t)&v24);
    uint64_t v9 = v25;
    if (v25)
    {
      uint64_t v10 = v26;
      while (1)
      {
        uint64_t v8 = (re *)strcmp(v7, *v10);
        if (!v8) {
          break;
        }
        ++v10;
        if (!--v9) {
          goto LABEL_6;
        }
      }
      char v14 = re::globalAllocators(v8);
      uint64_t v15 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 168, 8);
      *((unsigned char *)re::AudioFileAsset::AudioFileAsset(v15) + 100) = 1;
      id v16 = (id)[a2 copy];

      id v17 = v16;
      id v23 = v17;
      re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)buf, &v23, 1, 0);

      char v18 = (re::AudioFileAsset *)re::AudioFileAsset::setMappedData((uint64_t)v15, (uint64_t)buf);
      uint64_t v19 = re::AudioFileAsset::assetType(v18);
      (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, char *, void, void, void))(*(void *)a1 + 424))(v22, a1, v15, v19, __s, 0, 0, 0);
      uint64_t v12 = v22[0];
      if (v22[0]) {
        id v20 = (id)(v22[0] + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
      *(void *)uint64_t buf = &unk_26E714530;

      *(void *)uint64_t buf = &unk_26E7144B8;
      re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v28);
    }
    else
    {
LABEL_6:
      uint64_t v11 = *re::audioLogObjects(v8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot create AudioFileAsset from filetype: %s.", buf, 0xCu);
      }
      uint64_t v12 = 0;
    }
    if (v24 && v26) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
  }
  else
  {
    uint64_t v13 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = __s;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Invalid filename in REAudioFileAssetCreateWithMappedData: %s", buf, 0xCu);
    }
    return 0;
  }
  return v12;
}

uint64_t REAudioFileAssetCreateWithData(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v14 = v3;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)v15, &v14, 0, 0);

  uint64_t v5 = re::globalAllocators(v4);
  uint64_t v6 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 168, 8);
  uint64_t v7 = re::AudioFileAsset::AudioFileAsset(v6);
  uint64_t v8 = (re::AudioFileAsset *)re::AudioFileAsset::setMappedData((uint64_t)v7, (uint64_t)v15);
  uint64_t v9 = re::AudioFileAsset::assetType(v8);
  (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, v6, v9, 0, 0, 0);
  uint64_t v10 = v13[0];
  if (v13[0]) {
    id v11 = (id)(v13[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  v15[0] = &unk_26E714530;

  v15[0] = &unk_26E7144B8;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v16);

  return v10;
}

uint64_t REAudioFileAssetCreateWithDataAndConfiguration(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v19 = v5;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)v20, &v19, 0, 0);

  uint64_t v7 = re::globalAllocators(v6);
  uint64_t v8 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 168, 8);
  createAudioFileAssetConfiguration((uint64_t)v15, a3);
  uint64_t v9 = re::AudioFileAsset::AudioFileAsset(v8);
  re::AudioFileAsset::setConfiguration((uint64_t)v9, (uint64_t)v15);
  if (v16 && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  uint64_t v10 = (re::AudioFileAsset *)re::AudioFileAsset::setMappedData((uint64_t)v8, (uint64_t)v20);
  id v11 = re::AudioFileAsset::assetType(v10);
  (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v15, a1, v8, v11, 0, 0, 0);
  uint64_t v12 = v15[0];
  if (v15[0]) {
    id v13 = (id)(v15[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  v20[0] = &unk_26E714530;

  v20[0] = &unk_26E7144B8;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v21);

  return v12;
}

uint64_t REAudioFileAssetCreateWithBufferNullable(uint64_t a1, void *a2)
{
  void (*v9)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void);
  uint64_t v10;
  id v11;
  void v13[3];

  id v3 = a2;
  unsigned int v4 = re::globalAllocators(v3);
  id v5 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 168, 8);
  uint64_t v6 = re::AudioFileAsset::AudioFileAsset(v5);
  re::AudioFileAsset::loadBuffer(v6, (AVAudioPCMBuffer *)v3);
  uint64_t v8 = re::AudioFileAsset::assetType(v7);
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416);

  v9(v13, a1, v5, v8, 0, 0, 0);
  uint64_t v10 = v13[0];
  if (v13[0]) {
    id v11 = (id)(v13[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

_REAudioFile *REAudioFileCreateAVAudioFileWithData(uint64_t a1)
{
  return +[_REAudioFile audioFileWithData:a1];
}

BOOL REAudioFileAssetMakeMutableAndReplaceWithData(uint64_t a1, void *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  AssetManager = (uint64_t *)REAssetGetAssetManager(a1);
  id v5 = re::AudioFileAsset::assetType((re::AudioFileAsset *)AssetManager);
  uint64_t v6 = (re *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(AssetManager[130], (unint64_t)v5);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)v10);
  BOOL MutableAndSetMappedData = re::AudioFileAsset::makeMutableAndSetMappedData(v6, v9, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return MutableAndSetMappedData;
}

BOOL REAudioFileAssetIsCompletelyLoaded(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  BOOL v2 = v5
    && (unsigned int v1 = atomic_load((unsigned int *)(v5 + 704)), v1 == 2)
    && *(unsigned char *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v4) + 153) != 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

uint64_t REAudioFileAssetCloneNullable(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v14);
  id v3 = (re *)re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)v14);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = re::globalAllocators(v3);
    uint64_t v6 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 168, 8);
    uint64_t v7 = re::AudioFileAsset::AudioFileAsset(v6);
    re::AudioFileAsset::cloneFrom(v7, v4);
    re::AudioFileAsset::markAsIncompleteLoad(v6);
    uint64_t v9 = re::AudioFileAsset::assetType(v8);
    (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, v6, v9, 0, 0, 0);
    uint64_t v10 = v13[0];
    if (v13[0]) {
      id v11 = (id)(v13[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  }
  else
  {
    uint64_t v10 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v10;
}

uint64_t REAudioFileAssetCreateWithDescriptor(os_unfair_lock_s *a1, uint64_t a2)
{
  id v3 = (const re::AssetLoadDescriptor *)(a2 + 24);
  uint64_t v4 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, v3, v8);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v8[0];
  if (v8[0]) {
    id v6 = (id)(v8[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

uint64_t REAudioFileAssetDescriptorCreateWithURL_Internal(void *a1, _DWORD *a2)
{
  uint64_t v29[5] = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = v3;
  if (*a2 != 2)
  {
    uint64_t v10 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      id v11 = "[CoreRE] [REAudioFileAsset] REAudioFileConfiguration version mismatch, loading url: %@";
LABEL_32:
      id v13 = v10;
      uint32_t v14 = 12;
      goto LABEL_33;
    }
LABEL_34:
    uint64_t v9 = 0;
    goto LABEL_35;
  }
  if (!v3)
  {
    uint64_t v12 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      id v11 = "[CoreRE] [REAudioFileAsset] Nil URL passed to REAudioFileAssetDescriptorCreateWithURL.";
      id v13 = v12;
      uint32_t v14 = 2;
LABEL_33:
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v11, buf, v14);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  uint64_t v5 = (re *)[(re *)v3 isFileURL];
  if ((v5 & 1) == 0)
  {
    uint64_t v10 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      id v11 = "[CoreRE] [REAudioFileAsset] URL passed to REAudioFileAssetDescriptorCreateWithURL must be a file URL: %@";
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  id v6 = (_anonymous_namespace_ *)[v4 fileSystemRepresentation];
  createAudioFileAssetConfiguration((uint64_t)v16, (uint64_t)a2);
  re::AudioFileAssetProvider::makeDescriptorWithURL((_anonymous_namespace_ *)&v20, (unsigned __int8 *)v16, (uint64_t)buf);
  if (v17 && v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  uint64_t v7 = v20;
  if (v20 && (v21 & 1) != 0) {
    uint64_t v7 = (re *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
  }
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v7, v16);
  uint64_t v8 = v16[0];
  re::DynamicString::operator=((re::DynamicString *)(v16[0] + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v8 + 56, v23);
  re::DynamicArray<BOOL>::operator=(v8 + 96, v26);
  re::DynamicString::operator=((re::DynamicString *)(v8 + 136), (re::DynamicString *)v29);
  uint64_t v9 = v16[0];
  if (v29[0])
  {
    if (v29[1]) {
      (*(void (**)(void))(*(void *)v29[0] + 40))();
    }
    memset(v29, 0, 32);
  }
  if (v26[0])
  {
    if (v28) {
      (*(void (**)(void))(*(void *)v26[0] + 40))();
    }
    uint64_t v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v23[0])
  {
    if (v25) {
      (*(void (**)(void))(*(void *)v23[0] + 40))();
    }
    uint64_t v25 = 0;
    memset(v23, 0, sizeof(v23));
    ++v24;
  }
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
LABEL_35:

  return v9;
}

uint64_t REAudioFileAssetDescriptorCreateWithBundleResource_Internal(void *a1, void *a2, _DWORD *a3)
{
  _OWORD v34[5] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (*a3 != 2)
  {
    char v16 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
LABEL_27:
      uint64_t v15 = 0;
      goto LABEL_32;
    }
    *(_DWORD *)uint64_t buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    char v17 = "[CoreRE] [REAudioFileAsset] REAudioFileConfiguration version mismatch, loading file named %@";
    uint64_t v18 = v16;
    uint32_t v19 = 12;
LABEL_34:
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, v17, buf, v19);
    goto LABEL_27;
  }
  if (!v5 || !v6)
  {
    id v20 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t buf = 0;
    char v17 = "[CoreRE] [REAudioFileAsset] REAudioFileAssetDescriptorCreateWithBundleResource missing bundle or resource name.";
    uint64_t v18 = v20;
    uint32_t v19 = 2;
    goto LABEL_34;
  }
  uint64_t v8 = [v5 URLForResource:v6 withExtension:0];
  uint64_t v9 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v10 = [v8 path];
  char v11 = [v9 fileExistsAtPath:v10];

  if (v11)
  {
    createAudioFileAssetConfiguration((uint64_t)v23, (uint64_t)a3);
    re::AudioFileAssetProvider::makeDescriptorWithBundle(v5, v7, (unsigned __int8 *)v23, (uint64_t)buf);
    if (v24)
    {
      id v13 = v25;
      if (v25)
      {
        if (v26) {
          id v13 = (re *)(*(uint64_t (**)(void))(*(void *)v25 + 40))();
        }
      }
    }
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v13, v23);
    uint64_t v14 = v23[0];
    re::DynamicString::operator=((re::DynamicString *)(v23[0] + 24), (re::DynamicString *)buf);
    re::DynamicArray<BOOL>::operator=(v14 + 56, v28);
    re::DynamicArray<BOOL>::operator=(v14 + 96, v31);
    re::DynamicString::operator=((re::DynamicString *)(v14 + 136), (re::DynamicString *)v34);
    uint64_t v15 = v23[0];
    if (v34[0])
    {
      if (v34[1]) {
        (*(void (**)(void))(*(void *)v34[0] + 40))();
      }
      memset(v34, 0, 32);
    }
    if (v31[0])
    {
      if (v33) {
        (*(void (**)(void))(*(void *)v31[0] + 40))();
      }
      uint64_t v33 = 0;
      memset(v31, 0, sizeof(v31));
      ++v32;
    }
    if (v28[0])
    {
      if (v30) {
        (*(void (**)(void))(*(void *)v28[0] + 40))();
      }
      uint64_t v30 = 0;
      memset(v28, 0, sizeof(v28));
      ++v29;
    }
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    char v21 = *re::audioLogObjects(v12);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] REAudioFileAssetDescriptorCreateWithBundleResource resource named '%@' not found.", buf, 0xCu);
    }
    uint64_t v15 = 0;
  }

LABEL_32:
  return v15;
}

uint64_t REAudioFileAssetDescriptorCreateWithURL(void *a1, unsigned __int8 *a2)
{
  void v20[5] = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = (re *)[v3 isFileURL];
  if (v4)
  {
    id v5 = (_anonymous_namespace_ *)[v3 fileSystemRepresentation];
    re::AudioFileAssetProvider::makeDescriptorWithURL((_anonymous_namespace_ *)&v11, a2, (uint64_t)buf);
    id v6 = (re *)v11;
    if (v11 && (v12 & 1) != 0) {
      id v6 = (re *)(*(uint64_t (**)(void))(*(void *)v11 + 40))();
    }
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v6, &v11);
    uint64_t v7 = v11;
    re::DynamicString::operator=((re::DynamicString *)(v11 + 24), (re::DynamicString *)buf);
    re::DynamicArray<BOOL>::operator=(v7 + 56, v14);
    re::DynamicArray<BOOL>::operator=(v7 + 96, v17);
    re::DynamicString::operator=((re::DynamicString *)(v7 + 136), (re::DynamicString *)v20);
    uint64_t v8 = v11;
    if (v20[0])
    {
      if (v20[1]) {
        (*(void (**)(void))(*(void *)v20[0] + 40))();
      }
      memset(v20, 0, 32);
    }
    if (v17[0])
    {
      if (v19) {
        (*(void (**)(void))(*(void *)v17[0] + 40))();
      }
      uint64_t v19 = 0;
      memset(v17, 0, sizeof(v17));
      ++v18;
    }
    if (v14[0])
    {
      if (v16) {
        (*(void (**)(void))(*(void *)v14[0] + 40))();
      }
      uint64_t v16 = 0;
      memset(v14, 0, sizeof(v14));
      ++v15;
    }
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    uint64_t v9 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] URL passed to REAudioFileAssetDescriptorCreateWithURL must be a file URL: %@", buf, 0xCu);
    }
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t REAudioFileAssetDescriptorCreateWithBundleResource(void *a1, void *a2, unsigned __int8 *a3)
{
  v25[5] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = [v5 URLForResource:v6 withExtension:0];
  uint64_t v8 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v9 = [v7 path];
  char v10 = [v8 fileExistsAtPath:v9];

  if (v10)
  {
    re::AudioFileAssetProvider::makeDescriptorWithBundle(v5, v6, a3, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v12, &v17);
    uint64_t v13 = v17;
    re::DynamicString::operator=((re::DynamicString *)(v17 + 24), (re::DynamicString *)buf);
    re::DynamicArray<BOOL>::operator=(v13 + 56, v19);
    re::DynamicArray<BOOL>::operator=(v13 + 96, v22);
    re::DynamicString::operator=((re::DynamicString *)(v13 + 136), (re::DynamicString *)v25);
    uint64_t v14 = v17;
    if (v25[0])
    {
      if (v25[1]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))();
      }
      memset(v25, 0, 32);
    }
    if (v22[0])
    {
      if (v24) {
        (*(void (**)(void))(*(void *)v22[0] + 40))();
      }
      uint64_t v24 = 0;
      memset(v22, 0, sizeof(v22));
      ++v23;
    }
    if (v19[0])
    {
      if (v21) {
        (*(void (**)(void))(*(void *)v19[0] + 40))();
      }
      uint64_t v21 = 0;
      memset(v19, 0, sizeof(v19));
      ++v20;
    }
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    int v15 = *re::audioLogObjects(v11);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] REAudioFileAssetDescriptorCreateWithBundleResource resource named '%@' not found.", buf, 0xCu);
    }
    uint64_t v14 = 0;
  }

  return v14;
}

uint64_t REAudioFileAssetCreateWithMappedDataAndConfiguration(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v16 = v5;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)v17, &v16, 0, 0);

  uint64_t v7 = re::globalAllocators(v6);
  uint64_t v8 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 168, 8);
  uint64_t v9 = re::AudioFileAsset::AudioFileAsset(v8);
  re::AudioFileAsset::setConfiguration((uint64_t)v9, a3);
  char v10 = (re::AudioFileAsset *)re::AudioFileAsset::setMappedData((uint64_t)v8, (uint64_t)v17);
  uint64_t v11 = re::AudioFileAsset::assetType(v10);
  (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v15, a1, v8, v11, 0, 0, 0);
  uint64_t v12 = v15[0];
  if (v15[0]) {
    id v13 = (id)(v15[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  v17[0] = &unk_26E714530;

  v17[0] = &unk_26E7144B8;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v18);

  return v12;
}

uint64_t REAudioFileAssetCreateWithBufferAndConfiguration(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v11)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void);
  uint64_t v12;
  id v13;
  void v15[3];

  id v5 = a2;
  id v6 = re::globalAllocators(v5);
  uint64_t v7 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 168, 8);
  uint64_t v8 = re::AudioFileAsset::AudioFileAsset(v7);
  re::AudioFileAsset::setConfiguration((uint64_t)v8, a3);
  re::AudioFileAsset::loadBuffer(v7, (AVAudioPCMBuffer *)v5);
  char v10 = re::AudioFileAsset::assetType(v9);
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416);

  v11(v15, a1, v7, v10, 0, 0, 0);
  uint64_t v12 = v15[0];
  if (v15[0]) {
    id v13 = (id)(v15[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v12;
}

uint64_t REAudioFileAssetCloneWithConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v16);
  id v5 = (re *)re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)v16);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = re::globalAllocators(v5);
    uint64_t v8 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 168, 8);
    uint64_t v9 = re::AudioFileAsset::AudioFileAsset(v8);
    re::AudioFileAsset::cloneFrom(v9, v6);
    re::AudioFileAsset::markAsIncompleteLoad(v8);
    char v10 = (re::AudioFileAsset *)re::AudioFileAsset::setConfiguration((uint64_t)v8, a3);
    uint64_t v11 = re::AudioFileAsset::assetType(v10);
    (*(void (**)(void *__return_ptr, uint64_t, re::AudioFileAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v15, a1, v8, v11, 0, 0, 0);
    uint64_t v12 = v15[0];
    if (v15[0]) {
      id v13 = (id)(v15[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  }
  else
  {
    uint64_t v12 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v12;
}

void REAudioFileAssetSetMissedPlayStrategy(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10 && (unsigned int v4 = atomic_load((unsigned int *)(v10 + 704)), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)(v10 + 704));
    if (v5 == 2)
    {
      ++*(_DWORD *)(v10 + 260);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v9);
      if (v6) {
        *(unsigned char *)(v6 + 152) = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot set input mode when asset is not yet loaded.", v8, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

uint64_t REAudioFileAssetGetMissedPlayStrategy(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)v4);
  if (v1) {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 152);
  }
  else {
    uint64_t v2 = 2;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REAudioFileAssetSetMaximumAlignmentLatency(uint64_t a1, double a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10 && (unsigned int v4 = atomic_load((unsigned int *)(v10 + 704)), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)(v10 + 704));
    if (v5 == 2)
    {
      ++*(_DWORD *)(v10 + 260);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&v9);
      if (v6) {
        *(double *)(v6 + 144) = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot set input mode when asset is not yet loaded.", v8, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

double REAudioFileAssetGetMaximumAlignmentLatency(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)v4);
  if (v1) {
    double v2 = *(double *)(v1 + 144);
  }
  else {
    double v2 = 0.5;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAudioFileAssetGetAudioAssetID(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(void *)(*(void *)(re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v7) + 8) + 24);
  }
  else
  {
    unsigned int v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileAsset] Cannot get audioAssetID when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

uint64_t REAssetLoadDescriptorCreate(const char *a1, void *a2, const char *a3)
{
  unsigned int v5 = a2;
  uint64_t v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 144, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_DWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(void *)(v7 + 136) = 0;
  re::DynamicString::setCapacity((void *)(v7 + 112), 0);
  uint64_t v12 = a1;
  size_t v13 = strlen(a1);
  re::DynamicString::operator=((re::DynamicString *)v7, (uint64_t)&v12);
  size_t v9 = strlen(a3);
  uint64_t v12 = a3;
  size_t v13 = v9;
  re::DynamicString::operator=((re::DynamicString *)(v7 + 112), (uint64_t)&v12);
  re::DynamicArray<BOOL>::resize(v7 + 32, [(re *)v5 length]);
  uint64_t v10 = v5;
  re::DynamicArray<REFrameAnalysisBottleneck>::copy((void *)(v7 + 32), 0, (char *)[(re *)v10 bytes], [(re *)v10 length]);

  return v7;
}

re *REAssetLoadDescriptorDelete(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::DynamicString::deinit((re *)((char *)v1 + 112));
    re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 72);
    re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 32);
    v3.n128_f64[0] = re::DynamicString::deinit(v1);
    unsigned int v4 = *(uint64_t (**)(uint64_t, re *, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

uint64_t REAssetLoadDescriptorGetSchemeName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return *(void *)(a1 + 16);
  }
  else {
    return a1 + 9;
  }
}

CFDataRef REAssetLoadDescriptorGetData(uint64_t a1)
{
  return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)(a1 + 64), *(void *)(a1 + 48), (CFAllocatorRef)*MEMORY[0x263EFFB08]);
}

uint64_t REAssetLoadDescriptorGetAssetType(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120)) {
    return *(void *)(a1 + 128);
  }
  else {
    return a1 + 121;
  }
}

re::DynamicString *REAssetLoadDescriptorSetSchemeName(re::DynamicString *a1, char *__s)
{
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(a1, (uint64_t)v4);
}

void *REAssetLoadDescriptorSetData(uint64_t a1, CFDataRef theData)
{
  __n128 v3 = (void *)(a1 + 32);
  CFIndex Length = CFDataGetLength(theData);
  re::DynamicArray<BOOL>::resize((uint64_t)v3, Length);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  CFIndex v6 = CFDataGetLength(theData);
  return re::DynamicArray<REFrameAnalysisBottleneck>::copy(v3, 0, BytePtr, v6);
}

re::DynamicString *REAssetLoadDescriptorSetAssetType(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 112);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REAssetManagerLoadAsync(os_unfair_lock_s *a1, const re::AssetLoadDescriptor *a2)
{
  unsigned int v4 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, a2, v7);
  os_unfair_lock_unlock(v4);
  re::AssetHandle::loadAsync((re::AssetHandle *)v7);
  uint64_t v5 = v7[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

uint64_t REAssetManagerDeserializeCompiledData(uint64_t a1, void *a2, char *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v21 = a2;
  re::AssetManager::assetTypeFromString((os_unfair_lock_s *)a1, a3, (uint64_t)v16);
  if (v16[0])
  {
    v15[1] = 0;
    void v15[2] = 0;
    v15[0] = *(void *)(a1 + 1040);
    v14[0] = 0;
    uint64_t v7 = (re *)re::AssetUtilities::loadCompiledAssetFromData(&v21, v15, v17, 0, 0, (uint64_t)v14, (uint64_t)buf);
    if (buf[0])
    {
      uint64_t v8 = *(void *)&v27[4];
      goto LABEL_14;
    }
    uint64_t v10 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (v27[12]) {
        size_t v13 = v28;
      }
      else {
        size_t v13 = &v27[13];
      }
      *(_DWORD *)uint64_t v22 = 136315394;
      int v23 = a3;
      __int16 v24 = 2080;
      uint64_t v25 = v13;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Error loading compiled asset '%s': %s", v22, 0x16u);
      if (!a4) {
        goto LABEL_12;
      }
    }
    else if (!a4)
    {
      goto LABEL_12;
    }
    *a4 = 0;
LABEL_12:
    if (!buf[0] && *(void *)&v27[4] && (v27[12] & 1) != 0) {
      (*(void (**)(void))(**(void **)&v27[4] + 40))();
    }
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  size_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if (v19) {
      uint64_t v12 = *(unsigned char **)&v20[7];
    }
    else {
      uint64_t v12 = v20;
    }
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)int v27 = a3;
    *(_WORD *)&unsigned char v27[8] = 2080;
    *(void *)&v27[10] = v12;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to parse asset path '%s': %s", buf, 0x16u);
  }

  uint64_t v8 = 0;
  if (a4) {
    *a4 = 0;
  }
LABEL_14:
  if (!v16[0] && v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }

  return v8;
}

uint64_t REAssetManagerInjectMipsToPrimaryTexture(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v20);
  if (!v21)
  {
    uint64_t v10 = *re::assetsLogObjects(v7);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (a4) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    LOWORD(v19) = 0;
    uint64_t v18 = "The asset is null.";
LABEL_17:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v19, 2u);
    if (a4) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  uint64_t v8 = *(uint64_t **)(v21 + 264);
  size_t v9 = re::TextureAsset::assetType(v7);
  if (v8 != v9)
  {
    uint64_t v10 = *re::assetsLogObjects((re *)v9);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (a4)
      {
LABEL_5:
        uint64_t v11 = 0;
        *a4 = 0;
        goto LABEL_14;
      }
LABEL_8:
      uint64_t v11 = 0;
      goto LABEL_14;
    }
    LOWORD(v19) = 0;
    uint64_t v18 = "Cannot inject mips to the specified asset because it is not a texture asset.";
    goto LABEL_17;
  }
  uint64_t v12 = re::TextureAsset::assetType((re::TextureAsset *)v9);
  size_t v13 = (const void *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), (unint64_t)v12);
  id v19 = a3;
  re::AssetHandle::loadNow(v21, 0);
  if (v21)
  {
    unsigned int v15 = atomic_load((unsigned int *)(v21 + 704));
    if (v15 == 2)
    {
      ++*(_DWORD *)(v21 + 260);
      id v16 = (re::TextureAsset *)re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v20);
      if (v16) {
        re::TextureAssetLoader::injectMipsFromKTX(v14, v16, &v19);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v20);

  uint64_t v11 = 1;
LABEL_14:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
  return v11;
}

uint64_t REAssetManagerLookupExistingAsset(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)a1, a2, v7);
  os_unfair_lock_unlock(v4);
  if (!v7[0]) {
    return 0;
  }
  uint64_t v5 = v8[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

void *REAssetLoadDescriptorTransformCreateSourceRemapping(re *a1, const char *a2)
{
  unsigned int v4 = re::globalAllocators(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 88, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *uint64_t v5 = &unk_26E735E70;
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 3), (const re::DynamicString *)&v11);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 7), (const re::DynamicString *)&v9);
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v5;
}

uint64_t REAssetManagerCreateTransformedAssetLoadDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[5] = *MEMORY[0x263EF8340];
  unsigned int v4 = *(os_unfair_lock_s **)(a1 + 1128);
  if (*(unsigned char *)(a3 + 8)) {
    uint64_t v5 = *(const char **)(a3 + 16);
  }
  else {
    uint64_t v5 = (const char *)(a3 + 9);
  }
  uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(v4, v5);
  if (ProviderForScheme)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)ProviderForScheme + 56))(buf);
    if (buf[0])
    {
      LOBYTE(v16) = v22[4];
      if (v22[4])
      {
        re::DynamicString::DynamicString((re::DynamicString *)((char *)v17 + 4), (const re::DynamicString *)&v23);
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)v18, v25);
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)v19, v26);
        uint64_t v7 = re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)v27);
        uint64_t v8 = re::globalAllocators(v7);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 144, 8);
        char v10 = re::DynamicString::DynamicString((re::DynamicString *)v9, (const re::DynamicString *)((char *)v17 + 4));
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)v10 + 32, v18);
        re::DynamicArray<BOOL>::DynamicArray(v9 + 72, v19);
        re::DynamicString::DynamicString((re::DynamicString *)(v9 + 112), (const re::DynamicString *)v20);
      }
      else
      {
        uint64_t v9 = 0;
      }
      re::Optional<re::AssetLoadDescriptor>::~Optional(&v16);
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      char v12 = (id)CoreRELog::log;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (v23) {
          unsigned int v15 = *(unsigned char **)&v24[7];
        }
        else {
          unsigned int v15 = v24;
        }
        int v16 = 136315138;
        v17[0] = v15;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to transform load descriptor with error: %s", (uint8_t *)&v16, 0xCu);
      }

      uint64_t v9 = 0;
    }
    if (buf[0])
    {
      re::Optional<re::AssetLoadDescriptor>::~Optional(&v22[4]);
    }
    else if (*(void *)&v22[4] && (v23 & 1) != 0)
    {
      (*(void (**)(void))(**(void **)&v22[4] + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a3 + 8)) {
        uint64_t v14 = *(void *)(a3 + 16);
      }
      else {
        uint64_t v14 = a3 + 9;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)uint64_t v22 = v14;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Could not find AssetProvider registered for scheme %s.", buf, 0xCu);
    }

    return 0;
  }
  return v9;
}

const void *REAssetManagerCopyLoadDescriptorSource(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __n128 v3 = *(os_unfair_lock_s **)(a1 + 1128);
  if (*(unsigned char *)(a2 + 8)) {
    unsigned int v4 = *(const char **)(a2 + 16);
  }
  else {
    unsigned int v4 = (const char *)(a2 + 9);
  }
  uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(v3, v4);
  if (!ProviderForScheme)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a2 + 8)) {
        uint64_t v12 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v12 = a2 + 9;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v18 = v12;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Could not find AssetProvider registered for scheme %s.", buf, 0xCu);
    }

    return 0;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)ProviderForScheme + 64))(buf);
  if (buf[0])
  {
    LOBYTE(v14) = BYTE4(v18);
    if (BYTE4(v18))
    {
      re::DynamicString::DynamicString((re::DynamicString *)((char *)&v14 + 8), (const re::DynamicString *)&v19);
      if (v15) {
        CFIndex v6 = *(unsigned char **)&v16[7];
      }
      else {
        CFIndex v6 = v16;
      }
      uint64_t v7 = (const void *)objc_msgSend(NSString, "stringWithUTF8String:", v6, (void)v14);
      CFRetain(v7);
      if (_BYTE)v14 && *((void *)&v14 + 1) && (v15) {
        (*(void (**)(void))(**((void **)&v14 + 1) + 40))();
      }
      goto LABEL_23;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v19) {
        size_t v13 = *(unsigned char **)&v20[7];
      }
      else {
        size_t v13 = v20;
      }
      LODWORD(v14) = 136315138;
      *(void *)((char *)&v14 + 4) = v13;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to get source string from load descriptor with error: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  uint64_t v7 = 0;
LABEL_23:
  if (!buf[0])
  {
    char v10 = (re::DynamicString *)((char *)&v18 + 4);
    goto LABEL_27;
  }
  if (BYTE4(v18))
  {
    char v10 = (re::DynamicString *)&v19;
LABEL_27:
    re::DynamicString::deinit(v10);
  }
  return v7;
}

const void *RENetworkAssetManagerCopyLocalRootAssetEntityName(uint64_t a1)
{
  uint64_t v1 = NSString;
  re::StringID::StringID((re::StringID *)v4, (const StringID *)(a1 + 200));
  uint64_t v2 = (const void *)[v1 stringWithUTF8String:v4[1]];
  re::StringID::destroyString((re::StringID *)v4);
  CFRetain(v2);
  return v2;
}

uint64_t RENetworkAssetManagerSetUseIndependentAssetScene(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

void re::SourceLoadDescriptorTransform::~SourceLoadDescriptorTransform(re::SourceLoadDescriptorTransform *this)
{
  *(void *)this = &unk_26E735E70;
  uint64_t v2 = (re::SourceLoadDescriptorTransform *)((char *)this + 24);
  re::DynamicString::deinit((re::SourceLoadDescriptorTransform *)((char *)this + 56));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E735E70;
  uint64_t v2 = (re::SourceLoadDescriptorTransform *)((char *)this + 24);
  re::DynamicString::deinit((re::SourceLoadDescriptorTransform *)((char *)this + 56));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SourceLoadDescriptorTransform::transformationType(re::SourceLoadDescriptorTransform *this)
{
  return 0;
}

void *REVFXEmitterComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

double REVFXEmitterComponentGetEmissionDuration(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double REVFXEmitterComponentGetEmissionDurationVariation(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

double REVFXEmitterComponentGetIdleDuration(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

double REVFXEmitterComponentGetIdleDurationVariation(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double REVFXEmitterComponentGetWarmupDuration(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

uint64_t REVFXEmitterComponentGetLoops(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t REVFXEmitterComponentGetEmitterShape(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t REVFXEmitterComponentGetBirthLocation(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

__n128 REVFXEmitterComponentGetBirthLocationVertex(__n128 *a1)
{
  return a1[7];
}

uint64_t REVFXEmitterComponentGetBirthDirection(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

__n128 REVFXEmitterComponentGetEmitterShapeSize(__n128 *a1)
{
  return a1[10];
}

float REVFXEmitterComponentGetRadialAmount(uint64_t a1)
{
  return *(float *)(a1 + 176);
}

float REVFXEmitterComponentGetTorusInnerRadius(uint64_t a1)
{
  return *(float *)(a1 + 180);
}

float REVFXEmitterComponentGetParticleSpeed(uint64_t a1)
{
  return *(float *)(a1 + 184);
}

float REVFXEmitterComponentGetParticleSpeedVariation(uint64_t a1)
{
  return *(float *)(a1 + 188);
}

__n128 REVFXEmitterComponentGetEmissionDirection(__n128 *a1)
{
  return a1[9];
}

uint64_t REVFXEmitterComponentGetSpawnOccasion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t REVFXEmitterComponentGetIsSpawningEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 252);
}

float REVFXEmitterComponentGetSpawnVelocityFactor(uint64_t a1)
{
  return *(float *)(a1 + 256);
}

float REVFXEmitterComponentGetSpawnSpreadFactor(uint64_t a1)
{
  return *(float *)(a1 + 260);
}

float REVFXEmitterComponentGetSpawnSpreadFactorVariation(uint64_t a1)
{
  return *(float *)(a1 + 264);
}

uint64_t REVFXEmitterComponentGetSpawnInheritParentColor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 268);
}

float REVFXEmitterComponentGetBirthRate(uint64_t a1, int a2)
{
  uint64_t v2 = 288;
  if (a2) {
    uint64_t v2 = 688;
  }
  return *(float *)(a1 + v2);
}

float REVFXEmitterComponentGetBirthRateVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 52);
}

float REVFXEmitterComponentGetDampingFactor(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 56);
}

__n128 REVFXEmitterComponentGetAcceleration(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 64);
}

float REVFXEmitterComponentGetSpreadingAngle(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 60);
}

float REVFXEmitterComponentGetParticleSize(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 80);
}

float REVFXEmitterComponentGetParticleSizeVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 84);
}

uint64_t REVFXEmitterComponentGetBillboardMode(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned int *)(a1 + v2 + 88);
}

__n128 REVFXEmitterComponentGetBillboardAxis(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 96);
}

float REVFXEmitterComponentGetBillboardAxisVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 112);
}

float REVFXEmitterComponentGetParticleMass(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 116);
}

float REVFXEmitterComponentGetParticleMassVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 120);
}

double REVFXEmitterComponentGetParticleLifeSpan(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(double *)(a1 + v2 + 128);
}

double REVFXEmitterComponentGetParticleLifeSpanVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(double *)(a1 + v2 + 136);
}

float REVFXEmitterComponentGetParticleAngle(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 144);
}

float REVFXEmitterComponentGetParticleAngleVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 148);
}

float REVFXEmitterComponentGetParticleAngularVelocity(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 152);
}

float REVFXEmitterComponentGetParticleAngularVelocityVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 156);
}

float REVFXEmitterComponentGetParticleBounce(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 160);
}

float REVFXEmitterComponentGetParticleFriction(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 164);
}

uint64_t REVFXEmitterComponentGetOpacityOverLife(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned int *)(a1 + v2 + 168);
}

float REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespan(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 172);
}

float REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespanPower(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 176);
}

__n128 REVFXEmitterComponentGetStartColorRangeA(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 192);
}

__n128 REVFXEmitterComponentGetStartColorRangeB(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 208);
}

uint64_t REVFXEmitterComponentGetUseStartColorRange(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 224);
}

__n128 REVFXEmitterComponentGetEndColorRangeA(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 240);
}

__n128 REVFXEmitterComponentGetEndColorRangeB(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 256);
}

uint64_t REVFXEmitterComponentGetUseEndColorRange(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 272);
}

uint64_t REVFXEmitterComponentGetUseEndColor(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 273);
}

float REVFXEmitterComponentGetColorEvolutionPower(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 276);
}

float REVFXEmitterComponentGetNoiseStrength(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 280);
}

float REVFXEmitterComponentGetNoiseScale(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 284);
}

float REVFXEmitterComponentGetNoiseAnimationSpeed(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 288);
}

float REVFXEmitterComponentGetRadialGravityStrength(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 292);
}

__n128 REVFXEmitterComponentGetRadialGravityCenter(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 304);
}

float REVFXEmitterComponentGetVortexStrength(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 320);
}

__n128 REVFXEmitterComponentGetVortexDirection(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(__n128 *)(a1 + v2 + 336);
}

uint64_t REVFXEmitterComponentGetIsLightingEnabled(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 352);
}

float REVFXEmitterComponentGetStretchFactor(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 356);
}

uint64_t REVFXEmitterComponentGetSortOrder(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned int *)(a1 + v2 + 360);
}

uint64_t REVFXEmitterComponentGetBlendMode(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned int *)(a1 + v2 + 364);
}

uint64_t REVFXEmitterComponentGetParticleImage(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(void *)(a1 + v2 + 368);
}

uint64_t REVFXEmitterComponentGetIsAnimated(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 392);
}

uint64_t REVFXEmitterComponentGetRowCount(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(void *)(a1 + v2 + 400);
}

uint64_t REVFXEmitterComponentGetColumnCount(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(void *)(a1 + v2 + 408);
}

uint64_t REVFXEmitterComponentGetInitialFrame(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(void *)(a1 + v2 + 416);
}

uint64_t REVFXEmitterComponentGetInitialFrameVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(void *)(a1 + v2 + 424);
}

float REVFXEmitterComponentGetFrameRate(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 432);
}

float REVFXEmitterComponentGetFrameRateVariation(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(float *)(a1 + v2 + 436);
}

uint64_t REVFXEmitterComponentGetAnimationRepeatMode(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned int *)(a1 + v2 + 440);
}

uint64_t REVFXEmitterComponentGetCollisions(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 640;
  }
  return *(unsigned __int8 *)(a1 + v2 + 444);
}

uint64_t REVFXEmitterComponentGetSimulationState(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t REVFXEmitterComponentGetIsLocalSimulationSpace(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t REVFXEmitterComponentGetIsLocalFields(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 197);
}

uint64_t REVFXEmitterComponentGetRestartCount(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

uint64_t REVFXEmitterComponentGetBurstCount(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

uint64_t REVFXEmitterComponentGetBurstCountVariation(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t REVFXEmitterComponentGetBurstRestartCount(uint64_t a1)
{
  return *(void *)(a1 + 240);
}

uint64_t REVFXEmitterComponentGetIsEmitting(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

float REVFXEmitterComponentGetSimulationRate(uint64_t a1)
{
  return *(float *)(a1 + 248);
}

id REVFXEmitterComponentGetCollisionPlanes(uint64_t a1)
{
  uint64_t v23 = 0;
  v20[1] = 0;
  uint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  if (*(void *)(a1 + 1088))
  {
    uint64_t v1 = a1 + 1088;
    unint64_t v2 = *(void *)(a1 + 1104);
    v20[0] = *(void **)(a1 + 1088);
    re::DynamicArray<re::RigJoint>::setCapacity(v20, v2);
    ++v22;
    re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy(v20, v1);
    if (v21)
    {
      __n128 v3 = [MEMORY[0x263EFF980] array];
      if (v21)
      {
        uint64_t v4 = v23;
        uint64_t v5 = v23 + 96 * v21;
        do
        {
          *(void *)&long long v6 = *(void *)v4;
          *((void *)&v6 + 1) = *(void *)(v4 + 16);
          long long v7 = *(_OWORD *)(v4 + 24);
          long long v8 = *(_OWORD *)(v4 + 40);
          long long v9 = *(_OWORD *)(v4 + 56);
          uint64_t v10 = *(void *)(v4 + 72);
          uint64_t v14 = *(void *)(v4 + 80);
          long long v15 = v6;
          long long v16 = v7;
          long long v17 = v8;
          long long v18 = v9;
          uint64_t v19 = v10;
          uint64_t v11 = (void *)[objc_alloc(MEMORY[0x263F08D40]) initWithBytes:&v14 objCType:"{?=q[2f][4[4f]]}"];
          [v3 addObject:v11];

          v4 += 96;
        }
        while (v4 != v5);
      }
      uint64_t v12 = (void *)[v3 copy];
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v20[0] && v23) {
      (*(void (**)(void))(*(void *)v20[0] + 40))();
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

uint64_t REVFXEmitterComponentSetEmissionDuration(uint64_t result, double a2)
{
  *(double *)(result + 48) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetEmissionDurationVariation(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetIdleDuration(uint64_t result, double a2)
{
  *(double *)(result + 64) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetIdleDurationVariation(uint64_t result, double a2)
{
  *(double *)(result + 72) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetWarmupDuration(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetLoops(uint64_t result, char a2)
{
  *(unsigned char *)(result + 88) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetEmitterShape(uint64_t result, int a2)
{
  *(_DWORD *)(result + 92) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetRadialAmount(uint64_t result, float a2)
{
  *(float *)(result + 176) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetTorusInnerRadius(uint64_t result, float a2)
{
  *(float *)(result + 180) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBirthLocation(uint64_t result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

__n128 *REVFXEmitterComponentSetBirthLocationVertex(__n128 *result, __n128 a2)
{
  result[7] = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBirthDirection(uint64_t result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

__n128 *REVFXEmitterComponentSetEmitterShapeSize(__n128 *result, __n128 a2)
{
  result[10] = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleSpeed(uint64_t result, float a2)
{
  *(float *)(result + 184) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleSpeedVariation(uint64_t result, float a2)
{
  *(float *)(result + 188) = a2;
  return result;
}

__n128 *REVFXEmitterComponentSetEmissionDirection(__n128 *result, __n128 a2)
{
  result[9] = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSpawnOccasion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 192) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetIsSpawningEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 252) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSpawnVelocityFactor(uint64_t result, float a2)
{
  *(float *)(result + 256) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSpawnSpreadFactor(uint64_t result, float a2)
{
  *(float *)(result + 260) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSpawnSpreadFactorVariation(uint64_t result, float a2)
{
  *(float *)(result + 264) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSpawnInheritParentColor(uint64_t result, char a2)
{
  *(unsigned char *)(result + 268) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBirthRate(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 288;
  if (a2) {
    uint64_t v3 = 688;
  }
  *(float *)(result + v3) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetBirthRateVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 52) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetDampingFactor(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 56) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetAcceleration(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 64) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetSpreadingAngle(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 60) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleSize(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 80) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleSizeVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 84) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetBillboardMode(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(_DWORD *)(result + v3 + 88) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetBillboardAxis(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 96) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetBillboardAxisVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 112) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleMass(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 116) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleMassVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 120) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleLifeSpan(uint64_t result, int a2, double a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(double *)(result + v3 + 128) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleLifeSpanVariation(uint64_t result, int a2, double a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(double *)(result + v3 + 136) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleAngle(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 144) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleAngleVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 148) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleAngularVelocity(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 152) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleAngularVelocityVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 156) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleBounce(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 160) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetParticleFriction(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 164) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetOpacityOverLife(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(_DWORD *)(result + v3 + 168) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespan(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 172) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespanPower(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 176) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetStartColorRangeA(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 192) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetStartColorRangeB(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 208) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetUseStartColorRange(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 224) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetEndColorRangeA(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 240) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetEndColorRangeB(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 256) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetUseEndColorRange(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 272) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetUseEndColor(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 273) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetColorEvolutionPower(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 276) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetNoiseStrength(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 280) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetNoiseScale(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 284) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetNoiseAnimationSpeed(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 288) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetRadialGravityStrength(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 292) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetRadialGravityCenter(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 304) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetVortexStrength(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 320) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetVortexDirection(uint64_t result, int a2, __n128 a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(__n128 *)(result + v3 + 336) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetIsLightingEnabled(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 352) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetStretchFactor(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 356) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetSortOrder(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(_DWORD *)(result + v3 + 360) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetBlendMode(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(_DWORD *)(result + v3 + 364) = a3;
  return result;
}

void REVFXEmitterComponentSetParticleImage(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  uint64_t v4 = a1 + v3;
  re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)&v7);
  long long v5 = *(_OWORD *)(v4 + 368);
  *(_OWORD *)(v4 + 368) = v7;
  long long v7 = v5;
  uint64_t v6 = *(void *)(v4 + 384);
  *(void *)(v4 + 384) = v8;
  uint64_t v8 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REVFXEmitterComponentSetIsAnimated(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 392) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetRowCount(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(void *)(result + v3 + 400) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetColumnCount(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(void *)(result + v3 + 408) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetInitialFrame(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(void *)(result + v3 + 416) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetInitialFrameVariation(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(void *)(result + v3 + 424) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetFrameRate(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 432) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetFrameRateVariation(uint64_t result, int a2, float a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(float *)(result + v3 + 436) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetAnimationRepeatMode(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(_DWORD *)(result + v3 + 440) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetCollision(uint64_t result, int a2, char a3)
{
  uint64_t v3 = 240;
  if (a2) {
    uint64_t v3 = 640;
  }
  *(unsigned char *)(result + v3 + 444) = a3;
  return result;
}

uint64_t REVFXEmitterComponentSetSimulationState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 200) = a2;
  return result;
}

uint64_t REVFXEmitterComponentResetSimulation(uint64_t result)
{
  return result;
}

uint64_t REVFXEmitterComponentSetIsLocalSimulationSpace(uint64_t result, char a2)
{
  *(unsigned char *)(result + 196) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetIsLocalFields(uint64_t result, char a2)
{
  *(unsigned char *)(result + 197) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetRestartCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 208) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetIsEmitting(uint64_t result, char a2)
{
  *(unsigned char *)(result + 216) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBurstCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 224) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBurstCountVariation(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetBurstRestartCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 240) = a2;
  return result;
}

uint64_t REVFXEmitterComponentSetSimulationRate(uint64_t result, float a2)
{
  *(float *)(result + 248) = a2;
  return result;
}

id **REVFXEmitterComponentRemoveCollisionPlane(id **result, uint64_t a2)
{
  if (a2) {
    return (id **)re::ecs2::VFXSceneComponent::removeCollisionPlane(result[4], a2);
  }
  return result;
}

void *REPlanarReflectionCaptureComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *REPlanarReflectionReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

re::ecs2::EntityHandle *REPlanarReflectionReceiverComponentSetCaptureEntity(uint64_t a1, uint64_t a2)
{
  return re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 32), a2);
}

char *REPlanarReflectionReceiverComponentGetCaptureEntity(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
}

uint64_t REEntityGetSelfEnabledInCALayerHierarchy(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 289) >> 5) & 1;
}

BOOL REEntityGetAllSelfEnabled(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 288) & 0x2008) == 0;
}

void *REECSJSONSerializerCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  unint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 536, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *unint64_t v2 = &unk_26E735ED8;
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)(v2 + 3));
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v4);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v4);
  return v2;
}

uint64_t REECSJSONDeserializerCreate(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v3 = (re *)re::ServiceLocator::service<re::AssetService>(v2);
    char v4 = re::globalAllocators(v3);
    long long v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 664, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
    *long long v5 = &unk_26E735F20;
    re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer((re::ecs2::ECSJSONDeserializer *)(v5 + 3), (AssetService *)v3);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v7);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v7);
    return (uint64_t)v5;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ECSService must not be null.", "cECSService", "REECSJSONDeserializerCreate", 139);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REComponentSerializeCopyToJSONData(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component must not be null.", "component", "REComponentSerializeCopyToJSONData", 156);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Serializer must not be null.", "serializer", "REComponentSerializeCopyToJSONData", 157);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v12, -1);
  re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>(a2 + 24, a1, (uint64_t)v12, (uint64_t)v8);
  if (v8[0])
  {
    v12[8] = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v14);
    CFTypeRef v6 = *v13;
    CFRetain(*v13);
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (!v8[0] && v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v12);
  return (uint64_t)v6;
}

void anonymous namespace'::setCFError(uint64_t a1, CFErrorRef *a2)
{
  if (a2)
  {
    userInfoKeys = (void *)*MEMORY[0x263EFFC48];
    if (*(void *)(a1 + 24)) {
      uint64_t v3 = *(const char **)(a1 + 32);
    }
    else {
      uint64_t v3 = (const char *)(a1 + 25);
    }
    CFTypeRef cf = CFStringCreateWithCString(0, v3, 0x8000100u);
    *a2 = CFErrorCreateWithUserInfoKeysAndValues(0, @"REECSCoreErrorDomain", 1, (const void *const *)&userInfoKeys, &cf, 1);
    CFRelease(cf);
  }
}

uint64_t REComponentDeserializeFromJSONData(void *a1, uint64_t a2, CFDataRef theData, CFErrorRef *a4)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, theData, "assertion failure: '%s' (%s:line %i) Component must not be null.", "component", "REComponentDeserializeFromJSONData", 175);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, a2, theData, "assertion failure: '%s' (%s:line %i) Deserializer must not be null.", "deserializer", "REComponentDeserializeFromJSONData", 176);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!theData)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) JSON data must not be null.", "jsonData", "REComponentDeserializeFromJSONData", 177);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  BytePtr = (char *)CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>(BytePtr, a2 + 24, a1, Length, (uint64_t)v12);
  int v10 = v12[0];
  if (!v12[0])
  {
    if (!v12[0])
    {
      if (v14)
      {
        if (v15) {
          (*(void (**)(void))(*(void *)v14 + 40))();
        }
      }
    }
  }
  return v10 != 0;
}

uint64_t REEntitySerializeCopyToJSONData(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Entity must not be null.", "entity", "REEntitySerializeCopyToJSONData", 192);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Serializer must not be null.", "serializer", "REEntitySerializeCopyToJSONData", 193);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v14, -1);
  re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(a2 + 24, a1, a3, (uint64_t)v14, (uint64_t)v10);
  if (v10[0])
  {
    v14[8] = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v16);
    CFTypeRef v8 = *v15;
    CFRetain(*v15);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  if (!v10[0] && v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v14);
  return (uint64_t)v8;
}

uint64_t REECSOPACKSerializerCreate(re *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = re::globalAllocators(a1);
    char v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 480, 8);
    ArcSharedObject::ArcSharedObject(v4, 0);
    *(void *)char v4 = &unk_26E735F68;
    *(void *)&v6.var0 = 0x88B8E3BC1E0ECD0ALL;
    v6.var1 = "ECSOPACKSerializer";
    re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SerializerV2((uint64_t)v4 + 24, &v6);
    re::StringID::destroyString((re::StringID *)&v6);
    *((void *)v4 + 3) = &unk_26E6D6370;
    *((void *)v4 + 59) = a1;
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
    return (uint64_t)v4;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ECSService must not be null.", "cECSService", "REECSOPACKSerializerCreate", 211);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REECSOPACKDeserializerCreate(re *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = re::globalAllocators(a1);
    char v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 608, 8);
    ArcSharedObject::ArcSharedObject(v4, 0);
    *(void *)char v4 = &unk_26E735FB0;
    re::ecs2::ECSOPACKDeserializer::ECSOPACKDeserializer((void *)v4 + 3, (uint64_t)a1);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
    return (uint64_t)v4;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ECSService must not be null.", "cECSService", "REECSOPACKDeserializerCreate", 226);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REComponentSerializeCopyToOPACKData(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component must not be null.", "component", "REComponentSerializeCopyToOPACKData", 242);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Serializer must not be null.", "serializer", "REComponentSerializeCopyToOPACKData", 243);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v12, -1);
  re::ecs2::serializeComponent<re::ecs2::ECSOPACKSerializer>(a2 + 24, a1, (uint64_t)v12, (uint64_t)v8);
  if (v8[0])
  {
    unsigned char v12[8] = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v14);
    CFTypeRef v6 = *v13;
    CFRetain(*v13);
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (!v8[0] && v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v12);
  return (uint64_t)v6;
}

uint64_t REComponentDeserializeFromOPACKData(void *a1, uint64_t a2, CFDataRef theData, CFErrorRef *a4)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, theData, "assertion failure: '%s' (%s:line %i) Component must not be null.", "component", "REComponentDeserializeFromOPACKData", 261);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, a2, theData, "assertion failure: '%s' (%s:line %i) Deserializer must not be null.", "deserializer", "REComponentDeserializeFromOPACKData", 262);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!theData)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) OPACK data must not be null.", "opackData", "REComponentDeserializeFromOPACKData", 263);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  BytePtr = (char *)CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>(BytePtr, a2 + 24, a1, Length, (uint64_t)v12);
  int v10 = v12[0];
  if (!v12[0])
  {
    if (!v12[0])
    {
      if (v14)
      {
        if (v15) {
          (*(void (**)(void))(*(void *)v14 + 40))();
        }
      }
    }
  }
  return v10 != 0;
}

uint64_t REEntitySerializeCopyToOPACKData(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Entity must not be null.", "entity", "REEntitySerializeCopyToOPACKData", 278);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Serializer must not be null.", "serializer", "REEntitySerializeCopyToOPACKData", 279);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v14, -1);
  re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(a2 + 24, a1, a3, (uint64_t)v14, (uint64_t)v10);
  if (v10[0])
  {
    v14[8] = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v16);
    CFTypeRef v8 = *v15;
    CFRetain(*v15);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  if (!v10[0] && v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v14);
  return (uint64_t)v8;
}

void *RERegisterSwiftCodableCallbacks(void *result, void *a2)
{
  re::ecs2::g_encodeComponent = result;
  re::ecs2::g_decodeComponent = a2;
  return result;
}

void *re::Shareable<re::ecs2::ECSJSONSerializer>::~Shareable(void *a1)
{
  *a1 = &unk_26E735ED8;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 62));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 57));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 52));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 46);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::ECSJSONSerializer>::~Shareable(void *a1)
{
  *a1 = &unk_26E735ED8;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 62));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 57));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 52));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 46);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Shareable<re::ecs2::ECSJSONDeserializer>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E735F20;
  uint64_t v2 = a1 + 24;
  *(void *)(a1 + 24) = &unk_26E6D43F8;
  *(void *)(a1 + 536) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)(a1 + 544));
  *(void *)(a1 + 24) = &unk_26E6CBD38;
  re::DynamicArray<unsigned long>::deinit(a1 + 496);
  re::DynamicArray<unsigned long>::deinit(a1 + 456);
  re::DynamicArray<unsigned long>::deinit(a1 + 416);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 368));
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(v2);
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  return a1;
}

void re::Shareable<re::ecs2::ECSJSONDeserializer>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E735F20;
  uint64_t v2 = a1 + 24;
  *(void *)(a1 + 24) = &unk_26E6D43F8;
  *(void *)(a1 + 536) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)(a1 + 544));
  *(void *)(a1 + 24) = &unk_26E6CBD38;
  re::DynamicArray<unsigned long>::deinit(a1 + 496);
  re::DynamicArray<unsigned long>::deinit(a1 + 456);
  re::DynamicArray<unsigned long>::deinit(a1 + 416);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 368));
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(v2);
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::Shareable<re::ecs2::ECSOPACKSerializer>::~Shareable(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E735F68;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = (uint64_t)&unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1 + 53);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 48));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 42);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 37));
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(v2);
  *a1 = (uint64_t)&unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::ECSOPACKSerializer>::~Shareable(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E735F68;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = (uint64_t)&unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1 + 53);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 48));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 42);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 37));
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(v2);
  *a1 = (uint64_t)&unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Shareable<re::ecs2::ECSOPACKDeserializer>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E735FB0;
  uint64_t v2 = a1 + 24;
  *(void *)(a1 + 24) = &unk_26E6D63D8;
  *(void *)(a1 + 480) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)(a1 + 488));
  *(void *)(a1 + 24) = &unk_26E6C7278;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 424));
  re::DynamicArray<unsigned long>::deinit(a1 + 384);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 336));
  re::DynamicArray<unsigned long>::deinit(a1 + 296);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(v2);
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  return a1;
}

void re::Shareable<re::ecs2::ECSOPACKDeserializer>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E735FB0;
  uint64_t v2 = a1 + 24;
  *(void *)(a1 + 24) = &unk_26E6D63D8;
  *(void *)(a1 + 480) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)(a1 + 488));
  *(void *)(a1 + 24) = &unk_26E6C7278;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 424));
  re::DynamicArray<unsigned long>::deinit(a1 + 384);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 336));
  re::DynamicArray<unsigned long>::deinit(a1 + 296);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(v2);
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t REAnimationLibraryDefinitionCreateAnimationLibraryAsset(void *a1, uint64_t a2)
{
  if (a1[4])
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)(a1 + 3));
  }
  else
  {
    char v4 = re::globalAllocators((re *)a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 224, 8);
    uint64_t v6 = a1[6];
    uint64_t v7 = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::DynamicArray(v5, (uint64_t *)v6);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::DynamicArray(v7 + 40, (uint64_t *)(v6 + 40));
    re::DynamicArray<re::NamedAnimationLibraryEntry>::DynamicArray(v5 + 80, (uint64_t *)(v6 + 80));
    re::DynamicArray<re::AssetHandle>::DynamicArray(v5 + 120, (uint64_t *)(v6 + 120));
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(v5 + 160, v6 + 160);
    CFTypeRef v8 = re::StringID::StringID((re::StringID *)(v5 + 208), (const StringID *)(v6 + 208));
    uint64_t v9 = re::AnimationLibraryAsset::assetType(v8);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a2 + 416))(v13, a2, v5, v9, 0, 0, 0);
  }
  if (v13[1])
  {
    uint64_t v10 = v13[0];
    if (v13[0]) {
      id v11 = (id)(v13[0] + 8);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

uint64_t REAnimationLibraryDefinitionCreate(re *a1)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 88, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E736078;
  *(void *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  char v4 = re::globalAllocators(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 224, 8);
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_DWORD *)(v5 + 196) = 0x7FFFFFFF;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 216) = "";
  v7[0] = &unk_26E7360C0;
  uint64_t v7[3] = v7;
  uint64_t v8 = v5;
  v9[3] = v9;
  v9[0] = &unk_26E7360C0;
  std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::operator=[abi:nn180100]((uint64_t *)(v2 + 48), &v8);
  std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::~unique_ptr[abi:nn180100](&v8);
  std::__function::__value_func<void ()(re::AnimationLibraryAsset *)>::~__value_func[abi:nn180100](v7);
  return v2;
}

uint64_t REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v3);
  re::make::shared::object<AnimationLibraryDefinition,re::AssetService *&,re::AssetHandle>((re *)&v5, &v3, &v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v3);
  return v4;
}

uint64_t REAnimationLibraryDefinitionGetEntryCount(AnimationLibraryDefinition *a1)
{
  uint64_t result = AnimationLibraryDefinition::assetData(a1);
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

uint64_t AnimationLibraryDefinition::assetData(AnimationLibraryDefinition *this)
{
  if (*((void *)this + 6)) {
    return *((void *)this + 6);
  }
  uint64_t v2 = (AnimationLibraryDefinition *)((char *)this + 24);
  uint64_t v3 = *((void *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  unsigned int v4 = atomic_load((unsigned int *)(v3 + 704));
  if (v4 != 2)
  {
    uint64_t v5 = *((void *)this + 4);
LABEL_7:
    re::AssetHandle::loadNow(v5, 0);
  }
  return re::AssetHandle::asset<re::AnimationLibraryAsset>(v2);
}

{
  uint64_t result;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  re *v8;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void v13[4];
  uint64_t v14;
  void v15[5];

  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)((char *)this + 48);
  uint64_t result = *((void *)this + 6);
  if (result) {
    return result;
  }
  unsigned int v4 = (char *)this + 24;
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = atomic_load((unsigned int *)(v5 + 704));
  if (v6 != 2)
  {
    uint64_t v7 = *((void *)this + 4);
LABEL_6:
    re::AssetHandle::loadNow(v7, 0);
  }
  uint64_t v8 = (re *)re::AssetHandle::asset<re::AnimationLibraryAsset>((AnimationLibraryDefinition *)((char *)this + 24));
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = re::globalAllocators(v8);
    id v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 224, 8);
    uint64_t v12 = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::DynamicArray(v11, (uint64_t *)v9);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::DynamicArray(v12 + 40, (uint64_t *)v9 + 5);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::DynamicArray(v11 + 80, (uint64_t *)v9 + 10);
    re::DynamicArray<re::AssetHandle>::DynamicArray(v11 + 120, (uint64_t *)v9 + 15);
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(v11 + 160, (uint64_t)v9 + 160);
    re::StringID::StringID((re::StringID *)(v11 + 208), (const StringID *)v9 + 13);
    v13[0] = &unk_26E735FF8;
    void v13[3] = v13;
    uint64_t v14 = v11;
    uint64_t v15[3] = v15;
    v15[0] = &unk_26E735FF8;
    std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::operator=[abi:nn180100](v3, &v14);
    std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::~unique_ptr[abi:nn180100](&v14);
    std::__function::__value_func<void ()(re::AnimationLibraryAsset *)>::~__value_func[abi:nn180100](v13);
  }
  if (*(void *)v4)
  {

    *(void *)unsigned int v4 = 0;
  }
  *((void *)this + 4) = 0;
  return *((void *)this + 6);
}

uint64_t REAnimationLibraryDefinitionGetEntryAsset(AnimationLibraryDefinition *a1, unint64_t a2)
{
  uint64_t v3 = AnimationLibraryDefinition::assetData(a1);
  if (*(void *)(v3 + 136) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v3 + 152) + 24 * a2);
  }
}

void REAnimationLibraryDefinitionClearEntries(AnimationLibraryDefinition *a1)
{
  uint64_t v1 = (void *)AnimationLibraryDefinition::assetData(a1);
  re::DynamicArray<re::AssetHandle>::clear((re::AssetHandle *)(v1 + 15));
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)(v1 + 20));
  v3[0] = 0;
  v3[1] = "";
  uint64_t v2 = v1[27];
  v4[0] = v1[26] & 1;
  v4[1] = v2;
  v1[26] = 0;
  v1[27] = "";
  re::StringID::destroyString((re::StringID *)v4);
  re::StringID::destroyString((re::StringID *)v3);
}

uint64_t REAnimationLibraryDefinitionSetEntryAsset(AnimationLibraryDefinition *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, &v15);
  uint64_t v6 = re::TimelineAsset::assetType(v5);
  if (!v16 || v6 != *(uint64_t **)(v16 + 264))
  {
    uint64_t v7 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    uint64_t v8 = (uint64_t *)v16;
    if (v16) {
      uint64_t v8 = *(uint64_t **)(v16 + 264);
    }
    if (v7 != v8)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set animation library entry with invalid animation asset.", buf, 2u);
      }

LABEL_18:
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  if (*(void *)(AnimationLibraryDefinition::assetData(a1) + 136) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v18 = a2;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Cannot set animation library entry for invalid entry index: %zu", buf, 0xCu);
    }

    goto LABEL_18;
  }
  uint64_t v10 = AnimationLibraryDefinition::assetData(a1);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)&v15);
  re::AnimationLibraryAsset::setEntry(v10, a2, v14);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  uint64_t v11 = 1;
LABEL_19:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  return v11;
}

uint64_t REAnimationLibraryDefinitionAddEntryAsset(AnimationLibraryDefinition *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v12);
  unsigned int v4 = re::TimelineAsset::assetType(v3);
  if (v13 && v4 == *(uint64_t **)(v13 + 264)) {
    goto LABEL_11;
  }
  uint64_t v5 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v6 = (uint64_t *)v13;
  if (v13) {
    uint64_t v6 = *(uint64_t **)(v13 + 264);
  }
  if (v5 == v6)
  {
LABEL_11:
    uint64_t v9 = AnimationLibraryDefinition::assetData(a1);
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v9 + 120), (re::AssetHandle *)&v12);
    uint64_t v8 = *(void *)(v9 + 136) - 1;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Cannot add animation library entry with invalid animation asset.", v11, 2u);
    }

    uint64_t v8 = -1;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
  return v8;
}

uint64_t REAnimationLibraryDefinitionGetEntryAssetByKey(AnimationLibraryDefinition *a1, char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = AnimationLibraryDefinition::assetData(a1);
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v15[0] = 2 * v5;
  v15[1] = a2;
  uint64_t v9 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 160, v15);
  if (!v9)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      long long v17 = a2;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Animation not found by key %s in library.", buf, 0xCu);
    }

    uint64_t v12 = 0;
    goto LABEL_16;
  }
  unint64_t v11 = *(void *)(v4 + 136);
  if (*v9 < v11)
  {
    uint64_t v12 = *(void *)(*(void *)(v4 + 152) + 24 * *v9);
LABEL_16:
    re::StringID::destroyString((re::StringID *)v15);
    return v12;
  }
  re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index in key table is out of range. Index: %zu, count: %zu", "false", "REAnimationLibraryDefinitionGetEntryAssetByKey", 321, *v9, v11);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL REAnimationLibraryDefinitionAddKeyedEntryIndex(AnimationLibraryDefinition *a1, const char *a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v15 = a3;
  uint64_t v5 = (_anonymous_namespace_ *)AnimationLibraryDefinition::assetData(a1);
  char v6 = v5;
  if (*((void *)v5 + 17) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *((void *)v6 + 17);
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Index is out of range for the library entry count. Index: %zu, Count: %zu", buf, 0x16u);
    }

    return 0;
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)&uint8_t buf[8] = "";
    uint64_t v7 = (uint64_t)v6 + 160;
    uint64_t v8 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v6 + 160, buf);
    BOOL v9 = v8 == 0;
    if (v8)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Name already exists. Names in library must be unique.", v14, 2u);
      }
    }
    else
    {
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, (StringID *)buf, &v15);
    }
    re::StringID::destroyString((re::StringID *)buf);
  }
  return v9;
}

uint64_t REAnimationLibraryDefinitionSetDefaultEntryKey(AnimationLibraryDefinition *a1, const char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (_anonymous_namespace_ *)AnimationLibraryDefinition::assetData(a1);
  uint64_t v4 = v3;
  if (a2 && *a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = "";
    uint64_t v5 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 160, &v10);
    BOOL v6 = v5 != 0;
    if (v5)
    {
      re::StringID::operator=((unint64_t *)v4 + 26, &v10);
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v8 = (id)CoreRELog::log;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = a2;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Animation not found in library. Can't set default animation using key %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    re::StringID::destroyString((re::StringID *)&v10);
  }
  else
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = "";
    uint64_t v7 = (const char *)*((void *)v3 + 27);
    uint64_t v10 = *((void *)v3 + 26) & 1;
    unint64_t v11 = v7;
    *((void *)v3 + 26) = 0;
    *((void *)v3 + 27) = "";
    re::StringID::destroyString((re::StringID *)&v10);
    re::StringID::destroyString((re::StringID *)&buf);
    return 1;
  }
  return v6;
}

unsigned char *REAnimationLibraryDefinitionGetDefaultEntryKey(AnimationLibraryDefinition *a1)
{
  uint64_t v1 = AnimationLibraryDefinition::assetData(a1);
  unint64_t v3 = *(void *)(v1 + 208);
  uint64_t result = *(unsigned char **)(v1 + 216);
  if (v3 <= 1 && result && !*result) {
    return 0;
  }
  return result;
}

uint64_t REAnimationLibraryDefinitionGetDefaultEntry(AnimationLibraryDefinition *a1)
{
  uint64_t v2 = AnimationLibraryDefinition::assetData(a1);
  unint64_t v3 = *(char **)(v2 + 216);
  if (*(void *)(v2 + 208) <= 1uLL && v3 && !*v3
    || (uint64_t result = REAnimationLibraryDefinitionGetEntryAssetByKey(a1, v3)) == 0)
  {
    uint64_t v5 = AnimationLibraryDefinition::assetData(a1);
    if (*(void *)(v5 + 136)) {
      return **(void **)(v5 + 152);
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t REAnimationLibraryDefinitionInsertEntryAsset(AnimationLibraryDefinition *a1, unint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, &v15);
  BOOL v6 = re::TimelineAsset::assetType(v5);
  if (v16 && v6 == *(uint64_t **)(v16 + 264)) {
    goto LABEL_11;
  }
  uint64_t v7 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v8 = (uint64_t *)v16;
  if (v16) {
    uint64_t v8 = *(uint64_t **)(v16 + 264);
  }
  if (v7 == v8)
  {
LABEL_11:
    uint64_t v10 = AnimationLibraryDefinition::assetData(a1);
    uint64_t v11 = v10;
    if (*(void *)(v10 + 136) <= a2)
    {
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v10 + 120), (re::AssetHandle *)&v15);
      a2 = *(void *)(v11 + 136) - 1;
    }
    else
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)&v15);
      re::AnimationLibraryAsset::insertEntry(v11, (re::AssetHandle *)v13, a2);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot insert animation library entry with invalid animation asset.", buf, 2u);
    }

    a2 = -1;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  return a2;
}

BOOL REAnimationLibraryDefinitionRemoveEntry(AnimationLibraryDefinition *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(AnimationLibraryDefinition::assetData(a1) + 136);
  if (v4 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 134217984;
      unint64_t v9 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot remove animation library entry for invalid entry index: %zu", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    uint64_t v5 = (re::AnimationLibraryAsset *)AnimationLibraryDefinition::assetData(a1);
    re::AnimationLibraryAsset::removeEntry(v5, a2);
  }
  return v4 > a2;
}

uint64_t re::DynamicArray<re::SkeletalAnimationLibraryEntry>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a1, a2[2]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *>(a2[4], a2[4] + 120 * *(void *)(a1 + 16), *(void *)(a1 + 32));
      uint64_t v11 = *(void *)(a1 + 16);
      if (v11 != v6)
      {
        uint64_t v12 = a2[4];
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = 120 * v11;
        uint64_t v15 = 120 * v6;
        do
        {
          *(unsigned char *)(v13 + v14) = *(unsigned char *)(v12 + v14);
          re::StringID::StringID((re::StringID *)(v13 + v14 + 8), (const StringID *)(v12 + v14 + 8));
          re::StringID::StringID((re::StringID *)(v13 + v14 + 24), (const StringID *)(v12 + v14 + 24));
          re::StringID::StringID((re::StringID *)(v13 + v14 + 40), (const StringID *)(v12 + v14 + 40));
          re::StringID::StringID((re::StringID *)(v13 + v14 + 56), (const StringID *)(v12 + v14 + 56));
          re::AssetHandle::AssetHandle((re::AssetHandle *)(v13 + v14 + 72), (const re::AssetHandle *)(v12 + v14 + 72));
          re::AssetHandle::AssetHandle((re::AssetHandle *)(v13 + v14 + 96), (const re::AssetHandle *)(v12 + v14 + 96));
          v15 -= 120;
          v12 += 120;
          v13 += 120;
        }
        while (v14 != v15);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *>(a2[4], a2[4] + 120 * v6, *(void *)(a1 + 32));
      uint64_t v7 = *(void *)(a1 + 16);
      if (v6 != v7)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = 120 * v6;
        uint64_t v10 = 120 * v7;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v9 + 96));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v9 + 72));
          re::StringID::destroyString((re::StringID *)(v8 + v9 + 56));
          re::StringID::destroyString((re::StringID *)(v8 + v9 + 40));
          re::StringID::destroyString((re::StringID *)(v8 + v9 + 24));
          re::StringID::destroyString((re::StringID *)(v8 + v9 + 8));
          v10 -= 120;
          v8 += 120;
        }
        while (v9 != v10);
      }
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *,re::SkeletalAnimationLibraryEntry *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      *(unsigned char *)(a3 + v6) = *(unsigned char *)(v5 + v6);
      re::StringID::operator=((unint64_t *)(a3 + v6 + 8), (uint64_t *)(v5 + v6 + 8));
      re::StringID::operator=((unint64_t *)(a3 + v6 + 24), (uint64_t *)(v5 + v6 + 24));
      re::StringID::operator=((unint64_t *)(a3 + v6 + 40), (uint64_t *)(v5 + v6 + 40));
      re::StringID::operator=((unint64_t *)(a3 + v6 + 56), (uint64_t *)(v5 + v6 + 56));
      re::AssetHandle::operator=(a3 + v6 + 72, (uint64_t *)(v5 + v6 + 72));
      uint64_t result = re::AssetHandle::operator=(a3 + v6 + 96, (uint64_t *)(v5 + v6 + 96));
      v6 += 120;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::NamedAnimationLibraryEntry>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::AnimationLibraryAsset *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  uint64_t v6 = a1 + 1;
  uint64_t v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v6 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      a1[4] = (uint64_t)v6;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
    }
    else
    {
      a1[4] = (uint64_t)v8;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

void std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::~__func()
{
}

void *std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E735FF8;
  return result;
}

void std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E735FF8;
}

re *std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::AnimationLibraryAsset>((re *)"operator()", 183, *a2);
}

uint64_t std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::assetData(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::target_type()
{
}

void AnimationLibraryDefinition::~AnimationLibraryDefinition(AnimationLibraryDefinition *this)
{
  AnimationLibraryDefinition::~AnimationLibraryDefinition(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::AssetHandle *v2;

  *(void *)this = &unk_26E736078;
  uint64_t v2 = (AnimationLibraryDefinition *)((char *)this + 24);
  std::unique_ptr<re::AnimationLibraryAsset,std::function<void ()(re::AnimationLibraryAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 6);
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::~__func()
{
}

void *std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7360C0;
  return result;
}

void std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7360C0;
}

re *std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::AnimationLibraryAsset>((re *)"operator()", 115, *a2);
}

uint64_t std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1},std::allocator<AnimationLibraryDefinition::AnimationLibraryDefinition(void)::{lambda(re::AnimationLibraryAsset *)#1}>,void ()(re::AnimationLibraryAsset *)>::target_type()
{
}

void re::make::shared::object<AnimationLibraryDefinition,re::AssetService *&,re::AssetHandle>(re *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 88, 8);
  uint64_t v8 = *(void *)a1;
  long long v9 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v10 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  *a3 = AnimationLibraryDefinition::AnimationLibraryDefinition(v7, v8, (const re::AssetHandle *)&v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

void *AnimationLibraryDefinition::AnimationLibraryDefinition(void *a1, uint64_t a2, const re::AssetHandle *a3)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *a1 = &unk_26E736078;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 3), a3);
  a1[6] = 0;
  a1[10] = 0;
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  unsigned int v7 = atomic_load((unsigned int *)(v6 + 704));
  if (v7 != 2)
  {
    uint64_t v8 = a1[4];
LABEL_5:
    re::AssetHandle::loadNow(v8, 0);
  }
  long long v9 = (void *)re::AssetHandle::asset<re::AnimationLibraryAsset>(a3);
  if (v9 && !v9[17] && (v9[2] || v9[7] || v9[12]))
  {
    uint64_t v10 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)a1);
    uint64_t v11 = (void *)v10;
    uint64_t v12 = *(void *)(v10 + 96);
    if (v12)
    {
      uint64_t v13 = *(uint64_t **)(v10 + 112);
      uint64_t v14 = 40 * v12;
      do
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)v27, (const re::AssetHandle *)(v13 + 2));
        re::DynamicArray<re::AssetHandle>::add(v11 + 15, v28);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
        v13 += 5;
        v14 -= 40;
      }
      while (v14);
    }
    uint64_t v15 = v11[2];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(v11[4] + 56);
      uint64_t v17 = 120 * v15;
      while (!v16[6])
      {
        if (v16[3])
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v25, (const re::AssetHandle *)(v16 + 2));
          re::DynamicArray<re::AssetHandle>::add(v11 + 15, v28);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
          uint64_t v18 = v25;
          goto LABEL_20;
        }
LABEL_21:
        v16 += 15;
        v17 -= 120;
        if (!v17) {
          goto LABEL_22;
        }
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v26, (const re::AssetHandle *)(v16 + 5));
      re::DynamicArray<re::AssetHandle>::add(v11 + 15, v28);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
      uint64_t v18 = v26;
LABEL_20:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v19 = v11[7];
    if (v19)
    {
      uint64_t v20 = (uint64_t *)v11[9];
      uint64_t v21 = v11 + 15;
      uint64_t v22 = 40 * v19;
      do
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)v24, (const re::AssetHandle *)(v20 + 2));
        re::DynamicArray<re::AssetHandle>::add(v21, v28);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
        v20 += 5;
        v22 -= 40;
      }
      while (v22);
    }
  }
  return a1;
}

void anonymous namespace'::ensureAnimationAssetName(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if ((unint64_t)*a3 <= 1)
  {
    uint64_t v8 = (unsigned char *)a3[1];
    if (v8)
    {
      if (!*v8) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v9 = a4[1];
  if (!v9)
  {
    *a1 = *a4;
    a1[1] = 0;
    goto LABEL_14;
  }
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
  if (v10 != 2) {
    re::AssetHandle::loadNow(a4[1], 0);
  }
  uint64_t v11 = re::TimelineAsset::assetType((re::TimelineAsset *)a1);
  uint64_t v12 = a4[1];
  if (!v12 || v11 != *(uint64_t **)(v12 + 264))
  {
    uint64_t v13 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    uint64_t v14 = (uint64_t *)a4[1];
    if (v14) {
      uint64_t v14 = (uint64_t *)v14[33];
    }
    if (v13 == v14)
    {
      uint64_t v15 = (const re::AssetHandle *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)a4);
      if (v15)
      {
        uint64_t v16 = v15;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v31, v15);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
        if (v32[1] != *((void *)v16 + 1))
        {
          uint64_t v18 = re::globalAllocators(v17);
          uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 112, 8);
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(void *)(v19 + 88) = 0;
          *(void *)(v19 + 80) = 0;
          *(void *)(v19 + 32) = "";
          *(void *)(v19 + 48) = 0;
          *(void *)(v19 + 56) = 0;
          *(_DWORD *)(v19 + 64) = 0;
          *(void *)(v19 + 40) = 0;
          *(void *)(v19 + 96) = 0;
          *(void *)(v19 + 104) = 0;
          re::AssetHandle::operator=(v19, (uint64_t *)v16);
          re::StringID::operator=((unint64_t *)(v19 + 24), (uint64_t *)v16 + 3);
          re::DynamicArray<re::AnimationSceneEntityData>::operator=(v19 + 40, (uint64_t *)v16 + 5);
          *(unsigned char *)(v19 + 80) = *((unsigned char *)v16 + 80);
          re::AssetHandle::operator=(v19 + 88, (uint64_t *)v16 + 11);
          re::AssetHandle::operator=(v19, v32);
          uint64_t v20 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
          (*(void (**)(uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a2 + 416))(a2, v19, v20, 0, 0, 0);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
          return;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
      }
    }
    goto LABEL_12;
  }
  uint64_t v21 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)a4);
  if (!v21 || (uint64_t v22 = *(void **)(v21 + 8), v23 = re::StringID::operator==(v22 + 3, a3)))
  {
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a4;
LABEL_14:
    *a4 = 0;
    a4[1] = 0;
    a1[2] = a4[2];
    a4[2] = 0;
    return;
  }
  re::StringID::operator=(v24 + 3, a3);
  TimelineAsset = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v24, v25);
  if (!TimelineAsset)
  {
    if (v24)
    {
      uint64_t v30 = re::globalAllocators(0)[2];
      (*(void (**)(unint64_t *))*v24)(v24);
      (*(void (**)(uint64_t, unint64_t *))(*(void *)v30 + 40))(v30, v24);
    }
    goto LABEL_12;
  }
  int v27 = TimelineAsset;
  uint64_t v28 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
  uint64_t v29 = *(void (**)(uint64_t, re **, uint64_t *, void, void, void))(*(void *)a2 + 416);
  v29(a2, v27, v28, 0, 0, 0);
}

void RERenderGraphNodeReadTarget(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a4 & 0x1FFFFFFFFLL;
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v6);
  v8.n128_u64[0] = v7[0] >> 1;
  v8.n128_u64[1] = v7[2];
  uint64_t v9 = v5;
  uint64_t v10 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(a1 + 176), &v8);
  re::StringID::destroyString((re::StringID *)v7);
}

void RERenderGraphNodeWriteTarget(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a4;
  long long v8 = *((_OWORD *)a4 + 1);
  __int16 v5 = *((_WORD *)a4 + 16);
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v9);
  *(void *)&long long v6 = v10[2];
  *((void *)&v6 + 1) = v7;
  uint64_t v11 = v10[0] >> 1;
  long long v12 = v6;
  long long v13 = v8;
  __int16 v14 = v5;
  int v15 = 0;
  int v16 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 216), (uint64_t)&v11);
  re::StringID::destroyString((re::StringID *)v10);
}

void RERenderGraphNodeReadBuffer(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a4 & 0x1FFFFFFFFLL;
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v6);
  v8.n128_u64[0] = v7[0] >> 1;
  v8.n128_u64[1] = v7[2];
  uint64_t v9 = v5;
  uint64_t v10 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(a1 + 96), &v8);
  re::StringID::destroyString((re::StringID *)v7);
}

void RERenderGraphNodeWriteBuffer(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a4;
  long long v8 = *((_OWORD *)a4 + 1);
  __int16 v5 = *((_WORD *)a4 + 16);
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v9);
  *(void *)&long long v6 = v10[2];
  *((void *)&v6 + 1) = v7;
  uint64_t v11 = v10[0] >> 1;
  long long v12 = v6;
  long long v13 = v8;
  __int16 v14 = v5;
  int v15 = 0;
  int v16 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 136), (uint64_t)&v11);
  re::StringID::destroyString((re::StringID *)v10);
}

uint64_t RERenderGraphNodeConfigure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a3, a4, a2);
}

uint64_t RERenderGraphCameraSetupNodeSetFrustumCulling(uint64_t result, char a2)
{
  *(unsigned char *)(result + 256) = a2;
  return result;
}

uint64_t RERenderGraphCameraSetupNodeGetFrustumCulling(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

void RERenderGraphComputeNodeSetLibrary(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a1 + 256) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 272);
  *(void *)(a1 + ++*(void *)(result + 272) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t RERenderGraphComputeNodeGetLibrary(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t RERenderGraphComputeNodeSetComputeFunction(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 280), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphComputeNodeGetComputeFunction(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 288)) {
    return *(void *)(a1 + 296);
  }
  else {
    return a1 + 289;
  }
}

void RERenderGraphComputeNodeSetOutputDimensionsTarget(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v4);
  v6[0] = 1;
  uint64_t v7 = v5[0] >> 1;
  uint64_t v8 = v5[2];
  re::Optional<re::RenderGraphTargetHandle>::operator=(a1 + 312, v6);
  re::StringID::destroyString((re::StringID *)v5);
}

uint64_t RERenderGraphComputeNodeGetOutputDimensionsTarget(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312)) {
    return *(unsigned int *)(a1 + 328);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void RERenderGraphComputeNodeSetOutputDimensionsBuffer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a2 + 3448), a3, &v4);
  v6[0] = 1;
  uint64_t v7 = v5[0] >> 1;
  uint64_t v8 = v5[2];
  re::Optional<re::RenderGraphTargetHandle>::operator=(a1 + 336, v6);
  re::StringID::destroyString((re::StringID *)v5);
}

uint64_t RERenderGraphComputeNodeGetOutputDimensionsBuffer(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336)) {
    return *(unsigned int *)(a1 + 352);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t RERenderGraphComputeNodeSetOutputElementCount(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 360)) {
    *(unsigned char *)(result + 360) = 1;
  }
  *(_DWORD *)(result + 364) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetOutputElementCount(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 360)) {
    return *(unsigned int *)(a1 + 364);
  }
  else {
    return 0;
  }
}

__n128 *RERenderGraphComputeNodeSetOutputDimensionsTargetMultiplier(__n128 *result, __n128 a2)
{
  if (!result[23].n128_u8[0]) {
    result[23].n128_u8[0] = 1;
  }
  result[24] = a2;
  return result;
}

__n128 RERenderGraphComputeNodeGetOutputDimensionsTargetMultiplier(uint64_t a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  char v6 = &v8;
  if (*(unsigned char *)(a1 + 368)) {
    char v6 = (long long *)(a1 + 384);
  }
  return (__n128)*v6;
}

uint64_t RERenderGraphComputeNodeSetOutputDimensionsBufferMultiplier(uint64_t result, float a2)
{
  if (!*(unsigned char *)(result + 400)) {
    *(unsigned char *)(result + 400) = 1;
  }
  *(float *)(result + 404) = a2;
  return result;
}

float RERenderGraphComputeNodeGetOutputDimensionsBufferMultiplier(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 400)) {
    return *(float *)(a1 + 404);
  }
  else {
    return 1.0;
  }
}

uint64_t RERenderGraphComputeNodeSetGridSizeWidth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 408) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetGridSizeWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 408);
}

uint64_t RERenderGraphComputeNodeSetGridSizeHeight(uint64_t result, int a2)
{
  *(_DWORD *)(result + 412) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetGridSizeHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 412);
}

uint64_t RERenderGraphComputeNodeSetGridSizeDepth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 416) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetGridSizeDepth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 416);
}

uint64_t RERenderGraphComputeNodeSetThreadGroupSizeWidth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 420) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetThreadGroupSizeWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 420);
}

uint64_t RERenderGraphComputeNodeSetThreadGroupSizeHeight(uint64_t result, int a2)
{
  *(_DWORD *)(result + 424) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetThreadGroupSizeHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 424);
}

uint64_t RERenderGraphComputeNodeSetThreadGroupSizeDepth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 428) = a2;
  return result;
}

uint64_t RERenderGraphComputeNodeGetThreadGroupSizeDepth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 428);
}

void *RERenderGraphComputeNodeSetThreadGroupMemoryLength(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4 = __PAIR64__(a2, a3);
  return re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add((void *)(a1 + 432), &v4);
}

uint64_t RERenderGraphComputeNodeGetThreadGroupMemoryLength(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  uint64_t v3 = 8 * *(void *)(a1 + 448);
  while (v3)
  {
    int v4 = *(_DWORD *)(v2 + v3 - 8);
    v3 -= 8;
    if (v4 == a2) {
      return *(unsigned int *)(v2 + v3 + 4);
    }
  }
  return 0;
}

void RERenderGraphMaterialReplaceNodeSetMaterial(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a1 + ++*(void *)(result + 272) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t RERenderGraphMaterialReplaceNodeGetMaterial(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

uint64_t RERenderGraphMaterialReplaceNodeSetTechniqueToReplace(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 296), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphMaterialReplaceNodeGetTechniqueToReplace(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 304)) {
    return *(void *)(a1 + 312);
  }
  else {
    return a1 + 305;
  }
}

uint64_t RERenderGraphMaterialReplaceNodeSetTechniqueToUse(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 328), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphMaterialReplaceNodeGetTechniqueToUse(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336)) {
    return *(void *)(a1 + 344);
  }
  else {
    return a1 + 337;
  }
}

uint64_t RERenderGraphMeshNodeSetMaterialPassName(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 264), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphMeshNodeGetMaterialPassName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272)) {
    return *(void *)(a1 + 280);
  }
  else {
    return a1 + 273;
  }
}

uint64_t RERenderGraphMeshNodeSetCullMode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 336) = a2;
  return result;
}

uint64_t RERenderGraphMeshNodeGetCullMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

uint64_t RERenderGraphSynchronizeTargetNodeSetSlice(uint64_t result, uint64_t a2)
{
  *(void *)(result + 256) = a2;
  return result;
}

uint64_t RERenderGraphSynchronizeTargetNodeGetSlice(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t RERenderGraphSynchronizeTargetNodeSetLevel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 264) = a2;
  return result;
}

uint64_t RERenderGraphSynchronizeTargetNodeGetLevel(uint64_t a1)
{
  return *(void *)(a1 + 264);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceSlice(uint64_t result, uint64_t a2)
{
  *(void *)(result + 256) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceSlice(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceLevel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 264) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceLevel(uint64_t a1)
{
  return *(void *)(a1 + 264);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceX(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 272) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceX(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceY(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceY(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceZ(uint64_t result, uint64_t a2)
{
  *(void *)(result + 288) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceZ(uint64_t a1)
{
  return *(void *)(a1 + 288);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceWidth(uint64_t result, uint64_t a2)
{
  *(void *)(result + 296) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceWidth(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceHeight(uint64_t result, uint64_t a2)
{
  *(void *)(result + 304) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceHeight(uint64_t a1)
{
  return *(void *)(a1 + 304);
}

uint64_t RERenderGraphTargetCopyNodeSetSourceDepth(uint64_t result, uint64_t a2)
{
  *(void *)(result + 312) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetSourceDepth(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t RERenderGraphTargetCopyNodeSetDestSlice(uint64_t result, uint64_t a2)
{
  *(void *)(result + 320) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetDestSlice(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t RERenderGraphTargetCopyNodeSetDestLevel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 328) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetDestLevel(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

uint64_t RERenderGraphTargetCopyNodeSetDestX(uint64_t result, uint64_t a2)
{
  *(void *)(result + 336) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetDestX(uint64_t a1)
{
  return *(void *)(a1 + 336);
}

uint64_t RERenderGraphTargetCopyNodeSetDestY(uint64_t result, uint64_t a2)
{
  *(void *)(result + 344) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetDestY(uint64_t a1)
{
  return *(void *)(a1 + 344);
}

uint64_t RERenderGraphTargetCopyNodeSetDestZ(uint64_t result, uint64_t a2)
{
  *(void *)(result + 352) = a2;
  return result;
}

uint64_t RERenderGraphTargetCopyNodeGetDestZ(uint64_t a1)
{
  return *(void *)(a1 + 352);
}

uint64_t RERenderGraphCopyEntityAttributeBufferNodeSetSourceEntityId(uint64_t result, uint64_t a2)
{
  *(void *)(result + 256) = a2;
  return result;
}

void RERenderGraphCopyEntityAttributeBufferNodeSetAttributeName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = "";
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = "";
  uint64_t v6 = *((void *)a1 + 33);
  uint64_t v7 = *((void *)a1 + 34);
  *((void *)a1 + 33) = v4;
  *((void *)a1 + 34) = v5;
  v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v10[1] = v7;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

void RERenderGraphFullscreenNodeSetMaterial(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 264) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t RERenderGraphFullscreenNodeGetMaterial(uint64_t a1)
{
  return *(void *)(a1 + 264);
}

re::DynamicString *RERenderGraphFullscreenNodeSetTechniqueName(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 288);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t RERenderGraphFullscreenNodeGetTechniqueName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 296)) {
    return *(void *)(a1 + 304);
  }
  else {
    return a1 + 297;
  }
}

uint64_t RERenderGraphGpuSyncNodeGetEvent()
{
  return 0;
}

uint64_t RERenderGraphGpuSyncNodeGetEventValue()
{
  return 0;
}

uint64_t RERenderGraphGpuSyncNodeGetEventType()
{
  return 0;
}

void REProfilerServiceSetProcessorEnabled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v6 = ProfilerService;
  switch(v4)
  {
    case 0:
      re::ProfilerManager::setProcessorEnabled<re::FrameProfiler,void>((uint64_t)ProfilerService, a3);
      break;
    case 1:
      re::ProfilerManager::setProcessorEnabled<re::ProfilerLogProcessor,void>((uint64_t)ProfilerService, a3);
      break;
    case 2:
      re::ProfilerManager::setProcessorEnabled<re::ProfilerCsvProcessor,void>((uint64_t)ProfilerService, a3);
      break;
    case 3:
      re::ProfilerManager::setProcessorEnabled<re::ProfilerFlameChartProcessor,void>((uint64_t)ProfilerService, a3);
      break;
    case 4:
      re::ProfilerManager::setProcessorEnabled<re::ProfilerMiniHUDProcessor,void>((uint64_t)ProfilerService, a3);
      break;
    case 5:
      re::ProfilerManager::setProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>((uint64_t)ProfilerService, a3);
      break;
    case 6:
      uint64_t v7 = ProfilerService + 4;
      os_unfair_lock_lock(ProfilerService + 4);
      v6[133]._os_unfair_lock_opaque = 0;
      uint64_t isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::ProfilerLiteHUDProcessor>();
      uint64_t v9 = *(void **)&v6[124]._os_unfair_lock_opaque;
      if (v9)
      {
        uint64_t v10 = isStatisticCollectionEnabled;
        do
        {
          uint64_t v11 = (unsigned char *)v9[3];
          if (v9[2] == v10)
          {
            uint8_t v11[8] = a3;
            uint64_t isStatisticCollectionEnabled = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v11 + 64))(v11, a3);
          }
          if (v11[8])
          {
            if (LOBYTE(v6[133]._os_unfair_lock_opaque)) {
              char v12 = 1;
            }
            else {
              char v12 = (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
            }
            LOBYTE(v6[133]._os_unfair_lock_opaque) = v12;
            if (BYTE1(v6[133]._os_unfair_lock_opaque)) {
              char v13 = 1;
            }
            else {
              char v13 = (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 32))(v11);
            }
            BYTE1(v6[133]._os_unfair_lock_opaque) = v13;
            if (BYTE2(v6[133]._os_unfair_lock_opaque)) {
              char v14 = 1;
            }
            else {
              char v14 = (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 40))(v11);
            }
            BYTE2(v6[133]._os_unfair_lock_opaque) = v14;
            if (HIBYTE(v6[133]._os_unfair_lock_opaque)) {
              uint64_t isStatisticCollectionEnabled = 1;
            }
            else {
              uint64_t isStatisticCollectionEnabled = (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 48))(v11);
            }
            HIBYTE(v6[133]._os_unfair_lock_opaque) = isStatisticCollectionEnabled;
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      goto LABEL_59;
    case 7:
      uint64_t v7 = ProfilerService + 4;
      os_unfair_lock_lock(ProfilerService + 4);
      v6[133]._os_unfair_lock_opaque = 0;
      uint64_t isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::ProfilerAggregationSignpostProcessor>();
      int v15 = *(void **)&v6[124]._os_unfair_lock_opaque;
      if (v15)
      {
        uint64_t v16 = isStatisticCollectionEnabled;
        do
        {
          uint64_t v17 = (unsigned char *)v15[3];
          if (v15[2] == v16)
          {
            char v17[8] = a3;
            uint64_t isStatisticCollectionEnabled = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v17 + 64))(v17, a3);
          }
          if (v17[8])
          {
            if (LOBYTE(v6[133]._os_unfair_lock_opaque)) {
              char v18 = 1;
            }
            else {
              char v18 = (*(uint64_t (**)(unsigned char *))(*(void *)v17 + 24))(v17);
            }
            LOBYTE(v6[133]._os_unfair_lock_opaque) = v18;
            if (BYTE1(v6[133]._os_unfair_lock_opaque)) {
              char v19 = 1;
            }
            else {
              char v19 = (*(uint64_t (**)(unsigned char *))(*(void *)v17 + 32))(v17);
            }
            BYTE1(v6[133]._os_unfair_lock_opaque) = v19;
            if (BYTE2(v6[133]._os_unfair_lock_opaque)) {
              char v20 = 1;
            }
            else {
              char v20 = (*(uint64_t (**)(unsigned char *))(*(void *)v17 + 40))(v17);
            }
            BYTE2(v6[133]._os_unfair_lock_opaque) = v20;
            if (HIBYTE(v6[133]._os_unfair_lock_opaque)) {
              uint64_t isStatisticCollectionEnabled = 1;
            }
            else {
              uint64_t isStatisticCollectionEnabled = (*(uint64_t (**)(unsigned char *))(*(void *)v17 + 48))(v17);
            }
            HIBYTE(v6[133]._os_unfair_lock_opaque) = isStatisticCollectionEnabled;
          }
          int v15 = (void *)*v15;
        }
        while (v15);
      }
LABEL_59:
      if (LOBYTE(v6[133]._os_unfair_lock_opaque))
      {
        uint64_t v21 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        uint64_t isStatisticCollectionEnabled = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        if (isStatisticCollectionEnabled)
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", v25, 2u);
        }
      }
      if (BYTE1(v6[133]._os_unfair_lock_opaque))
      {
        uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
        if ((isStatisticCollectionEnabled & 1) == 0)
        {
          uint64_t v22 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
          uint64_t isStatisticCollectionEnabled = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          if (isStatisticCollectionEnabled)
          {
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v25, 2u);
          }
        }
      }
      if (BYTE2(v6[133]._os_unfair_lock_opaque))
      {
        BOOL v23 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        uint64_t isStatisticCollectionEnabled = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        if (isStatisticCollectionEnabled)
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v25, 2u);
        }
      }
      if (HIBYTE(v6[133]._os_unfair_lock_opaque))
      {
        __int16 v24 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", v25, 2u);
        }
      }
      os_unfair_lock_unlock(v7);
      break;
    default:
      return;
  }
}

uint64_t anonymous namespace'::validateEngineAndGetProfilerService(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REEngineRef is null!", "engineRef", "validateEngineAndGetProfilerService", 22);
    _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ProfilerManager>(*(void *)(a1 + 648));
  if (!result)
  {
LABEL_5:
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "profilerManager", "validateEngineAndGetProfilerService", 26);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL REProfilerServiceIsProcessorEnabled(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = ProfilerService;
  switch(v2)
  {
    case 0:
      uint64_t v5 = re::ProfilerManager::getProcessorId<re::FrameProfiler>();
      goto LABEL_17;
    case 1:
      uint64_t v5 = re::ProfilerManager::getProcessorId<re::ProfilerLogProcessor>();
      goto LABEL_17;
    case 2:
      uint64_t v5 = re::ProfilerManager::getProcessorId<re::ProfilerCsvProcessor>();
      goto LABEL_17;
    case 3:
      return re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(ProfilerService);
    case 4:
      return re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(ProfilerService);
    case 5:
      return re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(ProfilerService);
    case 6:
      uint64_t v5 = re::ProfilerManager::getProcessorId<re::ProfilerLiteHUDProcessor>();
      goto LABEL_17;
    case 7:
      uint64_t v5 = re::ProfilerManager::getProcessorId<re::ProfilerAggregationSignpostProcessor>();
LABEL_17:
      uint64_t v10 = v5;
      uint64_t v8 = (os_unfair_lock_s *)(v4 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(v4 + 480), (unint64_t *)&v10);
      if (v9) {
        BOOL v6 = *(unsigned char *)(v9[3] + 8) != 0;
      }
      else {
        BOOL v6 = 0;
      }
      os_unfair_lock_unlock(v8);
      break;
    default:
      BOOL v6 = 0;
      break;
  }
  return v6;
}

uint64_t REProfilerServiceCreateStatisticsWithAttributionHandle(os_unfair_lock_s *a1, unsigned __int16 *a2)
{
  if (!a1)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) The given REProfilerService is null.", "service", "REProfilerServiceCreateStatisticsWithAttributionHandle", 112);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  if (!a2)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) The given REProfilerAttributionHandle is null.", "handle", "REProfilerServiceCreateStatisticsWithAttributionHandle", 113);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v4 = *a2;
  if (v4 >= 0x20)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) The given REProfilerAttributionHandle is not valid.", "attributionIndex < re::kProfilerAttributionMax", "REProfilerServiceCreateStatisticsWithAttributionHandle", 118);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v15 = re::ProfilerManager::getProcessorId<re::ProfilerPeerAttributionProcessor>();
  uint64_t v2 = (uint64_t)&a1[4];
  os_unfair_lock_lock(a1 + 4);
  uint64_t v3 = a1 + 120;
  BOOL v6 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(v3, (unint64_t *)&v15);
  if (!v6)
  {
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
    goto LABEL_17;
  }
  int v7 = *(unsigned __int8 *)(v6[3] + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)v2);
  if (!v7)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Attribution is not enabled.", "profilerManager->isProcessorEnabled<re::ProfilerPeerAttributionProcessor>()", "REProfilerServiceCreateStatisticsWithAttributionHandle", 122);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v2);
  uint64_t v15 = re::ProfilerManager::getProcessorId<re::ProfilerPeerAttributionProcessor>();
  uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(v3, (unint64_t *)&v15);
  if (v9)
  {
    uint64_t v10 = v9[3];
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
    if (v10)
    {
      char v13 = re::globalAllocators(v11);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 48, 8);
      *(_OWORD *)uint64_t v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
      *(void *)uint64_t v2 = &unk_26E736140;
      uint64_t v3 = *(os_unfair_lock_s **)(v10 + 8 * v4 + 64);
      if (!v3)
      {
        *(void *)(v2 + 24) = 0;
        *(void *)(v2 + 32) = 0;
        *(void *)(v2 + 40) = 0;
        return v2;
      }
      unint64_t v4 = *(void *)&v3[1972]._os_unfair_lock_opaque
         + *(void *)&v3[2116]._os_unfair_lock_opaque
         + *(void *)&v3[2020]._os_unfair_lock_opaque
         + *(void *)&v3[2004]._os_unfair_lock_opaque
         + *(void *)&v3[1956]._os_unfair_lock_opaque;
      if (re::ProfilerUtils::timeBase(void)::onceToken == -1)
      {
LABEL_10:
        *(void *)(v2 + 24) = (unint64_t)re::ProfilerUtils::s_timeBase
                             * v4
                             / *((void *)&re::ProfilerUtils::s_timeBase + 1);
        *(void *)(v2 + 32) = *(void *)&v3[612]._os_unfair_lock_opaque;
        *(void *)(v2 + 40) = *(void *)&v3[2132]._os_unfair_lock_opaque;
        return v2;
      }
LABEL_18:
      dispatch_once(&re::ProfilerUtils::timeBase(void)::onceToken, &__block_literal_global_40);
      goto LABEL_10;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
  }
  re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Attribution data should exist but was not found.", "processor", "REProfilerServiceCreateStatisticsWithAttributionHandle", 126);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REProfilerStatisticsGetCPUTimeInNanoseconds(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(void *)(a1 + 24);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REProfilerStatisticsRef is null.", "statistics", "REProfilerStatisticsGetCPUTimeInNanoseconds", 153);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REProfilerStatisticsGetGPUSubmittedVertexCount(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REProfilerStatisticsRef is null.", "statistics", "REProfilerStatisticsGetGPUSubmittedVertexCount", 159);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REProfilerStatisticsGetMemoryUsageInBytes(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(void *)(a1 + 40);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REProfilerStatisticsRef is null.", "statistics", "REProfilerStatisticsGetMemoryUsageInBytes", 165);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ProfilerManager>(uint64_t a1)
{
  {
    re::introspect<re::ProfilerManager>(void)::info = re::introspect_ProfilerManager(0);
  }
  uint64_t v2 = re::introspect<re::ProfilerManager>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ProfilerManager::getProcessorId<re::ProfilerLiteHUDProcessor>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0320))
  {
    _MergedGlobals_528 = atomic_fetch_add(&re::ProfilerManager::s_nextProcessorId, 1uLL) + 1;
    __cxa_guard_release(&qword_26AFA0320);
  }
  return _MergedGlobals_528;
}

uint64_t re::ProfilerManager::getProcessorId<re::ProfilerAggregationSignpostProcessor>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0330))
  {
    qword_26AFA0328 = atomic_fetch_add(&re::ProfilerManager::s_nextProcessorId, 1uLL) + 1;
    __cxa_guard_release(&qword_26AFA0330);
  }
  return qword_26AFA0328;
}

uint64_t re::ProfilerManager::getProcessorId<re::ProfilerPeerAttributionProcessor>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0340))
  {
    qword_26AFA0338 = atomic_fetch_add(&re::ProfilerManager::s_nextProcessorId, 1uLL) + 1;
    __cxa_guard_release(&qword_26AFA0340);
  }
  return qword_26AFA0338;
}

void REProfilerStatistics::~REProfilerStatistics(REProfilerStatistics *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REBodyTrackingComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REBodyTrackingComponentGetTargetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t REBodyTrackingComponentSetTargetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t REBodyTrackingComponentGetTargetBodyIdentifier(uint64_t a1)
{
  return a1 + 32;
}

__n128 REBodyTrackingComponentSetTargetBodyIdentifier(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[2] = *a2;
  return result;
}

uint64_t REBodyTrackingComponentIsPaused(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t REBodyTrackingComponentSetIsPaused(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t REAttributionCreateContextFromLocalPeer()
{
  return 0;
}

uint64_t REAttributionGetLocalPeerFromAttributionContext()
{
  return 0;
}

uint64_t REAttributionDestroyContext()
{
  return 0;
}

uint64_t REAttributionGetContextCount()
{
  return 0;
}

void CFDataStreamWriter::~CFDataStreamWriter(CFTypeRef *this)
{
  *this = &unk_26E736188;
  CFRelease(this[1]);
}

{
  uint64_t vars8;

  *this = &unk_26E736188;
  CFRelease(this[1]);
  JUMPOUT(0x237DBCBD0);
}

CFIndex CFDataStreamWriter::writeBytes(CFMutableDataRef *this, const UInt8 *a2, CFIndex a3)
{
  return a3;
}

void *REMeshComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void REMeshComponentSetMesh(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  if (v3[1] != *(void *)(a1 + 40))
  {
    re::AssetHandle::operator=(a1 + 32, v3);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

uint64_t REMeshComponentGetMesh(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REMeshComponentSetBoundsMargin(uint64_t this, float a2)
{
  if (*(float *)(this + 96) != a2)
  {
    *(float *)(this + 96) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REMeshComponentGetBoundsMargin(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

void REMeshComponentAddMaterial(uint64_t a1, uint64_t a2)
{
}

void REMeshComponentAddMaterialWithParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v29[3] = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, &v22);
  if (!v23)
  {
    re::MaterialAsset::assetType(v5);
    goto LABEL_6;
  }
  BOOL v6 = *(uint64_t **)(v23 + 264);
  if (v6 != re::MaterialAsset::assetType(v5))
  {
LABEL_6:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v18 = re::AssetHandle::assetInfo((re::AssetHandle *)&v22);
      if (v18[17]) {
        char v19 = (char *)v18[18];
      }
      else {
        char v19 = (char *)v18 + 137;
      }
      int v24 = 136315138;
      *(void *)uint64_t v25 = v19;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid asset %s passed to REMeshComponentAddMaterial, expected Material asset type.", (uint8_t *)&v24, 0xCu);
    }

    goto LABEL_23;
  }
  if (a3)
  {
    re::ecs2::EntityHandle::EntityHandle((uint64_t)location, a3);
  }
  else
  {
    objc_initWeak(location, 0);
    location[1] = 0;
    location[2] = 0;
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  }
  unint64_t v8 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 120) < v8)
  {
    objc_initWeak((id *)&v24, 0);
    *(void *)&void v25[4] = 0;
    uint64_t v26 = 0;
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)&v24);
    re::DynamicArray<re::ecs2::EntityHandle>::resize(a1 + 104, v8, (re::ecs2::EntityHandle *)&v24);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)&v24);
    objc_destroyWeak((id *)&v24);
  }
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 56), (re::AssetHandle *)&v22);
  unint64_t v9 = *(void *)(a1 + 120);
  if (v9 >= *(void *)(a1 + 112))
  {
    re::DynamicArray<re::ecs2::EntityHandle>::growCapacity((void *)(a1 + 104), v9 + 1);
    unint64_t v9 = *(void *)(a1 + 120);
  }
  re::ecs2::EntityHandle::EntityHandle((id *)(*(void *)(a1 + 136) + 24 * v9), (const re::ecs2::EntityHandle *)location);
  ++*(void *)(a1 + 120);
  ++*(_DWORD *)(a1 + 128);
  re::ecs2::Component::enqueueMarkDirty(a1);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(unsigned __int16 *)(v10 + 82);
  if (*(_WORD *)(v10 + 82))
  {
    uint64_t v12 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                          + 16);
    char v13 = *(int16x8_t **)(v10 + 88);
    int16x8_t v14 = vld1q_dup_s16(v12);
    int v15 = 1;
    while (1)
    {
      uint16x8_t v16 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v14, *v13), (int8x16_t)xmmword_23436BBD0);
      v16.i16[0] = vmaxvq_u16(v16);
      if (v16.i32[0]) {
        break;
      }
      v15 -= 8;
      ++v13;
      if (!--v11) {
        goto LABEL_22;
      }
    }
    if (v16.u16[0] - v15 < *(unsigned __int16 *)(v10 + 80))
    {
      uint64_t v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)&v22);
      re::ecs2::MaterialOverride::MaterialOverride((uint64_t)&v24, (const re::AssetHandle *)v20);
      re::DynamicArray<re::ecs2::MaterialOverride>::add((_anonymous_namespace_ *)(v17 + 32), (uint64_t *)&v24);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v27);
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v24);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
      RENetworkMarkComponentDirty((const re::ecs2::Component *)v17);
    }
  }
LABEL_22:
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  objc_destroyWeak(location);
LABEL_23:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
}

void re::DynamicArray<re::ecs2::EntityHandle>::resize(uint64_t a1, unint64_t a2, re::ecs2::EntityHandle *a3)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return;
    }
    uint64_t v9 = 24 * a2;
    unint64_t v10 = a2;
    do
    {
      uint64_t v11 = (re::ecs2::EntityHandle *)(*(void *)(a1 + 32) + v9);
      re::ecs2::EntityHandle::reset(v11);
      objc_destroyWeak((id *)v11);
      *(void *)uint64_t v11 = 0;
      ++v10;
      v9 += 24;
    }
    while (v10 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a1, a2);
      unint64_t v5 = *(void *)(a1 + 16);
    }
    unint64_t v7 = a2 - v5;
    if (a2 > v5)
    {
      uint64_t v8 = 24 * v5;
      do
      {
        re::ecs2::EntityHandle::EntityHandle((id *)(*(void *)(a1 + 32) + v8), a3);
        v8 += 24;
        --v7;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

re::ecs2::NetworkComponent *REMeshComponentRemoveAllMaterials(uint64_t a1)
{
  re::DynamicArray<re::AssetHandle>::clear((re::AssetHandle *)(a1 + 56));
  re::DynamicArray<re::ecs2::EntityHandle>::clear(a1 + 104);
  __n128 result = (re::ecs2::NetworkComponent *)re::ecs2::Component::enqueueMarkDirty(a1);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned __int16 *)(v3 + 82);
  if (*(_WORD *)(v3 + 82))
  {
    __n128 result = (re::ecs2::NetworkComponent *)(v3 + 32);
    unint64_t v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                         + 16);
    BOOL v6 = *(int16x8_t **)(v3 + 88);
    int16x8_t v7 = vld1q_dup_s16(v5);
    for (int i = 1; ; i -= 8)
    {
      uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
      v9.i16[0] = vmaxvq_u16(v9);
      if (v9.i32[0]) {
        break;
      }
      ++v6;
      if (!--v4) {
        return result;
      }
    }
    if (v9.u16[0] - i < *(unsigned __int16 *)(v3 + 80))
    {
      unint64_t v10 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::get(result, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::DynamicArray<re::ecs2::MaterialOverride>::clear((uint64_t)v10 + 32);
      return RENetworkMarkComponentDirty(v10);
    }
  }
  return result;
}

uint64_t REMeshComponentGetMaterialCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REMeshComponentGetMaterialAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 88) + 24 * a2);
}

uint64_t REMeshComponentGetMaterialParametersIDAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 120) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 136) + 24 * a2 + 8);
  }
}

void REMeshComponentSetMaterialAtIndex(void *a1, unint64_t a2, uint64_t a3)
{
}

void REMeshComponentSetMaterialWithParametersAtIndex(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a1[9] > a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, &v25);
    if (v26)
    {
      uint64_t v8 = *(uint64_t **)(v26 + 264);
      if (v8 == re::MaterialAsset::assetType(v7))
      {
        if (a4)
        {
          re::ecs2::EntityHandle::EntityHandle((uint64_t)location, a4);
        }
        else
        {
          objc_initWeak(location, 0);
          location[1] = 0;
          location[2] = 0;
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
        }
        unint64_t v10 = a1[9];
        if (v10 <= a2)
        {
          uint64_t v27 = 0;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          *(_OWORD *)long long v36 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v28 = 136315906;
          uint64_t v29 = "operator[]";
          __int16 v30 = 1024;
          int v31 = 789;
          __int16 v32 = 2048;
          unint64_t v33 = a2;
          __int16 v34 = 2048;
          unint64_t v35 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        else
        {
          if (v26 == *(void *)(a1[11] + 24 * a2 + 8)) {
            goto LABEL_19;
          }
          if (a1[15] < v10)
          {
            objc_initWeak(v36, 0);
            v36[1] = 0;
            *(void *)&long long v37 = 0;
            re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v36);
            re::DynamicArray<re::ecs2::EntityHandle>::resize((uint64_t)(a1 + 13), v10, (re::ecs2::EntityHandle *)v36);
            re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v36);
            objc_destroyWeak(v36);
            unint64_t v10 = a1[9];
          }
          if (v10 > a2)
          {
            re::AssetHandle::operator=(a1[11] + 24 * a2, &v25);
            unint64_t v10 = a1[15];
            if (v10 > a2)
            {
              re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1[17] + 24 * a2), location);
              re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
LABEL_19:
              uint64_t v11 = a1[2];
              uint64_t v12 = *(unsigned __int16 *)(v11 + 82);
              if (!*(_WORD *)(v11 + 82)) {
                goto LABEL_27;
              }
              char v13 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                    + 16);
              int16x8_t v14 = *(int16x8_t **)(v11 + 88);
              int16x8_t v15 = vld1q_dup_s16(v13);
              int v16 = 1;
              while (1)
              {
                uint16x8_t v17 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v15, *v14), (int8x16_t)xmmword_23436BBD0);
                v17.i16[0] = vmaxvq_u16(v17);
                if (v17.i32[0]) {
                  break;
                }
                v16 -= 8;
                ++v14;
                if (!--v12) {
                  goto LABEL_27;
                }
              }
              if (v17.u16[0] - v16 >= *(unsigned __int16 *)(v11 + 80)) {
                goto LABEL_27;
              }
              uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              unint64_t v10 = *(void *)(v18 + 48);
              if (v10 > a2)
              {
                char v19 = (const re::ecs2::Component *)v18;
                char v20 = (void *)(*(void *)(v18 + 64) + 120 * a2);
                re::AssetHandle::AssetHandle((re::AssetHandle *)v23, (const re::AssetHandle *)&v25);
                re::ecs2::MaterialOverride::setMaterialOrDefinition(v20, v23);
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
                RENetworkMarkComponentDirty(v19);
LABEL_27:
                re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
                objc_destroyWeak(location);
LABEL_28:
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
                return;
              }
LABEL_37:
              uint64_t v27 = 0;
              long long v39 = 0u;
              long long v40 = 0u;
              long long v37 = 0u;
              long long v38 = 0u;
              *(_OWORD *)long long v36 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v28 = 136315906;
              uint64_t v29 = "operator[]";
              __int16 v30 = 1024;
              int v31 = 789;
              __int16 v32 = 2048;
              unint64_t v33 = a2;
              __int16 v34 = 2048;
              unint64_t v35 = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
LABEL_36:
            uint64_t v27 = 0;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            *(_OWORD *)long long v36 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v28 = 136315906;
            uint64_t v29 = "operator[]";
            __int16 v30 = 1024;
            int v31 = 789;
            __int16 v32 = 2048;
            unint64_t v33 = a2;
            __int16 v34 = 2048;
            unint64_t v35 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_37;
          }
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)long long v36 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = a2;
        __int16 v34 = 2048;
        unint64_t v35 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_36;
      }
    }
    else
    {
      re::MaterialAsset::assetType(v7);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint16x8_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = re::AssetHandle::assetInfo((re::AssetHandle *)&v25);
      if (v21[17]) {
        uint64_t v22 = (void *)v21[18];
      }
      else {
        uint64_t v22 = (char *)v21 + 137;
      }
      LODWORD(v36[0]) = 136315138;
      *(id *)((char *)v36 + 4) = v22;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid asset %s passed to REMeshComponentAddMaterial, expected Material asset type.", (uint8_t *)v36, 0xCu);
    }

    goto LABEL_28;
  }
}

uint64_t AddOrGetMaterialOverrideComponent(re::ecs2::MeshComponent *a1, re::ecs2::Entity *a2)
{
  uint64_t v3 = (re::ecs2::Entity *)((char *)a2 + 32);
  uint64_t v4 = *((unsigned __int16 *)a2 + 41);
  if (!*((_WORD *)a2 + 41)) {
    goto LABEL_8;
  }
  unint64_t v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                       + 16);
  BOOL v6 = (int16x8_t *)*((void *)a2 + 11);
  int16x8_t v7 = vld1q_dup_s16(v5);
  int v8 = 1;
  while (1)
  {
    uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
    v9.i16[0] = vmaxvq_u16(v9);
    if (v9.i32[0]) {
      break;
    }
    v8 -= 8;
    ++v6;
    if (!--v4) {
      goto LABEL_8;
    }
  }
  if (v9.u16[0] - v8 < *((unsigned __int16 *)a2 + 40)) {
    return re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
LABEL_8:
  uint64_t v10 = re::ecs2::EntityComponentCollection::add(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v11 = *((void *)a1 + 9);
  if (v11)
  {
    uint64_t v12 = (const re::AssetHandle *)*((void *)a1 + 11);
    uint64_t v13 = 24 * v11;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v20, v12);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v15, (const re::AssetHandle *)v20);
      re::ecs2::MaterialOverride::MaterialOverride((uint64_t)v16, (const re::AssetHandle *)v15);
      re::DynamicArray<re::ecs2::MaterialOverride>::add((_anonymous_namespace_ *)(v10 + 32), v16);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v16);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
      uint64_t v12 = (const re::AssetHandle *)((char *)v12 + 24);
      v13 -= 24;
    }
    while (v13);
  }
  return v10;
}

re::ecs2::NetworkComponent *REMeshComponentAddMaterialByDefinition(re::ecs2::Entity **a1, uint64_t a2)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  uint64_t v4 = MaterialOverrideComponent;
  if (a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v12);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, (const re::AssetHandle *)v12);
    re::ecs2::MaterialOverride::MaterialOverride((uint64_t)v7, (const re::AssetHandle *)v6);
    re::DynamicArray<re::ecs2::MaterialOverride>::add((_anonymous_namespace_ *)(v4 + 32), (uint64_t *)v7);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v9[1] + 8));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v7);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    long long v8 = 0u;
    memset(v9, 0, sizeof(v9));
    DWORD1(v8) = 0x7FFFFFFF;
    long long v10 = 0u;
    uint64_t v11 = 0;
    re::DynamicArray<re::ecs2::MaterialOverride>::add((_anonymous_namespace_ *)(MaterialOverrideComponent + 32), (uint64_t *)v7);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v9[1] + 8));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v7);
  }
  return RENetworkMarkComponentDirty((const re::ecs2::Component *)v4);
}

re::ecs2::NetworkComponent *REMeshComponentSetMaterialAtIndexByDefinition(re::ecs2::Entity **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  BOOL v6 = (const re::ecs2::Component *)MaterialOverrideComponent;
  if (!a3)
  {
    unint64_t v7 = *(void *)(MaterialOverrideComponent + 48);
    if (v7 > a2)
    {
      uint64_t v10 = *(void *)(MaterialOverrideComponent + 64);
      memset(v12, 0, sizeof(v12));
      re::ecs2::MaterialOverride::setMaterialOrDefinition((void *)(v10 + 120 * a2), v12);
      uint16x8_t v9 = v12;
      goto LABEL_6;
    }
LABEL_8:
    v14[0] = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    int v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::AssetAPIHelper::assetHandleCreate(a3, v14);
  unint64_t v7 = *((void *)v6 + 6);
  if (v7 <= a2)
  {
    uint64_t v14[3] = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    int v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  long long v8 = (void *)(*((void *)v6 + 8) + 120 * a2);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)v14);
  re::ecs2::MaterialOverride::setMaterialOrDefinition(v8, v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  uint16x8_t v9 = v14;
LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return RENetworkMarkComponentDirty(v6);
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat(re::ecs2::Entity **a1, unint64_t a2, const char *a3, float a4)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v8 = (const re::ecs2::Component *)MaterialOverrideComponent;
  re::ecs2::MaterialOverride::setFloat((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, a4);
  return RENetworkMarkComponentDirty(v8);
}

float REMeshComponentMaterialAtIndexGetFloat(re::ecs2::Entity **a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    memset(v9, 0, sizeof(v9));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::floatValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)v9);
  if (LOBYTE(v9[0]))
  {
    float result = *((float *)v9 + 1);
    *a4 = DWORD1(v9[0]);
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat2F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, double a4)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v8 = (const re::ecs2::Component *)MaterialOverrideComponent;
  re::ecs2::MaterialOverride::setVector2F((_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, *(uint64_t *)&a4);
  return RENetworkMarkComponentDirty(v8);
}

double REMeshComponentMaterialAtIndexGetFloat2F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    memset(v9, 0, sizeof(v9));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::vector2FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)v9);
  if (LOBYTE(v9[0]))
  {
    double result = *((double *)v9 + 1);
    *a4 = *((void *)&v9[0] + 1);
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat3F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, __n128 a4)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v7 = (const re::ecs2::Component *)MaterialOverrideComponent;
  re::ecs2::MaterialOverride::setVector3F((_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, a4.n128_i64[0], a4.n128_i64[1]);
  return RENetworkMarkComponentDirty(v7);
}

double REMeshComponentMaterialAtIndexGetFloat3F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::vector3FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)&v9);
  if ((_BYTE)v9)
  {
    double result = *(double *)&v10;
    *a4 = v10;
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat4F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, __n128 a4)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v7 = (const re::ecs2::Component *)MaterialOverrideComponent;
  re::ecs2::MaterialOverride::setVector4F((_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, a4.n128_i64[0], a4.n128_i64[1]);
  return RENetworkMarkComponentDirty(v7);
}

double REMeshComponentMaterialAtIndexGetFloat4F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::vector4FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)&v9);
  if ((_BYTE)v9)
  {
    double result = *(double *)&v10;
    *a4 = v10;
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat2x2F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, double a4, double a5)
{
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v10 = (const re::ecs2::Component *)MaterialOverrideComponent;
  re::ecs2::MaterialOverride::setMatrix2x2F((_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, *(uint64_t *)&a4, *(uint64_t *)&a5);
  return RENetworkMarkComponentDirty(v10);
}

double REMeshComponentMaterialAtIndexGetFloat2x2F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::matrix2x2FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)&v10);
  if ((_BYTE)v10)
  {
    double result = *((double *)&v10 + 1);
    uint64_t v9 = v11;
    *a4 = *((void *)&v10 + 1);
    a4[1] = v9;
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat3x3F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  unint64_t v9 = *(void *)(MaterialOverrideComponent + 48);
  if (v9 <= a2)
  {
    uint64_t v17 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    __int16 v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = a2;
    __int16 v24 = 2048;
    unint64_t v25 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v10 = (const re::ecs2::Component *)MaterialOverrideComponent;
  long long v11 = (_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2);
  v16[0] = a4;
  v16[1] = a5;
  void v16[2] = a6;
  re::ecs2::MaterialOverride::setMatrix3x3F(v11, a3, v16);
  return RENetworkMarkComponentDirty(v10);
}

double REMeshComponentMaterialAtIndexGetFloat3x3F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::matrix3x3FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)&v11);
  if ((_BYTE)v11)
  {
    double result = *(double *)&v12;
    long long v9 = v13;
    long long v10 = v14;
    *(_DWORD *)(a4 + 8) = DWORD2(v12);
    *(_DWORD *)(a4 + 24) = DWORD2(v9);
    *(double *)a4 = result;
    *(void *)(a4 + 16) = v9;
    *(_DWORD *)(a4 + 40) = DWORD2(v10);
    *(void *)(a4 + 32) = v10;
  }
  return result;
}

re::ecs2::NetworkComponent *REMeshComponentMaterialAtIndexSetFloat4x4F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  unint64_t v10 = *(void *)(MaterialOverrideComponent + 48);
  if (v10 <= a2)
  {
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v11 = (const re::ecs2::Component *)MaterialOverrideComponent;
  long long v12 = (_anonymous_namespace_ *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2);
  v18[0] = a4;
  v18[1] = a5;
  void v18[2] = a6;
  v18[3] = a7;
  re::ecs2::MaterialOverride::setMatrix4x4F(v12, a3, v18);
  return RENetworkMarkComponentDirty(v11);
}

double REMeshComponentMaterialAtIndexGetFloat4x4F(re::ecs2::Entity **a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  if (*(void *)(MaterialOverrideComponent + 48) <= a2)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::MaterialOverride::matrix4x4FValue((re::ecs2::MaterialOverride *)(*(void *)(MaterialOverrideComponent + 64) + 120 * a2), a3, (uint64_t)&v12);
  if ((_BYTE)v12)
  {
    double result = *(double *)&v13;
    long long v9 = v14;
    long long v10 = v15;
    long long v11 = v16;
    *a4 = v13;
    a4[1] = v9;
    a4[2] = v10;
    a4[3] = v11;
  }
  return result;
}

void REMeshComponentMaterialAtIndexSetTextureFromAsset(re::ecs2::Entity **a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t MaterialOverrideComponent = (const re::ecs2::Component *)AddOrGetMaterialOverrideComponent((re::ecs2::MeshComponent *)a1, a1[2]);
  re::AssetAPIHelper::assetHandleCreate(a4, v11);
  unint64_t v8 = *((void *)MaterialOverrideComponent + 6);
  if (v8 <= a2)
  {
    uint64_t v11[3] = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    long long v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 789;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v9 = (_anonymous_namespace_ *)(*((void *)MaterialOverrideComponent + 8) + 120 * a2);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)v11);
  re::ecs2::MaterialOverride::setTexture(v9, a3, (const re::AssetHandle *)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  RENetworkMarkComponentDirty(MaterialOverrideComponent);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

__n128 REEntityComputeLocalBoundingBox(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  if (v9)
  {
    uint64_t v2 = *(uint64_t **)(v9 + 264);
    int32x4_t v5 = vdupq_n_s32(0x7F800000u);
    if (v2 == re::MeshAsset::assetType(v1))
    {
      uint64_t v3 = (float32x4_t *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)&v8);
      if (v3)
      {
        v6[0] = (float32x4_t)xmmword_23435FD50;
        v6[1] = (float32x4_t)xmmword_23435FD60;
        int v6[2] = (float32x4_t)xmmword_23435FD80;
        void v6[3] = (float32x4_t)xmmword_23435FBB0;
        re::MeshAsset::aabbFromMesh(v3, v6, (uint64_t)&v7);
        int32x4_t v5 = v7;
      }
    }
  }
  else
  {
    re::MeshAsset::assetType(v1);
    int32x4_t v5 = vdupq_n_s32(0x7F800000u);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return (__n128)v5;
}

double REEntityComputeMeshBounds(uint64_t a1, int a2, int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  v8[0] = a4;
  v8[1] = a5;
  void v8[2] = a6;
  void v8[3] = a7;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds(a1, a2, v8, a3, (uint64_t)&v9);
  return *(double *)&v9;
}

double REEntityComputeTightMeshBounds(uint64_t a1, int a2, int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  v8[0] = a4;
  v8[1] = a5;
  void v8[2] = a6;
  void v8[3] = a7;
  re::ecs2::MeshComponentHelper::computeEntityMeshTightBounds(a1, a2, v8, a3, (uint64_t)&v9);
  return *(double *)&v9;
}

double REEntityComputeMeshBoundsAnchored(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  v7[0] = a3;
  v7[1] = a4;
  _OWORD v7[2] = a5;
  uint64_t v7[3] = a6;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds(a1, a2, v7, 1, (uint64_t)&v8);
  return *(double *)&v8;
}

double REEntityComputeMeshBoundsAnchoredIncludingInactive(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  v7[0] = a3;
  v7[1] = a4;
  _OWORD v7[2] = a5;
  uint64_t v7[3] = a6;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds(a1, a2, v7, 0, (uint64_t)&v8);
  return *(double *)&v8;
}

double REEntityComputeMeshBoundsLocalSpace(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v3 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v4 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  v6[0] = *(float32x4_t *)MEMORY[0x263EF89A8];
  v6[1] = v2;
  int v6[2] = v3;
  void v6[3] = v4;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds(a1, a2, v6, 1, (uint64_t)&v7);
  return *(double *)&v7;
}

double REEntityComputeMeshBoundsLocalSpaceIncludingInactive(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v3 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v4 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  v6[0] = *(float32x4_t *)MEMORY[0x263EF89A8];
  v6[1] = v2;
  int v6[2] = v3;
  void v6[3] = v4;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds(a1, a2, v6, 0, (uint64_t)&v7);
  return *(double *)&v7;
}

double REEntityComputeMeshBoundsWorldSpace(re::ecs2::TransformComponent **a1, int a2)
{
  *(double *)v4.i64 = REEntityCalculateWorldMatrix4x4F(a1);
  v9[0] = v4;
  v9[1] = v5;
  void v9[2] = v6;
  _OWORD v9[3] = v7;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a2, v9, 1, (uint64_t)&v10);
  return *(double *)&v10;
}

double REEntityComputeMeshBoundsWorldSpaceIncludingInactive(re::ecs2::TransformComponent **a1, int a2)
{
  *(double *)v4.i64 = REEntityCalculateWorldMatrix4x4F(a1);
  v9[0] = v4;
  v9[1] = v5;
  void v9[2] = v6;
  _OWORD v9[3] = v7;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a2, v9, 0, (uint64_t)&v10);
  return *(double *)&v10;
}

double REEntityComputeBoundsFromView(re::ecs2::TransformComponent **a1, int a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  *(double *)&long long v8 = REEntityCalculateWorldMatrix4x4F(a1);
  uint64_t v9 = 0;
  v18[0] = v8;
  v18[1] = v10;
  void v18[2] = v11;
  v18[3] = v12;
  do
  {
    *(float32x4_t *)((char *)&v19 + v9 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(v18[v9])), a4, *(float32x2_t *)&v18[v9], 1), a5, (float32x4_t)v18[v9], 2), a6, (float32x4_t)v18[v9], 3);
    ++v9;
  }
  while (v9 != 4);
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a2, &v19, 1, (uint64_t)v18);
  return *(double *)v18;
}

double REEntityComputeBounds(re::ecs2::TransformComponent **a1, int a2)
{
  *(double *)v4.i64 = REEntityCalculateWorldMatrix4x4F(a1);
  v9[0] = v4;
  v9[1] = v5;
  void v9[2] = v6;
  _OWORD v9[3] = v7;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a2, v9, 1, (uint64_t)&v10);
  return *(double *)&v10;
}

uint64_t REMaterialParameterBlockArrayComponentGetBlockValueAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(v2 + 24 * a2);
  if (!v3) {
    uint64_t v3 = *(void *)(v2 + 24 * a2 + 8);
  }
  return v3 + 8;
}

void REMaterialParameterBlockArrayComponentSetBlockValueAtIndex(void *a1, unint64_t a2, char *a3)
{
  if (a3) {
    float32x4_t v6 = a3 - 8;
  }
  else {
    float32x4_t v6 = 0;
  }
  if (a3) {
    float32x4_t v7 = a3;
  }
  if (a1[6] <= a2)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)(a1 + 4), a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a1[11] <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)(a1 + 9), a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a1[6] <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = a1[8] + 24 * a2;
  ++*(_DWORD *)(v8 + 16);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v8, (uint64_t)v6);
  *(void *)(v8 + 8) = 0;
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (a3)
  {
  }
}

uint64_t REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(*(void *)(a1 + 64) + 24 * a2);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0;
  v2[1] = v3;
  if (v3) {
    return v3 + 8;
  }
  else {
    return 0;
  }
}

void REMaterialParameterBlockArrayComponentReturnBlockValueAtIndex(void *a1, unint64_t a2, void *a3)
{
  if (a3) {
    uint64_t v6 = (uint64_t)a3 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a1[6] <= a2)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)(a1 + 4), a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a1[11] <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)(a1 + 9), a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a1[6] <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = a1[8] + 24 * a2;
  ++*(_DWORD *)(v7 + 16);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v7, v6);
  *(void *)(v7 + 8) = 0;
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (a3)
  {
  }
}

uint64_t REMaterialParameterBlockValueCreate(re *a1)
{
  re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock>(a1, &v4);
  uint64_t v1 = v4;
  if (v4)
  {
    id v2 = (id)(v4 + 8);
    if (v4) {
  }
    }
  return v1 + 8;
}

char *REMaterialParameterBlockValueCopy(char *a1)
{
  if (a1) {
    uint64_t v1 = a1 - 8;
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1) {
    id v2 = a1;
  }
  re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock&>((re *)v1, &v6);
  uint64_t v3 = v6;
  if (v6)
  {
    uint64_t v4 = (char *)v6 + 8;
    if (v6) {
  }
    }
  return (char *)v3 + 8;
}

void REMaterialParameterBlockValueClearParameter(char *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    float32x4_t v5 = a1;
    if (a2)
    {
      uint64_t v6 = *a2;
      if (*a2)
      {
        char v7 = a2[1];
        if (v7)
        {
          uint64_t v8 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v6 = 31 * v6 + v7;
            int v9 = *v8++;
            char v7 = v9;
          }
          while (v9);
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v14 = 2 * v6;
    int v15 = a2;
    re::ecs2::SerializableMaterialParameterBlock::removeParameter(v4, (const re::StringID *)&v14);
    re::StringID::destroyString((re::StringID *)&v14);
  }
  else
  {
    if (a2)
    {
      uint64_t v10 = *a2;
      if (*a2)
      {
        char v11 = a2[1];
        if (v11)
        {
          long long v12 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v10 = 31 * v10 + v11;
            int v13 = *v12++;
            char v11 = v13;
          }
          while (v13);
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v14 = 2 * v10;
    int v15 = a2;
    re::ecs2::SerializableMaterialParameterBlock::removeParameter(0, (const re::StringID *)&v14);
    re::StringID::destroyString((re::StringID *)&v14);
  }
}

uint64_t REMaterialParameterBlockValueGetParameterType(char *a1, char *a2)
{
  if (a1) {
    uint64_t v3 = a1 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1)
  {
    float32x4_t v5 = a1;
  }
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v13[0] = 2 * v6;
  v13[1] = a2;
  uint64_t v10 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v3 + 304), v13);
  if (v10) {
    uint64_t v11 = re::convert(*v10);
  }
  else {
    uint64_t v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)v13);
  return v11;
}

void REMaterialParameterBlockValueSetBool(_DWORD *a1, char *a2, unsigned __int8 a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    unsigned __int8 v9 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 2, &v9);
    ++a1[98];
  }
  else
  {
    unsigned __int8 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 2, &v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat(_DWORD *a1, char *a2, float a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    float v9 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 1, (unsigned __int8 *)&v9);
    ++a1[98];
  }
  else
  {
    float v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 1, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetInt(_DWORD *a1, char *a2, int a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    int v9 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 3, (unsigned __int8 *)&v9);
    ++a1[98];
  }
  else
  {
    int v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 3, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetUInt(_DWORD *a1, char *a2, int a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    int v9 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 7, (unsigned __int8 *)&v9);
    ++a1[98];
  }
  else
  {
    int v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 7, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat2(_DWORD *a1, char *a2, double a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 32, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 32, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetInt2(_DWORD *a1, char *a2, double a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 4, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 4, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetUInt2(_DWORD *a1, char *a2, double a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)(a1 - 2);
    char v7 = a1;
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v6, a2, 8, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    double v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 8, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat3(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 33, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 33, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetInt3(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 5, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 5, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetUInt3(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 9, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 9, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat4(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 34, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 34, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetInt4(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 6, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 6, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetUInt4(_DWORD *a1, char *a2, __n128 a3)
{
  if (a1)
  {
    uint64_t v5 = (uint64_t)(a1 - 2);
    uint64_t v6 = a1;
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v5, a2, 10, (unsigned __int8 *)&v8);
    ++a1[98];
  }
  else
  {
    __n128 v8 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 10, (unsigned __int8 *)&v8);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat2x2(_DWORD *a1, char *a2, double a3, double a4)
{
  if (a1)
  {
    uint64_t v8 = (uint64_t)(a1 - 2);
    int v9 = a1;
    double v10 = a3;
    double v11 = a4;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v8, a2, 48, (unsigned __int8 *)&v10);
    ++a1[98];
  }
  else
  {
    double v10 = a3;
    double v11 = a4;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 48, (unsigned __int8 *)&v10);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat3x3(_DWORD *a1, char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1)
  {
    uint64_t v7 = (uint64_t)(a1 - 2);
    uint64_t v8 = a1;
    __n128 v12 = a3;
    __n128 v13 = a4;
    __n128 v14 = a5;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v7, a2, 49, (unsigned __int8 *)&v12);
    ++a1[98];
  }
  else
  {
    __n128 v12 = a3;
    __n128 v13 = a4;
    __n128 v14 = a5;
    re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(0, a2, 49, (unsigned __int8 *)&v12);
    ++MEMORY[0x190];
  }
}

void REMaterialParameterBlockValueSetFloat4x4(char *a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (a1) {
    uint64_t v8 = a1 - 8;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a1)
  {
    __n128 v12 = a5;
    __n128 v13 = a6;
    __n128 v10 = a3;
    __n128 v11 = a4;
    int v9 = a1;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
  }
  v14[0] = a3;
  v14[1] = a4;
  v14[2] = a5;
  uint64_t v14[3] = a6;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>((uint64_t)v8, a2, 50, (unsigned __int8 *)v14);
  ++*((_DWORD *)v8 + 100);
  if (a1) {
}
  }

void REMaterialParameterBlockValueSetColor3(char *a1, char *a2, unsigned int a3, int8x16_t a4)
{
  if (a1) {
    uint64_t v7 = a1 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a1)
  {
    int8x16_t v13 = a4;
    uint64_t v8 = a1;
    a4 = v13;
  }
  v9.i64[0] = a4.u32[1];
  v9.i64[1] = a3;
  int8x16_t v10 = (int8x16_t)vshlq_n_s64(v9, 0x20uLL);
  *(int32x2_t *)v9.i8 = vzip1_s32(*(int32x2_t *)a4.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL));
  v11.i64[0] = v9.u32[0];
  v11.i64[1] = v9.u32[1];
  int8x16_t v12 = vorrq_s8(v10, v11);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F((uint64_t)v7, a2, v12.i64[0], v12.i64[1]);
  if (a1)
  {
  }
}

void REMaterialParameterBlockValueSetColor4(void *a1, char *a2, char a3, __n128 a4)
{
  if (a1) {
    uint64_t v6 = (uint64_t)a1 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a1)
  {
    id v8 = a1;
    __n128 v10 = a4;
    char v11 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v6, a2, (long long *)&v10);
  }
  else
  {
    __n128 v10 = a4;
    char v11 = a3;
    re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v6, a2, (long long *)&v10);
  }
}

void REMaterialParameterBlockValueSetTextureFromAsset(void *a1, char *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = (uint64_t)a1 - 8;
    id v7 = a1;
    re::AssetAPIHelper::assetHandleCreate(a3, v9);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v9);
    re::ecs2::SerializableMaterialParameterBlock::setTexture(v6, a2, (const re::AssetHandle *)v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  }
  else
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v9);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v9);
    re::ecs2::SerializableMaterialParameterBlock::setTexture(0, a2, (const re::AssetHandle *)v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  }
}

void REMaterialParameterBlockValueSetTextureBinding(char *a1, const char *a2, const char *a3, const char *a4)
{
  if (a1)
  {
    id v8 = (_anonymous_namespace_ *)(a1 - 8);
    int64x2_t v9 = a1;
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(v8, a2, 2, a3, a4);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(0, a2, 2, a3, a4);
  }
}

void REMaterialParameterBlockValueSetBufferBinding(char *a1, const char *a2, const char *a3, const char *a4)
{
  if (a1)
  {
    id v8 = (_anonymous_namespace_ *)(a1 - 8);
    int64x2_t v9 = a1;
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(v8, a2, 3, a3, a4);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(0, a2, 3, a3, a4);
  }
}

void REMaterialParameterBlockValueSetSamplerBinding(char *a1, const char *a2, const char *a3, const char *a4)
{
  if (a1)
  {
    id v8 = (_anonymous_namespace_ *)(a1 - 8);
    int64x2_t v9 = a1;
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(v8, a2, 4, a3, a4);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(0, a2, 4, a3, a4);
  }
}

BOOL REMaterialParameterBlockValueGetBool(char *a1, char *a2, unsigned char *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::BOOLValue(v5, a2, v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v10[1];
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat(char *a1, char *a2, _DWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::floatValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetInt(char *a1, char *a2, _DWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::intValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetUInt(char *a1, char *a2, _DWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::uintValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetInt2(char *a1, char *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::int2Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetUInt2(char *a1, char *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::uint2Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetInt3(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::int3Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetUInt3(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::uint3Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetInt4(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::int4Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetUInt4(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::uint4Value(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat2(char *a1, char *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::vector2FValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat3(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::vector3FValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat4(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::vector4FValue(v5, a2, (uint64_t)v10);
  int v8 = v10[0];
  if (v10[0]) {
    *a3 = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat2x2(char *a1, char *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix2x2FValue(v5, a2, (uint64_t)v11);
  int v8 = v11[0];
  if (v11[0])
  {
    uint64_t v9 = v13;
    *a3 = v12;
    a3[1] = v9;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat3x3(char *a1, char *a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix3x3FValue(v5, a2, (uint64_t)v13);
  int v8 = v13[0];
  if (v13[0])
  {
    uint64_t v9 = v14;
    long long v10 = v16;
    long long v11 = v17;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 24) = DWORD2(v10);
    *(void *)a3 = v9;
    *(void *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 40) = DWORD2(v11);
    *(void *)(a3 + 32) = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetFloat4x4(char *a1, char *a2, _OWORD *a3)
{
  if (a1) {
    uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a1)
  {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix4x4FValue(v5, a2, (uint64_t)v13);
  int v8 = v13[0];
  if (v13[0])
  {
    long long v9 = v15;
    long long v10 = v16;
    long long v11 = v17;
    *a3 = v14;
    a3[1] = v9;
    a3[2] = v10;
    a3[3] = v11;
  }
  return v8 != 0;
}

BOOL REMaterialParameterBlockValueGetColor3(char *a1, char *a2, _OWORD *a3, unsigned char *a4)
{
  if (a1) {
    id v7 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    id v7 = 0;
  }
  if (a1)
  {
    long long v9 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v7, a2, (uint64_t)v13);
  int v10 = v13[0];
  if (v13[0])
  {
    char v11 = BYTE12(v14);
    *a3 = v14;
    *a4 = v11;
  }
  return v10 != 0;
}

BOOL REMaterialParameterBlockValueGetColor4(char *a1, char *a2, _OWORD *a3, unsigned char *a4)
{
  if (a1) {
    id v7 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    id v7 = 0;
  }
  if (a1)
  {
    long long v9 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v7, a2, (uint64_t)v12);
  int v10 = v12[0];
  if (v12[0])
  {
    *a3 = v13;
    *a4 = v14;
  }
  return v10 != 0;
}

uint64_t REMaterialParameterBlockValueGetTexture(char *a1, char *a2)
{
  if (a1) {
    uint64_t v3 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1)
  {
    uint64_t v5 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::textureValue(v3, a2, (uint64_t)v9);
  if (!v9[0]) {
    return 0;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v10);
  uint64_t v6 = v8[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  if (v9[0]) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  return v6;
}

void REMaterialParameterBlockValueSetSampler(void *a1, char *a2, void *a3)
{
  id v5 = a3;
  if (a1) {
    uint64_t v6 = (uint64_t)a1 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a1) {
    id v7 = a1;
  }
  id v9 = v5;
  id v8 = v5;
  re::MaterialSamplerData::fromDescriptor(&v9, (uint64_t)v10);
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData((uint64_t)v11, (uint64_t)v10);
  re::ecs2::SerializableMaterialParameterBlock::setSampler(v6, a2, v11);
  if (v5) {

  }
  if (a1) {
}
  }

void REMaterialParameterBlockValueBindTextureToSamplerWithDefaultArray(char *a1, char *a2, char *a3)
{
  if (a1)
  {
    uint64_t v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    id v7 = a1;
    re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(v6, a2, a3);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(0, a2, a3);
  }
}

id REMaterialParameterBlockValueCopySampler(char *a1, char *a2)
{
  if (a1) {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1) {
    id v5 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::samplerValue(v4, a2, (uint64_t)v10);
  if (v10[0])
  {
    re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)&v11, (uint64_t)v8);
    re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v8, &v9);
    id v6 = v9;
    if (v9) {

    }
    if (a1) {
      goto LABEL_10;
    }
  }
  else
  {
    id v6 = 0;
    if (a1) {
LABEL_10:
    }
  }
  return v6;
}

void REMaterialParameterBlockValueUnbindTextureFromSamplers(char *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    id v5 = a1;
    re::ecs2::SerializableMaterialParameterBlock::unbindTextureFromSamplers(v4, a2);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::unbindTextureFromSamplers(0, a2);
  }
}

void REMaterialParameterBlockValueSetUVIndexForTexture(char *a1, char *a2, int a3)
{
  if (a1)
  {
    id v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    id v7 = a1;
    re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(v6, a2, a3);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(0, a2, a3);
  }
}

BOOL REMaterialParameterBlockValueGetUVIndexForTexture(char *a1, char *a2, _DWORD *a3)
{
  if (a1) {
    id v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    id v6 = 0;
  }
  if (a1) {
    id v7 = a1;
  }
  id v8 = (_DWORD *)re::ecs2::SerializableMaterialParameterBlock::tryUVIndexForTexture(v6, a2);
  id v9 = v8;
  if (v8) {
    *a3 = *v8;
  }
  if (a1) {

  }
  return v9 != 0;
}

void REMaterialParameterBlockValueClearUVIndexForTexture(char *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    id v5 = a1;
    re::ecs2::SerializableMaterialParameterBlock::clearUVIndexForTexture(v4, a2);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::clearUVIndexForTexture(0, a2);
  }
}

uint64_t REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex(char *a1)
{
  if (a1)
  {
    uint64_t v3 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    uint64_t v4 = a1;
    uint64_t v5 = re::ecs2::SerializableMaterialParameterBlock::numberOfTexturesWithNonZeroUVIndex(v3);

    return v5;
  }
  else
  {
    return re::ecs2::SerializableMaterialParameterBlock::numberOfTexturesWithNonZeroUVIndex(0);
  }
}

uint64_t REMaterialParameterBlockValueGetSamplerNameBoundToTexture(char *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    uint64_t v5 = a1;
    uint64_t SamplerNameBoundToTexture = re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(v4, a2);

    return SamplerNameBoundToTexture;
  }
  else
  {
    return re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(0, a2);
  }
}

void REMaterialParameterBlockValueAddHashedPassTechniqueMapping(char *a1, char *__s, uint64_t a3)
{
  void v9[2] = *MEMORY[0x263EF8340];
  if (a1) {
    id v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    id v6 = 0;
  }
  if (a1) {
    id v7 = a1;
  }
  size_t v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v9);
    size_t v8 = (v9[1] + (v9[0] << 6) + (v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
  }
  re::ecs2::SerializableMaterialParameterBlock::addPassTechniqueMapping(v6, v8, a3);
  if (a1) {
}
  }

BOOL REMaterialParameterBlockValueGetPassTechniqueMapping(char *a1, char *__s, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1) {
    id v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    id v6 = 0;
  }
  if (a1) {
    id v7 = a1;
  }
  size_t v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, &v11);
    size_t v8 = (v12 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583E9) ^ v11;
  }
  re::ecs2::SerializableMaterialParameterBlock::tryGetPassTechniqueMapping(v6, v8, (uint64_t)&v11);
  int v9 = v11;
  if ((_BYTE)v11) {
    *a3 = v12;
  }
  if (a1) {

  }
  return v9 != 0;
}

void REMaterialParameterBlockValueRemovePassTechniqueMapping(char *a1, char *__s)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  if (a1) {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1) {
    uint64_t v5 = a1;
  }
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v7);
    size_t v6 = (v7[1] + (v7[0] << 6) + (v7[0] >> 2) - 0x61C8864680B583E9) ^ v7[0];
  }
  re::ecs2::SerializableMaterialParameterBlock::markPassTechniqueMappingRemoved(v4, v6);
  if (a1) {
}
  }

id REMaterialParameterBlockValueCopyParameterNameArray(char *a1)
{
  if (a1) {
    id v2 = a1 - 8;
  }
  else {
    id v2 = 0;
  }
  if (a1) {
    uint64_t v3 = a1;
  }
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:*((unsigned int *)v2 + 83)];
  uint64_t v5 = *((unsigned int *)v2 + 84);
  if (v5)
  {
    uint64_t v6 = 0;
    id v7 = (_DWORD *)*((void *)v2 + 40);
    while ((*v7 & 0x80000000) == 0)
    {
      v7 += 80;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)v2 + 84);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 != v6)
  {
    uint64_t v8 = v6;
    do
    {
      int v9 = (void *)[[NSString alloc] initWithCString:*(void *)(*((void *)v2 + 40) + 320 * v8 + 16) encoding:1];
      [v4 addObject:v9];

      unsigned int v10 = *((_DWORD *)v2 + 84);
      if (v10 <= (int)v6 + 1) {
        unsigned int v10 = v6 + 1;
      }
      int v11 = v6;
      while (1)
      {
        uint64_t v8 = (v11 + 1);
        if (v10 - 1 == v11) {
          break;
        }
        ++v11;
        LODWORD(v6) = v8;
        if ((*(_DWORD *)(*((void *)v2 + 40) + 320 * v8) & 0x80000000) != 0) {
          goto LABEL_21;
        }
      }
      LODWORD(v6) = v10;
LABEL_21:
      ;
    }
    while (v5 != v6);
  }
  if (a1) {

  }
  return v4;
}

unsigned __int8 *REMaterialParameterBlockValueGetTypeForParameter(char *a1, const char *a2)
{
  uint64_t v3 = a1;
  if (a1) {
    uint64_t v4 = a1 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1) {
    a1 = a1;
  }
  v7[0] = 0;
  v7[1] = "";
  uint64_t v5 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v4 + 304), v7);
  re::StringID::destroyString((re::StringID *)v7);
  if (v5) {
    uint64_t v5 = (unsigned __int8 *)re::convert(*v5);
  }
  if (v3) {

  }
  return v5;
}

void REMaterialParameterBlockValueSetSwizzleForTexture(char *a1, const char *a2, int a3)
{
  if (a1)
  {
    uint64_t v6 = (_anonymous_namespace_ *)(a1 - 8);
    id v7 = a1;
    re::ecs2::SerializableMaterialParameterBlock::setSwizzleForTexture(v6, a2, a3);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::setSwizzleForTexture(0, a2, a3);
  }
}

BOOL REMaterialParameterBlockValueGetSwizzleForTexture(char *a1, char *a2, _DWORD *a3)
{
  if (a1) {
    uint64_t v6 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
  }
  else {
    uint64_t v6 = 0;
  }
  if (a1) {
    id v7 = a1;
  }
  re::ecs2::SerializableMaterialParameterBlock::swizzleForTexture(v6, a2, (uint64_t)&v10);
  int v8 = v10;
  if (v10) {
    *a3 = v11;
  }
  if (a1) {

  }
  return v8 != 0;
}

void REMaterialParameterBlockValueClearSwizzleForTexture(char *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = (re::ecs2::SerializableMaterialParameterBlock *)(a1 - 8);
    uint64_t v5 = a1;
    re::ecs2::SerializableMaterialParameterBlock::clearSwizzleForTexture(v4, a2);
  }
  else
  {
    re::ecs2::SerializableMaterialParameterBlock::clearSwizzleForTexture(0, a2);
  }
}

void *REDynamicLightShadowComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REDynamicLightShadowComponentSetCastsShadow(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDynamicLightShadowComponentGetCastsShadow(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

void *REEntityCopyTextureMetrics(re *a1)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  id v2 = re::globalAllocators(a1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 2112, 16);
  bzero(v3, 0x840uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *uint64_t v3 = &unk_26E7361C8;
  v3[4] = 0;
  v3[5] = 0;
  *((_DWORD *)v3 + 12) = 1;
  _WORD v3[8] = 0;
  v138 = v3 + 8;
  v3[9] = 0;
  unsigned int v145 = 0;
  long long v143 = 0u;
  long long v144 = 0u;
  uint64_t v146 = 0x7FFFFFFFLL;
  if (a1)
  {
    uint64_t v6 = (id)*re::graphicsLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v129 = *((void *)a1 + 35);
      *(_DWORD *)v154 = 136315138;
      *(void *)&v154[4] = v129;
      _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "TextureMetrics: Copying Texture Metrics for entity \"%s\"", v154, 0xCu);
    }

    v134 = (void *)*((void *)a1 + 22);
    if (v134)
    {
      v142 = a1;
      uint64_t v8 = *((void *)a1 + 24);
      int v9 = *re::graphicsLogObjects(v7);
      v135 = v3 + 4;
      v136 = v3;
      if (v8)
      {
        unsigned __int8 v10 = v9;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v133 = *(void *)(v8 + 48);
          *(_DWORD *)v154 = 134218240;
          *(void *)&v154[4] = v8;
          *(_WORD *)&v154[12] = 2048;
          *(void *)&v154[14] = v133;
          _os_log_debug_impl(&dword_233120000, v10, OS_LOG_TYPE_DEBUG, "TextureMetrics: MaterialParameterBlockArrayComponent found! mpbac=%p, %zu block handle(s)", v154, 0x16u);
        }

        uint64_t v12 = *(void *)(v8 + 48);
        if (v12)
        {
          uint64_t v13 = *(uint64_t **)(v8 + 64);
          v139 = &v13[3 * v12];
          do
          {
            char v14 = (id)*re::graphicsLogObjects((re *)v11);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v34 = *v13;
              if (!*v13) {
                uint64_t v34 = v13[1];
              }
              int v35 = *(_DWORD *)(v34 + 332);
              *(_DWORD *)v154 = 67109120;
              *(_DWORD *)&v154[4] = v35;
              _os_log_debug_impl(&dword_233120000, v14, OS_LOG_TYPE_DEBUG, "TextureMetrics: blockHandle has %u parameter(s)", v154, 8u);
            }

            uint64_t v15 = *v13;
            if (!*v13) {
              uint64_t v15 = v13[1];
            }
            uint64_t v16 = *(unsigned int *)(v15 + 336);
            if (v16)
            {
              uint64_t v17 = 0;
              __int16 v18 = *(_DWORD **)(v15 + 320);
              while ((*v18 & 0x80000000) == 0)
              {
                v18 += 80;
                if (v16 == ++v17)
                {
                  LODWORD(v17) = *(_DWORD *)(v15 + 336);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v17) = 0;
            }
            if (v16 != v17)
            {
              uint64_t v19 = v17;
              do
              {
                uint64_t v20 = *(void *)(v15 + 320);
                uint64_t v21 = v20 + 320 * v19;
                int v23 = *(unsigned __int8 *)(v21 + 32);
                long long v22 = (unsigned __int8 *)(v21 + 32);
                if (v23 == 64)
                {
                  long long v24 = re::AssetHandle::AssetHandle((re::AssetHandle *)v154, (const re::AssetHandle *)(v22 + 80));
                  uint64_t v25 = re::AssetHandle::loadedAsset<re::TextureAsset>(v24);
                  if (v25)
                  {
                    saveMetrics((uint64_t)&v143, (uint64_t *)v154, v25, *(const char **)(v20 + 320 * v19 + 16));
                  }
                  else
                  {
                    unint64_t v27 = (id)*re::graphicsLogObjects(0);
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                    {
                      long long v28 = (const char *)*((void *)v142 + 35);
                      uint64_t v29 = *(void *)(v20 + 320 * v19 + 16);
                      *(_DWORD *)long long buf = 136315394;
                      v149 = v28;
                      __int16 v150 = 2080;
                      *(void *)v151 = v29;
                      _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\") with an unloaded TextureAsset (\"%s\")", buf, 0x16u);
                    }
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v154);
                }
                else
                {
                  __int16 v26 = (id)*re::graphicsLogObjects((re *)v11);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v32 = *(void *)(v20 + 320 * v19 + 16);
                    int v33 = *v22;
                    *(_DWORD *)v154 = 136315394;
                    *(void *)&v154[4] = v32;
                    *(_WORD *)&v154[12] = 1024;
                    *(_DWORD *)&v154[14] = v33;
                    _os_log_debug_impl(&dword_233120000, v26, OS_LOG_TYPE_DEBUG, "TextureMetrics: parameter \"%s\" has type %u", v154, 0x12u);
                  }
                }
                unsigned int v30 = *(_DWORD *)(v15 + 336);
                if (v30 <= (int)v17 + 1) {
                  unsigned int v30 = v17 + 1;
                }
                while (1)
                {
                  uint64_t v19 = (v17 + 1);
                  if (v30 - 1 == v17) {
                    break;
                  }
                  LODWORD(v17) = v17 + 1;
                  unsigned int v31 = v19;
                  if ((*(_DWORD *)(*(void *)(v15 + 320) + 320 * v19) & 0x80000000) != 0) {
                    goto LABEL_39;
                  }
                }
                unsigned int v31 = v30;
LABEL_39:
                LODWORD(v17) = v31;
              }
              while (v16 != v31);
            }
            v13 += 3;
          }
          while (v13 != v139);
        }
      }
      else
      {
        BOOL v11 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
        if (v11)
        {
          *(_WORD *)v154 = 0;
          _os_log_debug_impl(&dword_233120000, v9, OS_LOG_TYPE_DEBUG, "TextureMetrics: MaterialParameterBlockArrayComponent NOT found, skipping", v154, 2u);
        }
      }
      long long v39 = (id)*re::graphicsLogObjects((re *)v11);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v130 = v134[9];
        *(_DWORD *)v154 = 134217984;
        *(void *)&v154[4] = v130;
        _os_log_debug_impl(&dword_233120000, v39, OS_LOG_TYPE_DEBUG, "TextureMetrics: meshComponent->materials has %zu material(s)", v154, 0xCu);
      }

      uint64_t v41 = v134[9];
      if (v41)
      {
        uint64_t v42 = 0;
        int v43 = (re::MaterialAsset *)v134[11];
        v137 = (re::MaterialAsset *)((char *)v43 + 24 * v41);
        do
        {
          long long v44 = (id)*re::graphicsLogObjects((re *)v40);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v154 = 134217984;
            *(void *)&v154[4] = v42;
            _os_log_debug_impl(&dword_233120000, v44, OS_LOG_TYPE_DEBUG, "TextureMetrics: Looking at meshComponent->materials[%zu]", v154, 0xCu);
          }

          uint64_t v45 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v43);
          uint64_t v46 = *re::graphicsLogObjects((re *)v45);
          uint64_t v140 = v42;
          if (v45)
          {
            int v47 = v46;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              int v85 = *(_DWORD *)(v45 + 188);
              *(_DWORD *)v154 = 67109120;
              *(_DWORD *)&v154[4] = v85;
              _os_log_debug_impl(&dword_233120000, v47, OS_LOG_TYPE_DEBUG, "TextureMetrics: material->materialFile.parameters.textures has %u texture(s)", v154, 8u);
            }

            uint64_t v49 = *(unsigned int *)(v45 + 192);
            if (v49)
            {
              uint64_t v50 = 0;
              int v51 = (int *)(*(void *)(v45 + 176) + 8);
              while (1)
              {
                int v52 = *v51;
                v51 += 22;
                if (v52 < 0) {
                  break;
                }
                if (v49 == ++v50)
                {
                  LODWORD(v50) = *(_DWORD *)(v45 + 192);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v50) = 0;
            }
            if (v49 != v50)
            {
              uint64_t v56 = v50;
              do
              {
                uint64_t v57 = *(void *)(v45 + 176);
                uint64_t v58 = v57 + 88 * v56;
                uint64_t v59 = v58 + 16;
                if (*(_DWORD *)(v58 + 80) == 1)
                {
                  uint64_t v60 = (uint64_t *)(v58 + 48);
                  uint64_t v61 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v58 + 48));
                  if (v61)
                  {
                    if (*(unsigned char *)(v57 + 88 * v56 + 24)) {
                      uint64_t v62 = *(const char **)(v57 + 88 * v56 + 32);
                    }
                    else {
                      uint64_t v62 = (const char *)(v59 + 9);
                    }
                    uint64_t v48 = (re *)saveMetrics((uint64_t)&v143, v60, v61, v62);
                    goto LABEL_87;
                  }
                  uint64_t v63 = (id)*re::graphicsLogObjects(0);
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    if (*(unsigned char *)(v57 + 88 * v56 + 24)) {
                      uint64_t v64 = *(void *)(v57 + 88 * v56 + 32);
                    }
                    else {
                      uint64_t v64 = v59 + 9;
                    }
LABEL_85:
                    uint64_t v65 = *((void *)v142 + 35);
                    *(_DWORD *)v154 = 136315394;
                    *(void *)&v154[4] = v65;
                    *(_WORD *)&v154[12] = 2080;
                    *(void *)&v154[14] = v64;
                    _os_log_impl(&dword_233120000, v63, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\") with an unloaded TextureAsset (\"%s\")", v154, 0x16u);
                  }
                }
                else
                {
                  uint64_t v63 = (id)*re::graphicsLogObjects(v48);
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    if (*(unsigned char *)(v57 + 88 * v56 + 24)) {
                      uint64_t v64 = *(void *)(v57 + 88 * v56 + 32);
                    }
                    else {
                      uint64_t v64 = v59 + 9;
                    }
                    goto LABEL_85;
                  }
                }

LABEL_87:
                unsigned int v66 = *(_DWORD *)(v45 + 192);
                if (v66 <= (int)v50 + 1) {
                  unsigned int v66 = v50 + 1;
                }
                while (1)
                {
                  uint64_t v56 = (v50 + 1);
                  if (v66 - 1 == v50) {
                    break;
                  }
                  LODWORD(v50) = v50 + 1;
                  unsigned int v67 = v56;
                  if ((*(_DWORD *)(*(void *)(v45 + 176) + 88 * v56 + 8) & 0x80000000) != 0) {
                    goto LABEL_93;
                  }
                }
                unsigned int v67 = v66;
LABEL_93:
                LODWORD(v50) = v67;
              }
              while (v49 != v67);
            }
            char v68 = (id)*re::graphicsLogObjects(v48);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              int v86 = *(_DWORD *)(v45 + 236);
              *(_DWORD *)v154 = 67109120;
              *(_DWORD *)&v154[4] = v86;
              _os_log_debug_impl(&dword_233120000, v68, OS_LOG_TYPE_DEBUG, "TextureMetrics: material->materialFile.parameters.textureBlocks has %u texture(s)", v154, 8u);
            }

            uint64_t v69 = *(unsigned int *)(v45 + 240);
            if (v69)
            {
              uint64_t v70 = 0;
              uint64_t v71 = (int *)(*(void *)(v45 + 224) + 8);
              while (1)
              {
                int v72 = *v71;
                v71 += 40;
                if (v72 < 0) {
                  break;
                }
                if (v69 == ++v70)
                {
                  LODWORD(v70) = *(_DWORD *)(v45 + 240);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v70) = 0;
            }
            if (v69 != v70)
            {
              uint64_t v73 = v70;
              do
              {
                uint64_t v74 = *(void *)(v45 + 224);
                uint64_t v75 = v74 + 160 * v73;
                uint64_t v76 = v75 + 16;
                if (*(_DWORD *)(v75 + 80) == 1)
                {
                  int v77 = (uint64_t *)(v75 + 48);
                  uint64_t v78 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v75 + 48));
                  if (v78)
                  {
                    if (*(unsigned char *)(v74 + 160 * v73 + 24)) {
                      unint64_t v79 = *(const char **)(v74 + 160 * v73 + 32);
                    }
                    else {
                      unint64_t v79 = (const char *)(v76 + 9);
                    }
                    uint64_t v40 = saveMetrics((uint64_t)&v143, v77, v78, v79);
                    goto LABEL_120;
                  }
                  id v80 = (id)*re::graphicsLogObjects(0);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    if (*(unsigned char *)(v74 + 160 * v73 + 24)) {
                      uint64_t v81 = *(void *)(v74 + 160 * v73 + 32);
                    }
                    else {
                      uint64_t v81 = v76 + 9;
                    }
LABEL_118:
                    uint64_t v82 = *((void *)v142 + 35);
                    *(_DWORD *)v154 = 136315394;
                    *(void *)&v154[4] = v82;
                    *(_WORD *)&v154[12] = 2080;
                    *(void *)&v154[14] = v81;
                    _os_log_impl(&dword_233120000, v80, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\") with an unloaded TextureAsset (\"%s\")", v154, 0x16u);
                  }
                }
                else
                {
                  id v80 = (id)*re::graphicsLogObjects((re *)v40);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    if (*(unsigned char *)(v74 + 160 * v73 + 24)) {
                      uint64_t v81 = *(void *)(v74 + 160 * v73 + 32);
                    }
                    else {
                      uint64_t v81 = v76 + 9;
                    }
                    goto LABEL_118;
                  }
                }

LABEL_120:
                unsigned int v83 = *(_DWORD *)(v45 + 240);
                if (v83 <= (int)v70 + 1) {
                  unsigned int v83 = v70 + 1;
                }
                while (1)
                {
                  uint64_t v73 = (v70 + 1);
                  if (v83 - 1 == v70) {
                    break;
                  }
                  LODWORD(v70) = v70 + 1;
                  unsigned int v84 = v73;
                  if ((*(_DWORD *)(*(void *)(v45 + 224) + 160 * v73 + 8) & 0x80000000) != 0) {
                    goto LABEL_126;
                  }
                }
                unsigned int v84 = v83;
LABEL_126:
                LODWORD(v70) = v84;
              }
              while (v69 != v84);
            }
          }
          else
          {
            uint64_t v40 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
            if (v40)
            {
              long long v53 = v46;
              uint64_t v54 = (const char *)*((void *)v142 + 35);
              re::AssetHandle::getDescription(v43, 1, (re::DynamicString *)v154);
              long long v55 = &v154[9];
              if (v154[8]) {
                long long v55 = *(uint8_t **)&v154[16];
              }
              *(_DWORD *)long long buf = 136315394;
              v149 = v54;
              __int16 v150 = 2080;
              *(void *)v151 = v55;
              _os_log_impl(&dword_233120000, v53, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\") with an unloaded TextureAsset (\"%s\")", buf, 0x16u);

              uint64_t v40 = *(void *)v154;
              if (*(void *)v154 && (v154[8] & 1) != 0) {
                uint64_t v40 = (*(uint64_t (**)(void))(**(void **)v154 + 40))();
              }
            }
          }
          uint64_t v42 = v140 + 1;
          int v43 = (re::MaterialAsset *)((char *)v43 + 24);
        }
        while (v43 != v137);
      }
      uint64_t v87 = (id)*re::graphicsLogObjects((re *)v40);
      uint64_t v3 = v136;
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v131 = v134[15];
        *(_DWORD *)v154 = 134217984;
        *(void *)&v154[4] = v131;
        _os_log_debug_impl(&dword_233120000, v87, OS_LOG_TYPE_DEBUG, "TextureMetrics: meshComponent->materialParameters has %zu material parameter(s) (but we're skipping them)", v154, 0xCu);
      }

      unsigned int v141 = v145;
      uint64_t v89 = 0;
      if (v145)
      {
        uint64_t v90 = (_DWORD *)(v144 + 8);
        while ((*v90 & 0x80000000) == 0)
        {
          v90 += 148;
          if (v145 == ++v89)
          {
            LODWORD(v89) = v145;
            break;
          }
        }
      }
      if (v145 == v89)
      {
LABEL_136:
        if (!HIDWORD(v144))
        {
          int v91 = (id)*re::graphicsLogObjects(v88);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v92 = *((void *)v142 + 35);
            *(_DWORD *)v154 = 136315138;
            *(void *)&v154[4] = v92;
            _os_log_impl(&dword_233120000, v91, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\"), but we found no textures", v154, 0xCu);
          }
        }
        long long v37 = (id)*re::graphicsLogObjects(v88);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v132 = *((void *)v142 + 35);
          *(_DWORD *)v154 = 136315138;
          *(void *)&v154[4] = v132;
          _os_log_debug_impl(&dword_233120000, v37, OS_LOG_TYPE_DEBUG, "TextureMetrics: Done w/ entity %s", v154, 0xCu);
        }
        goto LABEL_142;
      }
      uint64_t v94 = v89;
      uint64_t v95 = v144;
      while (1)
      {
        uint64_t v96 = v95 + 592 * v94;
        long long v97 = (id)*re::graphicsLogObjects(v88);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          if (*(unsigned char *)(v95 + 592 * v94 + 24)) {
            uint64_t v127 = *(void *)(v95 + 592 * v94 + 32);
          }
          else {
            uint64_t v127 = v96 + 25;
          }
          uint64_t v128 = *(void *)(v95 + 592 * v94 + 56);
          *(_DWORD *)v154 = 136315394;
          *(void *)&v154[4] = v127;
          *(_WORD *)&v154[12] = 2048;
          *(void *)&v154[14] = v128;
          _os_log_debug_impl(&dword_233120000, v97, OS_LOG_TYPE_DEBUG, "TextureMetrics: PerTextureMetrics for \"%s\", found %zu textures:", v154, 0x16u);
        }
        uint64_t v98 = v96 + 48;

        uint64_t v100 = v95 + 592 * v94;
        char v102 = *(unsigned char *)(v100 + 64);
        long long v101 = (unsigned char *)(v100 + 64);
        if (v102) {
          uint64_t v103 = v95 + 592 * v94 + 80;
        }
        else {
          uint64_t v103 = *(void *)(v98 + 40);
        }
        uint64_t v104 = v95 + 592 * v94;
        uint64_t v107 = *(void *)(v104 + 56);
        long long v106 = (void *)(v104 + 56);
        uint64_t v105 = v107;
        if (!v107) {
          goto LABEL_189;
        }
        uint64_t v108 = v105 << 6;
        uint64_t v109 = (void *)(v103 + 48);
        do
        {
          uint64_t v110 = (id)*re::graphicsLogObjects(v99);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
          {
            if (*(unsigned char *)(v109 - 1)) {
              uint64_t v111 = (char *)*v109;
            }
            else {
              uint64_t v111 = (char *)v109 - 7;
            }
            long long v112 = *((_OWORD *)v109 - 2);
            uint64_t v113 = *(v109 - 6);
            *(_DWORD *)v154 = 136315906;
            *(void *)&v154[4] = v111;
            *(_WORD *)&v154[12] = 1024;
            *(_DWORD *)&v154[14] = v112;
            *(_WORD *)&v154[18] = 1024;
            *(_DWORD *)&v154[20] = DWORD1(v112);
            *(_WORD *)&v154[24] = 2048;
            *(void *)&v154[26] = v113;
            _os_log_debug_impl(&dword_233120000, v110, OS_LOG_TYPE_DEBUG, "TextureMetrics:     \"%s\": %u x %u, %zu bytes", v154, 0x22u);
          }

          v109 += 8;
          v108 -= 64;
        }
        while (v108);
        if (!*v106)
        {
LABEL_189:
          uint64_t v147 = 0;
          long long v155 = 0u;
          long long v156 = 0u;
          memset(v154, 0, sizeof(v154));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long buf = 136315906;
          v149 = "operator[]";
          __int16 v150 = 1024;
          *(_DWORD *)v151 = 858;
          *(_WORD *)&v151[4] = 2048;
          *(void *)&v151[6] = 0;
          __int16 v152 = 2048;
          uint64_t v153 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (*v101) {
          uint64_t v114 = (_OWORD *)(v95 + 592 * v94 + 80);
        }
        else {
          uint64_t v114 = *(_OWORD **)(v98 + 40);
        }
        uint64_t v3 = v136;
        if (!*v135)
        {
          unint64_t v120 = v136[5] + 1;
          re::DynamicOverflowArray<PerTextureMetrics,32ul>::setCapacity(v135, v120);
          int v116 = *((_DWORD *)v136 + 12) + 2;
          *((_DWORD *)v136 + 12) = v116;
          goto LABEL_174;
        }
        unint64_t v115 = v136[5];
        int v116 = *((_DWORD *)v136 + 12);
        if (v116)
        {
          if (v115 - 32 >= 0xFFFFFFFFFFFFFFDFLL) {
            goto LABEL_174;
          }
          unint64_t v118 = v115 + 1;
          unint64_t v119 = 64;
        }
        else
        {
          unint64_t v117 = *v138;
          if (v115 < *v138) {
            goto LABEL_174;
          }
          unint64_t v118 = v115 + 1;
          if (v117 >= v118) {
            goto LABEL_174;
          }
          unint64_t v119 = 2 * v117;
        }
        if (v119 <= v118) {
          unint64_t v121 = v118;
        }
        else {
          unint64_t v121 = v119;
        }
        re::DynamicOverflowArray<PerTextureMetrics,32ul>::setCapacity(v135, v121);
        int v116 = *((_DWORD *)v136 + 12);
LABEL_174:
        v122 = v138;
        if ((v116 & 1) == 0) {
          v122 = (unint64_t *)v136[9];
        }
        v123 = &v122[8 * v136[5]];
        long long v124 = v114[1];
        *(_OWORD *)v123 = *v114;
        *((_OWORD *)v123 + 1) = v124;
        uint64_t v88 = re::DynamicString::DynamicString((re::DynamicString *)(v123 + 4), (const re::DynamicString *)(v114 + 2));
        ++v136[5];
        *((_DWORD *)v136 + 12) += 2;
        uint64_t v95 = v144;
        if (v145 <= (int)v89 + 1) {
          unsigned int v125 = v89 + 1;
        }
        else {
          unsigned int v125 = v145;
        }
        while (1)
        {
          uint64_t v94 = (v89 + 1);
          if (v125 - 1 == v89) {
            break;
          }
          LODWORD(v89) = v89 + 1;
          unsigned int v126 = v94;
          if ((*(_DWORD *)(v144 + 592 * v94 + 8) & 0x80000000) != 0) {
            goto LABEL_183;
          }
        }
        unsigned int v126 = v125;
LABEL_183:
        LODWORD(v89) = v126;
        if (v141 == v126) {
          goto LABEL_136;
        }
      }
    }
    long long v36 = *re::graphicsLogObjects(v7);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      long long v37 = v36;
      uint64_t v38 = *((void *)a1 + 35);
      *(_DWORD *)v154 = 136315138;
      *(void *)&v154[4] = v38;
      _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "TextureMetrics: Metrics were requested for an entity (\"%s\") with no mesh component - maybe you meant to call this on a child?", v154, 0xCu);
LABEL_142:
    }
  }
  re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v143);
  return v3 + 1;
}

uint64_t saveMetrics(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    id v8 = (id)(*a2 + 8);
    uint64_t v9 = *a2;
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFStringRef v10 = REAssetHandleCopyAssetIdentifierString(v9);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v10, 0x600u);
  if (CStringPtr) {
    uint64_t v12 = (const char *)CStringPtr;
  }
  else {
    uint64_t v12 = "";
  }
  char v14 = *re::graphicsLogObjects(v13);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v15)
  {
    if (v47) {
      uint64_t v40 = *(unsigned char **)&v48[7];
    }
    else {
      uint64_t v40 = v48;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v40;
    _os_log_debug_impl(&dword_233120000, v14, OS_LOG_TYPE_DEBUG, "TextureMetrics: Saving w/ name=\"%s\"", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long v43 = 0;
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  re::DynamicString::setCapacity(v45, 0);
  *(void *)&long long v16 = *(void *)(a3 + 360);
  DWORD2(v16) = *(_DWORD *)(a3 + 368);
  long long v44 = v16;
  uint64_t v17 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(a2[1] + 24) + 1040), *(void *)(a2[1] + 264));
  *(void *)&long long v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a3);
  __int16 v18 = re::DynamicString::operator=((re::DynamicString *)v45, (re::DynamicString *)&v46);
  long long buf = 0uLL;
  int v51 = 1;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v19 = re::Hash<re::DynamicString>::operator()((uint64_t)&v49, (uint64_t)&v41);
  unint64_t v20 = v19;
  if (!*(void *)a1)
  {
    LODWORD(v21) = 0;
    goto LABEL_15;
  }
  unint64_t v21 = v19 % *(unsigned int *)(a1 + 24);
  uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v21);
  if (v22 == 0x7FFFFFFF)
  {
LABEL_15:
    unsigned int v24 = re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v21, v20, (const re::DynamicString *)&v41, (uint64_t)&buf);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v25 = *(void *)(a1 + 16) + 592 * v24;
    goto LABEL_16;
  }
  uint64_t v23 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v23 + 592 * v22 + 16, (uint64_t)&v41))
  {
    uint64_t v22 = *(_DWORD *)(v23 + 592 * v22 + 8) & 0x7FFFFFFF;
    if (v22 == 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
  uint64_t v25 = v23 + 592 * v22;
LABEL_16:
  uint64_t v26 = v25 + 48;
  re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit(&buf);
  unint64_t v27 = v41;
  if (v41 && (v42 & 1) != 0) {
    unint64_t v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v41 + 40))();
  }
  if (!*(void *)v26)
  {
    unint64_t v34 = *(void *)(v26 + 8) + 1;
    re::DynamicOverflowArray<PerTextureMetrics,8ul>::setCapacity((void *)v26, v34);
    int v29 = *(_DWORD *)(v26 + 16) + 2;
    *(_DWORD *)(v26 + 16) = v29;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v26 + 8);
  int v29 = *(_DWORD *)(v26 + 16);
  if (v29)
  {
    if (v28 - 8 >= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_33;
    }
    unint64_t v31 = v28 + 1;
    unint64_t v33 = 16;
    goto LABEL_29;
  }
  unint64_t v30 = *(void *)(v26 + 32);
  BOOL v32 = v28 >= v30;
  unint64_t v31 = v28 + 1;
  BOOL v32 = !v32 || v30 >= v31;
  if (!v32)
  {
    unint64_t v33 = 2 * v30;
LABEL_29:
    if (v33 <= v31) {
      unint64_t v35 = v31;
    }
    else {
      unint64_t v35 = v33;
    }
    re::DynamicOverflowArray<PerTextureMetrics,8ul>::setCapacity((void *)v26, v35);
    int v29 = *(_DWORD *)(v26 + 16);
  }
LABEL_33:
  if (v29) {
    uint64_t v36 = v26 + 32;
  }
  else {
    uint64_t v36 = *(void *)(v26 + 40);
  }
  long long v37 = (_OWORD *)(v36 + (*(void *)(v26 + 8) << 6));
  long long v38 = v44;
  *long long v37 = v43;
  v37[1] = v38;
  re::DynamicString::DynamicString((re::DynamicString *)(v37 + 2), (const re::DynamicString *)v45);
  ++*(void *)(v26 + 8);
  *(_DWORD *)(v26 + 16) += 2;
  if (v10) {
    CFRelease(v10);
  }
  if (*(void *)&v45[0] && (BYTE8(v45[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v45[0] + 40))();
  }
  uint64_t result = v46;
  if (v46)
  {
    if (v47) {
      return (*(uint64_t (**)(void))(*(void *)v46 + 40))();
    }
  }
  return result;
}

uint64_t REEntityTextureMetricsGetTexturesCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

__CFString *REEntityTextureMetricsCopyNthTextureAssetId(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 32) <= a2)
    {
      uint64_t v4 = &stru_26E738380;
    }
    else
    {
      if (*(unsigned char *)(a1 + 40)) {
        uint64_t v3 = a1 + 56;
      }
      else {
        uint64_t v3 = *(void *)(a1 + 64);
      }
      uint64_t v6 = v3 + (a2 << 6);
      if (*(unsigned char *)(v6 + 40)) {
        uint64_t v7 = *(void *)(v6 + 48);
      }
      else {
        uint64_t v7 = v6 + 41;
      }
      uint64_t v4 = [NSString stringWithUTF8String:v7];
    }
  }
  else
  {
    uint64_t v4 = &stru_26E738380;
  }
  return v4;
}

uint64_t REEntityTextureMetricsGetNthTextureByteSize(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 32) <= a2)
    {
      return 0;
    }
    else
    {
      if (*(unsigned char *)(result + 40)) {
        uint64_t v2 = result + 56;
      }
      else {
        uint64_t v2 = *(void *)(result + 64);
      }
      return *(void *)(v2 + (a2 << 6));
    }
  }
  return result;
}

__n128 REEntityTextureMetricsGetNthTextureDimensions(uint64_t a1, unint64_t a2)
{
  result.n128_u64[0] = 0;
  if (a1 && *(void *)(a1 + 32) > a2)
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v3 = a1 + 56;
    }
    else {
      uint64_t v3 = *(void *)(a1 + 64);
    }
    return *(__n128 *)(v3 + (a2 << 6) + 16);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v60, 0, 36);
          *(void *)&v60[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v60, v13, v12);
          long long v15 = *(_OWORD *)v60;
          *(_OWORD *)uint64_t v60 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v60[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v60[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v60[24];
          *(_OWORD *)&v60[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v60[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 48;
            do
            {
              if ((*(_DWORD *)(v21 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v21 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 48), v21 - 32, v21);
              }
              v21 += 592;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v60);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 592 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 592 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  uint64_t v25 = 592 * v9;
  *(_DWORD *)(v22 + v25 + 8) = v23 | 0x80000000;
  uint64_t v26 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v25) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v25 + 16), a4);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v27 + 592 * v9;
  *(void *)(v28 + 48) = 0;
  uint64_t v29 = v28 + 48;
  *(_DWORD *)(v29 + 16) = 1;
  unint64_t v30 = (int *)(v29 + 16);
  *(void *)(v29 + 8) = 0;
  *(void *)(v29 + 32) = 0;
  unint64_t v31 = (uint64_t *)(v29 + 32);
  *(void *)(v29 + 40) = 0;
  if (*(unsigned char *)(a5 + 16))
  {
    unint64_t v37 = *(void *)(a5 + 8);
    if (v37)
    {
      uint64_t v59 = v26;
      *(void *)uint64_t v29 = *(void *)a5;
      uint64_t v38 = v27 + 592 * v9;
      re::DynamicOverflowArray<PerTextureMetrics,8ul>::setCapacity((void *)v29, v37);
      uint64_t v41 = *(void *)(v38 + 56);
      uint64_t v40 = (unint64_t *)(v38 + 56);
      uint64_t v39 = v41;
      uint64_t v42 = a5 + 32;
      if (*(unsigned char *)(a5 + 16)) {
        uint64_t v43 = a5 + 32;
      }
      else {
        uint64_t v43 = *(void *)(a5 + 40);
      }
      int v44 = *v30;
      uint64_t v45 = v29 + 32;
      if ((*v30 & 1) == 0) {
        uint64_t v45 = *(void *)(v29 + 40);
      }
      if (v39)
      {
        uint64_t v46 = (re::DynamicString *)(v45 + 32);
        uint64_t v47 = v39 << 6;
        uint64_t v48 = (re::DynamicString *)(v43 + 32);
        do
        {
          long long v49 = *((_OWORD *)v48 - 1);
          *((_OWORD *)v46 - 2) = *((_OWORD *)v48 - 2);
          *((_OWORD *)v46 - 1) = v49;
          uint64_t v46 = (re::DynamicString *)((char *)re::DynamicString::operator=(v46, v48) + 64);
          uint64_t v48 = (re::DynamicString *)((char *)v48 + 64);
          v47 -= 64;
        }
        while (v47);
        int v44 = *v30;
        uint64_t v42 = a5 + 32;
      }
      if ((v44 & 1) == 0) {
        unint64_t v31 = *(uint64_t **)(v29 + 40);
      }
      unint64_t v50 = *v40;
      if (*(unsigned char *)(a5 + 16)) {
        uint64_t v51 = v42;
      }
      else {
        uint64_t v51 = *(void *)(a5 + 40);
      }
      if (v50 != v37)
      {
        unint64_t v52 = v51 + (v37 << 6);
        unint64_t v53 = v51 + (v50 << 6);
        uint64_t v54 = &v31[8 * v50];
        do
        {
          long long v55 = *(_OWORD *)(v53 + 16);
          *(_OWORD *)uint64_t v54 = *(_OWORD *)v53;
          *((_OWORD *)v54 + 1) = v55;
          *((_OWORD *)v54 + 2) = 0uLL;
          *((_OWORD *)v54 + 3) = 0uLL;
          int32x4_t v54[4] = *(void *)(v53 + 32);
          *(void *)(v53 + 32) = 0;
          uint64_t v56 = v54[6];
          v54[6] = *(void *)(v53 + 48);
          *(void *)(v53 + 48) = v56;
          v54[7] = *(void *)(v53 + 56);
          *(void *)(v53 + 56) = 0;
          uint64_t v57 = v54[5];
          v54[5] = *(void *)(v53 + 40);
          *(void *)(v53 + 40) = v57;
          v53 += 64;
          v54 += 8;
        }
        while (v53 != v52);
      }
      *uint64_t v40 = v37;
      re::DynamicOverflowArray<PerTextureMetrics,8ul>::clear(a5);
      uint64_t v26 = v59;
    }
    else
    {
      re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)v29);
      *(void *)uint64_t v29 = *(void *)a5;
    }
  }
  else
  {
    re::DynamicOverflowArray<PerTextureMetrics,8ul>::clear(v29);
    uint64_t v32 = *(void *)v29;
    *(void *)uint64_t v29 = *(void *)a5;
    *(void *)a5 = v32;
    uint64_t v33 = v27 + 592 * v9;
    uint64_t v34 = *(void *)(v33 + 56);
    *(void *)(v33 + 56) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v34;
    uint64_t v35 = *(void *)(v29 + 40);
    *(void *)(v29 + 40) = *(void *)(a5 + 40);
    *(void *)(a5 + 40) = v35;
    *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 16) & 0xFFFFFFFE | *v30 & 1;
    *v30 &= ~1u;
    uint64_t v36 = *v31;
    *unint64_t v31 = *(void *)(a5 + 32);
    *(void *)(a5 + 32) = v36;
  }
  *(_DWORD *)(a5 + 16) += 2;
  *v30 += 2;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      if (a1[2]) {
        uint64_t v3 = a1 + 4;
      }
      else {
        uint64_t v3 = (void *)a1[5];
      }
      uint64_t v4 = v2 << 6;
      uint64_t v5 = (re::DynamicString *)(v3 + 4);
      do
      {
        re::DynamicString::deinit(v5);
        uint64_t v5 = (re::DynamicString *)((char *)v5 + 64);
        v4 -= 64;
      }
      while (v4);
    }
    int v6 = *((_DWORD *)a1 + 4);
    if ((v6 & 1) == 0)
    {
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, a1[5]);
      int v6 = *((_DWORD *)a1 + 4);
    }
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = (v6 | 1) + 2;
  }
}

void re::DynamicOverflowArray<PerTextureMetrics,8ul>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v2) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = v2 << 6;
  int v6 = (re::DynamicString *)(v4 + 32);
  do
  {
    re::DynamicString::deinit(v6);
    int v6 = (re::DynamicString *)((char *)v6 + 64);
    v5 -= 64;
  }
  while (v5);
  int v3 = *(_DWORD *)(a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 16) = v3 + 2;
}

void re::DynamicOverflowArray<PerTextureMetrics,8ul>::setCapacity(void *a1, unint64_t a2)
{
  uint64_t v5 = *a1;
  if (a2 && !v5)
  {
    re::DynamicOverflowArray<PerTextureMetrics,8ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = a1[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        uint64_t v15 = a1[5];
        if (v7) {
          uint64_t v16 = a1 + 4;
        }
        else {
          uint64_t v16 = (void *)a1[5];
        }
        if (v9)
        {
          uint64_t v17 = 0;
          unsigned int v18 = &v16[8 * v9];
          do
          {
            long long v19 = &a1[v17];
            long long v20 = *(_OWORD *)&v16[v17 + 2];
            *((_OWORD *)v19 + 2) = *(_OWORD *)&v16[v17];
            *((_OWORD *)v19 + 3) = v20;
            *((_OWORD *)v19 + 4) = 0u;
            *((_OWORD *)v19 + 5) = 0u;
            uint64_t v21 = (re::DynamicString *)&v16[v17 + 4];
            uint8_t v19[8] = *(void *)v21;
            *(void *)uint64_t v21 = 0;
            v19[11] = v16[v17 + 7];
            *((void *)v21 + 3) = 0;
            uint64_t v23 = a1[v17 + 9];
            uint64_t v22 = a1[v17 + 10];
            uint64_t v24 = v16[v17 + 6];
            v19[9] = v16[v17 + 5];
            v19[10] = v24;
            *((void *)v21 + 1) = v23;
            *((void *)v21 + 2) = v22;
            re::DynamicString::deinit(v21);
            v17 += 8;
          }
          while ((void *)((char *)v21 + 32) != v18);
          uint64_t v5 = *a1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 58)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 64, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        unint64_t v2 = a2 << 6;
        uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2 << 6, 16);
        if (v10)
        {
          uint64_t v12 = v10;
          int v13 = *((_DWORD *)a1 + 4);
          if (v13) {
            BOOL v14 = a1 + 4;
          }
          else {
            BOOL v14 = (void *)a1[5];
          }
          uint64_t v25 = a1[1];
          if (v25)
          {
            uint64_t v26 = &v14[8 * v25];
            uint64_t v27 = v10;
            do
            {
              long long v28 = *((_OWORD *)v14 + 1);
              *(_OWORD *)uint64_t v27 = *(_OWORD *)v14;
              *(_OWORD *)(v27 + 16) = v28;
              *(_OWORD *)(v27 + 32) = 0u;
              *(_OWORD *)(v27 + 48) = 0u;
              uint64_t v30 = v14[4];
              uint64_t v29 = (re::DynamicString *)(v14 + 4);
              *(void *)(v27 + 32) = v30;
              *(void *)uint64_t v29 = 0;
              *(void *)(v27 + 56) = *((void *)v29 + 3);
              *((void *)v29 + 3) = 0;
              uint64_t v32 = *(void *)(v27 + 40);
              uint64_t v31 = *(void *)(v27 + 48);
              uint64_t v33 = *((void *)v29 + 2);
              *(void *)(v27 + 40) = *((void *)v29 + 1);
              *(void *)(v27 + 48) = v33;
              *((void *)v29 + 1) = v32;
              *((void *)v29 + 2) = v31;
              re::DynamicString::deinit(v29);
              BOOL v14 = (void *)((char *)v29 + 32);
              v27 += 64;
            }
            while (v14 != v26);
            int v13 = *((_DWORD *)a1 + 4);
          }
          if ((v13 & 1) == 0)
          {
            (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, a1[5]);
            int v13 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v13 & 0xFFFFFFFE;
          a1[4] = a2;
          a1[5] = v12;
          return;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      _os_crash();
      __break(1u);
    }
  }
}

void re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 592 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void EntityTextureMetrics::~EntityTextureMetrics(EntityTextureMetrics *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::HashTable<re::DynamicString,re::DynamicOverflowArray<PerTextureMetrics,8ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)(v6 + 48));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 592;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::DynamicOverflowArray<PerTextureMetrics,32ul>::setCapacity(void *a1, unint64_t a2)
{
  uint64_t v5 = *a1;
  if (a2 && !v5)
  {
    re::DynamicOverflowArray<PerTextureMetrics,32ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
    return;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 32;
  }
  else {
    uint64_t v8 = a1[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 0x20 || (v7 & 1) == 0))
    {
      if (a2 < 0x21)
      {
        uint64_t v15 = a1[5];
        if (v7) {
          uint64_t v16 = a1 + 4;
        }
        else {
          uint64_t v16 = (void *)a1[5];
        }
        if (v9)
        {
          uint64_t v17 = 0;
          unsigned int v18 = &v16[8 * v9];
          do
          {
            long long v19 = &a1[v17];
            long long v20 = *(_OWORD *)&v16[v17 + 2];
            *((_OWORD *)v19 + 2) = *(_OWORD *)&v16[v17];
            *((_OWORD *)v19 + 3) = v20;
            *((_OWORD *)v19 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
            *((_OWORD *)v19 + 5) = 0u;
            uint64_t v21 = (re::DynamicString *)&v16[v17 + 4];
            uint8_t v19[8] = *(void *)v21;
            *(void *)uint64_t v21 = 0;
            v19[11] = v16[v17 + 7];
            *((void *)v21 + 3) = 0;
            uint64_t v23 = a1[v17 + 9];
            uint64_t v22 = a1[v17 + 10];
            uint64_t v24 = v16[v17 + 6];
            v19[9] = v16[v17 + 5];
            v19[10] = v24;
            *((void *)v21 + 1) = v23;
            *((void *)v21 + 2) = v22;
            re::DynamicString::deinit(v21);
            v17 += 8;
          }
          while ((void *)((char *)v21 + 32) != v18);
          uint64_t v5 = *a1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 58)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 64, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        unint64_t v2 = a2 << 6;
        uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2 << 6, 16);
        if (v10)
        {
          uint64_t v12 = v10;
          int v13 = *((_DWORD *)a1 + 4);
          if (v13) {
            BOOL v14 = a1 + 4;
          }
          else {
            BOOL v14 = (void *)a1[5];
          }
          uint64_t v25 = a1[1];
          if (v25)
          {
            uint64_t v26 = &v14[8 * v25];
            uint64_t v27 = v10;
            do
            {
              long long v28 = *((_OWORD *)v14 + 1);
              *(_OWORD *)uint64_t v27 = *(_OWORD *)v14;
              *(_OWORD *)(v27 + 16) = v28;
              *(_OWORD *)(v27 + 32) = 0u;
              *(_OWORD *)(v27 + 48) = 0u;
              uint64_t v30 = v14[4];
              uint64_t v29 = (re::DynamicString *)(v14 + 4);
              *(void *)(v27 + 32) = v30;
              *(void *)uint64_t v29 = 0;
              *(void *)(v27 + 56) = *((void *)v29 + 3);
              *((void *)v29 + 3) = 0;
              uint64_t v32 = *(void *)(v27 + 40);
              uint64_t v31 = *(void *)(v27 + 48);
              uint64_t v33 = *((void *)v29 + 2);
              *(void *)(v27 + 40) = *((void *)v29 + 1);
              *(void *)(v27 + 48) = v33;
              *((void *)v29 + 1) = v32;
              *((void *)v29 + 2) = v31;
              re::DynamicString::deinit(v29);
              BOOL v14 = (void *)((char *)v29 + 32);
              v27 += 64;
            }
            while (v14 != v26);
            int v13 = *((_DWORD *)a1 + 4);
          }
          if ((v13 & 1) == 0)
          {
            (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, a1[5]);
            int v13 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v13 & 0xFFFFFFFE;
          a1[4] = a2;
          a1[5] = v12;
          return;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t REPhysicsJointDefinitionCreate(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, char a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, double a11, double a12, double a13, double a14, uint64_t a15, uint64_t a16, long long a17, int a18, int a19)
{
  int v23 = (int)a1;
  uint64_t v51 = *MEMORY[0x263EF8340];
  *(void *)&v44.var0 = 0;
  v44.var1 = "";
  if (a3) {
    uint64_t v24 = a3;
  }
  else {
    uint64_t v24 = "";
  }
  re::ecs2::EntityHandle::EntityHandle((uint64_t)v41, a2);
  re::StringID::StringID((re::StringID *)v42, &v44);
  *(__n128 *)&v42[24] = a7;
  __n128 v43 = a8;
  re::StringID::destroyString((re::StringID *)&v44);
  if (!a5) {
    a5 = "";
  }
  *(void *)&v44.var0 = 0;
  v44.var1 = "";
  re::ecs2::EntityHandle::EntityHandle((uint64_t)v38, a4);
  re::StringID::StringID((re::StringID *)v39, &v44);
  *(__n128 *)&v39[24] = a9;
  __n128 v40 = a10;
  re::StringID::destroyString((re::StringID *)&v44);
  re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition((uint64_t)&v44, v23, (re::ecs2::EntityHandle *)v41, (uint64_t)v38, a6);
  *(double *)&long long v26 = a11;
  *((double *)&v26 + 1) = a12;
  *(_OWORD *)&v46[84] = v26;
  *(double *)&long long v26 = a13;
  *((double *)&v26 + 1) = a14;
  long long v47 = v26;
  long long v48 = a17;
  int v49 = a18;
  int v50 = a19;
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v46);
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)&v45);
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v38);
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v41);
  return REPhysicsJointDefinitionRef;
}

uint64_t anonymous namespace'::createREPhysicsJointDefinitionRef(_anonymous_namespace_ *this, const re::ecs2::PhysicsJointDefinition *a2)
{
  unint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 272, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E736210;
  re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition((id *)(v4 + 32));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)this;
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v4 + 48), (id *)this + 2);
  re::StringID::operator=((unint64_t *)(v4 + 72), (uint64_t *)this + 5);
  long long v5 = *((_OWORD *)this + 5);
  *(_OWORD *)(v4 + 96) = *((_OWORD *)this + 4);
  *(_OWORD *)(v4 + 112) = v5;
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v4 + 128), (id *)this + 12);
  re::StringID::operator=((unint64_t *)(v4 + 152), (uint64_t *)this + 15);
  long long v6 = *((_OWORD *)this + 10);
  *(_OWORD *)(v4 + 176) = *((_OWORD *)this + 9);
  *(_OWORD *)(v4 + 192) = v6;
  long long v7 = *((_OWORD *)this + 11);
  long long v8 = *((_OWORD *)this + 12);
  long long v9 = *((_OWORD *)this + 13);
  *(_OWORD *)(v4 + 252) = *(_OWORD *)((char *)this + 220);
  *(_OWORD *)(v4 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
  *(_OWORD *)(v4 + 240) = v9;
  *(_OWORD *)(v4 + 208) = v7;
  return v4;
}

uint64_t REPhysicsJointDefinitionGetJointType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

char *REPhysicsJointDefinitionGetEntity(uint64_t a1, int a2)
{
  uint64_t v2 = 96;
  if (a2) {
    uint64_t v2 = 16;
  }
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + v2 + 32));
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v4 = WeakRetained - 8;

  return v4;
}

uint64_t REPhysicsJointDefinitionGetPinName(uint64_t a1, int a2)
{
  uint64_t v2 = 96;
  if (a2) {
    uint64_t v2 = 16;
  }
  return *(void *)(a1 + v2 + 64);
}

__n128 REPhysicsJointDefinitionGetOffsetFromPin(uint64_t a1, int a2)
{
  uint64_t v2 = 176;
  if (a2) {
    uint64_t v2 = 96;
  }
  return *(__n128 *)(a1 + v2);
}

uint64_t REPhysicsJointDefinitionGetChecksForCollisions(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

double REPhysicsJointDefinitionGetLinearLimit(uint64_t a1, int a2)
{
  return *(double *)(a1 + 8 * a2 + 212);
}

double REPhysicsJointDefinitionGetAngularLimit(uint64_t a1, int a2)
{
  return *(double *)(a1 + 8 * a2 + 236);
}

float REPhysicsJointDefinitionGetLinearTolerance(uint64_t a1)
{
  return *(float *)(a1 + 260);
}

float REPhysicsJointDefinitionGetAngularTolerance(uint64_t a1)
{
  return *(float *)(a1 + 264);
}

uint64_t REPhysicsJointDefinitionCreateFixedJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)&long long v13 = 1065353216;
  *((void *)&v13 + 1) = 1065353216;
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)1, a1, a2, a3, a4, 0, a5, a6, a7, a8, COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), a11, a12, v13, 0, 0);
}

uint64_t REPhysicsJointDefinitionCreateSphericalJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, int32x2_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int32x2_t v13 = vzip1_s32(0, a10);
  a10.i32[0] = 0;
  *(int32x2_t *)&long long v15 = v13;
  *((int32x2_t *)&v15 + 1) = a10;
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)2, a1, a2, a3, a4, a5, a6, a7, a8, a9, COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), a12, a13, v15, 0, 0);
}

__n64 REPhysicsJointDefinitionSphericalJointGetAngularLimitYZ(uint64_t a1)
{
  result.n64_u32[0] = *(_DWORD *)(a1 + 248);
  result.n64_u32[1] = *(_DWORD *)(a1 + 256);
  return result;
}

uint64_t REPhysicsJointDefinitionCreateRevoluteJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&long long v14 = 1065353216;
  *((void *)&v14 + 1) = 1065353216;
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)3, a1, a2, a3, a4, a5, a6, a7, a8, a9, COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), a10, a12, a13, v14, 0, 0);
}

double REPhysicsJointDefinitionRevoluteJointGetAngularLimitX(uint64_t a1)
{
  return *(double *)(a1 + 236);
}

uint64_t REPhysicsJointDefinitionCreatePrismaticJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&long long v14 = 1065353216;
  *((void *)&v14 + 1) = 1065353216;
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)4, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), a12, a13, v14, 0, 0);
}

double REPhysicsJointDefinitionPrismaticJointGetLinearLimitX(uint64_t a1)
{
  return *(double *)(a1 + 212);
}

uint64_t REPhysicsJointDefinitionCreateDistanceJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, double a10, float a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)&long long v15 = 1065353216;
  *((void *)&v15 + 1) = 1065353216;
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)5, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), COERCE_DOUBLE(1065353216), a13, a14, v15, SLODWORD(a11), 0);
}

double REPhysicsJointDefinitionDistanceJointGetDistanceLimit(uint64_t a1)
{
  return *(double *)(a1 + 212);
}

float REPhysicsJointDefinitionDistanceJointGetTolerance(uint64_t a1)
{
  return *(float *)(a1 + 260);
}

uint64_t REPhysicsJointDefinitionCreateCustomJoint(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17)
{
  return REPhysicsJointDefinitionCreate((_anonymous_namespace_ *)6, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, a16, a17, 0, 0);
}

void REPhysicsJointDefinitionArrayCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)uint64_t v2 = &unk_26E736258;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t REPhysicsJointDefinitionArrayGetSize(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

double REPhysicsJointDefinitionArrayAddPhysicsJointDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::add((_anonymous_namespace_ *)(a1 + 24), a2 + 32).n128_u64[0];
  return result;
}

uint64_t REPhysicsJointDefinitionArrayGetPhysicsJointDefinitionAtIndex(uint64_t a1, const re::ecs2::PhysicsJointDefinition *a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (_anonymous_namespace_ *)(*(void *)(a1 + 56) + 240 * (void)a2);
}

void *REPhysicsJointsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REPhysicsJointsComponentSetPhysicsJointDefinitionArray(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v4 = *(void *)(a2 + 56);
  unint64_t v5 = *(void *)(a2 + 40);
  return re::ecs2::PhysicsJointsComponent::setJoints(v3, v4, v5);
}

void *REPhysicsJointsComponentAddPhysicsJointDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (re::ecs2::PhysicsJointsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsJointsComponent::addJoint(v3, (const re::ecs2::PhysicsJointDefinition *)(a2 + 32));
}

uint64_t REPhysicsJointsComponentGetJointCount(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 56);
}

uint64_t REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v4 = (_anonymous_namespace_ *)re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(v3 + 32), a2);
}

BOOL REPhysicsJointsComponentIsJointAtIndexActive(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::runtimeJoint((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(v3 + 32), a2) != 0;
}

void *re::Shareable<re::ecs2::PhysicsJointDefinition>::~Shareable(void *a1)
{
  *a1 = &unk_26E736210;
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 16));
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::PhysicsJointDefinition>::~Shareable(void *a1)
{
  *a1 = &unk_26E736210;
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 16));
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::Shareable<re::DynamicArray<re::ecs2::PhysicsJointDefinition>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736258;
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::ecs2::PhysicsJointDefinition>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736258;
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *((void *)v3[116] + 4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REServiceLocatorGetCollisionWorld(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result);
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(a1);
      if (v4)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
        uint64_t v7 = *(void *)(v5 + 24);
        if (v7)
        {
          long long v8 = *(const re::ecs2::Scene ***)(v5 + 40);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8++;
            re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(v10, v6);
            v9 -= 8;
          }
          while (v9);
        }
      }
      return *(void *)(v3 + 56);
    }
  }
  return result;
}

uint64_t REServiceLocatorGetPhysicsSimulation(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 176);
    return v2();
  }
  return result;
}

uint64_t REServiceLocatorGetECSService(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(a1);
}

uint64_t REServiceLocatorGetAudioService(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v2();
  }
  return result;
}

uint64_t REServiceLocatorGetMultipeerConnectivityManager(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (result)
  {
    uint64_t v2 = (re::NetworkSystem *)result;
    uint64_t result = *(void *)(result + 2552);
    if (!result)
    {
      re::NetworkSystem::initMCService(v2);
      return *((void *)v2 + 319);
    }
  }
  return result;
}

uint64_t REServiceLocatorGetNetworkSyncManager(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (result) {
    return *(void *)(result + 2560);
  }
  return result;
}

uint64_t REServiceLocatorGetFrameStatisticsHUD(uint64_t a1)
{
  {
    re::introspect<re::FrameProfiler>(void)::info = re::introspect_FrameProfiler(0);
  }
  uint64_t v2 = re::introspect<re::FrameProfiler>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t REServiceLocatorGetPeerAttributionServiceEx(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0360))
  {
    qword_26AFA0358 = re::introspect_PeerAttributionService(0);
    __cxa_guard_release(&qword_26AFA0360);
  }
  uint64_t v2 = qword_26AFA0358;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void *allocInfo_CustomService(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_529, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_529))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AFA0378, "CustomService");
    __cxa_guard_release(&_MergedGlobals_529);
  }
  return &unk_26AFA0378;
}

void initInfo_CustomService(re::IntrospectionBase *a1)
{
  v4[0] = 0xDF8C997C50EE3C8;
  v4[1] = "CustomService";
  re::StringID::destroyString((re::StringID *)v4);
  *((_OWORD *)a1 + 2) = v5;
  *((void *)a1 + 2) = 0x800000008;
  *((_DWORD *)a1 + 6) = 8;
  *((_WORD *)a1 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  *((_DWORD *)a1 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *((void *)a1 + 8) = &initInfo_CustomService(re::IntrospectionBase *)::structureAttributes;
  *((void *)a1 + 9) = re::internal::defaultConstruct<CustomService>;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 10) = re::internal::defaultDestruct<CustomService>;
  *((void *)a1 + 13) = re::internal::defaultConstructV2<CustomService>;
  *((void *)a1 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = re::internal::defaultDestructV2<CustomService>;
  re::IntrospectionRegistry::add(a1, v2);
  long long v3 = v5;
}

void re::internal::defaultConstruct<CustomService>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

void *re::internal::defaultConstructV2<CustomService>(void *result)
{
  *uint64_t result = 0;
  return result;
}

BOOL REServiceLocatorServiceExists(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::ServiceLocator::serviceOrNull<CustomService>((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)v6);
  return v4 != 0;
}

uint64_t re::ServiceLocator::serviceOrNull<CustomService>(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0370, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = a1;
    int v4 = __cxa_guard_acquire(&qword_26AFA0370);
    a1 = v3;
    if (v4)
    {
      qword_26AFA0368 = re::internal::getOrCreateInfo((re::internal *)"CustomService", (uint64_t (*)(re::internal *))allocInfo_CustomService, (re::IntrospectionBase *(*)(void))initInfo_CustomService, (void (*)(re::IntrospectionBase *))&unk_26AFA0350, 0);
      __cxa_guard_release(&qword_26AFA0370);
      a1 = v3;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 16);
  return v1();
}

uint64_t REServiceLocatorGetService(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)&long long v7 = 0;
  *((void *)&v7 + 1) = "";
  uint64_t v4 = re::ServiceLocator::serviceOrNull<CustomService>((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)&v7);
  if (v4) {
    return *(void *)v4;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v7) = 136315138;
    *(void *)((char *)&v7 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Requesting unregistered service named %s", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

uint64_t REServiceLocatorGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t REServiceLocatorSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

void REServiceRegistryAddService(_anonymous_namespace_ *a1, uint64_t a2, const char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)&buf[0] = 0;
  *((void *)&buf[0] + 1) = "";
  uint64_t v6 = re::ServiceLocator::serviceOrNull<CustomService>((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)buf);
  if (v6)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Trying to add service %s. This service was already registered", (uint8_t *)buf, 0xCu);
    }
  }
  else
  {
    uint64_t v9 = re::globalAllocators(v7);
    uint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 8, 8);
    *(void *)uint64_t v10 = a2;
    *(void *)&v11.var0 = 0;
    v11.var1 = "";
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0370, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AFA0370))
    {
      qword_26AFA0368 = re::internal::getOrCreateInfo((re::internal *)"CustomService", (uint64_t (*)(re::internal *))allocInfo_CustomService, (re::IntrospectionBase *(*)(void))initInfo_CustomService, (void (*)(re::IntrospectionBase *))&unk_26AFA0350, 0);
      __cxa_guard_release(&qword_26AFA0370);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)buf, (const re::IntrospectionBase *)qword_26AFA0368, &v11, v10);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add((uint64_t)a1 + 16, (uint64_t *)buf);
    re::StringID::destroyString((re::StringID *)((char *)buf + 8));
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

void REServiceRegistryRemoveService(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = "";
  uint64_t v4 = re::ServiceLocator::serviceOrNull<CustomService>((uint64_t)a1);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v4)
  {
    *(void *)&v10.var0 = 0;
    v10.var1 = "";
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0370, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_26AFA0370))
      {
        qword_26AFA0368 = re::internal::getOrCreateInfo((re::internal *)"CustomService", (uint64_t (*)(re::internal *))allocInfo_CustomService, (re::IntrospectionBase *(*)(void))initInfo_CustomService, (void (*)(re::IntrospectionBase *))&unk_26AFA0350, 0);
        __cxa_guard_release(&qword_26AFA0370);
      }
    }
    uint64_t v6 = qword_26AFA0368;
    re::StringID::StringID((re::StringID *)&v11, &v10);
    *(void *)&long long buf = v6;
    re::StringID::StringID((re::StringID *)((char *)&buf + 8), &v11);
    re::StringID::destroyString((re::StringID *)&v11);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove((uint64_t)a1 + 16, (uint64_t *)&buf);
    re::StringID::destroyString((re::StringID *)((char *)&buf + 8));
    re::StringID::destroyString((re::StringID *)&v10);
    uint64_t v8 = re::globalAllocators(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8[2] + 40))(v8[2], v4);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Trying to remove service %s. This service was not registered", (uint8_t *)&buf, 0xCu);
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::BackgroundTaskService>(uint64_t a1)
{
  {
    re::introspect<re::BackgroundTaskService>(void)::info = re::introspect_BackgroundTaskService(0);
  }
  uint64_t v2 = re::introspect<re::BackgroundTaskService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void *RESpatialSceneClassificationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RESpatialSceneClassificationComponentGetSpatialSceneClassification(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

__n128 RESpatialSceneClassificationComponentGetSpatialSceneRoomIdentifier(uint64_t a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(a1 + 26);
  *a2 = result;
  return result;
}

void *REKeyValueComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REKeyValueComponentGetFloatValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 136, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

float REKeyValueComponentAddFloatValue(_anonymous_namespace_ *a1, const char *a2, float a3)
{
  float v9 = a3;
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v8[0] = 0;
  v8[1] = "";
  float v6 = *(float *)re::KeyValueStore::addOrReplaceValue<float>(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v6;
}

uint64_t REKeyValueComponentRemoveFloatValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 136, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetDoubleValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 184, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double REKeyValueComponentAddDoubleValue(_anonymous_namespace_ *a1, const char *a2, double a3)
{
  double v9 = a3;
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v8[0] = 0;
  v8[1] = "";
  double v6 = *(double *)re::KeyValueStore::addOrReplaceValue<double>(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v6;
}

uint64_t REKeyValueComponentRemoveDoubleValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 184, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetIntValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 232, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REKeyValueComponentAddIntValue(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  int v9 = a3;
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v8[0] = 0;
  v8[1] = "";
  uint64_t v6 = *(unsigned int *)re::KeyValueStore::addOrReplaceValue<int>(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v6;
}

uint64_t REKeyValueComponentRemoveIntValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 232, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetInt64Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 712, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REKeyValueComponentAddInt64Value(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v8[0] = 0;
  v8[1] = "";
  uint64_t v9 = a3;
  uint64_t v6 = *(void *)re::KeyValueStore::addOrReplaceValue<long long>(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v6;
}

uint64_t REKeyValueComponentRemoveInt64Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 712, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetStringValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 520, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (!v4) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 8)) {
    return *(void *)(v4 + 16);
  }
  return v4 + 9;
}

uint64_t REKeyValueComponentAddStringValue(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v6 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v15[0] = 0;
  v15[1] = "";
  uint64_t v8 = re::KeyValueStore::addOrReplaceValue<re::DynamicString>(v6, (const re::StringID *)v15, (const re::DynamicString *)&v13);
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  if (v9) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v8 + 9;
  }
  re::StringID::destroyString((re::StringID *)v15);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v11;
}

uint64_t REKeyValueComponentRemoveStringValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 520, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetBoolValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 88, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REKeyValueComponentAddBoolValue(_anonymous_namespace_ *a1, const char *a2, char a3)
{
  char v9 = a3;
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v8[0] = 0;
  v8[1] = "";
  uint64_t v6 = *(unsigned __int8 *)re::KeyValueStore::addOrReplaceValue<BOOL>(v5, (const re::StringID *)v8, &v9);
  re::StringID::destroyString((re::StringID *)v8);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v6;
}

uint64_t REKeyValueComponentRemoveBoolValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 88, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetRESRTValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 472, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__n128 REKeyValueComponentAddRESRTValue(_anonymous_namespace_ *a1, const char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  v11[0] = (__int128)a3;
  v11[1] = (__int128)a4;
  void v11[2] = (__int128)a5;
  long long v7 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v10[0] = 0;
  v10[1] = "";
  long long v9 = *(_OWORD *)re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(v7, (const re::StringID *)v10, v11);
  re::StringID::destroyString((re::StringID *)v10);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return (__n128)v9;
}

uint64_t REKeyValueComponentRemoveRESRTValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 472, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetFloat4Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 376, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__n128 REKeyValueComponentAddFloat4Value(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v10[0] = 0;
  v10[1] = "";
  __n128 v9 = a3;
  long long v8 = *(_OWORD *)re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(v5, (const re::StringID *)v10, &v9);
  re::StringID::destroyString((re::StringID *)v10);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return (__n128)v8;
}

uint64_t REKeyValueComponentRemoveFloat4Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 376, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetFloat3Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 328, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__n128 REKeyValueComponentAddFloat3Value(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v10[0] = 0;
  v10[1] = "";
  __n128 v9 = a3;
  long long v8 = *(_OWORD *)re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(v5, (const re::StringID *)v10, &v9);
  re::StringID::destroyString((re::StringID *)v10);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return (__n128)v8;
}

uint64_t REKeyValueComponentRemoveFloat3Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 328, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetFloat2Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 280, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double REKeyValueComponentAddFloat2Value(_anonymous_namespace_ *a1, const char *a2, double a3)
{
  uint64_t v6 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v10[0] = 0;
  v10[1] = "";
  double v9 = a3;
  double v7 = *(double *)re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(v6, (const re::StringID *)v10, &v9);
  re::StringID::destroyString((re::StringID *)v10);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return v7;
}

uint64_t REKeyValueComponentRemoveFloat2Value(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 280, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetQuatFValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 424, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__n128 REKeyValueComponentAddQuatFValue(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  long long v5 = (_anonymous_namespace_ *)((char *)a1 + 32);
  v10[0] = 0;
  v10[1] = "";
  __n128 v9 = a3;
  long long v8 = *(_OWORD *)re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(v5, (const re::StringID *)v10, &v9);
  re::StringID::destroyString((re::StringID *)v10);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return (__n128)v8;
}

uint64_t REKeyValueComponentRemoveQuatFValue(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 424, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetFloatArray(_anonymous_namespace_ *a1, const char *a2)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t anonymous namespace'::getArray<float>(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 616, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REKeyValueComponentAddFloatArray(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v14 = 0;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  if (a3)
  {
    re::DynamicArray<int>::setCapacity(v12, a3);
    ++v13;
    a1 = (_anonymous_namespace_ *)re::DynamicArray<float>::copy(v12, 0, a4, a3);
  }
  v11[0] = 0;
  v11[1] = "";
  unint64_t v8 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>((re::KeyValueStore *)(v5 + 32), (const re::StringID *)v11, v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::ecs2::Component::enqueueMarkDirty(v5);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v12[0] && v14) {
    (*(void (**)(void))(*(void *)v12[0] + 40))();
  }
  return v9;
}

void *REKeyValueComponentInsertFloatValueInArrayAt(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, float a4)
{
  if (result)
  {
    double v7 = result;
    unint64_t v8 = result[2];
    if (v8 + 1 <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v8 >= result[1])
    {
      re::DynamicArray<float>::growCapacity(result, v8 + 1);
      unint64_t v8 = v7[2];
    }
    uint64_t v9 = v7[4];
    uint64_t v10 = (float *)(v9 + 4 * v8);
    if (v8 > a3)
    {
      float *v10 = *(v10 - 1);
      uint64_t v11 = (char *)(v9 + 4 * a3);
      if (v10 - 1 != (float *)v11)
      {
        memmove(v11 + 4, (const void *)(v9 + 4 * a3), (char *)(v10 - 1) - v11);
        uint64_t v9 = v7[4];
        unint64_t v8 = v7[2];
      }
      uint64_t v10 = (float *)(v9 + 4 * a3);
    }
    float *v10 = a4;
    uint64_t result = (void *)(v8 + 1);
    void v7[2] = v8 + 1;
    ++*((_DWORD *)v7 + 6);
  }
  return result;
}

uint64_t REKeyValueComponentRemoveFloatValueFromArrayAt(_anonymous_namespace_ *a1, const char *a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = *(void *)(result + 16);
    if (v6 <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t result = v6 - 1;
    if (v6 - 1 > a3)
    {
      uint64_t v7 = *(void *)(v5 + 32);
      uint64_t v8 = v7 + 4 * a3;
      uint64_t v9 = v7 + 4 * v6;
      if (v9 != v8 + 4)
      {
        memmove((void *)v8, (const void *)(v8 + 4), v9 - (v8 + 4));
        uint64_t result = *(void *)(v5 + 16) - 1;
      }
    }
    *(void *)(v5 + 16) = result;
    ++*(_DWORD *)(v5 + 24);
  }
  return result;
}

uint64_t REKeyValueComponentRemoveFloatArray(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 616, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REKeyValueComponentGetFloat3Array(_anonymous_namespace_ *a1, const char *a2)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t anonymous namespace'::getArray<re::Vector3<float>>(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 664, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REKeyValueComponentAddFloat3Array(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v14 = 0;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  if (a3)
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(v12, a3);
    ++v13;
    a1 = (_anonymous_namespace_ *)re::DynamicArray<re::Vector3<float>>::copy(v12, 0, a4, a3);
  }
  v11[0] = 0;
  v11[1] = "";
  unint64_t v8 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>((re::KeyValueStore *)(v5 + 32), (const re::StringID *)v11, v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::ecs2::Component::enqueueMarkDirty(v5);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v12[0] && v14) {
    (*(void (**)(void))(*(void *)v12[0] + 40))();
  }
  return v9;
}

void *REKeyValueComponentInsertFloat3ValueInArrayAt(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, __n128 a4)
{
  if (result)
  {
    unint64_t v6 = result;
    unint64_t v7 = result[2];
    if (v7 + 1 <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v7 >= result[1])
    {
      re::DynamicArray<re::Vector3<float>>::growCapacity(result, v7 + 1);
      unint64_t v7 = v6[2];
    }
    unint64_t v8 = (__n128 *)(v6[4] + 16 * v7);
    if (v7 <= a3)
    {
      __n128 v12 = a4;
    }
    else
    {
      __n128 *v8 = v8[-1];
      uint64_t v9 = v6[4];
      uint64_t v10 = v9 + 16 * a3;
      uint64_t v11 = v9 + 16 * v6[2] - 16;
      if (v11 != v10)
      {
        memmove((void *)(v10 + 16), (const void *)v10, v11 - v10);
        uint64_t v9 = v6[4];
      }
      __n128 v12 = a4;
      unint64_t v8 = (__n128 *)(v9 + 16 * a3);
    }
    __n128 *v8 = v12;
    uint64_t result = (void *)(v6[2] + 1);
    void v6[2] = result;
    ++*((_DWORD *)v6 + 6);
  }
  return result;
}

uint64_t REKeyValueComponentRemoveFloat3ValueFromArrayAt(_anonymous_namespace_ *a1, const char *a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = *(void *)(result + 16);
    if (v6 <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t result = v6 - 1;
    if (v6 - 1 > a3)
    {
      uint64_t v7 = *(void *)(v5 + 32);
      uint64_t v8 = v7 + 16 * a3;
      uint64_t v9 = v7 + 16 * v6;
      if (v9 != v8 + 16)
      {
        memmove((void *)v8, (const void *)(v8 + 16), v9 - (v8 + 16));
        uint64_t result = *(void *)(v5 + 16) - 1;
      }
    }
    *(void *)(v5 + 16) = result;
    ++*(_DWORD *)(v5 + 24);
  }
  return result;
}

uint64_t REKeyValueComponentRemoveFloat3Array(_anonymous_namespace_ *a1, const char *a2)
{
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 664, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

CFBundleRef RECopyBundle()
{
  uint64_t v0 = REGetCoreREBundle();
  CFBundleRef v1 = CFBundleCreate(0, (CFURLRef)[v0 bundleURL]);

  return v1;
}

uint64_t RECALayerGetContext()
{
  return 0;
}

uint64_t RECALayerGetCAServerContext()
{
  return 0;
}

void *REAudioPlayerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REAudioPlayerComponentRegisterAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)v4);
  re::ecs2::AudioPlayerComponent::registerAudioAsset(a1, (re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

void REAudioPlayerComponentUnregisterAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)v4);
  re::ecs2::AudioPlayerComponent::unregisterAudioAsset(a1, (uint64_t)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t REAudioPlayerComponentGetRegisteredAssetCount(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

__CFArray *REAudioPlayerComponentCopyTokens(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*(void *)(a1 + 48) + 8);
    while ((*v5 & 0x80000000) == 0)
    {
      v5 += 72;
      if (v3 == ++v4)
      {
        LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a1 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t valuePtr = 0;
      uint64_t valuePtr = *(void *)(v7 + 288 * v6 + 16);
      CFNumberRef v8 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v8);
      if (*(_DWORD *)(a1 + 64) <= (v4 + 1)) {
        int v9 = v4 + 1;
      }
      else {
        int v9 = *(_DWORD *)(a1 + 64);
      }
      int v10 = v4;
      while (1)
      {
        uint64_t v6 = (v10 + 1);
        if (v9 - 1 == v10) {
          break;
        }
        ++v10;
        LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
        if ((*(_DWORD *)(*(void *)(a1 + 48) + 288 * v6 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v9;
LABEL_17:
      ;
    }
    while (v3 != v4);
  }
  return Mutable;
}

uint64_t REAudioPlayerComponentGetAssetForToken(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (!v2) {
    return 0;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (const re::AssetHandle *)(v2 + 8));
  uint64_t v3 = v5[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REAudioPlayerComponentSetCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  return re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<void (*&)(unsigned long long)>(a1 + 392, &v5, &v4);
}

void REAudioPlayerComponentSetRemoveFromSceneCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  uint64_t v4 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 80, &v6);
  if (v4)
  {
    *(void *)(*(void *)v4 + 688) = a3;
  }
  else
  {
    uint64_t v5 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = v6;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetRemoveFromSceneCallback could not find an AudioSourceState for the provided token: %llu. Aborting operation.", buf, 0xCu);
    }
  }
}

uint64_t REAudioPlayerComponentGetRegisteredAssetAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 184) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 200) + 24 * a2);
}

void REAudioPlayerComponentRemoveRegisteredAssetAtIndex(uint64_t a1, unint64_t a2)
{
}

uint64_t REAudioPlayerComponentSetActiveInProcess(uint64_t result, char a2)
{
  *(unsigned char *)(result + 296) = a2;
  return result;
}

uint64_t REAudioPlayerComponentGetActiveInProcess(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 296);
}

void REAudioPlayerComponentSetSourceClockOrTimebase(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  uint64_t v4 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 80, &v8);
  if (v4)
  {
    uint64_t v5 = *(OpaqueCMTimebase **)(*(void *)v4 + 696);
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CMClockGetTypeID()) {
      CMTimebaseSetSourceClock(v5, (CMClockRef)a3);
    }
    else {
      CMTimebaseSetSourceTimebase(v5, (CMTimebaseRef)a3);
    }
  }
  else
  {
    uint64_t v7 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetSourceClockOrTimebase could not find an AudioSourceState for the provided token: %llu. Aborting operation.", buf, 0xCu);
    }
  }
}

void REAudioPlayerComponentSetMasterClockOrTimebase(re *a1, uint64_t a2, void *a3)
{
  CFTypeID v6 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetMasterClockOrTimebase() is deprecated. Use REAudioPlayerComponentSetSourceClockOrTimebase() instead.", v7, 2u);
  }
  REAudioPlayerComponentSetSourceClockOrTimebase((uint64_t)a1, a2, a3);
}

CMClockOrTimebaseRef REAudioPlayerComponentCopySourceClockOrTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 80, &v5);
  if (v2) {
    return CMTimebaseCopySource(*(CMTimebaseRef *)(*(void *)v2 + 696));
  }
  uint64_t v4 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentCopySourceClockOrTimebase could not find an AudioSourceState for the provided token: %llu. Aborting operation.", buf, 0xCu);
  }
  return 0;
}

CMClockOrTimebaseRef REAudioPlayerComponentCopyMasterClockOrTimebase(re *a1, uint64_t a2)
{
  uint64_t v4 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CFTypeID v6 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentCopyMasterClockOrTimebase() is deprecated. Use REAudioPlayerComponentCopySourceClockOrTimebase() instead.", v6, 2u);
  }
  return REAudioPlayerComponentCopySourceClockOrTimebase((uint64_t)a1, a2);
}

void REAudioPlayerComponentSetTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 80, &v9);
  if (v4)
  {
    uint64_t v5 = *(OpaqueCMTimebase **)(*(void *)v4 + 696);
    CMTime v7 = *a3;
    CMTimebaseSetTime(v5, &v7);
  }
  else
  {
    CFTypeID v6 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid token", buf, 2u);
    }
  }
}

unint64_t REAudioPlayerComponentPlayAsset(re *a1, uint64_t a2)
{
  if (a1 && (uint64_t v3 = *((void *)a1 + 2)) != 0 && (*(unsigned char *)(v3 + 288) & 0x80) == 0)
  {
    unint64_t v4 = REAudioPlayerComponentPrepareAsset((uint64_t)a1, a2);
    re::ecs2::AudioPlayerComponent::play((uint64_t)a1, v4, 1);
  }
  else
  {
    uint64_t v5 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot play asset without a valid entity and component!", v7, 2u);
    }
    return 0;
  }
  return v4;
}

unint64_t REAudioPlayerComponentPrepareAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v6);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (const re::AssetHandle *)v6);
  unint64_t v3 = re::ecs2::AudioPlayerComponent::prepare(a1, (re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

void REAudioPlayerComponentPlayToken(uint64_t a1, unint64_t a2)
{
}

unint64_t REAudioPlayerComponentPrepareExternalStreamControl(uint64_t a1, void *a2)
{
  return re::ecs2::AudioPlayerComponent::prepare(a1, a2, 1, 2, -12.0, 85.0);
}

unint64_t REAudioPlayerComponentPrepareExternalStreamControlWithCalibration(uint64_t a1, void *a2, int a3, int a4, double a5)
{
  return re::ecs2::AudioPlayerComponent::prepare(a1, a2, a3, a4, -12.0, a5);
}

uint64_t REAudioPlayerComponentGetMatchingControlTokenForAudioUnitResource(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL REAudioPlayerComponentIsStreamValid(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 32, &v3);
}

re::ecs2::NetworkComponent *REAudioPlayerComponentIsStreamPendingPlay(re::ecs2::AudioPlayerComponent *a1, unint64_t a2)
{
  uint64_t result = re::ecs2::AudioPlayerComponent::sourceStateForToken(a1, a2);
  if (result) {
    return (re::ecs2::NetworkComponent *)(*((_DWORD *)result + 181) == 2);
  }
  return result;
}

re::ecs2::NetworkComponent *REAudioPlayerComponentIsStreamPendingPause(re::ecs2::AudioPlayerComponent *a1, unint64_t a2)
{
  uint64_t result = re::ecs2::AudioPlayerComponent::sourceStateForToken(a1, a2);
  if (result) {
    return (re::ecs2::NetworkComponent *)(*((_DWORD *)result + 181) == 1);
  }
  return result;
}

re::ecs2::NetworkComponent *REAudioPlayerComponentIsStreamPendingStop(re::ecs2::AudioPlayerComponent *a1, unint64_t a2)
{
  uint64_t result = re::ecs2::AudioPlayerComponent::sourceStateForToken(a1, a2);
  if (result) {
    return (re::ecs2::NetworkComponent *)(*((_DWORD *)result + 181) == 3);
  }
  return result;
}

void warnIfSourceDirectivityUpdatedAfterAssetsPreparedOnPlayer(re::ecs2::AudioPlayerComponent *a1)
{
  if (a1)
  {
    CFBundleRef v1 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "Source directivity cannot be updated after a sound event has been prepared. SpatialAudioComponent.directivityMode must be configured before calling Entity.prepareAudio().", v2, 2u);
    }
  }
}

uint64_t REAudioPlayerComponentGetSourceDirectivityMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

void REAudioPlayerComponentSetSourceDirectivityMode(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 208);
  float v5 = *(float *)(a1 + 212);
  float v4 = *(float *)(a1 + 216);
  float v6 = *(float *)(a1 + 220);
  re::ecs2::AudioPlayerComponent::setComponentDirectivityMode(a1, a2);
  if (*(_DWORD *)(a1 + 208) != v3
    || *(float *)(a1 + 212) != v5
    || *(float *)(a1 + 216) != v4
    || *(float *)(a1 + 220) != v6)
  {
    CMTime v7 = *(re::ecs2::AudioPlayerComponent **)(a1 + 144);
    warnIfSourceDirectivityUpdatedAfterAssetsPreparedOnPlayer(v7);
  }
}

float REAudioPlayerComponentGetDirectivityFocus(uint64_t a1)
{
  return *(float *)(a1 + 212);
}

float REAudioPlayerComponentGetDirectivitySphericalCapDiameter(uint64_t a1)
{
  return *(float *)(a1 + 216);
}

float REAudioPlayerComponentGetDirectivitySphericalCapOpeningAngle(uint64_t a1)
{
  return *(float *)(a1 + 220);
}

void REAudioPlayerComponentFadeTokenToGainWithDuration(re::ecs2::AudioPlayerComponent **a1, unint64_t a2, float a3, double a4)
{
  float v7 = __exp10f(fminf(a3, 20.0) / 20.0);
  re::ecs2::AudioPlayerComponent::fadeToGain(a1, a2, v7, a4);
}

void REAudioPlayerComponentFadeTokenToLinearGainWithDuration(re::ecs2::AudioPlayerComponent **a1, unint64_t a2, float a3, double a4)
{
  float v7 = log10f(a3);
  float v8 = __exp10f(fminf(v7 * 20.0, 20.0) / 20.0);
  re::ecs2::AudioPlayerComponent::fadeToGain(a1, a2, v8, a4);
}

void REAudioPlayerComponentSetDecibelGainForToken(re::ecs2::AudioPlayerComponent **a1, unint64_t a2, float a3)
{
  float v5 = __exp10f(fminf(a3, 20.0) / 20.0);
  re::ecs2::AudioPlayerComponent::fadeToGain(a1, a2, v5, 0.0);
}

float REAudioPlayerComponentGetDecibelGainForToken(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v5);
  if (v2) {
    float v3 = *(float *)(v2 + 84);
  }
  else {
    float v3 = 0.0;
  }
  return log10f(v3) * 20.0;
}

void REAudioPlayerComponentSetLinearGainForToken(re::ecs2::AudioPlayerComponent **a1, unint64_t a2, float a3)
{
  float v5 = log10f(a3);
  float v6 = __exp10f(fminf(v5 * 20.0, 20.0) / 20.0);
  re::ecs2::AudioPlayerComponent::fadeToGain(a1, a2, v6, 0.0);
}

void REAudioPlayerComponentSetPlaybackRateForToken(re::ecs2::AudioPlayerComponent **a1, unint64_t a2, float a3)
{
}

void REAudioPlayerComponentSetReverbSendLevelForToken(re::ecs2::AudioPlayerComponent **a1, uint64_t a2, float a3)
{
}

void REAudioPlayerComponentSetDirectSendLevelForToken(re::ecs2::AudioPlayerComponent **a1, uint64_t a2, float a3)
{
}

id REAudioPlayerComponentGetAudioUnitForToken(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 80, &v6);
  if (v2)
  {
    id v3 = *(id *)(*(void *)v2 + 456);
  }
  else
  {
    float v4 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = v6;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentGetAudioUnitForToken could not find an AudioSourceState for the provided token: %llu. Aborting operation.", buf, 0xCu);
    }
    id v3 = 0;
  }
  return v3;
}

unint64_t REAudioPlayerComponentAddDidChangeStateCallback(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __REAudioPlayerComponentAddDidChangeStateCallback_block_invoke;
  uint64_t v19[3] = &unk_264BE9DF0;
  id v20 = v3;
  uint64_t v21 = a1;
  id v4 = v3;
  float v5 = v19;
  uint64_t v6 = *(void *)(a1 + 488) + 1;
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = 1;
  }
  while (!v7);
  *(void *)(a1 + 488) = v7;
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (*(void *)(a1 + 440))
  {
    unint64_t v10 = v9 % *(unsigned int *)(a1 + 464);
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 448) + 4 * v10);
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(a1 + 456);
      if (*(void *)(v12 + 32 * v11 + 16) == v7) {
        goto LABEL_16;
      }
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v12 + 32 * v11 + 16) == v7) {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 476);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 472);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 464))
    {
      re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 440, 2 * *(_DWORD *)(a1 + 468));
      LODWORD(v10) = v9 % *(unsigned int *)(a1 + 464);
      int v14 = *(_DWORD *)(a1 + 472);
      unint64_t v7 = *(void *)(a1 + 488);
    }
    *(_DWORD *)(a1 + 472) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 456);
    int v16 = *(_DWORD *)(v15 + 32 * v13 + 8);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 456);
    int v16 = *(_DWORD *)(v15 + 32 * v13 + 8);
    *(_DWORD *)(a1 + 476) = v16 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v15 + 32 * v13 + 8) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 456) + 32 * v13 + 8) = *(_DWORD *)(*(void *)(a1 + 456) + 32 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 448) + 4 * v10);
  *(void *)(*(void *)(a1 + 456) + 32 * v13) = v9;
  *(void *)(*(void *)(a1 + 456) + 32 * v13 + 16) = v7;
  uint64_t v17 = *(void *)(a1 + 456) + 32 * v13;
  *(void *)(v17 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = _Block_copy(v5);
  *(_DWORD *)(*(void *)(a1 + 448) + 4 * v10) = v13;
  ++*(_DWORD *)(a1 + 468);
  ++*(_DWORD *)(a1 + 480);
  unint64_t v7 = *(void *)(a1 + 488);
LABEL_16:

  return v7;
}

uint64_t __REAudioPlayerComponentAddDidChangeStateCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), a2, a3, a4);
}

uint64_t REAudioPlayerComponentAddDidThrowErrorCallback(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6);
    if (*(void *)(v7 + 16))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = *(void *)(v8 + 24);
      }
      while (v8);
      unint64_t v10 = *(re::EventBus **)(*(void *)(v9 + 16) + 288);
      if (v10)
      {
        uint64_t v11 = (re *)_Block_copy(v3);
        uint64_t v12 = re::globalAllocators(v11)[2];
        void v20[2] = a1;
        _DWORD v20[3] = v12;
        v20[0] = &unk_26E7362A0;
        v20[1] = v11;
        void v20[4] = v20;
        uint64_t v18 = v12;
        uint64_t v19 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>((uint64_t)v17, (uint64_t)v20);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA03F8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AFA03F8))
        {
          _MergedGlobals_530 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REAudioPlayerDidThrowErrorEvent" & 0x7FFFFFFFFFFFFFFFLL), v16);
          __cxa_guard_release(&qword_26AFA03F8);
        }
        unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v10, _MergedGlobals_530);
        uint64_t v25 = v18;
        uint64_t v26 = 0;
        int v14 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>((uint64_t)v24, (uint64_t)v17);
        uint64_t v22[5] = re::globalAllocators(v14)[2];
        int v23 = 0;
        uint64_t v21 = &unk_26E7363D8;
        uint64_t v22[3] = v25;
        uint8_t v22[4] = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v24);
        int v23 = &v21;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable((uint64_t)v24);
        uint64_t v5 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v21, v5, 0);
        re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v21);
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable((uint64_t)v17);
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable((uint64_t)v20);
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }

  return v5;
}

uint64_t REAudioPlayerComponentAddDidCreateAudioUnitCallback(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6);
    if (!*(void *)(v7 + 16)) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 24);
    }
    while (v8);
    unint64_t v10 = *(re::EventBus **)(*(void *)(v9 + 16) + 288);
    if (v10)
    {
      uint64_t v11 = (re *)_Block_copy(v3);
      uint64_t v12 = re::globalAllocators(v11)[2];
      void v20[2] = a1;
      _DWORD v20[3] = v12;
      v20[0] = &unk_26E736308;
      v20[1] = v11;
      void v20[4] = v20;
      uint64_t v18 = v12;
      uint64_t v19 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v17, (uint64_t)v20);
      AudioUnit = re::EventBus::getTypeId<REAudioPlayerDidCreateAudioUnitEvent>();
      unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v10, (uint64_t)AudioUnit);
      uint64_t v25 = v18;
      uint64_t v26 = 0;
      uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v24, (uint64_t)v17);
      uint64_t v22[5] = re::globalAllocators(v15)[2];
      int v23 = 0;
      uint64_t v21 = &unk_26E736430;
      uint64_t v22[3] = v25;
      uint8_t v22[4] = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v24);
      int v23 = &v21;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable((uint64_t)v24);
      uint64_t v5 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v21, v5, 0);
      re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v21);
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable((uint64_t)v17);
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable((uint64_t)v20);
    }
    else
    {
LABEL_9:
      uint64_t v5 = 0;
    }
  }

  return v5;
}

uint64_t REAudioPlayerComponentSetDidPrepareAudioUnitCallback(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6);
    if (!*(void *)(v7 + 16)) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 24);
    }
    while (v8);
    unint64_t v10 = *(re::EventBus **)(*(void *)(v9 + 16) + 288);
    if (v10)
    {
      uint64_t v11 = (re *)_Block_copy(v3);
      uint64_t v12 = re::globalAllocators(v11)[2];
      void v20[2] = a1;
      _DWORD v20[3] = v12;
      v20[0] = &unk_26E736370;
      v20[1] = v11;
      void v20[4] = v20;
      uint64_t v18 = v12;
      uint64_t v19 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v17, (uint64_t)v20);
      Type = re::EventBus::getTypeId<REAudioPlayerDidPrepareAudioUnitEvent>();
      unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v10, (uint64_t)Type);
      uint64_t v25 = v18;
      uint64_t v26 = 0;
      uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v24, (uint64_t)v17);
      uint64_t v22[5] = re::globalAllocators(v15)[2];
      int v23 = 0;
      uint64_t v21 = &unk_26E736488;
      uint64_t v22[3] = v25;
      uint8_t v22[4] = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v24);
      int v23 = &v21;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable((uint64_t)v24);
      uint64_t v5 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v21, v5, 0);
      re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v21);
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable((uint64_t)v17);
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable((uint64_t)v20);
    }
    else
    {
LABEL_9:
      uint64_t v5 = 0;
    }
  }

  return v5;
}

void REAudioPlayerComponentRemoveCallback(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 440))
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 464);
    uint64_t v5 = *(void *)(a1 + 448);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 456);
      uint64_t v8 = v7 + 32 * v6;
      if (*(void *)(v8 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v12 = *(void *)(a1 + 456);
        uint64_t v13 = v12 + 32 * v6;
        int v16 = *(_DWORD *)(v13 + 8);
        uint64_t v15 = (int *)(v13 + 8);
        int v14 = v16;
        if (v16 < 0)
        {
          *uint64_t v15 = v14 & 0x7FFFFFFF;

          uint64_t v12 = *(void *)(a1 + 456);
          int v14 = *(_DWORD *)(v12 + 32 * v6 + 8);
        }
        *(_DWORD *)(v12 + 32 * v6 + 8) = *(_DWORD *)(a1 + 476) | v14 & 0x80000000;
        *(_DWORD *)(a1 + 476) = v6;
        --*(_DWORD *)(a1 + 468);
        ++*(_DWORD *)(a1 + 480);
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v6;
          int v10 = *(_DWORD *)(v7 + 32 * v6 + 8);
          uint64_t v6 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          uint64_t v11 = v7 + 32 * v6;
          if (*(void *)(v11 + 16) == a2)
          {
            *(_DWORD *)(v7 + 32 * v9 + 8) = *(_DWORD *)(v7 + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t REAudioPlayerComponentGetAutoplay()
{
  return 0;
}

uint64_t REAudioPlayerComponentCopySizeOfAllComponentsInScene(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v3 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 24)) != 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(re::ecs2::AudioPlayerComponent ***)(v4 + 40);
    int v23 = &v7[v5];
    do
    {
      uint64_t v8 = [MEMORY[0x263EFF9A0] dictionaryWithDictionary:re::ecs2::AudioPlayerComponent::copySizeWithPathOfAssetsInAudioComponent(*v7)];
      unsigned int v9 = [v8 objectForKey:@"TotalSize"];

      if (v9)
      {
        uint64_t v24 = v6;
        int v10 = [v8 objectForKey:@"TotalSize"];
        uint64_t v11 = [v10 unsignedIntegerValue];

        [v8 removeObjectForKey:@"TotalSize"];
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        uint64_t v12 = [v8 allKeys];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v26;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v26 != v15) {
                objc_enumerationMutation(v12);
              }
              uint64_t v17 = *(void *)(*((void *)&v25 + 1) + 8 * i);
              uint64_t v18 = [v3 objectForKey:v17];

              if (v18)
              {
                uint64_t v19 = [v8 objectForKey:v17];
                v11 -= [v19 unsignedIntegerValue];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
          }
          while (v14);
        }

        uint64_t v6 = v11 + v24;
      }
      [v3 addEntriesFromDictionary:v8];

      ++v7;
    }
    while (v7 != v23);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  uint64_t v20 = [v3 copy];

  return v20;
}

uint64_t REAudioPlayerComponentCopySizeOfAudioPlayerComponentFromEntity(uint64_t a1, void *a2)
{
  unint64_t v3 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x263EFF9A0] dictionaryWithDictionary:re::ecs2::AudioPlayerComponent::copySizeWithPathOfAssetsInAudioComponent(v3)];
    uint64_t v5 = [v4 objectForKey:@"TotalSize"];

    if (v5)
    {
      uint64_t v6 = [v4 objectForKey:@"TotalSize"];
      uint64_t v5 = (void *)[v6 unsignedIntegerValue];

      [v4 removeObjectForKey:@"TotalSize"];
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  *a2 = v5;
  uint64_t v7 = [v4 copy];

  return v7;
}

void REAudioPlayerComponentGeneratorSetParameterValue(re::ecs2::AudioPlayerComponent **this, unint64_t a2, unint64_t a3, float a4)
{
  if (this) {
    re::ecs2::AudioPlayerComponent::setParameterValue(this, a2, a3, a4);
  }
}

double REAudioPlayerComponentGeneratorGetParameterValue(re::ecs2::AudioPlayerComponent *this, uint64_t a2, unint64_t a3)
{
  if (!this) {
    return 0.0;
  }
  *(float *)&double result = re::ecs2::AudioPlayerComponent::getParameterValue(this, a2, a3);
  return result;
}

uint64_t REAudioPlayerComponentSetDecibelGain(uint64_t result, float a2)
{
  *(float *)(result + ++*(void *)(result + 272) = a2;
  return result;
}

float REAudioPlayerComponentSetLinearGain(uint64_t a1, float a2)
{
  float result = log10f(a2) * 20.0;
  *(float *)(a1 + ++*(void *)(result + 272) = result;
  return result;
}

void REAudioPlayerComponentFadeDecibelGain(re::ecs2::AudioPlayerComponent **a1, float a2, float a3)
{
  float v5 = __exp10f(a2 / 20.0);
  re::ecs2::AudioPlayerComponent::setComponentFade(a1, v5, a3);
}

float REAudioPlayerComponentGetDecibelGain(uint64_t a1)
{
  return *(float *)(a1 + 272);
}

float REAudioPlayerComponentGetLinearGain(uint64_t a1)
{
  return __exp10f(*(float *)(a1 + 272) / 20.0);
}

void *REChannelAudioComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float REChannelAudioComponentSetLinearGain(uint64_t a1, float a2)
{
  float result = log10f(a2) * 20.0;
  *(float *)(a1 + 28) = result;
  return result;
}

float REChannelAudioComponentGetLinearGain(uint64_t a1)
{
  return __exp10f(*(float *)(a1 + 28) / 20.0);
}

float REChannelAudioComponentSetDecibelGain(uint64_t a1, float a2)
{
  float v3 = __exp10f(a2 / 20.0);
  float result = log10f(v3) * 20.0;
  *(float *)(a1 + 28) = result;
  return result;
}

float REChannelAudioComponentGetDecibelGain(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

void *REAmbientAudioComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float REAmbientAudioComponentSetLinearGain(uint64_t a1, float a2)
{
  float result = log10f(a2) * 20.0;
  *(float *)(a1 + 28) = result;
  return result;
}

float REAmbientAudioComponentGetLinearGain(uint64_t a1)
{
  return __exp10f(*(float *)(a1 + 28) / 20.0);
}

float REAmbientAudioComponentSetDecibelGain(uint64_t a1, float a2)
{
  float v3 = __exp10f(a2 / 20.0);
  float result = log10f(v3) * 20.0;
  *(float *)(a1 + 28) = result;
  return result;
}

float REAmbientAudioComponentGetDecibelGain(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

void *RESpatialAudioComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float RESpatialAudioComponentSetLinearGain(uint64_t a1, float a2)
{
  float result = log10f(a2) * 20.0;
  *(float *)(a1 + 56) = result;
  return result;
}

float RESpatialAudioComponentGetLinearGain(uint64_t a1)
{
  return __exp10f(*(float *)(a1 + 56) / 20.0);
}

float RESpatialAudioComponentSetDecibelGain(uint64_t a1, float a2)
{
  float v3 = __exp10f(a2 / 20.0);
  float result = log10f(v3) * 20.0;
  *(float *)(a1 + 56) = result;
  return result;
}

float RESpatialAudioComponentGetDecibelGain(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

uint64_t RESpatialAudioComponentSetDirectSendLevel(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float RESpatialAudioComponentGetDirectSendLevel(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t RESpatialAudioComponentSetReverbSendLevel(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

float RESpatialAudioComponentGetReverbSendLevel(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

void RESpatialAudioComponentSetRolloffFactor(uint64_t a1, float a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 296);
    int v10 = 134218240;
    double v11 = a2;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[CoreRE/API] Rolloff factor=%.2f on EntityID=%llu", (uint8_t *)&v10, 0x16u);
  }
  float v6 = *(float *)(a1 + 36);
  *(float *)(a1 + 36) = a2;
  if (v6 != a2)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
      {
        uint64_t v8 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(a1 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (*((void *)v8 + 18))
        {
          unsigned int v9 = *re::audioLogObjects(v8);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v10) = 0;
            _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "[CoreRE/API] Source rolloffFactor cannot be updated after a sound event has been prepared. SpatialAudioComponent.distanceAttenuation must be configured before calling Entity.prepareAudio().", (uint8_t *)&v10, 2u);
          }
        }
      }
    }
  }
}

float RESpatialAudioComponentGetRolloffFactor(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

void RESpatialAudioComponentSetSourceDirectivityMode(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  float v3 = *(float *)(a1 + 44);
  float v4 = *(float *)(a1 + 48);
  float v5 = *(float *)(a1 + 52);
  *(_DWORD *)(a1 + 40) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6
    && re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
  {
    uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(a1 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (*(_DWORD *)(a1 + 40) != v2
      || (*(float *)(a1 + 44) == v3 ? (BOOL v9 = *(float *)(a1 + 48) == v4) : (BOOL v9 = 0),
          v9 ? (BOOL v10 = *(float *)(a1 + 52) == v5) : (BOOL v10 = 0),
          !v10))
    {
      double v11 = *(re::ecs2::AudioPlayerComponent **)(v8 + 144);
      warnIfSourceDirectivityUpdatedAfterAssetsPreparedOnPlayer(v11);
    }
  }
}

uint64_t RESpatialAudioComponentGetSourceDirectivityMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void RESpatialAudioComponentSetDirectivityFocus(uint64_t a1, float a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  float v3 = *(float *)(a1 + 44);
  float v4 = *(float *)(a1 + 48);
  float v5 = *(float *)(a1 + 52);
  *(float *)(a1 + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6
    && re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
  {
    uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(a1 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (*(_DWORD *)(a1 + 40) != v2
      || (*(float *)(a1 + 44) == v3 ? (BOOL v9 = *(float *)(a1 + 48) == v4) : (BOOL v9 = 0),
          v9 ? (BOOL v10 = *(float *)(a1 + 52) == v5) : (BOOL v10 = 0),
          !v10))
    {
      double v11 = *(re::ecs2::AudioPlayerComponent **)(v8 + 144);
      warnIfSourceDirectivityUpdatedAfterAssetsPreparedOnPlayer(v11);
    }
  }
}

float RESpatialAudioComponentGetDirectivityFocus(uint64_t a1)
{
  return *(float *)(a1 + 44);
}

void RESpatialAudioComponentSetDirectivitySphericalCap(uint64_t a1, float a2, float a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  float v4 = *(float *)(a1 + 44);
  float v5 = *(float *)(a1 + 48);
  float v6 = *(float *)(a1 + 52);
  *(float *)(a1 + 48) = a2;
  *(float *)(a1 + 52) = a3;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    && re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
  {
    uint64_t v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(a1 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (*(_DWORD *)(a1 + 40) != v3
      || (*(float *)(a1 + 44) == v4 ? (BOOL v10 = *(float *)(a1 + 48) == v5) : (BOOL v10 = 0),
          v10 ? (BOOL v11 = *(float *)(a1 + 52) == v6) : (BOOL v11 = 0),
          !v11))
    {
      __int16 v12 = *(re::ecs2::AudioPlayerComponent **)(v9 + 144);
      warnIfSourceDirectivityUpdatedAfterAssetsPreparedOnPlayer(v12);
    }
  }
}

float RESpatialAudioComponentGetDirectivitySphericalCapDiameter(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

float RESpatialAudioComponentGetDirectivitySphericalCapOpeningAngle(uint64_t a1)
{
  return *(float *)(a1 + 52);
}

void *REAudioPlayerComponentFadeToGainWithDuration(re *a1, float a2, double a3)
{
  char v10[4] = *MEMORY[0x263EF8340];
  float v9 = a2;
  double v8 = a3;
  float v4 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v7) = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentFadeToGainWithDuration is deprecated", (uint8_t *)&v7, 2u);
  }
  uint64_t v7 = a1;
  float v5 = operator new(0x20uLL);
  *float v5 = &unk_26E7364E0;
  v5[1] = &v7;
  void v5[2] = &v9;
  void v5[3] = &v8;
  uint64_t v10[3] = v5;
  re::ecs2::AudioPlayerComponent::forEachToken((uint64_t)a1, (uint64_t)v10);
  return std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v10);
}

void *REAudioPlayerComponentSetPlaybackRate(re *a1, float a2)
{
  float32x4_t v7[4] = *MEMORY[0x263EF8340];
  float v6 = a2;
  int v3 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v5 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetPlaybackRate is deprecated", v5, 2u);
  }
  *(void *)float v5 = a1;
  v7[0] = &unk_26E736560;
  v7[1] = v5;
  void v7[2] = &v6;
  unint64_t v7[3] = v7;
  re::ecs2::AudioPlayerComponent::forEachToken((uint64_t)a1, (uint64_t)v7);
  return std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v7);
}

float REAudioPlayerComponentGetPlaybackRate(re *a1)
{
  int v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v5 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentGetPlaybackRate is deprecated", v5, 2u);
  }
  unint64_t Token = re::ecs2::AudioPlayerComponent::firstToken(a1);
  return re::ecs2::AudioPlayerComponent::playbackSpeed(a1, Token);
}

void REAudioPlayerComponentSetReverbBlend(re *a1)
{
  CFBundleRef v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v2 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetReverbBlend is deprecated. Use REAudioPlayerComponentSetReverbSendLevel", v2, 2u);
  }
}

double REAudioPlayerComponentGetReverbBlend(re *a1)
{
  CFBundleRef v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentGetReverbBlend is deprecated. Use REAudioPlayerComponentGetReverbSendLevel", v3, 2u);
  }
  return 0.0;
}

void *REAudioPlayerComponentSetReverbSendLevel(re *a1, float a2)
{
  float32x4_t v7[4] = *MEMORY[0x263EF8340];
  float v6 = a2;
  int v3 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v5 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentSetReverbSendLevel is deprecated", v5, 2u);
  }
  *(void *)float v5 = a1;
  v7[0] = &unk_26E7365E0;
  v7[1] = v5;
  void v7[2] = &v6;
  unint64_t v7[3] = v7;
  re::ecs2::AudioPlayerComponent::forEachToken((uint64_t)a1, (uint64_t)v7);
  return std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v7);
}

float REAudioPlayerComponentGetReverbSendLevel(re *a1)
{
  int v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v5 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentGetReverbSendLevel is deprecated", v5, 2u);
  }
  uint64_t Token = re::ecs2::AudioPlayerComponent::firstToken(a1);
  return re::ecs2::AudioPlayerComponent::reverbSendLevel(a1, Token);
}

void REAudioPlayerComponentResumeToken(re *a1, unint64_t a2)
{
  float v4 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioPlayerComponentResumeToken is deprecated", v5, 2u);
  }
  re::ecs2::AudioPlayerComponent::play((uint64_t)a1, a2, 1);
}

void REAudioPlayerComponentSetRolloffFactor(float *a1, float a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  float v4 = *re::audioLogObjects((re *)a1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    LOWORD(v11) = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE/API] REAudioPlayerComponentSetRolloffFactor is deprecated", (uint8_t *)&v11, 2u);
  }
  float v6 = *re::audioLogObjects((re *)v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = v6;
    uint64_t v8 = *((void *)a1 + 38);
    if (!v8) {
      uint64_t v8 = *((void *)a1 + 44);
    }
    int v11 = 134218240;
    double v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "[CoreRE/API] Rolloff factor=%.2f on Entity=%llu", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v9 = *((void *)a1 + 2);
  if (!v9 || (*(unsigned char *)(v9 + 288) & 0x80) != 0)
  {
    BOOL v10 = a1 + 71;
  }
  else
  {
    if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
      dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
    }
    BOOL v10 = (float *)(REEntityGetOrAddComponentByClass(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 36);
  }
  float *v10 = a2;
}

float REAudioPlayerComponentGetRolloffFactor(re *a1)
{
  int v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)float v6 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "[CoreRE/API] REAudioPlayerComponentGetRolloffFactor is deprecated", v6, 2u);
  }
  uint64_t v3 = *((void *)a1 + 2);
  if (!v3 || (*(unsigned char *)(v3 + 288) & 0x80) != 0)
  {
    uint64_t v4 = (uint64_t)a1 + 284;
  }
  else
  {
    if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
      dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
    }
    uint64_t v4 = REEntityGetOrAddComponentByClass(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 36;
  }
  return *(float *)v4;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

void *re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7362A0;
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7362A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidThrowErrorCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::size()
{
  return 24;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

void *re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736308;
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E736308;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentAddDidCreateAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::size()
{
  return 24;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

void *re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736370;
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E736370;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAudioPlayerComponentSetDidPrepareAudioUnitCallback::$_0,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::size()
{
  return 24;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E7363D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E7363D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7363D8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7363D8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidThrowErrorEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidThrowErrorEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E736430;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E736430;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736430;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736430;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidCreateAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidCreateAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E736488;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E736488;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736488;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736488;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAudioPlayerDidPrepareAudioUnitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAudioPlayerDidPrepareAudioUnitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::~__func()
{
}

__n128 std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26E7364E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7364E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
}

uint64_t std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REAudioPlayerComponentFadeToGainWithDuration::$_0,std::allocator<REAudioPlayerComponentFadeToGainWithDuration::$_0>,void ()(unsigned long long)>::target_type()
{
}

void std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::~__func()
{
}

__n128 std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_26E736560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E736560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
}

uint64_t std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REAudioPlayerComponentSetPlaybackRate::$_0,std::allocator<REAudioPlayerComponentSetPlaybackRate::$_0>,void ()(unsigned long long)>::target_type()
{
}

void std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::~__func()
{
}

__n128 std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_26E7365E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7365E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REAudioPlayerComponentSetReverbSendLevel::$_0,std::allocator<REAudioPlayerComponentSetReverbSendLevel::$_0>,void ()(unsigned long long)>::target_type()
{
}

uint64_t RETraceDeltaCreateMerged(uint64_t a1, uint64_t a2)
{
  re::make::shared::object<re::Shareable<re::TraceDelta>>((re *)a1, &v8);
  uint64_t v4 = v8;
  *(_OWORD *)(v8 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_OWORD *)(a1 + 24);
  re::DynamicArray<re::TraceEntry>::operator=(v4 + 40, (uint64_t *)(a1 + 40));
  re::TraceDelta::merge((re::TraceDelta *)(v8 + 24), (const re::TraceDelta *)(a2 + 24));
  uint64_t v5 = v8;
  id v6 = (id)(v8 + 8);
  if (v8) {

  }
  return v5;
}

uint64_t RETraceDeltaCreateFromData(re *a1)
{
  re::make::shared::object<re::Shareable<re::TraceDelta>>(a1, (uint64_t *)v5);
  if (RETraceDeltaLoadFromData(*(uint64_t *)v5, a1))
  {
    uint64_t v2 = *(void *)v5;
    id v3 = (id)(*(void *)v5 + 8);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(void *)v5) {

  }
  return v2;
}

uint64_t RETraceDeltaLoadFromData(uint64_t a1, CFDataRef theData)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v7 = &unk_26E7161C0;
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v9 = BytePtr;
  BOOL v10 = &BytePtr[CFDataGetLength(theData)];
  re::OPackReader::OPackReader((uint64_t)v11, (uint64_t)&v7);
  *(void *)(a1 + 32) = 0;
  re::DynamicArray<re::TraceEntry>::clear(a1 + 40);
  id v6 = (re::OPackReader *)v11;
  uint64_t v4 = re::TraceDeltaReader::read(&v6, (re::TraceDelta *)(a1 + 24));
  if (v14)
  {
    if (v18) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    ++v17;
  }
  re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v13);
  re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)&v12);
  return v4;
}

double RETraceDeltaGetTimestamp(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t RETraceDeltaGetFrameType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t RETraceDeltaGetEntryCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

unint64_t RETraceDeltaGetEntryAt(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(void *)(a1 + 56) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72) + ((unint64_t)a2 << 6);
  }
}

unint64_t RETraceDeltaFindEntry(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::TraceDelta::indexOf(a1 + 24, a2, a3, (uint64_t)v5);
  if (!v5[0] || (v6 & 0x80000000) != 0 || *(void *)(a1 + 56) <= (unint64_t)v6) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72) + ((unint64_t)v6 << 6);
  }
}

CFDataRef RETraceDeltaCopyToData(uint64_t a1)
{
  bytes = 0;
  v7[1] = 0;
  CFIndex length = 0;
  v7[0] = 0;
  int v9 = 0;
  re::DynamicArray<BOOL>::setCapacity(v7, 0x1000uLL);
  v6[0] = &unk_26E716118;
  v6[1] = v7;
  uint64_t v5 = v6;
  uint64_t v4 = (re::zerocopy **)&v5;
  re::TraceDeltaWriter::writeDelta(&v4, (const re::TraceDelta *)(a1 + 24));
  CFDataRef v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, length);
  if (v7[0] && bytes) {
    (*(void (**)(void))(*(void *)v7[0] + 40))();
  }
  return v2;
}

uint64_t RETraceEntryGetId(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RETraceEntryGetChildId(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t RETraceEntryGetMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t RETraceEntryGetSources(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t RETraceEntryGetData(uint64_t result, void *a2, void *a3)
{
  *a2 = *(void *)(result + 56);
  *a3 = *(void *)(result + 40);
  return result;
}

CFDataRef RETraceEntryCopyData(uint64_t a1)
{
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)(a1 + 56), *(void *)(a1 + 40));
}

double re::make::shared::object<re::Shareable<re::TraceDelta>>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 80, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E736660;
  double result = 0.0;
  *(_OWORD *)(v4 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  *a2 = v4;
  return result;
}

void *re::Shareable<re::TraceDelta>::~Shareable(void *a1)
{
  *a1 = &unk_26E736660;
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a1 + 5));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::TraceDelta>::~Shareable(void *a1)
{
  *a1 = &unk_26E736660;
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a1 + 5));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double REMakePose(double a1, double a2, double a3, double a4)
{
  return a4;
}

double REPoseIdentity()
{
  return 0.0;
}

double REPoseInverse(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vnegq_f32(a2);
  float32x4_t v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v2, v2), (int8x16_t)v2, 0xCuLL);
  int32x4_t v4 = (int32x4_t)vnegq_f32(a1);
  float32x4_t v5 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), a2), v3, a1);
  int32x4_t v6 = (int32x4_t)vaddq_f32(v5, v5);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  float32x4_t v8 = vsubq_f32(vmulq_laneq_f32(v7, a2, 3), a1);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), a2), v7, v3);
  *(void *)&double result = vaddq_f32(v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL)).u64[0];
  return result;
}

double REPoseTransformDirection(double a1, int32x4_t a2, int32x4_t a3)
{
  float32x4_t v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL);
  float32x4_t v4 = vnegq_f32((float32x4_t)a2);
  float32x4_t v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL), v4), (float32x4_t)a3, v3);
  int32x4_t v6 = (int32x4_t)vaddq_f32(v5, v5);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  float32x4_t v8 = vaddq_f32(vmulq_laneq_f32(v7, (float32x4_t)a2, 3), (float32x4_t)a3);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v4), v7, v3);
  *(void *)&double result = vaddq_f32(v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL)).u64[0];
  return result;
}

double REPoseInverseTransformDirection(double a1, float32x4_t a2, int32x4_t a3)
{
  int32x4_t v3 = (int32x4_t)vnegq_f32(a2);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
  float32x4_t v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL), a2), (float32x4_t)a3, v4);
  int32x4_t v6 = (int32x4_t)vaddq_f32(v5, v5);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  float32x4_t v8 = vaddq_f32(vmulq_laneq_f32(v7, a2, 3), (float32x4_t)a3);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), a2), v7, v4);
  *(void *)&double result = vaddq_f32(v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL)).u64[0];
  return result;
}

double REPoseTransformPosition(float32x4_t a1, int32x4_t a2, int32x4_t a3)
{
  float32x4_t v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL);
  float32x4_t v4 = vnegq_f32((float32x4_t)a2);
  float32x4_t v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL), v4), (float32x4_t)a3, v3);
  int32x4_t v6 = (int32x4_t)vaddq_f32(v5, v5);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  float32x4_t v8 = vaddq_f32(vmulq_laneq_f32(v7, (float32x4_t)a2, 3), (float32x4_t)a3);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v4), v7, v3);
  *(void *)&double result = vaddq_f32(a1, vaddq_f32(v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL))).u64[0];
  return result;
}

double REPoseInverseTransformPosition(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  int32x4_t v3 = (int32x4_t)vnegq_f32(a2);
  float32x4_t v4 = vsubq_f32(a3, a1);
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
  float32x4_t v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), a2), v4, v5);
  int32x4_t v7 = (int32x4_t)vaddq_f32(v6, v6);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  float32x4_t v9 = vaddq_f32(v4, vmulq_laneq_f32(v8, a2, 3));
  int32x4_t v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), a2), v8, v5);
  *(void *)&double result = vaddq_f32(v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL)).u64[0];
  return result;
}

double REPoseMultiply(float32x4_t a1, int32x4_t _Q1, int32x4_t a3, __n128 a4)
{
  _Q4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q1, _Q1), (int8x16_t)_Q1, 0xCuLL);
  float32x4_t v5 = vnegq_f32((float32x4_t)_Q1);
  float32x4_t v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL), v5), (float32x4_t)a3, _Q4);
  int32x4_t v7 = (int32x4_t)vaddq_f32(v6, v6);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v5), v8, _Q4);
  *(void *)&double result = vaddq_f32(a1, vaddq_f32(vaddq_f32((float32x4_t)a3, vmulq_laneq_f32(v8, (float32x4_t)_Q1, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL))).u64[0];
  _Q4.i32[0] = a4.n128_i32[3];
  __asm { FMLA            S3, S4, V1.S[3] }
  return result;
}

__n64 REConvertPoseToMatrix4x4F(double a1, float32x4_t a2)
{
  result.n64_f32[0] = 1.0
                    - (float)(vmuls_lane_f32(a2.f32[1] + a2.f32[1], *(float32x2_t *)a2.f32, 1)
                            + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 2));
  result.n64_f32[1] = vmuls_lane_f32(a2.f32[0] + a2.f32[0], *(float32x2_t *)a2.f32, 1)
                    + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 3);
  return result;
}

BOOL REPoseAreAlmostEqualWithDefaultTolerance(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v6[0] = a1;
  v6[1] = a2;
  v5[0] = a3;
  v5[1] = a4;
  return re::areAlmostEqual<float>((float *)v6, (float *)v5);
}

BOOL REPoseAreAlmostEqual(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float a5)
{
  if ((vmovn_s32(vceqq_f32(a2, a4)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a2, a4).f32[0]) > a5) {
    return 0;
  }
  float v5 = vabds_f32(a2.f32[1], a4.f32[1]);
  BOOL v6 = a2.f32[1] != a4.f32[1] && v5 > a5;
  if (v6
    || a2.f32[2] != a4.f32[2] && vabds_f32(a2.f32[2], a4.f32[2]) > a5
    || a2.f32[3] != a4.f32[3] && vabds_f32(a2.f32[3], a4.f32[3]) > a5
    || (vmovn_s32(vceqq_f32(a1, a3)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a1, a3).f32[0]) > a5
    || a1.f32[1] != a3.f32[1] && vabds_f32(a1.f32[1], a3.f32[1]) > a5)
  {
    return 0;
  }
  if (vabds_f32(a1.f32[2], a3.f32[2]) <= a5) {
    return 1;
  }
  return a1.f32[2] == a3.f32[2];
}

double REAABBEmpty()
{
  return *(double *)&_PromotedConst_1;
}

double REAABBTransform(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  v9[0] = a1;
  v9[1] = a2;
  v7[0] = a3;
  v7[1] = a4;
  void v7[2] = a5;
  unint64_t v7[3] = a6;
  re::AABB::transform(v9, v7, (uint64_t)&v8);
  return *(double *)&v8;
}

double REAABBCenter(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2 = (uint32x4_t)vcgtq_f32(a1, a2);
  v2.i32[3] = v2.i32[2];
  if ((vmaxvq_u32(v2) & 0x80000000) != 0) {
    return 0.0;
  }
  float32x4_t v3 = vaddq_f32(a1, a2);
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(v3, v4).u64[0];
  return result;
}

double REAABBExtents(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1);
  v2.i32[3] = 0;
  *(void *)&double result = vmaxnmq_f32(v2, (float32x4_t)0).u64[0];
  return result;
}

float REAABBRadius(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1);
  v2.i32[3] = 0;
  float32x4_t v3 = vmaxnmq_f32(v2, (float32x4_t)0);
  float32x4_t v4 = vmulq_f32(v3, v3);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0])* 0.5;
}

double REAABBVolume(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1);
  v2.i32[3] = 0;
  float32x4_t v3 = vmaxnmq_f32(v2, (float32x4_t)0);
  *(void *)&double result = vmulq_laneq_f32(vmulq_lane_f32(v3, *(float32x2_t *)v3.f32, 1), v3, 2).u64[0];
  return result;
}

float REAABBComputeDistanceSquaredToPoint(__n128 a1, __n128 a2, __n128 a3)
{
  uint64_t v3 = 0;
  v10[0] = a1;
  v10[1] = a2;
  __n128 v9 = a3;
  float result = 0.0;
  do
  {
    float v5 = v9.n128_f32[v3];
    float v6 = *(float *)((char *)v10 + v3 * 4);
    if (v5 >= v6)
    {
      float v8 = *(float *)((char *)&v10[1] + v3 * 4);
      float v7 = 0.0;
      if (v5 > v8) {
        float v7 = v5 - v8;
      }
    }
    else
    {
      float v7 = v5 - v6;
    }
    float result = result + (float)(v7 * v7);
    ++v3;
  }
  while (v3 != 3);
  return result;
}

uint64_t REAABBIsEmpty(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2 = (uint32x4_t)vcgtq_f32(a1, a2);
  v2.i32[3] = v2.i32[2];
  return vmaxvq_u32(v2) >> 31;
}

double REAABBExpandedToIncludePoint(float32x4_t a1, double a2, float32x4_t a3)
{
  a1.i32[3] = 0;
  a3.i32[3] = 0;
  a1.i64[0] = vminnmq_f32(a1, a3).u64[0];
  return *(double *)a1.i64;
}

double REAABBExpandedToIncludeBox(float32x4_t a1, double a2, float32x4_t a3)
{
  a1.i32[3] = 0;
  a3.i32[3] = 0;
  a1.i64[0] = vminnmq_f32(a1, a3).u64[0];
  return *(double *)a1.i64;
}

BOOL REAABBContainsPoint(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  uint32x4_t v3 = (uint32x4_t)vcgtq_f32(a1, a3);
  v3.i32[3] = v3.i32[2];
  if ((vmaxvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)vcgtq_f32(a3, a2);
  v4.i32[3] = v4.i32[2];
  return (vmaxvq_u32(v4) & 0x80000000) == 0;
}

BOOL REAABBContainsBox(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint32x4_t v4 = (uint32x4_t)vcgtq_f32(a1, a3);
  v4.i32[3] = v4.i32[2];
  if ((vmaxvq_u32(v4) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v5 = (uint32x4_t)vcgtq_f32(a3, a2);
  v5.i32[3] = v5.i32[2];
  if ((vmaxvq_u32(v5) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v6 = (uint32x4_t)vcgtq_f32(a1, a4);
  v6.i32[3] = v6.i32[2];
  if ((vmaxvq_u32(v6) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v7 = (uint32x4_t)vcgtq_f32(a4, a2);
  v7.i32[3] = v7.i32[2];
  return (vmaxvq_u32(v7) & 0x80000000) == 0;
}

BOOL REAABBIntersectsBox(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint32x4_t v4 = (uint32x4_t)vcgtq_f32(a1, a4);
  v4.i32[3] = v4.i32[2];
  if ((vmaxvq_u32(v4) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v5 = (uint32x4_t)vcgtq_f32(a3, a2);
  v5.i32[3] = v5.i32[2];
  return (vmaxvq_u32(v5) & 0x80000000) == 0;
}

uint64_t REAABBAreEqual(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint32x4_t v4 = (uint32x4_t)vceqq_f32(a1, a3);
  v4.i32[3] = v4.i32[2];
  if ((vminvq_u32(v4) & 0x80000000) == 0) {
    return 0;
  }
  uint32x4_t v6 = (uint32x4_t)vceqq_f32(a2, a4);
  v6.i32[3] = v6.i32[2];
  return vminvq_u32(v6) >> 31;
}

BOOL REAABBAreAlmostEqualWithDefaultTolerance(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  if ((vmovn_s32(vceqq_f32(a1, a3)).u8[0] & 1) == 0
    && fabsf(vsubq_f32(a1, a3).f32[0]) >= (float)((float)((float)(fabsf(a1.f32[0]) + fabsf(a3.f32[0])) + 1.0) * 0.00001)
    || a1.f32[1] != a3.f32[1]
    && vabds_f32(a1.f32[1], a3.f32[1]) >= (float)((float)((float)(fabsf(a1.f32[1]) + fabsf(a3.f32[1])) + 1.0) * 0.00001)
    || a1.f32[2] != a3.f32[2]
    && vabds_f32(a1.f32[2], a3.f32[2]) >= (float)((float)((float)(fabsf(a1.f32[2]) + fabsf(a3.f32[2])) + 1.0) * 0.00001)
    || (vmovn_s32(vceqq_f32(a2, a4)).u8[0] & 1) == 0
    && fabsf(vsubq_f32(a2, a4).f32[0]) >= (float)((float)((float)(fabsf(a2.f32[0]) + fabsf(a4.f32[0])) + 1.0) * 0.00001)
    || a2.f32[1] != a4.f32[1]
    && vabds_f32(a2.f32[1], a4.f32[1]) >= (float)((float)((float)(fabsf(a2.f32[1]) + fabsf(a4.f32[1])) + 1.0) * 0.00001))
  {
    return 0;
  }
  if (a2.f32[2] == a4.f32[2]) {
    return 1;
  }
  return vabds_f32(a2.f32[2], a4.f32[2]) < (float)((float)((float)(fabsf(a2.f32[2]) + fabsf(a4.f32[2])) + 1.0) * 0.00001);
}

BOOL REAABBAreAlmostEqual(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float a5)
{
  if ((vmovn_s32(vceqq_f32(a1, a3)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a1, a3).f32[0]) > a5) {
    return 0;
  }
  float v5 = vabds_f32(a1.f32[1], a3.f32[1]);
  if (a1.f32[1] != a3.f32[1] && v5 > a5) {
    return 0;
  }
  float v7 = vabds_f32(a1.f32[2], a3.f32[2]);
  BOOL v8 = a1.f32[2] != a3.f32[2] && v7 > a5;
  if (v8
    || (vmovn_s32(vceqq_f32(a2, a4)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a2, a4).f32[0]) > a5
    || a2.f32[1] != a4.f32[1] && vabds_f32(a2.f32[1], a4.f32[1]) > a5)
  {
    return 0;
  }
  if (vabds_f32(a2.f32[2], a4.f32[2]) <= a5) {
    return 1;
  }
  return a2.f32[2] == a4.f32[2];
}

void REConvertMatrices3x3ToIntrinsicEulers(float *a1, uint64_t a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  switch((int)a2)
  {
    case 0:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 1:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 2:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 3:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 4:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 5:
      if (a4)
      {
        do
        {
          a3 += 4;
          a1 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown rotation order", "!\"Unreachable code\"", "convertMatricesToIntrinsicEuler", 140);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2342EC13CLL);
  }
}

void REConvertIntrinsicEulersToMatrices3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  switch((int)a2)
  {
    case 0:
      if (a4)
      {
        float v5 = (float *)(a1 + 8);
        uint64_t v6 = a3 + 20;
        do
        {
          __float2 v7 = __sincosf_stret(*(v5 - 2));
          __float2 v8 = __sincosf_stret(*(v5 - 1));
          float v9 = *v5;
          v5 += 4;
          __float2 v10 = __sincosf_stret(v9);
          *(_OWORD *)(v6 - 20) = xmmword_23435FD50;
          *(_OWORD *)(v6 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = xmmword_23435FD60;
          *(_OWORD *)(v6 + 12) = xmmword_23435FD80;
          *(float *)(v6 - 20) = v8.__cosval * v10.__cosval;
          *(float *)(v6 - 16) = (float)(v7.__cosval * v10.__sinval)
                              + (float)((float)(v7.__sinval * v10.__cosval) * v8.__sinval);
          *(float *)(v6 + 12) = v8.__sinval;
          *(float *)(v6 + 16) = -(float)(v7.__sinval * v8.__cosval);
          *(float *)(v6 - 12) = (float)(v7.__sinval * v10.__sinval)
                              - (float)((float)(v7.__cosval * v10.__cosval) * v8.__sinval);
          *(float *)(v6 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = -(float)(v8.__cosval * v10.__sinval);
          *(float *)uint64_t v6 = (float)(v7.__cosval * v10.__cosval)
                       - (float)((float)(v7.__sinval * v10.__sinval) * v8.__sinval);
          *(float *)(v6 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v7.__sinval * v10.__cosval)
                             + (float)((float)(v7.__cosval * v10.__sinval) * v8.__sinval);
          *(float *)(v6 + 20) = v7.__cosval * v8.__cosval;
          v6 += 48;
          --v4;
        }
        while (v4);
      }
      break;
    case 1:
      if (a4)
      {
        int v11 = (float *)(a1 + 8);
        uint64_t v12 = (float *)(a3 + 20);
        do
        {
          __float2 v13 = __sincosf_stret(*(v11 - 2));
          __float2 v14 = __sincosf_stret(*(v11 - 1));
          float v15 = *v11;
          v11 += 4;
          __float2 v16 = __sincosf_stret(v15);
          *(v12 - 1) = (float)(v13.__sinval * v14.__sinval)
                     - (float)((float)(v13.__cosval * v14.__cosval) * v16.__sinval);
          *(v12 - 5) = v14.__cosval * v16.__cosval;
          *(v12 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v16.__sinval;
          uint64_t v12[3] = (float)(v13.__cosval * v14.__sinval) + (float)((float)(v13.__sinval * v14.__cosval) * v16.__sinval);
          char v12[4] = -(float)(v13.__sinval * v16.__cosval);
          *(v12 - 3) = -(float)(v14.__sinval * v16.__cosval);
          *uint64_t v12 = v13.__cosval * v16.__cosval;
          v12[1] = (float)(v13.__sinval * v14.__cosval) + (float)((float)(v13.__cosval * v14.__sinval) * v16.__sinval);
          _OWORD v12[5] = (float)(v13.__cosval * v14.__cosval) - (float)((float)(v13.__sinval * v14.__sinval) * v16.__sinval);
          v12 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 2:
      if (a4)
      {
        int v17 = (float *)(a1 + 8);
        uint64_t v18 = (float *)(a3 + 20);
        do
        {
          __float2 v19 = __sincosf_stret(*(v17 - 2));
          __float2 v20 = __sincosf_stret(*(v17 - 1));
          float v21 = *v17;
          v17 += 4;
          __float2 v22 = __sincosf_stret(v21);
          *(v18 - 5) = (float)(v20.__cosval * v22.__cosval)
                     - (float)((float)(v20.__sinval * v22.__sinval) * v19.__sinval);
          *(v18 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v20.__cosval * v22.__sinval)
                     + (float)((float)(v20.__sinval * v22.__cosval) * v19.__sinval);
          v18[3] = (float)(v20.__sinval * v22.__cosval) + (float)((float)(v20.__cosval * v22.__sinval) * v19.__sinval);
          _OWORD v18[4] = (float)(v20.__sinval * v22.__sinval) - (float)((float)(v20.__cosval * v22.__cosval) * v19.__sinval);
          *(v18 - 3) = -(float)(v19.__cosval * v20.__sinval);
          *(v18 - 1) = -(float)(v19.__cosval * v22.__sinval);
          *uint64_t v18 = v19.__cosval * v22.__cosval;
          v18[1] = v19.__sinval;
          uint64_t v18[5] = v19.__cosval * v20.__cosval;
          v18 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 3:
      if (a4)
      {
        int v23 = (float *)(a1 + 8);
        uint64_t v24 = (float *)(a3 + 20);
        do
        {
          __float2 v25 = __sincosf_stret(*(v23 - 2));
          __float2 v26 = __sincosf_stret(*(v23 - 1));
          float v27 = *v23;
          v23 += 4;
          __float2 v28 = __sincosf_stret(v27);
          *(v24 - 1) = -v28.__sinval;
          *(v24 - 5) = v26.__cosval * v28.__cosval;
          *(v24 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v25.__sinval * v26.__sinval)
                     + (float)((float)(v25.__cosval * v26.__cosval) * v28.__sinval);
          uint64_t v24[3] = v26.__sinval * v28.__cosval;
          void v24[4] = -(float)((float)(v25.__sinval * v26.__cosval)
                          - (float)((float)(v25.__cosval * v26.__sinval) * v28.__sinval));
          *(v24 - 3) = -(float)((float)(v25.__cosval * v26.__sinval)
                              - (float)((float)(v25.__sinval * v26.__cosval) * v28.__sinval));
          *uint64_t v24 = v25.__cosval * v28.__cosval;
          v24[1] = v25.__sinval * v28.__cosval;
          void v24[5] = (float)(v25.__cosval * v26.__cosval) + (float)((float)(v25.__sinval * v26.__sinval) * v28.__sinval);
          v24 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 4:
      if (a4)
      {
        uint64_t v29 = (float *)(a1 + 8);
        uint64_t v30 = (float *)(a3 + 20);
        do
        {
          __float2 v31 = __sincosf_stret(*(v29 - 2));
          __float2 v32 = __sincosf_stret(*(v29 - 1));
          float v33 = *v29;
          v29 += 4;
          __float2 v34 = __sincosf_stret(v33);
          *(v30 - 1) = -(float)((float)(v32.__cosval * v34.__sinval)
                              - (float)((float)(v32.__sinval * v34.__cosval) * v31.__sinval));
          *(v30 - 5) = (float)(v32.__cosval * v34.__cosval)
                     + (float)((float)(v32.__sinval * v34.__sinval) * v31.__sinval);
          *(v30 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v31.__cosval * v34.__sinval;
          void v30[3] = v31.__cosval * v32.__sinval;
          v30[4] = -v31.__sinval;
          *(v30 - 3) = -(float)((float)(v32.__sinval * v34.__cosval)
                              - (float)((float)(v32.__cosval * v34.__sinval) * v31.__sinval));
          *uint64_t v30 = v31.__cosval * v34.__cosval;
          v30[1] = (float)(v32.__sinval * v34.__sinval) + (float)((float)(v32.__cosval * v34.__cosval) * v31.__sinval);
          _OWORD v30[5] = v31.__cosval * v32.__cosval;
          v30 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    case 5:
      if (a4)
      {
        uint64_t v35 = (float *)(a1 + 8);
        uint64_t v36 = (float *)(a3 + 20);
        do
        {
          __float2 v37 = __sincosf_stret(*(v35 - 2));
          __float2 v38 = __sincosf_stret(*(v35 - 1));
          float v39 = *v35;
          v35 += 4;
          __float2 v40 = __sincosf_stret(v39);
          *(v36 - 5) = v38.__cosval * v40.__cosval;
          *(v36 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v38.__cosval * v40.__sinval;
          v36[3] = (float)(v37.__sinval * v40.__sinval) + (float)((float)(v37.__cosval * v40.__cosval) * v38.__sinval);
          v36[4] = -(float)((float)(v37.__sinval * v40.__cosval)
                          - (float)((float)(v37.__cosval * v40.__sinval) * v38.__sinval));
          *(v36 - 3) = -v38.__sinval;
          *(v36 - 1) = -(float)((float)(v37.__cosval * v40.__sinval)
                              - (float)((float)(v37.__sinval * v40.__cosval) * v38.__sinval));
          *uint64_t v36 = (float)(v37.__cosval * v40.__cosval) + (float)((float)(v37.__sinval * v40.__sinval) * v38.__sinval);
          v36[1] = v37.__sinval * v38.__cosval;
          v36[5] = v37.__cosval * v38.__cosval;
          v36 += 12;
          --v4;
        }
        while (v4);
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown rotation order", "!\"Unreachable code\"", "convertIntrinsicEulersToMatrices", 345);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2342EC588);
  }
}

void REConvertMatrices4x4ToIntrinsicEulers(uint64_t a1, uint64_t a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  float v5 = a3;
  switch((int)a2)
  {
    case 0:
      if (a4)
      {
        uint64_t v6 = (float *)(a1 + 20);
        do
        {
          float v7 = v6[3];
          if (v7 > 1.0) {
            float v7 = 1.0;
          }
          if (v7 < -1.0) {
            float v7 = -1.0;
          }
          v5[1] = asinf(v7);
          if (fabsf(v6[3]) >= 0.9999)
          {
            *float v5 = atan2f(v6[1], *v6);
            float v8 = 0.0;
          }
          else
          {
            *float v5 = atan2f(-v6[4], v6[5]);
            float v8 = atan2f(-*(v6 - 1), *(v6 - 5));
          }
          _OWORD v5[2] = v8;
          v6 += 16;
          v5 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    case 1:
      if (a4)
      {
        float v9 = (float *)(a1 + 20);
        do
        {
          float v10 = *(v9 - 4);
          if (v10 > 1.0) {
            float v10 = 1.0;
          }
          if (v10 < -1.0) {
            float v10 = -1.0;
          }
          _OWORD v5[2] = asinf(v10);
          if (fabsf(*(v9 - 4)) >= 0.9999)
          {
            *float v5 = 0.0;
            float v11 = v9[3];
            float v12 = v9[5];
          }
          else
          {
            *float v5 = atan2f(-v9[4], *v9);
            float v11 = -*(v9 - 3);
            float v12 = *(v9 - 5);
          }
          v5[1] = atan2f(v11, v12);
          v9 += 16;
          v5 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    case 2:
      if (a4)
      {
        __float2 v13 = (float *)(a1 + 20);
        __float2 v14 = a3 + 1;
        do
        {
          float v15 = v13[1];
          if (v15 > 1.0) {
            float v15 = 1.0;
          }
          if (v15 < -1.0) {
            float v15 = -1.0;
          }
          *(v14 - 1) = asinf(v15);
          if (fabsf(v13[1]) >= 0.9999)
          {
            *__float2 v14 = 0.0;
            float v16 = *(v13 - 5);
            float v17 = *(v13 - 4);
          }
          else
          {
            *__float2 v14 = atan2f(-*(v13 - 3), v13[5]);
            float v16 = *v13;
            float v17 = -*(v13 - 1);
          }
          v14[1] = atan2f(v17, v16);
          v13 += 16;
          v14 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    case 3:
      if (a4)
      {
        uint64_t v18 = (float *)(a1 + 20);
        do
        {
          float v19 = *(v18 - 1);
          if (v19 > 1.0) {
            float v19 = 1.0;
          }
          if (v19 < -1.0) {
            float v19 = -1.0;
          }
          _OWORD v5[2] = asinf(-v19);
          if (fabsf(*(v18 - 1)) >= 0.9999)
          {
            *float v5 = atan2f(-v18[4], v18[5]);
            float v20 = 0.0;
          }
          else
          {
            *float v5 = atan2f(v18[1], *v18);
            float v20 = atan2f(v18[3], *(v18 - 5));
          }
          v5[1] = v20;
          v18 += 16;
          v5 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    case 4:
      if (a4)
      {
        float v21 = (float *)(a1 + 40);
        __float2 v22 = a3 + 1;
        do
        {
          float v23 = *(v21 - 1);
          if (v23 >= -1.0) {
            float v24 = -v23;
          }
          else {
            float v24 = 1.0;
          }
          if (v24 < -1.0) {
            float v24 = -1.0;
          }
          *(v22 - 1) = asinf(v24);
          if (fabsf(*(v21 - 1)) >= 0.9999)
          {
            *__float2 v22 = atan2f(-*(v21 - 8), *(v21 - 10));
            float v25 = 0.0;
          }
          else
          {
            *__float2 v22 = atan2f(*(v21 - 2), *v21);
            float v25 = atan2f(*(v21 - 9), *(v21 - 5));
          }
          v22[1] = v25;
          v21 += 16;
          v22 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    case 5:
      if (a4)
      {
        __float2 v26 = (float *)(a1 + 20);
        do
        {
          float v27 = *(v26 - 3);
          if (v27 > 1.0) {
            float v27 = 1.0;
          }
          if (v27 < -1.0) {
            float v27 = -1.0;
          }
          v5[1] = asinf(-v27);
          if (fabsf(*(v26 - 3)) >= 0.9999)
          {
            *float v5 = 0.0;
            float v29 = *v26;
            float v28 = -*(v26 - 1);
          }
          else
          {
            *float v5 = atan2f(v26[1], v26[5]);
            float v29 = *(v26 - 5);
            float v28 = *(v26 - 4);
          }
          _OWORD v5[2] = atan2f(v28, v29);
          v26 += 16;
          v5 += 4;
          --v4;
        }
        while (v4);
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown rotation order", "!\"Unreachable code\"", "convertMatricesToIntrinsicEuler", 140);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2342EC9A8);
  }
}

void REConvertIntrinsicEulersToMatrices4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch((int)a2)
  {
    case 0:
      if (!a4) {
        return;
      }
      uint64_t v6 = (float *)(a1 + 8);
      uint64_t v7 = a3 + 24;
      uint64_t v8 = a4;
      do
      {
        __float2 v9 = __sincosf_stret(*(v6 - 2));
        __float2 v10 = __sincosf_stret(*(v6 - 1));
        float v11 = *v6;
        v6 += 4;
        __float2 v12 = __sincosf_stret(v11);
        *(_OWORD *)(v7 - 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = xmmword_23435FD50;
        *(_OWORD *)(v7 - 8) = xmmword_23435FD60;
        *(_OWORD *)(v7 + 8) = xmmword_23435FD80;
        *(_OWORD *)(v7 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = xmmword_23435FBB0;
        *(float *)(v7 - 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v10.__cosval * v12.__cosval;
        *(float *)(v7 - 20) = (float)(v9.__cosval * v12.__sinval)
                            + (float)((float)(v9.__sinval * v12.__cosval) * v10.__sinval);
        *(float *)(v7 - 8) = -(float)(v10.__cosval * v12.__sinval);
        *(float *)(v7 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v9.__cosval * v12.__cosval)
                           - (float)((float)(v9.__sinval * v12.__sinval) * v10.__sinval);
        *(float *)(v7 + 8) = v10.__sinval;
        *(float *)(v7 + 12) = -(float)(v9.__sinval * v10.__cosval);
        *(float *)(v7 - 16) = (float)(v9.__sinval * v12.__sinval)
                            - (float)((float)(v9.__cosval * v12.__cosval) * v10.__sinval);
        *(float *)uint64_t v7 = (float)(v9.__sinval * v12.__cosval) + (float)((float)(v9.__cosval * v12.__sinval) * v10.__sinval);
        *(float *)(v7 + 16) = v9.__cosval * v10.__cosval;
        v7 += 64;
        --v8;
      }
      while (v8);
      break;
    case 1:
      if (!a4) {
        return;
      }
      __float2 v13 = (float *)(a1 + 8);
      __float2 v14 = (float *)(a3 + 20);
      uint64_t v15 = a4;
      do
      {
        __float2 v16 = __sincosf_stret(*(v13 - 2));
        __float2 v17 = __sincosf_stret(*(v13 - 1));
        float v18 = *v13;
        v13 += 4;
        __float2 v19 = __sincosf_stret(v18);
        *(v14 - 1) = (float)(v16.__sinval * v17.__sinval) - (float)((float)(v16.__cosval * v17.__cosval) * v19.__sinval);
        *(v14 - 5) = v17.__cosval * v19.__cosval;
        *(v14 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v19.__sinval;
        uint64_t v14[3] = (float)(v16.__cosval * v17.__sinval) + (float)((float)(v16.__sinval * v17.__cosval) * v19.__sinval);
        _OWORD v14[4] = -(float)(v16.__sinval * v19.__cosval);
        *(v14 - 3) = -(float)(v17.__sinval * v19.__cosval);
        *__float2 v14 = v16.__cosval * v19.__cosval;
        v14[1] = (float)(v16.__sinval * v17.__cosval) + (float)((float)(v16.__cosval * v17.__sinval) * v19.__sinval);
        v14[5] = (float)(v16.__cosval * v17.__cosval) - (float)((float)(v16.__sinval * v17.__sinval) * v19.__sinval);
        v14 += 16;
        --v15;
      }
      while (v15);
      break;
    case 2:
      if (!a4) {
        return;
      }
      float v20 = (float *)(a1 + 8);
      float v21 = (float *)(a3 + 20);
      uint64_t v22 = a4;
      do
      {
        __float2 v23 = __sincosf_stret(*(v20 - 2));
        __float2 v24 = __sincosf_stret(*(v20 - 1));
        float v25 = *v20;
        v20 += 4;
        __float2 v26 = __sincosf_stret(v25);
        *(v21 - 5) = (float)(v24.__cosval * v26.__cosval) - (float)((float)(v24.__sinval * v26.__sinval) * v23.__sinval);
        *(v21 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v24.__cosval * v26.__sinval) + (float)((float)(v24.__sinval * v26.__cosval) * v23.__sinval);
        v21[3] = (float)(v24.__sinval * v26.__cosval) + (float)((float)(v24.__cosval * v26.__sinval) * v23.__sinval);
        void v21[4] = (float)(v24.__sinval * v26.__sinval) - (float)((float)(v24.__cosval * v26.__cosval) * v23.__sinval);
        *(v21 - 3) = -(float)(v23.__cosval * v24.__sinval);
        *(v21 - 1) = -(float)(v23.__cosval * v26.__sinval);
        *float v21 = v23.__cosval * v26.__cosval;
        v21[1] = v23.__sinval;
        v21[5] = v23.__cosval * v24.__cosval;
        v21 += 16;
        --v22;
      }
      while (v22);
      break;
    case 3:
      if (!a4) {
        return;
      }
      float v27 = (float *)(a1 + 8);
      float v28 = (float *)(a3 + 20);
      uint64_t v29 = a4;
      do
      {
        __float2 v30 = __sincosf_stret(*(v27 - 2));
        __float2 v31 = __sincosf_stret(*(v27 - 1));
        float v32 = *v27;
        v27 += 4;
        __float2 v33 = __sincosf_stret(v32);
        *(v28 - 1) = -v33.__sinval;
        *(v28 - 5) = v31.__cosval * v33.__cosval;
        *(v28 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (float)(v30.__sinval * v31.__sinval) + (float)((float)(v30.__cosval * v31.__cosval) * v33.__sinval);
        uint64_t v28[3] = v31.__sinval * v33.__cosval;
        void v28[4] = -(float)((float)(v30.__sinval * v31.__cosval)
                        - (float)((float)(v30.__cosval * v31.__sinval) * v33.__sinval));
        *(v28 - 3) = -(float)((float)(v30.__cosval * v31.__sinval)
                            - (float)((float)(v30.__sinval * v31.__cosval) * v33.__sinval));
        float *v28 = v30.__cosval * v33.__cosval;
        v28[1] = v30.__sinval * v33.__cosval;
        void v28[5] = (float)(v30.__cosval * v31.__cosval) + (float)((float)(v30.__sinval * v31.__sinval) * v33.__sinval);
        v28 += 16;
        --v29;
      }
      while (v29);
      break;
    case 4:
      if (!a4) {
        return;
      }
      __float2 v34 = (float *)(a1 + 8);
      uint64_t v35 = (float *)(a3 + 20);
      uint64_t v36 = a4;
      do
      {
        __float2 v37 = __sincosf_stret(*(v34 - 2));
        __float2 v38 = __sincosf_stret(*(v34 - 1));
        float v39 = *v34;
        v34 += 4;
        __float2 v40 = __sincosf_stret(v39);
        *(v35 - 1) = -(float)((float)(v38.__cosval * v40.__sinval)
                            - (float)((float)(v38.__sinval * v40.__cosval) * v37.__sinval));
        *(v35 - 5) = (float)(v38.__cosval * v40.__cosval) + (float)((float)(v38.__sinval * v40.__sinval) * v37.__sinval);
        *(v35 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v37.__cosval * v40.__sinval;
        v35[3] = v37.__cosval * v38.__sinval;
        v35[4] = -v37.__sinval;
        *(v35 - 3) = -(float)((float)(v38.__sinval * v40.__cosval)
                            - (float)((float)(v38.__cosval * v40.__sinval) * v37.__sinval));
        *uint64_t v35 = v37.__cosval * v40.__cosval;
        v35[1] = (float)(v38.__sinval * v40.__sinval) + (float)((float)(v38.__cosval * v40.__cosval) * v37.__sinval);
        v35[5] = v37.__cosval * v38.__cosval;
        v35 += 16;
        --v36;
      }
      while (v36);
      break;
    case 5:
      if (!a4) {
        return;
      }
      uint64_t v41 = (float *)(a1 + 8);
      uint64_t v42 = (float *)(a3 + 20);
      uint64_t v43 = a4;
      do
      {
        __float2 v44 = __sincosf_stret(*(v41 - 2));
        __float2 v45 = __sincosf_stret(*(v41 - 1));
        float v46 = *v41;
        v41 += 4;
        __float2 v47 = __sincosf_stret(v46);
        *(v42 - 5) = v45.__cosval * v47.__cosval;
        *(v42 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v45.__cosval * v47.__sinval;
        v42[3] = (float)(v44.__sinval * v47.__sinval) + (float)((float)(v44.__cosval * v47.__cosval) * v45.__sinval);
        id v42[4] = -(float)((float)(v44.__sinval * v47.__cosval)
                        - (float)((float)(v44.__cosval * v47.__sinval) * v45.__sinval));
        *(v42 - 3) = -v45.__sinval;
        *(v42 - 1) = -(float)((float)(v44.__cosval * v47.__sinval)
                            - (float)((float)(v44.__sinval * v47.__cosval) * v45.__sinval));
        float *v42 = (float)(v44.__cosval * v47.__cosval) + (float)((float)(v44.__sinval * v47.__sinval) * v45.__sinval);
        v42[1] = v44.__sinval * v45.__cosval;
        v42[5] = v44.__cosval * v45.__cosval;
        v42 += 16;
        --v43;
      }
      while (v43);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown rotation order", "!\"Unreachable code\"", "convertIntrinsicEulersToMatrices", 345);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2342ECE4CLL);
  }
  if (a4)
  {
    uint64_t v48 = a4 << 6;
    int v49 = (_OWORD *)(a3 + 48);
    do
    {
      *int v49 = xmmword_23435FBB0;
      v49 += 4;
      v48 -= 64;
    }
    while (v48);
  }
}

double REMakeQuatFromIntrinsicEulers(int a1, __n128 a2)
{
  __n128 v3 = a2;
  long long v4 = xmmword_23435FBB0;
  re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v3, 1, a1, (uint64_t)&v4, 1);
  return *(double *)&v4;
}

double REMakeIntrinsicEulersFromQuat(int a1, __n128 a2)
{
  __n128 v3 = a2;
  long long v4 = 0u;
  re::convertQuaternionsToIntrinsicEulers<float>((uint64_t)&v3, 1, a1, (uint64_t)&v4, 1);
  return *(double *)&v4;
}

double REMakeSRTFromMatrix(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v5[0] = a1;
  v5[1] = a2;
  _OWORD v5[2] = a3;
  void v5[3] = a4;
  long long v7 = xmmword_23435FBB0;
  int32x4_t v8 = 0u;
  long long v6 = 0u;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v5, &v8, &v7, &v6);
  return *(double *)v8.i64;
}

double RESRTZero()
{
  return 0.0;
}

__n128 RESRTIdentity()
{
  __asm { FMOV            V0.4S, #1.0 }
  return result;
}

double RESRTMatrix(float a1, float32x4_t a2)
{
  v2.i32[3] = 0;
  v2.f32[0] = 1.0
            - (float)(vmuls_lane_f32(a2.f32[1] + a2.f32[1], *(float32x2_t *)a2.f32, 1)
                    + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 2));
  v2.f32[1] = vmuls_lane_f32(a2.f32[0] + a2.f32[0], *(float32x2_t *)a2.f32, 1)
            + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 3);
  v2.f32[2] = vmuls_lane_f32(a2.f32[0] + a2.f32[0], a2, 2) - vmuls_lane_f32(a2.f32[1] + a2.f32[1], a2, 3);
  *(void *)&double result = vmulq_n_f32(v2, a1).u64[0];
  return result;
}

double RESRTInverse(float32x4_t a1)
{
  __asm { FMOV            V3.4S, #1.0 }
  *(void *)&double result = vdivq_f32(_Q3, a1).u64[0];
  return result;
}

BOOL RESRTAreAlmostEqual(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7)
{
  if ((vmovn_s32(vceqq_f32(a1, a4)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a1, a4).f32[0]) > a7) {
    return 0;
  }
  float v7 = vabds_f32(a1.f32[1], a4.f32[1]);
  if (a1.f32[1] != a4.f32[1] && v7 > a7) {
    return 0;
  }
  float v9 = vabds_f32(a1.f32[2], a4.f32[2]);
  BOOL v10 = a1.f32[2] != a4.f32[2] && v9 > a7;
  if (v10
    || (vmovn_s32(vceqq_f32(a2, a5)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a2, a5).f32[0]) > a7
    || a2.f32[1] != a5.f32[1] && vabds_f32(a2.f32[1], a5.f32[1]) > a7
    || a2.f32[2] != a5.f32[2] && vabds_f32(a2.f32[2], a5.f32[2]) > a7
    || a2.f32[3] != a5.f32[3] && vabds_f32(a2.f32[3], a5.f32[3]) > a7
    || (vmovn_s32(vceqq_f32(a3, a6)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a3, a6).f32[0]) > a7
    || a3.f32[1] != a6.f32[1] && vabds_f32(a3.f32[1], a6.f32[1]) > a7)
  {
    return 0;
  }
  if (vabds_f32(a3.f32[2], a6.f32[2]) <= a7) {
    return 1;
  }
  return a3.f32[2] == a6.f32[2];
}

BOOL RESRTAreAlmostSame(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7)
{
  if ((vmovn_s32(vceqq_f32(a1, a4)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a1, a4).f32[0]) > a7) {
    return 0;
  }
  float v7 = vabds_f32(a1.f32[1], a4.f32[1]);
  if (a1.f32[1] != a4.f32[1] && v7 > a7) {
    return 0;
  }
  float v9 = vabds_f32(a1.f32[2], a4.f32[2]);
  if (a1.f32[2] != a4.f32[2] && v9 > a7) {
    return 0;
  }
  if (((vmovn_s32(vceqq_f32(a2, a5)).u8[0] & 1) != 0 || fabsf(vsubq_f32(a2, a5).f32[0]) <= a7)
    && (a2.f32[1] == a5.f32[1] || vabds_f32(a2.f32[1], a5.f32[1]) <= a7)
    && (a2.f32[2] == a5.f32[2] || vabds_f32(a2.f32[2], a5.f32[2]) <= a7))
  {
    BOOL v11 = a2.f32[3] == a5.f32[3];
    if (vabds_f32(a2.f32[3], a5.f32[3]) <= a7) {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  if ((float32x4_t v12 = vnegq_f32(a2), (vmovn_s32(vceqq_f32(a5, v12)).u8[0]) || fabsf(vsubq_f32(v12, a5).f32[0]) <= a7)
    && (v12.f32[1] == a5.f32[1] || vabds_f32(v12.f32[1], a5.f32[1]) <= a7)
    && (v12.f32[2] == a5.f32[2] || vabds_f32(v12.f32[2], a5.f32[2]) <= a7))
  {
    BOOL v13 = v12.f32[3] == a5.f32[3];
    if (vabds_f32(v12.f32[3], a5.f32[3]) <= a7) {
      BOOL v13 = 1;
    }
  }
  else
  {
    BOOL v13 = 0;
  }
  if (!v11 && !v13
    || (vmovn_s32(vceqq_f32(a3, a6)).u8[0] & 1) == 0 && fabsf(vsubq_f32(a3, a6).f32[0]) > a7
    || a3.f32[1] != a6.f32[1] && vabds_f32(a3.f32[1], a6.f32[1]) > a7)
  {
    return 0;
  }
  if (vabds_f32(a3.f32[2], a6.f32[2]) <= a7) {
    return 1;
  }
  return a3.f32[2] == a6.f32[2];
}

double RESRTLerp(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7)
{
  v10[0] = a1;
  v10[1] = a2;
  _OWORD v10[2] = a3;
  v9[0] = a4;
  v9[1] = a5;
  float32x4_t v9[2] = a6;
  re::lerp<float>(v10, v9, &v8, a7);
  return *(double *)v8.i64;
}

double REMakePlane(double a1, double a2)
{
  return a2;
}

double REMakePlaneFromPoints(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3 = vsubq_f32(a2, a1);
  float32x4_t v4 = vsubq_f32(a3, a2);
  int32x4_t v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32(v3)), v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL));
  *(void *)&double result = vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL).u64[0];
  return result;
}

double REComposeMatrix(float a1, float32x4_t a2)
{
  v2.i32[3] = 0;
  v2.f32[0] = 1.0
            - (float)(vmuls_lane_f32(a2.f32[1] + a2.f32[1], *(float32x2_t *)a2.f32, 1)
                    + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 2));
  v2.f32[1] = vmuls_lane_f32(a2.f32[0] + a2.f32[0], *(float32x2_t *)a2.f32, 1)
            + vmuls_lane_f32(a2.f32[2] + a2.f32[2], a2, 3);
  v2.f32[2] = vmuls_lane_f32(a2.f32[0] + a2.f32[0], a2, 2) - vmuls_lane_f32(a2.f32[1] + a2.f32[1], a2, 3);
  *(void *)&double result = vmulq_n_f32(v2, a1).u64[0];
  return result;
}

double REDecomposeMatrix(int32x4_t *a1, long long *a2, _OWORD *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v14[0] = a4;
  v14[1] = a5;
  v14[2] = a6;
  uint64_t v14[3] = a7;
  long long v12 = 0u;
  int32x4_t v13 = 0u;
  long long v11 = xmmword_23435FBB0;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v14, &v13, &v11, &v12);
  *a1 = v13;
  *a2 = v11;
  double result = *(double *)&v12;
  *a3 = v12;
  return result;
}

double REMatrix4x4TransformDirection(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, float32x4_t a5)
{
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, a5.f32[0]), a2, *(float32x2_t *)a5.f32, 1), a3, a5, 2).u64[0];
  return result;
}

double REMatrix4x4TransformPosition(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a4, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, a5.f32[0]), a2, *(float32x2_t *)a5.f32, 1), a3, a5, 2));
  *(void *)&double result = vdivq_f32(v5, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 3)).u64[0];
  return result;
}

double REMatrix4x4TransformNormal(simd_float3x3 a1, double a2, float32x4_t a3)
{
  simd_float3x3 v6 = __invert_f3(a1);
  float32x4_t v3 = (float32x4_t)vtrn2q_s32((int32x4_t)v6.columns[0], (int32x4_t)v6.columns[1]);
  v3.i32[2] = v6.columns[2].i32[1];
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v6.columns[0], (int32x4_t)v6.columns[2]), (int32x4_t)v6.columns[1]), a3.f32[0]), v3, *(float32x2_t *)a3.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v6.columns[0], (int32x4_t)v6.columns[2]), vdupq_laneq_s32((int32x4_t)v6.columns[1], 2)), a3, 2).u64[0];
  return result;
}

__n64 REMakeLookAtViewMatrix4x4(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3 = vsubq_f32(a1, a2);
  int32x4_t v4 = (int32x4_t)vmulq_f32(v3, v3);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  float32x4_t v7 = vmulq_n_f32(v3, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  float32x4_t v9 = vmlaq_f32(vmulq_f32(v8, vnegq_f32(a3)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
  v10.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), *(float32x2_t *)v10.i8)).u32[0];
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  *(float32x2_t *)v9.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v9.f32 = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32)));
  float32x4_t v12 = vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32))).f32[0]);
  result.n64_u32[0] = v12.i32[0];
  result.n64_u32[1] = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v12, *(int32x4_t *)&v12), *(int8x16_t *)&v12, 0xCuLL), vnegq_f32(v7)), v12, v8).u32[2];
  __asm { FMOV            V3.4S, #1.0 }
  return result;
}

float REMatrix4x4MakeOrthographic(float a1)
{
  return 2.0 / a1;
}

float REMatrix4x4MakeOrthographicReverseDepth(float a1)
{
  return 2.0 / a1;
}

float REMatrix4x4MakeOrthographicOffCenter(float a1, float a2)
{
  float result = 2.0 / (float)(a2 - a1);
  __asm { FMOV            V3.4S, #1.0 }
  return result;
}

float REMatrix4x4MakeOrthographicOffCenterReverseDepth(float a1, float a2)
{
  float result = 2.0 / (float)(a2 - a1);
  __asm { FMOV            V3.4S, #1.0 }
  return result;
}

float REMatrix4x4MakePerspective(float a1, double a2, float a3)
{
  return (float)(a3 + a3) / a1;
}

void REMatrix4x4MakePerspectiveFieldOfView(float a1)
{
}

double REMatrix4x4MakePerspectiveFieldOfViewReverseDepth(float a1, float a2, float a3, float a4)
{
  re::Projection::makePerspectiveFieldOfViewReverseDepth(a1, a2, a3, a4, &v5);
  return *(double *)&v5;
}

float REMatrix4x4MakePerspectiveOffCenter(float a1, float a2, double a3, double a4, float a5, float a6)
{
  float result = (float)(a5 + a5) / (float)(a2 - a1);
  if (a6 == INFINITY) {
    __asm { FMOV            V2.4S, #-1.0 }
  }
  else {
    __asm { FMOV            V2.4S, #-1.0 }
  }
  return result;
}

double REMatrix4x4MakeReverseDepth(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v5[0] = a1;
  v5[1] = a2;
  _OWORD v5[2] = a3;
  void v5[3] = a4;
  re::Projection::makeReverseDepth(v5, &v6);
  return *(double *)&v6;
}

float REProjectionSetPerspective(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(float *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  *(float *)(a1 + 8) = a4;
  float v8 = tanf(a5 * 0.5) * a3;
  *(float *)(a1 + 20) = v8;
  *(float *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = -v8;
  float result = v8 * a6;
  *(float *)(a1 + 12) = -(float)(v8 * a6);
  *(float *)(a1 + 16) = v8 * a6;
  return result;
}

float REProjectionSetOrthographic(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 48) = a2;
  *(float *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = -(float)(a5 * 0.5);
  *(float *)(a1 + 16) = a5 * 0.5;
  float result = -(float)(a6 * 0.5);
  *(float *)(a1 + 20) = a6 * 0.5;
  *(float *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = result;
  return result;
}

double REConvertMatrix4x4ToProjection@<D0>(_OWORD *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  *(_DWORD *)int32x4_t v10 = 0;
  *(_OWORD *)&char v10[4] = xmmword_234390F00;
  *(void *)&v10[20] = 0xBDCCCCCD3DCCCCCDLL;
  v10[28] = 0;
  long long v11 = xmmword_23435FD80;
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  v9[0] = a2;
  v9[1] = a3;
  float32x4_t v9[2] = a4;
  float32x4_t v9[3] = a5;
  re::Projection::setFromMatrix4x4F((uint64_t)v10, (uint64_t)v9);
  long long v6 = *(_OWORD *)&v10[16];
  *a1 = *(_OWORD *)v10;
  a1[1] = v6;
  double result = *(double *)&v11;
  long long v8 = v12;
  a1[2] = v11;
  a1[3] = v8;
  return result;
}

double REConvertProjectionToMatrix4x4(re::Projection *a1)
{
  re::Projection::computeMatrix4x4F(a1, (uint64_t)&v2);
  return *(double *)&v2;
}

float re::Projection::setFovY(re::Projection *this, float a2)
{
  float v4 = *((float *)this + 3);
  float v3 = *((float *)this + 4);
  float v5 = *((float *)this + 5);
  float v6 = *((float *)this + 6);
  float v7 = (float)(v3 - v4) / (float)(v5 - v6);
  float v8 = (float)(v3 + v4) * 0.5;
  float v9 = (float)(v5 + v6) * 0.5;
  float v10 = *((float *)this + 1);
  float v11 = v10 * tanf(a2 * 0.5);
  float v12 = v7 * v11;
  *((float *)this + 5) = v9 + v11;
  *((float *)this + 6) = v9 - v11;
  float result = v8 + (float)(v7 * v11);
  *((float *)this + 3) = v8 - v12;
  *((float *)this + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = result;
  return result;
}

float REProjectionFovY(float *a1)
{
  float v1 = atan2f((float)(a1[5] - a1[6]) * 0.5, a1[1]);
  return v1 + v1;
}

float REProjectionSetFovX(float *a1, float a2)
{
  float v4 = a1[3];
  float v3 = a1[4];
  float v5 = a1[5];
  float v6 = a1[6];
  float v7 = (float)(v3 - v4) / (float)(v5 - v6);
  float v8 = (float)(v3 + v4) * 0.5;
  float v9 = (float)(v5 + v6) * 0.5;
  float v10 = a1[1];
  float v11 = v10 * tanf(a2 * 0.5);
  a1[5] = v9 + (float)(v11 / v7);
  a1[6] = v9 - (float)(v11 / v7);
  float v12 = v8 + v11;
  float result = v8 - v11;
  a1[3] = result;
  a1[4] = v12;
  return result;
}

float REProjectionFovX(float *a1)
{
  float v1 = atan2f((float)(a1[4] - a1[3]) * 0.5, a1[1]);
  return v1 + v1;
}

float REProjectionSetAspect(float *a1, float a2)
{
  float v2 = (float)(a1[3] + a1[4]) * 0.5;
  float v3 = (float)((float)(a1[5] - a1[6]) * 0.5) * a2;
  float v4 = v2 + v3;
  float result = v2 - v3;
  a1[3] = result;
  a1[4] = v4;
  return result;
}

float REProjectionAspect(float *a1)
{
  return (float)(a1[4] - a1[3]) / (float)(a1[5] - a1[6]);
}

float REProjectionClipSpaceNearZ(uint64_t a1)
{
  float result = 0.0;
  if (*(_DWORD *)(a1 + 48) == 1) {
    return 1.0;
  }
  return result;
}

float REProjectionClipSpaceFarZ(uint64_t a1)
{
  float result = 1.0;
  if (*(_DWORD *)(a1 + 48) == 1) {
    return 0.0;
  }
  return result;
}

double REProjectionProjectPoint(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a4, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, a5.f32[0]), a2, *(float32x2_t *)a5.f32, 1), a3, a5, 2));
  *(void *)&double result = vdivq_f32(v5, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 3)).u64[0];
  return result;
}

double REProjectionUnprojectPoint(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  v6[0] = a1;
  v6[1] = a2;
  _OWORD v6[2] = a3;
  uint64_t v6[3] = a4;
  return COERCE_DOUBLE(re::Projection::unprojectPoint((float32x2_t *)v6, a5.n128_i64[0], a5.n128_i32[2]));
}

double RECustomProjectionUnprojectPoint(simd_float4x4 a1, float32x4_t a2)
{
  simd_float4x4 v4 = __invert_f4(a1);
  v4.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v4.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v4.columns[0], a2.f32[0]), (float32x4_t)v4.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v4.columns[2], a2, 2));
  *(void *)&double result = vdivq_f32((float32x4_t)v4.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v4.columns[0], 3)).u64[0];
  return result;
}

void re::anonymous namespace'::matrixToEulerXYZ<re::Matrix3x3<float>,float>(float *a1, float *a2)
{
  float v4 = a1[8];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  a2[1] = asinf(v4);
  if (fabsf(a1[8]) >= 0.9999)
  {
    *a2 = atan2f(a1[6], a1[5]);
    float v5 = 0.0;
  }
  else
  {
    *a2 = atan2f(-a1[9], a1[10]);
    float v5 = atan2f(-a1[4], *a1);
  }
  a2[2] = v5;
}

void re::anonymous namespace'::matrixToEulerYZX<re::Matrix3x3<float>,float>(float *a1, uint64_t a2)
{
  float v4 = a1[1];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  *(float *)(a2 + 8) = asinf(v4);
  if (fabsf(a1[1]) >= 0.9999)
  {
    *(_DWORD *)a2 = 0;
    float v5 = a1[8];
    float v6 = a1[10];
  }
  else
  {
    *(float *)a2 = atan2f(-a1[9], a1[5]);
    float v5 = -a1[2];
    float v6 = *a1;
  }
  *(float *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = atan2f(v5, v6);
}

void re::anonymous namespace'::matrixToEulerZXY<re::Matrix3x3<float>,float>(float *a1, uint64_t a2)
{
  float v4 = a1[6];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  *(float *)a2 = asinf(v4);
  if (fabsf(a1[6]) >= 0.9999)
  {
    *(_DWORD *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    float v5 = *a1;
    float v6 = a1[1];
  }
  else
  {
    *(float *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = atan2f(-a1[2], a1[10]);
    float v5 = a1[5];
    float v6 = -a1[4];
  }
  *(float *)(a2 + 8) = atan2f(v6, v5);
}

void re::anonymous namespace'::matrixToEulerXZY<re::Matrix3x3<float>,float>(float *a1, float *a2)
{
  float v4 = a1[4];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  a2[2] = asinf(-v4);
  if (fabsf(a1[4]) >= 0.9999)
  {
    *a2 = atan2f(-a1[9], a1[10]);
    float v5 = 0.0;
  }
  else
  {
    *a2 = atan2f(a1[6], a1[5]);
    float v5 = atan2f(a1[8], *a1);
  }
  a2[1] = v5;
}

void re::anonymous namespace'::matrixToEulerYXZ<re::Matrix3x3<float>,float>(float *a1, float *a2)
{
  float v4 = a1[9];
  float v5 = -v4;
  BOOL v6 = v4 < -1.0;
  float v7 = 1.0;
  if (!v6) {
    float v7 = v5;
  }
  if (v7 < -1.0) {
    float v7 = -1.0;
  }
  *a2 = asinf(v7);
  if (fabsf(a1[9]) >= 0.9999)
  {
    a2[1] = atan2f(-a1[2], *a1);
    float v8 = 0.0;
  }
  else
  {
    a2[1] = atan2f(a1[8], a1[10]);
    float v8 = atan2f(a1[1], a1[5]);
  }
  a2[2] = v8;
}

void re::anonymous namespace'::matrixToEulerZYX<re::Matrix3x3<float>,float>(float *a1, uint64_t a2)
{
  float v4 = a1[2];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  *(float *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = asinf(-v4);
  if (fabsf(a1[2]) >= 0.9999)
  {
    *(_DWORD *)a2 = 0;
    float v6 = a1[5];
    float v5 = -a1[4];
  }
  else
  {
    *(float *)a2 = atan2f(a1[6], a1[10]);
    float v6 = *a1;
    float v5 = a1[1];
  }
  *(float *)(a2 + 8) = atan2f(v5, v6);
}

uint64_t RESceneUnderstandingComponentSetIdentifier(uint64_t a1, void *a2)
{
  return [a2 getUUIDBytes:a1 + 25];
}

id RESceneUnderstandingComponentGetIdentifier(uint64_t a1)
{
  float v1 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a1 + 25];
  return v1;
}

uint64_t RESceneUnderstandingComponentSetIdentifierPtr(uint64_t this, _OWORD *a2)
{
  *(_OWORD *)(this + 25) = *a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESceneUnderstandingComponentGetIdentifierPtr(uint64_t a1)
{
  return a1 + 25;
}

uint64_t RESceneUnderstandingComponentSetEntityType(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 41) = a2;
  *(unsigned char *)(this + 42) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RESceneUnderstandingComponentIsEntityType(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return (*(unsigned char *)(a1 + 42) & a3) != 0 && *(unsigned __int8 *)(a1 + 41) == a2;
}

uint64_t RESceneUnderstandingComponentGetSourceType(uint64_t a1)
{
  return *(char *)(a1 + 42);
}

void *RESceneUnderstandingComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *RESceneUnderstandingRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *RESceneUnderstandingRenderOptionsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RESceneUnderstandingRootComponentSetUpdateId(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t RESceneUnderstandingRootComponentGetUpdateId(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetOcclusionEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetWireframeEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsWireframeEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetDepthFeatheringEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 27) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsDepthFeatheringEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 27);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetGuidedFilterOcclusionSupportEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 28) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsGuidedFilterOcclusionSupportEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetGuidedFilterOcclusionEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 29) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsGuidedFilterOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetShadowEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 30) != a2)
  {
    *(unsigned char *)(this + 30) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsShadowEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 30);
}

uint64_t RESceneUnderstandingRenderOptionsComponentSetPhysicsEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 31) = a2;
  return result;
}

uint64_t RESceneUnderstandingRenderOptionsComponentIsPhysicsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 31);
}

void *REStaticTextComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 *REStaticTextComponentSetColor(__n128 *result, __n128 a2)
{
  result[8] = a2;
  result[9].n128_u8[0] = 0;
  return result;
}

__n128 *REStaticTextComponentSetColorGamut4F(__n128 *result, unsigned __int8 a2, __n128 a3)
{
  result[8] = a3;
  result[9].n128_u8[0] = a2;
  return result;
}

double REStaticTextComponentGetColor(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 144);
  long long v3 = *(_OWORD *)(a1 + 128);
  char v4 = v1;
  re::ColorGamut4F::as((uint64_t)&v3, 0, 1, (uint64_t)v5);
  return v5[0];
}

__n128 REStaticTextComponentGetColorGamut4F(__n128 *a1, __n128 *a2, unsigned __int8 *a3)
{
  __n128 result = a1[8];
  unsigned __int8 v4 = a1[9].n128_u8[0];
  *a2 = result;
  *a3 = v4;
  return result;
}

uint64_t REStaticTextComponentSetTextAnchor(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t REStaticTextComponentGetTextAnchor(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

double REStaticTextComponentComputeObjectSpaceSize(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

re::DynamicString *REStaticTextComponentSetText(uint64_t a1, char *__s)
{
  float v2 = (re::DynamicString *)(a1 + 40);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REStaticTextComponentGetText(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return *(void *)(a1 + 56);
  }
  else {
    return a1 + 49;
  }
}

void REStaticTextComponentSetFont(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REStaticTextComponentGetFont(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void *REVisualProxyComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *REVisualProxyFilterComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REVisualProxyOptionsCreate(re *a1)
{
  char v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 128, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E736710;
  double result = 0.0;
  *(_OWORD *)(v2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(unsigned char *)(v2 + 25) = 1;
  *(void *)(v2 + 48) = 0x20000000200;
  *(_DWORD *)(v2 + 56) = 71;
  *(_OWORD *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 112) = 0x7FFFFFFF00000000;
  *(void *)(v2 + 120) = 0;
  return result;
}

uint64_t REVisualProxyOptionsSetCreateBillboard(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

void REVisualProxyOptionsSetCamera(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    objc_initWeak(&location, (id)(a2 + 8));
    LOBYTE(v5) = 1;
    id v6 = 0;
    objc_moveWeak(&v6, &location);
    re::Optional<re::VideoHistogramConfig>::operator=((unsigned __int8 *)(a1 + 32), &v5);
    if ((_BYTE)v5)
    {
      objc_destroyWeak(&v6);
      id v6 = 0;
    }
    p_id location = &location;
  }
  else
  {
    LOBYTE(v5) = 0;
    re::Optional<re::VideoHistogramConfig>::operator=((unsigned __int8 *)(a1 + 32), &v5);
    if (!(_BYTE)v5) {
      return;
    }
    p_id location = &v6;
  }
  objc_destroyWeak(p_location);
}

void REVisualProxyOptionsSetBackgroundColor(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = cf;
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t REVisualProxyOptionsSetHighFidelity(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t REVisualProxyOptionsSetLowFidelityTextureResolution(uint64_t result, int a2, int a3)
{
  if (!*(unsigned char *)(result + 24))
  {
    *(_DWORD *)(result + 48) = a2;
    *(_DWORD *)(result + 52) = a3;
  }
  return result;
}

uint64_t REVisualProxyOptionsSetPixelFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

void REVisualProxyOptionsSetRenderTarget(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 64), &v5);
  if (v5) {
}
  }

uint64_t REVisualProxyOptionsHighFidelityAddIncludedComponentType(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v10 = a2;
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  unint64_t v5 = *(unsigned int *)(result + 104);
  if (v5)
  {
    unint64_t v7 = v4 % v5;
    uint64_t v8 = *(unsigned int *)(*(void *)(result + 88) + 4 * (v4 % v5));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(result + 96);
      if (*(void *)(v9 + 24 * v8 + 16) == a2) {
        return result;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v9 + 24 * v8 + 16) == a2) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  double result = re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(result + 80, v7, v4, (uint64_t)&v10, &v10);
  ++*(_DWORD *)(v2 + 120);
  return result;
}

void REVisualProxyComponentStartCapturing(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v21[5] = *MEMORY[0x263EF8340];
  id v7 = a4;
  __int16 v12 = 256;
  v13[0] = 0;
  uint64_t v15 = 0x20000000200;
  int v16 = 71;
  *(_OWORD *)CFTypeRef cf = 0u;
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  uint64_t v20 = 0x7FFFFFFFLL;
  if (a3)
  {
    __int16 v12 = *(_WORD *)(a3 + 24);
    re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=(v13, (id *)(a3 + 32));
    uint64_t v15 = *(void *)(a3 + 48);
    int v16 = *(_DWORD *)(a3 + 56);
    NS::SharedPtr<MTL::Texture>::operator=((void **)cf, (void **)(a3 + 64));
    CFTypeRef v8 = cf[1];
    uint64_t v9 = *(const void **)(a3 + 72);
    cf[1] = v9;
    if (v9) {
      CFRetain(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::operator=((uint64_t)v18, a3 + 80);
  }
  unint64_t v10 = (re *)_Block_copy(v7);
  uint64_t v11 = re::globalAllocators(v10)[2];
  _OWORD v21[2] = a1;
  v21[3] = v11;
  v21[0] = &unk_26E7366A8;
  v21[1] = v10;
  void v21[4] = v21;
  re::ecs2::VisualProxyCaptureHelper::visualProxyStartCapturing(a1, a2, (unsigned __int8 *)&v12, (uint64_t)v21);
  re::FunctionBase<24ul,void ()(NS::SharedPtr<MTL::Texture>)>::destroyCallable((uint64_t)v21);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v18);
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  if (cf[0])
  {

    cf[0] = 0;
  }
  if (v13[0]) {
    objc_destroyWeak(&v14);
  }
}

uint64_t re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  re::TextureHandle::metalTexture((os_unfair_lock_s **)(*(void *)(a1 + 16) + 32), &v5);
  unint64_t v4 = v5;
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
  if (v4) {

  }
  if (v2)
  {
  }
}

void *re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7366A8;
  unint64_t v4 = _Block_copy(*(const void **)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  return a2;
}

uint64_t re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7366A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REVisualProxyComponentStartCapturing::$_0,void ()(NS::SharedPtr<MTL::Texture>)>::size()
{
  return 24;
}

uint64_t re::Shareable<re::ecs2::VisualProxyOptions>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E736710;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 80));
  long long v2 = *(const void **)(a1 + 72);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {

    *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    objc_destroyWeak((id *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  return a1;
}

void re::Shareable<re::ecs2::VisualProxyOptions>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E736710;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 80));
  long long v2 = *(const void **)(a1 + 72);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {

    *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    objc_destroyWeak((id *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *RERigComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RERigComponentSetRig(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

void re::AssetAPIHelper::assetHandleCreate(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1 && (uint64_t v3 = *(void *)(a1 + 24)) != 0)
  {
    id v4 = (id)(v3 + 8);
    re::AssetHandle::AssetHandle(a2, (re::internal::AssetEntry *)v3);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void REAssetManagerRegisterAssetResolver(uint64_t a1, const char *a2, uint64_t a3, const char *(*a4)(const char *, const char *, void *))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!re::AssetProviderRegistry::registerAssetResolverForScheme(*(re::AssetProviderRegistry **)(a1 + 1128), a2, a4, a3, 0))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Scheme name '%s' is already in use. Resolver registration ignored.", (uint8_t *)&v6, 0xCu);
    }
  }
}

uint64_t REAssetGetAssetManager(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, &v3);
  if (v4) {
    uint64_t v1 = *(void *)(v4 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v3);
  return v1;
}

void *REAssetManagerUpdate(uint64_t a1)
{
  v2[4] = *MEMORY[0x263EF8340];
  v2[0] = &unk_26E6C9DD8;
  v2[1] = a1;
  v2[2] = 0;
  v2[3] = v2;
  re::runInLocalAutoreleasePool((uint64_t)v2);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v2);
}

uint64_t REAssetManagerARReferenceObjectAssetCreateFromDataWithVersion(re *a1, const void *a2, char a3)
{
  int v6 = re::globalAllocators(a1);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 16, 8);
  uint64_t v8 = v7;
  *(unsigned char *)uint64_t v7 = 0;
  v7[1] = a2;
  if (a2) {
    uint64_t v7 = CFRetain(a2);
  }
  unsigned char *v8 = a3;
  uint64_t v9 = re::ARReferenceObjectAsset::assetType((re::ARReferenceObjectAsset *)v7);
  (*(void (**)(void *__return_ptr, re *, unsigned char *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, v8, v9, 0, 0, 0);
  uint64_t v10 = v13[0];
  id v11 = (id)(v13[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

uint64_t REARReferenceObjectAssetGetData(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  long long v2 = re::ARReferenceObjectAsset::assetType(v1);
  uint64_t v3 = re::AssetHandle::assetWithType((re::AssetHandle *)v10, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v4;
      uint64_t v8 = re::AssetHandle::assetInfo((re::AssetHandle *)v10);
      if (v8[17]) {
        uint64_t v9 = (char *)v8[18];
      }
      else {
        uint64_t v9 = (char *)v8 + 137;
      }
      *(_DWORD *)long long buf = 136315138;
      __int16 v12 = v9;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", buf, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(v3 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

re *REAssetManagerCollisionShapeAssetCreateFromCollisionShape(re *a1, re *a2)
{
  long long v2 = a2;
  if (a2)
  {
    int v4 = (*(uint64_t (**)(re *))(*(void *)a2 + 24))(a2);
    if (v4 == 7 || v4 == 12)
    {
      return 0;
    }
    else
    {
      int v11 = 0;
      memset(v10, 0, sizeof(v10));
      uint64_t v12 = 0x7FFFFFFFLL;
      int v8 = 0;
      memset(v7, 0, sizeof(v7));
      uint64_t v9 = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v7);
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v10);
    }
  }
  return v2;
}

uint64_t anonymous namespace'::REAssetRefCreateFromCollisionShape(re *a1, re *a2, uint64_t a3, uint64_t a4)
{
  re::AssetHelper::makeCollisionShapeAsset(a1, a2, a3, a4, 0);
  uint64_t v4 = v7[0];
  id v5 = (id)(v7[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v4;
}

uint64_t REAssetManagerCollisionShapeAssetCreateBox(re *a1, __n128 a2)
{
  uint64_t v4 = re::globalAllocators(a1)[2];
  v12[0] = a2;
  id v5 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v3 + 32))(v3, v4, v12);
  int v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v14 = 0x7FFFFFFFLL;
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v11 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v9);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v12);
  return v6;
}

uint64_t REAssetManagerCollisionShapeAssetCreateCapsule(re *a1, float a2, float a3)
{
  uint64_t v7 = re::globalAllocators(a1);
  int v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v6 + 40))(v6, v7[2], a2, a3);
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v9;
}

uint64_t REAssetManagerCollisionShapeAssetCreateCompound(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v36 = 0;
  memset(v35, 0, sizeof(v35));
  uint64_t v37 = 0x7FFFFFFFLL;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  if (a3)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      re::AssetAPIHelper::assetHandleCreate(*(void *)(a2 + 8 * v14), v28);
      uint64_t v15 = re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)v28);
      if (v15) {
        uint64_t v16 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v27 = v16;
      re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::add<re::AssetHandle&>((uint64_t)v35, &v27, (re::AssetHandle *)v28);
      unint64_t v17 = v33;
      if (v33 <= v14)
      {
        uint64_t v38 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        __float2 v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        unint64_t v44 = v14;
        __int16 v45 = 2048;
        unint64_t v46 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        uint64_t v38 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        __float2 v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        unint64_t v44 = v14;
        __int16 v45 = 2048;
        unint64_t v46 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(v34 + 8 * v1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v27;
      unint64_t v17 = v30;
      if (v30 <= v14) {
        goto LABEL_17;
      }
      uint64_t v18 = *(void *)(a4 + v13 + 16);
      uint64_t v19 = *(void *)(a4 + v13 + 24);
      uint64_t v20 = v31 + v13;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)(a4 + v13);
      *(void *)(v20 + 16) = v18;
      *(void *)(v20 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v19;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
      ++v14;
      v13 += 32;
    }
    while (a3 != v14);
  }
  uint64_t v22 = re::globalAllocators(v12);
  __float2 v23 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, void))(*(void *)v21 + 160))(v21, v22[2], v34, v31, a3, a5, 0);
  LODWORD(v49) = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  *(void *)((char *)&v49 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x7FFFFFFFLL;
  v25.n128_f64[0] = re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v47);
  if (v29 && v30) {
    (*(void (**)(double))(*(void *)v29 + 40))(v25.n128_f64[0]);
  }
  if (v32 && v33) {
    (*(void (**)(__n128))(*(void *)v32 + 40))(v25);
  }
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v35);
  return v24;
}

uint64_t REAssetManagerCollisionShapeAssetCreateCone(re *a1, float a2, float a3)
{
  uint64_t v7 = re::globalAllocators(a1);
  int v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v6 + 120))(v6, v7[2], a2, a3);
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v9;
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedron(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::globalAllocators(a1);
  int v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, v7[2], a2, a3);
  if (v8)
  {
    int v16 = 0;
    memset(v15, 0, sizeof(v15));
    uint64_t v17 = 0x7FFFFFFFLL;
    int v13 = 0;
    memset(v12, 0, sizeof(v12));
    uint64_t v14 = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v12);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v15);
    return v10;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Bad parameters passed for convex mesh creation.", "convexPolyhedronShape != nullptr", "REAssetManagerCollisionShapeAssetCreateConvexPolyhedron", 356);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedronNullable(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::globalAllocators(a1);
  int v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, v7[2], a2, a3);
  if (!v8) {
    return 0;
  }
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v9;
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh(re *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, v46);
  uint64_t v3 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v46);
  uint64_t v45 = v3;
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    int v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v44 = 0x7FFFFFFFLL;
    uint64_t v5 = *(void *)(v3 + 416);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      int v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned int v11 = 0;
      for (unint64_t i = 0; i != v5; ++i)
      {
        unint64_t v13 = v4[52];
        if (v13 <= i)
        {
          uint64_t v38 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          *(_OWORD *)long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v50 = 136315906;
          long long v51 = "operator[]";
          __int16 v52 = 1024;
          int v53 = 797;
          __int16 v54 = 2048;
          *(void *)long long v55 = i;
          *(_WORD *)&v55[8] = 2048;
          *(void *)&v55[10] = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v14 = v4[54];
        uint64_t v15 = *(void *)(v14 + 8 * i);
        unint64_t v16 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) >> 27));
        unint64_t v17 = v16 ^ (v16 >> 31);
        unint64_t v18 = v41;
        if (!(void)v41 || (unint64_t v18 = v17 % v11, v19 = *(unsigned int *)(v7 + 4 * v18), v19 == 0x7FFFFFFF))
        {
LABEL_11:
          uint64_t v22 = v44;
          if (v44 == 0x7FFFFFFF)
          {
            unsigned int v11 = DWORD2(v42);
            int v23 = v9;
            if (v9 == DWORD2(v42))
            {
              re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v41, 2 * v8);
              unsigned int v11 = DWORD2(v42);
              int v23 = v43;
              unint64_t v18 = v17 % DWORD2(v42);
              uint64_t v6 = *((void *)&v41 + 1);
              uint64_t v10 = v42;
            }
            uint64_t v24 = (v23 + 1);
            int v43 = v23 + 1;
            uint64_t v22 = v9;
            int v25 = *(_DWORD *)(v10 + 32 * v9 + 8);
            uint64_t v7 = v6;
          }
          else
          {
            int v25 = *(_DWORD *)(v10 + 32 * v44 + 8);
            LODWORD(v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v25 & 0x7FFFFFFF;
            uint64_t v24 = v9;
            LODWORD(v9) = v22;
          }
          *(_DWORD *)(v10 + 32 * v22 + 8) = v25 | 0x80000000;
          uint64_t v10 = v42;
          uint64_t v26 = v42 + 32 * v22;
          *(_DWORD *)(v26 + 8) = *(_DWORD *)(v26 + 8) & 0x80000000 | *(_DWORD *)(v7 + 4 * v18);
          *(void *)uint64_t v26 = v17;
          *(void *)(v26 + 16) = *(void *)(v14 + 8 * i);
          *(void *)(v26 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = i;
          *(_DWORD *)(v7 + 4 * v18) = v9;
          int v8 = ++HIDWORD(v42);
          ++HIDWORD(v44);
          uint64_t v9 = v24;
        }
        else
        {
          while (1)
          {
            uint64_t v20 = v10 + 32 * v19;
            int v21 = *(unsigned __int16 *)(v20 + 16);
            uint64_t v3 = v20 + 16;
            if (v21 == (unsigned __int16)v15)
            {
              uint64_t v3 = *(unsigned __int16 *)(v3 + 2);
              if (v3 == WORD1(v15) && ((*(_DWORD *)(v10 + 32 * v19 + 20) ^ HIDWORD(v15)) & 0xFFFFFF) == 0) {
                break;
              }
            }
            uint64_t v19 = *(_DWORD *)(v10 + 32 * v19 + 8) & 0x7FFFFFFF;
            if (v19 == 0x7FFFFFFF) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    if (v4[55])
    {
      uint64_t v27 = re::globalAllocators((re *)v3)[2];
      *(void *)long long buf = &unk_26E736758;
      *(void *)&uint8_t buf[8] = &v45;
      *((void *)&v60 + 1) = v27;
      *(void *)&long long v61 = buf;
      uint64_t v57 = v27;
      uint64_t v58 = 0;
      re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::operator=<24ul>((uint64_t)v56, (uint64_t)buf);
      unint64_t v28 = visitVertexPositionBuffers((uint64_t)&v41, (uint64_t)v4, (uint64_t)v56);
      uint64_t v29 = (_anonymous_namespace_ *)re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable((uint64_t)v56);
      uint64_t v37 = 0;
      uint64_t v31 = re::globalAllocators(v30)[2];
      *(void *)&v55[4] = v31;
      uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v31 + 32))(v31, 32, 0);
      *uint64_t v32 = &unk_26E7367C0;
      v32[1] = &v45;
      uint64_t v32[2] = &v38;
      uint64_t v32[3] = &v37;
      *(void *)&v55[12] = v32;
      uint64_t v33 = v45;
      uint64_t v48 = v31;
      uint64_t v49 = 0;
      re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::operator=<24ul>((uint64_t)v47, (uint64_t)&v50);
      visitVertexPositionBuffers((uint64_t)&v41, v33, (uint64_t)v47);
      re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable((uint64_t)v47);
      uint64_t ConvexPolyhedron = REAssetManagerCollisionShapeAssetCreateConvexPolyhedron(a1, v40, v39);
      re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable((uint64_t)&v50);
      re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable((uint64_t)buf);
      if (v38 && v39) {
        (*(void (**)(void))(*(void *)v38 + 40))();
      }
    }
    else
    {
      uint64_t v35 = *re::assetsLogObjects((re *)v3);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "MeshManager is null for the given mesh asset. Skipping convex collision shape generation...", buf, 2u);
      }
      uint64_t ConvexPolyhedron = 0;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v41);
  }
  else
  {
    uint64_t ConvexPolyhedron = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v46);
  return ConvexPolyhedron;
}

uint64_t visitVertexPositionBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 376);
  if (v5)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    uint64_t v9 = *(void **)(a2 + 392);
    uint64_t v38 = &v9[v5];
    while (1)
    {
      uint64_t v10 = re::DataArray<re::MeshInstance>::get(*(void *)(v6 + 440) + 72, *v9);
      uint64_t v11 = re::DataArray<re::MeshModel>::get(*(void *)(v6 + 440) + 8, *(void *)(v10 + 16));
      uint64_t v12 = v11;
      if (*(void *)v7)
      {
        uint64_t v13 = *(void *)(v10 + 16);
        unint64_t v14 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v13 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v13 & 0xFFFFFF)) >> 27));
        unint64_t v15 = (v14 ^ (v14 >> 31)) % *(unsigned int *)(v7 + 24);
        uint64_t v16 = *(void *)(v7 + 16);
        uint64_t v17 = *(unsigned int *)(*(void *)(v7 + 8) + 4 * v15);
        if (v17 != 0x7FFFFFFF)
        {
          do
          {
            uint64_t v18 = v16 + 32 * v17;
            int v20 = *(unsigned __int16 *)(v18 + 16);
            uint64_t v19 = v18 + 16;
            if (v20 == (unsigned __int16)v13
              && *(unsigned __int16 *)(v19 + 2) == WORD1(v13)
              && ((*(_DWORD *)(v16 + 32 * v17 + 20) ^ HIDWORD(v13)) & 0xFFFFFF) == 0)
            {
              goto LABEL_12;
            }
            uint64_t v17 = *(_DWORD *)(v16 + 32 * v17 + 8) & 0x7FFFFFFF;
          }
          while (v17 != 0x7FFFFFFF);
        }
      }
      else
      {
        uint64_t v16 = *(void *)(v7 + 16);
      }
      uint64_t v17 = 0x7FFFFFFFLL;
LABEL_12:
      uint64_t v21 = *(void *)(v11 + 56);
      if (v21)
      {
        unint64_t v22 = 0;
        uint64_t v23 = *(void *)(v16 + 32 * v17 + 24);
        while (1)
        {
          unint64_t v24 = *(void *)(v12 + 56);
          if (v24 <= v22) {
            break;
          }
          int v25 = (re::AttributeTable *)(*(void *)(v12 + 64) + 560 * v22);
          uint64_t v26 = v25;
          do
          {
            uint64_t v27 = v26;
            uint64_t v26 = (re::AttributeTable *)*((void *)v26 + 1);
          }
          while (v26 && !*((void *)v27 + 9));
          v52[0] = (id)0x2B3FAC222C23CAEDLL;
          unint64_t v3 = *(unsigned __int8 *)(*((void *)v27 + 7)
                                  + 16
                                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v27 + 6, v52)+ 8);
          uint64_t v28 = re::AttributeTable::buffers(v25);
          if (v29 <= v3) {
            goto LABEL_36;
          }
          uint64_t v30 = v28 + 16 * v3;
          unint64_t v31 = *(unsigned int *)(v30 + 12);
          if (v31)
          {
            do
            {
              uint64_t v32 = v25;
              int v25 = (re::AttributeTable *)*((void *)v25 + 1);
              unint64_t v4 = *((void *)v32 + 4);
              if (v25) {
                BOOL v33 = v4 == 0;
              }
              else {
                BOOL v33 = 0;
              }
            }
            while (v33);
            if (v4 <= v3) {
              goto LABEL_37;
            }
            unint64_t v4 = *(unsigned __int16 *)(*((void *)v32 + 5) + 16 * v3);
            id v34 = *(id *)v30;
            uint64_t v35 = *(void **)(v30 + 8);
            if (*(void *)v30) {
              id v34 = v34;
            }
            unint64_t v36 = v31 / v4;
            v52[0] = v34;
            v52[1] = v35;
            unint64_t v44 = v22;
            *(void *)uint64_t v45 = v23;
            unint64_t v42 = v36;
            unint64_t v43 = v3;
            (*(void (**)(void, void *, unsigned char *, unint64_t *, unint64_t *, unint64_t *, id *))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32), v9, v45, &v44, &v43, &v42, v52);
            if (v52[0]) {

            }
            v8 += v36;
          }
          if (++v22 == v21) {
            goto LABEL_31;
          }
        }
        unint64_t v44 = 0;
        long long v56 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)__int16 v52 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v45 = 136315906;
        *(void *)&v45[4] = "operator[]";
        __int16 v46 = 1024;
        int v47 = 476;
        __int16 v48 = 2048;
        unint64_t v49 = v22;
        __int16 v50 = 2048;
        unint64_t v51 = v24;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v3, v29);
        _os_crash();
        __break(1u);
LABEL_37:
        unint64_t v44 = 0;
        long long v56 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)__int16 v52 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v45 = 136315906;
        *(void *)&v45[4] = "operator[]";
        __int16 v46 = 1024;
        int v47 = 476;
        __int16 v48 = 2048;
        unint64_t v49 = v3;
        __int16 v50 = 2048;
        unint64_t v51 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_31:
      ++v9;
      uint64_t v7 = a1;
      uint64_t v6 = a2;
      if (v9 == v38) {
        return v8;
      }
    }
  }
  return 0;
}

uint64_t REAssetManagerCollisionShapeAssetCreateCylinder(re *a1, float a2, float a3)
{
  uint64_t v7 = re::globalAllocators(a1);
  uint64_t v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v6 + 128))(v6, v7[2], a2, a3);
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v9;
}

uint64_t REAssetManagerCollisionShapeAssetCreateEmpty(re *a1)
{
  unint64_t v3 = re::globalAllocators(a1);
  unint64_t v4 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, v3[2]);
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v12 = 0x7FFFFFFFLL;
  int v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v9 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v7);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v10);
  return v5;
}

uint64_t REAssetManagerCollisionShapeAssetCreateMinkowskiSum()
{
  return 0;
}

uint64_t REAssetManagerCollisionShapeAssetCreatePlane(re *a1, __n128 a2, float a3)
{
  uint64_t v6 = re::globalAllocators(a1)[2];
  v14[0] = a2;
  uint64_t v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, float))(*(void *)v5 + 104))(v5, v6, v14, a3);
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v8;
}

uint64_t REAssetManagerCollisionShapeAssetCreateRectangle(re *a1, float a2, float a3)
{
  uint64_t v5 = re::globalAllocators(a1)[2];
  *(void *)&v14[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  uint64_t v6 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 136))(v4, v5, v14);
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  return v7;
}

uint64_t REAssetManagerCollisionShapeAssetCreateSphere(re *a1, float a2)
{
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v4 + 112))(v4, v5[2], a2);
  int v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v14 = 0x7FFFFFFFLL;
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v11 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v9);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v12);
  return v7;
}

uint64_t REAssetManagerCollisionMeshAssetCreateV2(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = re::globalAllocators(a1);
  char v20 = 1;
  uint64_t v18 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(*(void *)v16 + 152))(v16, v17[2], a2, a3, a4, a5, a6, 1, a7, a8, v20);
  return REAssetManagerCollisionMeshAssetCreateFromMesh(a1, v18);
}

uint64_t REAssetManagerCollisionMeshAssetCreateFromMesh(re *a1, re *a2)
{
  re::AssetHelper::makeIndexedTriangleMeshAsset(a1, a2, 0);
  uint64_t v2 = v5[0];
  id v3 = (id)(v5[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAssetManagerCollisionMeshAssetCreate(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  return REAssetManagerCollisionMeshAssetCreateV2(a1, a2, a3, a4, a5, a6, a7, a6 / 3);
}

uint64_t REAssetManagerCollisionShapeAssetCreateCollisionMesh(re *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v17);
  id v3 = (re *)re::AssetHandle::asset<re::IndexedTriangleMeshAsset>((re::IndexedTriangleMeshAsset *)v17);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v6 = re::globalAllocators(v3);
    uint64_t v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 144))(v5, v6[2], *((void *)v4 + 1));
    int v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v16 = 0x7FFFFFFFLL;
    int v12 = 0;
    memset(v11, 0, sizeof(v11));
    uint64_t v13 = 0x7FFFFFFFLL;
    uint64_t v10 = *((void *)v4 + 1);
    re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addOrReplace<re::AssetHandle&>((uint64_t)v11, &v10, (re::AssetHandle *)v17);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v11);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
  }
  else
  {
    uint64_t v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  return v8;
}

uint64_t RECollisionShapeAssetGetType(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5 && (unsigned int v1 = atomic_load((unsigned int *)(v5 + 704)), v1 == 2)) {
    uint64_t v2 = *(unsigned int *)(*(void *)re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v4)
  }
                         + 8);
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

uint64_t RECompoundShapeAssetGetChildCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5 && (unsigned int v1 = atomic_load((unsigned int *)(v5 + 704)), v1 == 2)) {
    uint64_t v2 = *(void *)(*(void *)re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v4) + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

uint64_t RECompoundShapeAssetGetChildShape(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  if (v9 && (unsigned int v3 = atomic_load((unsigned int *)(v9 + 704)), v3 == 2))
  {
    uint64_t v4 = re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v8);
    unint64_t v5 = *(void *)(*(void *)v4 + 24);
    if (v5 <= a2)
    {
      uint64_t v10 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v11 = 136315906;
      int v12 = "operator[]";
      __int16 v13 = 1024;
      int v14 = 476;
      __int16 v15 = 2048;
      unint64_t v16 = a2;
      __int16 v17 = 2048;
      unint64_t v18 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = *(void *)(*(void *)(*(void *)v4 + 32) + 80 * a2 + 48);
  }
  else
  {
    uint64_t v6 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v6;
}

__n128 RECompoundShapeAssetGetChildPose(uint64_t a1, unint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  long long v3 = 0uLL;
  if (v10)
  {
    unsigned int v4 = atomic_load((unsigned int *)(v10 + 704));
    if (v4 == 2)
    {
      uint64_t v5 = re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v9);
      unint64_t v6 = *(void *)(*(void *)v5 + 24);
      if (v6 <= a2)
      {
        uint64_t v11 = 0;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v12 = 136315906;
        __int16 v13 = "operator[]";
        __int16 v14 = 1024;
        int v15 = 476;
        __int16 v16 = 2048;
        unint64_t v17 = a2;
        __int16 v18 = 2048;
        unint64_t v19 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v3 = *(_OWORD *)(*(void *)(*(void *)v5 + 32) + 80 * a2 + 16);
    }
  }
  long long v8 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  return (__n128)v8;
}

uint64_t REAssetManagerPhysicsMaterialAssetCreate(re *a1, __n128 a2, __n128 a3)
{
  unsigned int v4 = (re::PhysicsMaterial *)(*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, float))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                                 + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a2, a3, a3.n128_f32[0]);
  re::AssetHelper::makePhysicsMaterialAsset(a1, v4, 0);
  uint64_t v5 = v8[0];
  if (v8[0]) {
    id v6 = (id)(v8[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

uint64_t REAssetManagerPhysicsMaterialAssetCreate2(re *a1)
{
  uint64_t v2 = (re::PhysicsMaterial *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                          + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
  re::AssetHelper::makePhysicsMaterialAsset(a1, v2, 0);
  uint64_t v3 = v6[0];
  if (v6[0]) {
    id v4 = (id)(v6[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

float REPhysicsMaterialAssetGetRestitution(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  float v1 = 0.0;
  if (v5)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v5 + 704));
    if (v2 == 2) {
      float v1 = *(float *)(*(void *)(re::AssetHandle::asset<re::PhysicsMaterialAsset>((re::PhysicsMaterialAsset *)&v4) + 8)
    }
                    + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v1;
}

uint64_t re::AssetHandle::asset<re::PhysicsMaterialAsset>(re::PhysicsMaterialAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v2 = re::PhysicsMaterialAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v6 = v4;
      uint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        long long v8 = (char *)v7[18];
      }
      else {
        long long v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

float REPhysicsMaterialAssetGetStaticFriction(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  float v1 = 0.0;
  if (v5)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v5 + 704));
    if (v2 == 2) {
      float v1 = *(float *)(*(void *)(re::AssetHandle::asset<re::PhysicsMaterialAsset>((re::PhysicsMaterialAsset *)&v4) + 8)
    }
                    + 12);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v1;
}

float REPhysicsMaterialAssetGetDynamicFriction(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  float v1 = 0.0;
  if (v5)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v5 + 704));
    if (v2 == 2) {
      float v1 = *(float *)(*(void *)(re::AssetHandle::asset<re::PhysicsMaterialAsset>((re::PhysicsMaterialAsset *)&v4) + 8)
    }
                    + 16);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v1;
}

uint64_t REAssetManagerCreateMeshAssetByCombiningPartsWithSharedMaterial(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v17);
  if (v18
    && (unsigned int v3 = atomic_load((unsigned int *)(v18 + 704)), v3 == 2)
    && (uint64_t v4 = (re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)&v17)) != 0)
  {
    MeshAssetDataByCombiningPartsWithSharedMaterial = (re *)re::MeshAsset::makeMeshAssetDataByCombiningPartsWithSharedMaterial(v4, v5);
    if (v15[0])
    {
      uint64_t v7 = re::globalAllocators(MeshAssetDataByCombiningPartsWithSharedMaterial);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 960, 8);
      int v9 = (re::MeshAsset *)re::MeshAsset::MeshAsset(v8, (uint64_t)&v16);
      uint64_t v10 = re::MeshAsset::assetType(v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v14, a1, v8, v10, 0, 0, 0);
      uint64_t v11 = v14[0];
      if (v14[0]) {
        id v12 = (id)(v14[0] + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    }
    else
    {
      uint64_t v11 = 0;
    }
    re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  return v11;
}

uint64_t REAssetManagerMeshMemoryAssetCreate(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return REAssetManagerMeshMemoryAssetCreateWithCompileOptions(a1, a2, a3, 0);
}

uint64_t REAssetManagerMeshMemoryAssetCreateWithCompileOptions(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v28 = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  v25[0] = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  v21[0] = 0;
  int v23 = 0;
  if (a3)
  {
    unint64_t v6 = a3;
    re::DynamicArray<re::GeomMesh>::setCapacity(v25, a3);
    int v12 = 0;
    re::DynamicArray<unsigned int>::resize(v21, v6, &v12);
    do
    {
      uint64_t v8 = *a2++;
      re::DynamicArray<re::GeomMesh>::add((_anonymous_namespace_ *)v25, (re::GeomMesh *)(v8 + 24));
      --v6;
    }
    while (v6);
  }
  else
  {
    int v12 = 0;
    re::DynamicArray<unsigned int>::resize(v21, 0, &v12);
  }
  int v12 = 16842752;
  char v13 = 1;
  int v14 = 0;
  __int16 v15 = 0;
  int v16 = 1036831949;
  int v17 = 16843008;
  char v18 = 0;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  DWORD1(v20) = 0x7FFFFFFF;
  if (a4 && *(_DWORD *)(a4 + 8) == 1)
  {
    int v12 = *(_DWORD *)(a4 + 12);
    LOWORD(v1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_WORD *)(a4 + 16);
    char v18 = BYTE1(v14);
  }
  double v10 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v19);
  if (v21[0] && v24) {
    (*(void (**)(double))(*(void *)v21[0] + 40))(v10);
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v25);
  return v9;
}

uint64_t anonymous namespace'::REAssetManagerMeshMemoryAssetCreateFromMeshArrayHelper(uint64_t a1, uint64_t a2, re::GeomMesh *a3, uint64_t a4, uint64_t a5, int *a6)
{
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray(a3, a2, a5, a4, 0, a6, (uint64_t)v18);
  int v8 = v18[0];
  uint64_t v9 = re::globalAllocators(MeshAssetDataWithGeomMeshArray);
  double v10 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 960, 8);
  uint64_t v11 = v10;
  if (v8) {
    int v12 = (re::MeshAsset *)re::MeshAsset::MeshAsset((uint64_t)v10, (uint64_t)&v19);
  }
  else {
    re::MeshAsset::MeshAsset(v10);
  }
  char v13 = re::MeshAsset::assetType(v12);
  (*(void (**)(void *__return_ptr, uint64_t, re::MeshAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v17, a1, v11, v13, 0, 0, 0);
  uint64_t v14 = v17[0];
  if (v17[0]) {
    id v15 = (id)(v17[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v18);
  return v14;
}

uint64_t REAssetManagerMeshMemoryAssetCreateBox(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v18 = *a2;
  long long v19 = *(_OWORD *)(a2 + 1);
  char v20 = *((unsigned char *)a2 + 24);
  __int16 v21 = *(_WORD *)((char *)a2 + 25);
  int v17 = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  int v16 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  if (a3)
  {
    re::buildBox((re::GeomMesh *)v14, (uint64_t)&v18);
    uint64_t v4 = v15;
    re::DynamicArray<float>::resize((uint64_t)v10, v15);
    uint64_t v5 = v13;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v11;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      uint64_t v28 = v7;
      __int16 v29 = 2048;
      uint64_t v30 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      uint64_t v28 = 0;
      __int16 v29 = 2048;
      uint64_t v30 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v14, 1uLL);
    LODWORD(v31) = 0;
    re::DynamicArray<unsigned int>::resize(v10, 1uLL, &v31);
    if (!v15) {
      goto LABEL_14;
    }
    re::internal::buildBoxHelper(v17, &v31, (unsigned __int16 *)&v18);
    uint64_t v5 = v13;
  }
LABEL_9:
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v14);
  return v8;
}

uint64_t REAssetManagerMeshMemoryAssetCreateCapsule(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned __int16 v18 = *(_WORD *)a2;
  int v19 = *(_DWORD *)(a2 + 2);
  uint64_t v20 = *(void *)(a2 + 8);
  char v21 = *(unsigned char *)(a2 + 16);
  __int16 v22 = *(_WORD *)(a2 + 17);
  int v17 = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  int v16 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  if (a3)
  {
    re::buildCapsule((re::GeomMesh *)v14, &v18);
    uint64_t v4 = v15;
    re::DynamicArray<float>::resize((uint64_t)v10, v15);
    uint64_t v5 = v13;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v11;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      __int16 v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      __int16 v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      __int16 v30 = 2048;
      uint64_t v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v14, 1uLL);
    LODWORD(v32) = 0;
    re::DynamicArray<unsigned int>::resize(v10, 1uLL, &v32);
    if (!v15) {
      goto LABEL_14;
    }
    re::buildCapsule((uint64_t)v17, &v18);
    uint64_t v5 = v13;
  }
LABEL_9:
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v14);
  return v8;
}

uint64_t REAssetManagerMeshMemoryAssetCreateCone(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  v19[0] = a2;
  v19[1] = a3;
  unsigned __int16 v18 = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  int v17 = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  int v13 = 0;
  if (a4)
  {
    re::buildCone((uint64_t)v15, (unsigned __int16 *)v19);
    uint64_t v5 = v16;
    re::DynamicArray<float>::resize((uint64_t)v11, v16);
    uint64_t v6 = v14;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v12;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v20 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      __int16 v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      uint64_t v26 = v8;
      __int16 v27 = 2048;
      uint64_t v28 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v20 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      __int16 v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      uint64_t v26 = 0;
      __int16 v27 = 2048;
      uint64_t v28 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v15, 1uLL);
    LODWORD(v29) = 0;
    re::DynamicArray<unsigned int>::resize(v11, 1uLL, &v29);
    if (!v16) {
      goto LABEL_14;
    }
    re::buildCone((uint64_t)v18, (unsigned __int16 *)v19);
    uint64_t v6 = v14;
  }
LABEL_9:
  if (v11[0] && v14) {
    (*(void (**)(void))(*(void *)v11[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v15);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreateCylinder(uint64_t a1, int *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v18 = *a2;
  uint64_t v19 = *(void *)(a2 + 1);
  int v20 = a2[3];
  int v21 = a2[4];
  char v22 = *((unsigned char *)a2 + 20);
  int v17 = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  int v16 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  if (a3)
  {
    re::buildCylinder((uint64_t)v14, (unsigned __int16 *)&v18);
    uint64_t v4 = v15;
    re::DynamicArray<float>::resize((uint64_t)v10, v15);
    uint64_t v5 = v13;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v11;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      __int16 v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      __int16 v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      __int16 v30 = 2048;
      uint64_t v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v14, 1uLL);
    LODWORD(v32) = 0;
    re::DynamicArray<unsigned int>::resize(v10, 1uLL, &v32);
    if (!v15) {
      goto LABEL_14;
    }
    re::buildCylinder((uint64_t)v17, (unsigned __int16 *)&v18);
    uint64_t v5 = v13;
  }
LABEL_9:
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v14);
  return v8;
}

uint64_t REAssetManagerMeshMemoryAssetCreatePlane(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  re::internal::makeEngineOptions(a2, (uint64_t)v19);
  int v18 = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  int v17 = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  int v13 = 0;
  if (a3)
  {
    re::buildPlane((re::GeomMesh *)v15, v19);
    uint64_t v5 = v16;
    re::DynamicArray<float>::resize((uint64_t)v11, v16);
    uint64_t v6 = v14;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v12;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v20 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      char v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      uint64_t v26 = v8;
      __int16 v27 = 2048;
      uint64_t v28 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v20 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      char v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      uint64_t v26 = 0;
      __int16 v27 = 2048;
      uint64_t v28 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v15, 1uLL);
    LODWORD(v29) = 0;
    re::DynamicArray<unsigned int>::resize(v11, 1uLL, &v29);
    if (!v16) {
      goto LABEL_14;
    }
    re::buildPlane(v18, v19);
    uint64_t v6 = v14;
  }
LABEL_9:
  if (v11[0] && v14) {
    (*(void (**)(void))(*(void *)v11[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v15);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreatePyramid(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  LOWORD(v18) = *(_WORD *)a2;
  *(void *)((char *)&v18 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a2 + 4);
  HIDWORD(v18) = *(_DWORD *)(a2 + 12);
  char v19 = *(unsigned char *)(a2 + 16);
  __int16 v20 = *(_WORD *)(a2 + 17);
  int v17 = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  int v16 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  if (a3)
  {
    re::buildPyramid((re::GeomMesh *)v14, &v18);
    uint64_t v4 = v15;
    re::DynamicArray<float>::resize((uint64_t)v10, v15);
    uint64_t v5 = v13;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v11;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = v7;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = 0;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v14, 1uLL);
    LODWORD(v30) = 0;
    re::DynamicArray<unsigned int>::resize(v10, 1uLL, &v30);
    if (!v15) {
      goto LABEL_14;
    }
    re::buildPyramid((uint64_t)v17, (int *)&v18);
    uint64_t v5 = v13;
  }
LABEL_9:
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v14);
  return v8;
}

uint64_t REAssetManagerMeshMemoryAssetCreateSphere(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v18 = 0;
  unint64_t v19 = a2 & 0xFFFFFFFF0000FFFFLL;
  int v20 = a3 & 0xFFFFFF;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  int v17 = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  int v13 = 0;
  if (a4)
  {
    re::buildSphere((re::GeomMesh *)v15, (unsigned __int16 *)&v19);
    uint64_t v5 = v16;
    re::DynamicArray<float>::resize((uint64_t)v11, v16);
    uint64_t v6 = v14;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v12;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2048;
      uint64_t v29 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = 0;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v15, 1uLL);
    LODWORD(v30) = 0;
    re::DynamicArray<unsigned int>::resize(v11, 1uLL, &v30);
    if (!v16) {
      goto LABEL_14;
    }
    re::buildSphere((uint64_t)v18, (unsigned __int16 *)&v19);
    uint64_t v6 = v14;
  }
LABEL_9:
  if (v11[0] && v14) {
    (*(void (**)(void))(*(void *)v11[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v15);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreateTetrahedron(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v18 = 0;
  unint64_t v19 = a2 & 0xFFFFFFFF0000FFFFLL;
  int v20 = a3 & 0xFFFFFF;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  int v17 = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  int v13 = 0;
  if (a4)
  {
    re::buildTetrahedron((re::GeomMesh *)v15, (uint64_t *)&v19);
    uint64_t v5 = v16;
    re::DynamicArray<float>::resize((uint64_t)v11, v16);
    uint64_t v6 = v14;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v12;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2048;
      uint64_t v29 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v21 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = 0;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v15, 1uLL);
    LODWORD(v30) = 0;
    re::DynamicArray<unsigned int>::resize(v11, 1uLL, &v30);
    if (!v16) {
      goto LABEL_14;
    }
    re::buildTetrahedron(v18, (unsigned __int16 *)&v19);
    uint64_t v6 = v14;
  }
LABEL_9:
  if (v11[0] && v14) {
    (*(void (**)(void))(*(void *)v11[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v15);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreateTube(uint64_t a1, int *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v18 = *a2;
  uint64_t v19 = *(void *)(a2 + 1);
  int v20 = a2[3];
  char v21 = *((unsigned char *)a2 + 16);
  __int16 v22 = *(_WORD *)((char *)a2 + 17);
  int v17 = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  int v16 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  if (a3)
  {
    re::buildTube((uint64_t)v14, (unsigned __int16 *)&v18);
    uint64_t v4 = v15;
    re::DynamicArray<float>::resize((uint64_t)v10, v15);
    uint64_t v5 = v13;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v11;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      int v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      int v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      __int16 v30 = 2048;
      uint64_t v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v14, 1uLL);
    LODWORD(v32) = 0;
    re::DynamicArray<unsigned int>::resize(v10, 1uLL, &v32);
    if (!v15) {
      goto LABEL_14;
    }
    re::buildTube((uint64_t)v17, (unsigned __int16 *)&v18);
    uint64_t v5 = v13;
  }
LABEL_9:
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v14);
  return v8;
}

const char *REAssetManagerMeshMemoryAssetCreate3dText(_anonymous_namespace_ *a1, const char *a2, const char *a3, char a4, char a5, char a6, char a7, float a8, float a9, double a10, double a11)
{
  unint64_t v12 = __PAIR64__(LODWORD(a9), LODWORD(a8));
  char v13 = a4;
  double v14 = a10;
  double v15 = a11;
  char v16 = a5;
  char v17 = a6;
  char v18 = a7;
  int v19 = 16777473;
  return REAssetManagerMeshMemoryAssetCreate3DTextWithOptions(a1, a2, a3, (uint64_t *)&v12);
}

const char *REAssetManagerMeshMemoryAssetCreate3DTextWithOptions(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t *a4)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v22, 0);
  *((void *)&v26 + 1) = 0;
  long long v27 = 0uLL;
  re::DynamicString::setCapacity(&v26, 0);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v28 = _D0;
  char v29 = 5;
  long long v30 = 0uLL;
  v31[0] = 0;
  *(_WORD *)&v31[1] = 4;
  *(_DWORD *)&uint64_t v31[3] = 16843009;
  char v32 = 0;
  int v20 = a2;
  size_t v21 = strlen(a2);
  re::DynamicString::operator=((re::DynamicString *)&v22, (uint64_t)&v20);
  size_t v14 = strlen(a3);
  int v20 = a3;
  size_t v21 = v14;
  re::DynamicString::operator=((re::DynamicString *)&v26, (uint64_t)&v20);
  uint64_t v28 = *a4;
  char v29 = *((unsigned char *)a4 + 8);
  long long v30 = *((_OWORD *)a4 + 1);
  *(_DWORD *)uint64_t v31 = *((_DWORD *)a4 + 8);
  void v31[4] = *((unsigned char *)a4 + 36);
  char v32 = *((unsigned char *)a4 + 38);
  Asset = (re::MeshAsset *)re::MeshPrimitiveProvider::makeAsset((re::MeshPrimitiveProvider *)&v22, 0, *((unsigned char *)a4 + 37));
  char v16 = re::MeshAsset::assetType(Asset);
  (*(void (**)(const char **__return_ptr, _anonymous_namespace_ *, re::MeshAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v20, a1, Asset, v16, 0, 0, 0);
  char v17 = v20;
  if (v20) {
    char v18 = (id)(v20 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
  if ((void)v26)
  {
    if (BYTE8(v26)) {
      (*(void (**)(void))(*(void *)v26 + 40))();
    }
    long long v26 = 0u;
    long long v27 = 0u;
  }
  if (v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*v22 + 40))();
  }
  return v17;
}

uint64_t REAssetManagerMeshMemoryAssetCreate2dShapeExtrusion(uint64_t a1, float a2, float a3, uint64_t a4, int a5, char a6, _OWORD *a7)
{
  char v34 = 1;
  uint64_t v35 = 255;
  *(float *)long long v33 = a2;
  *(float *)&v33[1] = a3;
  void v33[2] = a5;
  CGSVGDocumentGetCanvasSize();
  v11.f64[1] = v10;
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  float32x2_t v36 = vminnm_f32(*(float32x2_t *)&v11.f64[0], 0);
  float32x2_t v37 = vmaxnm_f32(*(float32x2_t *)&v11.f64[0], 0);
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x8812000000;
  size_t v21 = __Block_byref_object_copy__9;
  __int16 v22 = __Block_byref_object_dispose__9;
  uint64_t v23 = "";
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)uint64_t v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v28 = 0;
  CGSVGDocumentGetCanvasSize();
  uint64_t v13 = v12;
  CGSVGDocumentGetRootNode();
  v38[0] = MEMORY[0x263EF8330];
  v38[1] = 3221225472;
  v38[2] = ___ZN12_GLOBAL__N_121generateMeshExtrusionEP13CGSVGDocumentRKN2re14pathprocessing20MeshExtrusionOptionsE_block_invoke;
  v38[3] = &unk_264BE9E18;
  v38[6] = 0;
  v38[7] = 0;
  long long v39 = xmmword_234416530;
  uint64_t v40 = v13;
  long long v41 = v33;
  v38[4] = &v18;
  v38[5] = 0x3FF0000000000000;
  CGSVGNodeEnumerate();
  size_t v14 = v19;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(v29, (uint64_t)(v19 + 6));
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(v30, (uint64_t)(v14 + 9));
  std::vector<float>::vector(&v31, (const std::vector<int> *)v14 + 4);
  long long v32 = *(_OWORD *)(v14 + 15);
  _Block_object_dispose(&v18, 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v25[1])
  {
    *(void **)&long long v26 = v25[1];
    operator delete(v25[1]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (a7 && (a6 & 1) == 0) {
    *a7 = v32;
  }
  re::AssetHelper::makeMeshMemoryAsset(a1, (_anonymous_namespace_ *)&v18, 1, 0, 0);
  uint64_t v15 = v38[0];
  if (v38[0]) {
    id v16 = (id)(v38[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v38);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v18);
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  return v15;
}

uint64_t anonymous namespace'::buildMeshFromMeshExtrusion(re::GeomMesh *a1, void *a2, char a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  bzero(&v35, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v36);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v40, "vertexPosition", 1, 7);
  unint64_t v5 = ((uint64_t)(a2[7] - a2[6]) >> 2) / 3uLL;
  unint64_t v6 = a2[1] - *a2;
  unint64_t v7 = v6 >> 4;
  if (v38 > v5)
  {
    int v8 = v48;
    if (v48)
    {
      unsigned int v9 = 0;
      do
      {
        float64_t v10 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v47, v9);
        re::internal::accessFaceVaryingAttributeSubmesh(v10, v11);
        ++v9;
      }
      while (v8 != v9);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v37, v5);
  unsigned int v44 = v5;
  if (v45)
  {
    uint64_t v12 = v46;
    uint64_t v13 = 8 * v45;
    do
    {
      uint64_t v14 = *v12++;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 72))(v14, v44);
      v13 -= 8;
    }
    while (v13);
  }
  if (v36 > v7 && v38 && (v38 - 1) > v38)
  {
    while (1)
      ;
  }
  unsigned int v36 = v6 >> 4;
  unsigned int v41 = v36;
  if (v42)
  {
    uint64_t v15 = v43;
    uint64_t v16 = 8 * v42;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v41);
      v16 -= 8;
    }
    while (v16);
  }
  if (v5)
  {
    uint64_t v18 = 0;
    unsigned int v19 = 2;
    do
    {
      re::GeomMeshBuilder::setFaceVertices((uint64_t)&v35, v18++, *(_DWORD *)(a2[6] + 4 * (v19 - 2)), *(_DWORD *)(a2[6] + 4 * (v19 - 1)), *(_DWORD *)(a2[6] + 4 * v19));
      v19 += 3;
    }
    while (v5 != v18);
  }
  re::GeomMesh::GeomMesh(a1, "Mesh Extrusion");
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v50, (const re::internal::GeomBaseMesh *)&v36);
  uint64_t v20 = (re *)re::GeomMesh::operator=((uint64_t)a1, v50);
  re::GeomMesh::setName(v20, v35);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v52);
  if (v50[1] && *((void *)&v51 + 1)) {
    (*(void (**)(void))(*(void *)v50[1] + 40))();
  }
  size_t v21 = re::GeomMesh::addAttribute((uint64_t)a1, "vertexPosition", 1, 7);
  (*(void (**)(re::GeomAttribute *, unint64_t))(*(void *)v21 + 24))(v21, v6 >> 4);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v21 + 16))(v21))
  {
    __int16 v22 = (uint64_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v21, 0);
    uint64_t v23 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v21 + 16))(v21);
  }
  else
  {
    uint64_t v23 = 0;
    __int16 v22 = 0;
  }
  uint64_t v24 = re::GeomMesh::addAttribute((uint64_t)a1, "vertexNormal", 1, 7);
  (*(void (**)(re::GeomAttribute *, unint64_t))(*(void *)v24 + 24))(v24, v6 >> 4);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v24 + 16))(v24))
  {
    uint64_t v25 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v24, 0);
    uint64_t v26 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v24 + 16))(v24);
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v25 = 0;
  }
  long long v27 = v50;
  if (v7)
  {
    unint64_t v28 = 0;
    while (16 * v23 != v28)
    {
      *(_OWORD *)&v22[v28 / 8] = *(_OWORD *)(*a2 + v28);
      if (16 * v26 == v28) {
        goto LABEL_46;
      }
      *(_OWORD *)(v25 + v28) = *(_OWORD *)(a2[3] + v28);
      v28 += 16;
      if ((v6 & 0xFFFFFFFF0) == v28) {
        goto LABEL_32;
      }
    }
    uint64_t v49 = 0;
    memset(v52, 0, 32);
    long long v51 = 0u;
    memset(v50, 0, sizeof(v50));
    long long v27 = (_OWORD *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v53 = 136315906;
    long long v54 = "operator[]";
    __int16 v55 = 1024;
    int v56 = 609;
    __int16 v57 = 2048;
    uint64_t v58 = v23;
    __int16 v59 = 2048;
    uint64_t v60 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    uint64_t v49 = 0;
    uint64_t v27[3] = 0u;
    void v27[4] = 0u;
    v27[1] = 0u;
    v27[2] = 0u;
    *long long v27 = 0u;
    long long v27 = (_OWORD *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v53 = 136315906;
    long long v54 = "operator[]";
    __int16 v55 = 1024;
    int v56 = 609;
    __int16 v57 = 2048;
    uint64_t v58 = v26;
    __int16 v59 = 2048;
    uint64_t v60 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    uint64_t v49 = 0;
    uint64_t v27[3] = 0u;
    void v27[4] = 0u;
    v27[1] = 0u;
    v27[2] = 0u;
    *long long v27 = 0u;
    long long v27 = (_OWORD *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v53 = 136315906;
    long long v54 = "operator[]";
    __int16 v55 = 1024;
    int v56 = 609;
    __int16 v57 = 2048;
    uint64_t v58 = v23;
    __int16 v59 = 2048;
    uint64_t v60 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_48:
    uint64_t v49 = 0;
    uint64_t v27[3] = 0u;
    void v27[4] = 0u;
    v27[1] = 0u;
    v27[2] = 0u;
    *long long v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v53 = 136315906;
    long long v54 = "operator[]";
    __int16 v55 = 1024;
    int v56 = 609;
    __int16 v57 = 2048;
    uint64_t v58 = v26;
    __int16 v59 = 2048;
    uint64_t v60 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_32:
  if (a3)
  {
    char v29 = re::GeomMesh::addAttribute((uint64_t)a1, "vertexUV", 1, 6);
    (*(void (**)(re::GeomAttribute *, unint64_t))(*(void *)v24 + 24))(v24, v6 >> 4);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v29 + 16))(v29))
    {
      uint64_t v30 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v29, 0);
      uint64_t v26 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v29 + 16))(v29);
      if (!v7) {
        goto LABEL_41;
      }
LABEL_37:
      uint64_t v31 = 0;
      while (v23 != v31)
      {
        if (v26 == v31) {
          goto LABEL_48;
        }
        uint64_t v32 = *v22;
        v22 += 2;
        *(void *)(v30 + 8 * v31++) = v32;
        if ((v6 >> 4) == v31) {
          goto LABEL_41;
        }
      }
      goto LABEL_47;
    }
    uint64_t v26 = 0;
    uint64_t v30 = 0;
    if (v7) {
      goto LABEL_37;
    }
  }
LABEL_41:
  re::GeomMesh::freeName((re *)&v35);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v40);
  uint64_t result = v37;
  if (v37 && v39) {
    return (*(uint64_t (**)(void))(*(void *)v37 + 40))();
  }
  return result;
}

float32x2_t *REAssetManagerMeshMemoryAssetCreate2dShapeExtrusionSinglePath(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, int a5, char a6, char a7, float a8, float a9, float32x2_t a10, float32_t a11)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v38 = 255;
  unint64_t v35 = __PAIR64__(LODWORD(a9), LODWORD(a8));
  int v36 = a5;
  a10.f32[1] = a11;
  char v37 = a6;
  float32x2_t v39 = vminnm_f32(a10, 0);
  float32x2_t v40 = vmaxnm_f32(a10, 0);
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  info = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  v24[0].c = 0.0;
  *(_OWORD *)&v24[0].a = 0x3FF0000000000000uLL;
  *(_OWORD *)&v24[0].d = xmmword_234416530;
  v24[0].CGFloat ty = a11;
  if (a3)
  {
    long long v15 = a3[1];
    *(_OWORD *)&t1.a = *a3;
    *(_OWORD *)&t1.c = v15;
    *(_OWORD *)&t1.tx = a3[2];
    CGAffineTransform t2 = v24[0];
    CGAffineTransformConcat(v24, &t1, &t2);
  }
  uint64_t v16 = (const CGPath *)MEMORY[0x237DB9580](a2, v24);
  CGPathRelease(v16);
  BOOL v18 = a4 == 4 || a4 == 1;
  re::pathprocessing::simpleExtrudeMesh(&info, v18, (float32x2_t *)&v35, (uint64_t)&v30, (uint64_t)v24);
  if (LOBYTE(v24[0].a))
  {
    if (info)
    {
      unint64_t v28 = info;
      operator delete(info);
    }
    re::AssetHelper::makeMeshMemoryAsset(a1, (_anonymous_namespace_ *)v24, 1, 0, 0);
    unsigned int v19 = info;
    if (info) {
      uint64_t v20 = &info[1];
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&info);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v24);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    size_t v21 = (id)CoreRELog::log;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      if (LOBYTE(v24[0].tx)) {
        CGFloat ty = v24[0].ty;
      }
      else {
        CGFloat ty = COERCE_DOUBLE((CGAffineTransform *)((char *)&v24[0].tx + 1));
      }
      *(_DWORD *)long long buf = 136315138;
      CGFloat v42 = ty;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Failed to extrude mesh from 2D shape: %s", buf, 0xCu);
    }

    if (!LOBYTE(v24[0].a) && *(void *)&v24[0].d && (LOBYTE(v24[0].tx) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v24[0].d + 40))();
    }
    if (info)
    {
      unint64_t v28 = info;
      operator delete(info);
    }
    unsigned int v19 = 0;
  }
  if ((void)v33)
  {
    *((void *)&v33 + 1) = v33;
    operator delete((void *)v33);
  }
  if (*((void *)&v31 + 1))
  {
    *(void *)&long long v32 = *((void *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  return v19;
}

void anonymous namespace'::convertPathToGeometryFormat(void **this, void *a2, const CGPathElement *a3)
{
  unsigned int v3 = (double *)a2[1];
  switch(*(_DWORD *)a2)
  {
    case 0:
      double v4 = *v3;
      *(float *)&double v4 = *v3;
      float v5 = v3[1];
      re::pathprocessing::moveTo(this, v4, v5);
      break;
    case 1:
      double v6 = *v3;
      *(float *)&double v6 = *v3;
      float v7 = v3[1];
      re::pathprocessing::lineTo(this, v6, v7);
      break;
    case 2:
      double v8 = *v3;
      *(float *)&double v8 = *v3;
      float v9 = v3[1];
      double v10 = v3[2];
      *(float *)&double v10 = v10;
      float v11 = v3[3];
      re::pathprocessing::quadTo(this, v8, v9, v10, v11);
      break;
    case 3:
      double v12 = *v3;
      *(float *)&double v12 = *v3;
      float v13 = v3[1];
      double v14 = v3[2];
      *(float *)&double v14 = v14;
      float v15 = v3[3];
      double v16 = v3[4];
      *(float *)&double v16 = v16;
      float v17 = v3[5];
      re::pathprocessing::cubicTo(this, v12, v13, v14, v15, v16, v17);
      break;
    case 4:
      re::pathprocessing::close(this);
      break;
    default:
      return;
  }
}

uint64_t REAssetManagerMeshMemoryAssetCreateBoxWithDecimation(uint64_t a1, uint64_t *a2, int a3)
{
  v33[9] = *MEMORY[0x263EF8340];
  uint64_t v19 = *a2;
  long long v20 = *(_OWORD *)(a2 + 1);
  char v21 = *((unsigned char *)a2 + 24);
  __int16 v22 = *(_WORD *)((char *)a2 + 25);
  BOOL v18 = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  int v17 = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  int v13 = 0;
  if (a3)
  {
    re::buildBox((re::GeomMesh *)v15, (uint64_t)&v19);
    uint64_t v4 = v16;
    re::DynamicArray<float>::resize((uint64_t)v11, v16);
    uint64_t v5 = v14;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v12;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = 0;
      memset(v33, 0, 64);
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v23 = 0;
      memset(v33, 0, 64);
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      __int16 v30 = 2048;
      uint64_t v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v15, 1uLL);
    LODWORD(v32) = 0;
    re::DynamicArray<unsigned int>::resize(v11, 1uLL, &v32);
    if (!v16) {
      goto LABEL_14;
    }
    re::internal::buildBoxHelper(v18, &v32, (unsigned __int16 *)&v19);
    uint64_t v5 = v14;
  }
LABEL_9:
  *(void *)&long long v32 = 0x101010000;
  *((void *)&v32 + 1) = 0x3DCCCCCD00010000;
  v33[0] = 16843008;
  *(_DWORD *)((char *)&v32 + 5) = 0;
  memset(&v33[1], 0, 48);
  HIDWORD(v33[5]) = 0x7FFFFFFF;
  double v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v33[1]);
  if (v11[0] && v14) {
    (*(void (**)(double))(*(void *)v11[0] + 40))(v9);
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v15);
  return v8;
}

uint64_t REAssetManagerMeshMemoryAssetCreateBoxWithRoundedCornersWithDecimation(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v20 = *a2;
  __int16 v21 = *((_WORD *)a2 + 4);
  long long v22 = *(_OWORD *)((char *)a2 + 12);
  int v23 = *((_DWORD *)a2 + 7);
  int v24 = *((_DWORD *)a2 + 8);
  char v25 = *((unsigned char *)a2 + 36);
  __int16 v26 = *(_WORD *)((char *)a2 + 37);
  uint64_t v19 = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  v16[0] = 0;
  int v18 = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  if (a3)
  {
    re::buildBoxWithRoundedCorners((re::GeomMesh *)v16, (long long *)&v20);
    uint64_t v4 = v17;
    re::DynamicArray<float>::resize((uint64_t)v12, v17);
    uint64_t v5 = v15;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v13;
      while (v7 != v6)
      {
        *(_DWORD *)(v5 + 4 * v6) = v6;
        if (v4 == ++v6) {
          goto LABEL_9;
        }
      }
      uint64_t v27 = 0;
      memset(v37, 0, sizeof(v37));
      long long v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      uint64_t v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 789;
      __int16 v32 = 2048;
      uint64_t v33 = v7;
      __int16 v34 = 2048;
      uint64_t v35 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v27 = 0;
      memset(v37, 0, sizeof(v37));
      long long v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      uint64_t v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 789;
      __int16 v32 = 2048;
      uint64_t v33 = 0;
      __int16 v34 = 2048;
      uint64_t v35 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v16, 1uLL);
    LODWORD(v36) = 0;
    re::DynamicArray<unsigned int>::resize(v12, 1uLL, &v36);
    if (!v17) {
      goto LABEL_14;
    }
    uint64_t v8 = v19;
    uint64_t v5 = v15;
  }
LABEL_9:
  *(void *)&long long v36 = 0x101010000;
  *((void *)&v36 + 1) = 0x3DCCCCCD00010000;
  *(void *)&v37[0] = 16843008;
  *(_DWORD *)((char *)&v36 + 5) = 0;
  memset((char *)v37 + 8, 0, 48);
  HIDWORD(v37[2]) = 0x7FFFFFFF;
  double v10 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v37 + 1);
  if (v12[0] && v15) {
    (*(void (**)(double))(*(void *)v12[0] + 40))(v10);
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v16);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreatePlaneWithDecimation(uint64_t a1, uint64_t a2, int a3)
{
  v31[9] = *MEMORY[0x263EF8340];
  re::internal::makeEngineOptions(a2, (uint64_t)v20);
  uint64_t v19 = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  v16[0] = 0;
  int v18 = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  if (a3)
  {
    re::buildPlane((re::GeomMesh *)v16, v20);
    uint64_t v5 = v17;
    re::DynamicArray<float>::resize((uint64_t)v12, v17);
    uint64_t v6 = v15;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v13;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v21 = 0;
      memset(v31, 0, 64);
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      int v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2048;
      uint64_t v29 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v21 = 0;
      memset(v31, 0, 64);
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      int v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      uint64_t v27 = 0;
      __int16 v28 = 2048;
      uint64_t v29 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v16, 1uLL);
    LODWORD(v30) = 0;
    re::DynamicArray<unsigned int>::resize(v12, 1uLL, &v30);
    if (!v17) {
      goto LABEL_14;
    }
    re::buildPlane(v19, v20);
    uint64_t v6 = v15;
  }
LABEL_9:
  *(void *)&long long v30 = 0x101010000;
  *((void *)&v30 + 1) = 0x3DCCCCCD00000000;
  v31[0] = 16843008;
  *(_DWORD *)((char *)&v30 + 5) = 0;
  memset(&v31[1], 0, 48);
  HIDWORD(v31[5]) = 0x7FFFFFFF;
  double v10 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v31[1]);
  if (v12[0] && v15) {
    (*(void (**)(double))(*(void *)v12[0] + 40))(v10);
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v16);
  return v9;
}

uint64_t REAssetManagerMeshMemoryAssetCreateSphereWithDecimation(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v32[9] = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  unint64_t v20 = a2 & 0xFFFFFFFF0000FFFFLL;
  int v21 = a3 & 0xFFFFFF;
  v16[1] = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  v16[0] = 0;
  int v18 = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  if (a4)
  {
    re::buildSphere((re::GeomMesh *)v16, (unsigned __int16 *)&v20);
    uint64_t v5 = v17;
    re::DynamicArray<float>::resize((uint64_t)v12, v17);
    uint64_t v6 = v15;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v13;
      while (v8 != v7)
      {
        *(_DWORD *)(v6 + 4 * v7) = v7;
        if (v5 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v22 = 0;
      memset(v32, 0, 64);
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      __int16 v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      uint64_t v28 = v8;
      __int16 v29 = 2048;
      uint64_t v30 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_14:
      uint64_t v22 = 0;
      memset(v32, 0, 64);
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      __int16 v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      uint64_t v28 = 0;
      __int16 v29 = 2048;
      uint64_t v30 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v16, 1uLL);
    LODWORD(v31) = 0;
    re::DynamicArray<unsigned int>::resize(v12, 1uLL, &v31);
    if (!v17) {
      goto LABEL_14;
    }
    re::buildSphere((uint64_t)v19, (unsigned __int16 *)&v20);
    uint64_t v6 = v15;
  }
LABEL_9:
  *(void *)&long long v31 = 0x101010000;
  *((void *)&v31 + 1) = 0x3DCCCCCD00010000;
  v32[0] = 16843008;
  *(_DWORD *)((char *)&v31 + 5) = 0;
  memset(&v32[1], 0, 48);
  HIDWORD(v32[5]) = 0x7FFFFFFF;
  double v10 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v32[1]);
  if (v12[0] && v15) {
    (*(void (**)(double))(*(void *)v12[0] + 40))(v10);
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v16);
  return v9;
}

const char *REAssetManagerMeshMemoryAssetCreate3dTextWithDecimation(_anonymous_namespace_ *a1, const char *a2, const char *a3, char a4, char a5, char a6, char a7, float a8, float a9, double a10, double a11)
{
  unint64_t v12 = __PAIR64__(LODWORD(a9), LODWORD(a8));
  char v13 = a4;
  double v14 = a10;
  double v15 = a11;
  char v16 = a5;
  char v17 = a6;
  char v18 = a7;
  int v19 = 16843009;
  return REAssetManagerMeshMemoryAssetCreate3DTextWithOptions(a1, a2, a3, (uint64_t *)&v12);
}

uint64_t REMeshAssetCreatePlaneDescriptor(uint64_t a1, uint64_t a2, char a3)
{
  if (a1)
  {
    re::internal::makeEngineOptions(a2, (uint64_t)v7);
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)v7, a3, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v8);
    uint64_t v4 = v8;
    if ((void)v21)
    {
      if (BYTE8(v21)) {
        (*(void (**)(void, void))(*(void *)v21 + 40))(v21, v22);
      }
      long long v21 = 0u;
      long long v22 = 0u;
    }
    if (v16)
    {
      if (v20) {
        (*(void (**)(void))(*(void *)v16 + 40))();
      }
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      ++v19;
    }
    if (v11)
    {
      if (v15) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      uint64_t v15 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      ++v14;
    }
    if (*(void *)buf && (v10 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreatePlaneDescriptor", buf, 2u);
    }

    return 0;
  }
  return v4;
}

uint64_t REMeshAssetCreateSphereDescriptor(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a1)
  {
    unint64_t v7 = a2 & 0xFFFFFFFF0000FFFFLL;
    int v8 = a3 & 0xFFFFFF;
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)&v7, a4, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v9);
    uint64_t v4 = v9;
    if ((void)v22)
    {
      if (BYTE8(v22)) {
        (*(void (**)(void))(*(void *)v22 + 40))();
      }
      long long v22 = 0u;
      long long v23 = 0u;
    }
    if (v17)
    {
      if (v21) {
        (*(void (**)(void))(*(void *)v17 + 40))();
      }
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = 0;
      ++v20;
    }
    if (v12)
    {
      if (v16) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      uint64_t v16 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      ++v15;
    }
    if (*(void *)buf && (v11 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateSphereDescriptor", buf, 2u);
    }

    return 0;
  }
  return v4;
}

uint64_t REMeshAssetCreateCylinderDescriptor(uint64_t a1, int *a2, char a3)
{
  if (a1)
  {
    int v6 = *a2;
    uint64_t v7 = *(void *)(a2 + 1);
    int v8 = a2[3];
    int v9 = a2[4];
    char v10 = *((unsigned char *)a2 + 20);
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)&v6, a3, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v11);
    uint64_t v3 = v11;
    if ((void)v24)
    {
      if (BYTE8(v24)) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      long long v24 = 0u;
      long long v25 = 0u;
    }
    if (v19)
    {
      if (v23) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      ++v22;
    }
    if (v14)
    {
      if (v18) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      ++v17;
    }
    if (*(void *)buf && (v13 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateCylinderDescriptor", buf, 2u);
    }

    return 0;
  }
  return v3;
}

uint64_t REMeshAssetCreateCapsuleDescriptor(uint64_t a1, __int16 *a2, char a3)
{
  if (a1)
  {
    __int16 v6 = *a2;
    int v7 = *(_DWORD *)(a2 + 1);
    uint64_t v8 = *((void *)a2 + 1);
    char v9 = *((unsigned char *)a2 + 16);
    __int16 v10 = *(__int16 *)((char *)a2 + 17);
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)&v6, a3, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v11);
    uint64_t v3 = v11;
    if ((void)v24)
    {
      if (BYTE8(v24)) {
        (*(void (**)(void, void))(*(void *)v24 + 40))(v24, v25);
      }
      long long v24 = 0u;
      long long v25 = 0u;
    }
    if (v19)
    {
      if (v23) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      ++v22;
    }
    if (v14)
    {
      if (v18) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      ++v17;
    }
    if (*(void *)buf && (v13 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateCapsuleDescriptor", buf, 2u);
    }

    return 0;
  }
  return v3;
}

uint64_t REMeshAssetCreateConeDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1)
  {
    v7[0] = a2;
    v7[1] = a3;
    re::MeshPrimitiveProvider::makeDescriptor((_anonymous_namespace_ *)v7, a4, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v8);
    uint64_t v4 = v8;
    if ((void)v21)
    {
      if (BYTE8(v21)) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      long long v21 = 0u;
      long long v22 = 0u;
    }
    if (v16)
    {
      if (v20) {
        (*(void (**)(void))(*(void *)v16 + 40))();
      }
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      ++v19;
    }
    if (v11)
    {
      if (v15) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      uint64_t v15 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      ++v14;
    }
    if (*(void *)buf && (v10 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateConeDescriptor", buf, 2u);
    }

    return 0;
  }
  return v4;
}

uint64_t REMeshAssetCreateBoxDescriptor(uint64_t a1, uint64_t *a2, char a3)
{
  if (a1)
  {
    uint64_t v6 = *a2;
    long long v7 = *(_OWORD *)(a2 + 1);
    char v8 = *((unsigned char *)a2 + 24);
    __int16 v9 = *(_WORD *)((char *)a2 + 25);
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)&v6, a3, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v10);
    uint64_t v3 = v10;
    if ((void)v23)
    {
      if (BYTE8(v23)) {
        (*(void (**)(void))(*(void *)v23 + 40))();
      }
      long long v23 = 0u;
      long long v24 = 0u;
    }
    if (v18)
    {
      if (v22) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      uint64_t v22 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      ++v21;
    }
    if (v13)
    {
      if (v17) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      uint64_t v17 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      ++v16;
    }
    if (*(void *)buf && (v12 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateBoxDescriptor", buf, 2u);
    }

    return 0;
  }
  return v3;
}

uint64_t REMeshAssetCreateBoxWithRoundedCornersDescriptor(uint64_t a1, uint64_t *a2, char a3)
{
  if (a1)
  {
    uint64_t v6 = *a2;
    __int16 v7 = *((_WORD *)a2 + 4);
    long long v8 = *(_OWORD *)((char *)a2 + 12);
    int v9 = *((_DWORD *)a2 + 7);
    int v10 = *((_DWORD *)a2 + 8);
    char v11 = *((unsigned char *)a2 + 36);
    __int16 v12 = *(_WORD *)((char *)a2 + 37);
    re::MeshPrimitiveProvider::makeDescriptor((uint64_t)&v6, a3, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v13);
    uint64_t v3 = v13;
    if ((void)v26)
    {
      if (BYTE8(v26)) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
      long long v26 = 0u;
      long long v27 = 0u;
    }
    if (v21)
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      ++v24;
    }
    if (v16)
    {
      if (v20) {
        (*(void (**)(void))(*(void *)v16 + 40))();
      }
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      ++v19;
    }
    if (*(void *)buf && (v15 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateBoxWithRoundedCornersDescriptor", buf, 2u);
    }

    return 0;
  }
  return v3;
}

uint64_t REMeshAssetCreateExtrudedTextDescriptor(uint64_t a1, uint64_t a2, const char *a3, const char *a4, const re::GeomBuildExtrudedTextOptions *a5)
{
  if (a1)
  {
    re::internal::makeEngineOptions(a2, &v13);
    size_t v8 = strlen(a3);
    *(void *)long long buf = a3;
    size_t v18 = v8;
    re::DynamicString::operator=((re::DynamicString *)v15, (uint64_t)buf);
    size_t v9 = strlen(a4);
    *(void *)long long buf = a4;
    size_t v18 = v9;
    re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)buf);
    re::MeshPrimitiveProvider::makeDescriptor((re::MeshPrimitiveProvider *)&v13, a5, 1, (uint64_t)buf);
    re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>((re *)buf, &v16);
    uint64_t v10 = v16;
    if ((void)v29)
    {
      if (BYTE8(v29)) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      long long v29 = 0u;
      long long v30 = 0u;
    }
    if (v24)
    {
      if (v28) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      ++v27;
    }
    if (v19)
    {
      if (v23) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      ++v22;
    }
    if (*(void *)buf && (v18 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    if (v15[0])
    {
      if (v15[1]) {
        (*(void (**)(void))(*(void *)v15[0] + 40))();
      }
      memset(v15, 0, 32);
    }
    if (v13 && (v14 & 1) != 0) {
      (*(void (**)(void))(*(void *)v13 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid/Null AssetManager passed to REMeshAssetCreateExtrudedTextDescriptor", buf, 2u);
    }

    return 0;
  }
  return v10;
}

uint64_t REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, char a7)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v75);
  uint64_t v14 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v75);
  if (!v14)
  {
LABEL_37:
    CGFloat v42 = 0;
LABEL_52:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v75);
    return (uint64_t)v42;
  }
  uint64_t v15 = v14;
  char v47 = a7;
  uint64_t v16 = (uint8_t *)(v14 + 152);
  if ((re::TextureData::isValid((re::TextureData *)(v14 + 152)) & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v41 = (id)CoreRELog::log;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v71 = 0;
      _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, "Invalid cube texture.", v71, 2u);
    }

    goto LABEL_37;
  }
  v71[0] = 0;
  v72[0] = 0;
  unsigned int v73 = 0;
  id v74 = 0;
  if (re::TextureData::isValid((re::TextureData *)v16) && *(_DWORD *)(v15 + 240))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v17 = (id)CoreRELog::log;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "A Metal texture is required to generate an image based light: converting CPU texture to Metal.", buf, 2u);
    }

    re::ImportGraphicsContext::createFromAvailableManagers(a2, 0, (re::ImportGraphicsContext *)&v58);
    re::loadCPUTextureInMetal((re *)&v58, (const re::ImportGraphicsContext *)v16, 0, (uint64_t)buf);
    v71[0] = buf[0];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)v68);
    id v18 = v70;
    id v70 = 0;
    id v19 = v74;
    id v74 = v18;

    if (v69 != -1) {
      ((void (*)(id *, void *))*(&off_26E736828 + v69))(v51, v68);
    }
    if (v73)
    {
      if (v73 != 1) {
        goto LABEL_53;
      }
      if (!v72[3]) {
        goto LABEL_45;
      }
    }
    if (!v72[0])
    {
LABEL_45:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned int v44 = (id)CoreRELog::log;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, "Failed to convert CPU texture to Metal.", buf, 2u);
      }

      CGFloat v42 = 0;
      goto LABEL_50;
    }

    uint64_t v16 = v71;
  }
  if (!*((_DWORD *)v16 + 22))
  {
    id v66 = *((id *)v16 + 1);
    re::generatePrefilteredDiffuseIblTexture((uint64_t)a2, &v66, a4, a6, 0, 1, 0, &v58);
    id v20 = *(id *)(v15 + 248);
    buf[0] = 0;
    v68[0] = v58;
    unsigned int v69 = 0;
    id v70 = v20;
    if (v58)
    {

      id v58 = 0;
    }
    if (v66)
    {

      id v66 = 0;
    }
    BOOL v21 = *(_DWORD *)(v15 + 20) == 1;
    int v22 = *(_DWORD *)(v15 + 388);
    LODWORD(v62) = 16777473;
    BYTE4(v62) = 1;
    DWORD2(v62) = 1;
    HIDWORD(v62) = v21;
    uint64_t v63 = 0;
    char v64 = 0;
    int v65 = 0;
    uint64_t v23 = re::CoreREAssetUtils::assetManagerTextureMemoryAssetCreateWithTextureData(a1, (uint64_t)buf, v22, v47, &v62);
    if (!*((_DWORD *)v16 + 22))
    {
      uint64_t v24 = v23;
      id v57 = *((id *)v16 + 1);
      re::generatePrefilteredSpecularIblTexture((uint64_t)a2, &v57, a5, a6, 0, 1, 0, v51);
      id v25 = *(id *)(v15 + 248);
      LOBYTE(v58) = 0;
      v59[0] = v51[0];
      unsigned int v60 = 0;
      id v61 = v25;
      if (v51[0])
      {

        v51[0] = 0;
      }
      if (v57)
      {

        id v57 = 0;
      }
      int v26 = *(_DWORD *)(v15 + 388);
      LODWORD(v53) = 16777473;
      BYTE4(v53) = 1;
      DWORD2(v53) = 1;
      HIDWORD(v53) = v21;
      uint64_t v54 = 0;
      char v55 = 0;
      int v56 = 0;
      uint64_t v27 = re::CoreREAssetUtils::assetManagerTextureMemoryAssetCreateWithTextureData(a1, (uint64_t)&v58, v26, v47, &v53);
      uint64_t v28 = re::globalAllocators((re *)v27);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[2] + 32))(v28[2], 104, 8);
      *(_OWORD *)uint64_t v29 = 0u;
      *(_OWORD *)(v29 + 16) = 0u;
      *(_OWORD *)(v29 + 32) = 0u;
      *(_OWORD *)(v29 + 48) = 0u;
      *(_OWORD *)(v29 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
      *(_OWORD *)(v29 + 80) = 0u;
      *(void *)(v29 + 96) = 0;
      re::DynamicString::setCapacity((void *)(v29 + 72), 0);
      re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)v51);
      id v30 = v51[0];
      long long v31 = *(void **)(v29 + 8);
      uint64_t v32 = *(void *)(v29 + 16);
      *(id *)(v29 + 8) = v51[1];
      v51[1] = v31;
      uint64_t v33 = *(void **)v29;
      *(void *)uint64_t v29 = v30;
      *(void *)(v29 + 16) = v52;
      v51[0] = v33;
      uint64_t v52 = v32;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);
      re::AssetAPIHelper::assetHandleCreate(v24, (uint64_t *)v51);
      long long v34 = *(_OWORD *)(v29 + 24);
      *(_OWORD *)(v29 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_OWORD *)v51;
      *(_OWORD *)long long v51 = v34;
      uint64_t v35 = *(void *)(v29 + 40);
      *(void *)(v29 + 40) = v52;
      uint64_t v52 = v35;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);
      re::AssetAPIHelper::assetHandleCreate(v27, (uint64_t *)v51);
      long long v36 = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v29 + 48) = *(_OWORD *)v51;
      *(_OWORD *)long long v51 = v36;
      uint64_t v37 = *(void *)(v29 + 64);
      *(void *)(v29 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v52;
      uint64_t v52 = v37;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);

      uint64_t v38 = (__CFString *)*(id *)(v15 + 248);
      if (v38)
      {
        CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v38, 0x8000100u);
        re::DynamicString::operator=((re::DynamicString *)(v29 + 72), (re::DynamicString *)v51);
        uint64_t v38 = (__CFString *)v51[0];
        if (v51[0])
        {
          if ((uint64_t)v51[1]) {
            uint64_t v38 = (__CFString *)(*(uint64_t (**)(void))(*(void *)v51[0] + 40))();
          }
        }
      }
      v51[0] = 0;
      v51[1] = 0;
      uint64_t v52 = 0;
      float32x2_t v40 = re::ImageBasedLightAsset::assetType((re::ImageBasedLightAsset *)v38);
      if (v47) {
        (*(void (**)(char **__return_ptr, unsigned char *, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v48, a1, v29, v40, 0, 0, 1);
      }
      else {
        (*(void (**)(char **__return_ptr, unsigned char *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v48, a1, v29, v40, 0, 0, 0);
      }
      CGFloat v42 = v48;
      v51[0] = v48;
      v51[1] = v49;
      int v48 = 0;
      uint64_t v49 = 0;
      uint64_t v52 = v50;
      uint64_t v50 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v48);
      if (v42) {
        uint64_t v43 = v42 + 8;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);

      if (v60 != -1) {
        ((void (*)(id *, id *))*(&off_26E736828 + v60))(v51, v59);
      }

      if (v69 != -1) {
        ((void (*)(id *, void *))*(&off_26E736828 + v69))(&v58, v68);
      }
LABEL_50:

      if (v73 != -1) {
        ((void (*)(uint8_t *, void *))*(&off_26E736828 + v73))(buf, v72);
      }
      goto LABEL_52;
    }
  }
LABEL_53:
  uint64_t v46 = std::__throw_bad_variant_access[abi:nn180100]();
  return REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapSized(v46);
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapSized(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3, int a4, int a5)
{
  return REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(a1, a2, a3, a4, a5, 1024, 0);
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMap(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v10);
    uint64_t v6 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v10);
    if (v6)
    {
      unint64_t v7 = *(int *)(v6 + 364);
      if (v7 >= 0x40) {
        unint64_t v8 = 64;
      }
      else {
        unint64_t v8 = v7;
      }
      uint64_t v3 = REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(a1, a2, v3, v8, v7, 1024, 0);
    }
    else
    {
      uint64_t v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  return v3;
}

uint64_t REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3, const __CFDictionary *a4, char *a5)
{
  uint64_t v5 = a3;
  if (a3)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v20);
    if (*(unsigned char *)(v20[1] + 312)) {
      uint64_t v10 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v20);
    }
    else {
      uint64_t v10 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v20);
    }
    uint64_t v11 = v10;
    if (v10)
    {
      unsigned int Unsigned = *(_DWORD *)(v10 + 364);
      if (Unsigned >= 0x40) {
        uint64_t v13 = 64;
      }
      else {
        uint64_t v13 = Unsigned;
      }
      if (a4)
      {
      }
      unsigned int v14 = re::CoreREAssetUtils::iblSamplingQuality(a4, 1);
      if (v14 >= 4)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v16 = (id)CoreRELog::log;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v19 = 0;
          _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Invalid REEnvironmentResourceCreateSamplingQuality passed to REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync", v19, 2u);
        }

        re::CoreREAssetUtils::logAndSetErrorFromString((re::CoreREAssetUtils *)"Invalid REEnvironmentResourceCreateSamplingQuality passed to REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync", a5, v17);
        int v15 = 1024;
      }
      else
      {
        int v15 = dword_23442C3D0[v14];
      }
      uint64_t v5 = REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(a1, a2, v5, v13, Unsigned, v15, 1);
    }
    else
    {
      uint64_t v5 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  }
  return v5;
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullableAsync(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = a3;
  if (a3)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v11);
    if (re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v11)) {
      uint64_t v5 = REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(a1, a2, v5, a4, a5, 1024, 1);
    }
    else {
      uint64_t v5 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  }
  return v5;
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable(unsigned char *a1, re::ImportGraphicsContext *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v8);
    uint64_t v6 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v8);
    if (v6) {
      uint64_t v3 = REAssetManagerImageBasedLightCreateWithCubeMapSizedInternal(a1, a2, v3, 0x40uLL, *(int *)(v6 + 364), 1024, 0);
    }
    else {
      uint64_t v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  }
  return v3;
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithTextureURLsAndOptions(uint64_t a1, id *a2, void *a3, void *a4, void *a5, const __CFDictionary *a6)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  id v12 = a2[23];
  id v49 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v49, sel_setStorageMode_, 0);
  long long v45 = 0x200000000uLL;
  *(_DWORD *)&v46[24] = 0;
  v46[28] = 0;
  *(_DWORD *)&v46[32] = 0;
  v46[36] = 0;
  memset(&v46[4], 0, 17);
  long long v48 = 0uLL;
  id v47 = 0;
  *(_DWORD *)uint64_t v46 = 1;
  *(_DWORD *)&v46[40] = re::CoreREAssetUtils::textureSemanticOption(a6, 4);
  uint64_t v13 = (__CFString *)*MEMORY[0x263F00230];
  if (a6)
  {
    CFBooleanRef Value = (__CFString *)CFDictionaryGetValue(a6, @"kRETextureAssetCreateOptionColorSpaceName");
    if (Value) {
      uint64_t v13 = Value;
    }
  }
  re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&v45, v13);
  if (a4 && a5)
  {
    *(_OWORD *)long long buf = v45;
    long long v41 = *(_OWORD *)v46;
    v42[0] = *(_OWORD *)&v46[16];
    *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v46[28];
    id v43 = v47;
    long long v44 = v48;
    if (a6)
    {
      if (Unsigned)
      {
        *(_DWORD *)&uint8_t buf[8] = 2;
        LODWORD(v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = Unsigned;
        DWORD1(v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = Unsigned;
      }
    }
    long long v38 = 0uLL;
    uint64_t v39 = 0;
    if (a3
    {
      long long v31 = *re::assetsLogObjects((re *)v17);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v56) = 138412290;
        *(void *)((char *)&v56 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
        _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%@'", (uint8_t *)&v56, 0xCu);
      }
      uint64_t v27 = 0;
    }
    else
    {
      long long v56 = v45;
      long long v57 = *(_OWORD *)v46;
      v58[0] = *(_OWORD *)&v46[16];
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v46[28];
      id v59 = v47;
      long long v60 = v48;
      if (a6)
      {
        if (v18)
        {
          DWORD2(v56) = 2;
          LODWORD(v60) = v18;
          DWORD1(v60) = v18;
        }
      }
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      if (v19)
      {
        long long v51 = v45;
        long long v52 = *(_OWORD *)v46;
        v53[0] = *(_OWORD *)&v46[16];
        *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)&v46[28];
        id v54 = v47;
        long long v55 = v48;
        if (a6)
        {
          if (v20)
          {
            DWORD2(v51) = 2;
            LODWORD(v55) = v20;
            DWORD1(v55) = v20;
          }
        }
        long long v34 = 0uLL;
        uint64_t v35 = 0;
        if (v21)
        {
          int v22 = re::globalAllocators((re *)v21);
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 104, 8);
          *(_OWORD *)uint64_t v23 = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)(v23 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
          *(_OWORD *)(v23 + 80) = 0u;
          *(void *)(v23 + 96) = 0;
          *(_OWORD *)(v23 + 48) = 0u;
          re::DynamicString::setCapacity((void *)(v23 + 72), 0);
          re::AssetHandle::operator=(v23, (uint64_t *)&v38);
          re::AssetHandle::operator=(v23 + 24, (uint64_t *)&v36);
          re::AssetHandle::operator=(v23 + 48, (uint64_t *)&v34);
          uint64_t v24 = (__CFString *)objc_retainAutoreleaseReturnValue(*(id *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v34)
                                                                      + 248));
          if (v24)
          {
            CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v24, 0x8000100u);
            re::DynamicString::operator=((re::DynamicString *)(v23 + 72), (re::DynamicString *)v50);
            uint64_t v24 = *(__CFString **)v50;
            if (*(void *)v50)
            {
              if (v50[8]) {
                uint64_t v24 = (__CFString *)(*(uint64_t (**)(void))(**(void **)v50 + 40))();
              }
            }
          }
          int v26 = re::ImageBasedLightAsset::assetType((re::ImageBasedLightAsset *)v24);
          (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v50, a1, v23, v26, 0, 0, 0);
          uint64_t v27 = *(void *)v50;
          if (*(void *)v50) {
            id v28 = (id)(*(void *)v50 + 8);
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v50);
        }
        else
        {
          uint64_t v32 = *re::assetsLogObjects((re *)v21);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v50 = 138412290;
            *(void *)&void v50[4] = a5;
            _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Failed to load IBL specular texture '%@'", v50, 0xCu);
          }
          uint64_t v27 = 0;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
      }
      else
      {
        id v30 = *re::assetsLogObjects((re *)v19);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v51) = 138412290;
          *(void *)((char *)&v51 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a4;
          _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Failed to load IBL diffuse texture '%@'", (uint8_t *)&v51, 0xCu);
        }
        uint64_t v27 = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
  }
  else
  {
    uint64_t v29 = *re::assetsLogObjects(v15);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "REAssetManagerImageBasedLightMemoryAssetCreateWithTextureURLs: missing textures", buf, 2u);
    }
    uint64_t v27 = 0;
  }

  if (v49) {
  return v27;
  }
}

uint64_t anonymous namespace'::loadIBLTextureWithContentsOfURL(void *a1, uint64_t a2, re::ImportGraphicsContext *a3, id *a4, uint64_t a5, long long *a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v11 = a1;
  if (([v11 isFileURL] & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v20 = (id)CoreRELog::log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v22) = 138412290;
      *(void *)((char *)&v22 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v11;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "IBL texture URL must be a file URL: %@", (uint8_t *)&v22, 0xCu);
    }

    goto LABEL_9;
  }
  id v12 = [v11 lastPathComponent];
  uint64_t v13 = [v12 UTF8String];

  if (!IBLTextureWithContentsOfFile)
  {
LABEL_9:
    uint64_t v19 = 0;
    goto LABEL_10;
  }
  int v15 = IBLTextureWithContentsOfFile;
  uint64_t v16 = re::TextureAsset::assetType(IBLTextureWithContentsOfFile);
  (*(void (**)(long long *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, void))(*(void *)a2 + 416))(&v22, a2, v15, v16, 0, 0, 0);
  long long v17 = *a6;
  *a6 = v22;
  long long v22 = v17;
  uint64_t v18 = *((void *)a6 + 2);
  *((void *)a6 + 2) = v23;
  uint64_t v23 = v18;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  uint64_t v19 = 1;
LABEL_10:

  return v19;
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithTextureURLs(uint64_t a1, id *a2, void *a3, void *a4, void *a5)
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryAddValue(Mutable, @"kRETextureAssetCreateOptionColorSpaceName", (const void *)*MEMORY[0x263F00218]);
  uint64_t v11 = REAssetManagerImageBasedLightMemoryAssetCreateWithTextureURLsAndOptions(a1, a2, a3, a4, a5, Mutable);
  CFRelease(Mutable);
  return v11;
}

__CFString *REAssetManagerImageBasedLightMemoryAssetCreateWithTextureDataAndOptions(uint64_t a1, id *a2, void *a3, void *a4, void *a5, const char *a6, const __CFDictionary *a7)
{
  id v14 = a2[23];
  v58[0] = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v58[0], sel_setStorageMode_, 0);
  long long v54 = 0x200000000uLL;
  *(_DWORD *)&v55[24] = 0;
  v55[28] = 0;
  *(_DWORD *)&v55[32] = 0;
  v55[36] = 0;
  memset(&v55[4], 0, 17);
  long long v57 = 0uLL;
  id v56 = 0;
  *(_DWORD *)long long v55 = 1;
  *(_DWORD *)&v55[40] = re::CoreREAssetUtils::textureSemanticOption(a7, 4);
  int v15 = (__CFString *)*MEMORY[0x263F00230];
  if (a7)
  {
    CFBooleanRef Value = (__CFString *)CFDictionaryGetValue(a7, @"kRETextureAssetCreateOptionColorSpaceName");
    if (Value) {
      int v15 = Value;
    }
  }
  re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&v54, v15);
  if (a4 && a5)
  {
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    if (a3)
    {
      *(_OWORD *)long long buf = v54;
      long long v48 = *(_OWORD *)v55;
      v49[0] = *(_OWORD *)&v55[16];
      *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v55[28];
      id v50 = v56;
      long long v51 = v57;
      if (a7)
      {
        if (Unsigned)
        {
          *(_DWORD *)&uint8_t buf[8] = 2;
          LODWORD(v51) = Unsigned;
          DWORD1(v51) = Unsigned;
        }
      }
      if ((v19 & 1) == 0)
      {
        uint64_t v33 = *re::assetsLogObjects((re *)v19);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)float32x2_t v40 = 0;
          _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture", v40, 2u);
        }

        uint64_t v29 = 0;
        goto LABEL_41;
      }
    }
    *(_OWORD *)long long buf = v54;
    long long v48 = *(_OWORD *)v55;
    v49[0] = *(_OWORD *)&v55[16];
    *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v55[28];
    id v50 = v56;
    long long v51 = v57;
    if (a7)
    {
      if (v20)
      {
        *(_DWORD *)&uint8_t buf[8] = 2;
        LODWORD(v51) = v20;
        DWORD1(v51) = v20;
      }
    }
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    if (v21)
    {
      *(_OWORD *)float32x2_t v40 = v54;
      long long v41 = *(_OWORD *)v55;
      v42[0] = *(_OWORD *)&v55[16];
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v55[28];
      id v43 = v56;
      long long v44 = v57;
      if (a7)
      {
        if (v22)
        {
          *(_DWORD *)&v40[8] = 2;
          LODWORD(v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
          DWORD1(v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
        }
      }
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      if (v23)
      {
        uint64_t v24 = re::globalAllocators((re *)v23);
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 104, 8);
        *(_OWORD *)uint64_t v25 = 0u;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)(v25 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
        *(_OWORD *)(v25 + 80) = 0u;
        *(void *)(v25 + 96) = 0;
        *(_OWORD *)(v25 + 48) = 0u;
        re::DynamicString::setCapacity((void *)(v25 + 72), 0);
        re::AssetHandle::operator=(v25, (uint64_t *)&v52);
        re::AssetHandle::operator=(v25 + 24, (uint64_t *)&v45);
        re::AssetHandle::operator=(v25 + 48, (uint64_t *)&v38);
        int v26 = (__CFString *)objc_retainAutoreleaseReturnValue(*(id *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v38)
                                                                    + 248));
        if (v26)
        {
          CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v26, 0x8000100u);
          re::DynamicString::operator=((re::DynamicString *)(v25 + 72), (re::DynamicString *)&v36);
          int v26 = v36;
          if (v36)
          {
            if (v37) {
              int v26 = (__CFString *)(*((uint64_t (**)(void))v36->isa + 5))();
            }
          }
        }
        id v28 = re::ImageBasedLightAsset::assetType((re::ImageBasedLightAsset *)v26);
        (*(void (**)(__CFString **__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v36, a1, v25, v28, 0, 0, 0);
        uint64_t v29 = v36;
        if (v36) {
          id v30 = &v36->info;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
      }
      else
      {
        long long v34 = *re::assetsLogObjects((re *)v23);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v36) = 0;
          _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "Failed to load IBL specular texture", (uint8_t *)&v36, 2u);
        }
        uint64_t v29 = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
    }
    else
    {
      uint64_t v32 = *re::assetsLogObjects((re *)v21);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)float32x2_t v40 = 0;
        _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Failed to load IBL diffuse texture", v40, 2u);
      }
      uint64_t v29 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v45);

LABEL_41:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v52);
    goto LABEL_42;
  }
  long long v31 = *re::assetsLogObjects(v17);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "REAssetManagerImageBasedLightMemoryAssetCreateWithTextureData: missing textures", buf, 2u);
  }
  uint64_t v29 = 0;
LABEL_42:

  if (v58[0]) {
  return v29;
  }
}

uint64_t anonymous namespace'::loadIBLTextureWithData(void *a1, const char *a2, uint64_t a3, re::ImportGraphicsContext *a4, id *a5, uint64_t a6, long long *a7)
{
  uint64_t v13 = a1;
  re::ImportGraphicsContext::createFromRenderManager(a4, (re::ImportGraphicsContext *)v27);
  id v14 = v13;
  *(void *)id v28 = v14;

  if (!v25)
  {
    if (!v24[0])
    {
      uint64_t v15 = 0;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v25 != 1)
  {
    uint64_t v22 = std::__throw_bad_variant_access[abi:nn180100]();
    return REAssetManagerImageBasedLightMemoryAssetCreateWithTextureData(v22);
  }
  uint64_t v15 = 0;
  if (v24[3] && v24[0])
  {
LABEL_7:
    int v16 = *(_DWORD *)(a6 + 56);
    *(void *)&v28[17] = 0;
    *(void *)&id v28[12] = 0;
    *(_DWORD *)id v28 = 16777473;
    uint64_t v15 = 1;
    void v28[4] = 1;
    *(_DWORD *)&unsigned char v28[8] = 1;
    int v29 = 0;
    TextureAsset = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)v23, v16, (long long *)v28);
    uint64_t v18 = re::TextureAsset::assetType(TextureAsset);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, void))(*(void *)a3 + 416))(v28, a3, TextureAsset, v18, 0, 0, 0);
    long long v19 = *a7;
    *a7 = *(_OWORD *)v28;
    *(_OWORD *)id v28 = v19;
    uint64_t v20 = *((void *)a7 + 2);
    *((void *)a7 + 2) = *(void *)&v28[16];
    *(void *)&v28[16] = v20;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
  }
LABEL_9:

  if (v25 != -1) {
    ((void (*)(unsigned char *, void *))*(&off_26E736828 + v25))(v28, v24);
  }

  return v15;
}

__CFString *REAssetManagerImageBasedLightMemoryAssetCreateWithTextureData(uint64_t a1, id *a2, void *a3, void *a4, void *a5, const char *a6)
{
  return REAssetManagerImageBasedLightMemoryAssetCreateWithTextureDataAndOptions(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync(uint64_t a1, id *a2, re::IBLAssetCompiler *this)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  int v72 = &unk_26E6CA830;
  uint64_t v6 = re::IBLAssetCompiler::createFromJson(this, (const re::IntrospectionBase *)&v72, (uint64_t)v67);
  if (v67[0])
  {
    unint64_t v7 = v68;
    *(void *)&long long v96 = 0;
    *((void *)&v96 + 1) = v98;
    uint64_t v97 = 488;
    v98[0] = 0;
    uint64_t v92 = 0;
    uint64_t v93 = v95;
    uint64_t v94 = 488;
    v95[0] = 0;
    uint64_t v10 = (re *)re::path::dirname((re::path *)&v96, this, v9);
    if (!v10 || (uint64_t v11 = v10, !*(unsigned char *)v10))
    {
      int v16 = *re::assetsLogObjects(v10);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = this;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Error loading .reibl file: unable to find directory of '%s'", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v17 = 0;
      goto LABEL_77;
    }
    int v80 = 1;
    int v84 = 0;
    char v85 = 0;
    int v86 = 0;
    char v87 = 0;
    uint64_t v82 = 0;
    uint64_t v81 = 0;
    char v83 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    id v89 = 0;
    int v88 = 4;
    long long buf = 0x300000002uLL;
    id v12 = a2[23];
    id v66 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v66, sel_setStorageMode_, 0);
    unint64_t v13 = *((void *)v7 + 10);
    unint64_t v14 = v13 >> 1;
    if ((v13 & 1) == 0) {
      unint64_t v14 = v13 >> 1;
    }
    if (v14)
    {
      if (v13) {
        uint64_t v15 = (const char *)*((void *)v7 + 11);
      }
      else {
        uint64_t v15 = v7 + 81;
      }
      long long v19 = (__CFString *)CFStringCreateWithCString(0, v15, 0x8000100u);
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, v19);
      CFRelease(v19);
    }
    else
    {
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, (__CFString *)*MEMORY[0x263F00230]);
    }
    re::AssetHandle::serializationString((re::AssetHandle *)v7, (re::DynamicString *)&v63);
    unint64_t v21 = v64 >> 1;
    if ((v64 & 1) == 0) {
      unint64_t v21 = v64 >> 1;
    }
    if (v21)
    {
      if (v64) {
        uint64_t v22 = v65;
      }
      else {
        uint64_t v22 = (char *)&v64 + 1;
      }
      uint64_t v23 = (_anonymous_namespace_ *)re::path::join(&v92, v11, v22, v20);
      uint64_t v24 = v23;
      if (v64) {
        unsigned int v25 = v65;
      }
      else {
        unsigned int v25 = (char *)&v64 + 1;
      }
      if (!v26)
      {
        id v58 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v77) = 136315138;
          *(void *)((char *)&v77 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v24;
          _os_log_error_impl(&dword_233120000, v58, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%s'", (uint8_t *)&v77, 0xCu);
        }
        uint64_t v17 = 0;
        goto LABEL_71;
      }
      uint64_t v27 = v26;
      id v28 = re::TextureAsset::assetType(v26);
      (*(void (**)(long long *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v77, a1, v27, v28, 0, 0, 1);
      uint64_t v29 = *((void *)v7 + 1);
      id v30 = (const char *)*((void *)v7 + 2);
      *((void *)v7 + 1) = *((void *)&v77 + 1);
      *((void *)&v77 + 1) = v29;
      uint64_t v31 = *(void *)v7;
      *(void *)unint64_t v7 = 0;
      *(void *)unint64_t v7 = v77;
      *((void *)v7 + 2) = v78;
      *(void *)&long long v77 = v31;
      uint64_t v78 = v30;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v77);
    }
    re::AssetHandle::serializationString((re::AssetHandle *)(v7 + 24), (re::DynamicString *)&v77);
    uint64_t v33 = *((void *)&v77 + 1) >> 1;
    if ((BYTE8(v77) & 1) == 0) {
      uint64_t v33 = BYTE8(v77) >> 1;
    }
    if (v33)
    {
      if (BYTE8(v77)) {
        long long v34 = v78;
      }
      else {
        long long v34 = (char *)&v77 + 9;
      }
      uint64_t v35 = (_anonymous_namespace_ *)re::path::join(&v92, v11, v34, v32);
      long long v36 = v35;
      if (BYTE8(v77)) {
        char v37 = v78;
      }
      else {
        char v37 = (char *)&v77 + 9;
      }
      if (!v38)
      {
        id v59 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v75) = 136315138;
          *(void *)((char *)&v75 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v36;
          _os_log_error_impl(&dword_233120000, v59, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%s'", (uint8_t *)&v75, 0xCu);
        }
        uint64_t v17 = 0;
        goto LABEL_68;
      }
      uint64_t v39 = v38;
      float32x2_t v40 = re::TextureAsset::assetType(v38);
      (*(void (**)(long long *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v75, a1, v39, v40, 0, 0, 1);
      long long v41 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v7 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v75;
      long long v75 = v41;
      CGFloat v42 = (const char *)*((void *)v7 + 5);
      *((void *)v7 + 5) = v76;
      uint64_t v76 = v42;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v75);
    }
    id v43 = re::AssetHandle::serializationString((re::AssetHandle *)(v7 + 48), (re::DynamicString *)&v75);
    uint64_t v45 = *((void *)&v75 + 1) >> 1;
    if ((BYTE8(v75) & 1) == 0) {
      uint64_t v45 = BYTE8(v75) >> 1;
    }
    if (v45)
    {
      if (BYTE8(v75)) {
        uint64_t v46 = v76;
      }
      else {
        uint64_t v46 = (char *)&v75 + 9;
      }
      id v47 = (_anonymous_namespace_ *)re::path::join(&v92, v11, v46, v44);
      long long v48 = v47;
      if (BYTE8(v75)) {
        id v49 = v76;
      }
      else {
        id v49 = (char *)&v75 + 9;
      }
      if (!v50)
      {
        long long v60 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v73 = 136315138;
          *(void *)&void v73[4] = v48;
          _os_log_error_impl(&dword_233120000, v60, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%s'", v73, 0xCu);
        }
        uint64_t v17 = 0;
        goto LABEL_65;
      }
      long long v51 = v50;
      long long v52 = re::TextureAsset::assetType(v50);
      (*(void (**)(uint8_t *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(v73, a1, v51, v52, 0, 0, 1);
      long long v53 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v7 + 3) = *(_OWORD *)v73;
      *(_OWORD *)unsigned int v73 = v53;
      uint64_t v54 = *((void *)v7 + 8);
      *((void *)v7 + 8) = v74;
      uint64_t v74 = v54;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v73);
      id v43 = (re::DynamicString *)*((id *)v51 + 31);
      if (v43)
      {
        CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)*((id *)v51 + 31), 0x8000100u);
        re::DynamicString::operator=((re::DynamicString *)(v7 + 72), (re::DynamicString *)v73);
        id v43 = *(re::DynamicString **)v73;
        if (*(void *)v73)
        {
          if (v73[8]) {
            id v43 = (re::DynamicString *)(*(uint64_t (**)(void))(**(void **)v73 + 40))();
          }
        }
      }
    }
    id v56 = re::ImageBasedLightAsset::assetType(v43);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, char *, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(v73, a1, v7, v56, 0, 0, 1);
    uint64_t v17 = *(void *)v73;
    if (*(void *)v73) {
      id v57 = (id)(*(void *)v73 + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v73);
LABEL_65:
    if (void)v75 && (BYTE8(v75)) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
LABEL_68:
    if (void)v77 && (BYTE8(v77)) {
      (*(void (**)(void))(*(void *)v77 + 40))();
    }
LABEL_71:
    if (v63 && (v64 & 1) != 0) {
      (*(void (**)(void))(*(void *)v63 + 40))();
    }
    if (v66) {

    }
LABEL_77:
    if (v93 != v95) {
      (*(void (**)(const char *))(*(void *)v92 + 40))(v92);
    }
    if (*((unsigned char **)&v96 + 1) != v98) {
      (*(void (**)(void))(*(void *)v96 + 40))(v96);
    }
    goto LABEL_81;
  }
  uint64_t v18 = *re::assetsLogObjects(v6);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    if (v70) {
      long long v62 = *(unsigned char **)&v71[7];
    }
    else {
      long long v62 = v71;
    }
    LODWORD(v96) = 136315138;
    *(void *)((char *)&v96 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v62;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Failed to load .reibl source': %s", (uint8_t *)&v96, 0xCu);
  }
  uint64_t v17 = 0;
LABEL_81:
  if (!v67[0] && v69 && (v70 & 1) != 0) {
    (*(void (**)(void))(*(void *)v69 + 40))();
  }
  return v17;
}

uint64_t anonymous namespace'::loadIBLTextureWithContentsOfFile(_anonymous_namespace_ *a1, re::ImportGraphicsContext *a2, id *a3, uint64_t a4, uint64_t a5)
{
  re::ImportGraphicsContext::createFromAvailableManagers(a2, 0, (re::ImportGraphicsContext *)v18);
  if (!v16)
  {
    if (!v15[0])
    {
      uint64_t TextureAsset = 0;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v16 != 1)
  {
    uint64_t v13 = std::__throw_bad_variant_access[abi:nn180100]();
    return REAssetManagerPostLoadProcessImageBasedLightAsset(v13);
  }
  uint64_t TextureAsset = 0;
  if (v15[3] && v15[0])
  {
LABEL_7:
    int v11 = *(_DWORD *)(a4 + 56);
    *(void *)((char *)v22 + 5) = 0;
    v22[0] = 0;
    int v19 = 16777473;
    char v20 = 1;
    int v21 = 1;
    int v23 = 0;
    uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v14, v11, (long long *)&v19);
  }
LABEL_9:

  if (v16 != -1) {
    ((void (*)(int *, void *))*(&off_26E736828 + v16))(&v19, v15);
  }

  return TextureAsset;
}

re::ImportGraphicsContext *REAssetManagerPostLoadProcessImageBasedLightAsset(uint64_t a1, re::ImportGraphicsContext *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, v9);
    uint64_t v4 = re::AssetHandle::asset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v9);
    if (v4)
    {
      uint64_t v5 = (re::TextureCompatibility *)v4;
      re::ImportGraphicsContext::createFromRenderManager(v3, (re::ImportGraphicsContext *)v8);
      uint64_t v3 = (re::ImportGraphicsContext *)re::TextureCompatibility::postProcessLoadedIBLAsset(v5, (re::ImageBasedLightAsset *)v8, v6);
    }
    else
    {
      uint64_t v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  }
  return v3;
}

uint64_t REAssetManagerMaterialMemoryAssetCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v10);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v10);
  re::MaterialAsset::makeMaterialMemoryAsset(a1, a2, (re::AssetHandle *)v8, 0, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  uint64_t v5 = v9[0];
  if (v9[0]) {
    id v6 = (id)(v9[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

uint64_t REAssetManagerCopyVideoMaterialAsset(uint64_t *a1)
{
  unsigned int v2 = re::MaterialAsset::assetType((re::MaterialAsset *)a1);
  uint64_t v3 = (const void *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a1[130], (unint64_t)v2);
  if (!v4) {
    return 0;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)(v4 + 80));
  if (!v8[1] || (uint64_t v5 = v8[0]) == 0)
  {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
    return 0;
  }
  id v6 = (id)(v8[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

uint64_t REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier(uint64_t a1, void *a2, const char *a3)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void);
  uint64_t v13;
  id v14;
  uint64_t v16;
  char v17;
  re *v18;

  uint64_t v5 = a2;
  id v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 88, 8);
  unint64_t v8 = v5;
  uint64_t v18 = v8;
  re::ShaderLibraryAsset::ShaderLibraryAsset(v7, (id *)&v18);

  re::DynamicString::operator=((re::DynamicString *)(v7 + 8), (re::DynamicString *)&v16);
  uint64_t v10 = (re::ShaderLibraryAsset *)v16;
  if (v16 && (v17 & 1) != 0) {
    uint64_t v10 = (re::ShaderLibraryAsset *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
  }
  int v11 = re::ShaderLibraryAsset::assetType(v10);
  id v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416);

  v12(&v16, a1, v7, v11, 0, 0, 0);
  uint64_t v13 = v16;
  if (v16) {
    unint64_t v14 = (id)(v16 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
  return v13;
}

uint64_t REAssetManagerShaderLibraryMemoryAssetCreate(uint64_t a1, void *a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void);
  uint64_t v10;
  id v11;
  void v13[3];
  re *v14;

  uint64_t v3 = a2;
  uint64_t v4 = re::globalAllocators(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 88, 8);
  id v6 = v3;
  unint64_t v14 = v6;
  re::ShaderLibraryAsset::ShaderLibraryAsset(v5, (id *)&v14);

  unint64_t v8 = re::ShaderLibraryAsset::assetType(v7);
  size_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416);

  v9(v13, a1, v5, v8, 0, 0, 0);
  uint64_t v10 = v13[0];
  if (v13[0]) {
    int v11 = (id)(v13[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

uint64_t REAssetManagerShaderGraphMemoryAssetCreate(re *a1, void *a2, uint64_t a3)
{
  id v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 56, 8);
  id v14 = (id)[a2 copy];

  re::ShaderGraphAsset::ShaderGraphAsset(v7, &v14, a3);
  size_t v9 = re::ShaderGraphAsset::assetType(v8);
  (*(void (**)(void *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v13, a1, v7, v9, 0, 0, 0);
  uint64_t v10 = v13[0];
  if (v13[0]) {
    id v11 = (id)(v13[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v10;
}

uint64_t REAssetManagerTimelineAssetCreateFloatAnimation(_anonymous_namespace_ *a1, uint64_t a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  if (a3)
  {
    int v8 = *a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  else if (a4)
  {
LABEL_3:
    int v7 = *a4;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (a5) {
LABEL_4:
  }
    int v6 = *a5;
LABEL_7:
  uint64_t v16 = re::Timeline::Timeline(v15, 11);
  *(unsigned char *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v16 + 88) = 0;
  *(unsigned char *)(v16 + 96) = 0;
  *(unsigned char *)(v16 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v16 + 112) = 0;
  *(void *)uint64_t v16 = &unk_26E6BFFE8;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    id v17 = *(const char **)(a2 + 8);
  }
  else {
    id v17 = "";
  }
  uint64_t v18 = (re::DynamicString *)(v16 + 40);
  *(void *)&v24[0] = v17;
  *((void *)&v24[0] + 1) = strlen(v17);
  int v19 = re::DynamicString::operator=(v18, (uint64_t)v24);
  *(unsigned char *)(v15 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v15 + 80) = *(void *)(a2 + 24);
  if (a3 || *(unsigned char *)(v15 + 88))
  {
    if (a3 || !*(unsigned char *)(v15 + 88))
    {
      if (a3 && !*(unsigned char *)(v15 + 88)) {
        *(unsigned char *)(v15 + 88) = 1;
      }
      *(_DWORD *)(v15 + 92) = v8;
    }
    else
    {
      *(unsigned char *)(v15 + 88) = 0;
    }
  }
  if (a4 || *(unsigned char *)(v15 + 96))
  {
    if (a4 || !*(unsigned char *)(v15 + 96))
    {
      if (a4 && !*(unsigned char *)(v15 + 96)) {
        *(unsigned char *)(v15 + 96) = 1;
      }
      *(_DWORD *)(v15 + 100) = v7;
    }
    else
    {
      *(unsigned char *)(v15 + 96) = 0;
    }
  }
  if (!a5 && !*(unsigned char *)(v15 + 104))
  {
LABEL_33:
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (!a5 && *(unsigned char *)(v15 + 104))
  {
    *(unsigned char *)(v15 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    goto LABEL_33;
  }
  if (a5 && !*(unsigned char *)(v15 + 104)) {
    *(unsigned char *)(v15 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(_DWORD *)(v15 + 108) = v6;
  if (a6)
  {
LABEL_34:
  }
LABEL_35:
  int v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v26 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v15, (uint64_t)v24, 0, 0);
  uint64_t v20 = v23[0];
  if (v23[0]) {
    id v21 = (id)(v23[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
  return v20;
}

uint64_t REAssetManagerTimelineAssetCreateDoubleAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    uint64_t v8 = *a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  else if (a4)
  {
LABEL_3:
    uint64_t v7 = *a4;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (a5) {
LABEL_4:
  }
    uint64_t v6 = *a5;
LABEL_7:
  uint64_t v16 = re::Timeline::Timeline(v15, 12);
  *(unsigned char *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v16 + 88) = 0;
  *(unsigned char *)(v16 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(unsigned char *)(v16 + 120) = 0;
  *(void *)(v16 + 136) = 0;
  *(void *)uint64_t v16 = &unk_26E6D1C90;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    id v17 = *(const char **)(a2 + 8);
  }
  else {
    id v17 = "";
  }
  uint64_t v18 = (re::DynamicString *)(v16 + 40);
  *(void *)&v24[0] = v17;
  *((void *)&v24[0] + 1) = strlen(v17);
  int v19 = re::DynamicString::operator=(v18, (uint64_t)v24);
  *(unsigned char *)(v15 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v15 + 80) = *(void *)(a2 + 24);
  if (a3 || *(unsigned char *)(v15 + 88))
  {
    if (a3 || !*(unsigned char *)(v15 + 88))
    {
      if (a3 && !*(unsigned char *)(v15 + 88)) {
        *(unsigned char *)(v15 + 88) = 1;
      }
      *(void *)(v15 + 96) = v8;
    }
    else
    {
      *(unsigned char *)(v15 + 88) = 0;
    }
  }
  if (a4 || *(unsigned char *)(v15 + 104))
  {
    if (a4 || !*(unsigned char *)(v15 + 104))
    {
      if (a4 && !*(unsigned char *)(v15 + 104)) {
        *(unsigned char *)(v15 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
      }
      *(void *)(v15 + 112) = v7;
    }
    else
    {
      *(unsigned char *)(v15 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
  }
  if (!a5 && !*(unsigned char *)(v15 + 120))
  {
LABEL_33:
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (!a5 && *(unsigned char *)(v15 + 120))
  {
    *(unsigned char *)(v15 + 120) = 0;
    goto LABEL_33;
  }
  if (a5 && !*(unsigned char *)(v15 + 120)) {
    *(unsigned char *)(v15 + 120) = 1;
  }
  *(void *)(v15 + 128) = v6;
  if (a6)
  {
LABEL_34:
  }
LABEL_35:
  int v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v26 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v15, (uint64_t)v24, 0, 0);
  uint64_t v20 = v23[0];
  if (v23[0]) {
    id v21 = (id)(v23[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
  return v20;
}

uint64_t REAssetManagerTimelineAssetCreateVector2FAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    uint64_t v6 = *a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  else if (a4)
  {
LABEL_3:
    uint64_t v21 = *a4;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (a5) {
LABEL_4:
  }
    uint64_t v22 = *a5;
LABEL_7:
  uint64_t v14 = re::Timeline::Timeline(v13, 13);
  *(unsigned char *)(v14 + 72) = 0;
  *(void *)(v14 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v14 + 88) = 0;
  *(unsigned char *)(v14 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(unsigned char *)(v14 + 120) = 0;
  *(void *)(v14 + 136) = 0;
  *(void *)uint64_t v14 = &unk_26E6D1D28;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v15 = *(const char **)(a2 + 8);
  }
  else {
    uint64_t v15 = "";
  }
  uint64_t v16 = (re::DynamicString *)(v14 + 40);
  *(void *)&v24[0] = v15;
  *((void *)&v24[0] + 1) = strlen(v15);
  id v17 = re::DynamicString::operator=(v16, (uint64_t)v24);
  *(unsigned char *)(v13 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v13 + 80) = *(void *)(a2 + 24);
  if (a3 || *(unsigned char *)(v13 + 88))
  {
    if (a3 || !*(unsigned char *)(v13 + 88))
    {
      if (a3 && !*(unsigned char *)(v13 + 88)) {
        *(unsigned char *)(v13 + 88) = 1;
      }
      *(void *)(v13 + 96) = v6;
    }
    else
    {
      *(unsigned char *)(v13 + 88) = 0;
    }
  }
  if (a4 || *(unsigned char *)(v13 + 104))
  {
    if (a4 || !*(unsigned char *)(v13 + 104))
    {
      if (a4 && !*(unsigned char *)(v13 + 104)) {
        *(unsigned char *)(v13 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
      }
      *(void *)(v13 + 112) = v21;
    }
    else
    {
      *(unsigned char *)(v13 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
  }
  if (!a5 && !*(unsigned char *)(v13 + 120))
  {
LABEL_33:
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (!a5 && *(unsigned char *)(v13 + 120))
  {
    *(unsigned char *)(v13 + 120) = 0;
    goto LABEL_33;
  }
  if (a5 && !*(unsigned char *)(v13 + 120)) {
    *(unsigned char *)(v13 + 120) = 1;
  }
  *(void *)(v13 + 128) = v22;
  if (a6)
  {
LABEL_34:
  }
LABEL_35:
  int v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v26 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v13, (uint64_t)v24, 0, 0);
  uint64_t v18 = v23[0];
  if (v23[0]) {
    id v19 = (id)(v23[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
  return v18;
}

uint64_t REAssetManagerTimelineAssetCreateVector3FAnimation(_anonymous_namespace_ *a1, uint64_t a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  if (a3)
  {
    long long v20 = *a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  else if (a4)
  {
LABEL_3:
    long long v21 = *a4;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (a5) {
LABEL_4:
  }
    long long v22 = *a5;
LABEL_7:
  uint64_t v13 = re::Timeline::Timeline(v12, 14);
  *(unsigned char *)(v13 + 72) = 0;
  *(void *)(v13 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v13 + 96) = 0;
  *(unsigned char *)(v13 + 128) = 0;
  *(unsigned char *)(v13 + 160) = 0;
  *(void *)(v13 + 192) = 0;
  *(void *)uint64_t v13 = &unk_26E6D1DC0;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v14 = *(const char **)(a2 + 8);
  }
  else {
    uint64_t v14 = "";
  }
  uint64_t v15 = (re::DynamicString *)(v13 + 40);
  *(void *)&v24[0] = v14;
  *((void *)&v24[0] + 1) = strlen(v14);
  uint64_t v16 = re::DynamicString::operator=(v15, (uint64_t)v24);
  *(unsigned char *)(v12 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v12 + 80) = *(void *)(a2 + 24);
  if (a3 || *(unsigned char *)(v12 + 96))
  {
    if (a3 || !*(unsigned char *)(v12 + 96))
    {
      if (a3 && !*(unsigned char *)(v12 + 96)) {
        *(unsigned char *)(v12 + 96) = 1;
      }
      *(_OWORD *)(v12 + 112) = v20;
    }
    else
    {
      *(unsigned char *)(v12 + 96) = 0;
    }
  }
  if (a4 || *(unsigned char *)(v12 + 128))
  {
    if (a4 || !*(unsigned char *)(v12 + 128))
    {
      if (a4 && !*(unsigned char *)(v12 + 128)) {
        *(unsigned char *)(v12 + 128) = 1;
      }
      *(_OWORD *)(v12 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v21;
    }
    else
    {
      *(unsigned char *)(v12 + 128) = 0;
    }
  }
  if (!a5 && !*(unsigned char *)(v12 + 160))
  {
LABEL_33:
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (!a5 && *(unsigned char *)(v12 + 160))
  {
    *(unsigned char *)(v12 + 160) = 0;
    goto LABEL_33;
  }
  if (a5 && !*(unsigned char *)(v12 + 160)) {
    *(unsigned char *)(v12 + 160) = 1;
  }
  *(_OWORD *)(v12 + 176) = v22;
  if (a6)
  {
LABEL_34:
  }
LABEL_35:
  int v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v26 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v12, (uint64_t)v24, 0, 0);
  uint64_t v17 = v23[0];
  if (v23[0]) {
    id v18 = (id)(v23[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
  return v17;
}

uint64_t REAssetManagerTimelineAssetCreateVector4FAnimation(_anonymous_namespace_ *a1, uint64_t a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  if (a3)
  {
    long long v20 = *a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  else if (a4)
  {
LABEL_3:
    long long v21 = *a4;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (a5) {
LABEL_4:
  }
    long long v22 = *a5;
LABEL_7:
  uint64_t v13 = re::Timeline::Timeline(v12, 15);
  *(unsigned char *)(v13 + 72) = 0;
  *(void *)(v13 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v13 + 96) = 0;
  *(unsigned char *)(v13 + 128) = 0;
  *(unsigned char *)(v13 + 160) = 0;
  *(void *)(v13 + 192) = 0;
  *(void *)uint64_t v13 = &unk_26E6D1E58;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v14 = *(const char **)(a2 + 8);
  }
  else {
    uint64_t v14 = "";
  }
  uint64_t v15 = (re::DynamicString *)(v13 + 40);
  *(void *)&v24[0] = v14;
  *((void *)&v24[0] + 1) = strlen(v14);
  uint64_t v16 = re::DynamicString::operator=(v15, (uint64_t)v24);
  *(unsigned char *)(v12 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v12 + 80) = *(void *)(a2 + 24);
  if (a3 || *(unsigned char *)(v12 + 96))
  {
    if (a3 || !*(unsigned char *)(v12 + 96))
    {
      if (a3 && !*(unsigned char *)(v12 + 96)) {
        *(unsigned char *)(v12 + 96) = 1;
      }
      *(_OWORD *)(v12 + 112) = v20;
    }
    else
    {
      *(unsigned char *)(v12 + 96) = 0;
    }
  }
  if (a4 || *(unsigned char *)(v12 + 128))
  {
    if (a4 || !*(unsigned char *)(v12 + 128))
    {
      if (a4 && !*(unsigned char *)(v12 + 128)) {
        *(unsigned char *)(v12 + 128) = 1;
      }
      *(_OWORD *)(v12 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v21;
    }
    else
    {
      *(unsigned char *)(v12 + 128) = 0;
    }
  }
  if (!a5 && !*(unsigned char *)(v12 + 160))
  {
LABEL_33:
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (!a5 && *(unsigned char *)(v12 + 160))
  {
    *(unsigned char *)(v12 + 160) = 0;
    goto LABEL_33;
  }
  if (a5 && !*(unsigned char *)(v12 + 160)) {
    *(unsigned char *)(v12 + 160) = 1;
  }
  *(_OWORD *)(v12 + 176) = v22;
  if (a6)
  {
LABEL_34:
  }
LABEL_35:
  int v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v26 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v12, (uint64_t)v24, 0, 0);
  uint64_t v17 = v23[0];
  if (v23[0]) {
    id v18 = (id)(v23[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
  return v17;
}

uint64_t REAssetManagerTimelineAssetCreateQuaternionFAnimation(_anonymous_namespace_ *a1, uint64_t a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  if (a3)
  {
    long long v16 = *a3;
    unsigned __int8 v6 = 1;
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  v15[0] = v6;
  if (a4)
  {
    long long v14 = *a4;
    unsigned __int8 v7 = 1;
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  v13[0] = v7;
  if (a5)
  {
    long long v12 = *a5;
    unsigned __int8 v8 = 1;
  }
  else
  {
    unsigned __int8 v8 = 0;
  }
  v11[0] = v8;
  v10[0] = 0;
}

uint64_t anonymous namespace'::createFromToByAnimation<re::QuaternionFAnimation,re::Quaternion<float>>(_anonymous_namespace_ *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, unsigned char *a7)
{
  v41[3] = *MEMORY[0x263EF8340];
  uint64_t v13 = re::Timeline::Timeline(v12, 16);
  *(unsigned char *)(v13 + 72) = 0;
  *(void *)(v13 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v13 + 96) = 0;
  long long v14 = (unsigned char *)(v13 + 96);
  *(unsigned char *)(v13 + 128) = 0;
  uint64_t v15 = (unsigned char *)(v13 + 128);
  *(unsigned char *)(v13 + 160) = 0;
  *(void *)(v13 + 192) = 0;
  *(void *)uint64_t v13 = &unk_26E6D1EF0;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    long long v16 = *(const char **)(a2 + 8);
  }
  else {
    long long v16 = "";
  }
  uint64_t v17 = (re::DynamicString *)(v13 + 40);
  *(void *)&v36[0] = v16;
  *((void *)&v36[0] + 1) = strlen(v16);
  id v18 = re::DynamicString::operator=(v17, (uint64_t)v36);
  *(unsigned char *)(v12 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v12 + 80) = *(void *)(a2 + 24);
  int v19 = *a3;
  if (*v14) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v19 == 0;
  }
  if (!v20)
  {
    if (*v14) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      *long long v14 = 0;
    }
    else
    {
      if (*v14) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v19 == 0;
      }
      if (!v22) {
        *long long v14 = 1;
      }
      *(_OWORD *)(v12 + 112) = *((_OWORD *)a3 + 1);
    }
  }
  int v23 = *a4;
  if (*v15) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v23 == 0;
  }
  if (!v24)
  {
    if (*v15) {
      BOOL v25 = v23 == 0;
    }
    else {
      BOOL v25 = 0;
    }
    if (v25)
    {
      *uint64_t v15 = 0;
    }
    else
    {
      if (*v15) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v23 == 0;
      }
      if (!v26) {
        *uint64_t v15 = 1;
      }
      *(_OWORD *)(v12 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *((_OWORD *)a4 + 1);
    }
  }
  int v27 = *a5;
  if (*(unsigned char *)(v12 + 160)) {
    BOOL v28 = 0;
  }
  else {
    BOOL v28 = v27 == 0;
  }
  if (!v28)
  {
    if (*(unsigned char *)(v12 + 160)) {
      BOOL v29 = v27 == 0;
    }
    else {
      BOOL v29 = 0;
    }
    if (v29)
    {
      *(unsigned char *)(v12 + 160) = 0;
    }
    else
    {
      if (*(unsigned char *)(v12 + 160)) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v27 == 0;
      }
      if (!v30) {
        *(unsigned char *)(v12 + 160) = 1;
      }
      *(_OWORD *)(v12 + 176) = *((_OWORD *)a5 + 1);
    }
  }
  if (*a7 && *a3 | *a4)
  {
    v41[0] = v14;
    v41[1] = v15;
    v39[0] = v41;
    v39[1] = 2;
    float32x2_t v40 = a7 + 16;
    *(void *)&v36[0] = &v40;
    *((void *)&v36[0] + 1) = 1;
    id v18 = (_anonymous_namespace_ *)re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Quaternion<float>>((re *)v39, v36, (uint64_t)v41, 2uLL);
    *(unsigned char *)(v12 + 72) = (_BYTE)v18;
  }
  if (a6)
  {
  }
  int v37 = 0;
  memset(v36, 0, sizeof(v36));
  uint64_t v38 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v12, (uint64_t)v36, 0, 0);
  uint64_t v31 = v41[0];
  if (v41[0]) {
    id v32 = (id)(v41[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v41);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v36);
  return v31;
}

uint64_t REAssetManagerTimelineAssetCreateSRTAnimation(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, uint64_t a6)
{
  if (a3)
  {
    long long v6 = a3[1];
    v16[1] = *a3;
    void v16[2] = v6;
    _OWORD v16[3] = a3[2];
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  LOBYTE(v16[0]) = v7;
  if (a4)
  {
    long long v8 = a4[1];
    v15[1] = *a4;
    void v15[2] = v8;
    uint64_t v15[3] = a4[2];
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
  }
  LOBYTE(v15[0]) = v9;
  if (a5)
  {
    long long v10 = a5[1];
    v14[1] = *a5;
    void v14[2] = v10;
    void v14[3] = a5[2];
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
  }
  LOBYTE(v14[0]) = v11;
  v13[0] = 0;
}

uint64_t anonymous namespace'::createFromToByAnimation<re::SRTAnimation,re::GenericSRT<float>>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, uint64_t a6, unsigned char *a7)
{
  v47[3] = *MEMORY[0x263EF8340];
  uint64_t v13 = re::Timeline::Timeline(v12, 17);
  *(unsigned char *)(v13 + 72) = 0;
  *(void *)(v13 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v13 + 96) = 0;
  long long v14 = (unsigned char *)(v13 + 96);
  *(unsigned char *)(v13 + 160) = 0;
  uint64_t v15 = (unsigned char *)(v13 + 160);
  *(unsigned char *)(v13 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v13 + 288) = 0;
  *(void *)uint64_t v13 = &unk_26E6D1F88;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    long long v16 = *(const char **)(a2 + 8);
  }
  else {
    long long v16 = "";
  }
  uint64_t v17 = (re::DynamicString *)(v13 + 40);
  *(void *)&v42[0] = v16;
  *((void *)&v42[0] + 1) = strlen(v16);
  id v18 = re::DynamicString::operator=(v17, (uint64_t)v42);
  *(unsigned char *)(v12 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v12 + 80) = *(void *)(a2 + 24);
  int v19 = *(unsigned __int8 *)a3;
  if (*v14) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v19 == 0;
  }
  if (!v20)
  {
    if (*v14) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      *long long v14 = 0;
    }
    else
    {
      if (*v14) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v19 == 0;
      }
      if (!v22) {
        *long long v14 = 1;
      }
      long long v23 = a3[1];
      long long v24 = a3[3];
      *(_OWORD *)(v12 + 128) = a3[2];
      *(_OWORD *)(v12 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v24;
      *(_OWORD *)(v12 + 112) = v23;
    }
  }
  int v25 = *(unsigned __int8 *)a4;
  if (*v15) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v25 == 0;
  }
  if (!v26)
  {
    if (*v15) {
      BOOL v27 = v25 == 0;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27)
    {
      *uint64_t v15 = 0;
    }
    else
    {
      if (*v15) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v25 == 0;
      }
      if (!v28) {
        *uint64_t v15 = 1;
      }
      long long v29 = a4[1];
      long long v30 = a4[3];
      *(_OWORD *)(v12 + 192) = a4[2];
      *(_OWORD *)(v12 + 208) = v30;
      *(_OWORD *)(v12 + 176) = v29;
    }
  }
  int v31 = *(unsigned __int8 *)a5;
  if (*(unsigned char *)(v12 + 224)) {
    BOOL v32 = 0;
  }
  else {
    BOOL v32 = v31 == 0;
  }
  if (!v32)
  {
    if (*(unsigned char *)(v12 + 224)) {
      BOOL v33 = v31 == 0;
    }
    else {
      BOOL v33 = 0;
    }
    if (v33)
    {
      *(unsigned char *)(v12 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
    else
    {
      if (*(unsigned char *)(v12 + 224)) {
        BOOL v34 = 1;
      }
      else {
        BOOL v34 = v31 == 0;
      }
      if (!v34) {
        *(unsigned char *)(v12 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
      }
      long long v35 = a5[1];
      long long v36 = a5[3];
      *(_OWORD *)(v12 + 256) = a5[2];
      *(_OWORD *)(v12 + ++*(void *)(result + 272) = v36;
      *(_OWORD *)(v12 + 240) = v35;
    }
  }
  if (*a7 && *(unsigned __int8 *)a3 | *(unsigned __int8 *)a4)
  {
    v47[0] = v14;
    v47[1] = v15;
    v45[0] = v47;
    v45[1] = 2;
    uint64_t v46 = a7 + 16;
    *(void *)&v42[0] = &v46;
    *((void *)&v42[0] + 1) = 1;
    id v18 = (_anonymous_namespace_ *)re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::GenericSRT<float>>((re *)v45, (uint64_t)v42, (uint64_t)v47, 2uLL);
    *(unsigned char *)(v12 + 72) = (_BYTE)v18;
  }
  if (a6)
  {
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  uint64_t v44 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v12, (uint64_t)v42, 0, 0);
  uint64_t v37 = v47[0];
  if (v47[0]) {
    id v38 = (id)(v47[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v47);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v42);
  return v37;
}

uint64_t REAssetManagerTimelineAssetCreateSkeletalPoseAnimationWithJointNames(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  v56[2] = *MEMORY[0x263EF8340];
  LOBYTE(v46) = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  if (a7)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(const char **)(a6 + 8 * v16);
      *(void *)&v38[0] = 0;
      *((void *)&v38[0] + 1) = "";
      unint64_t v18 = v44;
      if (v44 <= v16)
      {
        v31[0] = 0;
        memset(v55, 0, sizeof(v55));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)id v50 = 136315906;
        *(void *)&void v50[4] = "operator[]";
        *(_WORD *)&unsigned char v50[12] = 1024;
        *(_DWORD *)&v50[14] = 468;
        *(_WORD *)&v50[18] = 2048;
        *(void *)&v50[20] = v16;
        *(_WORD *)&v50[28] = 2048;
        *(void *)&v50[30] = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v19 = (void *)(v45 + v15);
      long long v20 = v38[0];
      *(void *)&v38[0] = 0;
      *((void *)&v38[0] + 1) = "";
      uint64_t v21 = *(void *)(v45 + v15 + 8);
      unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v45 + v15) & 1;
      v19[1] = *((void *)&v20 + 1);
      *(void *)&v55[0] = v22;
      *((void *)&v55[0] + 1) = v21;
      *int v19 = v20;
      re::StringID::destroyString((re::StringID *)v55);
      re::StringID::destroyString((re::StringID *)v38);
      ++v16;
      v15 += 16;
    }
    while (a7 != v16);
  }
  re::make::shared::object<re::SkeletalPoseJointDefinition,re::FixedArray<re::StringID>,decltype(nullptr)>((re *)&v42, (uint64_t)&v43);
  if (a3)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    *(void *)id v50 = 0;
    memset(&v50[16], 0, 48);
    *(void *)&v50[8] = "";
    uint64_t v53 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v55, (uint64_t)v50);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)&v46, (uint64_t *)v55);
    if (LOBYTE(v55[0])) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v55 + 8));
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v50);
    uint64_t v23 = v42;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v49, v23);
    *(void *)&v55[0] = a3;
    *((void *)&v55[0] + 1) = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)v48, (uint64_t)v55);
  }
  LOBYTE(v55[0]) = 0;
  if (a4)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    *(void *)&v38[0] = 0;
    memset(&v38[1], 0, 48);
    *((void *)&v38[0] + 1) = "";
    uint64_t v41 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v50, (uint64_t)v38);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)v55, (uint64_t *)v50);
    if (v50[0]) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v50[8]);
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v38);
    uint64_t v24 = v42;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v56, v24);
    *(void *)id v50 = a4;
    *(void *)&v50[8] = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)((char *)&v55[1] + 8), (uint64_t)v50);
  }
  v50[0] = 0;
  if (a5)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    v31[0] = 0;
    long long v32 = 0u;
    v31[1] = "";
    uint64_t v37 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v38, (uint64_t)v31);
    re::Optional<re::SkeletalPose>::operator=(v50, (uint64_t *)v38);
    if (LOBYTE(v38[0])) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v38 + 8));
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v31);
    uint64_t v25 = v42;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v54, v25);
    *(void *)&v38[0] = a5;
    *((void *)&v38[0] + 1) = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)&v50[24], (uint64_t)v38);
  }
  LOBYTE(v38[0]) = 0;
  if (LOBYTE(v38[0])) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v38 + 8));
  }
  if (v50[0]) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v50[8]);
  }
  if (LOBYTE(v55[0])) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v55 + 8));
  }
  if (v42) {

  }
  re::FixedArray<re::StringID>::deinit(&v43);
  if ((_BYTE)v46) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v47);
  }
  return v26;
}

uint64_t anonymous namespace'::createFromToByAnimation<re::SkeletalPoseAnimation,re::SkeletalPose>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, unsigned char *a7)
{
  void v30[3] = *MEMORY[0x263EF8340];
  uint64_t v12 = re::Timeline::Timeline(v11, 18);
  *(unsigned char *)(v12 + 72) = 0;
  *(unsigned char *)(v12 + 88) = 0;
  uint64_t v13 = (unsigned __int8 *)(v12 + 88);
  *(void *)(v12 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v12 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  long long v14 = (unsigned __int8 *)(v12 + 184);
  uint64_t v15 = (unsigned __int8 *)(v12 + 280);
  *(unsigned char *)(v12 + 280) = 0;
  *(void *)(v12 + 376) = 0;
  *(void *)uint64_t v12 = &unk_26E6D2020;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    unint64_t v16 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v16 = "";
  }
  uint64_t v17 = (re::DynamicString *)(v12 + 40);
  *(void *)&v25[0] = v16;
  *((void *)&v25[0] + 1) = strlen(v16);
  re::DynamicString::operator=(v17, (uint64_t)v25);
  *(unsigned char *)(v11 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)(v11 + 80) = *(void *)(a2 + 24);
  re::Optional<re::SkeletalPose>::operator=(v13, a3);
  re::Optional<re::SkeletalPose>::operator=(v14, a4);
  unint64_t v18 = (_anonymous_namespace_ *)re::Optional<re::SkeletalPose>::operator=(v15, a5);
  if (*a7 && *(unsigned __int8 *)a3 | *(unsigned __int8 *)a4)
  {
    v30[0] = v13;
    v30[1] = v14;
    v28[0] = v30;
    v28[1] = 2;
    long long v29 = a7 + 8;
    *(void *)&v25[0] = &v29;
    *((void *)&v25[0] + 1) = 1;
    unint64_t v18 = (_anonymous_namespace_ *)re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPose>((re *)v28, v25, (uint64_t)v30, (void *)2);
    *(unsigned char *)(v11 + 72) = (_BYTE)v18;
  }
  if (a6)
  {
  }
  int v26 = 0;
  memset(v25, 0, sizeof(v25));
  uint64_t v27 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v11, (uint64_t)v25, 0, 0);
  uint64_t v19 = v30[0];
  if (v30[0]) {
    id v20 = (id)(v30[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
  return v19;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveQuaternionFAnimation(_anonymous_namespace_ *a1, uint64_t a2, long long *a3, long long *a4, long long *a5, uint64_t a6, long long *a7)
{
  if (a3)
  {
    long long v19 = *a3;
    unsigned __int8 v7 = 1;
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  v18[0] = v7;
  if (a4)
  {
    long long v17 = *a4;
    unsigned __int8 v8 = 1;
  }
  else
  {
    unsigned __int8 v8 = 0;
  }
  v16[0] = v8;
  if (a5)
  {
    long long v15 = *a5;
    unsigned __int8 v9 = 1;
  }
  else
  {
    unsigned __int8 v9 = 0;
  }
  v14[0] = v9;
  if (a7)
  {
    long long v13 = *a7;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  v12[0] = v10;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveSRTAnimation(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, uint64_t a6, long long *a7)
{
  if (a3)
  {
    long long v7 = a3[1];
    v22[1] = *a3;
    void v22[2] = v7;
    uint64_t v22[3] = a3[2];
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  LOBYTE(v22[0]) = v8;
  if (a4)
  {
    long long v9 = a4[1];
    v21[1] = *a4;
    void v21[2] = v9;
    v21[3] = a4[2];
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  LOBYTE(v21[0]) = v10;
  if (a5)
  {
    long long v11 = a5[1];
    v20[1] = *a5;
    void v20[2] = v11;
    uint64_t v20[3] = a5[2];
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
  }
  LOBYTE(v20[0]) = v12;
  if (a7)
  {
    long long v13 = a7[1];
    long long v17 = *a7;
    long long v18 = v13;
    long long v19 = a7[2];
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
  }
  v16[0] = v14;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveSkeletalPoseAnimationWithJointNames(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  void v67[2] = *MEMORY[0x263EF8340];
  LOBYTE(v57) = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  if (a7)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      long long v18 = *(const char **)(a6 + 8 * v17);
      *(void *)&v48[0] = 0;
      *((void *)&v48[0] + 1) = "";
      unint64_t v19 = v55;
      if (v55 <= v17)
      {
        uint64_t v40 = 0;
        memset(v66, 0, sizeof(v66));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v61 = 136315906;
        *(void *)&v61[4] = "operator[]";
        *(_WORD *)&v61[12] = 1024;
        *(_DWORD *)&v61[14] = 468;
        *(_WORD *)&v61[18] = 2048;
        *(void *)&v61[20] = v17;
        *(_WORD *)&v61[28] = 2048;
        *(void *)&v61[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      id v20 = (void *)(v56 + v16);
      long long v21 = v48[0];
      *(void *)&v48[0] = 0;
      *((void *)&v48[0] + 1) = "";
      uint64_t v22 = *(void *)(v56 + v16 + 8);
      unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v56 + v16) & 1;
      v20[1] = *((void *)&v21 + 1);
      *(void *)&v66[0] = v23;
      *((void *)&v66[0] + 1) = v22;
      *id v20 = v21;
      re::StringID::destroyString((re::StringID *)v66);
      re::StringID::destroyString((re::StringID *)v48);
      ++v17;
      v16 += 16;
    }
    while (a7 != v17);
  }
  re::make::shared::object<re::SkeletalPoseJointDefinition,re::FixedArray<re::StringID>,decltype(nullptr)>((re *)&v53, (uint64_t)&v54);
  if (a3)
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    *(void *)uint64_t v61 = 0;
    memset(&v61[16], 0, 48);
    *(void *)&v61[8] = "";
    uint64_t v64 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v66, (uint64_t)v61);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)&v57, (uint64_t *)v66);
    if (LOBYTE(v66[0])) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v66 + 8));
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v61);
    uint64_t v24 = v53;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v60, v24);
    *(void *)&v66[0] = a3;
    *((void *)&v66[0] + 1) = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)v59, (uint64_t)v66);
  }
  LOBYTE(v66[0]) = 0;
  if (a4)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    *(void *)&v48[0] = 0;
    memset(&v48[1], 0, 48);
    *((void *)&v48[0] + 1) = "";
    uint64_t v51 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v61, (uint64_t)v48);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)v66, (uint64_t *)v61);
    if (v61[0]) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v61[8]);
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v48);
    uint64_t v25 = v53;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v67, v25);
    *(void *)uint64_t v61 = a4;
    *(void *)&v61[8] = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)((char *)&v66[1] + 8), (uint64_t)v61);
  }
  v61[0] = 0;
  if (a5)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v40 = 0;
    long long v42 = 0u;
    uint64_t v41 = "";
    uint64_t v47 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)v48, (uint64_t)&v40);
    re::Optional<re::SkeletalPose>::operator=(v61, (uint64_t *)v48);
    if (LOBYTE(v48[0])) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v48 + 8));
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v40);
    uint64_t v26 = v53;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v65, v26);
    *(void *)&v48[0] = a5;
    *((void *)&v48[0] + 1) = a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)&v61[24], (uint64_t)v48);
  }
  LOBYTE(v48[0]) = 0;
  if (a9)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    v33[0] = 0;
    long long v34 = 0u;
    v33[1] = "";
    uint64_t v39 = 0;
    re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)v33);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)v48, &v40);
    if ((_BYTE)v40) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v41);
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v33);
    uint64_t v27 = v53;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v52, v27);
    uint64_t v40 = a9;
    uint64_t v41 = (const char *)a7;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)((char *)&v48[1] + 8), (uint64_t)&v40);
  }
  if (LOBYTE(v48[0])) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v48 + 8));
  }
  if (v61[0]) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v61[8]);
  }
  if (LOBYTE(v66[0])) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)v66 + 8));
  }
  if (v53) {

  }
  re::FixedArray<re::StringID>::deinit(&v54);
  if ((_BYTE)v57) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v58);
  }
  return v28;
}

uint64_t REAssetManagerTimelineAssetCreateFloatSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::FloatSampledAnimation,float>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 27);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D2578;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    char v12 = *(float **)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<float>((re *)v17, (float **)(a4 + 8), *(float **)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateDoubleSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::DoubleSampledAnimation,double>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 28);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D2610;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<double>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<double>((re *)v17, a4 + 8, *(double **)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateVector2FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::Vector2FSampledAnimation,re::Vector2<float>>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 29);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D26A8;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::Vector2<float>>((re *)v17, (void *)(a4 + 8), *(uint64_t *)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateVector3FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::Vector3FSampledAnimation,re::Vector3<float>>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 30);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D2740;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)v17, (void *)(a4 + 8), *(uint64_t *)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateVector4FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::Vector4FSampledAnimation,re::Vector4<float>>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 31);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D27D8;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)v17, (void *)(a4 + 8), *(uint64_t *)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateQuaternionFSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::QuaternionFSampledAnimation,re::Quaternion<float>>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 32);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D2870;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::Quaternion<float>>((re *)v17, (void *)(a4 + 8), *(uint64_t *)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateSRTSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[0] = 0;
}

uint64_t anonymous namespace'::createSampledAnimation<re::SRTSampledAnimation,re::GenericSRT<float>>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 33);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6D2908;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v17[0] = v10;
  *((void *)&v17[0] + 1) = strlen(v10);
  re::DynamicString::operator=(v11, (uint64_t)v17);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v8 + 88), a3);
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)(v8 + 96);
    *(void *)&v17[0] = *(void *)(v8 + 104);
    *((void *)&v17[0] + 1) = v12;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::GenericSRT<float>>((re *)v17, a4 + 8, *(uint64_t *)&v17[0], v12);
  }
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v17, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v13;
}

uint64_t REAssetManagerTimelineAssetCreateSkeletalPoseSampledAnimationWithJointNames(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (a5)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      long long v15 = *(const char **)(a4 + 8 * v14);
      uint64_t v29 = 0;
      long long v30 = "";
      unint64_t v16 = v32;
      if (v32 <= v14) {
        break;
      }
      unint64_t v17 = (void *)(v33 + v13);
      uint64_t v18 = v29;
      uint64_t v19 = v30;
      uint64_t v29 = 0;
      long long v30 = "";
      uint64_t v20 = *(void *)(v33 + v13 + 8);
      unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v33 + v13) & 1;
      v17[1] = v19;
      *(void *)&long long v43 = v21;
      *((void *)&v43 + 1) = v20;
      *unint64_t v17 = v18;
      re::StringID::destroyString((re::StringID *)&v43);
      re::StringID::destroyString((re::StringID *)&v29);
      ++v14;
      v13 += 16;
      if (a5 == v14) {
        goto LABEL_5;
      }
    }
    uint64_t v37 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v38 = 136315906;
    *(void *)&_OWORD v38[4] = "operator[]";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 468;
    __int16 v39 = 2048;
    unint64_t v40 = v14;
    __int16 v41 = 2048;
    unint64_t v42 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    uint64_t v29 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v38 = 136315906;
    *(void *)&_OWORD v38[4] = "operator[]";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 468;
    __int16 v39 = 2048;
    unint64_t v40 = v14;
    __int16 v41 = 2048;
    unint64_t v42 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    uint64_t v37 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v38 = 136315906;
    *(void *)&_OWORD v38[4] = "operator[]";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 468;
    __int16 v39 = 2048;
    unint64_t v40 = v14;
    __int16 v41 = 2048;
    unint64_t v42 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_5:
  re::make::shared::object<re::SkeletalPoseJointDefinition,re::FixedArray<re::StringID>,decltype(nullptr)>((re *)&v28, (uint64_t)&v31);
  uint64_t v22 = v28;
  if (a6)
  {
    unint64_t v14 = 0;
    uint64_t v23 = 80;
    do
    {
      unint64_t v16 = v35;
      if (v35 <= v14) {
        goto LABEL_14;
      }
      uint64_t v24 = (uint64_t *)(v36 + v23);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v24, v22);
      uint64_t v29 = a3;
      long long v30 = (const char *)a5;
      unint64_t v16 = v35;
      if (v35 <= v14) {
        goto LABEL_15;
      }
      re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v36 + v23 - 64), (uint64_t)&v29);
      ++v14;
      v23 += 88;
      a3 += 48 * a5;
    }
    while (a6 != v14);
  }
  *(void *)uint64_t v38 = v36;
  *(void *)&void v38[8] = v35;
  LOBYTE(v43) = 0;
  if (v22) {

  }
  re::FixedArray<re::StringID>::deinit(&v31);
  re::FixedArray<re::SkeletalPose>::deinit(&v34);
  return v25;
}

uint64_t anonymous namespace'::createSampledAnimation<re::SkeletalPoseSampledAnimation,re::SkeletalPose>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = re::Timeline::Timeline(v8, 34);
  *(_WORD *)(v9 + 72) = 256;
  *(_DWORD *)(v9 + 76) = 1023969417;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(void *)uint64_t v9 = &unk_26E6C1190;
  *(_WORD *)(v9 + 112) = 257;
  *(unsigned char *)(v9 + 11re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    char v10 = *(const char **)(a2 + 8);
  }
  else {
    char v10 = "";
  }
  long long v11 = (re::DynamicString *)(v9 + 40);
  *(void *)&v25[0] = v10;
  *((void *)&v25[0] + 1) = strlen(v10);
  unint64_t v12 = re::DynamicString::operator=(v11, (uint64_t)v25);
  *(_WORD *)(v8 + 72) = *(_WORD *)(a2 + 16);
  *(void *)(v8 + 76) = *(void *)(a2 + 20);
  *(_DWORD *)(v8 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 28);
  if (!*(void *)(v8 + 88))
  {
    unint64_t v14 = a3[1];
    if (!v14) {
      goto LABEL_11;
    }
  }
  uint64_t v15 = a3[1];
  if (*(void *)(v8 + 96) != v15)
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = *(void *)(v8 + 104);
    uint64_t v19 = 88 * v15;
    do
    {
      re::StringID::operator=((unint64_t *)(v18 + v16), (uint64_t *)(v17 + v16));
      re::FixedArray<re::GenericSRT<float>>::operator=((void *)(v18 + v16 + 16), v17 + v16 + 16);
      re::DynamicArray<BOOL>::operator=(v18 + v16 + 40, (uint64_t *)(v17 + v16 + 40));
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v18 + v16 + 80), *(void *)(v17 + v16 + 80));
      v16 += 88;
    }
    while (v19 != v16);
  }
LABEL_11:
  if (*(unsigned char *)a4 && *(void *)(a4 + 16) && *(unsigned char *)(a2 + 16))
  {
    uint64_t v20 = *(void **)(v8 + 96);
    *(void *)&v25[0] = *(void *)(v8 + 104);
    *((void *)&v25[0] + 1) = v20;
    *(unsigned char *)(v8 + 72) = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPose>((re *)v25, (void *)(a4 + 8), *(uint64_t *)&v25[0], v20);
  }
  int v26 = 0;
  memset(v25, 0, sizeof(v25));
  uint64_t v27 = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v8, (uint64_t)v25, 0, 0);
  uint64_t v21 = v24[0];
  if (v24[0]) {
    id v22 = (id)(v24[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
  return v21;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveFloatSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveDoubleSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveVector2FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveVector3FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveVector4FSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveQuaternionFSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveSRTSampledAnimation(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a3;
  v10[1] = a4;
  v7[0] = 1;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
}

uint64_t REAssetManagerTimelineAssetCreateAdditiveSkeletalPoseSampledAnimationWithJointNames(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v46 = 0;
  long long v47 = 0;
  uint64_t v48 = 0;
  uint64_t v43 = 0;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v36 = (uint64_t *)a8;
  uint64_t v40 = 0;
  __int16 v41 = 0;
  uint64_t v42 = 0;
  if (a5)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *(const char **)(a4 + 8 * (void)v18);
      uint64_t v38 = 0;
      __int16 v39 = "";
      uint64_t v20 = v41;
      if (v41 <= v18) {
        break;
      }
      uint64_t v21 = (void *)(v42 + v17);
      uint64_t v22 = v38;
      uint64_t v23 = v39;
      uint64_t v38 = 0;
      __int16 v39 = "";
      uint64_t v24 = *(void *)(v42 + v17 + 8);
      unint64_t v25 = v22 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v42 + v17) & 1;
      v21[1] = v23;
      *(void *)&long long v55 = v25;
      *((void *)&v55 + 1) = v24;
      *uint64_t v21 = v22;
      re::StringID::destroyString((re::StringID *)&v55);
      re::StringID::destroyString((re::StringID *)&v38);
      uint64_t v18 = (uint64_t *)((char *)v18 + 1);
      v17 += 16;
      if ((uint64_t *)a5 == v18) {
        goto LABEL_5;
      }
    }
    uint64_t v49 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v50 = 136315906;
    *(void *)&void v50[4] = "operator[]";
    *(_WORD *)&unsigned char v50[12] = 1024;
    *(_DWORD *)&v50[14] = 468;
    __int16 v51 = 2048;
    uint64_t v52 = v18;
    __int16 v53 = 2048;
    uint64_t v54 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
LABEL_5:
  re::make::shared::object<re::SkeletalPoseJointDefinition,re::FixedArray<re::StringID>,decltype(nullptr)>((re *)&v37, (uint64_t)&v40);
  uint64_t v26 = v37;
  if (a6)
  {
    uint64_t v18 = 0;
    uint64_t v27 = 80;
    while (1)
    {
      uint64_t v20 = v47;
      if (v47 <= v18) {
        break;
      }
      uint64_t v28 = (uint64_t *)(v48 + v27);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v28, v26);
      uint64_t v38 = a3;
      __int16 v39 = (const char *)a5;
      uint64_t v20 = v47;
      if (v47 <= v18) {
        goto LABEL_20;
      }
      re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v48 + v27 - 64), (uint64_t)&v38);
      uint64_t v18 = (uint64_t *)((char *)v18 + 1);
      v27 += 88;
      a3 += 48 * a5;
      if ((uint64_t *)a6 == v18) {
        goto LABEL_10;
      }
    }
LABEL_19:
    uint64_t v38 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v50 = 136315906;
    *(void *)&void v50[4] = "operator[]";
    *(_WORD *)&unsigned char v50[12] = 1024;
    *(_DWORD *)&v50[14] = 468;
    __int16 v51 = 2048;
    uint64_t v52 = v18;
    __int16 v53 = 2048;
    uint64_t v54 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    uint64_t v49 = 0;
    long long v30 = (uint64_t *)v50;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v50 = 136315906;
    *(void *)&void v50[4] = "operator[]";
    *(_WORD *)&unsigned char v50[12] = 1024;
    *(_DWORD *)&v50[14] = 468;
    __int16 v51 = 2048;
    uint64_t v52 = v18;
    __int16 v53 = 2048;
    uint64_t v54 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    uint64_t v38 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v50 = 136315906;
    *(void *)&void v50[4] = "operator[]";
    *(_WORD *)&unsigned char v50[12] = 1024;
    *(_DWORD *)&v50[14] = 468;
    __int16 v51 = 2048;
    uint64_t v52 = v14;
    __int16 v53 = 2048;
    uint64_t v54 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    uint64_t v49 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v50 = 136315906;
    *(void *)&void v50[4] = "operator[]";
    *(_WORD *)&unsigned char v50[12] = 1024;
    *(_DWORD *)&v50[14] = 468;
    __int16 v51 = 2048;
    uint64_t v52 = v14;
    __int16 v53 = 2048;
    uint64_t v54 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_10:
  if (v36)
  {
    unint64_t v14 = 0;
    uint64_t v29 = 80;
    do
    {
      long long v30 = v44;
      if (v44 <= v14) {
        goto LABEL_21;
      }
      uint64_t v31 = (uint64_t *)(v45 + v29);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v31, v26);
      uint64_t v38 = a7;
      __int16 v39 = (const char *)a5;
      long long v30 = v44;
      if (v44 <= v14) {
        goto LABEL_22;
      }
      re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v45 + v29 - 64), (uint64_t)&v38);
      unint64_t v14 = (uint64_t *)((char *)v14 + 1);
      v29 += 88;
      a7 += 48 * a5;
    }
    while (v36 != v14);
  }
  *(void *)uint64_t v50 = v48;
  *(void *)&v50[8] = v47;
  LOBYTE(v55) = 1;
  *((void *)&v55 + 1) = v45;
  *(void *)&long long v56 = v44;
  if (v26) {

  }
  re::FixedArray<re::StringID>::deinit(&v40);
  re::FixedArray<re::SkeletalPose>::deinit(&v43);
  re::FixedArray<re::SkeletalPose>::deinit(&v46);
  return v32;
}

uint64_t REAssetManagerTimelineAssetCreateTimelineGroup(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0x7FFFFFFFLL;
  long long v7 = (void *)re::Timeline::Timeline((uint64_t)v6, 2);
  void *v7 = &unk_26E6C28D8;
  v7[10] = 0;
  v7[11] = 0;
  v7[9] = 0;
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      re::AssetAPIHelper::assetHandleCreate(*(void *)(a2 + 8 * v8), v16);
      uint64_t v9 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v16);
      if (v9) {
        uint64_t v10 = *(void *)(v9 + 16);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v15 = v10;
      unint64_t v11 = *((void *)v6 + 10);
      if (v11 <= v8)
      {
        uint64_t v20 = 0;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        uint64_t v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 468;
        __int16 v25 = 2048;
        unint64_t v26 = v8;
        __int16 v27 = 2048;
        unint64_t v28 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(*((void *)v6 + 11) + 8 * v8) = v10;
      re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v17, &v15, (re::AssetHandle *)v16);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
      ++v8;
    }
    while (a3 != v8);
  }
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, v6, (uint64_t)v17, 0, 0);
  uint64_t v12 = *(void *)&v29[0];
  if (*(void *)&v29[0]) {
    id v13 = (id)(*(void *)&v29[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v17);
  return v12;
}

re::AssetHandle *re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>(re::AssetHandle *result, uint64_t *a2, re::AssetHandle *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *((unsigned int *)result + 6);
    uint64_t v10 = *(unsigned int *)(*((void *)result + 1) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *((void *)result + 2);
      if (*(void *)(v11 + 48 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 48 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t v12 = *((unsigned int *)result + 9);
  if (v12 == 0x7FFFFFFF)
  {
    uint64_t v12 = *((unsigned int *)result + 8);
    int v13 = v12;
    if (v12 == *((_DWORD *)result + 6))
    {
      re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::setCapacity((uint64_t)result, 2 * *((_DWORD *)result + 7));
      LODWORD(v9) = v8 % *((unsigned int *)v5 + 6);
      int v13 = *((_DWORD *)v5 + 8);
      uint64_t v6 = *a2;
    }
    *((_DWORD *)v5 + 8) = v13 + 1;
    uint64_t v14 = *((void *)v5 + 2);
    int v15 = *(_DWORD *)(v14 + 48 * v12 + 8);
  }
  else
  {
    uint64_t v14 = *((void *)result + 2);
    int v15 = *(_DWORD *)(v14 + 48 * v12 + 8);
    *((_DWORD *)result + 9) = v15 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v14 + 48 * v12 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*((void *)v5 + 2) + 48 * v12 + 8) = *(_DWORD *)(*((void *)v5 + 2) + 48 * v12 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v5 + 1) + 4 * v9);
  *(void *)(*((void *)v5 + 2) + 48 * v12) = v8;
  *(void *)(*((void *)v5 + 2) + 48 * v12 + 16) = v6;
  uint64_t result = re::AssetHandle::AssetHandle((re::AssetHandle *)(*((void *)v5 + 2) + 48 * v12 + 24), a3);
  *(_DWORD *)(*((void *)v5 + 1) + 4 * v9) = v12;
  ++*((_DWORD *)v5 + 7);
  ++*((_DWORD *)v5 + 10);
  return result;
}

uint64_t REAssetManagerTimelineAssetCreateTimelineClip(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::Timeline::Timeline(v6, 1);
  *(void *)uint64_t v7 = &unk_26E6C2678;
  *(void *)(v7 + 72) = 0;
  *(unsigned char *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 96) = 0;
  *(void *)(v7 + 112) = 0;
  *(unsigned char *)(v7 + 120) = 0;
  *(void *)(v7 + 128) = 0;
  *(unsigned char *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = 1065353216;
  *(unsigned char *)(v7 + 156) = 0;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v21[0] = v8;
  *((void *)&v21[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v21);
  *(unsigned char *)(v6 + 156) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 80)) {
    *(unsigned char *)(v6 + 80) = 1;
  }
  *(void *)(v6 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 96)) {
    *(unsigned char *)(v6 + 96) = 1;
  }
  *(void *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v11;
  *(void *)(v6 + 112) = *(void *)(a2 + 32);
  *(void *)(v6 + 128) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 136)) {
    *(unsigned char *)(v6 + 136) = 1;
  }
  *(void *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v12;
  *(_DWORD *)(v6 + 152) = *(_DWORD *)(a2 + 56);
  re::AssetAPIHelper::assetHandleCreate(a3, v25);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v25);
  if (v13)
  {
    uint64_t v24 = *(void *)(v13 + 16);
    *(void *)(v6 + 72) = v24;
    int v22 = 0;
    memset(v21, 0, sizeof(v21));
    uint64_t v23 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v21, &v24, (re::AssetHandle *)v25);
    int v19 = 0;
    memset(v18, 0, sizeof(v18));
    uint64_t v20 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v21, 0, 0);
    uint64_t v14 = v17[0];
    if (v17[0]) {
      id v15 = (id)(v17[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v21);
  }
  else
  {
    uint64_t v14 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
  return v14;
}

uint64_t REAssetManagerTimelineAssetCreateTimelineClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::Timeline::Timeline(v6, 1);
  *(void *)uint64_t v7 = &unk_26E6C2678;
  *(void *)(v7 + 72) = 0;
  *(unsigned char *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 96) = 0;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 128) = 0;
  *(unsigned char *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = 1065353216;
  *(unsigned char *)(v7 + 156) = 0;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 120) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 156) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 80)) {
    *(unsigned char *)(v6 + 80) = 1;
  }
  *(void *)(v6 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 96)) {
    *(unsigned char *)(v6 + 96) = 1;
  }
  *(void *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v11;
  *(void *)(v6 + 112) = *(void *)(a2 + 32);
  *(void *)(v6 + 128) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 136)) {
    *(unsigned char *)(v6 + 136) = 1;
  }
  *(void *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v12;
  *(_DWORD *)(v6 + 152) = *(_DWORD *)(a2 + 56);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 72) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateFloatAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::FloatAnimationClip::FloatAnimationClip((re::FloatAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateVector2FAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::Vector2FAnimationClip::Vector2FAnimationClip((re::Vector2FAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateVector3FAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::Vector3FAnimationClip::Vector3FAnimationClip((re::Vector3FAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateVector4FAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::Vector4FAnimationClip::Vector4FAnimationClip((re::Vector4FAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateQuaternionFAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::QuaternionFAnimationClip::QuaternionFAnimationClip((re::QuaternionFAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateSRTAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::SRTAnimationClip::SRTAnimationClip((re::SRTAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateSkeletalPoseAnimationClipEx(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = re::SkeletalPoseAnimationClip::SkeletalPoseAnimationClip((re::SkeletalPoseAnimationClip *)v6);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)a2;
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(a2 + 61);
  if (*(void *)(a2 + 8)) {
    unint64_t v8 = *(const char **)(a2 + 8);
  }
  else {
    unint64_t v8 = "";
  }
  unint64_t v9 = (re::DynamicString *)(v7 + 40);
  *(void *)&v22[0] = v8;
  *((void *)&v22[0] + 1) = strlen(v8);
  re::DynamicString::operator=(v9, (uint64_t)v22);
  *(unsigned char *)(v6 + 16re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 88)) {
    *(unsigned char *)(v6 + 88) = 1;
  }
  *(void *)(v6 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!*(unsigned char *)(v6 + 104)) {
    *(unsigned char *)(v6 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 112) = v11;
  *(void *)(v6 + 120) = *(void *)(a2 + 32);
  *(void *)(v6 + 136) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(v6 + 144)) {
    *(unsigned char *)(v6 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
  *(void *)(v6 + 152) = v12;
  *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a2 + 62);
  re::AssetAPIHelper::assetHandleCreate(a3, v26);
  uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v26);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v25 = v14;
    *(void *)(v6 + 80) = v14;
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v14 + 12);
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    uint64_t v24 = 0x7FFFFFFFLL;
    re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::add<re::AssetHandle&>((re::AssetHandle *)v22, &v25, (re::AssetHandle *)v26);
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v6, (uint64_t)v22, 0, 0);
    uint64_t v15 = v18[0];
    if (v18[0]) {
      id v16 = (id)(v18[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
  }
  else
  {
    uint64_t v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
  return v15;
}

uint64_t REAssetManagerTimelineAssetCreateOrbitAnimation(_anonymous_namespace_ *a1, int a2, unsigned __int8 a3, unsigned __int8 a4, float a5, float a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  re::OrbitAnimation::OrbitAnimation((re::OrbitAnimation *)v16);
  v17[4].n128_u8[8] = a2;
  v17[4].n128_f32[3] = a5;
  v17[5].n128_f32[0] = a6;
  _DWORD v17[6] = a7;
  v17[5].n128_u8[4] = a3;
  v17[5].n128_u8[5] = a4;
  v17[7].n128_u32[0] = 0;
  char v17[8] = a8;
  v17[9] = a9;
  v17[10] = a10;
  if (a2)
  {
    __n128 v18 = v17[9];
    *(__n128 *)(v16 + 176) = v17[8];
    *(__n128 *)(v16 + 192) = v18;
    *(__n128 *)(v16 + 208) = v17[10];
    v45.i64[0] = 0x3F8000003F800000;
    v45.i64[1] = 1065353216;
    v46.i64[0] = 0;
    v46.i64[1] = 0x3F80000000000000;
    int32x4_t v47 = 0uLL;
    re::OrbitAnimation::computeOrbitTransform((float32x4_t *)v16, (uint64_t)&v45, 1.0);
    float32x4_t v19 = *(float32x4_t *)(v16 + 128);
    _Q1 = *(float32x4_t *)(v16 + 144);
    float32x4_t v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL);
    float32x4_t v22 = vnegq_f32(_Q1);
    int8x16_t v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL), v22), (float32x4_t)v46, v21);
    float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL), (float32x4_t)v46, _Q1, 3), _Q1, (float32x4_t)v46, 3);
    _S3 = v46.i32[3];
    __asm { FMLA            S7, S3, V1.S[3] }
    v24.i32[3] = _S7;
    float32x4_t v31 = vmulq_f32(v19, v45);
    float32x4_t v32 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL), v22), (float32x4_t)v47, v21);
    int8x16_t v33 = (int8x16_t)vaddq_f32(v32, v32);
    float32x4_t v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL);
    int8x16_t v35 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), v22), v34, v21);
    float32x4_t v36 = vaddq_f32(*(float32x4_t *)(v16 + 160), vmulq_f32(v19, vaddq_f32(vaddq_f32((float32x4_t)v47, vmulq_laneq_f32(v34, _Q1, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL))));
    *(float32x4_t *)(v16 + 176) = v31;
    *(float32x4_t *)(v16 + 192) = v24;
    *(float32x4_t *)(v16 + 208) = v36;
  }
  v47.i32[0] = 0;
  float32x4_t v45 = 0u;
  int32x4_t v46 = 0u;
  *(uint64_t *)((char *)v47.i64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x7FFFFFFFLL;
  re::AssetHelper::makeTimelineAssetHandle((uint64_t *)a1, (re *)v16, (uint64_t)&v45, 0, 0);
  uint64_t v37 = v44[0];
  if (v44[0]) {
    id v38 = (id)(v44[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v44);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v45);
  return v37;
}

uint64_t REAssetManagerReloadMaterialDefinition(re::AssetManager *a1, char *a2, char *a3, uint64_t a4)
{
  return REAssetManagerReloadMaterialDefinitionWithError(a1, a2, a3, a4, 0);
}

uint64_t REAssetManagerReloadMaterialDefinitionWithError(re::AssetManager *a1, char *a2, char *a3, uint64_t a4, char **a5)
{
  loadMaterialBundleFile((uint64_t)v8, a1, a2, a3, a4, 1);
  if (v8[0]) {
    return v9;
  }
  if (a5)
  {
    if (v11) {
      uint64_t v7 = *(const char **)&v12[7];
    }
    else {
      uint64_t v7 = v12;
    }
    *a5 = strdup(v7);
  }
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    return 0;
  }
  return result;
}

unsigned char *loadMaterialBundleFile(uint64_t a1, re::AssetManager *this, char *a3, char *a4, uint64_t a5, int a6)
{
  re::AssetManager::parseAssetPath(this, a3, 0, 0, (uint64_t)v46);
  if (v46[0])
  {
    re::AssetManager::parseAssetPath(this, a4, 0, 0, (uint64_t)&v42);
    if (!(_BYTE)v42)
    {
      if (v44) {
        __n128 v18 = v45;
      }
      else {
        __n128 v18 = (char *)&v44 + 1;
      }
      re::DynamicString::format((re::DynamicString *)"Error in loadMaterialBundleFiles parsing memory asset path '%s': '%s'", (re::DynamicString *)&v26, a4, v18);
      *(void *)&long long v34 = 100;
      *((void *)&v34 + 1) = re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v26);
      float32x4_t v19 = v36;
      int v20 = v37;
      *(unsigned char *)a1 = 0;
      long long v21 = v35;
      *(_OWORD *)(a1 + 8) = v34;
      *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v21;
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = v20;
      if (void)v26 && (BYTE8(v26)) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
      goto LABEL_27;
    }
    re::AssetManager::assetHandle((os_unfair_lock_s *)this, (const re::AssetPath *)((char *)&v42 + 8), 1, v41);
    re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)v41);
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = &v34;
    *(void *)&long long v35 = 0x5812000000;
    *((void *)&v35 + 1) = __Block_byref_object_copy__87_0;
    float32x4_t v36 = __Block_byref_object_dispose__88_0;
    uint64_t v37 = "";
    uint64_t v40 = 0;
    memset(v38, 0, sizeof(v38));
    int v39 = 0;
    if (a6)
    {
      if (a6 != 1)
      {
        re::DynamicString::format((re::DynamicString *)"Error in loadMagerialBundleFiles: unhandled file type. Not a rematerial or a rematerialdefinition. '%s'", (re::DynamicString *)&v30, a3);
        *(void *)&long long v26 = 100;
        *((void *)&v26 + 1) = re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)&v30);
        uint64_t v23 = v28;
        uint64_t v24 = v29;
        *(unsigned char *)a1 = 0;
        long long v25 = v27;
        *(_OWORD *)(a1 + 8) = v26;
        *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v25;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v24;
        if (v30 && (v31 & 1) != 0) {
          (*(void (**)(void))(*(void *)v30 + 40))();
        }
        goto LABEL_26;
      }
      v33[0] = MEMORY[0x263EF8330];
      if (v49) {
        uint64_t v12 = v51;
      }
      else {
        uint64_t v12 = v50;
      }
      v33[1] = 3221225472;
      void v33[2] = ___ZL22loadMaterialBundleFilePN2re12AssetManagerEPKcS3_S3_22MaterialBundleFileType_block_invoke;
      _DWORD v33[3] = &unk_264BE9E40;
      v33[6] = this;
      v33[7] = v47;
      v33[8] = (char *)&v42 + 8;
      void v33[4] = &v34;
      v33[5] = a5;
      uint64_t v13 = v33;
    }
    else
    {
      if (v49) {
        uint64_t v12 = v51;
      }
      else {
        uint64_t v12 = v50;
      }
      v32[0] = MEMORY[0x263EF8330];
      v32[1] = 3221225472;
      uint64_t v32[2] = ___ZL22loadMaterialBundleFilePN2re12AssetManagerEPKcS3_S3_22MaterialBundleFileType_block_invoke_2;
      uint64_t v32[3] = &unk_264BE9E68;
      v32[6] = v47;
      v32[7] = (char *)&v42 + 8;
      v32[4] = &v34;
      void v32[5] = this;
      uint64_t v13 = v32;
    }
    createAssetRefAtPathFromFile(a1, (uint64_t (****)(void))this, (const re::AssetHandle *)v41, (uint64_t)v12, v13);
LABEL_26:
    _Block_object_dispose(&v34, 8);
    re::DynamicArray<re::Optional<re::AssetHandle>>::deinit((uint64_t)v38);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v41);
LABEL_27:
    re::Result<re::AssetPath,re::DetailedError>::~Result(&v42);
    return re::Result<re::AssetPath,re::DetailedError>::~Result(v46);
  }
  if (v47[24]) {
    uint64_t v14 = *(unsigned char **)&v48[7];
  }
  else {
    uint64_t v14 = v48;
  }
  re::DynamicString::format((re::DynamicString *)"Error in loadMaterialBundleFiles parsing source asset path '%s': '%s'", (re::DynamicString *)&v34, a3, v14);
  *(void *)&long long v42 = 100;
  *((void *)&v42 + 1) = re::AssetErrorCategory(void)::instance;
  re::DynamicString::DynamicString((re::DynamicString *)&v43, (const re::DynamicString *)&v34);
  uint64_t v15 = v44;
  uint64_t v16 = v45;
  *(unsigned char *)a1 = 0;
  long long v17 = v43;
  *(_OWORD *)(a1 + 8) = v42;
  *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v17;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v16;
  if (void)v34 && (BYTE8(v34)) {
    (*(void (**)(void))(*(void *)v34 + 40))();
  }
  return re::Result<re::AssetPath,re::DetailedError>::~Result(v46);
}

uint64_t REAssetManagerReloadMaterial(re::AssetManager *a1, char *a2, char *a3)
{
  return REAssetManagerReloadMaterialWithError(a1, a2, a3, 0);
}

uint64_t REAssetManagerReloadMaterialWithError(re::AssetManager *this, char *a2, char *a3, char **a4)
{
  loadMaterialBundleFile((uint64_t)v7, this, a2, a3, 0, 0);
  if (v7[0]) {
    return v8;
  }
  if (a4)
  {
    if (v10) {
      uint64_t v6 = *(const char **)&v11[7];
    }
    else {
      uint64_t v6 = v11;
    }
    *a4 = strdup(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
    return 0;
  }
  return result;
}

uint64_t REAssetManagerLoadRenderGraphAndReplaceAllFullscreenNodeMaterials(re::AssetManager *a1, char *a2, char *a3, uint64_t a4)
{
  re::AssetManager::parseAssetPath(a1, a2, 0, 0, (uint64_t)v27);
  if (!v27[0])
  {
    if (v27[32]) {
      char v11 = *(unsigned char **)&v28[7];
    }
    else {
      char v11 = v28;
    }
    re::DynamicString::format((re::DynamicString *)"Error in loadRenderGraphFile parsing source asset path '%s': '%s'", (re::DynamicString *)&v18, a2, v11);
    uint64_t v23 = 100;
    uint64_t v24 = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)&v18);
    long long v15 = v25;
    uint64_t v16 = v26[0];
    if (void)v18 && (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    goto LABEL_21;
  }
  re::AssetManager::parseAssetPath(a1, a3, 0, 0, (uint64_t)&v23);
  if (!(_BYTE)v23)
  {
    if (v26[0]) {
      uint64_t v12 = (char *)v26[1];
    }
    else {
      uint64_t v12 = (char *)v26 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"Error in loadRenderGraphFile parsing memory asset path '%s': '%s'", (re::DynamicString *)&v21, a3, v12);
    *(void *)&long long v18 = 100;
    *((void *)&v18 + 1) = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v21);
    long long v14 = v18;
    long long v15 = v19;
    uint64_t v16 = v20;
    if (v21 && (v22 & 1) != 0) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    re::Result<re::AssetPath,re::DetailedError>::~Result(&v23);
LABEL_21:
    re::Result<re::AssetPath,re::DetailedError>::~Result(v27);
    goto LABEL_22;
  }
  re::AssetManager::assetHandle((os_unfair_lock_s *)a1, (const re::AssetPath *)&v24, 1, (uint64_t *)&v18);
  re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)&v18);
  if (v28[23]) {
    uint64_t v8 = *(unsigned char **)&v29[7];
  }
  else {
    uint64_t v8 = v29;
  }
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  _OWORD v17[2] = ___ZL20_loadRenderGraphFilePN2re12AssetManagerEPKcS3_S3__block_invoke;
  void v17[3] = &__block_descriptor_40_e9_v16__0_v8l;
  void v17[4] = a4;
  createAssetRefAtPathFromFile((uint64_t)v13, (uint64_t (****)(void))a1, (const re::AssetHandle *)&v18, (uint64_t)v8, v17);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
  int v9 = v13[0];
  re::Result<re::AssetPath,re::DetailedError>::~Result(&v23);
  re::Result<re::AssetPath,re::DetailedError>::~Result(v27);
  if (v9) {
    return v14;
  }
LABEL_22:
  uint64_t result = v15;
  if ((void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    return 0;
  }
  return result;
}

uint64_t REAssetManagerLoadRenderGraphAndReplaceFullscreenNodeMaterials(re::AssetManager *a1, char *a2, char *a3, void *a4)
{
  id v7 = a4;
  re::AssetManager::parseAssetPath(a1, a2, 0, 0, (uint64_t)v26);
  if (v26[0])
  {
    re::AssetManager::parseAssetPath(a1, a3, 0, 0, (uint64_t)&v23);
    if ((_BYTE)v23)
    {
      re::AssetManager::assetHandle((os_unfair_lock_s *)a1, (const re::AssetPath *)((char *)&v23 + 8), 1, &v21);
      re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)&v21);
      if (v27[23]) {
        uint64_t v8 = *(unsigned char **)&v28[7];
      }
      else {
        uint64_t v8 = v28;
      }
      *(void *)&long long v18 = MEMORY[0x263EF8330];
      *((void *)&v18 + 1) = 3221225472;
      *(void *)&long long v19 = ___ZL19loadRenderGraphFilePN2re12AssetManagerEPKcS3_U13block_pointerFS3_S3_E_block_invoke;
      *((void *)&v19 + 1) = &unk_264BE9E90;
      id v20 = v7;
      createAssetRefAtPathFromFile((uint64_t)v14, (uint64_t (****)(void))a1, (const re::AssetHandle *)&v21, (uint64_t)v8, &v18);

      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
      int v9 = v14[0];
    }
    else
    {
      if (v25[0]) {
        char v11 = (char *)v25[1];
      }
      else {
        char v11 = (char *)v25 + 1;
      }
      re::DynamicString::format((re::DynamicString *)"Error in loadRenderGraphFile parsing memory asset path '%s': '%s'", (re::DynamicString *)&v21, a3, v11);
      *(void *)&long long v18 = 100;
      *((void *)&v18 + 1) = re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v21);
      long long v15 = v18;
      long long v16 = v19;
      id v17 = v20;
      if (v21 && (v22 & 1) != 0) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      int v9 = 0;
    }
    re::Result<re::AssetPath,re::DetailedError>::~Result(&v23);
  }
  else
  {
    if (v26[32]) {
      char v10 = *(unsigned char **)&v27[7];
    }
    else {
      char v10 = v27;
    }
    re::DynamicString::format((re::DynamicString *)"Error in loadRenderGraphFile parsing source asset path '%s': '%s'", (re::DynamicString *)&v18, a2, v10);
    *(void *)&long long v23 = 100;
    *((void *)&v23 + 1) = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)&v18);
    long long v15 = v23;
    long long v16 = v24;
    id v17 = (id)v25[0];
    if (void)v18 && (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    int v9 = 0;
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result(v26);

  if (v9)
  {
    uint64_t v12 = v15;
  }
  else
  {
    if (void)v16 && (BYTE8(v16)) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t REAssetManagerLoadAssetAtPath(re::AssetManager *a1, uint64_t a2, char *a3)
{
  return REAssetManagerCreateAssetAtPathWithError(a1, a2, a3, 0);
}

uint64_t REAssetManagerCreateAssetAtPathWithError(re::AssetManager *a1, uint64_t a2, char *a3, char **a4)
{
  re::AssetManager::assetHandle(a1, a3, 1, 0, v15);
  re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)v15);
  createAssetRefAtPathFromFile((uint64_t)v10, (uint64_t (****)(void))a1, (const re::AssetHandle *)v15, a2, 0);
  if (v10[0])
  {
    uint64_t v7 = v11;
  }
  else
  {
    if (a4)
    {
      if (v13) {
        uint64_t v8 = *(const char **)&v14[7];
      }
      else {
        uint64_t v8 = v14;
      }
      *a4 = strdup(v8);
    }
    if (v12 && (v13 & 1) != 0) {
      (*(void (**)(void))(*(void *)v12 + 40))();
    }
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v7;
}

unsigned char *createAssetRefAtPathFromFile(uint64_t a1, uint64_t (****a2)(void), const re::AssetHandle *a3, uint64_t a4, void *a5)
{
  createAssetHandleAtPathFromFile((uint64_t)v20, a2, a3, a4, a5);
  if (v20[0])
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v14, (const re::AssetHandle *)&v21);
    if (v15 && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 3))
    {
      re::DynamicString::format((re::DynamicString *)"Failed to load asset reference from file: %s", (re::DynamicString *)&v16, a4);
      long long v8 = v16;
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 8) = 100;
      *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
    }
    else
    {
      uint64_t v11 = v14;
      if (v14) {
        id v12 = (id)(v14 + 8);
      }
      *(unsigned char *)a1 = 1;
      *(void *)(a1 + 8) = v11;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  }
  else
  {
    long long v16 = v21;
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v22);
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v16;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v17;
    *(void *)(a1 + 48) = v19;
    *(_OWORD *)(a1 + 32) = v18;
  }
  return re::Result<re::AssetHandle,re::DetailedError>::~Result(v20);
}

uint64_t REAssetManagerCreateAssetHandle(re::AssetManager *a1, char *a2)
{
  re::AssetManager::assetHandle(a1, a2, 1, 0, v5);
  uint64_t v2 = v5[0];
  if (v5[0]) {
    id v3 = (id)(v5[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

re *REAssetManagerCreateAssetHandleForURL(os_unfair_lock_s *a1, void *a2)
{
  uint64_t result = (re *)REAssetManagerCreateFileAssetDescriptor((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v4 = (uint64_t *)result;
    re::make::shared::object<re::Shareable<AssetRegistrationOptions>>(result, &v7);
    uint64_t v5 = v7;
    *(unsigned char *)(v7 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    uint64_t v6 = REAssetHandleCreateFromAssetRegistrationOptions(a1, v4, v5);

    return (re *)v6;
  }
  return result;
}

uint64_t REAssetManagerAssetHandleCreateWithBundleResource(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = [v7 URLForResource:v8 withExtension:v9];
  uint64_t v11 = v10;
  if (v10)
  {
    long long v23 = *(os_unfair_lock_s **)(a1 + 1128);
    long long v24 = *(const re::internal::AssetTypeRegistry **)(a1 + 1040);
    uint64_t v35 = 0;
    float32x4_t v36 = 0;
    uint64_t v37 = 0;
    re::DynamicString::setCapacity(&v34, 0);
    id v12 = [MEMORY[0x263F086E0] mainBundle];
    int v13 = [v12 isEqual:v7];

    id v14 = [v7 bundleIdentifier];
    if (v13) {
      re::DynamicString::format((re::DynamicString *)"app:%s", (re::DynamicString *)&v28, [v14 UTF8String]);
    }
    else {
      re::DynamicString::format((re::DynamicString *)"framework:%s", (re::DynamicString *)&v28, [v14 UTF8String]);
    }
    re::DynamicString::operator=((re::DynamicString *)&v34, (re::DynamicString *)&v28);
    if ((void)v28)
    {
      if (BYTE8(v28)) {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
      long long v28 = 0u;
      long long v29 = 0u;
    }

    id v16 = v8;
    uint64_t v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v34, "/%s", (const char *)[v16 UTF8String]);
    if (v9)
    {
      uint64_t v17 = (_anonymous_namespace_ *)[v9 length];
      if (v17) {
        uint64_t v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v34, ".%s", (const char *)[v9 UTF8String]);
      }
    }
    LODWORD(v28) = 0;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    long long v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v28 + 1, 0);
    *((void *)&v31 + 1) = 0;
    long long v32 = 0uLL;
    re::DynamicString::setCapacity(&v31, 0);
    uint64_t v33 = 0;
    if (v35) {
      uint64_t v19 = v36;
    }
    else {
      uint64_t v19 = (char *)&v35 + 1;
    }
    re::AssetPath::parse((re::AssetPath *)&v28, v19, 0, v24, v23, v25);
    if (v25[0])
    {
      re::AssetManager::assetHandle((os_unfair_lock_s *)a1, (const re::AssetPath *)&v28, 1, (uint64_t *)buf);
      uint64_t v15 = *(void *)buf;
      if (*(void *)buf) {
        id v20 = (id)(*(void *)buf + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      long long v21 = (id)CoreRELog::log;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v7;
        __int16 v39 = 2112;
        id v40 = v16;
        __int16 v41 = 2112;
        id v42 = v9;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Failed to parse asset path for bundle %@ resource '%@' with extension '%@'", buf, 0x20u);
      }

      uint64_t v15 = 0;
    }
    if (!v25[0] && v26 && (v27 & 1) != 0) {
      (*(void (**)(void))(*(void *)v26 + 40))();
    }
    if ((void)v31)
    {
      if (BYTE8(v31)) {
        (*(void (**)(void))(*(void *)v31 + 40))();
      }
      long long v31 = 0u;
      long long v32 = 0u;
    }
    if (*((void *)&v28 + 1) && (v29 & 1) != 0) {
      (*(void (**)(void))(**((void **)&v28 + 1) + 40))();
    }
    if (v34 && (v35 & 1) != 0) {
      (*(void (**)(void))(*v34 + 40))();
    }
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void REAssetHandleLoadNow(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  BOOL IsLoaded = REAssetHandleIsLoaded(a1);
  if (!IsLoaded)
  {
  }
  re::AssetHandle::loadNow(v1, 0);
}

BOOL REAssetHandleIsLoaded(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5)
  {
    unsigned int v1 = atomic_load((unsigned int *)(v5 + 704));
    BOOL v2 = v1 == 2;
  }
  else
  {
    BOOL v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

void REAssetHandleLoadNowFromOtherQueue(uint64_t a1)
{
  if (a1) {
    a1 = *(void *)(a1 + 24);
  }
  re::AssetHandle::loadNow(a1, 1);
}

void REAssetHandleLoadAsync(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v1);
  re::AssetHandle::loadAsync((re::AssetHandle *)v1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v1);
}

BOOL REAssetHandleLoadFailed(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5)
  {
    unsigned int v1 = atomic_load((unsigned int *)(v5 + 704));
    BOOL v2 = v1 == 3;
  }
  else
  {
    BOOL v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

CFStringRef REAssetHandleCopyLoadFailedMessage(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  re::AssetHandle::loadFailedMessage((re::AssetHandle *)v7, (re::DynamicString *)&v4);
  if (v5) {
    unsigned int v1 = *(const char **)&v6[7];
  }
  else {
    unsigned int v1 = v6;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v2;
}

uint64_t REAssetHandleAssetType(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v41);
  if (v42)
  {
    CFStringRef v2 = *(uint64_t **)(v42 + 264);
    id v3 = re::RenderGraphAsset::assetType(v1);
    if (v2 == v3)
    {
      uint64_t v4 = 0;
      goto LABEL_72;
    }
  }
  else
  {
    id v3 = re::RenderGraphAsset::assetType(v1);
  }
  if (v42)
  {
    char v5 = *(uint64_t **)(v42 + 264);
    uint64_t v6 = re::MeshAsset::assetType((re::MeshAsset *)v3);
    if (v5 == v6)
    {
      uint64_t v4 = 1;
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v6 = re::MeshAsset::assetType((re::MeshAsset *)v3);
  }
  if (v42)
  {
    id v7 = *(uint64_t **)(v42 + 264);
    id v8 = re::MaterialAsset::assetType((re::MaterialAsset *)v6);
    if (v7 == v8)
    {
      uint64_t v4 = 2;
      goto LABEL_72;
    }
  }
  else
  {
    id v8 = re::MaterialAsset::assetType((re::MaterialAsset *)v6);
  }
  if (v42)
  {
    id v9 = *(uint64_t **)(v42 + 264);
    uint64_t v10 = re::SkeletalPoseDefinitionAsset::assetType((re::SkeletalPoseDefinitionAsset *)v8);
    if (v9 == v10)
    {
      uint64_t v4 = 3;
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v10 = re::SkeletalPoseDefinitionAsset::assetType((re::SkeletalPoseDefinitionAsset *)v8);
  }
  if (v42)
  {
    uint64_t v11 = *(uint64_t **)(v42 + 264);
    id v12 = re::BlendShapeWeightsDefinitionAsset::assetType((re::BlendShapeWeightsDefinitionAsset *)v10);
    if (v11 == v12)
    {
      uint64_t v4 = 4;
      goto LABEL_72;
    }
  }
  else
  {
    id v12 = re::BlendShapeWeightsDefinitionAsset::assetType((re::BlendShapeWeightsDefinitionAsset *)v10);
  }
  if (v42)
  {
    int v13 = *(uint64_t **)(v42 + 264);
    id v14 = re::TimelineAsset::assetType((re::TimelineAsset *)v12);
    if (v13 == v14)
    {
      uint64_t v4 = 5;
      goto LABEL_72;
    }
  }
  else
  {
    id v14 = re::TimelineAsset::assetType((re::TimelineAsset *)v12);
  }
  if (v42)
  {
    uint64_t v15 = *(uint64_t **)(v42 + 264);
    id v16 = re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v14);
    if (v15 == v16)
    {
      uint64_t v4 = 6;
      goto LABEL_72;
    }
  }
  else
  {
    id v16 = re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v14);
  }
  if (v42)
  {
    uint64_t v17 = *(uint64_t **)(v42 + 264);
    long long v18 = re::TextureAsset::assetType((re::TextureAsset *)v16);
    if (v17 == v18)
    {
      uint64_t v4 = 7;
      goto LABEL_72;
    }
  }
  else
  {
    long long v18 = re::TextureAsset::assetType((re::TextureAsset *)v16);
  }
  if (v42)
  {
    uint64_t v19 = *(uint64_t **)(v42 + 264);
    if (v19 == re::RigAsset::assetType((re::RigAsset *)v18))
    {
      uint64_t v4 = 8;
      goto LABEL_72;
    }
  }
  else
  {
    re::RigAsset::assetType((re::RigAsset *)v18);
  }
  if (v42) {
    id v20 = *(uint64_t **)(v42 + 264);
  }
  else {
    id v20 = 0;
  }
  long long v21 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  if (v20 == v21)
  {
    uint64_t v4 = 11;
    goto LABEL_72;
  }
  if (v42)
  {
    uint64_t v22 = *(uint64_t **)(v42 + 264);
    long long v23 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v21);
    if (v22 == v23)
    {
      uint64_t v4 = 12;
      goto LABEL_72;
    }
  }
  else
  {
    long long v23 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v21);
  }
  if (v42)
  {
    long long v24 = *(uint64_t **)(v42 + 264);
    long long v25 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v23);
    if (v24 == v25)
    {
      uint64_t v4 = 13;
      goto LABEL_72;
    }
  }
  else
  {
    long long v25 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v23);
  }
  if (v42)
  {
    uint64_t v26 = *(uint64_t **)(v42 + 264);
    char v27 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v25);
    if (v26 == v27)
    {
      uint64_t v4 = 14;
      goto LABEL_72;
    }
  }
  else
  {
    char v27 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v25);
  }
  if (v42)
  {
    long long v28 = *(uint64_t **)(v42 + 264);
    long long v29 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v27);
    if (v28 == v29)
    {
      uint64_t v4 = 15;
      goto LABEL_72;
    }
  }
  else
  {
    long long v29 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v27);
  }
  if (v42)
  {
    uint64_t v30 = *(uint64_t **)(v42 + 264);
    long long v31 = re::ShaderLibraryAsset::assetType((re::ShaderLibraryAsset *)v29);
    if (v30 == v31)
    {
      uint64_t v4 = 16;
      goto LABEL_72;
    }
  }
  else
  {
    long long v31 = re::ShaderLibraryAsset::assetType((re::ShaderLibraryAsset *)v29);
  }
  if (v42)
  {
    long long v32 = *(uint64_t **)(v42 + 264);
    uint64_t v33 = re::IKRigAsset::assetType((re::IKRigAsset *)v31);
    if (v32 == v33)
    {
      uint64_t v4 = 17;
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v33 = re::IKRigAsset::assetType((re::IKRigAsset *)v31);
  }
  if (v42)
  {
    long long v34 = *(uint64_t **)(v42 + 264);
    uint64_t v35 = re::ARReferenceObjectAsset::assetType((re::ARReferenceObjectAsset *)v33);
    if (v34 == v35)
    {
      uint64_t v4 = 18;
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v35 = re::ARReferenceObjectAsset::assetType((re::ARReferenceObjectAsset *)v33);
  }
  float32x4_t v36 = *re::assetsLogObjects((re *)v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    id v38 = v36;
    __int16 v39 = re::AssetHandle::assetInfo((re::AssetHandle *)&v41);
    if (v39[17]) {
      id v40 = (char *)v39[18];
    }
    else {
      id v40 = (char *)v39 + 137;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v44 = v40;
    _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "Unrecognized AssetType for '%s'", buf, 0xCu);
  }
  uint64_t v4 = 0xFFFFFFFFLL;
LABEL_72:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v41);
  return v4;
}

CFStringRef REAssetHandleCopyAssetIdentifierString(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  unsigned int v1 = (char *)re::AssetHandle::assetInfo((re::AssetHandle *)v5);
  if (*((void *)v1 + 13)) {
    CFStringRef v2 = (const char *)*((void *)v1 + 14);
  }
  else {
    CFStringRef v2 = v1 + 105;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

CFStringRef REAssetHandleCopyCompiledAssetPath(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v28);
  unsigned int v1 = (re::DynamicString *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)v28);
  uint64_t v2 = *((void *)v1 + 1);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = v2;
  unint64_t v25 = 0;
  re::DynamicString::setCapacity(&v24, 0);
  CFStringRef v3 = re::AssetPath::fullAssetPath(v1, (re::DynamicString *)&v24);
  uint64_t v4 = *(const char **)(*((void *)v1 + 9) + 8);
  if (v25) {
    size_t v5 = v25 >> 1;
  }
  else {
    size_t v5 = v25 >> 1;
  }
  if (v22) {
    size_t v6 = v22 >> 1;
  }
  else {
    size_t v6 = v22 >> 1;
  }
  if (v5 < v6) {
    goto LABEL_18;
  }
  re::DynamicString::substr((re::DynamicString *)&v24, v5 - v6, v6, (re::DynamicString *)&v17);
  uint64_t v7 = v18 & 1;
  if (v18) {
    id v8 = v19;
  }
  else {
    id v8 = (char *)&v18 + 1;
  }
  if (v22) {
    id v9 = v23;
  }
  else {
    id v9 = (char *)&v22 + 1;
  }
  int v10 = strcmp(v8, v9);
  if (v17 && v7) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  if (v10)
  {
LABEL_18:
    uint64_t v11 = *((void *)v1 + 1);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = v11;
    uint64_t v18 = 0;
    re::DynamicString::setCapacity(&v17, 0);
    re::AssetPath::fullAssetPath(v1, (re::DynamicString *)&v17);
    if (v18) {
      id v12 = v19;
    }
    else {
      id v12 = (char *)&v18 + 1;
    }
    if (v22) {
      int v13 = v23;
    }
    else {
      int v13 = (char *)&v22 + 1;
    }
    re::DynamicString::assignf((re::DynamicString *)&v24, "%s.%s", v12, v13);
    if (v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  if (v25) {
    id v14 = v26;
  }
  else {
    id v14 = (char *)&v25 + 1;
  }
  CFStringRef v15 = CFStringCreateWithCString(0, v14, 0x8000100u);
  if (v21 && (v22 & 1) != 0) {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(void))(*(void *)v24 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
  return v15;
}

CFStringRef REAssetHandleCopyCompiledExtension(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  unsigned int v1 = *(const char **)(*(void *)(v9[1] + 264) + 8);
  if (v7) {
    CFStringRef v3 = *(const char **)&v8[7];
  }
  else {
    CFStringRef v3 = v8;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v4;
}

CFStringRef REAssetHandleCopyDeviceAssetPath(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10
    && (uint64_t v1 = *(void *)(v10 + 24)) != 0
    && (re::AssetManager::deviceAssetPath(v1, (uint64_t)&v9, 0, 13, v5), v5[0]))
  {
    if (v7) {
      uint64_t v2 = *(const char **)&v8[7];
    }
    else {
      uint64_t v2 = v8;
    }
    CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
    if (v5[0] && v6 && (v7 & 1) != 0) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
  }
  else
  {
    CFStringRef v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  return v3;
}

BOOL REAssetHandleResolvesToSameAssetPath(uint64_t a1, const char *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v20);
  if (v21 && (CFStringRef v4 = *(os_unfair_lock_s **)(v21 + 24)) != 0)
  {
    re::AssetPath::invalidAssetPath(v5, (uint64_t)buf);
    re::AssetManager::lookupAssetPathString(v4, (const re::DynamicString *)&v14, (const re::AssetPath *)buf, (uint64_t)v16);
    if ((void)v25)
    {
      if (BYTE8(v25)) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    if (*(void *)&v23[4] && (v24 & 1) != 0) {
      (*(void (**)(void))(**(void **)&v23[4] + 40))();
    }
    if (v14 && (v15 & 1) != 0) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    if (v16[0])
    {
      uint64_t v6 = (char *)re::AssetHandle::assetInfo((re::AssetHandle *)&v20);
      if (*((void *)v6 + 13)) {
        char v7 = (const char *)*((void *)v6 + 14);
      }
      else {
        char v7 = v6 + 105;
      }
      if (v18) {
        id v8 = *(const char **)&v19[7];
      }
      else {
        id v8 = v19;
      }
      BOOL v9 = strcmp(v8, v7) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    if (v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v12 = re::AssetHandle::assetInfo((re::AssetHandle *)&v20);
      if (v12[17]) {
        int v13 = (char *)v12[18];
      }
      else {
        int v13 = (char *)v12 + 137;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long v23 = v13;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Unregistered asset handle '%s'", buf, 0xCu);
    }

    BOOL v9 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
  return v9;
}

void REAssetHandleAppendShaderLibrary(const char *a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, &v8);
  if (v9)
  {
    size_t v5 = *(const re::AssetType **)(v9 + 264);
    if (v5 == (const re::AssetType *)re::ShaderLibraryAsset::assetType(v4))
    {
      uint64_t v6 = (re::DynamicString *)(re::AssetHandle::assetWithType((re::AssetHandle *)&v8, v5, 0) + 40);
      size_t v7 = strlen(a1);
      v10[0] = a1;
      v10[1] = v7;
      re::DynamicString::operator=(v6, (uint64_t)v10);
    }
  }
  else
  {
    re::ShaderLibraryAsset::assetType(v4);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
}

void REAssetPathMappingSetValueForKey(uint64_t a1, uint64_t a2, const char *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v18);
  size_t v5 = (void *)(a1 + 24);
  if (v19) {
    uint64_t v6 = *(void *)(v19 + 664);
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
  unint64_t v8 = v6 ^ (v7 >> 31) ^ v7;
  if (!*v5)
  {
    LODWORD(v9) = 0;
    goto LABEL_11;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 48);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_11:
    uint64_t v12 = *(unsigned int *)(a1 + 60);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 56);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 48))
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity((uint64_t)v5, 2 * *(_DWORD *)(a1 + 52));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 48);
        int v13 = *(_DWORD *)(a1 + 56);
      }
      *(_DWORD *)(a1 + 56) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = *(_DWORD *)(v14 + 72 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = *(_DWORD *)(v14 + 72 * v12 + 8);
      *(_DWORD *)(a1 + 60) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 72 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 40) + 72 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 40) + 72 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 32) + 4 * v9);
    *(void *)(*(void *)(a1 + 40) + 72 * v12) = v8;
    id v16 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 40) + 72 * v12 + 16), (const re::AssetHandle *)&v18);
    uint64_t v17 = (re::DynamicString *)(*(void *)(a1 + 40) + 72 * v12 + 40);
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * v9) = v12;
    ++*(_DWORD *)(a1 + 52);
    ++*(_DWORD *)(a1 + 64);
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  while (*(void *)(v11 + 72 * v10 + 24) != v19)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
}

CFStringRef REAssetPathMappingCopyValueForKey(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v10);
  if (!*(void *)(a1 + 24)
    || (!v11 ? (uint64_t v3 = 0) : (uint64_t v3 = *(void *)(v11 + 664)),
        unint64_t v4 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27)),
        uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * ((v3 ^ (v4 >> 31) ^ v4) % *(unsigned int *)(a1 + 48))),
        v5 == 0x7FFFFFFF))
  {
LABEL_9:
    CFStringRef v7 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    while (*(void *)(v6 + 72 * v5 + 24) != v11)
    {
      uint64_t v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
      if (v5 == 0x7FFFFFFF) {
        goto LABEL_9;
      }
    }
    if (*(unsigned char *)(v6 + 72 * v5 + 48)) {
      unint64_t v9 = *(const char **)(v6 + 72 * v5 + 56);
    }
    else {
      unint64_t v9 = (const char *)(v6 + 72 * v5 + 49);
    }
    CFStringRef v7 = CFStringCreateWithCString(0, v9, 0x8000100u);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  return v7;
}

uint64_t REAssetPathMappingCreate(re *a1)
{
  re::make::shared::object<re::Shareable<re::AssetPathMapping>>(a1, &v2);
  return v2;
}

BOOL REAssetWriteToCompiledFileAndRemap(uint64_t a1, re::FileStreamWriter *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v21);
  v20[1] = 0;
  void v20[2] = 0;
  v20[0] = *(void *)(*(void *)(v21[1] + 24) + 1040);
  v17[0] = v20;
  v17[1] = a4;
  int v18 = 2;
  __int16 v19 = 256;
  uint64_t v7 = a3 + 24;
  if (!a3) {
    uint64_t v7 = 0;
  }
  _OWORD v17[2] = v7;
  void v17[3] = 0;
  re::AssetUtilities::saveAssetHandleToPath((re::AssetHandle *)v21, a2, (uint64_t)v17, (uint64_t)v13);
  if (v13[0])
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v10 = *re::assetsLogObjects(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (v15) {
        uint64_t v12 = *(unsigned char **)&v16[7];
      }
      else {
        uint64_t v12 = v16;
      }
      *(_DWORD *)long long buf = 136315394;
      long long v23 = a2;
      __int16 v24 = 2080;
      long long v25 = v12;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Error in REAssetWriteToBinaryFile writing to '%s' : '%s'", buf, 0x16u);
    }
    BOOL v9 = v13[0] != 0;
    if (!v13[0])
    {
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      BOOL v9 = 0;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
  return v9;
}

CFMutableDataRef REAssetCreateCompiledStreamAndRemap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v21 = &unk_26E736188;
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  re::AssetAPIHelper::assetHandleCreate(a1, v20);
  v19[1] = 0;
  _OWORD v19[2] = 0;
  v19[0] = *(void *)(*(void *)(v20[1] + 24) + 1040);
  v16[0] = v19;
  v16[1] = a3;
  int v17 = 2;
  __int16 v18 = 256;
  uint64_t v6 = a2 + 24;
  if (!a2) {
    uint64_t v6 = 0;
  }
  void v16[2] = v6;
  uint64_t v16[3] = 0;
  re::AssetUtilities::saveAssetHandleToStream((re::AssetHandle *)v20, (uint64_t)&v21, (uint64_t)v16, (uint64_t)v12);
  if (v12[0])
  {
    CFMutableDataRef v8 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    BOOL v9 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v14) {
        unint64_t v11 = *(unsigned char **)&v15[7];
      }
      else {
        unint64_t v11 = v15;
      }
      *(_DWORD *)long long buf = 136315138;
      __int16 v24 = v11;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Error in REAssetWriteToBinaryFile writing to stream : '%s'", buf, 0xCu);
    }
    CFMutableDataRef v8 = 0;
  }
  if (!v12[0] && v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  uint64_t v21 = &unk_26E736188;
  CFRelease(Mutable);
  return v8;
}

uint64_t REAssetManagerCreateLoadedAssetWithCompiledData(uint64_t a1, void *a2, char *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v30 = a2;
  int v22 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v23, 0);
  *((void *)&v27 + 1) = 0;
  long long v28 = 0uLL;
  re::DynamicString::setCapacity(&v27, 0);
  long long v29 = 0;
  re::AssetPath::parse((re::AssetPath *)&v22, a3, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v18);
  if (v18[0])
  {
    v17[1] = 0;
    _OWORD v17[2] = 0;
    v17[0] = *(void *)(a1 + 1040);
    v16[0] = 0;
    CompiledAssetFromData = (re *)re::AssetUtilities::loadCompiledAssetFromData((id *)&v30, v17, v29, 0, 0, (uint64_t)v16, (uint64_t)buf);
    if (buf[0])
    {
      re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a1, *(void **)&v35[4], (const re::AssetPath *)&v22, (uint64_t *)v31);
      uint64_t v9 = *(void *)v31;
      if (*(void *)v31) {
        id v10 = (id)(*(void *)v31 + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
    }
    else
    {
      uint64_t v12 = *re::assetsLogObjects(CompiledAssetFromData);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (v35[12]) {
          char v15 = v36;
        }
        else {
          char v15 = &v35[13];
        }
        *(_DWORD *)long long v31 = 136315394;
        *(void *)&void v31[4] = a3;
        __int16 v32 = 2080;
        uint64_t v33 = v15;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Error loading compiled asset '%s': %s", v31, 0x16u);
      }
      uint64_t v9 = 0;
      if (a4) {
        *a4 = 0;
      }
    }
    if (!buf[0] && *(void *)&v35[4] && (v35[12] & 1) != 0) {
      (*(void (**)(void))(**(void **)&v35[4] + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (v20) {
        char v14 = *(unsigned char **)&v21[7];
      }
      else {
        char v14 = v21;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v35 = a3;
      *(_WORD *)&v35[8] = 2080;
      *(void *)&v35[10] = v14;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to parse asset path '%s': %s", buf, 0x16u);
    }

    uint64_t v9 = 0;
    if (a4) {
      *a4 = 0;
    }
  }
  if (!v18[0] && v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  if ((void)v27)
  {
    if (BYTE8(v27)) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    long long v27 = 0u;
    long long v28 = 0u;
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*v23 + 40))();
  }

  return v9;
}

BOOL REAssetWriteToCompiledFile(uint64_t a1, re::FileStreamWriter *a2)
{
  return REAssetWriteToCompiledFileAndRemap(a1, a2, 0, 0);
}

uint64_t REAssetCreateFromCompiledFile(_anonymous_namespace_ *a1, uint64_t a2, char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v21 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v22, 0);
  *((void *)&v26 + 1) = 0;
  long long v27 = 0uLL;
  re::DynamicString::setCapacity(&v26, 0);
  long long v28 = 0;
  re::AssetPath::parse((re::AssetPath *)&v21, a3, 0, *(const re::internal::AssetTypeRegistry **)(a2 + 1040), *(os_unfair_lock_s **)(a2 + 1128), v17);
  if (v17[0])
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    *(void *)long long buf = *(void *)(a2 + 1040);
    v15[0] = 0;
    re::AssetUtilities::loadCompiledAssetFromPath((char *)a1, (uint64_t *)buf, v28, 0, v15, (uint64_t)v16);
    re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a2, v8, (const re::AssetPath *)&v21, v14);
    uint64_t v9 = v14[0];
    if (v14[0]) {
      id v10 = (id)(v14[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    if (!LOBYTE(v16[0])) {
  }
    }
  else
  {
    unint64_t v11 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (v19) {
        uint64_t v13 = *(unsigned char **)&v20[7];
      }
      else {
        uint64_t v13 = v20;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Error in REAssetCreateFromCompiledFile loading '%s': '%s'", buf, 0x16u);
    }
    uint64_t v9 = 0;
  }
  if (!v17[0] && v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  if ((void)v26)
  {
    if (BYTE8(v26)) {
      (*(void (**)(void))(*(void *)v26 + 40))();
    }
    long long v26 = 0u;
    long long v27 = 0u;
  }
  if (v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*v22 + 40))();
  }
  return v9;
}

id anonymous namespace'::unwrap(id *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1) {
    return a1[1];
  }
  uint64_t v3 = *re::assetsLogObjects((re *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    unint64_t v4 = v3;
    int v5 = 136315138;
    uint64_t v6 = re::WrappedError::localizedDescription(a1 + 1);
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t REAssetCreateMaterialFromCompiledFile(_anonymous_namespace_ *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v32 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  id v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v33, 0);
  *((void *)&v37 + 1) = 0;
  long long v38 = 0uLL;
  re::DynamicString::setCapacity(&v37, 0);
  __int16 v39 = 0;
  re::AssetPath::parse((re::AssetPath *)&v32, a3, 0, *(const re::internal::AssetTypeRegistry **)(a2 + 1040), *(os_unfair_lock_s **)(a2 + 1128), v28);
  if (v28[0])
  {
    v27[1] = 0;
    v27[2] = 0;
    v27[0] = *(void *)(a2 + 1040);
    v25[0] = 0;
    re::AssetUtilities::loadCompiledAssetFromPath((char *)a1, v27, v39, 0, v25, (uint64_t)v26);
    re::AssetManager::assetHandle((re::AssetManager *)a2, a4, 1, 0, (uint64_t *)buf);
    long long v13 = *(_OWORD *)(v12 + 40);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)buf;
    *(_OWORD *)long long buf = v13;
    uint64_t v14 = *((void *)v12 + 7);
    *((void *)v12 + 7) = *(void *)&buf[16];
    *(void *)&uint8_t buf[16] = v14;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    *(_OWORD *)&uint8_t buf[16] = 0u;
    memset(v41, 0, sizeof(v41));
    long long v42 = 0u;
    uint64_t v43 = 0;
    *(void *)long long buf = &unk_26E6D3770;
    *(void *)&uint8_t buf[8] = a5;
    *(void *)&uint8_t buf[16] = re::ServiceLocator::serviceOrNull<re::AssetService>(a5);
    *(void *)&unsigned char buf[24] = re::ServiceLocator::serviceOrNull<re::RenderManager>(*(uint64_t *)&buf[8]);
    uint64_t v15 = *((void *)v12 + 208);
    if (v15)
    {

      *((void *)v12 + 208) = 0;
    }
    v22[0] = 0;
    re::MaterialAssetLoader::doRegisterAsset(buf, (uint64_t)v12, 0, v22, (uint64_t)a3);
    if (v22[0] && (void)v23)
    {
      if (BYTE8(v23)) {
        (*(void (**)(void))(*(void *)v23 + 40))();
      }
      long long v23 = 0u;
      long long v24 = 0u;
    }
    re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a2, v12, (const re::AssetPath *)&v32, v21);
    uint64_t v16 = v21[0];
    if (v21[0]) {
      id v17 = (id)(v21[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
    *(void *)long long buf = &unk_26E6D3770;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v42);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v41[1] + 8));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v41);
    if (!LOBYTE(v26[0])) {
  }
    }
  else
  {
    uint64_t v18 = *re::assetsLogObjects(v11);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      if (v30) {
        char v20 = *(unsigned char **)&v31[7];
      }
      else {
        char v20 = v31;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v20;
      _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Error in REAssetCreateMaterialFromCompiledFile loading '%s': '%s'", buf, 0x16u);
    }
    uint64_t v16 = 0;
  }
  if (!v28[0] && v29 && (v30 & 1) != 0) {
    (*(void (**)(void))(*(void *)v29 + 40))();
  }
  if ((void)v37)
  {
    if (BYTE8(v37)) {
      (*(void (**)(void))(*(void *)v37 + 40))();
    }
    long long v37 = 0u;
    long long v38 = 0u;
  }
  if (v33 && (v34 & 1) != 0) {
    (*(void (**)(void))(*v33 + 40))();
  }
  return v16;
}

uint64_t REAssetManagerSceneAssetCreate(uint64_t a1, re *a2, char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::globalAllocators((re *)a1);
  uint64_t v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 40, 8);
  _OWORD *v7 = 0u;
  v7[1] = 0u;
  *((void *)v7 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  re::ecs2::ECSSerialization::saveIntoSceneAssetData(a2, (uint64_t)v7, 1);
  int v22 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v23, 0);
  *((void *)&v27 + 1) = 0;
  long long v28 = 0uLL;
  re::DynamicString::setCapacity(&v27, 0);
  uint64_t v29 = 0;
  re::AssetPath::parse((re::AssetPath *)&v22, a3, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v18);
  if (v18[0])
  {
    re::SceneAsset::assetType(v10);
    re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a1, v7, (const re::AssetPath *)&v22, (uint64_t *)buf);
    uint64_t v11 = *(void *)buf;
    if (*(void *)buf) {
      id v12 = (id)(*(void *)buf + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    uint64_t v13 = re::globalAllocators(v10)[2];
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v7);
    uint64_t v14 = (re *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, v7);
    uint64_t v15 = *re::assetsLogObjects(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (v20) {
        id v17 = *(unsigned char **)&v21[7];
      }
      else {
        id v17 = v21;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a3;
      __int16 v31 = 2080;
      int v32 = v17;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Error in REAssetManagerSceneAssetCreate, path '%s': '%s'", buf, 0x16u);
    }
    uint64_t v11 = 0;
  }
  if (!v18[0] && v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  if ((void)v27)
  {
    if (BYTE8(v27)) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    long long v27 = 0u;
    long long v28 = 0u;
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*v23 + 40))();
  }
  return v11;
}

uint64_t REAssetManagerSceneAssetCreateFromEntity(uint64_t a1, re *a2, char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::globalAllocators((re *)a1);
  uint64_t v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 40, 8);
  _OWORD *v7 = 0u;
  v7[1] = 0u;
  *((void *)v7 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  re::ecs2::ECSSerialization::saveEntityHierarchyIntoSceneAssetData(a2, (uint64_t)v7, 1);
  int v22 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v23, 0);
  *((void *)&v27 + 1) = 0;
  long long v28 = 0uLL;
  re::DynamicString::setCapacity(&v27, 0);
  uint64_t v29 = 0;
  re::AssetPath::parse((re::AssetPath *)&v22, a3, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v18);
  if (v18[0])
  {
    re::SceneAsset::assetType(v10);
    re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a1, v7, (const re::AssetPath *)&v22, (uint64_t *)buf);
    uint64_t v11 = *(void *)buf;
    if (*(void *)buf) {
      id v12 = (id)(*(void *)buf + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    uint64_t v13 = re::globalAllocators(v10)[2];
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v7);
    uint64_t v14 = (re *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, v7);
    uint64_t v15 = *re::assetsLogObjects(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (v20) {
        id v17 = *(unsigned char **)&v21[7];
      }
      else {
        id v17 = v21;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a3;
      __int16 v31 = 2080;
      int v32 = v17;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Error in REAssetManagerSceneAssetCreateFromEntity, path '%s': '%s'", buf, 0x16u);
    }
    uint64_t v11 = 0;
  }
  if (!v18[0] && v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  if ((void)v27)
  {
    if (BYTE8(v27)) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    long long v27 = 0u;
    long long v28 = 0u;
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*v23 + 40))();
  }
  return v11;
}

uint64_t RESceneCreateSceneAsset(re *a1, uint64_t a2, char *a3)
{
  return REAssetManagerSceneAssetCreate(a2, a1, a3);
}

uint64_t REAssetDynamicArrayGetSize(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REAssetDynamicArrayGetAsset(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 56) + 24 * a2);
}

_anonymous_namespace_ *REAssetCopyDependencyArray(uint64_t a1, re::AssetManager *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v15);
  re::AssetManager::findDependencies(a2, (const re::AssetHandle *)v15, (uint64_t)v12);
  uint64_t v11 = 0;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  if (v13)
  {
    unint64_t v4 = v14;
    uint64_t v5 = 24 * v13;
    do
    {
      if (*((void *)v4 + 1)) {
        uint64_t v3 = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v9, v4);
      }
      unint64_t v4 = (re::AssetHandle *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  uint64_t v6 = re::globalAllocators(v3);
  uint64_t v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 64, 8);
  ArcSharedObject::ArcSharedObject(v7, 0);
  *(void *)uint64_t v7 = &unk_26E736B18;
  re::DynamicArray<re::AssetHandle>::DynamicArray((uint64_t)v7 + 24, v9);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v9);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v12);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v7;
}

uint64_t REAssetManagerGetAssetNonSharedMemoryByteSizeForAssetsFromResourceSharingPeer(re::AssetManager *a1, uint64_t a2)
{
  re::AssetManager::getAssetsReceivedFromPeer(a1, a2, (uint64_t)v8);
  if (v9)
  {
    uint64_t v3 = 0;
    unint64_t v4 = v10;
    uint64_t v5 = 24 * v9;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v7, v4);
      v3 += re::AssetManager::assetNonSharedDataByteSize(a1, (re::AssetHandle *)v7);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
      unint64_t v4 = (re::AssetHandle *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    uint64_t v3 = 0;
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v8);
  return v3;
}

id REAssetHandleCopyToPropertyBag(uint64_t a1)
{
  *(void *)&uint64_t v23[5] = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v20);
  if (!v21 || (unsigned int v2 = atomic_load((unsigned int *)(v21 + 704)), v2 != 2))
  {
    int v10 = *re::assetsLogObjects(v1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v10;
      uint64_t v18 = re::AssetHandle::assetInfo((re::AssetHandle *)&v20);
      if (v18[17]) {
        uint64_t v19 = (char *)v18[18];
      }
      else {
        uint64_t v19 = (char *)v18 + 137;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long v23 = v19;
      uint64_t v9 = "REAssetHandleCopyToPropertyBag: asset must be loaded first '%s'";
      goto LABEL_30;
    }
    goto LABEL_10;
  }
  uint64_t v3 = *(uint64_t **)(v21 + 264);
  unint64_t v4 = re::MeshAsset::assetType(v1);
  if (v3 == v4)
  {
    uint64_t v5 = *re::assetsLogObjects((re *)v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      uint64_t v7 = re::AssetHandle::assetInfo((re::AssetHandle *)&v20);
      if (v7[17]) {
        id v8 = (char *)v7[18];
      }
      else {
        id v8 = (char *)v7 + 137;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long v23 = v8;
      uint64_t v9 = "REAssetHandleCopyToPropertyBag doesn't support mesh assets '%s'";
LABEL_30:
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
  if (v21)
  {
    uint64_t v13 = *(uint64_t **)(v21 + 264);
    if (v13 == re::TextureAsset::assetType((re::TextureAsset *)v4))
    {
      uint64_t v14 = (re *)re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v20);
      if (!*((unsigned char *)v14 + 10))
      {
        uint64_t v15 = *re::assetsLogObjects(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          uint64_t v6 = v15;
          uint64_t v16 = re::AssetHandle::assetInfo((re::AssetHandle *)&v20);
          if (v16[17]) {
            id v17 = (char *)v16[18];
          }
          else {
            id v17 = (char *)v16 + 137;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v23 = v17;
          uint64_t v9 = "REAssetHandleCopyToPropertyBag doesn't support texture assets '%s'";
          goto LABEL_30;
        }
LABEL_10:
        id v11 = 0;
        goto LABEL_11;
      }
    }
  }
  else
  {
    re::TextureAsset::assetType((re::TextureAsset *)v4);
  }
  re::AssetAPIUtilities::copyToPropertyBag((re::AssetAPIUtilities *)&v20, (uint64_t)buf);
  if (!buf[0]) {
    goto LABEL_10;
  }
  id v11 = *(id *)&v23[1];

  if (buf[0]) {
LABEL_11:
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
  return v11;
}

uint64_t REAssetHandleLoadFromPropertyBag(uint64_t a1, void *a2)
{
  id v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  id v6 = v3;

  uint64_t v4 = re::AssetAPIUtilities::loadFromPropertyBag((_anonymous_namespace_ *)v7, &v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v4;
}

uint64_t REAssetHandleCopyToCFPropertyBag(uint64_t a1)
{
  return objc_claimAutoreleasedReturnValue();
}

re::AssetLoadRequest *REAssetManagerCreateAssetRequest(re::AssetManager *a1)
{
  re::AssetManager::makeLoadRequest(a1, &v4);
  uint64_t v1 = v4;
  unsigned int v2 = (char *)v4 + 8;
  if (v4) {

  }
  return v1;
}

BOOL REAssetLoadRequestSetWaitForResourceSharingClients(re::AssetLoadRequest *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  re::AssetLoadRequest::setShouldLoadAndWaitForResourceSharingClients(a1, 1, a2, (uint64_t)v6);
  int v2 = v6[0];
  if (!v6[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = re::WrappedError::localizedDescription(&v7);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = v5;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }

    if (!v6[0]) {
  }
    }
  return v2 != 0;
}

BOOL REAssetLoadRequestSetLoadAndWaitForResourceSharingClients(re::AssetLoadRequest *a1, char a2, int a3, void *a4)
{
  re::AssetLoadRequest::setShouldLoadAndWaitForResourceSharingClients(a1, a2, a3, (uint64_t)v9);
  int v5 = v9[0];
  int v6 = v9[0];
  if (a4 && !v9[0])
  {
    id v7 = v10;
    *a4 = v7;
    if (v7) {
      CFRetain(v7);
    }
    int v6 = v9[0];
  }
  if (!v6) {

  }
  return v5 != 0;
}

BOOL REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted(re::AssetLoadRequest *a1, char a2, void *a3)
{
  re::AssetLoadRequest::setShouldBlockECSSendsUntilCompleted(a1, a2, (uint64_t)v8);
  int v4 = v8[0];
  int v5 = v8[0];
  if (a3 && !v8[0])
  {
    id v6 = v9;
    *a3 = v6;
    if (v6) {
      CFRetain(v6);
    }
    int v5 = v8[0];
  }
  if (!v5) {

  }
  return v4 != 0;
}

void REAssetLoadRequestAddAsset(re::AssetLoadRequest::Data **a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  re::AssetLoadRequest::addAsset(a1, (const re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

float REAssetLoadRequestGetProgress(uint64_t a1)
{
  return re::AssetLoadRequest::Data::progress(*(os_unfair_lock_s **)(a1 + 24));
}

uint64_t REAssetLoadRequestGetState(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 24);
  int v2 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  uint64_t os_unfair_lock_opaque = v1[84]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque;
}

uint64_t REAssetLoadRequestGetNumLoading(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  int v2 = (os_unfair_lock_s *)(v1 + 192);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 192));
  uint64_t v3 = *(void *)(v1 + 216);
  os_unfair_lock_unlock(v2);
  return v3;
}

id REAssetLoadRequestCopyError(re::AssetLoadRequest *a1)
{
  re::AssetLoadRequest::error(a1, &v4);
  id v1 = v4;
  if (v4)
  {
    CFRetain(v4);
    id v2 = v4;
  }
  else
  {
    id v2 = 0;
  }

  return v1;
}

void *REAssetLoadRequestSetCompletionHandler(uint64_t a1, void *aBlock)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v5 = 0;
  if (aBlock)
  {
    v4[0] = &unk_26E70B790;
    v4[1] = _Block_copy(aBlock);
    int v5 = v4;
  }
  re::AssetLoadRequest::setCompletionHandler(a1, (uint64_t)v4, 0);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](v4);
}

void REAssetLoadRequestSetCompletionHandlerOnQueue(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v8 = 0;
  if (v5)
  {
    v7[0] = &unk_26E70B790;
    v7[1] = _Block_copy(v5);
    id v8 = v7;
  }
  re::AssetLoadRequest::setCompletionHandler(a1, (uint64_t)v7, &v6);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](v7);
}

void REAssetLoadRequestWaitForCompletion(uint64_t a1)
{
}

void REAssetLoadRequestWaitForCompletionFromOtherQueue(uint64_t a1)
{
}

void RERunJob(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v4 = a2;
  uint64_t v3 = re::ServiceLocator::service<re::JobService>(a1);
  v5[1] = 0;
  id v6 = 0;
  v5[0] = re::Job::init<RERunJob::$_0>(RERunJob::$_0 &&)::{lambda(re::Job&)#1}::__invoke;
  id v7 = "Unnamed";
  id v8 = &v4;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 40))(v3, v5);
}

uint64_t re::ServiceLocator::service<re::JobService>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::JobService>(a1);
  if (!result)
  {
    id v2 = (re::internal *)re::introspect<re::JobService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t v3 = (re::internal *)re::introspect<re::JobService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      id v5 = *(unsigned char **)&v8[7];
    }
    else {
      id v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void REParallelFor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = re::ServiceLocator::service<re::JobService>(a1);
  aBlocunint64_t k = v7;
  if (!a2)
  {
LABEL_11:

    return;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  v20[0] = a2;
  v20[1] = a3;
  void v20[2] = 0;
  id v10 = _Block_copy(aBlock);
  uint64_t v12 = 0;
  id v21 = v10;
  do
  {
    uint64_t v13 = &v19[v12];
    *uint64_t v13 = 0;
    v13[1] = 0;
    void v13[2] = 0;
    void v13[3] = "Unnamed";
    v12 += 64;
  }
  while (v12 != 1536);
  if (!v9)
  {
LABEL_8:
    (*(void (**)(uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*(void *)v8 + 48))(v8, v19, v9, v18, 0);
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v8 + 56))(v8, v18, 0);
    for (uint64_t i = 1488; i != -48; i -= 64)

    goto LABEL_11;
  }
  uint64_t v14 = 0;
  while (v14 != 1536)
  {
    uint64_t v15 = (uint64_t (**)(uint64_t))&v19[v14];
    *uint64_t v15 = re::Job::init<void re::parallelFor<void({block_pointer} {__strong})(long long)>(re::JobService &,unsigned long,unsigned long,unsigned long,void({block_pointer} {__strong})(long long),BOOL)::{lambda(void)#1}>(void({block_pointer} {__strong})(long long)&&)::{lambda(re::Job&)#1}::__invoke;
    _OWORD v15[4] = (uint64_t (*)(uint64_t))v20;
    v14 += 64;
    if ((unint64_t)v9 << 6 == v14) {
      goto LABEL_8;
    }
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < N", "operator[]", 234, 24, 24);
  _os_crash();
  __break(1u);
}

uint64_t REServiceLocatorGetFrameManager(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::RenderManager>(a1);
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

id RERenderManagerGetRenderDevice(uint64_t a1)
{
  id v1 = *(id *)(a1 + 184);
  return v1;
}

id RERenderManagerGetRenderCommandQueue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    id v2 = *(id *)(v1 + 280);
  }
  else {
    id v2 = 0;
  }
  return v2;
}

uint64_t RERenderManagerRegisterRenderLayer(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = re::RenderManager::registerRenderLayer(a1, &v5);

  return v3;
}

void RERenderManagerUnregisterRenderLayer(uint64_t a1, unsigned int a2)
{
  id v2 = *(re::DrawingManager **)(a1 + 104);
  if (v2) {
    re::DrawingManager::unregisterRenderLayer(v2, a2);
  }
}

uint64_t RERenderManagerSetLayerSize(uint64_t a1, unsigned int a2, float a3, float a4)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return re::DrawingManager::setLayerSize(result, a2, a3, a4);
  }
  return result;
}

__n64 RERenderManagerGetLayerSize(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v4 = *(re::DrawingManager **)(a1 + 104);
  if (v4)
  {
    result.n64_f32[0] = re::DrawingManager::getLayerSize(v4, a2, a3, a4);
  }
  else
  {
    result.n64_u32[0] = 1.0;
    unsigned __int32 v6 = 1.0;
  }
  result.n64_u32[1] = v6;
  return result;
}

uint64_t RERenderManagerGetMeshManager(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL RERenderManagerNeedToWaitForFramePacingNow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (!v1 || !*(unsigned char *)(v1 + 792)) {
    return 0;
  }
  id v2 = *(void **)(v1 + 328);
  unint64_t v3 = v2[24];
  unint64_t v4 = v2[20];
  unint64_t v5 = v2[25];
  return v3 < v4 || v5 < v4;
}

void RERenderManagerWaitForFramePacing(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 792)) {
      re::RenderThread::waitForFramePacing(*(re::RenderThread **)(v1 + 328));
    }
  }
}

void RERenderManagerWaitUntilScheduled(uint64_t a1)
{
  uint64_t v1 = *(re::DrawingManager **)(a1 + 104);
  if (v1) {
    re::DrawingManager::waitUntilScheduled(v1);
  }
}

uint64_t RERenderManagerCreateRenderFrameSettings(re *a1)
{
  if (!*((void *)a1 + 13)) {
    return 0;
  }
  re::make::shared::object<re::RenderFrameSettings>(a1, &v2);
  return v2;
}

re::DrawingManager *RERenderManagerCreateRenderFrameWorkload(uint64_t a1)
{
  __n64 result = *(re::DrawingManager **)(a1 + 104);
  if (result)
  {
    re::DrawingManager::createRenderFrameWorkload(result, &v2);
    return (re::DrawingManager *)v2;
  }
  return result;
}

uint64_t (***RERenderFrameWorkloadAddBeforeEmitHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736848;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 232), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddBeforeEncodeHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E7368B0;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 272), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddPostEncodeHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736908;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 312), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddEncodedHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736960;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 352), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddPostEncodeWithBoundsHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E7369B8;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 312), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddCompletedHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736A10;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 392), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadAddScheduledHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736A68;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add((_anonymous_namespace_ *)(a1 + 432), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  unint64_t v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736AC0;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::add((_anonymous_namespace_ *)(a1 + 472), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v6);
}

void RERenderFrameWorkloadAddPresent(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  re::DynamicArray<re::mtl::Drawable>::add((_anonymous_namespace_ *)(a1 + 192), &v4);
}

void RERenderFrameWorkloadCommit(uint64_t a1)
{
}

void RERenderFrameWorkloadCommitAndWait(uint64_t a1)
{
}

void RERenderFrameWorkloadCommitWithImmediatePresent(uint64_t a1)
{
}

re::DrawingManager *RERenderFrameWorkloadCommitEmpty(uint64_t a1)
{
  __n64 result = *(re::DrawingManager **)(a1 + 104);
  if (result) {
    return (re::DrawingManager *)re::DrawingManager::commitEmptyWorkload(result);
  }
  return result;
}

uint64_t RERenderManagerIsReady()
{
  return 0;
}

uint64_t RERenderManagerGetRootCommandBuffer()
{
  return 0;
}

uint64_t RERenderManagerCompileShadersForPlatform()
{
  return 0xFFFFFFFFLL;
}

uint64_t RERenderManagerClearLibraryCache(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 56) + 240) unloadShaderCaches];
}

uint64_t RERenderManagerGetRenderFrameOptional(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return re::RenderFrameBox::get(v1 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    return 0;
  }
}

uint64_t RERenderManagerGetRenderFrame(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return re::RenderFrameBox::get(v1 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    return 0;
  }
}

uint64_t RERenderManagerGetRenderGraphManagerOptional(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return *(void *)(v1 + 296);
  }
  else {
    return 0;
  }
}

uint64_t RERenderManagerGetRenderGraphManager(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return *(void *)(v1 + 296);
  }
  else {
    return 0;
  }
}

uint64_t RERenderManagerGetShaderManager(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t RERenderManagerGetProbeManager(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return *(void *)(v1 + 320);
  }
  else {
    return 0;
  }
}

void RERenderManagerSetEnableProbeLighting(re *a1, char a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    **(unsigned char **)(v2 + 320) = a2;
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderManagerSetEnableProbeLighting::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    id v3 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetEnableProbeLighting() was called with a null DrawingManager, it will be ignored.", v4, 2u);
    }
  }
}

BOOL RERenderManagerGetEnableProbeLighting(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return **(unsigned char **)(v1 + 320) != 0;
  }
  BOOL result = 1;
  if ((atomic_exchange((atomic_uchar *volatile)&RERenderManagerGetEnableProbeLighting::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    id v3 = *re::graphicsLogObjects((re *)1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetEnableProbeLighting() was called with a null DrawingManager, it will return default value true.", v4, 2u);
    }
    return 1;
  }
  return result;
}

void RERenderManagerSetEnableProbeLightingLegacyBlur(re *a1, int a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    if (*(unsigned __int8 *)(v3 + 809) != a2)
    {
      *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
      *(unsigned char *)(v3 + 809) = a2;
    }
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderManagerSetEnableProbeLightingLegacyBlur::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    id v4 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetEnableProbeLightingLegacyBlur() was called with a null DrawingManager, it will be ignored.", v5, 2u);
    }
  }
}

BOOL RERenderManagerGetEnableProbeLightingLegacyBlur(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(unsigned char *)(*(void *)(v1 + 320) + 809) != 0;
  }
  if ((atomic_exchange((atomic_uchar *volatile)&RERenderManagerGetEnableProbeLightingLegacyBlur::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v3 = *re::graphicsLogObjects(a1);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v4) {
      return result;
    }
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetEnableProbeLightingLegacyBlur() was called with a null DrawingManager, it will return default value true.", v5, 2u);
  }
  return 0;
}

void RERenderManagerSetEnableProbeExposureAdjustment(re *a1, int a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    if (*(unsigned __int8 *)(v3 + 810) != a2)
    {
      *(unsigned char *)(v3 + 810) = a2;
      *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
    }
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderManagerSetEnableProbeExposureAdjustment::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    BOOL v4 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetEnableProbeExposureAdjustment() was called with a null DrawingManager, it will be ignored.", v5, 2u);
    }
  }
}

BOOL RERenderManagerGetEnableProbeExposureAdjustment(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(unsigned char *)(*(void *)(v1 + 320) + 810) != 0;
  }
  if ((atomic_exchange(RERenderManagerGetEnableProbeExposureAdjustment::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v3 = *re::graphicsLogObjects(a1);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v4) {
      return result;
    }
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetEnableProbeExposureAdjustment() was called with a null DrawingManager, it will return default value.", v5, 2u);
  }
  return 0;
}

void RERenderManagerSetProbeIntensityScale(re *a1, float a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    float v4 = *(float *)(v3 + 812);
    if (v4 != a2 && vabds_f32(v4, a2) > 1.0e-10)
    {
      *(float *)(v3 + 812) = (float)(v4 * (float)(1.0 - *(float *)(v3 + 816))) + (float)(a2 * *(float *)(v3 + 816));
      *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
    }
  }
  else
  {
    unint64_t v5 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int32 v6 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetProbeIntensityScale() was called with a null DrawingManager, it will be ignored.", v6, 2u);
    }
  }
}

float RERenderManagerGetProbeIntensityScale(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(float *)(*(void *)(v1 + 320) + 812);
  }
  uint64_t v3 = *re::graphicsLogObjects(a1);
  float v2 = 1.0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetProbeIntensityScale() was called with a null DrawingManager, it will return default value 1.0.", v5, 2u);
  }
  return v2;
}

void RERenderManagerSetProbeIntensityExpSmoothFactor(re *a1, float a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    float v4 = *(float *)(v3 + 816);
    if (v4 != a2 && vabds_f32(v4, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v4)) + 1.0) * 0.00001)) {
      *(float *)(v3 + 816) = a2;
    }
  }
  else
  {
    unint64_t v5 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int32 v6 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetProbeExpSmoothFactor() was called with a null DrawingManager, it will be ignored.", v6, 2u);
    }
  }
}

float RERenderManagerGetProbeIntensityExpSmoothFactor(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(float *)(*(void *)(v1 + 320) + 816);
  }
  uint64_t v3 = *re::graphicsLogObjects(a1);
  float v2 = 1.0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetProbeIntensityExpSmoothFactor() was called with a null DrawingManager, it will be return a default value 1.0.", v5, 2u);
  }
  return v2;
}

void RERenderManagerSetFinalProbeIntensityScale(re *a1, float a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    float v4 = *(float *)(v3 + 820);
    if (v4 != a2 && vabds_f32(v4, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v4)) + 1.0) * 0.00001))
    {
      *(float *)(v3 + 820) = a2;
      *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
    }
  }
  else
  {
    unint64_t v5 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int32 v6 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetFinalProbeIntensityScale() was called with a null DrawingManager, it will be ignored.", v6, 2u);
    }
  }
}

float RERenderManagerGetFinalProbeIntensityScale(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(float *)(*(void *)(v1 + 320) + 820);
  }
  uint64_t v3 = *re::graphicsLogObjects(a1);
  float v2 = 1.0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetFinalProbeIntensityScale() was called with a null DrawingManager, it will return default value 1.0.", v5, 2u);
  }
  return v2;
}

void RERenderManagerSetProbeClampFloor(re *a1, float a2)
{
  uint64_t v3 = *((void *)a1 + 13);
  if (v3) {
    goto LABEL_5;
  }
  unint64_t v5 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetProbeClampFloor() was called with a null DrawingManager, it will be ignored", v7, 2u);
  }
  uint64_t v3 = *((void *)a1 + 13);
  if (v3) {
LABEL_5:
  }
    uint64_t v3 = *(void *)(v3 + 320);
  float v6 = *(float *)(v3 + 828);
  if (v6 != a2 && vabds_f32(v6, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v6)) + 1.0) * 0.00001))
  {
    *(float *)(v3 + 828) = a2;
    *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
}

float RERenderManagerGetProbeClampFloor(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(float *)(*(void *)(v1 + 320) + 828);
  }
  uint64_t v3 = *re::graphicsLogObjects(a1);
  float v2 = 0.01;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetProbeClampFloor() was called with a null DrawingManager, it will be return default value", v5, 2u);
  }
  return v2;
}

void RERenderManagerSetProbeClampCeil(re *a1, float a2)
{
  uint64_t v3 = *((void *)a1 + 13);
  if (v3) {
    goto LABEL_5;
  }
  unint64_t v5 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "RERenderManagerSetProbeClampCeil() was called with a null DrawingManager, it will be ignored", v7, 2u);
  }
  uint64_t v3 = *((void *)a1 + 13);
  if (v3) {
LABEL_5:
  }
    uint64_t v3 = *(void *)(v3 + 320);
  float v6 = *(float *)(v3 + 832);
  if (v6 != a2 && vabds_f32(v6, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v6)) + 1.0) * 0.00001))
  {
    *(float *)(v3 + 832) = a2;
    *(unsigned char *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  }
}

float RERenderManagerGetProbeClampCeil(re *a1)
{
  uint64_t v1 = *((void *)a1 + 13);
  if (v1) {
    return *(float *)(*(void *)(v1 + 320) + 832);
  }
  uint64_t v3 = *re::graphicsLogObjects(a1);
  float v2 = 10.0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "RERenderManagerGetProbeClampCeil() was called with a null DrawingManager, it will be return default value", v5, 2u);
  }
  return v2;
}

uint64_t RERenderManagerSetCompositorBackgroundColor(uint64_t result, __n128 a2)
{
  *(__n128 *)(*(void *)(result + 120) + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

__n128 RERenderManagerGetCompositorBackgroundColor(uint64_t a1)
{
  return *(__n128 *)(*(void *)(a1 + 120) + 144);
}

void RERenderManagerSetBackdrop(uint64_t a1, uint64_t a2, const char *a3)
{
  float v4 = *(void **)(a1 + 120);
  re::AssetAPIHelper::assetHandleCreate(a2, v8);
  unint64_t v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v7, (const re::AssetHandle *)v8);
  re::BlurManager::setBackdrop(v4, (const re::AssetHandle *)v7, (re::DynamicString *)v6);
  if (*(void *)&v6[0])
  {
    if (BYTE8(v6[0])) {
      (*(void (**)(void))(**(void **)&v6[0] + 40))();
    }
    memset(v6, 0, sizeof(v6));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

re::DynamicString *re::BlurManager::setBackdrop(void *a1, const re::AssetHandle *a2, re::DynamicString *a3)
{
  char v13[4] = *MEMORY[0x263EF8340];
  float v6 = a1 + 20;
  id v7 = (re::AssetHandle *)operator new(0x18uLL);
  uint64_t v8 = re::AssetHandle::AssetHandle(v7, a2);
  v12[0] = std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100];
  v12[1] = v8;
  if (v12 == v6)
  {
    id v10 = std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100];
LABEL_8:
    v10(0, (uint64_t)v12, 0, 0, 0);
    return re::DynamicString::operator=((re::DynamicString *)(a1 + 24), a3);
  }
  uint64_t v9 = (void (*)(uint64_t, void *, void *, void, void))*v6;
  if (!*v6)
  {
    a1[20] = std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100];
    a1[21] = v8;
    return re::DynamicString::operator=((re::DynamicString *)(a1 + 24), a3);
  }
  v13[0] = 0;
  v13[1] = 0;
  v9(2, v6, v13, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v12[0])(2, v12, v6, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v13[0])(2, v13, v12, 0, 0);
  if (v13[0]) {
    ((void (*)(void, void *, void, void, void))v13[0])(0, v13, 0, 0, 0);
  }
  id v10 = (void *(*)(unsigned int, uint64_t, void *, uint64_t, void *))v12[0];
  if (v12[0]) {
    goto LABEL_8;
  }
  return re::DynamicString::operator=((re::DynamicString *)(a1 + 24), a3);
}

void RERenderManagerUnsetBackdrop(_anonymous_namespace_ *a1)
{
  uint64_t v1 = (void *)*((void *)a1 + 15);
  memset(v3, 0, sizeof(v3));
  re::BlurManager::setBackdrop(v1, (const re::AssetHandle *)v3, (re::DynamicString *)v2);
  if (*(void *)&v2[0])
  {
    if (BYTE8(v2[0])) {
      (*(void (**)(void))(**(void **)&v2[0] + 40))();
    }
    memset(v2, 0, sizeof(v2));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

uint64_t REECSManagerGetServiceLocator(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void REECSManagerAddScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v5 = a2;
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v3, &v5);
  if (v5) {
}
  }

void REECSManagerInsertScene(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (a2)
  {
    id v6 = (id)(a2 + 8);
    id v7 = (id)(a2 + 8);
  }
  v25[0] = a2;
  uint64_t v8 = (re *)(*(uint64_t (**)(uint64_t, unint64_t, void *))(*(void *)v5 + 24))(v5, a3, v25);
  unint64_t v9 = *(void *)(v5 + 24);
  if (v9 >= a3)
  {
    unint64_t v11 = v9 + 1;
    if (v9 + 1 <= a3)
    {
      v25[1] = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      long long v27 = "insert";
      __int16 v28 = 1024;
      int v29 = 855;
      __int16 v30 = 2048;
      unint64_t v31 = a3;
      __int16 v32 = 2048;
      unint64_t v33 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v9 >= *(void *)(v5 + 16))
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((void *)(v5 + 8), v9 + 1);
      unint64_t v9 = *(void *)(v5 + 24);
    }
    uint64_t v12 = *(void *)(v5 + 40);
    uint64_t v13 = (void *)(v12 + 8 * v9);
    if (v9 <= a3)
    {
      uint64_t v23 = v25[0];
      *uint64_t v13 = v25[0];
      if (v23) {
        id v24 = (id)(v23 + 8);
      }
    }
    else
    {
      uint64_t v14 = *(v13 - 1);
      *(v13 - 1) = 0;
      *uint64_t v13 = v14;
      uint64_t v15 = v13 - 1;
      if (v15 != (uint64_t *)(v12 + 8 * a3))
      {
        uint64_t v16 = *v15;
        id v17 = (uint64_t *)(v12 + 8 * v9 - 16);
        uint64_t v18 = 8 * a3 - 8 * v9 + 8;
        do
        {
          uint64_t v19 = *v17;
          *id v17 = v16;
          v17[1] = v19;
          --v17;
          v18 += 8;
        }
        while (v18);
        uint64_t v12 = *(void *)(v5 + 40);
      }
      uint64_t v20 = v25[0];
      uint64_t v21 = *(void *)(v12 + 8 * a3);
      if (v21 != v25[0])
      {
        if (v25[0])
        {
          id v22 = (id)(v25[0] + 8);
          uint64_t v21 = *(void *)(v12 + 8 * a3);
        }
        if (v21) {

        }
        *(void *)(v12 + 8 * a3) = v20;
      }
    }
    ++*(void *)(v5 + 24);
    ++*(_DWORD *)(v5 + 32);
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v5 + 48))(v5, a3, v25);
  }
  else
  {
    id v10 = *re::foundationCoreLogObjects(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = "void re::Collection<re::SharedPtr<re::ecs2::Scene>>::insert(size_t, const T &) [T ="
                                     " re::SharedPtr<re::ecs2::Scene>]";
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willInsert(), not inserting", (uint8_t *)buf, 0x16u);
    }
  }
  if (v25[0]) {

  }
  if (a2) {
}
  }

void REECSManagerRemoveScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v5 = a2;
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::remove(v3, &v5);
  if (v5) {
}
  }

uint64_t REECSManagerSceneCount(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 24);
}

uint64_t REECSManagerGetScene(uint64_t a1, unint64_t a2)
{
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 24) <= a2) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return *(void *)re::ecs2::EntityComponentCollection::operator[](v4, a2);
}

uint64_t REECSManagerCreateRealityRendererSceneGroup(uint64_t result)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 208))(&v1);
    return v1;
  }
  return result;
}

uint64_t REECSManagerGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t REECSManagerSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(result + 320) = a2;
  return result;
}

float REECSManagerSetCustomUpdateCallback(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 328) = a2;
  *(_DWORD *)(a1 + 348) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    float result = *(float *)(v2 + 756);
    if (result > 0.0)
    {
      *(_DWORD *)(v2 + 756) = 0;
      float result = fminf(*(float *)(v2 + 752), 0.0);
      *(float *)(v2 + 752) = result;
    }
  }
  return result;
}

uint64_t REECSManagerSetSceneNetworkingMode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t _REECSManagerGetEngineSystemTypeIDs(signed int a1, long long **a2)
{
  uint64_t v304 = *MEMORY[0x263EF8340];
  if ((_MergedGlobals_531 & 1) == 0)
  {
    bzero(_REECSManagerGetEngineSystemTypeIDs::mapping, 0x1800uLL);
    uint64_t v3 = &qword_268772000;
    {
      uint64_t v3 = &qword_268772000;
      if (v174)
      {
        re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkReceiveSystem(0);
        uint64_t v3 = &qword_268772000;
      }
    }
    uint64_t v4 = v3[385];
    uint64_t v5 = "reateHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptionsEEUlS9_SB_E0_SC_JEEE";
    long long v6 = xmmword_23442C3C0;
    if (v4) {
      long long v6 = *(_OWORD *)(v4 + 32);
    }
    _REECSManagerGetEngineSystemTypeIDs::mapping[0] = v6;
    *(_OWORD *)algn_26879C750 = xmmword_23442C3C0;
    xmmword_26879C760 = xmmword_23442C3C0;
    unk_26879C770 = xmmword_23442C3C0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0430, memory_order_acquire) & 1) == 0)
    {
      int v175 = __cxa_guard_acquire(&qword_26AFA0430);
      uint64_t v5 = "reateHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptionsEEUlS9_SB_E0_SC_JEEE";
      if (v175)
      {
        qword_26AFA0428 = re::ecs2::introspect_CameraMovementSystem(0);
        __cxa_guard_release(&qword_26AFA0430);
        uint64_t v5 = "reateHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptionsEEUlS9_SB_E0_SC_JEEE";
      }
    }
    long long v7 = xmmword_23442C3C0;
    if (qword_26AFA0428) {
      long long v7 = *(_OWORD *)(qword_26AFA0428 + 32);
    }
    xmmword_26879C780 = v7;
    *(_OWORD *)algn_26879C790 = xmmword_23442C3C0;
    xmmword_26879C7A0 = xmmword_23442C3C0;
    unk_26879C7B0 = xmmword_23442C3C0;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v176)
      {
        re::introspect<re::DrawWorldSystem>(void)::info = (_UNKNOWN *)re::introspect_DrawWorldSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v8 = *((_OWORD *)v5 + 60);
    long long v9 = v8;
    if (re::introspect<re::DrawWorldSystem>(void)::info) {
      long long v9 = *((_OWORD *)re::introspect<re::DrawWorldSystem>(void)::info + 2);
    }
    xmmword_26879C800 = v9;
    *(_OWORD *)algn_26879C810 = v8;
    xmmword_26879C820 = v8;
    unk_26879C830 = v8;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v177)
      {
        re::introspect<re::SkyboxSystem>(void)::info = (_UNKNOWN *)re::introspect_SkyboxSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v10 = *((_OWORD *)v5 + 60);
    long long v11 = v10;
    if (re::introspect<re::SkyboxSystem>(void)::info) {
      long long v11 = *((_OWORD *)re::introspect<re::SkyboxSystem>(void)::info + 2);
    }
    xmmword_26879C840 = v11;
    *(_OWORD *)algn_26879C850 = v10;
    xmmword_26879C860 = v10;
    unk_26879C870 = v10;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0440, memory_order_acquire) & 1) == 0)
    {
      v178 = v5;
      int v179 = __cxa_guard_acquire(&qword_26AFA0440);
      uint64_t v5 = v178;
      if (v179)
      {
        qword_26AFA0438 = re::ecs2::introspect_PrimitiveBoxSystem(0);
        __cxa_guard_release(&qword_26AFA0440);
        uint64_t v5 = v178;
      }
    }
    long long v12 = *((_OWORD *)v5 + 60);
    long long v13 = v12;
    if (qword_26AFA0438) {
      long long v13 = *(_OWORD *)(qword_26AFA0438 + 32);
    }
    xmmword_26879C880 = v13;
    *(_OWORD *)algn_26879C890 = v12;
    xmmword_26879C8A0 = v12;
    unk_26879C8B0 = v12;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0450, memory_order_acquire) & 1) == 0)
    {
      v180 = v5;
      int v181 = __cxa_guard_acquire(&qword_26AFA0450);
      uint64_t v5 = v180;
      if (v181)
      {
        qword_26AFA0448 = re::ecs2::introspect_PrimitiveBoxWithRoundedCornersSystem(0);
        __cxa_guard_release(&qword_26AFA0450);
        uint64_t v5 = v180;
      }
    }
    long long v14 = *((_OWORD *)v5 + 60);
    long long v15 = v14;
    if (qword_26AFA0448) {
      long long v15 = *(_OWORD *)(qword_26AFA0448 + 32);
    }
    xmmword_26879D440 = v15;
    *(_OWORD *)algn_26879D450 = v14;
    xmmword_26879D460 = v14;
    unk_26879D470 = v14;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0460, memory_order_acquire) & 1) == 0)
    {
      v182 = v5;
      int v183 = __cxa_guard_acquire(&qword_26AFA0460);
      uint64_t v5 = v182;
      if (v183)
      {
        qword_26AFA0458 = re::ecs2::introspect_PrimitiveCapsuleSystem(0);
        __cxa_guard_release(&qword_26AFA0460);
        uint64_t v5 = v182;
      }
    }
    long long v16 = *((_OWORD *)v5 + 60);
    long long v17 = v16;
    if (qword_26AFA0458) {
      long long v17 = *(_OWORD *)(qword_26AFA0458 + 32);
    }
    xmmword_26879C8C0 = v17;
    *(_OWORD *)algn_26879C8D0 = v16;
    xmmword_26879C8E0 = v16;
    unk_26879C8F0 = v16;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0470, memory_order_acquire) & 1) == 0)
    {
      v184 = v5;
      int v185 = __cxa_guard_acquire(&qword_26AFA0470);
      uint64_t v5 = v184;
      if (v185)
      {
        qword_26AFA0468 = re::ecs2::introspect_PrimitiveConeSystem(0);
        __cxa_guard_release(&qword_26AFA0470);
        uint64_t v5 = v184;
      }
    }
    long long v18 = *((_OWORD *)v5 + 60);
    long long v19 = v18;
    if (qword_26AFA0468) {
      long long v19 = *(_OWORD *)(qword_26AFA0468 + 32);
    }
    xmmword_26879C900 = v19;
    *(_OWORD *)algn_26879C910 = v18;
    xmmword_26879C920 = v18;
    unk_26879C930 = v18;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0480, memory_order_acquire) & 1) == 0)
    {
      v186 = v5;
      int v187 = __cxa_guard_acquire(&qword_26AFA0480);
      uint64_t v5 = v186;
      if (v187)
      {
        qword_26AFA0478 = re::ecs2::introspect_PrimitiveCylinderSystem(0);
        __cxa_guard_release(&qword_26AFA0480);
        uint64_t v5 = v186;
      }
    }
    long long v20 = *((_OWORD *)v5 + 60);
    long long v21 = v20;
    if (qword_26AFA0478) {
      long long v21 = *(_OWORD *)(qword_26AFA0478 + 32);
    }
    xmmword_26879C940 = v21;
    *(_OWORD *)algn_26879C950 = v20;
    xmmword_26879C960 = v20;
    unk_26879C970 = v20;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0490, memory_order_acquire) & 1) == 0)
    {
      v188 = v5;
      int v189 = __cxa_guard_acquire(&qword_26AFA0490);
      uint64_t v5 = v188;
      if (v189)
      {
        qword_26AFA0488 = re::ecs2::introspect_PrimitivePlaneSystem(0);
        __cxa_guard_release(&qword_26AFA0490);
        uint64_t v5 = v188;
      }
    }
    long long v22 = *((_OWORD *)v5 + 60);
    long long v23 = v22;
    if (qword_26AFA0488) {
      long long v23 = *(_OWORD *)(qword_26AFA0488 + 32);
    }
    xmmword_26879C980 = v23;
    *(_OWORD *)algn_26879C990 = v22;
    xmmword_26879C9A0 = v22;
    unk_26879C9B0 = v22;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04A0, memory_order_acquire) & 1) == 0)
    {
      v190 = v5;
      int v191 = __cxa_guard_acquire(&qword_26AFA04A0);
      uint64_t v5 = v190;
      if (v191)
      {
        qword_26AFA0498 = re::ecs2::introspect_PrimitivePyramidSystem(0);
        __cxa_guard_release(&qword_26AFA04A0);
        uint64_t v5 = v190;
      }
    }
    long long v24 = *((_OWORD *)v5 + 60);
    long long v25 = v24;
    if (qword_26AFA0498) {
      long long v25 = *(_OWORD *)(qword_26AFA0498 + 32);
    }
    xmmword_26879C9C0 = v25;
    *(_OWORD *)algn_26879C9D0 = v24;
    xmmword_26879C9E0 = v24;
    unk_26879C9F0 = v24;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04B0, memory_order_acquire) & 1) == 0)
    {
      v192 = v5;
      int v193 = __cxa_guard_acquire(&qword_26AFA04B0);
      uint64_t v5 = v192;
      if (v193)
      {
        qword_26AFA04A8 = re::ecs2::introspect_PrimitiveSphereSystem(0);
        __cxa_guard_release(&qword_26AFA04B0);
        uint64_t v5 = v192;
      }
    }
    long long v26 = *((_OWORD *)v5 + 60);
    long long v27 = v26;
    if (qword_26AFA04A8) {
      long long v27 = *(_OWORD *)(qword_26AFA04A8 + 32);
    }
    xmmword_26879CA00 = v27;
    *(_OWORD *)algn_26879CA10 = v26;
    xmmword_26879CA20 = v26;
    unk_26879CA30 = v26;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04C0, memory_order_acquire) & 1) == 0)
    {
      v194 = v5;
      int v195 = __cxa_guard_acquire(&qword_26AFA04C0);
      uint64_t v5 = v194;
      if (v195)
      {
        qword_26AFA04B8 = re::ecs2::introspect_PrimitiveTetrahedronSystem(0);
        __cxa_guard_release(&qword_26AFA04C0);
        uint64_t v5 = v194;
      }
    }
    long long v28 = *((_OWORD *)v5 + 60);
    long long v29 = v28;
    if (qword_26AFA04B8) {
      long long v29 = *(_OWORD *)(qword_26AFA04B8 + 32);
    }
    xmmword_26879CA40 = v29;
    *(_OWORD *)algn_26879CA50 = v28;
    xmmword_26879CA60 = v28;
    unk_26879CA70 = v28;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04D0, memory_order_acquire) & 1) == 0)
    {
      v196 = v5;
      int v197 = __cxa_guard_acquire(&qword_26AFA04D0);
      uint64_t v5 = v196;
      if (v197)
      {
        qword_26AFA04C8 = re::ecs2::introspect_PrimitiveTubeSystem(0);
        __cxa_guard_release(&qword_26AFA04D0);
        uint64_t v5 = v196;
      }
    }
    long long v30 = *((_OWORD *)v5 + 60);
    long long v31 = v30;
    if (qword_26AFA04C8) {
      long long v31 = *(_OWORD *)(qword_26AFA04C8 + 32);
    }
    xmmword_26879CA80 = v31;
    *(_OWORD *)algn_26879CA90 = v30;
    xmmword_26879CAA0 = v30;
    unk_26879CAB0 = v30;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04E0, memory_order_acquire) & 1) == 0)
    {
      v198 = v5;
      int v199 = __cxa_guard_acquire(&qword_26AFA04E0);
      uint64_t v5 = v198;
      if (v199)
      {
        qword_26AFA04D8 = re::ecs2::introspect_RayCastSystem(0);
        __cxa_guard_release(&qword_26AFA04E0);
        uint64_t v5 = v198;
      }
    }
    long long v32 = *((_OWORD *)v5 + 60);
    long long v33 = v32;
    if (qword_26AFA04D8) {
      long long v33 = *(_OWORD *)(qword_26AFA04D8 + 32);
    }
    xmmword_26879CB40 = v33;
    *(_OWORD *)algn_26879CB50 = v32;
    xmmword_26879CB60 = v32;
    unk_26879CB70 = v32;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA04F0, memory_order_acquire) & 1) == 0)
    {
      v200 = v5;
      int v201 = __cxa_guard_acquire(&qword_26AFA04F0);
      uint64_t v5 = v200;
      if (v201)
      {
        qword_26AFA04E8 = re::ecs2::introspect_MaterialOverrideSystem(0);
        __cxa_guard_release(&qword_26AFA04F0);
        uint64_t v5 = v200;
      }
    }
    long long v34 = *((_OWORD *)v5 + 60);
    long long v35 = v34;
    if (qword_26AFA04E8) {
      long long v35 = *(_OWORD *)(qword_26AFA04E8 + 32);
    }
    xmmword_26879CBC0 = v35;
    *(_OWORD *)algn_26879CBD0 = v34;
    xmmword_26879CBE0 = v34;
    unk_26879CBF0 = v34;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v202)
      {
        re::introspect<re::ecs2::AnchorSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v36 = *((_OWORD *)v5 + 60);
    long long v37 = v36;
    if (re::introspect<re::ecs2::AnchorSystem>(void)::info) {
      long long v37 = *((_OWORD *)re::introspect<re::ecs2::AnchorSystem>(void)::info + 2);
    }
    xmmword_26879D280 = v37;
    *(_OWORD *)algn_26879D290 = v36;
    xmmword_26879D2A0 = v36;
    unk_26879D2B0 = v36;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v203)
      {
        re::introspect<re::ecs2::MeshSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_MeshSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v38 = *((_OWORD *)v5 + 60);
    long long v39 = v38;
    if (re::introspect<re::ecs2::MeshSystem>(void)::info) {
      long long v39 = *((_OWORD *)re::introspect<re::ecs2::MeshSystem>(void)::info + 2);
    }
    xmmword_26879CC00 = v39;
    *(_OWORD *)algn_26879CC10 = v38;
    xmmword_26879CC20 = v38;
    unk_26879CC30 = v38;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0500, memory_order_acquire) & 1) == 0)
    {
      v204 = v5;
      int v205 = __cxa_guard_acquire(&qword_26AFA0500);
      uint64_t v5 = v204;
      if (v205)
      {
        qword_26AFA04F8 = re::ecs2::introspect_MeshSceneSystem(0);
        __cxa_guard_release(&qword_26AFA0500);
        uint64_t v5 = v204;
      }
    }
    long long v40 = *((_OWORD *)v5 + 60);
    long long v41 = v40;
    if (qword_26AFA04F8) {
      long long v41 = *(_OWORD *)(qword_26AFA04F8 + 32);
    }
    xmmword_26879D900 = v41;
    *(_OWORD *)algn_26879D910 = v40;
    xmmword_26879D920 = v40;
    unk_26879D930 = v40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0510, memory_order_acquire) & 1) == 0)
    {
      v206 = v5;
      int v207 = __cxa_guard_acquire(&qword_26AFA0510);
      uint64_t v5 = v206;
      if (v207)
      {
        qword_26AFA0508 = re::ecs2::introspect_MeshDeformationSystem(0);
        __cxa_guard_release(&qword_26AFA0510);
        uint64_t v5 = v206;
      }
    }
    long long v42 = *((_OWORD *)v5 + 60);
    long long v43 = v42;
    if (qword_26AFA0508) {
      long long v43 = *(_OWORD *)(qword_26AFA0508 + 32);
    }
    xmmword_26879CC40 = v43;
    *(_OWORD *)algn_26879CC50 = v42;
    xmmword_26879CC60 = v42;
    unk_26879CC70 = v42;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0520, memory_order_acquire) & 1) == 0)
    {
      v208 = v5;
      int v209 = __cxa_guard_acquire(&qword_26AFA0520);
      uint64_t v5 = v208;
      if (v209)
      {
        qword_26AFA0518 = re::ecs2::introspect_IKParametersSystem(0);
        __cxa_guard_release(&qword_26AFA0520);
        uint64_t v5 = v208;
      }
    }
    uint64_t v44 = qword_26AFA0518;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0530, memory_order_acquire) & 1) == 0)
    {
      int v210 = __cxa_guard_acquire(&qword_26AFA0530);
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v210)
      {
        qword_26AFA0528 = re::ecs2::introspect_RigSystem(0);
        __cxa_guard_release(&qword_26AFA0530);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v45 = *((_OWORD *)v5 + 60);
    long long v46 = v45;
    if (v44) {
      long long v46 = *(_OWORD *)(v44 + 32);
    }
    xmmword_26879CC80 = v46;
    long long v47 = v45;
    if (qword_26AFA0528) {
      long long v47 = *(_OWORD *)(qword_26AFA0528 + 32);
    }
    xmmword_26879CC90 = v47;
    unk_26879CCA0 = v45;
    xmmword_26879CCB0 = v45;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0540, memory_order_acquire) & 1) == 0)
    {
      v211 = v5;
      int v212 = __cxa_guard_acquire(&qword_26AFA0540);
      uint64_t v5 = v211;
      if (v212)
      {
        qword_26AFA0538 = re::ecs2::introspect_BlendShapeWeightsSystem(0);
        __cxa_guard_release(&qword_26AFA0540);
        uint64_t v5 = v211;
      }
    }
    long long v48 = *((_OWORD *)v5 + 60);
    long long v49 = v48;
    if (qword_26AFA0538) {
      long long v49 = *(_OWORD *)(qword_26AFA0538 + 32);
    }
    xmmword_26879CCC0 = v49;
    *(_OWORD *)algn_26879CCD0 = v48;
    xmmword_26879CCE0 = v48;
    unk_26879CCF0 = v48;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0550, memory_order_acquire) & 1) == 0)
    {
      v213 = v5;
      int v214 = __cxa_guard_acquire(&qword_26AFA0550);
      uint64_t v5 = v213;
      if (v214)
      {
        qword_26AFA0548 = re::ecs2::introspect_SkeletalDebugSystem(0);
        __cxa_guard_release(&qword_26AFA0550);
        uint64_t v5 = v213;
      }
    }
    long long v50 = *((_OWORD *)v5 + 60);
    long long v51 = v50;
    if (qword_26AFA0548) {
      long long v51 = *(_OWORD *)(qword_26AFA0548 + 32);
    }
    xmmword_26879CD00 = v51;
    *(_OWORD *)algn_26879CD10 = v50;
    xmmword_26879CD20 = v50;
    unk_26879CD30 = v50;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0560, memory_order_acquire) & 1) == 0)
    {
      v215 = v5;
      int v216 = __cxa_guard_acquire(&qword_26AFA0560);
      uint64_t v5 = v215;
      if (v216)
      {
        qword_26AFA0558 = re::ecs2::introspect_SkeletalPosePreparationSystem(0);
        __cxa_guard_release(&qword_26AFA0560);
        uint64_t v5 = v215;
      }
    }
    long long v52 = *((_OWORD *)v5 + 60);
    long long v53 = v52;
    if (qword_26AFA0558) {
      long long v53 = *(_OWORD *)(qword_26AFA0558 + 32);
    }
    xmmword_26879DC80 = v53;
    *(_OWORD *)algn_26879DC90 = v52;
    xmmword_26879DCA0 = v52;
    unk_26879DCB0 = v52;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v217)
      {
        re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SkeletalPoseSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v54 = *((_OWORD *)v5 + 60);
    long long v55 = v54;
    if (re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info) {
      long long v55 = *((_OWORD *)re::introspect<re::ecs2::SkeletalPoseSystem>(void)::info + 2);
    }
    xmmword_26879CD40 = v55;
    *(_OWORD *)algn_26879CD50 = v54;
    xmmword_26879CD60 = v54;
    unk_26879CD70 = v54;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v218)
      {
        re::introspect<re::ecs2::LightSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_LightSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v56 = *((_OWORD *)v5 + 60);
    long long v57 = v56;
    if (re::introspect<re::ecs2::LightSystem>(void)::info) {
      long long v57 = *((_OWORD *)re::introspect<re::ecs2::LightSystem>(void)::info + 2);
    }
    xmmword_26879CD80 = v57;
    *(_OWORD *)algn_26879CD90 = v56;
    xmmword_26879CDA0 = v56;
    unk_26879CDB0 = v56;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v219)
      {
        re::introspect<re::ecs2::VFXSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VFXSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v58 = *((_OWORD *)v5 + 60);
    long long v59 = v58;
    if (re::introspect<re::ecs2::VFXSystem>(void)::info) {
      long long v59 = *((_OWORD *)re::introspect<re::ecs2::VFXSystem>(void)::info + 2);
    }
    xmmword_26879D640 = v59;
    *(_OWORD *)algn_26879D650 = v58;
    xmmword_26879D660 = v58;
    unk_26879D670 = v58;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v220)
      {
        re::introspect<re::ecs2::ImageBasedLightSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ImageBasedLightSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v60 = *((_OWORD *)v5 + 60);
    long long v61 = v60;
    if (re::introspect<re::ecs2::ImageBasedLightSystem>(void)::info) {
      long long v61 = *((_OWORD *)re::introspect<re::ecs2::ImageBasedLightSystem>(void)::info + 2);
    }
    xmmword_26879CDC0 = v61;
    *(_OWORD *)algn_26879CDD0 = v60;
    xmmword_26879CDE0 = v60;
    unk_26879CDF0 = v60;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v221)
      {
        re::introspect<re::ecs2::ImageBasedReflectionSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ImageBasedReflectionSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v62 = *((_OWORD *)v5 + 60);
    long long v63 = v62;
    if (re::introspect<re::ecs2::ImageBasedReflectionSystem>(void)::info) {
      long long v63 = *((_OWORD *)re::introspect<re::ecs2::ImageBasedReflectionSystem>(void)::info + 2);
    }
    xmmword_26879DB40 = v63;
    *(_OWORD *)algn_26879DB50 = v62;
    xmmword_26879DB60 = v62;
    unk_26879DB70 = v62;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v222)
      {
        re::introspect<re::ecs2::VirtualEnvironmentProbeSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VirtualEnvironmentProbeSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v64 = *((_OWORD *)v5 + 60);
    long long v65 = v64;
    if (re::introspect<re::ecs2::VirtualEnvironmentProbeSystem>(void)::info) {
      long long v65 = *((_OWORD *)re::introspect<re::ecs2::VirtualEnvironmentProbeSystem>(void)::info + 2);
    }
    xmmword_26879DE40 = v65;
    *(_OWORD *)algn_26879DE50 = v64;
    xmmword_26879DE60 = v64;
    unk_26879DE70 = v64;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v223)
      {
        re::introspect<re::ecs2::CameraViewDescriptorsSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_CameraViewDescriptorsSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v66 = *((_OWORD *)v5 + 60);
    long long v67 = v66;
    if (re::introspect<re::ecs2::CameraViewDescriptorsSystem>(void)::info) {
      long long v67 = *((_OWORD *)re::introspect<re::ecs2::CameraViewDescriptorsSystem>(void)::info + 2);
    }
    xmmword_26879D140 = v67;
    *(_OWORD *)algn_26879D150 = v66;
    xmmword_26879D160 = v66;
    unk_26879D170 = v66;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v224)
      {
        re::introspect<re::ecs2::DynamicTextSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_DynamicTextSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v68 = *((_OWORD *)v5 + 60);
    long long v69 = v68;
    if (re::introspect<re::ecs2::DynamicTextSystem>(void)::info) {
      long long v69 = *((_OWORD *)re::introspect<re::ecs2::DynamicTextSystem>(void)::info + 2);
    }
    xmmword_26879CE40 = v69;
    *(_OWORD *)algn_26879CE50 = v68;
    xmmword_26879CE60 = v68;
    unk_26879CE70 = v68;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v225)
      {
        re::introspect<re::ecs2::StaticTextSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_StaticTextSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v70 = *((_OWORD *)v5 + 60);
    long long v71 = v70;
    if (re::introspect<re::ecs2::StaticTextSystem>(void)::info) {
      long long v71 = *((_OWORD *)re::introspect<re::ecs2::StaticTextSystem>(void)::info + 2);
    }
    xmmword_26879CE80 = v71;
    *(_OWORD *)algn_26879CE90 = v70;
    xmmword_26879CEA0 = v70;
    unk_26879CEB0 = v70;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v226)
      {
        re::introspect<re::ecs2::NetworkSendSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkSendSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v72 = *((_OWORD *)v5 + 60);
    long long v73 = v72;
    if (re::introspect<re::ecs2::NetworkSendSystem>(void)::info) {
      long long v73 = *((_OWORD *)re::introspect<re::ecs2::NetworkSendSystem>(void)::info + 2);
    }
    xmmword_26879CEC0 = v73;
    *(_OWORD *)algn_26879CED0 = v72;
    xmmword_26879CEE0 = v72;
    unk_26879CEF0 = v72;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v227)
      {
        re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnimationUpdateSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    uint64_t v74 = re::introspect<re::ecs2::AnimationUpdateSystem>(void)::info;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0570, memory_order_acquire) & 1) == 0)
    {
      int v228 = __cxa_guard_acquire(&qword_26AFA0570);
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v228)
      {
        qword_26AFA0568 = re::ecs2::introspect_AnimationSystem(0);
        __cxa_guard_release(&qword_26AFA0570);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v75 = *((_OWORD *)v5 + 60);
    long long v76 = v75;
    if (v74) {
      long long v76 = v74[2];
    }
    xmmword_26879CF00 = v76;
    long long v77 = v75;
    if (qword_26AFA0568) {
      long long v77 = *(_OWORD *)(qword_26AFA0568 + 32);
    }
    xmmword_26879CF10 = v77;
    unk_26879CF20 = v75;
    xmmword_26879CF30 = v75;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0580, memory_order_acquire) & 1) == 0)
    {
      v229 = v5;
      int v230 = __cxa_guard_acquire(&qword_26AFA0580);
      uint64_t v5 = v229;
      if (v230)
      {
        qword_26AFA0578 = re::ecs2::introspect_VideoAudioControlSystem(0);
        __cxa_guard_release(&qword_26AFA0580);
        uint64_t v5 = v229;
      }
    }
    long long v78 = *((_OWORD *)v5 + 60);
    long long v79 = v78;
    if (qword_26AFA0578) {
      long long v79 = *(_OWORD *)(qword_26AFA0578 + 32);
    }
    xmmword_26879DCC0 = v79;
    *(_OWORD *)algn_26879DCD0 = v78;
    xmmword_26879DCE0 = v78;
    unk_26879DCF0 = v78;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0590, memory_order_acquire) & 1) == 0)
    {
      v231 = v5;
      int v232 = __cxa_guard_acquire(&qword_26AFA0590);
      uint64_t v5 = v231;
      if (v232)
      {
        qword_26AFA0588 = re::ecs2::introspect_AudioUpdateSystem(0);
        __cxa_guard_release(&qword_26AFA0590);
        uint64_t v5 = v231;
      }
    }
    uint64_t v80 = qword_26AFA0588;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05A0, memory_order_acquire) & 1) == 0)
    {
      int v233 = __cxa_guard_acquire(&qword_26AFA05A0);
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v233)
      {
        qword_26AFA0598 = re::ecs2::introspect_AudioPlayerSystem(0);
        __cxa_guard_release(&qword_26AFA05A0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v81 = *((_OWORD *)v5 + 60);
    long long v82 = v81;
    if (v80) {
      long long v82 = *(_OWORD *)(v80 + 32);
    }
    xmmword_26879CF80 = v82;
    long long v83 = v81;
    if (qword_26AFA0598) {
      long long v83 = *(_OWORD *)(qword_26AFA0598 + 32);
    }
    xmmword_26879CF90 = v83;
    unk_26879CFA0 = v81;
    xmmword_26879CFB0 = v81;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05B0, memory_order_acquire) & 1) == 0)
    {
      v234 = v5;
      int v235 = __cxa_guard_acquire(&qword_26AFA05B0);
      uint64_t v5 = v234;
      if (v235)
      {
        qword_26AFA05A8 = re::ecs2::introspect_AudioSessionSystem(0);
        __cxa_guard_release(&qword_26AFA05B0);
        uint64_t v5 = v234;
      }
    }
    long long v84 = *((_OWORD *)v5 + 60);
    long long v85 = v84;
    if (qword_26AFA05A8) {
      long long v85 = *(_OWORD *)(qword_26AFA05A8 + 32);
    }
    xmmword_26879D940 = v85;
    *(_OWORD *)algn_26879D950 = v84;
    xmmword_26879D960 = v84;
    unk_26879D970 = v84;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05C0, memory_order_acquire) & 1) == 0)
    {
      v236 = v5;
      int v237 = __cxa_guard_acquire(&qword_26AFA05C0);
      uint64_t v5 = v236;
      if (v237)
      {
        qword_26AFA05B8 = re::ecs2::introspect_AudioGeneratorSystem(0);
        __cxa_guard_release(&qword_26AFA05C0);
        uint64_t v5 = v236;
      }
    }
    long long v86 = *((_OWORD *)v5 + 60);
    long long v87 = v86;
    if (qword_26AFA05B8) {
      long long v87 = *(_OWORD *)(qword_26AFA05B8 + 32);
    }
    xmmword_26879CFC0 = v87;
    *(_OWORD *)algn_26879CFD0 = v86;
    xmmword_26879CFE0 = v86;
    unk_26879CFF0 = v86;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05D0, memory_order_acquire) & 1) == 0)
    {
      v238 = v5;
      int v239 = __cxa_guard_acquire(&qword_26AFA05D0);
      uint64_t v5 = v238;
      if (v239)
      {
        qword_26AFA05C8 = re::ecs2::introspect_AcousticMeshSystem(0);
        __cxa_guard_release(&qword_26AFA05D0);
        uint64_t v5 = v238;
      }
    }
    long long v88 = *((_OWORD *)v5 + 60);
    long long v89 = v88;
    if (qword_26AFA05C8) {
      long long v89 = *(_OWORD *)(qword_26AFA05C8 + 32);
    }
    xmmword_26879D000 = v89;
    *(_OWORD *)algn_26879D010 = v88;
    xmmword_26879D020 = v88;
    unk_26879D030 = v88;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05E0, memory_order_acquire) & 1) == 0)
    {
      v240 = v5;
      int v241 = __cxa_guard_acquire(&qword_26AFA05E0);
      uint64_t v5 = v240;
      if (v241)
      {
        qword_26AFA05D8 = re::ecs2::introspect_SpatialSceneClassificationSystem(0);
        __cxa_guard_release(&qword_26AFA05E0);
        uint64_t v5 = v240;
      }
    }
    long long v90 = *((_OWORD *)v5 + 60);
    long long v91 = v90;
    if (qword_26AFA05D8) {
      long long v91 = *(_OWORD *)(qword_26AFA05D8 + 32);
    }
    xmmword_26879DC40 = v91;
    *(_OWORD *)algn_26879DC50 = v90;
    xmmword_26879DC60 = v90;
    unk_26879DC70 = v90;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA05F0, memory_order_acquire) & 1) == 0)
    {
      v242 = v5;
      int v243 = __cxa_guard_acquire(&qword_26AFA05F0);
      uint64_t v5 = v242;
      if (v243)
      {
        qword_26AFA05E8 = re::ecs2::introspect_VoiceSystem(0);
        __cxa_guard_release(&qword_26AFA05F0);
        uint64_t v5 = v242;
      }
    }
    long long v92 = *((_OWORD *)v5 + 60);
    long long v93 = v92;
    if (qword_26AFA05E8) {
      long long v93 = *(_OWORD *)(qword_26AFA05E8 + 32);
    }
    xmmword_26879D040 = v93;
    *(_OWORD *)algn_26879D050 = v92;
    xmmword_26879D060 = v92;
    unk_26879D070 = v92;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0600, memory_order_acquire) & 1) == 0)
    {
      v244 = v5;
      int v245 = __cxa_guard_acquire(&qword_26AFA0600);
      uint64_t v5 = v244;
      if (v245)
      {
        qword_26AFA05F8 = re::ecs2::introspect_AudioMixerSystem(0);
        __cxa_guard_release(&qword_26AFA0600);
        uint64_t v5 = v244;
      }
    }
    long long v94 = *((_OWORD *)v5 + 60);
    long long v95 = v94;
    if (qword_26AFA05F8) {
      long long v95 = *(_OWORD *)(qword_26AFA05F8 + 32);
    }
    xmmword_26879D100 = v95;
    *(_OWORD *)algn_26879D110 = v94;
    xmmword_26879D120 = v94;
    unk_26879D130 = v94;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0610, memory_order_acquire) & 1) == 0)
    {
      v246 = v5;
      int v247 = __cxa_guard_acquire(&qword_26AFA0610);
      uint64_t v5 = v246;
      if (v247)
      {
        qword_26AFA0608 = re::ecs2::introspect_ReverbSystem(0);
        __cxa_guard_release(&qword_26AFA0610);
        uint64_t v5 = v246;
      }
    }
    long long v96 = *((_OWORD *)v5 + 60);
    long long v97 = v96;
    if (qword_26AFA0608) {
      long long v97 = *(_OWORD *)(qword_26AFA0608 + 32);
    }
    xmmword_26879DE00 = v97;
    *(_OWORD *)algn_26879DE10 = v96;
    xmmword_26879DE20 = v96;
    unk_26879DE30 = v96;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0620, memory_order_acquire) & 1) == 0)
    {
      v248 = v5;
      int v249 = __cxa_guard_acquire(&qword_26AFA0620);
      uint64_t v5 = v248;
      if (v249)
      {
        qword_26AFA0618 = re::ecs2::introspect_ListenerSystem(0);
        __cxa_guard_release(&qword_26AFA0620);
        uint64_t v5 = v248;
      }
    }
    long long v98 = *((_OWORD *)v5 + 60);
    long long v99 = v98;
    if (qword_26AFA0618) {
      long long v99 = *(_OWORD *)(qword_26AFA0618 + 32);
    }
    xmmword_26879D080 = v99;
    *(_OWORD *)algn_26879D090 = v98;
    xmmword_26879D0A0 = v98;
    unk_26879D0B0 = v98;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0630, memory_order_acquire) & 1) == 0)
    {
      v250 = v5;
      int v251 = __cxa_guard_acquire(&qword_26AFA0630);
      uint64_t v5 = v250;
      if (v251)
      {
        qword_26AFA0628 = re::ecs2::introspect_Static3DTextSystem(0);
        __cxa_guard_release(&qword_26AFA0630);
        uint64_t v5 = v250;
      }
    }
    long long v100 = *((_OWORD *)v5 + 60);
    long long v101 = v100;
    if (qword_26AFA0628) {
      long long v101 = *(_OWORD *)(qword_26AFA0628 + 32);
    }
    xmmword_26879D180 = v101;
    *(_OWORD *)algn_26879D190 = v100;
    xmmword_26879D1A0 = v100;
    unk_26879D1B0 = v100;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v252)
      {
        re::introspect<re::ecs2::PhysicsSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_PhysicsSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v102 = *((_OWORD *)v5 + 60);
    long long v103 = v102;
    if (re::introspect<re::ecs2::PhysicsSystem>(void)::info) {
      long long v103 = *((_OWORD *)re::introspect<re::ecs2::PhysicsSystem>(void)::info + 2);
    }
    xmmword_26879D1C0 = v103;
    *(_OWORD *)algn_26879D1D0 = v102;
    xmmword_26879D1E0 = v102;
    unk_26879D1F0 = v102;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0640, memory_order_acquire) & 1) == 0)
    {
      v253 = v5;
      int v254 = __cxa_guard_acquire(&qword_26AFA0640);
      uint64_t v5 = v253;
      if (v254)
      {
        qword_26AFA0638 = re::ecs2::introspect_MaterialParameterBlockArraySystem(0);
        __cxa_guard_release(&qword_26AFA0640);
        uint64_t v5 = v253;
      }
    }
    long long v104 = *((_OWORD *)v5 + 60);
    long long v105 = v104;
    if (qword_26AFA0638) {
      long long v105 = *(_OWORD *)(qword_26AFA0638 + 32);
    }
    xmmword_26879D200 = v105;
    *(_OWORD *)algn_26879D210 = v104;
    xmmword_26879D220 = v104;
    unk_26879D230 = v104;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0650, memory_order_acquire) & 1) == 0)
    {
      v255 = v5;
      int v256 = __cxa_guard_acquire(&qword_26AFA0650);
      uint64_t v5 = v255;
      if (v256)
      {
        qword_26AFA0648 = re::ecs2::introspect_MaterialParametersSystem(0);
        __cxa_guard_release(&qword_26AFA0650);
        uint64_t v5 = v255;
      }
    }
    long long v106 = &_MergedGlobals_520;
    long long v107 = *((_OWORD *)v5 + 60);
    long long v108 = v107;
    if (qword_26AFA0648) {
      long long v108 = *(_OWORD *)(qword_26AFA0648 + 32);
    }
    xmmword_26879DD40 = v108;
    *(_OWORD *)algn_26879DD50 = v107;
    xmmword_26879DD60 = v107;
    unk_26879DD70 = v107;
    uint64_t v109 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      uint64_t v109 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v257)
      {
        re::introspect<re::ecs2::ProjectiveShadowReceiverSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ProjectiveShadowReceiverSystem(0);
        uint64_t v109 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    uint64_t v110 = v109[170];
    uint64_t v111 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      v301 = v110;
      uint64_t v111 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      uint64_t v110 = v301;
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v258)
      {
        re::introspect<re::ecs2::ShadowClusterSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ShadowClusterSystem(0);
        uint64_t v111 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        uint64_t v110 = v301;
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v112 = v111[168];
    long long v113 = *((_OWORD *)v5 + 60);
    long long v114 = v113;
    if (v110) {
      long long v114 = *((_OWORD *)v110 + 2);
    }
    xmmword_26879D240 = v114;
    long long v115 = v113;
    if (v112) {
      long long v115 = *((_OWORD *)v112 + 2);
    }
    xmmword_26879D250 = v115;
    unk_26879D260 = v113;
    xmmword_26879D270 = v113;
    int v116 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      int v116 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v259)
      {
        re::introspect<re::ecs2::RayTracedShadowReceiverSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_RayTracedShadowReceiverSystem(0);
        int v116 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    unint64_t v117 = v116[194];
    long long v118 = *((_OWORD *)v5 + 60);
    long long v119 = v118;
    if (v117) {
      long long v119 = *((_OWORD *)v117 + 2);
    }
    xmmword_26879D2C0 = v119;
    *(_OWORD *)algn_26879D2D0 = v118;
    xmmword_26879D2E0 = v118;
    unk_26879D2F0 = v118;
    unint64_t v120 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    {
      unint64_t v120 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v260)
      {
        re::introspect<re::ecs2::StateRecorderSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_StateRecorderSystem(0);
        unint64_t v120 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    uint64_t v121 = v120[190];
    long long v122 = *((_OWORD *)v5 + 60);
    long long v123 = v122;
    if (v121) {
      long long v123 = *(_OWORD *)(v121 + 32);
    }
    xmmword_26879D300 = v123;
    *(_OWORD *)algn_26879D310 = v122;
    xmmword_26879D320 = v122;
    unk_26879D330 = v122;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0660, memory_order_acquire) & 1) == 0)
    {
      int v261 = __cxa_guard_acquire(&qword_26AFA0660);
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v261)
      {
        qword_26AFA0658 = re::ecs2::introspect_NetworkTransferReporterSystem(0);
        __cxa_guard_release(&qword_26AFA0660);
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v124 = *((_OWORD *)v5 + 60);
    long long v125 = v124;
    if (qword_26AFA0658) {
      long long v125 = *(_OWORD *)(qword_26AFA0658 + 32);
    }
    xmmword_26879D780 = v125;
    *(_OWORD *)algn_26879D790 = v124;
    xmmword_26879D7A0 = v124;
    unk_26879D7B0 = v124;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0670, memory_order_acquire) & 1) == 0)
    {
      int v262 = __cxa_guard_acquire(&qword_26AFA0670);
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v262)
      {
        qword_26AFA0668 = re::ecs2::introspect_MeshSmoothSystem(0);
        __cxa_guard_release(&qword_26AFA0670);
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v126 = *((_OWORD *)v5 + 60);
    long long v127 = v126;
    if (qword_26AFA0668) {
      long long v127 = *(_OWORD *)(qword_26AFA0668 + 32);
    }
    xmmword_26879D380 = v127;
    *(_OWORD *)algn_26879D390 = v126;
    xmmword_26879D3A0 = v126;
    unk_26879D3B0 = v126;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0680, memory_order_acquire) & 1) == 0)
    {
      int v263 = __cxa_guard_acquire(&qword_26AFA0680);
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v263)
      {
        qword_26AFA0678 = re::ecs2::introspect_MeshOffsetsSystem(0);
        __cxa_guard_release(&qword_26AFA0680);
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v128 = *((_OWORD *)v5 + 60);
    long long v129 = v128;
    if (qword_26AFA0678) {
      long long v129 = *(_OWORD *)(qword_26AFA0678 + 32);
    }
    xmmword_26879D340 = v129;
    *(_OWORD *)algn_26879D350 = v128;
    xmmword_26879D360 = v128;
    unk_26879D370 = v128;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0650, memory_order_acquire) & 1) == 0)
    {
      int v264 = __cxa_guard_acquire(&qword_26AFA0650);
      long long v106 = &_MergedGlobals_520;
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v264)
      {
        qword_26AFA0648 = re::ecs2::introspect_MaterialParametersSystem(0);
        __cxa_guard_release(&qword_26AFA0650);
        long long v106 = &_MergedGlobals_520;
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    __guard v130 = v106[201];
    long long v131 = *((_OWORD *)v5 + 60);
    long long v132 = v131;
    if (v130) {
      long long v132 = *(_OWORD *)(v130 + 32);
    }
    xmmword_26879DD40 = v132;
    *(_OWORD *)algn_26879DD50 = v131;
    xmmword_26879DD60 = v131;
    unk_26879DD70 = v131;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0690, memory_order_acquire) & 1) == 0)
    {
      v265 = v5;
      int v266 = __cxa_guard_acquire(&qword_26AFA0690);
      uint64_t v5 = v265;
      if (v266)
      {
        qword_26AFA0688 = re::ecs2::introspect_VideoComponentSystem(0);
        __cxa_guard_release(&qword_26AFA0690);
        uint64_t v5 = v265;
      }
    }
    long long v133 = *((_OWORD *)v5 + 60);
    long long v134 = v133;
    if (qword_26AFA0688) {
      long long v134 = *(_OWORD *)(qword_26AFA0688 + 32);
    }
    xmmword_26879D480 = v134;
    *(_OWORD *)algn_26879D490 = v133;
    xmmword_26879D4A0 = v133;
    unk_26879D4B0 = v133;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06A0, memory_order_acquire) & 1) == 0)
    {
      v267 = v5;
      int v268 = __cxa_guard_acquire(&qword_26AFA06A0);
      uint64_t v5 = v267;
      if (v268)
      {
        qword_26AFA0698 = re::ecs2::introspect_TextSystem(0);
        __cxa_guard_release(&qword_26AFA06A0);
        uint64_t v5 = v267;
      }
    }
    long long v135 = *((_OWORD *)v5 + 60);
    long long v136 = v135;
    if (qword_26AFA0698) {
      long long v136 = *(_OWORD *)(qword_26AFA0698 + 32);
    }
    xmmword_26879DD00 = v136;
    *(_OWORD *)algn_26879DD10 = v135;
    xmmword_26879DD20 = v135;
    unk_26879DD30 = v135;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06B0, memory_order_acquire) & 1) == 0)
    {
      v269 = v5;
      int v270 = __cxa_guard_acquire(&qword_26AFA06B0);
      uint64_t v5 = v269;
      if (v270)
      {
        qword_26AFA06A8 = re::ecs2::introspect_RemoteEffectsSystem(0);
        __cxa_guard_release(&qword_26AFA06B0);
        uint64_t v5 = v269;
      }
    }
    long long v137 = *((_OWORD *)v5 + 60);
    long long v138 = v137;
    if (qword_26AFA06A8) {
      long long v138 = *(_OWORD *)(qword_26AFA06A8 + 32);
    }
    xmmword_26879DE80 = v138;
    *(_OWORD *)algn_26879DE90 = v137;
    xmmword_26879DEA0 = v137;
    unk_26879DEB0 = v137;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06C0, memory_order_acquire) & 1) == 0)
    {
      v271 = v5;
      int v272 = __cxa_guard_acquire(&qword_26AFA06C0);
      uint64_t v5 = v271;
      if (v272)
      {
        qword_26AFA06B8 = re::ecs2::introspect_GroundPlaneSystem(0);
        __cxa_guard_release(&qword_26AFA06C0);
        uint64_t v5 = v271;
      }
    }
    long long v139 = *((_OWORD *)v5 + 60);
    long long v140 = v139;
    if (qword_26AFA06B8) {
      long long v140 = *(_OWORD *)(qword_26AFA06B8 + 32);
    }
    xmmword_26879D500 = v140;
    *(_OWORD *)algn_26879D510 = v139;
    xmmword_26879D520 = v139;
    unk_26879D530 = v139;
    xmmword_26879D5C0 = v139;
    unk_26879D5D0 = v139;
    xmmword_26879D5E0 = v139;
    unk_26879D5F0 = v139;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06D0, memory_order_acquire) & 1) == 0)
    {
      v273 = v5;
      int v274 = __cxa_guard_acquire(&qword_26AFA06D0);
      uint64_t v5 = v273;
      if (v274)
      {
        qword_26AFA06C8 = re::ecs2::introspect_TimebaseSystem(0);
        __cxa_guard_release(&qword_26AFA06D0);
        uint64_t v5 = v273;
      }
    }
    long long v141 = *((_OWORD *)v5 + 60);
    long long v142 = v141;
    if (qword_26AFA06C8) {
      long long v142 = *(_OWORD *)(qword_26AFA06C8 + 32);
    }
    xmmword_26879D6C0 = v142;
    *(_OWORD *)algn_26879D6D0 = v141;
    xmmword_26879D6E0 = v141;
    unk_26879D6F0 = v141;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06E0, memory_order_acquire) & 1) == 0)
    {
      v275 = v5;
      int v276 = __cxa_guard_acquire(&qword_26AFA06E0);
      uint64_t v5 = v275;
      if (v276)
      {
        qword_26AFA06D8 = re::ecs2::introspect_NetworkAssetComponentSystem(0);
        __cxa_guard_release(&qword_26AFA06E0);
        uint64_t v5 = v275;
      }
    }
    long long v143 = *((_OWORD *)v5 + 60);
    long long v144 = v143;
    if (qword_26AFA06D8) {
      long long v144 = *(_OWORD *)(qword_26AFA06D8 + 32);
    }
    xmmword_26879D700 = v144;
    *(_OWORD *)algn_26879D710 = v143;
    xmmword_26879D720 = v143;
    unk_26879D730 = v143;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v277)
      {
        re::introspect<re::ecs2::AREnvironmentProbeSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AREnvironmentProbeSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v145 = *((_OWORD *)v5 + 60);
    long long v146 = v145;
    if (re::introspect<re::ecs2::AREnvironmentProbeSystem>(void)::info) {
      long long v146 = *((_OWORD *)re::introspect<re::ecs2::AREnvironmentProbeSystem>(void)::info + 2);
    }
    xmmword_26879D7C0 = v146;
    *(_OWORD *)algn_26879D7D0 = v145;
    xmmword_26879D7E0 = v145;
    unk_26879D7F0 = v145;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA06F0, memory_order_acquire) & 1) == 0)
    {
      v278 = v5;
      int v279 = __cxa_guard_acquire(&qword_26AFA06F0);
      uint64_t v5 = v278;
      if (v279)
      {
        qword_26AFA06E8 = re::ecs2::introspect_DeferredActivationSystem(0);
        __cxa_guard_release(&qword_26AFA06F0);
        uint64_t v5 = v278;
      }
    }
    long long v147 = *((_OWORD *)v5 + 60);
    long long v148 = v147;
    if (qword_26AFA06E8) {
      long long v148 = *(_OWORD *)(qword_26AFA06E8 + 32);
    }
    xmmword_26879D800 = v148;
    *(_OWORD *)algn_26879D810 = v147;
    xmmword_26879D820 = v147;
    unk_26879D830 = v147;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0700, memory_order_acquire) & 1) == 0)
    {
      v280 = v5;
      int v281 = __cxa_guard_acquire(&qword_26AFA0700);
      uint64_t v5 = v280;
      if (v281)
      {
        qword_26AFA06F8 = re::ecs2::introspect_StateMachineSystem(0);
        __cxa_guard_release(&qword_26AFA0700);
        uint64_t v5 = v280;
      }
    }
    long long v149 = *((_OWORD *)v5 + 60);
    long long v150 = v149;
    if (qword_26AFA06F8) {
      long long v150 = *(_OWORD *)(qword_26AFA06F8 + 32);
    }
    xmmword_26879D840 = v150;
    *(_OWORD *)algn_26879D850 = v149;
    xmmword_26879D860 = v149;
    unk_26879D870 = v149;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0710, memory_order_acquire) & 1) == 0)
    {
      v282 = v5;
      int v283 = __cxa_guard_acquire(&qword_26AFA0710);
      uint64_t v5 = v282;
      if (v283)
      {
        qword_26AFA0708 = re::ecs2::introspect_PhysicsDebugSystem(0);
        __cxa_guard_release(&qword_26AFA0710);
        uint64_t v5 = v282;
      }
    }
    long long v151 = *((_OWORD *)v5 + 60);
    long long v152 = v151;
    if (qword_26AFA0708) {
      long long v152 = *(_OWORD *)(qword_26AFA0708 + 32);
    }
    xmmword_26879D880 = v152;
    *(_OWORD *)algn_26879D890 = v151;
    xmmword_26879D8A0 = v151;
    unk_26879D8B0 = v151;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0720, memory_order_acquire) & 1) == 0)
    {
      v284 = v5;
      int v285 = __cxa_guard_acquire(&qword_26AFA0720);
      uint64_t v5 = v284;
      if (v285)
      {
        qword_26AFA0718 = re::ecs2::introspect_SceneSystem(0);
        __cxa_guard_release(&qword_26AFA0720);
        uint64_t v5 = v284;
      }
    }
    long long v153 = *((_OWORD *)v5 + 60);
    long long v154 = v153;
    if (qword_26AFA0718) {
      long long v154 = *(_OWORD *)(qword_26AFA0718 + 32);
    }
    xmmword_26879D8C0 = v154;
    *(_OWORD *)algn_26879D8D0 = v153;
    xmmword_26879D8E0 = v153;
    unk_26879D8F0 = v153;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0730, memory_order_acquire) & 1) == 0)
    {
      v286 = v5;
      int v287 = __cxa_guard_acquire(&qword_26AFA0730);
      uint64_t v5 = v286;
      if (v287)
      {
        qword_26AFA0728 = re::ecs2::introspect_AudioDebugSystem(0);
        __cxa_guard_release(&qword_26AFA0730);
        uint64_t v5 = v286;
      }
    }
    long long v155 = *((_OWORD *)v5 + 60);
    long long v156 = v155;
    if (qword_26AFA0728) {
      long long v156 = *(_OWORD *)(qword_26AFA0728 + 32);
    }
    xmmword_26879D980 = v156;
    *(_OWORD *)algn_26879D990 = v155;
    xmmword_26879D9A0 = v155;
    unk_26879D9B0 = v155;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0740, memory_order_acquire) & 1) == 0)
    {
      v288 = v5;
      int v289 = __cxa_guard_acquire(&qword_26AFA0740);
      uint64_t v5 = v288;
      if (v289)
      {
        qword_26AFA0738 = re::ecs2::introspect_ProtectionOptionsSystem(0);
        __cxa_guard_release(&qword_26AFA0740);
        uint64_t v5 = v288;
      }
    }
    long long v157 = *((_OWORD *)v5 + 60);
    long long v158 = v157;
    if (qword_26AFA0738) {
      long long v158 = *(_OWORD *)(qword_26AFA0738 + 32);
    }
    xmmword_26879D9C0 = v158;
    *(_OWORD *)algn_26879D9D0 = v157;
    xmmword_26879D9E0 = v157;
    unk_26879D9F0 = v157;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0750, memory_order_acquire) & 1) == 0)
    {
      v290 = v5;
      int v291 = __cxa_guard_acquire(&qword_26AFA0750);
      uint64_t v5 = v290;
      if (v291)
      {
        qword_26AFA0748 = re::ecs2::introspect_TransformSystem(0);
        __cxa_guard_release(&qword_26AFA0750);
        uint64_t v5 = v290;
      }
    }
    long long v159 = *((_OWORD *)v5 + 60);
    long long v160 = v159;
    if (qword_26AFA0748) {
      long long v160 = *(_OWORD *)(qword_26AFA0748 + 32);
    }
    xmmword_26879DA80 = v160;
    *(_OWORD *)algn_26879DA90 = v159;
    xmmword_26879DAA0 = v159;
    unk_26879DAB0 = v159;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0760, memory_order_acquire) & 1) == 0)
    {
      v292 = v5;
      int v293 = __cxa_guard_acquire(&qword_26AFA0760);
      uint64_t v5 = v292;
      if (v293)
      {
        qword_26AFA0758 = re::ecs2::introspect_LoadTraceSystem(0);
        __cxa_guard_release(&qword_26AFA0760);
        uint64_t v5 = v292;
      }
    }
    long long v161 = *((_OWORD *)v5 + 60);
    long long v162 = v161;
    if (qword_26AFA0758) {
      long long v162 = *(_OWORD *)(qword_26AFA0758 + 32);
    }
    xmmword_26879DAC0 = v162;
    *(_OWORD *)algn_26879DAD0 = v161;
    xmmword_26879DAE0 = v161;
    unk_26879DAF0 = v161;
    {
      uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEventEE"
           "NS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerOptio"
           "nsEEUlS9_SB_E0_SC_JEEE"
         + 39;
      if (v294)
      {
        re::introspect<re::ecs2::VFXEmitterSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VFXEmitterSystem(0);
        uint64_t v5 = "N2re8internal8CallableIZNS_8EventBus13createHandlerINS_4ecs26EntityE37REAudioPlayerDidPrepareAudioUnitEvent"
             "EENS_13FixedFunctionILm48EF20REEventHandlerResultPvPKvEEEPT_RKNS_8FunctionIFS8_SF_RKT0_EEESB_NS2_14HandlerO"
             "ptionsEEUlS9_SB_E0_SC_JEEE"
           + 39;
      }
    }
    long long v163 = *((_OWORD *)v5 + 60);
    long long v164 = v163;
    if (re::introspect<re::ecs2::VFXEmitterSystem>(void)::info) {
      long long v164 = *((_OWORD *)re::introspect<re::ecs2::VFXEmitterSystem>(void)::info + 2);
    }
    xmmword_26879DB00 = v164;
    *(_OWORD *)algn_26879DB10 = v163;
    xmmword_26879DB20 = v163;
    unk_26879DB30 = v163;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0770, memory_order_acquire) & 1) == 0)
    {
      v295 = v5;
      int v296 = __cxa_guard_acquire(&qword_26AFA0770);
      uint64_t v5 = v295;
      if (v296)
      {
        qword_26AFA0768 = re::ecs2::introspect_AssetMutateTrackingSystem(0);
        __cxa_guard_release(&qword_26AFA0770);
        uint64_t v5 = v295;
      }
    }
    long long v165 = *((_OWORD *)v5 + 60);
    long long v166 = v165;
    if (qword_26AFA0768) {
      long long v166 = *(_OWORD *)(qword_26AFA0768 + 32);
    }
    xmmword_26879DB80 = v166;
    *(_OWORD *)algn_26879DB90 = v165;
    xmmword_26879DBA0 = v165;
    unk_26879DBB0 = v165;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0780, memory_order_acquire) & 1) == 0)
    {
      v297 = v5;
      int v298 = __cxa_guard_acquire(&qword_26AFA0780);
      uint64_t v5 = v297;
      if (v298)
      {
        qword_26AFA0778 = re::ecs2::introspect_AudioAnimationSystem(0);
        __cxa_guard_release(&qword_26AFA0780);
        uint64_t v5 = v297;
      }
    }
    long long v167 = *((_OWORD *)v5 + 60);
    long long v168 = v167;
    if (qword_26AFA0778) {
      long long v168 = *(_OWORD *)(qword_26AFA0778 + 32);
    }
    xmmword_26879DBC0 = v168;
    *(_OWORD *)algn_26879DBD0 = v167;
    xmmword_26879DBE0 = v167;
    unk_26879DBF0 = v167;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0790, memory_order_acquire) & 1) == 0)
    {
      v299 = v5;
      int v300 = __cxa_guard_acquire(&qword_26AFA0790);
      uint64_t v5 = v299;
      if (v300)
      {
        qword_26AFA0788 = re::ecs2::introspect_SceneSpaceRootSystem(0);
        __cxa_guard_release(&qword_26AFA0790);
        uint64_t v5 = v299;
      }
    }
    long long v169 = *((_OWORD *)v5 + 60);
    long long v170 = v169;
    if (qword_26AFA0788) {
      long long v170 = *(_OWORD *)(qword_26AFA0788 + 32);
    }
    xmmword_26879DF00 = v170;
    *(_OWORD *)algn_26879DF10 = v169;
    xmmword_26879DF20 = v169;
    unk_26879DF30 = v169;
    re::ecs2::RenderingSystem::renderingSubsystemTypes((uint64_t)v302);
    qword_26AFA0408 = v302[2];
    operator new[]();
  }
  if (a1 < 0x60)
  {
    if (a1 == 58)
    {
      *a2 = (long long *)qword_26AFA0410;
      return qword_26AFA0408;
    }
    else
    {
      v173 = &_REECSManagerGetEngineSystemTypeIDs::mapping[4 * (uint64_t)a1];
      uint64_t result = 4 * (*(void *)v173 != 0);
      if (a2) {
        *a2 = v173;
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v171 = (id)CoreRELog::log;
    if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_error_impl(&dword_233120000, v171, OS_LOG_TYPE_ERROR, "Unknown REEngineSystemType %zu", buf, 0xCu);
    }

    return 0;
  }
  return result;
}

BOOL REECSManagerAddEngineSystem(uint64_t a1, signed int a2)
{
  long long v34 = 0;
  EngineSystemTypeIDs = (re *)_REECSManagerGetEngineSystemTypeIDs(a2, &v34);
  uint64_t v4 = EngineSystemTypeIDs;
  if (!EngineSystemTypeIDs) {
    return v4 != 0;
  }
  long long v29 = 0;
  unint64_t v30 = 0;
  int v31 = 1;
  unint64_t v32 = 0;
  long long v33 = 0;
  uint64_t v5 = (re::Allocator *)re::globalAllocators(EngineSystemTypeIDs)[2];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
  uint64_t v6 = 0;
  long long v7 = v4;
  do
  {
    if (!v26[0]) {
      goto LABEL_19;
    }
    Instance = re::TypeInfo::createInstance((re::TypeInfo *)&v27, v5, 0);
    long long v9 = Instance;
    if (v29)
    {
      char v10 = v31;
      if (v31)
      {
        unint64_t v11 = v30 + 1;
        if (v30 + 1 >= 5)
        {
          unint64_t v12 = 8;
          goto LABEL_12;
        }
      }
      else if (v30 >= v32)
      {
        unint64_t v11 = v30 + 1;
        if (v32 < v30 + 1)
        {
          unint64_t v12 = 2 * v32;
LABEL_12:
          if (v12 <= v11) {
            unint64_t v13 = v11;
          }
          else {
            unint64_t v13 = v12;
          }
          re::DynamicOverflowArray<re::SharedPtr<re::ecs2::System>,4ul>::setCapacity((uint64_t *)&v29, v13);
          char v10 = v31;
        }
      }
    }
    else
    {
      re::DynamicOverflowArray<re::SharedPtr<re::ecs2::System>,4ul>::setCapacity((uint64_t *)&v29, v30 + 1);
      char v10 = v31 + 2;
      v31 += 2;
    }
    BOOL v14 = (v10 & 1) == 0;
    long long v15 = v33;
    unint64_t v16 = v30;
    if (!v14) {
      long long v15 = &v32;
    }
    v15[v30] = (unint64_t)v9;
    unint64_t v30 = v16 + 1;
    v31 += 2;
LABEL_19:
    ++v6;
    long long v7 = (re *)((char *)v7 - 1);
  }
  while (v7);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
  if (v31) {
    long long v17 = &v32;
  }
  else {
    long long v17 = v33;
  }
  if (v30)
  {
    uint64_t v18 = 8 * v30;
    do
    {
      unint64_t v19 = *v17;
      unint64_t v25 = v19;
      if (v19) {
        id v20 = (id)(v19 + 8);
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t, void))(*(void *)a1 + 48))(a1, &v25, 0xFFFFFFFFLL, 0);
      if (v25)
      {

        unint64_t v25 = 0;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  if (v29)
  {
    char v21 = v31;
    if (v30)
    {
      if (v31) {
        long long v22 = &v32;
      }
      else {
        long long v22 = v33;
      }
      uint64_t v23 = 8 * v30;
      do
      {
        if (*v22)
        {

          *long long v22 = 0;
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
      char v21 = v31;
    }
    if ((v21 & 1) == 0) {
      (*(void (**)(uint64_t *, unint64_t *))(*v29 + 40))(v29, v33);
    }
  }
  return v4 != 0;
}

uint64_t REECSManagerSystemsArePausedInEditor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t REECSManagerSetSystemsArePausedInEditor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

void REECSManagerSetEngineSystemsEnabled(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3)
  {
    uint64_t v4 = *(re::Scheduler **)(a1 + 40);
    if (v4)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a1 + 48;
      do
      {
        unint64_t v19 = 0;
        uint64_t EngineSystemTypeIDs = _REECSManagerGetEngineSystemTypeIDs(*(_DWORD *)(a2 + 4 * v8), &v19);
        if (EngineSystemTypeIDs)
        {
          uint64_t v11 = EngineSystemTypeIDs;
          for (uint64_t i = 0; i != v11; ++i)
          {
            long long v18 = v19[i];
            uint64_t SystemsForTypeID = re::ecs2::SystemCollection::getSystemsForTypeID(v9, (uint64_t)&v18);
            if (v14)
            {
              uint64_t v15 = SystemsForTypeID;
              uint64_t v16 = 8 * v14;
              do
              {
                unint64_t v17 = *(void *)(*(void *)v15 + 96);
                if (v17 != -1) {
                  re::Scheduler::setEnabled(v4, v17, a4);
                }
                v15 += 8;
                v16 -= 8;
              }
              while (v16);
            }
          }
        }
        ++v8;
      }
      while (v8 != a3);
    }
  }
}

uint64_t REECSManagerAreEngineSystemsEnabled(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (a3)
    {
      BOOL v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = a1 + 48;
      uint64_t v9 = v3 + 128;
      while (1)
      {
        id v20 = 0;
        uint64_t EngineSystemTypeIDs = _REECSManagerGetEngineSystemTypeIDs(*(_DWORD *)(a2 + 4 * v7), &v20);
        if (EngineSystemTypeIDs) {
          break;
        }
LABEL_12:
        ++v7;
        LOBYTE(v3) = 1;
        BOOL v6 = v7 >= a3;
        if (v7 == a3) {
          return v3 & 1;
        }
      }
      uint64_t v11 = EngineSystemTypeIDs;
      uint64_t v12 = 0;
      while (1)
      {
        long long v19 = v20[v12];
        uint64_t SystemsForTypeID = re::ecs2::SystemCollection::getSystemsForTypeID(v8, (uint64_t)&v19);
        if (v14) {
          break;
        }
LABEL_11:
        if (++v12 == v11) {
          goto LABEL_12;
        }
      }
      uint64_t v15 = SystemsForTypeID;
      uint64_t v16 = 8 * v14;
      while (1)
      {
        unint64_t v17 = *(void *)(*(void *)v15 + 96);
        if (v17 == -1 || (re::DynamicBitset<unsigned long long,256ul>::getBit(v9, v17) & 1) == 0) {
          break;
        }
        v15 += 8;
        v16 -= 8;
        if (!v16) {
          goto LABEL_11;
        }
      }
      LOBYTE(v3) = v6;
    }
    else
    {
      LOBYTE(v3) = 1;
    }
  }
  return v3 & 1;
}

uint64_t REBackgroundTaskManagerTasksSize(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t RENetworkSyncManagerStartSyncWithSession()
{
  return MEMORY[0x270F59588]();
}

uint64_t RENetworkSyncManagerCreateSessionAndStartSync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = RESyncNetSessionConfigurationCreate();
  RESyncNetSessionConfigurationSetTransportQueue();
  RESyncNetSessionConfigurationSetIsLeader();
  RENetSessionConfigurationSetLeaderElectionPolicy(v4, (re::RENetLeaderElectionConsensus **)*(unsigned __int8 *)(a3 + 9));
  RESyncNetSessionConfigurationSetUserContext();
  RESyncNetSessionConfigurationSetAllowTimeSync();
  RESyncNetSessionConfigurationSetAuthorityPolicy();
  RESyncNetSessionConfigurationSetDiscoveryView();
  uint64_t SessionAndStartSync = RESyncServiceCreateSessionAndStartSync();

  return SessionAndStartSync;
}

uint64_t RENetworkSyncManagerCreateSessionAndStartSyncEx()
{
  return RESyncServiceCreateSessionAndStartSync();
}

uint64_t RENetworkSyncManagerStopSyncWithSession()
{
  return MEMORY[0x270F59598]();
}

uint64_t RENetworkSyncManagerStopSync()
{
  return MEMORY[0x270F59590]();
}

uint64_t REMultipeerConnectivityManagerSetHandshakeCountAndTimeoutMs()
{
  return MEMORY[0x270F59108]();
}

uint64_t REMultipeerConnectivityManagerStartSyncWithMCSession()
{
  return MEMORY[0x270F59110]();
}

uint64_t REMultipeerConnectivityManagerStopSync()
{
  return MEMORY[0x270F59118]();
}

uint64_t REMultipeerConnectivityManagerSession()
{
  return MEMORY[0x270F59100]();
}

uint64_t REMultipeerConnectivityGetInternalSession()
{
  return MEMORY[0x270F590F0]();
}

uint64_t REMultipeerConnectivityManagerGetMCPeerID()
{
  return MEMORY[0x270F590F8]();
}

uint64_t REMultipeerConnectivityManagerGetInternalPeerID()
{
  return MEMORY[0x270F590E8]();
}

uint64_t RETraceServiceStartListening(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t RETraceServiceStopListening(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t RETraceServiceAddExistingConnection(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t _RETestingAssetManagerGetCompiledAssetExtension(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v4);
  uint64_t v2 = [NSString stringWithUTF8String:*(void *)(*(void *)(v4[1] + 264) + 8)];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

BOOL _RETestingAssetManagerSaveCompiledAsset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v14[1] = 0;
  void v14[2] = 0;
  v14[0] = *(void *)(a1 + 1040);
  re::AssetAPIHelper::assetHandleCreate(a2, v13);
  uint64_t v4 = (re::FileStreamWriter *)[a3 UTF8String];
  *(void *)&long long buf = v14;
  *((void *)&buf + 1) = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 2;
  __int16 v19 = 256;
  re::AssetUtilities::saveAssetHandleToPath((re::AssetHandle *)v13, v4, (uint64_t)&buf, (uint64_t)v9);
  int v5 = v9[0];
  if (!v9[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (v11) {
        uint64_t v8 = *(unsigned char **)&v12[7];
      }
      else {
        uint64_t v8 = v12;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Failed to save asset to file. Error = %s", (uint8_t *)&buf, 0xCu);
    }

    if (!v9[0] && v10 && (v11 & 1) != 0) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v5 != 0;
}

uint64_t _REAssetManagerIsFullLoadTracingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1394);
}

uint64_t _RETestingAssetManagerLoadCompiledAsset(re::internal::AssetTypeRegistry **a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v14[1] = 0;
  void v14[2] = 0;
  v14[0] = a1[130];
  id v3 = a2;
  id v4 = [v3 pathExtension];
  int v5 = (const char **)re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(v14[0], (const char *)[v4 UTF8String]);
  id v6 = v3;
  v12[0] = 0;
  re::AssetUtilities::loadCompiledAssetFromPath((char *)[v6 UTF8String], (uint64_t *)v14, v5, 0, v12, (uint64_t)v13);
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "Loaded asset into assetPointer=%p", buf, 0xCu);
  }

  (*((void (**)(uint8_t *__return_ptr, re::internal::AssetTypeRegistry **, id, const char **, void, void, void))*a1
   + 52))(buf, a1, v7, v5, 0, 0, 0);
  uint64_t v9 = *(void *)buf;
  if (*(void *)buf) {
    id v10 = (id)(*(void *)buf + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  if (!LOBYTE(v13[0])) {

  }
  return v9;
}

CFStringRef _RETestingAssetDescriptorGetDescriptivePath(re::AssetManager *a1, uint64_t a2)
{
  re::AssetManager::testingGetAssetPathString(a1, (const re::AssetLoadDescriptor *)(a2 + 24), v5);
  if (!v5[0]) {
    return 0;
  }
  if (v7) {
    uint64_t v2 = *(const char **)&v8[7];
  }
  else {
    uint64_t v2 = v8;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  if (v5[0] && v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v3;
}

BOOL _RETestingAddLinkedTLEComponentToEntity(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned __int16 *)(a1 + 82);
  if (!*(_WORD *)(a1 + 82)) {
    return re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
  }
  CFStringRef v3 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                       + 16);
  id v4 = *(int16x8_t **)(a1 + 88);
  int16x8_t v5 = vld1q_dup_s16(v3);
  for (int i = 1; ; i -= 8)
  {
    uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0]) {
      break;
    }
    ++v4;
    if (!--v2) {
      return re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
    }
  }
  if (v7.u16[0] - i >= *(unsigned __int16 *)(a1 + 80)) {
    return re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
  }
  uint64_t v8 = *re::ecsComponentsLogObjects((re *)a1);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v9)
  {
    char v11 = v8;
    uint64_t v12 = *(void *)(a1 + 280);
    int v13 = 136315138;
    uint64_t v14 = v12;
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Entity %s already contains a LinkedTLEComponent", (uint8_t *)&v13, 0xCu);

    return 0;
  }
  return result;
}

id _REPipelineLog(re *a1)
{
  uint64_t v1 = (void *)*re::pipelineLogObjects(a1);
  return v1;
}

id _RETestingAudioAssetGetPCMBuffer(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (v6
    && (unsigned int v1 = atomic_load((unsigned int *)(v6 + 704)), v1 == 2)
    && (uint64_t v2 = (re::AudioFileAsset *)re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v5)) != 0)
  {
    CFStringRef v3 = re::AudioFileAsset::pcmBuffer(v2);
  }
  else
  {
    CFStringRef v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  return v3;
}

id _RETestingAudioAssetGetAudioFile(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (v6
    && (unsigned int v1 = atomic_load((unsigned int *)(v6 + 704)), v1 == 2)
    && (uint64_t v2 = re::AssetHandle::asset<re::AudioFileAsset>((re::AudioFileAsset *)&v5)) != 0)
  {
    id v3 = **(id **)(v2 + 8);
  }
  else
  {
    id v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  return v3;
}

void REAssetRegisterAssetSyncLocalSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v3)
  {
    re::NetworkSystem::registerLocalSessionForAssetSync(v3, a2);
  }
  else
  {
    id v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping registration of local session for asset...", v5, 2u);
    }
  }
}

void REAssetRegisterAssetSyncNetworkSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    RESyncRetain();
    *(void *)(v4 + 242re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
    RESyncNetSessionAddObserver();
  }
  else
  {
    uint64_t v5 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping registration of network session for asset...", v6, 2u);
    }
  }
}

void REAssetRegisterAssetSyncDebugSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    RESyncRetain();
    *(void *)(v4 + 2432) = a2;
    RESyncNetSessionAddObserver();
  }
  else
  {
    uint64_t v5 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping registration of debug session for asset...", v6, 2u);
    }
  }
}

void REAssetUnregisterAssetSyncLocalSession(uint64_t a1)
{
  unsigned int v1 = (re::NetworkSystem *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v1)
  {
    re::NetworkSystem::unRegisterLocalSessionForAssetSync(v1);
  }
  else
  {
    uint64_t v2 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping unregistration of local session for asset...", v3, 2u);
    }
  }
}

void REAssetUnregisterAssetSyncNetworkSession(uint64_t a1)
{
  uint64_t v1 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    RESyncNetSessionRemoveObserver();
    RESyncRelease();
    *(void *)(v2 + 242re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  else
  {
    uint64_t v3 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping unregistration of network session for asset...", v4, 2u);
    }
  }
}

void REAssetUnregisterAssetSyncDebugSession(uint64_t a1)
{
  uint64_t v1 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    RESyncNetSessionRemoveObserver();
    RESyncRelease();
    *(void *)(v2 + 2432) = 0;
  }
  else
  {
    uint64_t v3 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "NetworkSystem is null. Skipping unregistration of debug session for asset...", v4, 2u);
    }
  }
}

uint64_t RECollisionShapeAssetGetCollisionShape(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (v6
    && (unsigned int v1 = atomic_load((unsigned int *)(v6 + 704)), v1 == 2)
    && (uint64_t v2 = re::AssetHandle::loadedAsset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v5)) != 0)
  {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else
  {
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  return v3;
}

uint64_t REAssetManagerFindAssetsOfType_REKit_Only(re::CollisionShapeAsset *a1, uint64_t a2)
{
  if (a2 == 10)
  {
    uint64_t v3 = re::CollisionShapeAsset::assetType(a1);
    uint64_t v4 = re::globalAllocators((re *)v3);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 64, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
    *(void *)uint64_t v5 = &unk_26E736B18;
    *(void *)(v5 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 48) = 0;
    re::AssetManager::findAssetHandlesOfType((os_unfair_lock_s *)a1, (const re::AssetType *)v3, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v6 = v11;
      uint64_t v7 = 24 * v10;
      do
      {
        if (*((void *)v6 + 1)) {
          re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v5 + 24), v6);
        }
        uint64_t v6 = (re::AssetHandle *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
    re::FixedArray<re::AssetHandle>::deinit(&v9);
    return v5;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Function is not yet fully implemented.", "!\"Unreachable code\"", "REAssetManagerFindAssetsOfType_REKit_Only", 6622);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t REMeshManagerMeshModelCreate(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, unsigned int a4, __n128 a5, __n128 a6)
{
  uint64_t v8 = 0;
  uint64_t v42 = *MEMORY[0x263EF8340];
  *(void *)&v28[0] = 0;
  *((void *)&v28[0] + 1) = "";
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  do
  {
    uint64_t v9 = (char *)v28 + v8;
    *((void *)v9 + 12) = 0;
    *((void *)v9 + 16) = 0;
    v8 += 40;
  }
  while (v8 != 720);
  v28[1] = a5;
  void v28[2] = a6;
  uint64_t v10 = a4;
  if (a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(const char **)(a3 + v12);
      v27[0] = 0;
      v27[1] = (uint64_t)"";
      __int16 v16 = *(_WORD *)(a3 + v12 + 8);
      int v17 = *(_DWORD *)(a3 + v12 + 48);
      int v18 = *(_DWORD *)(a3 + v12 + 52);
      long long v19 = *(_OWORD *)(a3 + v12 + 32);
      *(_OWORD *)long long v36 = *(_OWORD *)(a3 + v12 + 16);
      *(_OWORD *)&v36[16] = v19;
      long long v37 = xmmword_23435FD50;
      long long v38 = xmmword_23435FD60;
      long long v39 = xmmword_23435FD80;
      long long v40 = xmmword_23435FBB0;
      WORD2(v32) = 0;
      LODWORD(v32) = 0;
      re::MeshPart::MeshPart((uint64_t)v33, v27, v16, 0, 0, v17, v18, *(_DWORD *)(a3 + v12 + 64), v36, v14, &v37, (re::MeshPartFlags *)&v32, *(_DWORD *)(a3 + v12 + 68), *(_DWORD *)(a3 + v12 + 72));
      re::StringID::destroyString((re::StringID *)v27);
      v35[32] = *(void *)(a3 + v12 + 56);
      uint64_t v20 = *((void *)&v29 + 1);
      if (*((void *)&v29 + 1) <= v14)
      {
        uint64_t v32 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v36 = 136315906;
        *(void *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 468;
        *(_WORD *)&v36[18] = 2048;
        *(void *)&v36[20] = v14;
        *(_WORD *)&v36[28] = 2048;
        *(void *)&v36[30] = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::MeshPart::operator=((uint64_t *)(v30 + v13), v33);
      re::StringID::destroyString((re::StringID *)v35);
      re::FixedArray<re::StringID>::deinit(v34);
      re::AttributeTable::~AttributeTable((re::AttributeTable *)v33);
      ++v14;
      v13 += 560;
      v12 += 96;
    }
    while (96 * v10 != v12);
  }
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = "";
  long long v21 = v37;
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = "";
  long long v22 = v28[0];
  v28[0] = v21;
  v33[1] = *((void *)&v22 + 1);
  v33[0] = v21 & 0xFFFFFFFFFFFFFFFELL | v22 & 1;
  re::StringID::destroyString((re::StringID *)v33);
  re::StringID::destroyString((re::StringID *)&v37);
  unint64_t v23 = re::DataArray<re::MeshModel>::create<re::MeshModel>((uint64_t)a1 + 8, (uint64_t *)v28);
  re::MeshModel::~MeshModel((re::MeshModel *)v28);
  return v23;
}

uint64_t REMeshManagerMeshModelGetMeshPartCount(uint64_t a1, int a2)
{
  return *(void *)(re::DataArray<re::MeshModel>::get(a1 + 8, a2) + 56);
}

double REMeshManagerMeshModelGetMeshPartAtIndex@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(re::DataArray<re::MeshModel>::get(a1 + 8, a2) + 64) + 560 * a3;
  long long v6 = *(_OWORD *)(v5 + 448);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 432);
  *(_OWORD *)(a4 + 32) = v6;
  *(_DWORD *)(a4 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(v5 + 540);
  *(_WORD *)(a4 + 8) = *(_WORD *)(v5 + 474);
  *(void *)a4 = *(void *)(v5 + 512);
  *(void *)(a4 + 68) = *(void *)(v5 + 528);
  *(void *)(a4 + 56) = *(unsigned __int8 *)(v5 + 536);
  double result = *(double *)(v5 + 464);
  *(double *)(a4 + 48) = result;
  return result;
}

double REMeshManagerMeshModelSetMeshPartAtIndex(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(re::DataArray<re::MeshModel>::get(a1 + 8, a2) + 64) + 560 * a3;
  *(_OWORD *)(v5 + 432) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 448) = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 540) = *(_DWORD *)(a4 + 64);
  *(_WORD *)(v5 + 47re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_WORD *)(a4 + 8);
  *(void *)(v5 + 528) = *(void *)(a4 + 68);
  *(unsigned char *)(v5 + 536) = *(void *)(a4 + 56);
  double result = *(double *)(a4 + 48);
  *(double *)(v5 + 46re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = result;
  return result;
}

unint64_t REMeshManagerMeshInstanceCreate(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, uint64_t a7)
{
  return REMeshManagerMeshInstanceCreateWithHandle(a1, a7, a2, a3, a4, a5);
}

unint64_t REMeshManagerMeshInstanceCreateWithHandle(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = 0;
  v8[1] = "";
  char v9 = 0;
  int v10 = 1065353216;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  void v8[2] = a2;
  __n128 v11 = a3;
  __n128 v12 = a4;
  __n128 v13 = a5;
  __n128 v14 = a6;
  unint64_t v6 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(a1 + 72, (uint64_t)v8);
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)v16 + 1);
  if ((void)v15)
  {
    if (*((void *)&v15 + 1))
    {
      (*(void (**)(void))(*(void *)v15 + 40))();
      *((void *)&v15 + 1) = 0;
      *(void *)&v16[0] = 0;
    }
    *(void *)&long long v15 = 0;
  }
  re::StringID::destroyString((re::StringID *)v8);
  return v6;
}

uint64_t REMeshScenesCreate(re::RenderManager *a1, unint64_t a2)
{
  uint64_t v3 = re::RenderManager::perFrameAllocator(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, 40, 8);
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)uint64_t v4 = v3;
  re::DynamicArray<re::MeshScene>::setCapacity((void *)v4, a2);
  ++*(_DWORD *)(v4 + 24);
  return v4;
}

uint64_t REMeshScenesAdd(_anonymous_namespace_ *a1, re::RenderManager *this, uint64_t a3, unsigned int a4, unint64_t a5, unsigned int a6, uint64_t a7, __int16 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, uint64_t a13, unsigned int a14, uint64_t a15, unsigned int a16)
{
  uint64_t v19 = (uint64_t)&v102;
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v20 = *((void *)this + 4);
  uint64_t v21 = re::RenderManager::perFrameAllocator(this);
  long long v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 24, 8);
  v22[1] = 0;
  _OWORD v22[2] = 0;
  unsigned int v59 = a4;
  *long long v22 = 0;
  uint64_t v61 = a4;
  re::FixedArray<unsigned long>::init<>(v22, v21, a4);
  unint64_t v23 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 24, 8);
  v23[1] = 0;
  void v23[2] = 0;
  *unint64_t v23 = 0;
  long long v60 = v23;
  re::FixedArray<unsigned long>::init<>(v23, v21, a14);
  long long v24 = (long long *)a6;
  uint64_t v65 = 0;
  long long v66 = 0;
  uint64_t v67 = 0;
  uint64_t v63 = v21;
  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(&v65, v21, a6);
  if (a6)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = v66;
      if ((unint64_t)v66 <= v25) {
        break;
      }
      *(void *)(v67 + 8 * v25) = *(void *)(a5 + 8 * v25);
      v26 += *(void *)(re::DataArray<re::MeshModel>::get(v20 + 8, *(void *)(a5 + 8 * v25++)) + 56);
      if (a6 == v25) {
        goto LABEL_7;
      }
    }
LABEL_43:
    uint64_t v102 = 0;
    __n128 v72 = 0u;
    __n128 v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v106 = 136315906;
    *(void *)(v19 + 52) = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)(v19 + 62) = 468;
    __int16 v107 = 2048;
    *(void *)(v19 + 68) = v25;
    __int16 v109 = 2048;
    *(void *)(v19 + 78) = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v26 = 0;
LABEL_7:
  char v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 24, 8);
  v28[1] = 0;
  void v28[2] = 0;
  void *v28 = 0;
  re::FixedArray<re::AABB>::init<>((uint64_t)v28, v63, v26);
  if (!a6) {
    goto LABEL_15;
  }
  unint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = v20 + 8;
  uint64_t v19 = 560;
  do
  {
    uint64_t v29 = re::DataArray<re::MeshModel>::get(v26, *(void *)(a5 + 8 * v25));
    if (!*(void *)(v29 + 56)) {
      goto LABEL_14;
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 32 * (void)v27;
    do
    {
      long long v33 = (char *)v27 + v30;
      unint64_t v34 = v28[1];
      if (v34 <= (unint64_t)v27 + v30)
      {
        uint64_t v102 = 0;
        __n128 v72 = 0u;
        __n128 v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v69 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v106 = 136315906;
        *(void *)&v106[4] = "operator[]";
        *(_WORD *)&v106[12] = 1024;
        *(_DWORD *)&v106[14] = 468;
        __int16 v107 = 2048;
        long long v108 = v33;
        __int16 v109 = 2048;
        unint64_t v110 = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v35 = *(void *)(v29 + 64) + 560 * v31;
      long long v36 = (_OWORD *)(v28[2] + v32);
      long long v37 = *(_OWORD *)(v35 + 448);
      *long long v36 = *(_OWORD *)(v35 + 432);
      v36[1] = v37;
      uint64_t v31 = ++v30;
      v32 += 32;
    }
    while (*(void *)(v29 + 56) > (unint64_t)v30);
    uint64_t v27 = (uint64_t *)((char *)v27 + v30);
LABEL_14:
    ++v25;
  }
  while ((long long *)v25 != v24);
LABEL_15:
  long long v24 = &v69;
  a5 = a16;
  uint64_t v26 = a15;
  char v90 = 0;
  char v91 = 0;
  long long v92 = 0u;
  long long v70 = 0uLL;
  __n128 v72 = 0u;
  __n128 v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  char v80 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  memset(v89, 0, 28);
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    goto LABEL_46;
  }
  while (1)
  {
    uint64_t v27 = &v102;
    unint64_t v25 = a14;
    uint64_t v93 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v94 = _D0;
    int v95 = 1065353216;
    long long v96 = 0u;
    memset(v97, 0, 19);
    *(void *)((char *)&v97[2] + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0xFFFFFFFF00000001;
    *(void *)&long long v43 = 0x7F0000007FLL;
    *((void *)&v43 + 1) = 0x7F0000007FLL;
    v24[28] = (__int128)vdupq_n_s32(0x7F800000u);
    v24[29] = v43;
    char v98 = 0;
    uint64_t v99 = 0;
    char v100 = 0;
    uint64_t v101 = 0x10100010001;
    *(void *)&long long v69 = v67;
    *((void *)&v69 + 1) = v66;
    *(void *)long long v106 = v26;
    *(void *)&v106[8] = a5;
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
    *((void *)&v70 + 1) = re::MeshBoundingBoxes::MeshBoundingBoxes(v44, v63, (const void **)v106, 1);
    uint64_t v45 = v28[1];
    *(void *)long long v106 = v28[2];
    *(void *)&v106[8] = v45;
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
    *(void *)&long long v71 = re::MeshBoundingBoxes::MeshBoundingBoxes(v46, v63, (const void **)v106, 1);
    v97[9] = v71;
    uint64_t v47 = v22[1];
    *(void *)&long long v76 = v22[2];
    *((void *)&v76 + 1) = v47;
    a5 = v60[1];
    uint64_t v81 = v60[2];
    unint64_t v82 = a5;
    if (!a14) {
      break;
    }
    uint64_t v48 = 0;
    while (a5 != v48)
    {
      *(void *)(v60[2] + 8 * v48) = *(void *)(a13 + 8 * v48);
      if (a14 == ++v48) {
        goto LABEL_20;
      }
    }
LABEL_44:
    v64[0] = 0;
    *((_OWORD *)v27 + 6) = 0u;
    *((_OWORD *)v27 + 7) = 0u;
    *((_OWORD *)v27 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
    *((_OWORD *)v27 + 5) = 0u;
    *((_OWORD *)v27 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v102) = 136315906;
    *(uint64_t *)((char *)v27 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (uint64_t)"operator[]";
    __int16 v103 = 1024;
    *(_DWORD *)((char *)v27 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 468;
    __int16 v104 = 2048;
    *(uint64_t *)((char *)v27 + 20) = a5;
    __int16 v105 = 2048;
    *(uint64_t *)((char *)v27 + 30) = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_45:
    uint64_t v68 = 0;
    *((_OWORD *)v27 + 6) = 0u;
    *((_OWORD *)v27 + 7) = 0u;
    *((_OWORD *)v27 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
    *((_OWORD *)v27 + 5) = 0u;
    *((_OWORD *)v27 + 3) = 0u;
    char v28 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v102) = 136315906;
    *(uint64_t *)((char *)v27 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (uint64_t)"operator[]";
    __int16 v103 = 1024;
    *(_DWORD *)((char *)v27 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 468;
    __int16 v104 = 2048;
    *(uint64_t *)((char *)v27 + 20) = a5;
    __int16 v105 = 2048;
    *(uint64_t *)((char *)v27 + 30) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
LABEL_20:
  if (v59)
  {
    a5 = 0;
    do
    {
      re::AssetAPIHelper::assetHandleCreate(*(void *)(a3 + 8 * a5), v64);
      uint64_t v49 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v64);
      uint64_t v50 = v49 ? *(void *)(v49 + 1664) : 0;
      unint64_t v25 = v22[1];
      if (v25 <= a5) {
        goto LABEL_45;
      }
      *(void *)(v22[2] + 8 * a5) = v50;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
    }
    while (v61 != ++a5);
  }
  __n128 v72 = a9;
  __n128 v73 = a10;
  void v24[5] = (__int128)a11;
  _DWORD v24[6] = (__int128)a12;
  v97[1] = a7;
  v106[0] = 0;
  v106[2] = 0;
  v106[4] = 0;
  v106[12] = 0;
  v106[14] = 0;
  v106[16] = 0;
  LOBYTE(v107) = 0;
  *(_DWORD *)&v106[6] = 0;
  v106[10] = 0;
  *(_DWORD *)((char *)&v108 + 2) = 0;
  BYTE6(v108) = 0;
  if ((a8 & 0x100) != 0) {
    *(_WORD *)&v106[12] = 1;
  }
  if (a8 < 0) {
    *(_WORD *)&v106[10] = 1;
  }
  v97[0] = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)v106);
  if (*(void *)a1) {
    re::DynamicArray<re::MeshScene>::add(a1, &v69);
  }
  if (v89[2])
  {
    if ((void)v87) {
      *(void *)&long long v87 = 0;
    }
    if (*((void *)&v86 + 1)) {
      (*(void (**)(void, void))(*(void *)v89[2] + 40))(v89[2], *((void *)&v86 + 1));
    }
  }
  uint64_t result = v65;
  if (v65)
  {
    if (v66) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v65 + 40))(v65, v67);
    }
  }
  return result;
}

uint64_t RERenderFrameAddScenes(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return (*(uint64_t (**)(void))(**(void **)(result + 320) + 568))();
  }
  return result;
}

const void *RETimebaseServiceCopyReadOnlyTimebase(uint64_t a1)
{
  unsigned int v1 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    TypeID = (re *)CMTimebaseGetTypeID();
    if ((re *)v3 != TypeID)
    {
      uint64_t v5 = re::TimebaseLog(TypeID);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot recover clock with ID", v7, 2u);
      }

      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

CMTimebaseRef RETimebaseServiceCreateEngineSourceTimebase(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CMTimebaseRef timebaseOut = 0;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v2 = (CMTimebaseRef *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  OSStatus v3 = CMTimebaseCreateWithSourceTimebase(v1, *v2, &timebaseOut);
  if (v3)
  {
    OSStatus v4 = v3;
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      OSStatus v9 = v4;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed to create engine timebase, error code: %X", buf, 8u);
    }

    return 0;
  }
  else
  {
    CMTimebaseSetRate(timebaseOut, 1.0);
    return timebaseOut;
  }
}

uint64_t RESharedClockServiceSetSession(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t RENeverUseThisSetPerceptualAlphaBlendingEnabled(uint64_t result)
{
  re::internal::perceptual_alpha::never_use_this::g_enablePerceptualAlpha = result;
  return result;
}

unsigned char *RERenderManagerOverrideProgrammableBlending(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t RERenderManagerIsBeingUpdated(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 181);
}

uint64_t RENeverUseThisSetRenderOnTopEntitlementEnabled(uint64_t result)
{
  re::internal::render_on_top::never_use_this::g_enableRenderOnTopEntitlement = result;
  return result;
}

uint64_t REOpacityServiceGetComputedOpacity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_0,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::~Callable()
{
}

void *re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_0,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E736758;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_0,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E736758;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_0,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::size()
{
  return 16;
}

uint64_t re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_1,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::~Callable()
{
}

char *re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_1,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9 = *a6;
  uint64_t v10 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(*(void *)(**(void **)(a1 + 8) + 440) + 72, *a2);
  __n128 v11 = (__IOSurface *)objc_msgSend(*(id *)a7, sel_iosurface);
  if (v11) {
    uint64_t result = (char *)IOSurfaceGetBaseAddress(v11);
  }
  else {
    uint64_t result = (char *)objc_msgSend(*(id *)a7, sel_contents);
  }
  __n128 v13 = *(uint64_t **)(a1 + 24);
  uint64_t v14 = *v13;
  if (v9)
  {
    long long v15 = (float32x4_t *)(*(void *)(*(void *)(a1 + 16) + 16) + 16 * v14);
    __int16 v16 = (float *)&result[*(unsigned int *)(a7 + 8) + 8];
    uint64_t v17 = v9;
    do
    {
      float v18 = *(v16 - 2);
      float v19 = *(v16 - 1);
      float v20 = *v16;
      v16 += 3;
      float32x4_t v21 = vaddq_f32(v10[5], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10[2], v18), v10[3], v19), v10[4], v20));
      *v15++ = vdivq_f32(v21, (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3));
      --v17;
    }
    while (v17);
    __n128 v13 = *(uint64_t **)(a1 + 24);
    uint64_t v14 = *v13;
  }
  *__n128 v13 = v14 + v9;
  return result;
}

uint64_t re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_1,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7367C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_1,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7367C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh::$_1,void ()(re::DataArrayHandle<re::MeshInstance> const&,unsigned long,unsigned long,unsigned long,unsigned long,re::BufferSlice const&)>::size()
{
  return 32;
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = result;
  return result;
}

void __Block_byref_object_dispose__9(void *a1)
{
  long long v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  OSStatus v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
}

void ___ZN12_GLOBAL__N_121generateMeshExtrusionEP13CGSVGDocumentRKN2re14pathprocessing20MeshExtrusionOptionsE_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!a3 && CGSVGNodeGetType() == 2)
  {
    int Primitive = CGSVGShapeNodeGetPrimitive();
    switch(Primitive)
    {
      case '*':
        CGSVGShapeNodeGetPath();
        CGPath = (const CGPath *)CGSVGPathCreateCGPath();
        CFMutableDataRef Mutable = (CGPath *)MEMORY[0x237DB9580](CGPath, a1 + 40);
        CGPathRelease(CGPath);
        if (Mutable) {
          goto LABEL_22;
        }
        break;
      case '+':
      case '.':
      case '/':
      case '0':
        return;
      case ',':
        unint64_t FloatCount = CGSVGShapeNodeGetFloatCount();
        if (FloatCount)
        {
          unint64_t v8 = FloatCount;
          if (FloatCount >> 61) {
            abort();
          }
          uint64_t v9 = (CGFloat *)operator new(8 * FloatCount);
          bzero(v9, 8 * v8);
          uint64_t v10 = &v9[v8];
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v10 = 0;
        }
        CGSVGShapeNodeGetFloats();
        CFMutableDataRef Mutable = CGPathCreateMutable();
        CGPathMoveToPoint(Mutable, (const CGAffineTransform *)(a1 + 40), *v9, v9[1]);
        if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
        {
          uint64_t v12 = 0;
          unint64_t v13 = v10 - v9;
          do
          {
            CGPathAddLineToPoint(Mutable, (const CGAffineTransform *)(a1 + 40), v9[v12 + 2], v9[v12 + 3]);
            unint64_t v14 = v12 + 4;
            v12 += 2;
          }
          while (v14 < v13);
        }
        CGPathCloseSubpath(Mutable);
        operator delete(v9);
        if (Mutable) {
          goto LABEL_22;
        }
        break;
      case '-':
        NSLog(&cfstr_2dExtrusionDoe_0.isa);
        break;
      case '1':
        *(void *)long long buf = 0;
        cornerHeight[0] = 0.0;
        CGSVGShapeNodeGetRectGeometry();
        CGPathRef v11 = CGPathCreateWithRoundedRect(v23, 0.0, 0.0, (const CGAffineTransform *)(a1 + 40));
        goto LABEL_15;
      default:
        if (Primitive == 16)
        {
          v23.origin.x = 0.0;
          *(void *)long long buf = 0;
          cornerHeight[0] = 0.0;
          v33.f64[0] = 0.0;
          CGSVGShapeNodeGetEllipseGeometry();
          v39.origin.x = 0.0 - 0.0;
          v39.origin.y = 0.0 - 0.0;
          v39.size.width = 0.0 + 0.0;
          v39.size.height = 0.0 + 0.0;
          CGPathRef v11 = CGPathCreateWithEllipseInRect(v39, (const CGAffineTransform *)(a1 + 40));
LABEL_15:
          CFMutableDataRef Mutable = v11;
          if (v11)
          {
LABEL_22:
            info = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            CGPathRelease(Mutable);
            if (CGSVGNodeFindAttribute())
            {
              LODWORD(v23.origin.x) = 0;
              Atounint64_t m = CGSVGAttributeGetAtom();
              BOOL v16 = 0;
              if (Atom) {
                BOOL v16 = LODWORD(v23.origin.x) == 17;
              }
            }
            else
            {
              BOOL v16 = 0;
            }
            re::pathprocessing::simpleExtrudeMesh(&info, v16, *(float32x2_t **)(a1 + 88), *(void *)(*(void *)(a1 + 32) + 8) + 48, (uint64_t)&v23);
            if (!LOBYTE(v23.origin.x))
            {
              if (CoreRELog::onceToken != -1) {
                dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
              }
              uint64_t v17 = (id)CoreRELog::log;
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                if (v24) {
                  float v18 = *(unsigned char **)&v25[7];
                }
                else {
                  float v18 = v25;
                }
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = v18;
                _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Failed to extrude mesh from 2D shape: %s", buf, 0xCu);
              }
            }
            uint64_t Attribute = CGSVGNodeFindAttribute();
            float32x4_t v20 = 0uLL;
            if (Attribute)
            {
              uint64_t v32 = 0;
              if (CGSVGAttributeGetPaint())
              {
                int Type = CGSVGPaintGetType();
                float32x4_t v20 = 0uLL;
                if (Type == 1)
                {
                  uint64_t v37 = 0;
                  *(_OWORD *)long long buf = 0u;
                  long long v36 = 0u;
                  CGSVGPaintGetColor();
                  *(_OWORD *)cornerHeight = *(_OWORD *)buf;
                  long long v30 = v36;
                  uint64_t v31 = v37;
                  CGColor = (CGColor *)CGSVGColorCreateCGColor();
                  CGColorGetColorSpace(CGColor);
                  CGColorGetComponents(CGColor);
                  if (qword_26AFA0420 != -1) {
                    dispatch_once(&qword_26AFA0420, &__block_literal_global_65);
                  }
                  CGColorTransformConvertColorComponents();
                  v34.f64[1] = CGColorGetAlpha(CGColor);
                  CGColorRelease(CGColor);
                  float32x4_t v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v33), v34);
                }
              }
              else
              {
                float32x4_t v20 = 0uLL;
              }
            }
            *(float32x4_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 120) = v20;
            if (!LOBYTE(v23.origin.x) && *(void *)&v23.size.height && (v24 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v23.size.height + 40))();
            }
            if (info)
            {
              uint64_t v27 = info;
              operator delete(info);
            }
          }
        }
        else if (Primitive == 32)
        {
          NSLog(&cfstr_2dExtrusionDoe.isa);
        }
        break;
    }
  }
}

void ___ZN12_GLOBAL__N_123convertAttributeToColorEP14CGSVGAttribute_block_invoke()
{
  uint64_t v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002C8]);
  qword_26AFA0418 = MEMORY[0x237DB8E80](v0, 0);
  CGColorSpaceRelease(v0);
}

uint64_t __Block_byref_object_copy__87_0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v3 = *(void *)(result + 64);
  *(void *)(result + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a2 + 64);
  *(void *)(a2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  uint64_t v4 = *(void *)(result + 80);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v4;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(result + 72);
  return result;
}

uint64_t __Block_byref_object_dispose__88_0(uint64_t a1)
{
  return re::DynamicArray<re::Optional<re::AssetHandle>>::deinit(a1 + 48);
}

re::DynamicString *___ZL22loadMaterialBundleFilePN2re12AssetManagerEPKcS3_S3_22MaterialBundleFileType_block_invoke(re::DynamicString *result, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v65 = result;
  uint64_t v3 = (re::AssetPath *)*((void *)result + 5);
  if (v3)
  {
    __n128 result = (re::DynamicString *)isAssetPathCustom((const re::AssetHandle *)(a2 + 104));
    if (result)
    {
      uint64_t v4 = *re::assetsLogObjects(result);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t v5 = *(void *)(a2 + 24);
        }
        else {
          uint64_t v5 = a2 + 17;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)char v90 = v5;
        _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Changing library path for material definition %s", buf, 0xCu);
      }
    }
    uint64_t v6 = *(void *)(a2 + 408);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(a2 + 424);
      uint64_t v9 = 664 * v6;
      do
      {
        uint64_t v10 = v8 + v7;
        BOOL v11 = isAssetPathCustom((const re::AssetHandle *)(v8 + v7 + 64));
        if (v11)
        {
          uint64_t v12 = *re::assetsLogObjects((re *)v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = v8 + v7;
            if (*(unsigned char *)(v8 + v7 + 8)) {
              uint64_t v14 = *(void *)(v13 + 16);
            }
            else {
              uint64_t v14 = v13 + 9;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)char v90 = v14;
            _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Changing library path for technique %s", buf, 0xCu);
          }
        }
        BOOL v15 = isAssetPathCustom((const re::AssetHandle *)(v10 + 88));
        if (v15)
        {
          BOOL v16 = *re::assetsLogObjects((re *)v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = v8 + v7;
            if (*(unsigned char *)(v8 + v7 + 8)) {
              uint64_t v18 = *(void *)(v17 + 16);
            }
            else {
              uint64_t v18 = v17 + 9;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)char v90 = v18;
            _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Changing library path for technique %s vertex shader", buf, 0xCu);
          }
        }
        __n128 result = (re::DynamicString *)isAssetPathCustom((const re::AssetHandle *)(v8 + v7 + 144));
        if (result)
        {
          float v19 = *re::assetsLogObjects(result);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = v8 + v7;
            if (*(unsigned char *)(v8 + v7 + 8)) {
              uint64_t v21 = *(void *)(v20 + 16);
            }
            else {
              uint64_t v21 = v20 + 9;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)char v90 = v21;
            _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Changing library path for technique %s pixel shader", buf, 0xCu);
          }
        }
        v7 += 664;
      }
      while (v9 != v7);
    }
  }
  uint64_t v68 = (const re::AssetPath *)v65[7];
  long long v69 = (os_unfair_lock_s *)v65[6];
  uint64_t v67 = (re::AssetPath *)v65[8];
  long long v64 = (_anonymous_namespace_ *)(*(void *)(v65[4] + 8) + 48);
  uint64_t v22 = *(unsigned int *)(a2 + 280);
  if (v22)
  {
    uint64_t v23 = 0;
    char v24 = (int *)(*(void *)(a2 + 264) + 8);
    while (1)
    {
      int v25 = *v24;
      v24 += 22;
      if (v25 < 0) {
        break;
      }
      if (v22 == ++v23)
      {
        LODWORD(v23) = *(_DWORD *)(a2 + 280);
        break;
      }
    }
  }
  else
  {
    LODWORD(v23) = 0;
  }
  if (v22 != v23)
  {
    uint64_t v26 = v23;
    int v66 = *(_DWORD *)(a2 + 280);
    do
    {
      uint64_t v27 = *(void *)(a2 + 264);
      *(_DWORD *)long long buf = 0;
      uint64_t v28 = (const re::MaterialTextureParam *)(v27 + 88 * v26 + 48);
      *(_OWORD *)&v90[4] = 0u;
      long long v91 = 0u;
      uint64_t v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v90[4], 0);
      long long v92 = 0u;
      long long v93 = 0u;
      long long v30 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v92, 0);
      uint64_t v94 = 0;
      int v74 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      uint64_t v31 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v75, 0);
      long long v77 = 0u;
      long long v78 = 0u;
      re::DynamicString::setCapacity(&v77, 0);
      uint64_t v79 = 0;
      if (generateTextureAssetPaths((re::AssetManager *)v69, v28, v68, v67, (re::AssetPath *)buf, (re::AssetPath *)&v74))
      {
        uint64_t v32 = re::AssetManager::assetHandle(v69, (const re::AssetPath *)&v74, 1, (uint64_t *)v87);
        if (*(void *)&v88[4])
        {
          unsigned int v33 = atomic_load((unsigned int *)(*(void *)&v88[4] + 704));
          BOOL v34 = v33 == 2;
        }
        else
        {
          BOOL v34 = 0;
        }
        uint64_t v35 = *re::assetsLogObjects((re *)v32);
        BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        if (v34)
        {
          LODWORD(v22) = v66;
          if (v36)
          {
            uint64_t v37 = v35;
            __n128 v72 = 0;
            uint64_t v73 = 0;
            uint64_t v71 = 0;
            uint64_t v70 = v75;
            re::DynamicString::setCapacity(&v70, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v74, (re::DynamicString *)&v70);
            uint64_t v38 = (char *)&v71 + 1;
            if (v71) {
              uint64_t v38 = v72;
            }
            LODWORD(v80) = 136315138;
            *(void *)((char *)&v80 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v38;
            _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "Texture at %s already loaded", (uint8_t *)&v80, 0xCu);

            if (v70 && (v71 & 1) != 0) {
              (*(void (**)(void))(*(void *)v70 + 40))();
            }
          }
        }
        else
        {
          if (v36)
          {
            CGRect v39 = v35;
            __n128 v72 = 0;
            uint64_t v73 = 0;
            uint64_t v71 = 0;
            uint64_t v70 = *(void *)&v90[4];
            re::DynamicString::setCapacity(&v70, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)buf, (re::DynamicString *)&v70);
            if (v71) {
              long long v40 = v72;
            }
            else {
              long long v40 = (char *)&v71 + 1;
            }
            uint64_t v81 = 0;
            uint64_t v82 = 0;
            long long v80 = (unint64_t)v75;
            re::DynamicString::setCapacity(&v80, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v74, (re::DynamicString *)&v80);
            long long v41 = (char *)&v80 + 9;
            if (BYTE8(v80)) {
              long long v41 = v81;
            }
            *(_DWORD *)long long v83 = 136315394;
            long long v84 = v40;
            __int16 v85 = 2080;
            long long v86 = v41;
            _os_log_impl(&dword_233120000, v39, OS_LOG_TYPE_DEFAULT, "Preloading texture as %s into %s", v83, 0x16u);

            if (void)v80 && (BYTE8(v80)) {
              (*(void (**)(void))(*(void *)v80 + 40))();
            }
            if (v70 && (v71 & 1) != 0) {
              (*(void (**)(void))(*(void *)v70 + 40))();
            }
          }
          if (BYTE8(v92)) {
            uint64_t v42 = (char *)v93;
          }
          else {
            uint64_t v42 = (char *)&v92 + 9;
          }
          createAssetHandleAtPathFromFile((uint64_t)&v70, (uint64_t (****)(void))v69, (const re::AssetHandle *)v87, (uint64_t)v42, 0);
          LODWORD(v22) = v66;
          if ((_BYTE)v70)
          {
            LOBYTE(v80) = 1;
            re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&v80 + 8), (const re::AssetHandle *)&v71);
            re::DynamicArray<re::Optional<re::AssetHandle>>::add(v64, &v80);
            if ((_BYTE)v80) {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v80 + 8));
            }
          }
          re::Result<re::AssetHandle,re::DetailedError>::~Result(&v70);
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v87);
      }
      if ((void)v77)
      {
        if (BYTE8(v77)) {
          (*(void (**)(void))(*(void *)v77 + 40))();
        }
        long long v77 = 0u;
        long long v78 = 0u;
      }
      if (void)v75 && (BYTE8(v75)) {
        (*(void (**)(void))(*(void *)v75 + 40))();
      }
      if ((void)v92)
      {
        if (BYTE8(v92)) {
          (*(void (**)(void))(*(void *)v92 + 40))();
        }
        long long v92 = 0u;
        long long v93 = 0u;
      }
      __n128 result = *(re::DynamicString **)&v90[4];
      if (*(void *)&v90[4] && (v90[12] & 1) != 0) {
        __n128 result = (re::DynamicString *)(*(uint64_t (**)(void))(**(void **)&v90[4] + 40))();
      }
      if (*(_DWORD *)(a2 + 280) <= (v23 + 1)) {
        int v43 = v23 + 1;
      }
      else {
        int v43 = *(_DWORD *)(a2 + 280);
      }
      while (1)
      {
        uint64_t v26 = (v23 + 1);
        if (v43 - 1 == v23) {
          break;
        }
        LODWORD(v23) = v23 + 1;
        int v44 = v26;
        if ((*(_DWORD *)(*(void *)(a2 + 264) + 88 * v26 + 8) & 0x80000000) != 0) {
          goto LABEL_93;
        }
      }
      int v44 = v43;
LABEL_93:
      LODWORD(v23) = v44;
    }
    while (v22 != v44);
  }
  uint64_t v45 = *(unsigned int *)(a2 + 328);
  if (v45)
  {
    uint64_t v46 = 0;
    uint64_t v47 = (int *)(*(void *)(a2 + 312) + 8);
    while (1)
    {
      int v48 = *v47;
      v47 += 40;
      if (v48 < 0) {
        break;
      }
      if (v45 == ++v46)
      {
        LODWORD(v46) = *(_DWORD *)(a2 + 328);
        break;
      }
    }
  }
  else
  {
    LODWORD(v46) = 0;
  }
  if (v45 != v46)
  {
    uint64_t v49 = v46;
    int v63 = *(_DWORD *)(a2 + 328);
    do
    {
      uint64_t v50 = *(void *)(a2 + 312);
      *(_DWORD *)long long buf = 0;
      long long v51 = (const re::MaterialTextureParam *)(v50 + 160 * v49 + 48);
      *(_OWORD *)&v90[4] = 0u;
      long long v91 = 0u;
      long long v52 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v90[4], 0);
      long long v92 = 0u;
      long long v93 = 0u;
      long long v53 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v92, 0);
      uint64_t v94 = 0;
      int v74 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v54 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v75, 0);
      long long v77 = 0u;
      long long v78 = 0u;
      re::DynamicString::setCapacity(&v77, 0);
      uint64_t v79 = 0;
      BOOL TextureAssetPaths = generateTextureAssetPaths((re::AssetManager *)v69, v51, v68, v67, (re::AssetPath *)buf, (re::AssetPath *)&v74);
      if (TextureAssetPaths)
      {
        long long v56 = *re::assetsLogObjects((re *)TextureAssetPaths);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          long long v57 = v56;
          __n128 v72 = 0;
          uint64_t v73 = 0;
          uint64_t v71 = 0;
          uint64_t v70 = *(void *)&v90[4];
          re::DynamicString::setCapacity(&v70, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)buf, (re::DynamicString *)&v70);
          if (v71) {
            long long v58 = v72;
          }
          else {
            long long v58 = (char *)&v71 + 1;
          }
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          long long v80 = (unint64_t)v75;
          re::DynamicString::setCapacity(&v80, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)&v74, (re::DynamicString *)&v80);
          unsigned int v59 = (char *)&v80 + 9;
          if (BYTE8(v80)) {
            unsigned int v59 = v81;
          }
          *(_DWORD *)long long v87 = 136315394;
          *(void *)long long v88 = v58;
          *(_WORD *)&v88[8] = 2080;
          *(void *)&v88[10] = v59;
          _os_log_impl(&dword_233120000, v57, OS_LOG_TYPE_DEFAULT, "Preloading texture block texture as %s into %s", v87, 0x16u);

          if (void)v80 && (BYTE8(v80)) {
            (*(void (**)(void))(*(void *)v80 + 40))();
          }
          if (v70 && (v71 & 1) != 0) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
        }
        re::AssetManager::assetHandle(v69, (const re::AssetPath *)&v74, 1, (uint64_t *)v87);
        if (BYTE8(v92)) {
          long long v60 = (char *)v93;
        }
        else {
          long long v60 = (char *)&v92 + 9;
        }
        createAssetHandleAtPathFromFile((uint64_t)&v70, (uint64_t (****)(void))v69, (const re::AssetHandle *)v87, (uint64_t)v60, 0);
        LODWORD(v45) = v63;
        if ((_BYTE)v70)
        {
          LOBYTE(v80) = 1;
          re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&v80 + 8), (const re::AssetHandle *)&v71);
          re::DynamicArray<re::Optional<re::AssetHandle>>::add(v64, &v80);
          if ((_BYTE)v80) {
            re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v80 + 8));
          }
        }
        re::Result<re::AssetHandle,re::DetailedError>::~Result(&v70);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v87);
      }
      if ((void)v77)
      {
        if (BYTE8(v77)) {
          (*(void (**)(void))(*(void *)v77 + 40))();
        }
        long long v77 = 0u;
        long long v78 = 0u;
      }
      if (void)v75 && (BYTE8(v75)) {
        (*(void (**)(void))(*(void *)v75 + 40))();
      }
      if ((void)v92)
      {
        if (BYTE8(v92)) {
          (*(void (**)(void))(*(void *)v92 + 40))();
        }
        long long v92 = 0u;
        long long v93 = 0u;
      }
      __n128 result = *(re::DynamicString **)&v90[4];
      if (*(void *)&v90[4] && (v90[12] & 1) != 0) {
        __n128 result = (re::DynamicString *)(*(uint64_t (**)(void))(**(void **)&v90[4] + 40))();
      }
      if (*(_DWORD *)(a2 + 328) <= (v46 + 1)) {
        int v61 = v46 + 1;
      }
      else {
        int v61 = *(_DWORD *)(a2 + 328);
      }
      while (1)
      {
        uint64_t v49 = (v46 + 1);
        if (v61 - 1 == v46) {
          break;
        }
        LODWORD(v46) = v46 + 1;
        int v62 = v49;
        if ((*(_DWORD *)(*(void *)(a2 + 312) + 160 * v49 + 8) & 0x80000000) != 0) {
          goto LABEL_143;
        }
      }
      int v62 = v61;
LABEL_143:
      LODWORD(v46) = v62;
    }
    while (v45 != v62);
  }
  return result;
}

_anonymous_namespace_ *___ZL22loadMaterialBundleFilePN2re12AssetManagerEPKcS3_S3_22MaterialBundleFileType_block_invoke_2(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v47 = (re::AssetPath *)*((void *)result + 7);
  int v48 = (const re::AssetPath *)*((void *)result + 6);
  uint64_t v49 = (os_unfair_lock_s *)*((void *)result + 5);
  uint64_t v46 = (_anonymous_namespace_ *)(*(void *)(*((void *)result + 4) + 8) + 48);
  uint64_t v3 = *(unsigned int *)(a2 + 192);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a2 + 176) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 22;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 192);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      uint64_t v8 = *(void *)(a2 + 176);
      int v60 = 0;
      uint64_t v9 = (const re::MaterialTextureParam *)(v8 + 88 * v7 + 48);
      long long v61 = 0u;
      long long v62 = 0u;
      uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v61, 0);
      long long v63 = 0u;
      long long v64 = 0u;
      BOOL v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v63, 0);
      uint64_t v65 = 0;
      int v54 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v55, 0);
      long long v57 = 0u;
      long long v58 = 0u;
      re::DynamicString::setCapacity(&v57, 0);
      uint64_t v59 = 0;
      if (generateTextureAssetPaths((re::AssetManager *)v49, v9, v48, v47, (re::AssetPath *)&v60, (re::AssetPath *)&v54))
      {
        uint64_t v13 = v3;
        uint64_t v14 = re::AssetManager::assetHandle(v49, (const re::AssetPath *)&v54, 1, (uint64_t *)v73);
        if (*(void *)&v74[4])
        {
          unsigned int v15 = atomic_load((unsigned int *)(*(void *)&v74[4] + 704));
          BOOL v16 = v15 == 2;
        }
        else
        {
          BOOL v16 = 0;
        }
        uint64_t v17 = *re::assetsLogObjects((re *)v14);
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          uint64_t v3 = v13;
          if (v18)
          {
            float v19 = v17;
            long long v52 = 0;
            uint64_t v53 = 0;
            uint64_t v51 = 0;
            uint64_t v50 = v55;
            re::DynamicString::setCapacity(&v50, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v54, (re::DynamicString *)&v50);
            uint64_t v20 = (char *)&v51 + 1;
            if (v51) {
              uint64_t v20 = v52;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v20;
            _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Texture at %s already loaded", (uint8_t *)&buf, 0xCu);

            if (v50 && (v51 & 1) != 0) {
              (*(void (**)(void))(*(void *)v50 + 40))();
            }
          }
        }
        else
        {
          if (v18)
          {
            uint64_t v21 = v17;
            long long v52 = 0;
            uint64_t v53 = 0;
            uint64_t v51 = 0;
            uint64_t v50 = v61;
            re::DynamicString::setCapacity(&v50, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v60, (re::DynamicString *)&v50);
            if (v51) {
              uint64_t v22 = v52;
            }
            else {
              uint64_t v22 = (char *)&v51 + 1;
            }
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            long long buf = (unint64_t)v55;
            re::DynamicString::setCapacity(&buf, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v54, (re::DynamicString *)&buf);
            uint64_t v23 = (char *)&buf + 9;
            if (BYTE8(buf)) {
              uint64_t v23 = v67;
            }
            *(_DWORD *)long long v69 = 136315394;
            uint64_t v70 = v22;
            __int16 v71 = 2080;
            __n128 v72 = v23;
            _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Preloading texture as %s into %s", v69, 0x16u);

            if (void)buf && (BYTE8(buf)) {
              (*(void (**)(void))(*(void *)buf + 40))();
            }
            if (v50 && (v51 & 1) != 0) {
              (*(void (**)(void))(*(void *)v50 + 40))();
            }
          }
          if (BYTE8(v63)) {
            char v24 = (char *)v64;
          }
          else {
            char v24 = (char *)&v63 + 9;
          }
          createAssetHandleAtPathFromFile((uint64_t)&v50, (uint64_t (****)(void))v49, (const re::AssetHandle *)v73, (uint64_t)v24, 0);
          uint64_t v3 = v13;
          if ((_BYTE)v50)
          {
            LOBYTE(buf) = 1;
            re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&buf + 8), (const re::AssetHandle *)&v51);
            re::DynamicArray<re::Optional<re::AssetHandle>>::add(v46, &buf);
            if ((_BYTE)buf) {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&buf + 8));
            }
          }
          re::Result<re::AssetHandle,re::DetailedError>::~Result(&v50);
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v73);
      }
      if ((void)v57)
      {
        if (BYTE8(v57)) {
          (*(void (**)(void))(*(void *)v57 + 40))();
        }
        long long v57 = 0u;
        long long v58 = 0u;
      }
      if (void)v55 && (BYTE8(v55)) {
        (*(void (**)(void))(*(void *)v55 + 40))();
      }
      if ((void)v63)
      {
        if (BYTE8(v63)) {
          (*(void (**)(void))(*(void *)v63 + 40))();
        }
        long long v63 = 0u;
        long long v64 = 0u;
      }
      __n128 result = (_anonymous_namespace_ *)v61;
      if (void)v61 && (BYTE8(v61)) {
        __n128 result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v61 + 40))();
      }
      if (*(_DWORD *)(a2 + 192) <= (v4 + 1)) {
        int v25 = v4 + 1;
      }
      else {
        int v25 = *(_DWORD *)(a2 + 192);
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v25 - 1 == v4) {
          break;
        }
        LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v4 + 1;
        int v26 = v7;
        if ((*(_DWORD *)(*(void *)(a2 + 176) + 88 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_61;
        }
      }
      int v26 = v25;
LABEL_61:
      LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v26;
    }
    while (v3 != v26);
  }
  uint64_t v27 = *(unsigned int *)(a2 + 240);
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (int *)(*(void *)(a2 + 224) + 8);
    while (1)
    {
      int v30 = *v29;
      v29 += 40;
      if (v30 < 0) {
        break;
      }
      if (v27 == ++v28)
      {
        LODWORD(v28) = *(_DWORD *)(a2 + 240);
        break;
      }
    }
  }
  else
  {
    LODWORD(v28) = 0;
  }
  if (v27 != v28)
  {
    uint64_t v31 = v28;
    int v45 = *(_DWORD *)(a2 + 240);
    do
    {
      uint64_t v32 = *(void *)(a2 + 224);
      int v60 = 0;
      unsigned int v33 = (const re::MaterialTextureParam *)(v32 + 160 * v31 + 48);
      long long v61 = 0u;
      long long v62 = 0u;
      BOOL v34 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v61, 0);
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v35 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v63, 0);
      uint64_t v65 = 0;
      int v54 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      BOOL v36 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v55, 0);
      long long v57 = 0u;
      long long v58 = 0u;
      re::DynamicString::setCapacity(&v57, 0);
      uint64_t v59 = 0;
      BOOL TextureAssetPaths = generateTextureAssetPaths((re::AssetManager *)v49, v33, v48, v47, (re::AssetPath *)&v60, (re::AssetPath *)&v54);
      if (TextureAssetPaths)
      {
        uint64_t v38 = *re::assetsLogObjects((re *)TextureAssetPaths);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          CGRect v39 = v38;
          long long v52 = 0;
          uint64_t v53 = 0;
          uint64_t v51 = 0;
          uint64_t v50 = v61;
          re::DynamicString::setCapacity(&v50, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)&v60, (re::DynamicString *)&v50);
          if (v51) {
            long long v40 = v52;
          }
          else {
            long long v40 = (char *)&v51 + 1;
          }
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          long long buf = (unint64_t)v55;
          re::DynamicString::setCapacity(&buf, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)&v54, (re::DynamicString *)&buf);
          long long v41 = (char *)&buf + 9;
          if (BYTE8(buf)) {
            long long v41 = v67;
          }
          *(_DWORD *)uint64_t v73 = 136315394;
          *(void *)int v74 = v40;
          *(_WORD *)&v74[8] = 2080;
          *(void *)&v74[10] = v41;
          _os_log_impl(&dword_233120000, v39, OS_LOG_TYPE_DEFAULT, "Preloading texture block texture as %s into %s", v73, 0x16u);

          if (void)buf && (BYTE8(buf)) {
            (*(void (**)(void))(*(void *)buf + 40))();
          }
          if (v50 && (v51 & 1) != 0) {
            (*(void (**)(void))(*(void *)v50 + 40))();
          }
          LODWORD(v27) = v45;
        }
        re::AssetManager::assetHandle(v49, (const re::AssetPath *)&v54, 1, (uint64_t *)v73);
        if (BYTE8(v63)) {
          uint64_t v42 = (char *)v64;
        }
        else {
          uint64_t v42 = (char *)&v63 + 9;
        }
        createAssetHandleAtPathFromFile((uint64_t)&v50, (uint64_t (****)(void))v49, (const re::AssetHandle *)v73, (uint64_t)v42, 0);
        if ((_BYTE)v50)
        {
          LOBYTE(buf) = 1;
          re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&buf + 8), (const re::AssetHandle *)&v51);
          re::DynamicArray<re::Optional<re::AssetHandle>>::add(v46, &buf);
          if ((_BYTE)buf) {
            re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&buf + 8));
          }
        }
        re::Result<re::AssetHandle,re::DetailedError>::~Result(&v50);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v73);
      }
      if ((void)v57)
      {
        if (BYTE8(v57)) {
          (*(void (**)(void))(*(void *)v57 + 40))();
        }
        long long v57 = 0u;
        long long v58 = 0u;
      }
      if (void)v55 && (BYTE8(v55)) {
        (*(void (**)(void))(*(void *)v55 + 40))();
      }
      if ((void)v63)
      {
        if (BYTE8(v63)) {
          (*(void (**)(void))(*(void *)v63 + 40))();
        }
        long long v63 = 0u;
        long long v64 = 0u;
      }
      __n128 result = (_anonymous_namespace_ *)v61;
      if (void)v61 && (BYTE8(v61)) {
        __n128 result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v61 + 40))();
      }
      if (*(_DWORD *)(a2 + 240) <= (v28 + 1)) {
        int v43 = v28 + 1;
      }
      else {
        int v43 = *(_DWORD *)(a2 + 240);
      }
      while (1)
      {
        uint64_t v31 = (v28 + 1);
        if (v43 - 1 == v28) {
          break;
        }
        LODWORD(v28) = v28 + 1;
        int v44 = v31;
        if ((*(_DWORD *)(*(void *)(a2 + 224) + 160 * v31 + 8) & 0x80000000) != 0) {
          goto LABEL_112;
        }
      }
      int v44 = v43;
LABEL_112:
      LODWORD(v28) = v44;
    }
    while (v27 != v44);
  }
  return result;
}

uint64_t re::DynamicArray<re::Optional<re::AssetHandle>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        int v6 = (re::AssetHandle *)(v3 + 8);
        do
        {
          if (*((unsigned char *)v6 - 8)) {
            re::AssetHandle::~AssetHandle(v6);
          }
          int v6 = (re::AssetHandle *)((char *)v6 + 32);
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

BOOL isAssetPathCustom(const re::AssetHandle *a1)
{
  re::AssetHandle::serializationString(a1, (re::DynamicString *)&v6);
  uint64_t v1 = v7 & 1;
  if (v7) {
    uint64_t v2 = *(const char **)&v8[7];
  }
  else {
    uint64_t v2 = v8;
  }
  int v3 = strcmp(v2, "custom");
  if (v6) {
    BOOL v4 = v1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v3 == 0;
}

BOOL generateTextureAssetPaths(re::AssetManager *a1, const re::MaterialTextureParam *this, const re::AssetPath *a3, const re::AssetPath *a4, re::AssetPath *a5, re::AssetPath *a6)
{
  v45[5] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 8) != 1 || !*re::MaterialTextureParam::serializationString(this, (uint64_t)this)) {
    return 0;
  }
  uint64_t v13 = re::MaterialTextureParam::serializationString(this, v12);
  uint64_t v14 = re::AssetManager::parseAssetPath(a1, v13, a3, 0, (uint64_t)v30);
  if (v30[0])
  {
    BOOL v16 = re::MaterialTextureParam::serializationString(this, v15);
    uint64_t v17 = re::AssetManager::parseAssetPath(a1, v16, a4, 0, (uint64_t)buf);
    BOOL v18 = buf[0] != 0;
    if (buf[0])
    {
      *(_DWORD *)a5 = v31;
      re::DynamicString::operator=((re::AssetPath *)((char *)a5 + 8), (re::DynamicString *)v32);
      re::DynamicString::operator=((re::AssetPath *)((char *)a5 + 40), (re::DynamicString *)v34);
      *((void *)a5 + 9) = v34[4];
      *(_DWORD *)a6 = HIDWORD(v40);
      re::DynamicString::operator=((re::AssetPath *)((char *)a6 + 8), (re::DynamicString *)((char *)&v42 + 2));
      re::DynamicString::operator=((re::AssetPath *)((char *)a6 + 40), (re::DynamicString *)v45);
      *((void *)a6 + 9) = v45[4];
    }
    else
    {
      uint64_t v20 = *re::assetsLogObjects((re *)v17);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        int v26 = v20;
        uint64_t v28 = re::MaterialTextureParam::serializationString(this, v27);
        if (v43) {
          uint64_t v29 = *(unsigned char **)&v44[7];
        }
        else {
          uint64_t v29 = v44;
        }
        *(_DWORD *)uint64_t v35 = 136315394;
        BOOL v36 = v28;
        __int16 v37 = 2080;
        uint64_t v38 = v29;
        _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Error in generateTextureAssetPaths parsing texture memory path '%s': '%s'", v35, 0x16u);
      }
    }
    re::Result<re::AssetPath,re::DetailedError>::~Result(buf);
  }
  else
  {
    float v19 = *re::assetsLogObjects((re *)v14);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = v19;
      char v24 = re::MaterialTextureParam::serializationString(this, v23);
      if (v32[16]) {
        int v25 = *(unsigned char **)&v33[7];
      }
      else {
        int v25 = v33;
      }
      *(_DWORD *)long long buf = 136315394;
      long long v40 = v24;
      __int16 v41 = 2080;
      uint64_t v42 = v25;
      _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Error in generateTextureAssetPaths parsing texture source path '%s': '%s'", buf, 0x16u);
    }
    BOOL v18 = 0;
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result(v30);
  return v18;
}

void createAssetHandleAtPathFromFile(uint64_t a1, uint64_t (****a2)(void), const re::AssetHandle *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a5;
  int v30 = &unk_26E6CA830;
  uint64_t v10 = [NSString stringWithUTF8String:a4];
  BOOL v11 = [v10 pathExtension];

  id v12 = v11;
  [v12 UTF8String];
  uint64_t v13 = (**a2[131])();
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 40))(&v25);
  if ((_BYTE)v25)
  {
    uint64_t v14 = v26;
    if (v9) {
      v9[2](v9, v26);
    }
    re::AssetManager::setAssetPointerForExistingAsset((re::AssetManager *)a2, v14, a3, 0, 1);
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v19, a3);
    *(unsigned char *)a1 = 1;
    *(_OWORD *)(a1 + 8) = v19;
    long long v19 = 0uLL;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v20;
    *(void *)&long long v20 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
  }
  else
  {
    if (v28) {
      uint64_t v15 = *(unsigned char **)&v29[7];
    }
    else {
      uint64_t v15 = v29;
    }
    re::DynamicString::format((re::DynamicString *)"Error in createAssetAtPathFromFile compiling asset '%s': '%s'", (re::DynamicString *)&v23, a4, v15);
    *(void *)&long long v19 = 100;
    *((void *)&v19 + 1) = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v23);
    uint64_t v16 = v21;
    uint64_t v17 = v22;
    *(unsigned char *)a1 = 0;
    long long v18 = v20;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v18;
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v17;
    if (v23 && (v24 & 1) != 0) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
  }
  if (!(_BYTE)v25 && v27 && (v28 & 1) != 0) {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
}

_anonymous_namespace_ *re::DynamicArray<re::Optional<re::AssetHandle>>::add(_anonymous_namespace_ *result, void *a2)
{
  int v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::AssetHandle>>::setCapacity(result, v8);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::AssetHandle>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = *((void *)v3 + 4);
  int v10 = *(unsigned __int8 *)a2;
  *(unsigned char *)(v9 + 32 * vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v10;
  if (v10)
  {
    BOOL v11 = (void *)(v9 + 32 * v4);
    v11[1] = 0;
    void v11[2] = 0;
    uint64_t v11[3] = 0;
    void v11[2] = a2[2];
    a2[2] = 0;
    uint64_t v12 = v11[1];
    v11[1] = 0;
    v11[1] = a2[1];
    a2[1] = v12;
    uint64_t v13 = v11[3];
    uint64_t v11[3] = a2[3];
    a2[3] = v13;
    unint64_t v4 = *((void *)v3 + 2);
  }
  *((void *)v3 + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::Optional<re::AssetHandle>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::Optional<re::AssetHandle>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        double v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 32 * v9;
        do
        {
          int v12 = *(unsigned __int8 *)(v8 + v10);
          LOBYTE(v7[v10 / 8]) = v12;
          if (v12)
          {
            uint64_t v13 = &v7[v10 / 8];
            uint64_t v14 = (void *)(v8 + v10);
            v13[1] = 0;
            id v13[2] = 0;
            uint64_t v13[3] = 0;
            id v13[2] = *(void *)(v8 + v10 + 16);
            void v14[2] = 0;
            uint64_t v15 = v7[v10 / 8 + 1];
            v13[1] = 0;
            v13[1] = *(void *)(v8 + v10 + 8);
            v14[1] = v15;
            uint64_t v16 = v7[v10 / 8 + 3];
            uint64_t v13[3] = *(void *)(v8 + v10 + 24);
            void v14[3] = v16;
          }
          if (*(unsigned char *)(v8 + v10)) {
            re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v10 + 8));
          }
          v10 += 32;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

unsigned char *re::Result<re::AssetHandle,re::DetailedError>::~Result(unsigned char *a1)
{
  if (*a1) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 8));
  }
  else {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  }
  return a1;
}

void ___ZL20_loadRenderGraphFilePN2re12AssetManagerEPKcS3_S3__block_invoke(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re::AssetPath *)*((void *)a1 + 4);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 144);
    if (v4)
    {
      uint64_t v5 = 16 * v4;
      uint64_t v6 = (uint64_t *)(*(void *)(a2 + 160) + 8);
      do
      {
        uint64_t v7 = re::dynamicCast<re::RenderGraphFullscreenNode *,re::RenderGraphNode *>(*v6);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = (re::DynamicString *)(v7 + 264);
          BOOL v10 = isAssetPathCustom((const re::AssetHandle *)(v7 + 264));
          if (v10)
          {
            uint64_t v11 = *re::assetsLogObjects((re *)v10);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              int v12 = v11;
              uint64_t v13 = *(void *)(v8 + 16);
              *(_DWORD *)long long buf = 136315138;
              uint64_t v15 = v13;
              _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Changing material path for Fullscreen node %s", buf, 0xCu);
            }
          }
        }
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
    }
  }
}

uint64_t re::dynamicCast<re::RenderGraphFullscreenNode *,re::RenderGraphNode *>(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v3 = &qword_268772000;
  while (1)
  {
    {
      uint64_t v10 = v2;
      uint64_t v3 = &qword_268772000;
      int v8 = v7;
      uint64_t v2 = v10;
      if (v8)
      {
        re::introspect<re::RenderGraphFullscreenNode>(void)::info = re::introspect_RenderGraphFullscreenNode(0);
        uint64_t v3 = &qword_268772000;
        uint64_t v2 = v10;
      }
    }
    if (v2 == v3[222]) {
      break;
    }
    uint64_t v4 = *(unsigned int *)(v2 + 56);
    if (v4)
    {
      for (int i = *(void **)(v2 + 64); ; ++i)
      {
        uint64_t v6 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v6[10] == 3) {
          break;
        }
        if (!--v4) {
          return 0;
        }
      }
      uint64_t v2 = *((void *)v6 + 2);
      if (v2) {
        continue;
      }
    }
    return 0;
  }
  return v1;
}

void ___ZL19loadRenderGraphFilePN2re12AssetManagerEPKcS3_U13block_pointerFS3_S3_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void *)(a2 + 144);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      int v7 = (uint64_t *)(*(void *)(a2 + 160) + 8);
      do
      {
        uint64_t v8 = re::dynamicCast<re::RenderGraphFullscreenNode *,re::RenderGraphNode *>(*v7);
        if (v8)
        {
          uint64_t v9 = (re::DynamicString *)(v8 + 264);
          re::AssetHandle::serializationString((re::AssetHandle *)(v8 + 264), (re::DynamicString *)&v12);
          if (v13) {
            uint64_t v10 = *(unsigned char **)&v14[7];
          }
          else {
            uint64_t v10 = v14;
          }
          uint64_t v11 = (re::AssetPath *)(*((uint64_t (**)(_anonymous_namespace_ *, unsigned char *))v4 + 2))(v4, v10);
          if (v12)
          {
            if (v13) {
              (*(void (**)(void))(*(void *)v12 + 40))();
            }
          }
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
  }
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736848;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736848;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEmitHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7368B0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7368B0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddBeforeEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736908;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736908;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736960;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736960;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddEncodedHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1, uint64_t a2)
{
  re::RenderFrameBox::get(*(void *)(*(void *)a2 + 32) + 344, *(void *)(*(void *)a2 + 40));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 16);
  return v3();
}

void *re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7369B8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7369B8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddPostEncodeWithBoundsHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736A10;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736A10;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddCompletedHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736A68;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736A68;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadAddScheduledHandler::$_0,void ()(re::RenderFrameWorkload *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736AC0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736AC0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderFrameWorkloadFinalCommandBufferAddPreCommitHandler::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 16;
}

void *std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100](unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t v10 = *(const re::AssetHandle **)(a2 + 8);
      uint64_t v11 = (re::AssetHandle *)operator new(0x18uLL);
      re::AssetHandle::AssetHandle(v11, v10);
      uint64_t result = 0;
      *a3 = std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100];
      a3[1] = v11;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v12 = *(void *)(a2 + 8);
      *a3 = std::__any_imp::_LargeHandler<re::AssetHandle>::__handle[abi:nn180100];
      a3[1] = v12;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v13 = a5 == &std::__any_imp::__unique_typeinfo<re::AssetHandle>::__id;
      if (v13) {
        uint64_t result = *(void **)(a2 + 8);
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      re::AssetHandle::~AssetHandle(*(re::AssetHandle **)(a2 + 8));
      operator delete(v9);
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t *re::make::shared::object<re::SkeletalPoseJointDefinition,re::FixedArray<re::StringID>,decltype(nullptr)>(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 256, 8);
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = *(void *)(a2 + 16);
  v8[1] = v6;
  *(void *)a1 = v5;
  return result;
}

void re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)int v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 40);
        do
        {
          if ((*(_DWORD *)(v14 - 4) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 5);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::Timeline const*,re::AssetHandle,re::Hash<re::Timeline const*>,re::EqualTo<re::Timeline const*>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 48 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 48 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 48 * v18 + 16) = *(v14 - 3);
            uint64_t v22 = (void *)(*(void *)(a1 + 16) + 48 * v18);
            uint64_t v22[3] = 0;
            _OWORD v22[4] = 0;
            uint64_t v22[5] = 0;
            _OWORD v22[4] = *(v14 - 1);
            *(v14 - 1) = 0;
            uint64_t v23 = v22[3];
            uint64_t v22[3] = 0;
            uint64_t v22[3] = *(v14 - 2);
            *(v14 - 2) = v23;
            uint64_t v24 = v22[5];
            uint64_t v22[5] = *v14;
            *uint64_t v14 = v24;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 6;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

void *re::Shareable<re::DynamicArray<re::AssetHandle>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736B18;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::AssetHandle>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736B18;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::introspect<re::JobService>()
{
  uint64_t v0 = &qword_268772000;
  {
    uint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::JobService>(void)::info = re::introspect_JobService(0);
      uint64_t v0 = &qword_268772000;
    }
  }
  return v0[401];
}

uint64_t re::Job::init<RERunJob::$_0>(RERunJob::$_0 &&)::{lambda(re::Job&)#1}::__invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
  *(void *)a1 = 0;
  return result;
}

uint64_t re::Job::init<void re::parallelFor<void({block_pointer} {__strong})(long long)>(re::JobService &,unsigned long,unsigned long,unsigned long,void({block_pointer} {__strong})(long long),BOOL)::{lambda(void)#1}>(void({block_pointer} {__strong})(long long)&&)::{lambda(re::Job&)#1}::__invoke(uint64_t result)
{
  uint64_t v1 = (void *)result;
  int v2 = *(unint64_t **)(result + 32);
  uint64_t v3 = (atomic_ullong *)(v2 + 2);
  unint64_t v4 = v2[1];
  while (1)
  {
    unint64_t add = atomic_fetch_add(v3, v4);
    if (add >= *v2) {
      break;
    }
    unint64_t v4 = v2[1];
    if (*v2 >= v4 + add) {
      unint64_t v6 = v4 + add;
    }
    else {
      unint64_t v6 = *v2;
    }
    if (add < v6)
    {
      do
      {
        uint64_t result = (*(uint64_t (**)(void))(v2[3] + 16))();
        ++add;
      }
      while (v6 != add);
      unint64_t v4 = v2[1];
    }
    uint64_t v3 = (atomic_ullong *)(v2 + 2);
  }
  *uint64_t v1 = 0;
  return result;
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::ecs2::System>,4ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::SharedPtr<re::ecs2::System>,4ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        uint64_t v14 = a1 + 3;
        if (v7) {
          unint64_t v15 = a1 + 3;
        }
        else {
          unint64_t v15 = (void *)a1[4];
        }
        if (v9)
        {
          uint64_t v16 = 8 * v9;
          do
          {
            *v14++ = *v15;
            *v15++ = 0;
            v16 -= 8;
          }
          while (v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = a1 + 3;
          }
          else {
            uint64_t v13 = (void *)a1[4];
          }
          uint64_t v17 = a1[1];
          if (v17)
          {
            uint64_t v18 = 8 * v17;
            int v19 = (void *)result;
            do
            {
              *v19++ = *v13;
              *v13++ = 0;
              v18 -= 8;
            }
            while (v18);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

float re::internal::makeEngineOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 - 1) >= 5) {
    int v2 = 0;
  }
  *(_WORD *)a2 = *(_WORD *)a1;
  *(_DWORD *)(a2 + 2) = *(_DWORD *)(a1 + 2);
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  float result = *(float *)(a1 + 16);
  *(float *)(a2 + 16) = result;
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 20);
  *(_DWORD *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v2;
  return result;
}

double re::internal::makeEngineOptions@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a2;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[5] = 0;
  void v3[6] = 0;
  v3[7] = 0;
  v3 += 4;
  re::DynamicString::setCapacity(v3, 0);
  v3[4] = *(void *)(a1 + 4);
  *((unsigned char *)v3 + 40) = *(unsigned char *)a1;
  double result = *(double *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *((double *)v3 + 6) = result;
  v3[7] = v6;
  *((_DWORD *)v3 + 16) = *(_DWORD *)(a1 + 32);
  *((unsigned char *)v3 + 68) = *(unsigned char *)(a1 + 36);
  *(_WORD *)((char *)v3 + 69) = *(_WORD *)(a1 + 37);
  *((unsigned char *)v3 + 71) = 0;
  return result;
}

double REGeomBuildBoxDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x1000100010001;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 8) = xmmword_234371EE0;
  *(_WORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 257;
  *(unsigned char *)(a1 + 26) = 0;
  return result;
}

double REGeomBuildBoxWithRoundedCornersDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x3000100010001;
  *(_WORD *)(a1 + 8) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_234371EF0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(void *)&double result = 16777473;
  *(_DWORD *)(a1 + 32) = 16777473;
  *(_WORD *)(a1 + 36) = 1;
  *(unsigned char *)(a1 + 38) = 0;
  return result;
}

double REGeomBuildCapsuleDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 65544;
  *(_WORD *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 4;
  double result = 2.00000047;
  *(void *)(a1 + 8) = 0x400000003F000000;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t REGeomBuildConeDefaultOptions()
{
  return 0x3F80000000010008;
}

double REGeomBuildCylinderDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 65544;
  double result = 0.0000305175853;
  *(void *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x3F0000003F800000;
  *(void *)(a1 + 12) = 0x10101013F000000;
  *(unsigned char *)(a1 + 20) = 0;
  return result;
}

float REGeomBuildPlaneDefaultOptions@<S0>(uint64_t a1@<X8>)
{
  int v7 = 65537;
  __int16 v8 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v9 = _D0;
  int v10 = 0;
  __int16 v11 = 257;
  int v12 = 2;
}

float anonymous namespace'::makeAPIOptions(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if ((v2 - 1) >= 5) {
    int v2 = 0;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v2;
  return result;
}

double REGeomBuildPyramidDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = result;
  *(_DWORD *)(a1 + 12) = 1065353216;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t REGeomBuildSphereDefaultOptions()
{
  return 0x3F00000000000008;
}

uint64_t REGeomBuildTetrahedronDefaultOptions()
{
  return 0x3F80000000000001;
}

double REGeomBuildTubeDefaultOptions@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 65544;
  double result = 0.00000190734908;
  *(void *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x3EC000003F800000;
  *(_DWORD *)(a1 + 12) = 1056964608;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t REGeomBuildExtrudedTextDefaultOptions@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v11, 0);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  re::DynamicString::setCapacity(&v15, 0);
  *(unsigned char *)a2 = 5;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = _D0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 33) = 4;
  *(_DWORD *)(a2 + 35) = 16843009;
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*v15 + 40))();
  }
  uint64_t result = (uint64_t)v11;
  if (v11 && (v12 & 1) != 0)
  {
    int v10 = *(uint64_t (**)(void))(*v11 + 40);
    return v10();
  }
  return result;
}

void *REPrimitiveBoxComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveBoxComponentSetOptions(uint64_t this, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 24);
  char v3 = *(unsigned char *)(a2 + 26);
  *(void *)(this + 28) = *(void *)a2;
  *(_OWORD *)(this + 36) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(this + 52) = v2;
  *(unsigned char *)(this + 5re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPrimitiveBoxComponentGetOptions@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 28);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(unsigned char *)(a1 + 52);
  *(_WORD *)(a2 + 25) = *(_WORD *)(a1 + 53);
  return result;
}

uint64_t REPrimitiveBoxComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 56) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveBoxComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t REPrimitiveBoxComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 57) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveBoxComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

void *REPrimitiveBoxWithRoundedCornersComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveBoxWithRoundedCornersComponentSetOptions(uint64_t this, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 28);
  __int16 v4 = *(_WORD *)(a2 + 36);
  char v5 = *(unsigned char *)(a2 + 38);
  *(void *)(this + 28) = *(void *)a2;
  *(_WORD *)(this + 36) = v2;
  *(_OWORD *)(this + 40) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(this + 56) = v3;
  *(_DWORD *)(this + 60) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v4;
  *(unsigned char *)(this + 66) = v5;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPrimitiveBoxWithRoundedCornersComponentGetOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 28);
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 36);
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 40);
  float result = *(float *)(a1 + 56);
  *(float *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 60);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 64);
  *(_WORD *)(a2 + 37) = *(_WORD *)(a1 + 65);
  return result;
}

uint64_t REPrimitiveBoxWithRoundedCornersComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 68) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveBoxWithRoundedCornersComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

uint64_t REPrimitiveBoxWithRoundedCornersComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 69) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveBoxWithRoundedCornersComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

void *REPrimitiveCapsuleComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveCapsuleComponentSetOptions(uint64_t this, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 4);
  __int16 v3 = *(_WORD *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 18);
  *(_DWORD *)(this + 28) = *(_DWORD *)a2;
  *(_WORD *)(this + 32) = v2;
  *(void *)(this + 36) = *(void *)(a2 + 8);
  *(_WORD *)(this + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  *(unsigned char *)(this + 46) = v4;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REPrimitiveCapsuleComponentGetOptions@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *(_WORD *)(a1 + 28);
  *(_DWORD *)(a2 + 2) = *(_DWORD *)(a1 + 30);
  double result = *(double *)(a1 + 36);
  *(double *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 44);
  *(_WORD *)(a2 + 17) = *(_WORD *)(a1 + 45);
  return result;
}

uint64_t REPrimitiveCapsuleComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveCapsuleComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t REPrimitiveCapsuleComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 49) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveCapsuleComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

void *REPrimitiveConeComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveConeComponentSetOptions(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(void *)(this + 28) = a2;
  *(void *)(this + 36) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveConeComponentGetOptions(uint64_t a1)
{
  return *(void *)(a1 + 28);
}

uint64_t REPrimitiveConeComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveConeComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

uint64_t REPrimitiveConeComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveConeComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 45);
}

void *REPrimitiveCylinderComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveCylinderComponentSetOptions(uint64_t this, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  char v3 = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(this + 28) = *(_DWORD *)a2;
  *(void *)(this + 32) = *(void *)(a2 + 4);
  *(_DWORD *)(this + 40) = v2;
  *(_DWORD *)(this + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(this + 48) = v3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPrimitiveCylinderComponentGetOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 28);
  *(void *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 32);
  float result = *(float *)(a1 + 40);
  *(float *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 44);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 48);
  return result;
}

uint64_t REPrimitiveCylinderComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 52) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveCylinderComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

uint64_t REPrimitiveCylinderComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 53) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveCylinderComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 53);
}

void *REPrimitivePlaneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitivePlaneComponentSetOptions(uint64_t a1, uint64_t a2)
{
  re::internal::makeEngineOptions(a2, (uint64_t)v4);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v4[12];
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

float REPrimitivePlaneComponentGetOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t REPrimitivePlaneComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 56) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitivePlaneComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t REPrimitivePlaneComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 57) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitivePlaneComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

void *REPrimitivePyramidComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitivePyramidComponentSetOptions(uint64_t this, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  __int16 v3 = *(_WORD *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 18);
  *(_WORD *)(this + 28) = *(_WORD *)a2;
  *(void *)(this + 32) = *(void *)(a2 + 4);
  *(_DWORD *)(this + 40) = v2;
  *(_WORD *)(this + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  *(unsigned char *)(this + 46) = v4;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPrimitivePyramidComponentGetOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *(_WORD *)(a1 + 28);
  *(void *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 32);
  float result = *(float *)(a1 + 40);
  *(float *)(a2 + 12) = result;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 44);
  *(_WORD *)(a2 + 17) = *(_WORD *)(a1 + 45);
  return result;
}

uint64_t REPrimitivePyramidComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitivePyramidComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t REPrimitivePyramidComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 49) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitivePyramidComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

void *REPrimitiveSphereComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveSphereComponentSetOptions(uint64_t this, uint64_t a2, int a3)
{
  *(void *)(this + 28) = a2 & 0xFFFFFFFF0000FFFFLL;
  *(_WORD *)(this + 36) = a3;
  *(unsigned char *)(this + 38) = BYTE2(a3);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

unint64_t REPrimitiveSphereComponentGetOptions(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 28) | ((unint64_t)*(unsigned int *)(a1 + 32) << 32);
}

uint64_t REPrimitiveSphereComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveSphereComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t REPrimitiveSphereComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 41) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveSphereComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

void *REPrimitiveTetrahedronComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveTetrahedronComponentSetOptions(uint64_t this, uint64_t a2, int a3)
{
  *(void *)(this + 28) = a2 & 0xFFFFFFFF0000FFFFLL;
  *(_WORD *)(this + 36) = a3;
  *(unsigned char *)(this + 38) = BYTE2(a3);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

unint64_t REPrimitiveTetrahedronComponentGetOptions(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 28) | ((unint64_t)*(unsigned int *)(a1 + 32) << 32);
}

uint64_t REPrimitiveTetrahedronComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveTetrahedronComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t REPrimitiveTetrahedronComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 41) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveTetrahedronComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

void *REPrimitiveTubeComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPrimitiveTubeComponentSetOptions(uint64_t this, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  __int16 v3 = *(_WORD *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 18);
  *(_DWORD *)(this + 28) = *(_DWORD *)a2;
  *(void *)(this + 32) = *(void *)(a2 + 4);
  *(_DWORD *)(this + 40) = v2;
  *(_WORD *)(this + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  *(unsigned char *)(this + 46) = v4;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPrimitiveTubeComponentGetOptions@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 28);
  *(void *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 32);
  float result = *(float *)(a1 + 40);
  *(float *)(a2 + 12) = result;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 44);
  *(_WORD *)(a2 + 17) = *(_WORD *)(a1 + 45);
  return result;
}

uint64_t REPrimitiveTubeComponentSetSplitMeshes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveTubeComponentGetSplitMeshes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t REPrimitiveTubeComponentSetGenerateRayTracingMetaData(uint64_t this, char a2)
{
  *(unsigned char *)(this + 49) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPrimitiveTubeComponentGetGenerateRayTracingMetaData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

uint64_t REPrimitiveShapeComponentSetCreateCollisionShape(uint64_t a1, char a2)
{
  char v4 = (void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 24);
  if (!re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    if (re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
    {
      char v5 = (unsigned char *)(a1 + 70);
      goto LABEL_11;
    }
    if (!re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
    {
      if (re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
      {
        char v5 = (unsigned char *)(a1 + 46);
        goto LABEL_11;
      }
      if (re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
      {
        char v5 = (unsigned char *)(a1 + 54);
        goto LABEL_11;
      }
      if (re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
      {
        goto LABEL_2;
      }
      if (!re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
      {
        if (re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3)|| re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
        {
          char v5 = (unsigned char *)(a1 + 42);
          goto LABEL_11;
        }
        if (!re::StringID::operator==(v4, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
        {
          re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Unhandled PrimitveComponent type", "!\"Unreachable code\"", "REPrimitiveShapeComponentSetCreateCollisionShape", 1002);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
      }
    }
    char v5 = (unsigned char *)(a1 + 50);
    goto LABEL_11;
  }
LABEL_2:
  char v5 = (unsigned char *)(a1 + 58);
LABEL_11:
  *char v5 = a2;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPrimitiveShapeComponentGetCreateCollisionShape(unsigned __int8 *a1)
{
  int v2 = (void *)((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 40))(a1) + 24);
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
LABEL_2:
    __int16 v3 = a1 + 58;
    return *v3;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    __int16 v3 = a1 + 70;
    return *v3;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    goto LABEL_6;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    __int16 v3 = a1 + 46;
    return *v3;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    __int16 v3 = a1 + 54;
    return *v3;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    goto LABEL_2;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    goto LABEL_6;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3)|| re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
    __int16 v3 = a1 + 42;
    return *v3;
  }
  if (re::StringID::operator==(v2, (void *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 3))
  {
LABEL_6:
    __int16 v3 = a1 + 50;
    return *v3;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Unhandled PrimitveComponent type", "!\"Unreachable code\"", "REPrimitiveShapeComponentGetCreateCollisionShape", 1058);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REEngineGetCount()
{
  return atomic_load((unsigned int *)&re::Engine::s_instanceCount);
}

uint64_t REEngineGetMaxCount()
{
  return 8;
}

re::Engine *REEngineCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  int v2 = (re::Engine *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 1424, 8);
  return re::Engine::Engine(v2);
}

uint64_t REEngineGetShared()
{
  return re::Engine::s_sharedEngine;
}

uint64_t REEngineSetShared(uint64_t result)
{
  re::Engine::s_sharedEngine = result;
  return result;
}

void REEngineDefaultConfig(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
}

BOOL REEngineInit(re::Engine *a1, _OWORD *a2, uint64_t a3)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return REEngineInitWithDevice(a1, (unsigned __int8 *)v5, a3, 0);
}

BOOL REEngineInitWithDevice(re::Engine *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 72;
  int v11 = 1;
  REEngineDefaultConfigEx((uint64_t)&v10);
  int v14 = *((_DWORD *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v12 = *((void *)a2 + 1);
  uint64_t v13 = v8;
  int8x8_t v15 = vorr_s8((int8x8_t)(*(void *)&v15 & 0xFFFFFF7FFFFFFF7FLL), (int8x8_t)vdup_n_s32(*a2 << 7));
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  return REEngineInitEx(a1, (uint64_t)&v10);
}

uint64_t REEngineDefaultConfigEx(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!_REEngineConfigValidateSize((unint64_t *)a1)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 8);
      v8[0] = 67109120;
      v8[1] = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "REEngineDefaultConfigEx was called with unknown version %d", (uint8_t *)v8, 8u);
    }

    return 0;
  }
  unint64_t v2 = *(void *)a1;
  bzero((void *)a1, *(void *)a1);
  *(void *)a1 = v2;
  uint64_t v3 = 1;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = MEMORY[0x263EF83A0];
  *(unsigned char *)(a1 + 69) = 1;
  if (_os_feature_enabled_impl()) {
    int v4 = -73857;
  }
  else {
    int v4 = -77953;
  }
  *(_DWORD *)(a1 + 36) = v4;
  *(_DWORD *)(a1 + 40) = v4;
  if (v2 >= 0x39)
  {
    *(void *)(a1 + 56) = 0;
    if (v2 >= 0x41)
    {
      *(_DWORD *)(a1 + 64) |= 0x200u;
      if (v2 >= 0x45) {
        *(unsigned char *)(a1 + 68) = 0;
      }
    }
  }
  return v3;
}

BOOL REEngineInitEx(re::Engine *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  BOOL result = _REEngineConfigValidateSize((unint64_t *)a2);
  if (result)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      Default = (re::DynamicString *)REEngineConfigurationCreateDefault((re *)result);
      uint64_t v6 = (uint64_t)Default;
      if (*(_DWORD *)(a2 + 8) == 1)
      {
        REEngineConfigurationSetInstanceID(Default, *(char **)(a2 + 16));
        *(void *)(v6 + 192) = *(void *)(a2 + 24);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(a2 + 32);
        *(void *)(v6 + 28) = *(void *)(a2 + 36);
        *(_DWORD *)(v6 + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 44);
        re::ObjCObject::operator=((void **)(v6 + 40), *(void **)(a2 + 48));
        *(unsigned char *)(v6 + 239) = *(unsigned char *)(a2 + 69);
        if (*(void *)a2 >= 0x39uLL)
        {
          re::ObjCObject::operator=((void **)(v6 + 88), *(void **)(a2 + 56));
          if (*(void *)a2 >= 0x41uLL)
          {
            REEngineConfigurationSetRenderFlags(v6, *(_DWORD *)(a2 + 64));
            if (*(void *)a2 >= 0x45uLL) {
              *(unsigned char *)(v6 + 209) = *(unsigned char *)(a2 + 68);
            }
          }
        }
      }
      re::Engine::init(a1, (const re::EngineConfiguration *)(v6 + 24));
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a2 + 8);
      v9[0] = 67109120;
      v9[1] = v8;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "REEngineInitEx was called with unknown version %d", (uint8_t *)v9, 8u);
    }

    return 0;
  }
  return result;
}

BOOL _REEngineConfigValidateSize(unint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v2 = *a1;
  if (*a1 <= 0x37)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = *a1;
      int v7 = 134218240;
      unint64_t v8 = v6;
      __int16 v9 = 2048;
      uint64_t v10 = 56;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "REEngineConfigurationEx size %zu is smaller than smallest known size %zu", (uint8_t *)&v7, 0x16u);
    }
    goto LABEL_11;
  }
  if (v2 >= 0x49)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v4 = *a1;
      int v7 = 134218240;
      unint64_t v8 = v4;
      __int16 v9 = 2048;
      uint64_t v10 = 72;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "REEngineConfigurationEx size %zu is larger than largest known size %zu", (uint8_t *)&v7, 0x16u);
    }
LABEL_11:
  }
  return v2 > 0x37;
}

void REEngineInitWithConfiguration(re::Engine *a1, uint64_t a2)
{
}

uint64_t REEngineGetUserData(uint64_t a1)
{
  return *(void *)(a1 + 584);
}

uint64_t REEngineGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 640);
}

uint64_t REEngineSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(result + 640) = a2;
  return result;
}

re::EventBus::EventInfo *REEngineSetCallbacksEx(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    __int16 v9 = re::Event<re::Engine>::createSubscription(REEventHandlerResult (*)(re::Engine*))::{lambda(re::Engine*,re::Event<re::Engine>::Subscription const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1208), (uint64_t)&v6);
  }
  uint64_t v7 = a3;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  __int16 v9 = re::Event<re::Engine>::createSubscription(REEventHandlerResult (*)(re::Engine*))::{lambda(re::Engine*,re::Event<re::Engine>::Subscription const&)#1}::__invoke;
  re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription((_anonymous_namespace_ *)(a1 + 1296), (uint64_t)&v6);
  return re::Engine::updateRaiseUpdateEventScheduleState((re::Engine *)a1);
}

void REEngineUnsetCallbacksEx(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *((void *)&v5 + 1) = a2;
    uint64_t v6 = 0;
    *(void *)&long long v5 = 0;
    uint64_t v7 = re::Event<re::Engine>::createSubscription(REEventHandlerResult (*)(re::Engine*))::{lambda(re::Engine*,re::Event<re::Engine>::Subscription const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::removeSubscription(a1 + 1208, &v5);
  }
  *((void *)&v5 + 1) = a3;
  uint64_t v6 = 0;
  *(void *)&long long v5 = 0;
  uint64_t v7 = re::Event<re::Engine>::createSubscription(REEventHandlerResult (*)(re::Engine*))::{lambda(re::Engine*,re::Event<re::Engine>::Subscription const&)#1}::__invoke;
  re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::removeSubscription(a1 + 1296, &v5);
}

re::InputManager *REEngineGetAcceptingInput(uint64_t a1, re::InputManager *a2)
{
  BOOL result = *(re::InputManager **)(a1 + 896);
  if (result) {
    return (re::InputManager *)re::InputManager::isSubscribed(result, a2);
  }
  return result;
}

uint64_t REEngineGetServiceLocator(uint64_t a1)
{
  return *(void *)(a1 + 648);
}

uint64_t REEngineGetEventBus(uint64_t a1)
{
  return *(void *)(a1 + 1384);
}

uint64_t REEngineGetCurrentTime(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)re::ServiceLocator::service<re::SimulationTimer>(*(void *)(a1 + 648)) + 48);
  return v1();
}

uint64_t re::ServiceLocator::service<re::SimulationTimer>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::SimulationTimer>(a1);
  if (!result)
  {
    unint64_t v2 = (re::internal *)re::introspect<re::SimulationTimer>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t v3 = (re::internal *)re::introspect<re::SimulationTimer>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      long long v5 = *(unsigned char **)&v8[7];
    }
    else {
      long long v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REEngineTimeReset(uint64_t a1)
{
  uint64_t v1 = re::ServiceLocator::service<re::SimulationTimer>(*(void *)(a1 + 648));
  (*(void (**)(uint64_t))(*(void *)v1 + 144))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 128);
  return v2(v1);
}

float REEngineGetPreferredFramesPerSecond(uint64_t a1)
{
  return *(float *)(a1 + 1168);
}

uint64_t REEngineUsesMetal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 576);
}

uint64_t REEngineGetConfigEx(uint64_t a1, uint64_t a2)
{
  uint64_t result = REEngineDefaultConfigEx(a2);
  *(void *)(a2 + 36) = *(void *)(a1 + 420);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 472);
  *(void *)(a2 + 48) = *(void *)(a1 + 432);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 584);
  *(_DWORD *)(a2 + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a1 + 476);
  unint64_t v5 = *(void *)a2;
  if (*(void *)a2 < 0x39uLL)
  {
    if (v5 < 0x11) {
      return result;
    }
  }
  else
  {
    *(void *)(a2 + 56) = *(void *)(a1 + 480);
    if (v5 >= 0x41)
    {
      if (*(unsigned char *)(a1 + 562)) {
        *(_DWORD *)(a2 + 64) &= 2u;
      }
      if (*(unsigned char *)(a1 + 563)) {
        *(_DWORD *)(a2 + 64) &= 8u;
      }
    }
  }
  unint64_t v6 = *(void *)(a1 + 448);
  unint64_t v7 = v6 >> 1;
  if ((v6 & 1) == 0) {
    unint64_t v7 = v6 >> 1;
  }
  if (v7)
  {
    if (v6) {
      uint64_t v8 = *(void *)(a1 + 456);
    }
    else {
      uint64_t v8 = a1 + 449;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(a2 + 16) = v8;
  return result;
}

double REEngineGetDeltaTime(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 912);
  if (!v1) {
    return 0.0;
  }
  (*(void (**)(void))(*(void *)v1 + 24))();
  return result;
}

float REEngineGetDeadlineDeltaTime(uint64_t a1)
{
  return re::Scheduler::nextScheduledDelta(*(re::Scheduler **)(a1 + 680));
}

uint64_t REEngineSetAnimationUpdateInterval(uint64_t a1, float a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 <= 0.001) {
    char v3 = 3;
  }
  else {
    char v3 = 2;
  }
  if (a2 <= 0.001) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (a2 <= 0.001) {
    a2 = 0.033333;
  }
  v9[0] = v3;
  v9[1] = v4;
  float v10 = a2;
  char v11 = 0;
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::AnimationService>(*(void *)(a1 + 648));
  BOOL v6 = v5 != 0;
  if (v5) {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 32))(v5, v9);
  }
  uint64_t v7 = re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(*(void *)(a1 + 648));
  if (v7)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 32))(v7, v9);
    return 1;
  }
  return v6;
}

BOOL REEngineSetRaiseUpdateEventInterval(uint64_t a1, float a2)
{
  if (a1)
  {
    if (a2 <= 0.001)
    {
      LOWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 259;
      float v5 = 0.033333;
    }
    else
    {
      LOWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 517;
      float v5 = a2;
    }
    char v6 = 0;
    re::Engine::setRaiseUpdateEventFrameTaskOptions(a1, &v4);
  }
  return a1 != 0;
}

re::internal *REEngineEnterFrame(re::internal *result, re::Engine *a2, float a3)
{
  if (result) {
    return (re::internal *)re::internal::engineEnterFrameWithTimeDelta(result, a2, a3);
  }
  return result;
}

double *REEngineEnterFrameWithTargetDisplayTime(double *result, re::Engine *a2, double a3, float a4)
{
  if (result)
  {
    result[148] = a3;
    return (double *)re::internal::engineEnterFrameWithTimeDelta((re::internal *)result, a2, a4);
  }
  return result;
}

re::internal *REEngineFramePrepare(re::internal *result, re::Engine *a2, float a3)
{
  if (result)
  {
    char v3 = (int *)result;
    re::internal::engineEnterFrameWithTimeDelta(result, a2, a3);
    return (re::internal *)re::internal::engineExecutePhase(v3, 2);
  }
  return result;
}

int *REEngineFramePrepareEx(int *result)
{
  if (result) {
    return (int *)re::internal::engineExecutePhase(result, 2);
  }
  return result;
}

int *REEngineFrameSimulate(int *result)
{
  if (result) {
    return (int *)re::internal::engineExecutePhase(result, 3);
  }
  return result;
}

int *REEngineFrameCommit(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    re::internal::engineExecutePhase(result, 4);
    re::internal::engineExecutePhase(v1, 5);
    re::internal::engineExecutePhase(v1, 6);
    return (int *)re::internal::engineExecutePhase(v1, 7);
  }
  return result;
}

int *REEngineFrameCommitEx(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    re::internal::engineExecutePhase(result, 4);
    re::internal::engineExecutePhase(v1, 5);
    return (int *)re::internal::engineExecutePhase(v1, 6);
  }
  return result;
}

int *REEngineFrameExit(int *result)
{
  if (result) {
    return (int *)re::internal::engineExecutePhase(result, 7);
  }
  return result;
}

uint64_t REEngineEnqueueOutputDeviceSystems(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 408))
  {
    *(unsigned char *)(a1 + 408) = 1;
    if (*(void *)(a1 + 680)) {
      re::Scheduler::setEnabled(*(void *)(a1 + 680), a1 + 336, 1);
    }
  }
  return 1;
}

uint64_t REEngineSetOutputDeviceSystemsEnabled(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 408) != a2)
  {
    *(unsigned char *)(result + 408) = a2;
    if (*(void *)(result + 680)) {
      return re::Scheduler::setEnabled(*(void *)(result + 680), result + 336, a2);
    }
  }
  return result;
}

uint64_t REEngineSetFrameTasksEnabled(uint64_t a1, __int16 a2, int a3)
{
  char v6 = *(re::Scheduler **)(REServiceLocatorGetECSService(*(void *)(a1 + 648)) + 40);
  if (!v6) {
    return 0;
  }
  frameTasksFromEngineServiceMask((_anonymous_namespace_ *)&v14, a2);
  uint64_t v7 = v16;
  if (v15)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v15;
    float v10 = (unsigned __int8 *)(v16 + 4);
    do
    {
      unint64_t v11 = *(void *)(a1 + 8 * *v10 + 104);
      if (v11 != -1)
      {
        re::Scheduler::setEnabled(v6, v11, a3);
        uint64_t v8 = *((_DWORD *)v10 - 1) | v8;
      }
      v10 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v14) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v8;
}

_anonymous_namespace_ *frameTasksFromEngineServiceMask(_anonymous_namespace_ *result, __int16 a2)
{
  char v3 = result;
  *((void *)result + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)double result = 0;
  *((_DWORD *)result + 6) = 0;
  if ((a2 & 4) != 0)
  {
    LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 4;
    BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 9;
    double result = re::DynamicArray<re::BlurPlaneTypeData>::add(result, &v4);
    if ((a2 & 8) == 0)
    {
LABEL_3:
      if ((a2 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a2 & 8) == 0)
  {
    goto LABEL_3;
  }
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 8;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 8;
  re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 8;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 17;
  double result = re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  if ((a2 & 0x20) == 0)
  {
LABEL_4:
    if ((a2 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 32;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 14;
  double result = re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  if ((a2 & 0x10) == 0)
  {
LABEL_5:
    if ((a2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 16;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 23;
  double result = re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  if ((a2 & 0x40) == 0)
  {
LABEL_6:
    if ((a2 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 64;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 3;
  double result = re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  if ((a2 & 0x100) == 0)
  {
LABEL_7:
    if ((a2 & 0x80) == 0) {
      return result;
    }
    goto LABEL_8;
  }
LABEL_15:
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 256;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 2;
  re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 256;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 20;
  double result = re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  if ((a2 & 0x80) == 0) {
    return result;
  }
LABEL_8:
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 128;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 6;
  re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
  LODWORD(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 128;
  BYTE4(vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 18;
  return re::DynamicArray<re::BlurPlaneTypeData>::add(v3, &v4);
}

uint64_t REEngineAreFrameTasksEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(REServiceLocatorGetECSService(*(void *)(a1 + 648)) + 40);
  if (!v4) {
    return 0;
  }
  frameTasksFromEngineServiceMask((_anonymous_namespace_ *)&v11, a2);
  uint64_t v5 = v13;
  if (v12)
  {
    uint64_t v6 = v4 + 128;
    uint64_t v7 = 8 * v12;
    uint64_t v8 = (unsigned __int8 *)(v13 + 4);
    do
    {
      unint64_t v9 = *(void *)(a1 + 8 * *v8 + 104);
      if (v9 == -1 || (re::DynamicBitset<unsigned long long,256ul>::getBit(v6, v9) & 1) == 0) {
        a2 = a2 & ~*((_DWORD *)v8 - 1);
      }
      v8 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  if (v11 && v5) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return a2;
}

uint64_t REEngineCreateOverlayForRealityRenderer(re *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E6C6FF0;
  *(_OWORD *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(unsigned char *)(v3 + 56) = 8;
  re::EngineOverlay::init(v4, a1);
  return v3;
}

void REEngineOverlaySetRealityRendererSceneGroup(uint64_t a1, uint64_t a2)
{
  if (a1) {
    re::EngineOverlay::setRealityRendererSceneGroup(a1, a2);
  }
}

void REEngineOverlayEnterFrame(uint64_t a1, uint64_t a2, float a3)
{
  if (a1)
  {
    re::ManualClock::update(*(void *)(a1 + 32), a3, a2);
    re::EngineOverlay::executePhase(a1, 1u);
  }
}

void REEngineOverlayFramePrepare(uint64_t a1)
{
  if (a1) {
    re::EngineOverlay::executePhase(a1, 2u);
  }
}

void REEngineOverlayFrameSimulate(uint64_t a1)
{
  if (a1) {
    re::EngineOverlay::executePhase(a1, 3u);
  }
}

void REEngineOverlayFrameCommit(uint64_t a1)
{
  if (a1)
  {
    re::EngineOverlay::executePhase(a1, 4u);
    re::EngineOverlay::executePhase(a1, 5u);
    re::EngineOverlay::executePhase(a1, 6u);
  }
}

void REEngineOverlayFrameExit(uint64_t a1)
{
  if (a1) {
    re::EngineOverlay::executePhase(a1, 7u);
  }
}

BOOL REEngineOverlayIsEngineInsideTick(BOOL result)
{
  if (result) {
    return *(_DWORD *)(*(void *)(result + 24) + 1200) > 0;
  }
  return result;
}

double REEngineOverlayGetCurrentTime(uint64_t a1)
{
  if (a1) {
    return *(double *)(*(void *)(a1 + 40) + 32);
  }
  else {
    return -1.0;
  }
}

uint64_t re::Event<re::Engine>::createSubscription(REEventHandlerResult (*)(re::Engine*))::{lambda(re::Engine*,re::Event<re::Engine>::Subscription const&)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t re::introspect<re::SimulationTimer>()
{
  uint64_t v0 = &qword_268772000;
  {
    uint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::SimulationTimer>(void)::info = re::introspect_SimulationTimer(0);
      uint64_t v0 = &qword_268772000;
    }
  }
  return v0[357];
}

uint64_t REEntitlementServiceSetAllowAnyShaderLibraryForPeer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t REEntitlementServiceSetAllowLimitedRenderAssetsForPeer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t REEntitlementServiceRemovePeer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t REEntitlementServiceSetAllowRenderOnTopSPIForPeer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t REEntitlementServiceSetAllowCARESyncBackForPeer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void *REGroundingShadowComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *addGroundingShadowComponentToEntitySubtree(void *result, int a2)
{
  uint64_t v3 = result;
  if (result[22]
    && (double result = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) == 0)
  {
    double result = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v3 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!a2) {
      return result;
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v4 = v3[41];
  if (v4)
  {
    uint64_t v5 = (re::ecs2::Entity **)v3[43];
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      double result = (void *)addGroundingShadowComponentToEntitySubtree(v7, 1);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void removeGroundingShadowComponentFromEntitySubtree(re::ecs2::Entity *a1, int a2)
{
  re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (a2)
  {
    uint64_t v4 = *((void *)a1 + 41);
    if (v4)
    {
      uint64_t v5 = (re::ecs2::Entity **)*((void *)a1 + 43);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5++;
        removeGroundingShadowComponentFromEntitySubtree(v7, 1);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

uint64_t REGroundingShadowComponentSetCastsShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 25) = a2;
  *(unsigned char *)(a1 + 27) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentSetCastsIBLShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 25) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentSetCastsMeshShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 27) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentSetReceivesShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 26) = a2;
  *(unsigned char *)(a1 + 28) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentSetReceivesIBLShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 26) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentSetReceivesMeshShadow(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 28) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

BOOL REGroundingShadowComponentGetCastsShadow(uint64_t a1)
{
  return *(unsigned char *)(a1 + 25) || *(unsigned char *)(a1 + 27) != 0;
}

uint64_t REGroundingShadowComponentGetCastsIBLShadow(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REGroundingShadowComponentGetCastsMeshShadow(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 27);
}

BOOL REGroundingShadowComponentGetReceivesShadow(uint64_t a1)
{
  return *(unsigned char *)(a1 + 26) || *(unsigned char *)(a1 + 28) != 0;
}

uint64_t REGroundingShadowComponentGetReceivesIBLShadow(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t REGroundingShadowComponentGetReceivesMeshShadow(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t REGroundingShadowComponentSetFadeBehaviorNearPhysicalObjects(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REGroundingShadowComponentGetFadeBehaviorNearPhysicalObjects(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t RETextureBuilderCreateWithDescriptor(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 112, 8);
  re::TextureBuilder::TextureBuilder(v7, a1, v5);
  [(re *)v5 pixelFormat];
  [(re *)v5 textureType];
  if ((re::isSupportedPixelFormat() & 1) == 0)
  {
    [(re *)v5 pixelFormat];
    uint64_t Name = MTLPixelFormatGetName();
    re::DynamicString::format((re::DynamicString *)"Texture compression: unsupported pixel format %s", (re::DynamicString *)&v12, Name);
    if (v13) {
      float v10 = *(re::CoreREAssetUtils **)&v14[7];
    }
    else {
      float v10 = (re::CoreREAssetUtils *)v14;
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v10, a3, v9);
    if (v12 && (v13 & 1) != 0) {
      (*(void (**)(void))(*(void *)v12 + 40))();
    }

    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t RETextureBuilderSetSemantic(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t RETextureBuilderSetColorGamut(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

void RETextureBuilderEncodeBlitCommands(uint64_t a1, void *aBlock)
{
  uint64_t v4 = (void (**)(id, id, void))_Block_copy(aBlock);
  if (re::TextureBuilder::beginEncodeBlitCommands((re::TextureBuilder *)a1))
  {
    id v3 = *(id *)(a1 + 104);
    v4[2](v4, v3, *(void *)(a1 + 88));
  }
}

void *RETextureBuilderCreateAssetSync(re::TextureBuilder *a1, void *a2)
{
  re::TextureBuilder::makeAssetSync(a1, (uint64_t)v6);
  if (v6[0])
  {
    a2 = v7;
    id v3 = (char *)v7 + 8;
  }
  else if (a2)
  {
    id v4 = v7;
    *a2 = v4;
    CFRetain(v4);
    a2 = 0;
  }
  re::Result<re::AssetHandle,re::WrappedError>::~Result(v6);
  return a2;
}

uint64_t (***RETextureBuilderCreateAssetAsync(uint64_t a1, void *aBlock))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  id v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E736B60;
  v6[1] = v3;
  void v6[3] = v4;
  _OWORD v6[4] = v6;
  re::TextureBuilder::makeAssetAsync(a1, (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::destroyCallable((uint64_t)v6);
}

uint64_t re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

unsigned __int8 *re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::operator()(uint64_t a1, uint64_t a2)
{
  v5[0] = *(unsigned char *)a2;
  if (v5[0])
  {
    uint64_t v2 = *(void *)(a2 + 16);
    uint64_t v6 = *(void **)(a2 + 8);
    uint64_t v7 = v2;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
  else
  {
    id v3 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = v3;
    (*(void (**)(void, void, void *))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), 0, v3);
  }
  return re::Result<re::AssetHandle,re::WrappedError>::~Result(v5);
}

void *re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736B60;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736B60;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETextureBuilderCreateAssetAsync::$_0,void ()(re::Result<re::AssetHandle,re::WrappedError>)>::size()
{
  return 16;
}

uint64_t REPinAlignmentCreate(char a1, uint64_t *a2, uint64_t *a3, char a4, float a5)
{
  v30[0] = a5;
  if (a2)
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v9 = a2[2];
    uint64_t v10 = a2[3];
    if (a3)
    {
LABEL_3:
      uint64_t v12 = *a3;
      uint64_t v11 = a3[1];
      uint64_t v13 = a3[2];
      uint64_t v14 = a3[3];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0x3F80000000000000;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  uint64_t v14 = 0x3F80000000000000;
LABEL_6:
  uint64_t v29 = 0;
  memset(v27, 0, sizeof(v27));
  int v28 = 0;
  if (a5 != 0.0) {
    re::DynamicArray<float>::add((_anonymous_namespace_ *)v27, v30);
  }
  LOBYTE(v20) = a1;
  *(void *)&long long v21 = v8;
  *((void *)&v21 + 1) = v7;
  *(void *)&long long v22 = v9;
  *((void *)&v22 + 1) = v10;
  *(void *)&long long v23 = v12;
  *((void *)&v23 + 1) = v11;
  *(void *)&long long v24 = v13;
  *((void *)&v24 + 1) = v14;
  char v25 = a4;
  uint64_t v15 = (re *)re::DynamicArray<float>::DynamicArray((uint64_t)v26, v27);
  uint64_t v16 = re::globalAllocators(v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 160, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v17, 0);
  *(void *)uint64_t v17 = &unk_26E736BC8;
  *(unsigned char *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 48) = 0u;
  *(void *)(v17 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v17 + 72) = 0x3F80000000000000;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = v24;
  *(void *)(v17 + 152) = 0;
  *(void *)(v17 + 128) = 0;
  *(void *)(v17 + 136) = 0;
  *(void *)(v18 + 120) = 0;
  *(_DWORD *)(v17 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_OWORD *)(v17 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
  *(_OWORD *)(v17 + 80) = v23;
  *(_OWORD *)(v17 + 32) = v20;
  *(_OWORD *)(v17 + 48) = v21;
  *(unsigned char *)(v17 + 112) = v25;
  re::DynamicArray<float>::operator=(v18 + 120, v26);
  if (v26[0] && v26[4]) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  if (v27[0] && v29) {
    (*(void (**)(void))(*(void *)v27[0] + 40))();
  }
  return v17;
}

void *REPinComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPinCreate(_anonymous_namespace_ *a1, int32x4_t *a2, uint64_t a3, uint64_t *a4, __n128 a5, __n128 a6)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = (const char *)a1;
  uint64_t v28 = *MEMORY[0x263EF8340];
  v26[0] = a5;
  v26[1] = a6;
  if (a2)
  {
    int32x4_t v9 = a2[1];
    int32x4_t v24 = *a2;
    int32x4_t v25 = v9;
  }
  else
  {
    int32x4_t v24 = vdupq_n_s32(0x7F800000u);
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
    int32x4_t v25 = v10;
  }
  uint64_t v23 = 0;
  memset(v21, 0, sizeof(v21));
  int v22 = 0;
  if (a3 && a4)
  {
    do
    {
      uint64_t v11 = *v6++;
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::PinAlignment>::add((_anonymous_namespace_ *)v21, v11 + 32);
      --v7;
    }
    while (v7);
  }
  *(void *)&v20.var0 = 0;
  v20.var1 = "";
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  uint64_t v19 = 0x3F80000000000000;
  v15[0] = 0;
  re::ecs2::Pin::Pin((uint64_t)v27, &v20, v26, &v17, v15, &v24, v21);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v27);
  if (v15[0]) {
    re::StringID::destroyString((re::StringID *)&v16);
  }
  re::StringID::destroyString((re::StringID *)&v20);
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v21);
  return REPinRef;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::PinAlignment>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 7);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v5 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(v5 + 48) = v8;
  *(_OWORD *)(v5 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v9;
  *(_OWORD *)(v5 + 32) = v7;
  uint64_t result = re::DynamicArray<float>::DynamicArray(v5 + 88, (uint64_t *)(a2 + 88));
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t anonymous namespace'::createREPinRef(_anonymous_namespace_ *this, const re::ecs2::Pin *a2)
{
  id v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 240, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E736C10;
  *(void *)(v4 + 32) = &unk_26E703090;
  *(void *)(v5 + 40) = 0;
  *(void *)(v4 + 48) = "";
  *(_OWORD *)(v4 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0x3F80000000000000;
  *(void *)&long long v6 = 0x7F0000007FLL;
  *((void *)&v6 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v4 + 96) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v4 + 112) = v6;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v4 + 152) = 0;
  *(void *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0x3F80000000000000;
  *(unsigned char *)(v4 + 208) = 0;
  re::StringID::operator=((unint64_t *)(v5 + 40), (uint64_t *)this + 1);
  long long v7 = *((_OWORD *)this + 2);
  long long v8 = *((_OWORD *)this + 3);
  long long v9 = *((_OWORD *)this + 5);
  *(_OWORD *)(v4 + 96) = *((_OWORD *)this + 4);
  *(_OWORD *)(v4 + 112) = v9;
  *(_OWORD *)(v4 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v7;
  *(_OWORD *)(v4 + 80) = v8;
  re::DynamicArray<re::ecs2::PinAlignment>::operator=(v4 + 128, (uint64_t *)this + 12);
  long long v10 = *((_OWORD *)this + 10);
  *(_OWORD *)(v4 + 176) = *((_OWORD *)this + 9);
  *(_OWORD *)(v4 + 192) = v10;
  re::Optional<re::StringID>::operator=((unsigned char *)(v4 + 208), (uint64_t *)this + 22);
  return v4;
}

uint64_t REPinCreateExt(_anonymous_namespace_ *a1, const char *a2, int32x4_t *a3, uint64_t a4, uint64_t *a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  long long v9 = a5;
  uint64_t v10 = a4;
  uint64_t v12 = (const char *)a1;
  uint64_t v30 = *MEMORY[0x263EF8340];
  v27[0] = a6;
  v27[1] = a7;
  v26[0] = a8;
  v26[1] = a9;
  if (a3)
  {
    int32x4_t v13 = *a3;
    int32x4_t v14 = a3[1];
  }
  else
  {
    int32x4_t v13 = vdupq_n_s32(0x7F800000u);
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
  }
  v25[0] = v13;
  v25[1] = v14;
  uint64_t v24 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  if (a4 && a5)
  {
    do
    {
      uint64_t v15 = *v9++;
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::PinAlignment>::add((_anonymous_namespace_ *)v22, v15 + 32);
      --v10;
    }
    while (v10);
  }
  v20[0] = 0;
  if (a2)
  {
    *(void *)&v19.var0 = 0;
    v19.var1 = "";
    v28[0] = 1;
    StringID v29 = v19;
    *(void *)&v19.var0 = 0;
    v19.var1 = "";
    re::Optional<re::StringID>::operator=((uint64_t)v20, v28);
    if (v28[0]) {
      re::StringID::destroyString((re::StringID *)&v29);
    }
    re::StringID::destroyString((re::StringID *)&v19);
  }
  *(void *)&v19.var0 = 0;
  v19.var1 = "";
  re::ecs2::Pin::Pin((uint64_t)v28, &v19, v27, v26, v20, v25, v22);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v28);
  re::StringID::destroyString((re::StringID *)&v19);
  if (v20[0]) {
    re::StringID::destroyString((re::StringID *)&v21);
  }
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v22);
  return REPinRef;
}

uint64_t REPinGetName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

__n128 REPinGetPose(__n128 *a1)
{
  return a1[4];
}

__n128 REPinGetOffsetPose(__n128 *a1)
{
  return a1[11];
}

uint64_t REPinIsSkeletalJointPin(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t REPinGetSkeletalJointName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208)) {
    return *(void *)(a1 + 224);
  }
  else {
    return 0;
  }
}

uint64_t REPinArrayGetPinCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t REPinArrayGetPinAtIndex(uint64_t a1, const re::ecs2::Pin *a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (_anonymous_namespace_ *)(*(void *)(a1 + 56) + 208 * (void)a2);
}

uint64_t REPinArrayGetPinNameAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 56) + 208 * a2 + 16);
}

__n128 REPinArrayGetPinPoseAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 56) + 208 * a2 + 32);
}

uint64_t REPinComponentGetAllPins(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v3 = *(void *)(v2 + 48);
  v5[0] = *(void *)(v2 + 64);
  v5[1] = v3;
}

uint64_t anonymous namespace'::createREPinArrayRef(re *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E736C58;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v4 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  re::DynamicArray<re::ecs2::Pin>::operator=((_anonymous_namespace_ *)(v4 + 24), (unsigned char **)a1);
  return v3;
}

uint64_t REPinComponentGetPinCount(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 48);
}

uint64_t REPinComponentGetPinByName(re::ecs2::PinComponent *a1, const char *a2)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v4 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, (uint64_t)a2);
  v8[0] = 0;
  v8[1] = "";
  re::ecs2::PinComponent::pinByName(a1, (const re::StringID *)v8, (uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v8);
  if (!v9[0]) {
    return 0;
  }
  if (v9[0]) {
    (*(void (**)(void *))v10[0])(v10);
  }
  return REPinRef;
}

unsigned char *REPinComponentAddPin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (re::ecs2::PinComponent *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PinComponent::addPin(v3, (const re::ecs2::Pin *)(a2 + 32));
}

uint64_t REPinComponentGetPinOffsetPoseAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  unint64_t v5 = *(void *)(result + 48);
  if (v5 <= a2)
  {
    re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v5);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REPinComponentGetPinNameAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  unint64_t v5 = *(void *)(v3 + 48);
  if (v5 > a2) {
    return *(void *)(*(void *)(v3 + 64) + 208 * a2 + 16);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v5);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPinComponentGetSkeletalJointNameAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  unint64_t v5 = *(void *)(v3 + 48);
  if (v5 <= a2)
  {
    re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v5);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 64);
    if (!*(unsigned char *)(v6 + 208 * a2 + 176)) {
      return 0;
    }
    long long v7 = re::StringID::StringID((re::StringID *)v10, (const StringID *)(v6 + 208 * a2 + 184));
    uint64_t v8 = v10[1];
    re::StringID::destroyString(v7);
    return v8;
  }
  return result;
}

uint64_t REPinComponentIsSkeletalJointPinAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  unint64_t v5 = *(void *)(v3 + 48);
  if (v5 > a2) {
    return *(unsigned __int8 *)(*(void *)(v3 + 64) + 208 * a2 + 176);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v5);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void REPinComponentRemovePin(uint64_t a1, const char *a2)
{
  uint64_t v4 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2);
  v5[0] = 0;
  v5[1] = "";
  re::ecs2::PinComponent::removePin(a1, (const re::StringID *)v5);
  re::StringID::destroyString((re::StringID *)v5);
}

void (***REPinComponentRemoveAllPins(uint64_t a1, uint64_t a2))(void)
{
  uint64_t v2 = (void (***)(void))(re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 32);
  return re::DynamicArray<re::ecs2::Pin>::clear(v2);
}

uint64_t REEntityGetPinByName(uint64_t a1, const re::ecs2::Entity *a2)
{
  v12[27] = *MEMORY[0x263EF8340];
  *(void *)&v11.var0 = 0;
  v11.var1 = "";
  re::ecs2::EntityHandle::EntityHandle((uint64_t)v8, a1);
  re::StringID::StringID((re::StringID *)v9, &v11);
  memset(&v9[24], 0, 24);
  uint64_t v10 = 0x3F80000000000000;
  re::StringID::destroyString((re::StringID *)&v11);
  re::ecs2::PinHandle::pin(v8, &v11);
  if (v11.var0)
  {
    if (v11.var0) {
      (*(void (**)(void *))v12[0])(v12);
    }
  }
  else
  {
    uint64_t REPinRef = 0;
  }
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v8);
  return REPinRef;
}

uint64_t anonymous namespace'::ensureSkeletalPoseBufferComponent(uint64_t this, const re::ecs2::Entity *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(re::ecs2::SkeletalPoseComponent **)(this + 232);
    if (!v3) {
      return 0;
    }
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return 1;
    }
    uint64_t v4 = v2;
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = *(void *)(v5 + 16);
    if (!v6) {
      return 0;
    }
    if (!*(void *)(v6 + 56)) {
      return 0;
    }
    uint64_t v7 = *(void *)(v2 + 176);
    if (!v7) {
      return 0;
    }
    uint64_t v8 = *(void *)(v7 + 40);
    if (!v8) {
      return 0;
    }
    unsigned int v9 = atomic_load((unsigned int *)(v8 + 704));
    if (v9 != 2) {
      return 0;
    }
    this = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!this) {
      return this;
    }
    uint64_t v10 = *(void *)(*(void *)(*(void *)(this + 16) + 176) + 40);
    if (v10 && (unsigned int v11 = atomic_load((unsigned int *)(v10 + 704)), v11 == 2))
    {
      return RESkeletalPoseComponentBuildAndExecuteRig(v3);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t REEntityTryGetSkeletalJointPinPose(uint64_t a1, const re::ecs2::Entity *a2, _OWORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(re::ecs2::PinSkeletalPoseHelper **)(a1 + 232);
  uint64_t v7 = *(void *)(a1 + 176);
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(v7 + 40);
  if (!v9) {
    return 0;
  }
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
  if (v10 != 2) {
    return 0;
  }
  unsigned int v11 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v7 + 32));
  v15[0] = 0;
  v15[1] = "";
  re::ecs2::PinSkeletalPoseHelper::pinByName(v6, v11, (const re::MeshAsset *)v15, v16);
  re::StringID::destroyString((re::StringID *)v15);
  if (!v16[0]) {
    return 0;
  }
  if (a3)
  {
    long long v13 = v19;
    *a3 = v18;
    a3[1] = v13;
  }
  (*(void (**)(void *, uint64_t))v17[0])(v17, v12);
  return 1;
}

uint64_t REEntityGetAllPins(uint64_t a1, const re::ecs2::Entity *a2, const char *a3)
{
  uint64_t v15 = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 48);
    unsigned int v10 = *(unsigned char **)(v6 + 64);
    uint64_t v11 = v7;
    re::DynamicArray<re::ecs2::Pin>::operator=((_anonymous_namespace_ *)v12, &v10);
  }
  unsigned int v10 = v15;
  uint64_t v11 = v13;
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)v12);
  return REPinArrayRef;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::Pin>::operator=(_anonymous_namespace_ *this, unsigned char **a2)
{
  unint64_t v4 = (unint64_t)a2[1];
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::ecs2::Pin>::copy(this, *a2, v4);
      re::DynamicArray<re::ecs2::Pin>::resize(this, (unint64_t)a2[1]);
    }
    else
    {
      re::DynamicArray<re::ecs2::Pin>::clear((void (***)(void))this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::ecs2::Pin>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::ecs2::Pin>::copy(this, *a2, (unint64_t)a2[1]);
  }
  return this;
}

void anonymous namespace'::getAllPinsForSkeletalPoseComponentJoints(uint64_t a1, const re::ecs2::Entity *a2, const char *a3, _anonymous_namespace_ *a4)
{
  uint64_t v6 = (const char *)a2;
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 176);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 232);
      v13[0] = 1;
      if (!v6) {
        uint64_t v6 = "";
      }
      v14[0] = 0;
      v14[1] = "";
      if (!a3) {
        a3 = "";
      }
      v15[0] = 0;
      v15[1] = "";
      uint64_t v12 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v9 + 32));
      re::ecs2::PinSkeletalPoseHelper::collectMeshJointPins(v10, v12, (uint64_t)v13, a4);
      re::StringID::destroyString((re::StringID *)v15);
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

uint64_t REEntityGetAllJointPinsForMesh(uint64_t a1, const re::ecs2::Entity *a2, const char *a3)
{
  uint64_t v9 = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  v6[0] = 0;
  int v8 = 0;
  v5[0] = v9;
  v5[1] = v7;
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)v6);
  return REPinArrayRef;
}

void *re::Shareable<re::ecs2::PinAlignment>::~Shareable(void *a1)
{
  *a1 = &unk_26E736BC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::PinAlignment>::~Shareable(void *a1)
{
  *a1 = &unk_26E736BC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::Shareable<re::ecs2::Pin>::~Shareable(void *a1)
{
  *a1 = &unk_26E736C10;
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::Pin>::~Shareable(void *a1)
{
  *a1 = &unk_26E736C10;
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::Shareable<re::DynamicArray<re::ecs2::Pin>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736C58;
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::ecs2::Pin>>::~Shareable(void *a1)
{
  *a1 = &unk_26E736C58;
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::ecs2::Pin>::copy(void *this, unsigned char *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    unint64_t v4 = this[2];
    if (v4 == -1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v4 >= a3)
    {
      this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::Pin const*,re::ecs2::Pin const*,re::ecs2::Pin*>(a2, &a2[208 * a3], this[4]);
    }
    else
    {
      re::DynamicArray<re::ecs2::Pin>::growCapacity(this, a3);
      uint64_t v7 = v3[2];
      int v8 = &a2[208 * v7];
      this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::Pin const*,re::ecs2::Pin const*,re::ecs2::Pin*>(a2, v8, v3[4]);
      if (v7 != a3)
      {
        uint64_t v9 = 0;
        uint64_t v10 = v3[4] + 208 * v3[2];
        uint64_t v11 = -208 * v7 + 208 * a3;
        do
        {
          uint64_t v12 = v10 + v9;
          *(void *)(v10 + v9) = &unk_26E703090;
          re::StringID::StringID((re::StringID *)(v10 + v9 + 8), (const StringID *)&v8[v9 + 8]);
          long long v13 = *(_OWORD *)&v8[v9 + 32];
          long long v14 = *(_OWORD *)&v8[v9 + 48];
          long long v15 = *(_OWORD *)&v8[v9 + 80];
          *(_OWORD *)(v12 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_OWORD *)&v8[v9 + 64];
          *(_OWORD *)(v12 + 80) = v15;
          *(_OWORD *)(v12 + 32) = v13;
          *(_OWORD *)(v12 + 48) = v14;
          this = (void *)re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(v10 + v9 + 96, (uint64_t *)&v8[v9 + 96]);
          long long v16 = *(_OWORD *)&v8[v9 + 160];
          *(_OWORD *)(v12 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_OWORD *)&v8[v9 + 144];
          *(_OWORD *)(v12 + 160) = v16;
          int v17 = v8[v9 + 176];
          *(unsigned char *)(v12 + 176) = v17;
          if (v17) {
            this = re::StringID::StringID((re::StringID *)(v12 + 184), (const StringID *)&v8[v9 + 184]);
          }
          v9 += 208;
        }
        while (v11 != v9);
      }
      void v3[2] = a3;
    }
    ++*((_DWORD *)v3 + 6);
  }
  return this;
}

unsigned char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::Pin const*,re::ecs2::Pin const*,re::ecs2::Pin*>(unsigned char *result, unsigned char *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (_OWORD *)(a3 + v6);
      re::StringID::operator=((unint64_t *)(a3 + v6 + 8), (uint64_t *)&v5[v6 + 8]);
      long long v8 = *(_OWORD *)&v5[v6 + 32];
      long long v9 = *(_OWORD *)&v5[v6 + 48];
      long long v10 = *(_OWORD *)&v5[v6 + 80];
      float32x4_t v7[4] = *(_OWORD *)&v5[v6 + 64];
      void v7[5] = v10;
      void v7[2] = v8;
      void v7[3] = v9;
      re::DynamicArray<re::ecs2::PinAlignment>::operator=(a3 + v6 + 96, (uint64_t *)&v5[v6 + 96]);
      long long v11 = *(_OWORD *)&v5[v6 + 160];
      unsigned char v7[9] = *(_OWORD *)&v5[v6 + 144];
      v7[10] = v11;
      uint64_t result = re::Optional<re::StringID>::operator=((unsigned char *)(a3 + v6 + 176), (uint64_t *)&v5[v6 + 176]);
      v6 += 208;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

uint64_t REMeshInstanceCollectionGetCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t REMeshInstanceCollectionGetStartIndex()
{
  return 0;
}

uint64_t REMeshInstanceCollectionGetEndIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

unint64_t REMeshInstanceCollectionNextIndex(uint64_t a1, uint64_t a2)
{
  if (result >= *(void *)(a1 + 72))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(void *)a2 = (result + 1);
  *(void *)(a2 + 8) = 0;
  return result;
}

unint64_t re::anonymous namespace'::fromApi(unint64_t result, uint64_t a2)
{
  if (HIDWORD(result))
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Index %ld out of uint32_t range", "!overflow", "fromApi", 35, result);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

CFStringRef REMeshInstanceCollectionCopyElementNameAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 72) <= (unint64_t)v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(const char **)(*(void *)(a1 + 88) + 16 * v4 + 8);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  return CFStringCreateWithCString(v6, v5, 0x8000100u);
}

void REMeshInstanceCollectionSetElementNameAtIndex(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  re::StringID::destroyString((re::StringID *)&v7);
}

void re::anonymous namespace'::setElementNameAtIndex(uint64_t a1, StringID *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v14 = v6;
  uint64_t v7 = v6;
  unint64_t v8 = *(void *)(a1 + 72);
  if (v8 <= v6)
  {
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    int v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    unint64_t v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    int v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    unint64_t v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(a1 + 8, (void *)(*(void *)(a1 + 88) + 16 * v6));
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(a1 + 8, a2, &v14);
  uint64_t v7 = v14;
  unint64_t v8 = *(void *)(a1 + 72);
  if (v8 <= v14) {
    goto LABEL_5;
  }
  long long v9 = (void *)(*(void *)(a1 + 88) + 16 * v14);
  uint64_t v10 = *(void *)&a2->var0;
  var1 = a2->var1;
  *(void *)&a2->var0 = 0;
  a2->var1 = "";
  uint64_t v12 = v9[1];
  unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFELL | *v9 & 1;
  v9[1] = var1;
  *(void *)&long long v24 = v13;
  *((void *)&v24 + 1) = v12;
  *long long v9 = v10;
  re::StringID::destroyString((re::StringID *)&v24);
}

void re::anonymous namespace'::fromApi(re::_anonymous_namespace_ *this, CFStringRef theString)
{
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    uint64_t v5 = (const char *)CStringPtr;
    *(void *)this = 0;
    *((void *)this + 1) = "";
  }
  else
  {
  }
}

void REMeshInstanceCollectionSetElementNameWithCStringAtIndex(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  *(void *)&v8.var0 = 0;
  v8.var1 = "";
  re::StringID::destroyString((re::StringID *)&v8);
}

CFStringRef REMeshInstanceCollectionCopyElementModelNameAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 112) <= (unint64_t)v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(const char **)(*(void *)(a1 + 128) + 16 * v4 + 8);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  return CFStringCreateWithCString(v6, v5, 0x8000100u);
}

void REMeshInstanceCollectionSetElementModelNameAtIndex(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 112);
  if (v9 <= v7)
  {
    uint64_t v17 = 0;
    memset(v26, 0, sizeof(v26));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    int v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    uint64_t v23 = v8;
    __int16 v24 = 2048;
    unint64_t v25 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = (void *)(*(void *)(a1 + 128) + 16 * v7);
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  uint64_t v13 = v10[1];
  unint64_t v14 = v15 & 0xFFFFFFFFFFFFFFFELL | *v10 & 1;
  uint64_t v15 = 0;
  int v16 = "";
  v10[1] = v12;
  *(void *)&v26[0] = v14;
  *((void *)&v26[0] + 1) = v13;
  void *v10 = v11;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v15);
}

void REMeshInstanceCollectionSetElementModelNameWithCStringAtIndex(_anonymous_namespace_ *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v17 = "";
  uint64_t v9 = v8;
  unint64_t v10 = *((void *)a1 + 14);
  if (v10 <= v8)
  {
    uint64_t v18 = 0;
    memset(v27, 0, sizeof(v27));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v19 = 136315906;
    __int16 v20 = "operator[]";
    __int16 v21 = 1024;
    int v22 = 789;
    __int16 v23 = 2048;
    uint64_t v24 = v9;
    __int16 v25 = 2048;
    unint64_t v26 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = (void *)(*((void *)a1 + 16) + 16 * v8);
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = "";
  uint64_t v14 = v11[1];
  unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *v11 & 1;
  v11[1] = v13;
  *(void *)&v27[0] = v15;
  *((void *)&v27[0] + 1) = v14;
  *uint64_t v11 = v12;
  re::StringID::destroyString((re::StringID *)v27);
  re::StringID::destroyString((re::StringID *)&v16);
}

__n128 REMeshInstanceCollectionGetElementTransformSRTAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 152) <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 168) + 48 * v4);
}

__n128 REMeshInstanceCollectionSetElementTransformSRTAtIndex(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a1 + 152) <= v7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v8 = (__n128 *)(*(void *)(a1 + 168) + 48 * v7);
  __n128 *v8 = a4;
  v8[1] = a5;
  __n128 result = a6;
  void v8[2] = a6;
  return result;
}

double REMeshInstanceCollectionGetElementTransformMatrixAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 152) <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(a1 + 168) + 48 * v4;
  float v7 = *(float *)(v5 + 16);
  float v6 = *(float *)(v5 + 20);
  float v9 = *(float *)(v5 + 24);
  float v8 = *(float *)(v5 + 28);
  v10.i32[3] = 0;
  v10.f32[0] = 1.0 - (float)((float)(v6 * (float)(v6 + v6)) + (float)(v9 * (float)(v9 + v9)));
  v10.f32[1] = (float)((float)(v7 + v7) * v6) + (float)((float)(v9 + v9) * v8);
  v10.f32[2] = (float)((float)(v7 + v7) * v9) - (float)((float)(v6 + v6) * v8);
  *(void *)&double result = vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)v5)).u64[0];
  return result;
}

unint64_t REMeshInstanceCollectionSetElementTransformMatrixAtIndex(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v17[0] = a4;
  v17[1] = a5;
  _OWORD v17[2] = a6;
  uint64_t v17[3] = a7;
  v24[0] = 0u;
  int32x4_t v18 = 0u;
  *(_OWORD *)int v19 = xmmword_23435FBB0;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v17, v24, v19, &v18);
  int32x4_t v10 = v24[0];
  int32x4_t v11 = *(int32x4_t *)v19;
  int32x4_t v12 = v18;
  uint64_t v14 = result;
  unint64_t v15 = *(void *)(a1 + 152);
  if (v15 <= result)
  {
    v18.i64[0] = 0;
    memset(v24, 0, sizeof(v24));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v19 = 136315906;
    *(void *)&void v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 789;
    __int16 v20 = 2048;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    unint64_t v23 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v16 = (int32x4_t *)(*(void *)(a1 + 168) + 48 * result);
  *uint64_t v16 = v10;
  v16[1] = v11;
  _OWORD v16[2] = v12;
  return result;
}

uint64_t REMeshInstanceCollectionGetElementIndexForName(uint64_t a1, CFStringRef theString)
{
  uint64_t v3 = a1 + 8;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    uint64_t v5 = *CStringPtr;
    if (*CStringPtr)
    {
      char v6 = CStringPtr[1];
      if (v6)
      {
        float v7 = (unsigned __int8 *)(CStringPtr + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
    v11[0] = 2 * v5;
    v11[1] = CStringPtr;
  }
  else
  {
  }
  float v9 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9) {
    return *v9;
  }
  else {
    return -1;
  }
}

uint64_t REMeshInstanceCollectionAddElementWithName(uint64_t a1, const __CFString *a2)
{
  if (!*(void *)(a1 + 8)
    || (unint64_t v3 = *(void *)&v19.var0,
        unint64_t v4 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * ((*(void *)&v19.var0 >> 31) ^ (*(void *)&v19.var0 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((*(void *)&v19.var0 >> 31) ^ (*(void *)&v19.var0 >> 1))) >> 27)),
        uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(a1 + 32))),
        v5 == 0x7FFFFFFF))
  {
LABEL_8:
    unsigned int v18 = *(void *)(a1 + 72);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(a1 + 8, &v19, &v18);
    re::DynamicArray<re::StringID>::add((void *)(a1 + 56), (uint64_t *)&v19);
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t)"";
    re::DynamicArray<re::StringID>::add((void *)(a1 + 96), &v12);
    re::StringID::destroyString((re::StringID *)&v12);
    uint64_t v12 = 0x3F8000003F800000;
    uint64_t v13 = 1065353216;
    uint64_t v14 = 0;
    uint64_t v15 = 0x3F80000000000000;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a1 + 136), (uint64_t)&v12);
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    var1 = v19.var1;
    while (1)
    {
      uint64_t v8 = v6 + 32 * v5;
      if ((*(void *)(v8 + 8) ^ v3) <= 1)
      {
        float v9 = *(const char **)(v8 + 16);
        if (v9 == var1 || !strcmp(v9, var1)) {
          break;
        }
      }
      uint64_t v5 = *(_DWORD *)(v6 + 32 * v5) & 0x7FFFFFFF;
      if (v5 == 0x7FFFFFFF) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = -1;
  }
  re::StringID::destroyString((re::StringID *)&v19);
  return v10;
}

void *REMeshInstanceCollectionRemoveElementAtIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v5 = v4;
  if (*(void *)(a1 + 72) <= (unint64_t)v4)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  unsigned int v6 = v4;
  re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(a1 + 8, (void *)(*(void *)(a1 + 88) + 16 * v4));
  unint64_t v7 = *(void *)(a1 + 72);
  unint64_t v8 = (v7 - 1);
  if (v6 == v8)
  {
    unint64_t v8 = v5;
    goto LABEL_18;
  }
  if (v7 <= v5) {
    goto LABEL_22;
  }
  if (*(void *)(a1 + 112) <= v5)
  {
LABEL_23:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)(a1 + 152) <= v5)
  {
LABEL_24:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  if (v7 <= v8)
  {
LABEL_25:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = (void *)(v9 + 16 * v5);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 168);
  uint64_t v13 = (uint64_t *)(v9 + 16 * v8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  *uint64_t v13 = 0;
  v13[1] = (uint64_t)"";
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL | *v10 & 1;
  uint64_t v17 = v10[1];
  v10[1] = v15;
  *(void *)&long long v33 = v16;
  *((void *)&v33 + 1) = v17;
  void *v10 = v14;
  re::StringID::destroyString((re::StringID *)&v33);
  if (*(void *)(a1 + 112) <= v8)
  {
LABEL_26:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v18 = (void *)(v11 + 16 * v5);
  StringID v19 = (uint64_t *)(*(void *)(a1 + 128) + 16 * v8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  *StringID v19 = 0;
  v19[1] = (uint64_t)"";
  unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFELL | *v18 & 1;
  uint64_t v23 = v18[1];
  v18[1] = v21;
  *(void *)&long long v33 = v22;
  *((void *)&v33 + 1) = v23;
  *unsigned int v18 = v20;
  re::StringID::destroyString((re::StringID *)&v33);
  if (*(void *)(a1 + 152) <= v8) {
    goto LABEL_27;
  }
  uint64_t v24 = (_OWORD *)(v12 + 48 * v5);
  uint64_t v25 = (long long *)(*(void *)(a1 + 168) + 48 * v8);
  long long v26 = *v25;
  long long v27 = v25[2];
  v24[1] = v25[1];
  _OWORD v24[2] = v27;
  *uint64_t v24 = v26;
  uint64_t v28 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 8))
  {
    unint64_t v29 = 0xBF58476D1CE4E5B9 * ((*v10 >> 31) ^ (*v10 >> 1));
    uint64_t v30 = *(unsigned int *)(*(void *)(a1 + 16)
                          + 4
                          * (((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) ^ ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 32)));
    if (v30 != 0x7FFFFFFF)
    {
      uint64_t v31 = *(void *)(a1 + 24);
      uint64_t v28 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v31 + 32 * v30 + 8), v10))
      {
        uint64_t v30 = *(_DWORD *)(v31 + 32 * v30) & 0x7FFFFFFF;
        if (v30 == 0x7FFFFFFF) {
          goto LABEL_17;
        }
      }
      uint64_t v28 = v30;
    }
  }
LABEL_17:
  *(_DWORD *)(*(void *)(a1 + 24) + 32 * v28 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
LABEL_18:
  re::DynamicArray<re::StringID>::resize(a1 + 56, v8);
  re::DynamicArray<re::StringID>::resize(a1 + 96, v8);
  return re::DynamicArray<re::GenericSRT<float>>::resize((void *)(a1 + 136), v8);
}

void re::anonymous namespace'::fromApiSlowPath(re::_anonymous_namespace_ *this, CFStringRef theString)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CString = (_anonymous_namespace_ *)CFStringGetCString(theString, buffer, 256, 0x8000100u);
  if (CString)
  {
    *(void *)this = 0;
    *((void *)this + 1) = "";
    size_t v5 = strlen(buffer);
  }
  else
  {
    CFIndex Length = CFStringGetLength(theString);
    MaximumSizeForEncoding = (_anonymous_namespace_ *)CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    uint64_t v13 = 0;
    CFIndex v14 = 0;
    uint64_t v15 = 0;
    CFIndex usedBufLen = -1;
    v18.id location = 0;
    v18.CFIndex length = Length;
    Bytes = (_anonymous_namespace_ *)CFStringGetBytes(theString, v18, 0x8000100u, 0, 0, v15, v14, &usedBufLen);
    if (Bytes == (_anonymous_namespace_ *)Length)
    {
      uint64_t v10 = (const char *)v15;
      CFIndex v11 = usedBufLen;
      *(void *)this = 0;
      *((void *)this + 1) = "";
      if (v13)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v13 + 40))();
        }
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)5, v9, "assertion failure: '%s' (%s:line %i) String is invalid UTF-8 (bad index: %ld)", "false", "fromApiSlowPath", 68, Bytes);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t REBillboardServiceGetEnableBillboard()
{
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  }
  return re::ecs2::gIsBillboardEnabled;
}

uint64_t REBillboardServiceSetHeadPosition(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 64))(a1, &v3);
}

double REBillboardServiceGetEntityTransform(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(&v5, a1, a2);
  return *(double *)&v5;
}

double REBillboardServiceGetEntityPose(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(v5, a1, a2);
  v6[0] = v5[0];
  v6[1] = v5[1];
  void v6[2] = v5[2];
  void v6[3] = v5[3];
  long long v8 = xmmword_23435FBB0;
  int32x4_t v9 = 0u;
  long long v7 = 0u;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v6, &v9, &v8, &v7);
  return *(double *)&v7;
}

uint64_t RERigEvaluationCreateWithJoints(const re::RigDefinition *a1, char **a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v54 = a5;
  long long v55 = (void *)a6;
  LODWORD(v6) = a4;
  int v60 = (const re::RigDefinition *)a3;
  uint64_t v117 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_532, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_532))
  {
    byte_26AFA07B0 = 0;
    qword_26AFA07A0 = (uint64_t)&unk_26E6DEC70;
    unk_26AFA07A8 = "RigEvaluation Allocator";
    __cxa_guard_release(&_MergedGlobals_532);
  }
  int32x4_t v9 = &v89;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(qword_26AFA07A0 + 32))(&qword_26AFA07A0, 3040, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v10, 0);
  *(void *)(v11 + 16) = &qword_26AFA07A0;
  *(void *)uint64_t v11 = &unk_26E736CA0;
  uint64_t v12 = (re::RigEvaluation *)(v11 + 24);
  *(_OWORD *)(v11 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  *(_DWORD *)(v11 + 296) = 0;
  *(_OWORD *)(v11 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_DWORD *)(v11 + 336) = 0;
  *(_OWORD *)(v11 + 34re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_DWORD *)(v11 + 376) = 0;
  *(_OWORD *)(v11 + 38re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 400) = 0u;
  *(_DWORD *)(v11 + 416) = 0;
  *(_OWORD *)(v11 + 42re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 440) = 0u;
  *(_DWORD *)(v11 + 456) = 0;
  *(_OWORD *)(v11 + 46re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 480) = 0u;
  *(_DWORD *)(v11 + 496) = 0;
  *(_DWORD *)(v11 + 536) = 0;
  *(_OWORD *)(v11 + 50re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 520) = 0u;
  *(_DWORD *)(v11 + 96) = 0;
  *(_OWORD *)(v11 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_DWORD *)(v11 + 136) = 0;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 176) = 0;
  *(_OWORD *)(v11 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_DWORD *)(v11 + 216) = 0;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_DWORD *)(v11 + 256) = 0;
  *(_DWORD *)(v11 + 576) = 0;
  *(_OWORD *)(v11 + 54re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 560) = 0u;
  *(_DWORD *)(v11 + 680) = 0;
  *(_OWORD *)(v11 + 648) = 0u;
  *(_OWORD *)(v11 + 66re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 616) = 0u;
  *(_OWORD *)(v11 + 632) = 0u;
  *(_OWORD *)(v11 + 58re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 600) = 0u;
  *(_DWORD *)(v11 + 720) = 0;
  *(_OWORD *)(v11 + 688) = 0u;
  *(_OWORD *)(v11 + 70re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 728) = 0u;
  *(_OWORD *)(v11 + 74re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 760) = 0;
  *(_OWORD *)(v11 + 768) = 0u;
  *(_OWORD *)(v11 + 78re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 800) = 0;
  *(_DWORD *)(v11 + 840) = 0;
  *(_OWORD *)(v11 + 808) = 0u;
  *(_OWORD *)(v11 + 82re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 880) = 0;
  *(_OWORD *)(v11 + 848) = 0u;
  *(_OWORD *)(v11 + 86re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 888) = 0u;
  *(_OWORD *)(v11 + 90re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 920) = 0;
  *(_OWORD *)(v11 + 928) = 0u;
  *(_OWORD *)(v11 + 94re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 960) = 0;
  *(_OWORD *)(v11 + 968) = 0u;
  *(_OWORD *)(v11 + 98re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 1000) = 0;
  *(_OWORD *)(v11 + 1008) = 0u;
  *(_OWORD *)(v11 + 102re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 1040) = 0;
  *(_DWORD *)(v11 + 1080) = 0;
  *(_OWORD *)(v11 + 1048) = 0u;
  *(_OWORD *)(v11 + 106re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 1120) = 0;
  *(_OWORD *)(v11 + 110re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1088) = 0u;
  *(_OWORD *)(v11 + 1128) = 0u;
  *(_OWORD *)(v11 + 114re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_DWORD *)(v11 + 1160) = 0;
  *(_OWORD *)(v11 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_DWORD *)(v11 + 56) = 0;
  *(_OWORD *)(v11 + 1168) = 0u;
  *(_OWORD *)(v11 + 118re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1200) = 0u;
  *(_OWORD *)(v11 + 1216) = 0u;
  *(_DWORD *)(v11 + 1232) = 0;
  *(void *)(v11 + 1236) = 0x7FFFFFFFLL;
  *(_DWORD *)(v11 + 1280) = 0;
  *(_OWORD *)(v11 + 126re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1248) = 0u;
  *(void *)(v11 + 128re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x7FFFFFFFLL;
  *(_OWORD *)(v11 + 1296) = 0u;
  *(_OWORD *)(v11 + 1312) = 0u;
  *(_OWORD *)(v11 + 1328) = 0u;
  *(_OWORD *)(v11 + 134re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1360) = 0u;
  *(_OWORD *)(v11 + 1376) = 0u;
  *(_OWORD *)(v11 + 1392) = 0u;
  *(_OWORD *)(v11 + 1408) = 0u;
  *(_OWORD *)(v11 + 142re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1440) = 0u;
  *(_OWORD *)(v11 + 1456) = 0u;
  *(_OWORD *)(v11 + 1472) = 0u;
  *(_OWORD *)(v11 + 1488) = 0u;
  *(_OWORD *)(v11 + 150re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1520) = 0u;
  *(_DWORD *)(v11 + 1536) = 0;
  *(void *)(v11 + 1648) = 0;
  *(_OWORD *)(v11 + 1632) = 0u;
  *(_OWORD *)(v11 + 1616) = 0u;
  *(_OWORD *)(v11 + 1600) = 0u;
  *(_OWORD *)(v11 + 158re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(void *)(v11 + 1552) = 0;
  *(void *)(v11 + 154re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v11 + 1656) = 1;
  *(void *)(v11 + 1672) = 0;
  *(void *)(v11 + 166re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v11 + 1688) = 0;
  *(void *)(v11 + 1680) = 0;
  *(void *)(v11 + 170re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v11 + 1696) = 0;
  *(_DWORD *)(v11 + 1720) = 0;
  *(void *)(v11 + 1712) = 0;
  *(void *)(v11 + 1768) = 0;
  *(_DWORD *)(v11 + 1760) = 0;
  *(_OWORD *)(v11 + 174re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1728) = 0u;
  *(void *)(v11 + 1776) = &unk_26E6C4A78;
  *(_DWORD *)(v10 + 178re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = -1;
  bzero((void *)(v11 + 1792), 0x4E0uLL);
  re::RigEvaluation::init(v12, (re::Allocator *)&qword_26AFA07A0, a1, (uint64_t)&v68);
  if (!(_BYTE)v68)
  {
    if (CoreRELog::onceToken != -1) {
      goto LABEL_89;
    }
    goto LABEL_17;
  }
  re::FixedArray<char const*>::init<>((uint64_t *)(v10 + 2992), (uint64_t)&qword_26AFA07A0, (unint64_t)v60);
  if (v60)
  {
    for (unint64_t i = 0; (const re::RigDefinition *)i != v60; ++i)
    {
      *(void *)&long long v97 = a2[i];
      CFIndex v14 = (const re::RigDefinition **)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet(v10 + 1200, (char **)&v97);
      if (!v14)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        a1 = (const re::RigDefinition *)(id)CoreRELog::log;
        if (!os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        uint64_t v20 = a2[i];
        LODWORD(v97) = 136315138;
        *(void *)((char *)&v97 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v20;
        StringID v19 = "Rig Evaluation Error - Unknown Input Joint: %s";
        goto LABEL_30;
      }
      a1 = *v14;
      uint64_t v15 = *(const re::RigDefinition **)(v10 + 1072);
      if (v15 <= *v14) {
        goto LABEL_85;
      }
      uint64_t v15 = *(const re::RigDefinition **)(v10 + 3000);
      if ((unint64_t)v15 <= i) {
        goto LABEL_86;
      }
      *(void *)(*(void *)(v10 + 3008) + 8 * i) = *(void *)(*(void *)(v10 + 1088) + 56 * (void)a1 + 8);
    }
  }
  re::FixedArray<char const*>::init<>((uint64_t *)(v10 + 3016), (uint64_t)&qword_26AFA07A0, (unint64_t)v55);
  if (v55)
  {
    for (unint64_t i = 0; (void *)i != v55; ++i)
    {
      *(void *)&long long v97 = *(void *)(v54 + 8 * i);
      unint64_t v16 = (const re::RigDefinition **)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet(v10 + 1200, (char **)&v97);
      if (!v16)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        a1 = (const re::RigDefinition *)(id)CoreRELog::log;
        if (!os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        uint64_t v21 = *(void *)(v54 + 8 * i);
        LODWORD(v97) = 136315138;
        *(void *)((char *)&v97 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v21;
        StringID v19 = "Rig Evaluation Error - Unknown Output Joint: %s";
        goto LABEL_30;
      }
      a1 = *v16;
      uint64_t v15 = *(const re::RigDefinition **)(v10 + 1072);
      if (v15 <= *v16) {
        goto LABEL_87;
      }
      uint64_t v15 = *(const re::RigDefinition **)(v10 + 3024);
      if ((unint64_t)v15 <= i) {
        goto LABEL_88;
      }
      *(void *)(*(void *)(v10 + 3032) + 8 * i) = *(void *)(*(void *)(v10 + 1088) + 56 * (void)a1 + 8);
    }
  }
  uint64_t v17 = 0;
  while (1)
  {
    if (!(_BYTE)v68 && *((void *)&v69 + 1) && (v70 & 1) != 0) {
      (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
    }
    if (v17) {

    }
    if (!v10) {
      break;
    }
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)&v97);
    unint64_t v22 = re::EvaluationTree::init((re::EvaluationTree *)&v97, (re::Allocator *)&qword_26AFA07A0);
    uint64_t v52 = (uint64_t)&v52;
    uint64_t v15 = (const re::RigDefinition *)(v10 + 24);
    MEMORY[0x270FA5388](v22);
    uint64_t v24 = (const re::RigDefinition *)((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v25) {
      memset((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 255, v23);
    }
    uint64_t v53 = v24;
    unint64_t v61 = v10 + 24;
    if (v6)
    {
      long long v68 = xmmword_23435FD50;
      long long v69 = xmmword_23435FD60;
      long long v70 = xmmword_23435FD80;
      v89.n128_u32[0] = 3;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      v89.n128_u64[1] = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)v111, (uint64_t)&v89);
      v89.n128_u64[0] = v111[2] - 1;
      re::DynamicArray<unsigned long>::add(v102, &v89);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)&v107, (uint64_t)&v68);
      if (v60)
      {
        long long v58 = (_anonymous_namespace_ *)v109;
        uint64_t v59 = v104;
        uint64_t v26 = *(void *)(v102[4] + 8 * v102[2] - 8);
        long long v56 = (_anonymous_namespace_ *)v115;
        uint64_t v57 = v26;
        uint64_t v15 = v53;
        a1 = v60;
        do
        {
          __n128 v89 = 0uLL;
          LODWORD(v68) = 7;
          long long v69 = 0uLL;
          *((void *)&v68 + 1) = 0;
          re::DynamicArray<re::EvaluationRegister>::add(v56, (uint64_t)&v68);
          *(void *)&long long v68 = v116 - 1;
          re::DynamicArray<unsigned long>::add(v59, &v68);
          re::DynamicArray<re::Vector3<float>>::add(v58, &v89);
          uint64_t v27 = *(void *)(v106 + 8 * v105 - 8);
          *(void *)uint64_t v15 = v27;
          uint64_t v15 = (const re::RigDefinition *)((char *)v15 + 8);
          LODWORD(v68) = 40;
          long long v69 = 0uLL;
          *((void *)&v68 + 1) = 0;
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)&v112, (uint64_t)&v68);
          uint64_t v28 = v113 - 1;
          uint64_t v29 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix4x4<float>>((uint64_t)&v110, v113 - 1);
          *(void *)(v29 + 8) = v57;
          *(void *)(v29 + 16) = v27;
          uint64_t v30 = *a2++;
          re::RigEvaluation::bindModelSpaceJointInput(v61, v30, v28);
          a1 = (const re::RigDefinition *)((char *)a1 - 1);
        }
        while (a1);
      }
    }
    else
    {
      v89.n128_u64[0] = 0;
      v89.n128_u64[1] = 0x3F80000000000000;
      LODWORD(v68) = 5;
      long long v69 = 0uLL;
      *((void *)&v68 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)v114, (uint64_t)&v68);
      *(void *)&long long v68 = v114[2] - 1;
      re::DynamicArray<unsigned long>::add(v103, &v68);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v108, &v89);
      uint64_t v59 = *(void **)(v103[4] + 8 * v103[2] - 8);
      v89.n128_u64[0] = 0x3F8000003F800000;
      v89.n128_u64[1] = 1065353216;
      a1 = (const re::RigDefinition *)v115;
      LODWORD(v68) = 7;
      long long v69 = 0uLL;
      *((void *)&v68 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)v115, (uint64_t)&v68);
      *(void *)&long long v68 = v116 - 1;
      re::DynamicArray<unsigned long>::add(v104, &v68);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v109, &v89);
      if (v60)
      {
        uint64_t v32 = *(void *)(v106 + 8 * v105 - 8);
        uint64_t v15 = (const re::RigDefinition *)((char *)&v68 + 8);
        long long v33 = v53;
        unint64_t v34 = (unint64_t)v60;
        do
        {
          __n128 v89 = 0uLL;
          LODWORD(v68) = 7;
          long long v69 = 0uLL;
          *((void *)&v68 + 1) = 0;
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)v115, (uint64_t)&v68);
          *(void *)&long long v68 = v116 - 1;
          re::DynamicArray<unsigned long>::add(v104, &v68);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v109, &v89);
          uint64_t v35 = *(void *)(v106 + 8 * v105 - 8);
          *(void *)long long v33 = v35;
          long long v33 = (const re::RigDefinition *)((char *)v33 + 8);
          long long v36 = *a2++;
          *(void *)&long long v68 = v32;
          *((void *)&v68 + 1) = v59;
          *(void *)&long long v69 = v35;
          re::RigEvaluation::bindLocalSpaceJointInput(v61, v36, &v68);
          --v34;
        }
        while (v34);
      }
    }
    unint64_t v6 = (unint64_t)v55;
    re::RigEvaluation::constructEvaluationCommands(v61, v54, (unint64_t)v55, (unint64_t)&v97, (uint64_t)&v89);
    if (!v89.n128_u8[0])
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v48 = (id)CoreRELog::log;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        if (v92) {
          uint64_t v50 = *(unsigned char **)&v93[7];
        }
        else {
          uint64_t v50 = v93;
        }
        LODWORD(v68) = 136315138;
        *(void *)((char *)&v68 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v50;
        _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "Rig Evaluation Construct Error - %s", (uint8_t *)&v68, 0xCu);
      }

LABEL_73:
      uint64_t v10 = 0;
LABEL_74:
      re::Result<re::EvaluationRigState,re::DetailedError>::~Result((uint64_t)&v89);
      re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)&v97);
      return v10;
    }
    std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::operator=[abi:nn180100]((uint64_t *)(v10 + 1552), &v89.n128_i64[1]);
    re::FixedArray<float>::operator=((uint64_t *)(v10 + 1592), v94);
    re::FixedArray<float>::operator=((uint64_t *)(v10 + 1616), v95);
    long long v37 = re::RigGraphCompilation::operator=((void *)(v10 + 1640), v96);
    int32x4_t v9 = (__n128 *)(2 * v6);
    MEMORY[0x270FA5388](v37);
    unint64_t i = (unint64_t)(&v52 - 2 * v6);
    if (2 * v6) {
      uint64_t v38 = memset(&v52 - 2 * v6, 255, v39);
    }
    MEMORY[0x270FA5388](v38);
    __int16 v41 = (char *)&v52 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (!v6)
    {
LABEL_61:
      long long v88 = 0u;
      long long v85 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v74 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      uint64_t v75 = v53;
      unint64_t v76 = (unint64_t)v60;
      long long v86 = &v52 - 2 * v6;
      uint64_t v87 = 2 * v6;
      long long v83 = v41;
      unint64_t v84 = v6;
      uint64_t v46 = *(void *)(v10 + 1600);
      *(void *)&long long v82 = *(void *)(v10 + 1608);
      *((void *)&v82 + 1) = v46;
      re::EvaluationTree::setupEvaluationModel((uint64_t)&v97, (uint64_t)&qword_26AFA07A0, v10 + 1776, (unint64_t *)&v68, (uint64_t *)(v10 + 2560), (uint64_t)v63);
      if (!v63[0])
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v47 = (id)CoreRELog::log;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          if ((v67[1] & 0x100000000) != 0) {
            uint64_t v51 = *(char **)((char *)&v67[2] + 4);
          }
          else {
            uint64_t v51 = (char *)&v67[1] + 5;
          }
          *(_DWORD *)long long v62 = 136315138;
          *(void *)&v62[4] = v51;
          _os_log_error_impl(&dword_233120000, v47, OS_LOG_TYPE_ERROR, "Rig Evaluation Local Space Model Error - %s", v62, 0xCu);
        }

        if (!v63[0] && *(void *)((char *)v67 + 4) && (v67[1] & 0x100000000) != 0) {
          (*(void (**)(void))(**(void **)((char *)v67 + 4) + 40))();
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    memset((char *)&v52 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0), 255, v40);
    uint64_t v42 = 0;
    char v43 = 0;
    a2 = *(char ***)(v10 + 1624);
    int v44 = (void *)(i + 8);
    while (a2 != v43)
    {
      int v45 = (void *)(*(void *)(v10 + 1632) + v42);
      *(v44 - 1) = *v45;
      *(void *)&v41[8 * (void)v43] = v45[1];
      *int v44 = v45[2];
      v44 += 2;
      char v43 = (char **)((char *)v43 + 1);
      v42 += 24;
      if ((char **)v6 == v43) {
        goto LABEL_61;
      }
    }
    *(void *)long long v62 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 468;
    __int16 v66 = 2048;
    v67[0] = a2;
    LOWORD(v67[1]) = 2048;
    *(void *)((char *)&v67[1] + 2) = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    *(void *)long long v63 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v89.n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v9->n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)"operator[]";
    v89.n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v9->n128_u32[3] + 2) = 797;
    WORD1(v90) = 2048;
    *(unint64_t *)((char *)v9[1].n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)a1;
    WORD2(v91) = 2048;
    *(unint64_t *)((char *)&v9[1].n128_u64[1] + 6) = (unint64_t)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    *(void *)long long v63 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v89.n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v9->n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)"operator[]";
    v89.n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v9->n128_u32[3] + 2) = 468;
    WORD1(v90) = 2048;
    *(unint64_t *)((char *)v9[1].n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = i;
    WORD2(v91) = 2048;
    *(unint64_t *)((char *)&v9[1].n128_u64[1] + 6) = (unint64_t)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    *(void *)long long v63 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v89.n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v9->n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)"operator[]";
    v89.n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v9->n128_u32[3] + 2) = 797;
    WORD1(v90) = 2048;
    *(unint64_t *)((char *)v9[1].n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)a1;
    WORD2(v91) = 2048;
    *(unint64_t *)((char *)&v9[1].n128_u64[1] + 6) = (unint64_t)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    *(void *)long long v63 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    uint64_t v10 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v89.n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v9->n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)"operator[]";
    v89.n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v9->n128_u32[3] + 2) = 468;
    WORD1(v90) = 2048;
    *(unint64_t *)((char *)v9[1].n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = i;
    WORD2(v91) = 2048;
    *(unint64_t *)((char *)&v9[1].n128_u64[1] + 6) = (unint64_t)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_17:
    a1 = (const re::RigDefinition *)(id)CoreRELog::log;
    if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_ERROR))
    {
      if (v70) {
        CFRange v18 = (char *)*((void *)&v70 + 1);
      }
      else {
        CFRange v18 = (char *)&v70 + 1;
      }
      LODWORD(v97) = 136315138;
      *(unint64_t *)((char *)v9[15].n128_u64 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = (unint64_t)v18;
      StringID v19 = "Rig Evaluation Error - %s";
LABEL_30:
      _os_log_error_impl(&dword_233120000, (os_log_t)a1, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v97, 0xCu);
    }
LABEL_31:

    uint64_t v17 = v10;
    uint64_t v10 = 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v31 = (id)CoreRELog::log;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v97) = 0;
    _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Rig Evaluation Error - No Rig Found", (uint8_t *)&v97, 2u);
  }

  return 0;
}

uint64_t RERigEvaluationGetInputJointCountForRig(uint64_t a1)
{
  return *(void *)(a1 + 3000);
}

uint64_t RERigEvaluationGetInputJointNameForRig(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 3000) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 3008) + 8 * a2);
  }
}

uint64_t RERigEvaluationGetOutputJointCountForRig(uint64_t a1)
{
  return *(void *)(a1 + 3024);
}

uint64_t RERigEvaluationGetOutputJointNameForRig(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 3024) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 3032) + 8 * a2);
  }
}

unint64_t *RERigEvaluationGetParentJointName(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)&long long v7 = a2;
  unint64_t result = (unint64_t *)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet(a1 + 1200, (char **)&v7);
  if (result)
  {
    unint64_t v4 = *(void *)(a1 + 1072);
    if (v4 <= *result)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v7 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v5 = *(void *)(a1 + 1088);
    unint64_t v6 = *(void *)(v5 + 56 * *result + 32);
    if (v6 != -1)
    {
      if (v4 > v6) {
        return *(unint64_t **)(v5 + 56 * v6 + 8);
      }
LABEL_9:
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v7 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return 0;
  }
  return result;
}

void RERigEvaluationGetInitialJointTransform(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)&long long v12 = a2;
  __n128 v3 = (uint64_t *)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet((uint64_t)(a1 + 150), (char **)&v12);
  if (v3)
  {
    uint64_t v5 = *v3;
    if (a1[134] <= (unint64_t)*v3)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_11:
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = a1[136];
    int v7 = *(unsigned __int8 *)(v6 + 56 * v5 + 16);
    if (v7 == 1)
    {
      unint64_t v9 = *(void *)(v6 + 56 * v5 + 24);
      if (a1[114] <= v9) {
        goto LABEL_12;
      }
      uint64_t v10 = a1[116] + (v9 << 6);
      int v11 = *(unsigned __int8 *)(v10 + 48);
      long long v12 = xmmword_23435FBB0;
      re::convertIntrinsicEulersToQuaternions<float>(v10 + 16, 1, v11, (uint64_t)&v12, 1);
    }
    else
    {
      if (v7 == 2)
      {
        unint64_t v8 = *(void *)(v6 + 56 * v5 + 24);
        if (a1[119] > v8)
        {
          re::calculateNodeSRT((float32x4_t *)(a1[121] + 96 * v8), (float32x4_t *)&v12);
          return;
        }
        goto LABEL_11;
      }
      re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) Unexpected node type: %u.", "!\"Unreachable code\"", "RERigEvaluationGetInitialJointTransform", 221, *(unsigned __int8 *)(v6 + 56 * v5 + 16));
      _os_crash();
      __break(1u);
    }
  }
}

void RERigEvaluationCalculateModelSpaceJointsFromPositions(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  RERigEvaluationCalculateJointsFromPositions(v2, v3, (unint64_t)&v5[-2 * v1], v4);
}

void RERigEvaluationCalculateJointsFromPositions(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[375];
  if (a1[342] == v5)
  {
    uint64_t v7 = a1[378];
    if (a1[369] == 2 * v7 && a1[363] == v7 && a1[360] == v7)
    {
      if (v5)
      {
        unint64_t v10 = 0;
        while (1)
        {
          unint64_t v11 = a1[342];
          if (v11 <= v10) {
            break;
          }
          *(_OWORD *)(a1[343] + 16 * v10) = *(_OWORD *)(a2 + 16 * v10);
          if (v5 == ++v10) {
            goto LABEL_9;
          }
        }
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v38 = 136315906;
        size_t v39 = "operator[]";
        __int16 v40 = 1024;
        int v41 = 468;
        __int16 v42 = 2048;
        unint64_t v43 = v10;
        __int16 v44 = 2048;
        unint64_t v45 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
LABEL_9:
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v21 = 0u;
        re::EvaluationContextSlices::init((re::EvaluationContextSlices *)buf, (re::EvaluationContext *)(a1 + 320));
        (*(void (**)(void *, uint8_t *))(a1[222] + 16))(a1 + 222, buf);
        if (!v7) {
          return;
        }
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unint64_t v10 = 0;
        for (unint64_t i = (_OWORD *)(a3 + 16); ; i += 3)
        {
          a3 = a1[369];
          if (a3 <= v11) {
            break;
          }
          *(i - 1) = *(_OWORD *)(a1[370] + 16 * v11);
          a3 = a1[363];
          if (a3 <= v10) {
            goto LABEL_24;
          }
          *unint64_t i = *(_OWORD *)(a1[364] + 8 * v11);
          unint64_t v4 = v11 + 1;
          a3 = a1[369];
          if (a3 <= v11 + 1) {
            goto LABEL_25;
          }
          i[1] = *(_OWORD *)(a1[370] + 16 * v11 + 16);
          a3 = a1[360];
          if (a3 <= v10) {
            goto LABEL_26;
          }
          long long v14 = (long long *)(a1[361] + v12);
          long long v15 = (_OWORD *)(a4 + v12);
          long long v16 = *v14;
          long long v17 = v14[1];
          long long v18 = v14[3];
          void v15[2] = v14[2];
          uint64_t v15[3] = v18;
          ++v10;
          *long long v15 = v16;
          v15[1] = v17;
          v12 += 64;
          v11 += 2;
          if (v7 == v10) {
            return;
          }
        }
      }
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v38 = 136315906;
      size_t v39 = "operator[]";
      __int16 v40 = 1024;
      int v41 = 468;
      __int16 v42 = 2048;
      unint64_t v43 = v11;
      __int16 v44 = 2048;
      unint64_t v45 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_24:
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v38 = 136315906;
      size_t v39 = "operator[]";
      __int16 v40 = 1024;
      int v41 = 468;
      __int16 v42 = 2048;
      unint64_t v43 = v10;
      __int16 v44 = 2048;
      unint64_t v45 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_25:
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v38 = 136315906;
      size_t v39 = "operator[]";
      __int16 v40 = 1024;
      int v41 = 468;
      __int16 v42 = 2048;
      unint64_t v43 = v4;
      __int16 v44 = 2048;
      unint64_t v45 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_26:
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v38 = 136315906;
      size_t v39 = "operator[]";
      __int16 v40 = 1024;
      int v41 = 468;
      __int16 v42 = 2048;
      unint64_t v43 = v10;
      __int16 v44 = 2048;
      unint64_t v45 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_27;
    }
  }
  if (CoreRELog::onceToken != -1) {
LABEL_27:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  StringID v19 = (id)CoreRELog::log;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "Rig Evaluation Error - The rig has not been properly constructed.", buf, 2u);
  }
}

void RERigEvaluationCalculateLocalSpaceJointsFromPositions(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  RERigEvaluationCalculateJointsFromPositions(v2, v3, v4, (uint64_t)&v5[-8 * v1]);
}

void RERigEvaluationData::~RERigEvaluationData(RERigEvaluationData *this)
{
  RERigEvaluationData::~RERigEvaluationData(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::RigDefinition *v2;

  *(void *)this = &unk_26E736CA0;
  uint64_t v2 = (RERigEvaluationData *)((char *)this + 32);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 377);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 374);
  re::EvaluationContext::~EvaluationContext((RERigEvaluationData *)((char *)this + 2560));
  re::EvaluationModelSingleThread::~EvaluationModelSingleThread((RERigEvaluationData *)((char *)this + 1776));
  re::RigGraphCompilation::~RigGraphCompilation((RERigEvaluationData *)((char *)this + 1640));
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 202);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 199);
  std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 194);
  re::DynamicArray<re::internal::RigIKCall>::deinit((uint64_t)this + 1512);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 186);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 183);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 180);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 177);
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 174);
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 171);
  re::FixedArray<re::internal::RigIKCall>::deinit((void *)this + 168);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 165);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 162);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 156);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 150);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 147);
  re::RigDefinition::~RigDefinition(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void *REGeomModelDescriptorCreate(unsigned int a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v4 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = a3;
      if (a3)
      {
        uint64_t v6 = a4;
        if (a4)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          size_t v10 = a2;
          do
            v9 += a3[v8++];
          while (a2 != v8);
          if (v9)
          {
            uint64_t v11 = 0;
            unsigned int v12 = 1;
            while (*(_DWORD *)(a4 + 4 * v11) < a1)
            {
              uint64_t v11 = v12;
              if (v9 <= v12++) {
                goto LABEL_11;
              }
            }
            return 0;
          }
          else
          {
LABEL_11:
            re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)&v26);
            unint64_t v4 = v26;
            v25[0] = v6;
            v25[1] = v9;
            v33[0] = 1;
            LOBYTE(v28) = 1;
            long long v14 = (re *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)v33, (uint64_t)&v28);
            if (!(_BYTE)v28)
            {
              long long v14 = v31;
              if (v31)
              {
                if (v32) {
                  long long v14 = (re *)(*(uint64_t (**)(void))(*(void *)v31 + 40))();
                }
              }
            }
            if (v33[0])
            {
              if (v9)
              {
                void v4[5] = a1;
                v4[6] = v10;
                long long v15 = re::globalAllocators(v14);
                long long v16 = (size_t *)(*(uint64_t (**)(uint64_t, size_t, void))(*(void *)v15[2] + 32))(v15[2], v10 + 16, 0);
                long long v17 = (char *)(v16 + 2);
                *long long v16 = v10;
                v16[1] = (size_t)v16;
                bzero(v16 + 2, v10);
                long long v28 = v17;
                memcpy(v17, v5, v10);
                uint64_t v40 = 1;
                size_t v41 = v10;
                int v39 = 0;
                char v38 = 1;
                re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v28, (char *)&re::ConvertToGeomModelValueType<unsigned char>::kValueType, (uint64_t *)&v41, &v40, &v39, &v38, (uint64_t *)&v28, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<unsigned char>, &v27);
                uint64_t v18 = v27;
                uint64_t v27 = 0;
                uint64_t v19 = v4[7];
                v4[7] = v18;
                if (v19)
                {

                  if (v27) {
                }
                  }
                re::GeomModelDescriptor::makeSlicePayload<unsigned int>((re *)v25, (uint64_t *)&v28);
                uint64_t v20 = (uint64_t)v28;
                long long v28 = 0;
                uint64_t v21 = v4[8];
                _WORD v4[8] = v20;
                if (v21)
                {

                  if (v28) {
                }
                  }
                char v22 = 1;
              }
              else
              {
                char v22 = 0;
                LOBYTE(v6) = v29;
                size_t v10 = v30;
                uint64_t v5 = v28;
              }
            }
            else
            {
              char v22 = 0;
              uint64_t v5 = v34;
              LOBYTE(v6) = v35;
              long long v34 = 0;
              uint64_t v35 = 0;
              size_t v10 = v36;
              size_t v36 = 0;
              uint64_t v37 = 0;
            }
            if (!v33[0] && v34 && (v35 & 1) != 0) {
              (*(void (**)(void))(*(void *)v34 + 40))();
            }
            if (v5) {
              char v23 = v22;
            }
            else {
              char v23 = 1;
            }
            if (v23 & 1) == 0 && (v6) {
              (*(void (**)(const void *, size_t))(*(void *)v5 + 40))(v5, v10);
            }
          }
        }
      }
    }
  }
  return v4;
}

void *REGeomModelDescriptorCreateHighVertexPerPolygon(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v6 = a4;
        if (a4)
        {
          uint64_t v7 = a1;
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          uint64_t v10 = a2;
          do
          {
            v9 += *(unsigned int *)(a3 + v8);
            v8 += 4;
          }
          while (4 * a2 != v8);
          if (v9)
          {
            uint64_t v11 = 0;
            unsigned int v12 = 1;
            while (*(_DWORD *)(a4 + 4 * v11) < a1)
            {
              uint64_t v11 = v12;
              if (v9 <= v12++) {
                goto LABEL_11;
              }
            }
            return 0;
          }
          else
          {
LABEL_11:
            re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)&v24);
            unint64_t v4 = v24;
            v23[0] = a3;
            v23[1] = v10;
            v22[0] = v6;
            v22[1] = v9;
            v30[0] = 1;
            LOBYTE(v25) = 1;
            long long v14 = (_anonymous_namespace_ *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)v30, (uint64_t)&v25);
            if (!(_BYTE)v25)
            {
              long long v14 = v28;
              if (v28)
              {
                if (v29) {
                  long long v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v28 + 40))();
                }
              }
            }
            if (v30[0])
            {
              if (v9)
              {
                void v4[5] = v7;
                v4[6] = v10;
                re::GeomModelDescriptor::makeSlicePayload<unsigned int>((re *)v23, &v25);
                uint64_t v15 = v25;
                uint64_t v25 = 0;
                uint64_t v16 = v4[7];
                v4[7] = v15;
                if (v16)
                {

                  if (v25) {
                }
                  }
                re::GeomModelDescriptor::makeSlicePayload<unsigned int>((re *)v22, &v25);
                uint64_t v17 = v25;
                uint64_t v25 = 0;
                uint64_t v18 = v4[8];
                _WORD v4[8] = v17;
                if (v18)
                {

                  if (v25) {
                }
                  }
                char v19 = 1;
              }
              else
              {
                char v19 = 0;
                LOBYTE(v10) = v26;
                uint64_t v6 = v27;
                uint64_t v7 = v25;
              }
            }
            else
            {
              char v19 = 0;
              uint64_t v7 = v31;
              LOBYTE(v10) = v32;
              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v6 = v33;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
            }
            if (!v30[0] && v31 && (v32 & 1) != 0) {
              (*(void (**)(void))(*(void *)v31 + 40))();
            }
            if (v7) {
              char v20 = v19;
            }
            else {
              char v20 = 1;
            }
            if (v20 & 1) == 0 && (v10) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v6);
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t REGeomModelDescriptorGetName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216)) {
    return *(void *)(a1 + 224);
  }
  else {
    return a1 + 217;
  }
}

uint64_t REGeomModelDescriptorSetName(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 208), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

uint64_t REGeomModelDescriptorGetVertexCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t REGeomModelDescriptorGetFaceCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t REGeomModelDescriptorGetIndexCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1) {
    return *(unsigned int *)(v1 + 40);
  }
  else {
    return 0;
  }
}

void REGeomModelDescriptorGetIndices(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  long long v14 = (_anonymous_namespace_ *)v3;
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v14, v8);
  if (v14) {

  }
  uint64_t v5 = v9;
  if (v9)
  {
    char v6 = (_DWORD *)v8[0];
    uint64_t v7 = v8[1];
    do
    {
      *a2++ = *v6;
      char v6 = (_DWORD *)((char *)v6 + v7);
      --v5;
    }
    while (v5);
  }
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(void *)v11 + 40))();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = 0;
  }
  if (v10) {
}
  }

void REGeomModelDescriptorGetFaceVertexCounts(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  long long v14 = (_anonymous_namespace_ *)v3;
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v14, v8);
  if (v14) {

  }
  uint64_t v5 = v9;
  if (v9)
  {
    char v6 = (_DWORD *)v8[0];
    uint64_t v7 = v8[1];
    do
    {
      *a2++ = *v6;
      char v6 = (_DWORD *)((char *)v6 + v7);
      --v5;
    }
    while (v5);
  }
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(void *)v11 + 40))();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = 0;
  }
  if (v10) {
}
  }

void REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  long long v14 = (_anonymous_namespace_ *)v3;
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v14, v8);
  if (v14) {

  }
  uint64_t v5 = v9;
  if (v9)
  {
    char v6 = (_DWORD *)v8[0];
    uint64_t v7 = v8[1];
    do
    {
      *a2++ = *v6;
      char v6 = (_DWORD *)((char *)v6 + v7);
      --v5;
    }
    while (v5);
  }
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(void *)v11 + 40))();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = 0;
  }
  if (v10) {
}
  }

uint64_t REGeomModelDescriptorGetAttributeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t REGeomModelDescriptorGetAttributeName(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 136) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 152) + 56 * a2;
  if (*(unsigned char *)(v2 + 8)) {
    return *(void *)(v2 + 16);
  }
  else {
    return v2 + 9;
  }
}

uint64_t REGeomModelDescriptorGetAttributeIndex(_anonymous_namespace_ *a1, const char *a2)
{
  id v4 = (uint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)a1 + 72, (uint64_t)&v7);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
  }
  else
  {
    if (v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
    return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t REGeomModelDescriptorGetAttributeValueCount(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 136) > (unint64_t)a2 && (uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40)) != 0) {
    return *(unsigned int *)(v2 + 40);
  }
  else {
    return 0;
  }
}

uint64_t REGeomModelDescriptorGetAttributeIndexCount(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 136) > (unint64_t)a2 && (uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 48)) != 0) {
    return *(unsigned int *)(v2 + 40);
  }
  else {
    return 0;
  }
}

uint64_t REGeomModelDescriptorGetAttributeRate(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 136) <= (unint64_t)a2) {
    return 255;
  }
  else {
    return *(unsigned __int8 *)(*(void *)(a1 + 152) + 56 * a2 + 32);
  }
}

uint64_t REGeomModelDescriptorGetAttributeType(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 136) > (unint64_t)a2
    && (uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40)) != 0
    && (unint64_t v3 = *(char *)(v2 + 33), v3 <= 0xB))
  {
    return byte_23442CAE4[v3];
  }
  else
  {
    return 255;
  }
}

BOOL REGeomModelDescriptorIsAttributeIndexed(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 136) > (unint64_t)a2 && *(void *)(*(void *)(a1 + 152) + 56 * a2 + 48) != 0;
}

BOOL REGeomModelDescriptorGetAttributeValuesInt8(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<signed char>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (unsigned char *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        v9 += v10;
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesUInt8(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<unsigned char>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (unsigned char *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        v9 += v10;
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesInt16(uint64_t a1, unsigned int a2, _WORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<short>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (_WORD *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        uint64_t v9 = (_WORD *)((char *)v9 + v10);
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesUInt16(uint64_t a1, unsigned int a2, _WORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<unsigned short>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (_WORD *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        uint64_t v9 = (_WORD *)((char *)v9 + v10);
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesInt32(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<int>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (_DWORD *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        uint64_t v9 = (_DWORD *)((char *)v9 + v10);
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesUInt32(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    uint64_t v18 = (_anonymous_namespace_ *)v6;
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
    re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v18, v12);
    if (v18) {

    }
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = (_DWORD *)v12[0];
      uint64_t v10 = v12[1];
      do
      {
        *a3++ = *v9;
        uint64_t v9 = (_DWORD *)((char *)v9 + v10);
        --v8;
      }
      while (v8);
    }
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(void))(*(void *)v15 + 40))();
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v15 = 0;
    }
    if (v14) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesFloat(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    re::GeomModelDescriptor::AttributeData::makeConvertedValues<float>(*(void *)(a1 + 152) + 56 * a2, (uint64_t)v10);
    uint64_t v6 = v11;
    if (v11)
    {
      id v7 = (_DWORD *)v10[0];
      uint64_t v8 = v10[1];
      do
      {
        *a3++ = *v7;
        id v7 = (_DWORD *)((char *)v7 + v8);
        --v6;
      }
      while (v6);
    }
    if (v13)
    {
      if (v14)
      {
        (*(void (**)(void))(*(void *)v13 + 40))();
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v13 = 0;
    }
    if (v12) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesDouble(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    re::GeomModelDescriptor::AttributeData::makeConvertedValues<double>(*(void *)(a1 + 152) + 56 * a2, (uint64_t)v10);
    uint64_t v6 = v11;
    if (v11)
    {
      id v7 = (void *)v10[0];
      uint64_t v8 = v10[1];
      do
      {
        *a3++ = *v7;
        id v7 = (void *)((char *)v7 + v8);
        --v6;
      }
      while (v6);
    }
    if (v13)
    {
      if (v14)
      {
        (*(void (**)(void))(*(void *)v13 + 40))();
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v13 = 0;
    }
    if (v12) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesVector2F(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv2_fEENS0_15ConvertedValuesIT_EEv(*(void *)(a1 + 152) + 56 * a2, (uint64_t)v10);
    uint64_t v6 = v11;
    if (v11)
    {
      id v7 = (void *)v10[0];
      uint64_t v8 = v10[1];
      do
      {
        *a3++ = *v7;
        id v7 = (void *)((char *)v7 + v8);
        --v6;
      }
      while (v6);
    }
    if (v13)
    {
      if (v14)
      {
        (*(void (**)(void))(*(void *)v13 + 40))();
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v13 = 0;
    }
    if (v12) {
  }
    }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesVector3F(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 40);
    if (v5)
    {
      id v7 = (void *)(v5 + 8);
      id v8 = (id)(v5 + 8);
      if (*(unsigned char *)(v5 + 32) && (*(unsigned __int8 *)(v5 + 33) | 2) == 0xB)
      {
        id v9 = v7;
        uint64_t v10 = *(void *)(v5 + 48);
        uint64_t v11 = *(void *)(v5 + 24) + *(void *)(v5 + 56);
        uint64_t v12 = *(void *)(v5 + 40);
        id v13 = v7;

        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        _ZNK2re8internal11DataPayload22computeConvertedValuesIDv3_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv(v5, (uint64_t)v20);
        if (v20[0])
        {
          uint64_t v14 = v21;
          uint64_t v12 = v22;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v11 = v23;
          uint64_t v10 = 16;
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v10 = 0;
          uint64_t v12 = 0;
          uint64_t v14 = 0;
        }
        re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v20);
        uint64_t v5 = 0;
        uint64_t v15 = v12;
        uint64_t v19 = v11;
      }

      if (v12)
      {
        uint64_t v17 = (_DWORD *)(v11 + 8);
        do
        {
          *(void *)&long long v16 = *((void *)v17 - 1);
          DWORD2(v16) = *v17;
          uint64_t v17 = (_DWORD *)((char *)v17 + v10);
          *a3++ = v16;
          --v12;
        }
        while (v12);
      }
      if (v14 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v19);
      }
      if (v5) {
    }
      }
  }
  return v4 > v3;
}

BOOL REGeomModelDescriptorGetAttributeValuesVector4F(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 136);
  if (v4 > a2)
  {
    _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv4_fEENS0_15ConvertedValuesIT_EEv(*(void *)(a1 + 152) + 56 * a2, (uint64_t)v10);
    uint64_t v6 = v11;
    if (v11)
    {
      id v7 = (_OWORD *)v10[0];
      uint64_t v8 = v10[1];
      do
      {
        *a3++ = *v7;
        id v7 = (_OWORD *)((char *)v7 + v8);
        --v6;
      }
      while (v6);
    }
    if (v13)
    {
      if (v14)
      {
        (*(void (**)(void))(*(void *)v13 + 40))();
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v13 = 0;
    }
    if (v12) {
  }
    }
  return v4 > v3;
}

uint64_t REGeomModelDescriptorGetAttributeIndices(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (*(void *)(a1 + 136) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 152) + 56 * a2 + 48);
  if (!v3) {
    return 0;
  }
  long long v16 = *(_anonymous_namespace_ **)(*(void *)(a1 + 152) + 56 * a2 + 48);
  id v5 = (id)(v3 + 8);
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v16, v10);
  if (v16) {

  }
  uint64_t v6 = v11;
  if (v11)
  {
    id v7 = (_DWORD *)v10[0];
    uint64_t v8 = v10[1];
    do
    {
      *a3++ = *v7;
      id v7 = (_DWORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
  }
  if (v13)
  {
    if (v14)
    {
      (*(void (**)(void))(*(void *)v13 + 40))();
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v13 = 0;
  }
  if (v12) {

  }
  return 1;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesInt8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<signed char>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(unsigned char *)(a5 + v13) = *(unsigned char *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesUInt8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<unsigned char>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(unsigned char *)(a5 + v13) = *(unsigned char *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<short>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_WORD *)(a5 + 2 * v13) = *(_WORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesUInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<unsigned short>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_WORD *)(a5 + 2 * v13) = *(_WORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<int>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_DWORD *)(a5 + 4 * v13) = *(_DWORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesUInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (v8)
  {
    unint64_t v9 = v8[5];
    uint64_t v10 = v8 + 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v22 = (_anonymous_namespace_ *)v8;
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v22, v17);
  if (v22) {

  }
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v9 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_DWORD *)(a5 + 4 * v13) = *(_DWORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v9 <= v12) {
          goto LABEL_17;
        }
      }
      unint64_t v13 = a3;
LABEL_17:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesFloat(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 128) + 56 * a2;
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9) {
    unint64_t v10 = *(void *)(v9 + 40);
  }
  else {
    unint64_t v10 = 0;
  }
  re::GeomModelDescriptor::AttributeData::makeConvertedValues<float>(v8, (uint64_t)v17);
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v10 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_DWORD *)(a5 + 4 * v13) = *(_DWORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v10 <= v12) {
          goto LABEL_15;
        }
      }
      unint64_t v13 = a3;
LABEL_15:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesDouble(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 128) + 56 * a2;
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9) {
    unint64_t v10 = *(void *)(v9 + 40);
  }
  else {
    unint64_t v10 = 0;
  }
  re::GeomModelDescriptor::AttributeData::makeConvertedValues<double>(v8, (uint64_t)v17);
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v10 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(void *)(a5 + 8 * v13) = *(void *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v10 <= v12) {
          goto LABEL_15;
        }
      }
      unint64_t v13 = a3;
LABEL_15:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesVector2F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 128) + 56 * a2;
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9) {
    unint64_t v10 = *(void *)(v9 + 40);
  }
  else {
    unint64_t v10 = 0;
  }
  _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv2_fEENS0_15ConvertedValuesIT_EEv(v8, (uint64_t)v17);
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v10 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(void *)(a5 + 8 * v13) = *(void *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v10 <= v12) {
          goto LABEL_15;
        }
      }
      unint64_t v13 = a3;
LABEL_15:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesVector3F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5, __n128 a6)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 128) + 56 * a2 + 40);
  if (!v9)
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v10 = 0;
    if (a3) {
      goto LABEL_15;
    }
LABEL_8:
    BOOL v19 = 1;
    if (!v17) {
      goto LABEL_26;
    }
LABEL_24:
    if (v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v18);
    }
    goto LABEL_26;
  }
  unint64_t v10 = *(void *)(v9 + 40);
  BOOL v11 = (void *)(v9 + 8);
  id v12 = (id)(v9 + 8);
  if (*(unsigned char *)(v9 + 32) && (*(unsigned __int8 *)(v9 + 33) | 2) == 0xB)
  {
    id v13 = v11;
    uint64_t v14 = *(void *)(v9 + 48);
    uint64_t v15 = *(void *)(v9 + 24) + *(void *)(v9 + 56);
    id v16 = v11;

    uint64_t v17 = 0;
    uint64_t v25 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    _ZNK2re8internal11DataPayload22computeConvertedValuesIDv3_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv(v9, (uint64_t)v26);
    if (v26[0])
    {
      uint64_t v17 = v27;
      uint64_t v25 = v28;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v15 = v29;
      uint64_t v14 = 16;
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      uint64_t v17 = 0;
      uint64_t v25 = 0;
    }
    re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v26);
    uint64_t v9 = 0;
    uint64_t v18 = v15;
  }

  uint64_t v20 = v25;
  if (!a3) {
    goto LABEL_8;
  }
LABEL_15:
  unint64_t v21 = *a4;
  if (v10 > v21)
  {
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = v15 + v21 * v14;
      a6.n128_u64[0] = *(void *)v23;
      a6.n128_u32[2] = *(_DWORD *)(v23 + 8);
      *(__n128 *)(a5 + 16 * v22) = a6;
      if (a3 - 1 == v22) {
        break;
      }
      unint64_t v21 = a4[++v22];
      if (v10 <= v21) {
        goto LABEL_23;
      }
    }
    unint64_t v22 = a3;
LABEL_23:
    BOOL v19 = v22 >= a3;
    if (!v17) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  BOOL v19 = 0;
  if (v17) {
    goto LABEL_24;
  }
LABEL_26:
  if (v9) {

  }
  return v19;
}

BOOL REGeomModelDescriptorGetAttributeValuesByIndicesVector4F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 112) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 128) + 56 * a2;
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9) {
    unint64_t v10 = *(void *)(v9 + 40);
  }
  else {
    unint64_t v10 = 0;
  }
  _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv4_fEENS0_15ConvertedValuesIT_EEv(v8, (uint64_t)v17);
  if (a3)
  {
    unint64_t v12 = *a4;
    if (v10 <= v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v17[0];
      uint64_t v15 = v17[1];
      while (1)
      {
        *(_OWORD *)(a5 + 16 * v13) = *(_OWORD *)(v14 + v12 * v15);
        if (a3 - 1 == v13) {
          break;
        }
        unint64_t v12 = a4[++v13];
        if (v10 <= v12) {
          goto LABEL_15;
        }
      }
      unint64_t v13 = a3;
LABEL_15:
      BOOL v11 = v13 >= a3;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v19)
  {
    if (v20)
    {
      (*(void (**)(void))(*(void *)v19 + 40))();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v19 = 0;
  }
  if (v18) {

  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<signed char>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<signed char,unsigned int>((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<unsigned char>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<unsigned char,unsigned int>((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<short>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<short,unsigned int>((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<unsigned short>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<unsigned short,unsigned int>(v9, (uint64_t)&v14, a3, (re *)v13, (re *)v19, (uint64_t)v16);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<int>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<int,unsigned int>(v9, (uint64_t)&v14, a3, (re *)v13, (re *)v19, (uint64_t)v16);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<unsigned int>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<unsigned int,unsigned int>(v9, (uint64_t)&v14, a3, (re *)v13, (re *)v19, (uint64_t)v16);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<float>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<float,unsigned int>(v9, (uint64_t)&v14, a3, (re *)v13, (re *)v19, (uint64_t)v16);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL anonymous namespace'::REGeomModelDescriptorAddAttributeHelper<double>(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  re::GeomModelDescriptor::setAttribute<double,unsigned int>((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv2_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  _ZN2re19GeomModelDescriptor12setAttributeIDv2_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv3_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  _ZN2re19GeomModelDescriptor12setAttributeIDv3_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE((uint64_t)v16, v9, (uint64_t)&v14, a3, (unint64_t)v13, (re *)v19);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv4_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5)
{
  switch(a3)
  {
    case 3:
      uint64_t v8 = a1[8];
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 40);
      }
      break;
    case 2:
      uint64_t v8 = a1[6];
      break;
    case 1:
      uint64_t v8 = a1[5];
      break;
    default:
      uint64_t v8 = a4;
      if (!a3) {
        uint64_t v8 = 1;
      }
      break;
  }
  if (v8 != a4) {
    return 0;
  }
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a4;
  v13[0] = a5;
  v13[1] = v10;
  v19[0] = 0;
  v19[1] = 0;
  _ZN2re19GeomModelDescriptor12setAttributeIDv4_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE(v9, (uint64_t)&v14, a3, (re *)v13, (re *)v19, (uint64_t)v16);
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  BOOL v11 = v16[0] != 0;
  if (!v16[0] && v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v11;
}

BOOL REGeomModelDescriptorAddIndexedAttributeInt8(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<signed char,unsigned int>((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeUInt8(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<unsigned char,unsigned int>((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeInt16(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<short,unsigned int>((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeUInt16(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<unsigned short,unsigned int>(v18, (uint64_t)&v22, a3, (re *)v21, (re *)v20, (uint64_t)v24);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeInt32(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<int,unsigned int>(v18, (uint64_t)&v22, a3, (re *)v21, (re *)v20, (uint64_t)v24);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeUInt32(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<unsigned int,unsigned int>(v18, (uint64_t)&v22, a3, (re *)v21, (re *)v20, (uint64_t)v24);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeFloat(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<float,unsigned int>(v18, (uint64_t)&v22, a3, (re *)v21, (re *)v20, (uint64_t)v24);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeDouble(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        re::GeomModelDescriptor::setAttribute<double,unsigned int>((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
}

BOOL REGeomModelDescriptorAddIndexedAttributeVector2F(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        _ZN2re19GeomModelDescriptor12setAttributeIDv2_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
  return _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv2_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(a1, a2, a3, a4, a5);
}

BOOL REGeomModelDescriptorAddIndexedAttributeVector3F(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        _ZN2re19GeomModelDescriptor12setAttributeIDv3_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE((uint64_t)v24, v18, (uint64_t)&v22, a3, (unint64_t)v21, (re *)v20);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
  return _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv3_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(a1, a2, a3, a4, a5);
}

BOOL REGeomModelDescriptorAddIndexedAttributeVector4F(void *a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7)
{
  if (a7)
  {
    switch(a3)
    {
      case 3:
        uint64_t v12 = a1[8];
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 40);
        }
        break;
      case 2:
        uint64_t v12 = a1[6];
        break;
      case 1:
        uint64_t v12 = a1[5];
        break;
      default:
        uint64_t v12 = a6;
        if (!a3) {
          uint64_t v12 = 1;
        }
        break;
    }
    if (v12 == a6)
    {
      uint64_t v14 = a6;
      if (!a6)
      {
LABEL_19:
        char v18 = a1 + 3;
        v21[0] = a5;
        v21[1] = a4;
        v20[0] = a7;
        v20[1] = v14;
        _ZN2re19GeomModelDescriptor12setAttributeIDv4_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE(v18, (uint64_t)&v22, a3, (re *)v21, (re *)v20, (uint64_t)v24);
        if (v22 && (v23 & 1) != 0) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        BOOL v19 = v24[0] != 0;
        if (!v24[0] && v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        return v19;
      }
      uint64_t v15 = a6;
      id v16 = a7;
      while (1)
      {
        unsigned int v17 = *v16++;
        if (v17 >= a4) {
          break;
        }
        if (!--v15) {
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
  return _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv4_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(a1, a2, a3, a4, a5);
}

BOOL REGeomModelDescriptorDeleteAttribute(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)((char *)a1 + 24);
  re::GeomModelDescriptor::deleteAttribute(v3, (const re::DynamicString *)&v6, v8);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  int v4 = v8[0];
  if (!v8[0] && v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v4 != 0;
}

BOOL REGeomModelDescriptorAddAttributeAlias(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  id v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  __n128 v7 = re::GeomModelDescriptor::addAttributeAlias(v5, (const re::DynamicString *)&v12, (const re::DynamicString *)&v10, (uint64_t)v14);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v10 + 40))(v7);
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v12 + 40))(v7);
  }
  int v8 = v14[0];
  if (!v14[0] && v15 && (v16 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v15 + 40))(v7);
  }
  return v8 != 0;
}

BOOL REGeomModelDescriptorRemoveAttributeAlias(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)((char *)a1 + 24);
  re::GeomModelDescriptor::removeAttributeAlias(v3, (const re::DynamicString *)&v6, v8);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  int v4 = v8[0];
  if (!v8[0] && v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v4 != 0;
}

void REGeomModelDescriptorClearMaterialAssignments(uint64_t a1)
{
  *(_DWORD *)(a1 + 28) = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {

    *(void *)(a1 + 32) = 0;
  }
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentForModel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

void REGeomModelDescriptorSetMaterialAssignmentsPerFace(uint64_t a1, uint64_t a2)
{
  __n128 v2 = re::GeomModelDescriptor::setMaterialAssignmentsPerFace((_anonymous_namespace_ *)(a1 + 24), a2, *(void *)(a1 + 48), (uint64_t)v3);
  if (!v3[0] && v4 && (v5 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v4 + 40))(v2);
  }
}

uint64_t REGeomModelDescriptorGetModelMaterialAssignment(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(a1 + 28);
  }
}

BOOL REGeomModelDescriptorHasMaterialAssignmentsPerFace(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

BOOL REGeomModelDescriptorGetMaterialAssignmentsPerFace(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v15 = *(_anonymous_namespace_ **)(a1 + 32);
    id v4 = (id)(v2 + 8);
    re::GeomModelDescriptor::makeConvertedValues<unsigned int>(&v15, v9);
    if (v15) {

    }
    uint64_t v5 = v10;
    if (v10)
    {
      uint64_t v6 = (_DWORD *)v9[0];
      uint64_t v7 = v9[1];
      do
      {
        *a2++ = *v6;
        uint64_t v6 = (_DWORD *)((char *)v6 + v7);
        --v5;
      }
      while (v5);
    }
    if (v12)
    {
      if (v13)
      {
        (*(void (**)(void))(*(void *)v12 + 40))();
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      uint64_t v12 = 0;
    }
    if (v11) {
  }
    }
  return v2 != 0;
}

uint64_t REGeomModelDescriptorAddSkinningData(void *a1, int a2, uint64_t a3, uint64_t a4, char *__s)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v10 = (_anonymous_namespace_ *)strlen(__s);
  unint64_t v11 = (unint64_t)v10 + 2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  size_t v12 = strlen(__s);
  memcpy(v28, __s, v12 + 1);
  long long v13 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  v25[0] = *MEMORY[0x263EF89A8];
  v25[1] = v13;
  long long v14 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  void v25[2] = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  uint64_t v25[3] = v14;
  _ZN12_GLOBAL__N_139REGeomModelDescriptorAddAttributeHelperIDv4_fEEbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKT_(a1, "skinnedAnimationGeometryBindTransform", 4, 4u, (uint64_t)v25);
  uint64_t v15 = a1[5];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (v15)
  {
    uint64_t v17 = 0;
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    int v20 = a2;
    do
    {
      if (v19 == v17)
      {
        uint64_t v29 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v30 = 136315906;
        uint64_t v31 = "operator[]";
        __int16 v32 = 1024;
        int v33 = 468;
        __int16 v34 = 2048;
        uint64_t v35 = v19;
        __int16 v36 = 2048;
        uint64_t v37 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v18 + 4 * v17) = v20;
      v20 += a2;
      ++v17;
    }
    while (v15 != v17);
  }
  else
  {
    uint64_t v18 = v24;
  }
  if (v22 && v23) {
    (*(void (**)(void))(*(void *)v22 + 40))();
  }
  uint64_t result = v26;
  if (v26)
  {
    if (v27) {
      return (*(uint64_t (**)(void))(*(void *)v26 + 40))();
    }
  }
  return result;
}

uint64_t REGeomModelDescriptorGetWindingOrder(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REGeomModelDescriptorSetWindingOrder(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REGeomModelDescriptorGetSurfaceType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t REGeomModelDescriptorSetSurfaceType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t REGeomModelDescriptorCreateFromBoxOptions(uint64_t *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  long long v9 = *(_OWORD *)(a1 + 1);
  char v10 = *((unsigned char *)a1 + 24);
  __int16 v11 = *(_WORD *)((char *)a1 + 25);
  uint64_t v7 = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v6 = 0;
  if (a2)
  {
    re::buildBox((re::GeomMesh *)v4, (uint64_t)&v8);
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v4, 1uLL);
    if (!v5)
    {
      uint64_t v12 = 0;
      memset(v13, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v14 = 136315906;
      *(void *)&_OWORD v14[4] = "operator[]";
      __int16 v15 = 1024;
      int v16 = 789;
      __int16 v17 = 2048;
      uint64_t v18 = 0;
      __int16 v19 = 2048;
      uint64_t v20 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::buildBoxHelper(v7, v13, (unsigned __int16 *)&v8);
  }
  re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)v14);
  re::GeomModelDescriptor::makeFromGeomMeshes((_anonymous_namespace_ *)v4, v13);
  uint64_t v2 = *(void *)v14;
  if (LOBYTE(v13[0])) {
    re::GeomModelDescriptor::operator=(*(void *)v14 + 24, (uint64_t)v13 + 8);
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v13);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v4);
  return v2;
}

uint64_t re::GeomModelDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = (void *)(a2 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v7;
  uint64_t v8 = a2 + 48;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 48, (uint64_t *)(a2 + 48));
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a1 + 96);
  if (!v11 || !v10 || v11 == v10)
  {
    *(void *)(a1 + 96) = v10;
    *(void *)(a2 + 96) = v11;
    uint64_t v12 = *(void *)(a1 + 104);
    *(void *)(a1 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a2 + 104);
    *(void *)(a2 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v12;
    uint64_t v13 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a2 + 112) = v13;
    uint64_t v14 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a2 + 128) = v14;
    ++*(_DWORD *)(a2 + 120);
    ++*(_DWORD *)(a1 + 120);
    re::DynamicString::operator=((re::DynamicString *)(a1 + 184), (re::DynamicString *)(a2 + 184));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 136, (uint64_t *)(a2 + 136));
    *(_WORD *)a2 = 0;
    *(unsigned char *)(a2 + 2) = 0;
    *(_DWORD *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    uint64_t v15 = *(void *)(a2 + 8);
    if (v15)
    {

      *(void *)(a2 + 8) = 0;
    }
    *uint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v16 = *(void *)(a2 + 32);
    if (v16)
    {

      *(void *)(a2 + 32) = 0;
    }
    uint64_t v17 = *(void *)(a2 + 40);
    if (v17)
    {

      *(void *)(a2 + 40) = 0;
    }
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v8);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::clear(a2 + 96);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2 + 136);
    v19[0] = "";
    v19[1] = 0;
    re::DynamicString::operator=((re::DynamicString *)(a2 + 184), (uint64_t)v19);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REGeomModelDescriptorCreateFromSphereOptions(uint64_t a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  unint64_t v9 = a1 & 0xFFFFFFFF0000FFFFLL;
  int v10 = a2 & 0xFFFFFF;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  int v7 = 0;
  if (a3)
  {
    re::buildSphere((re::GeomMesh *)v5, (unsigned __int16 *)&v9);
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v5, 1uLL);
    if (!v6)
    {
      uint64_t v11 = 0;
      memset(v12, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v13 = 136315906;
      *(void *)&char v13[4] = "operator[]";
      __int16 v14 = 1024;
      int v15 = 789;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::buildSphere(v8, (unsigned __int16 *)&v9);
  }
  re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)v13);
  re::GeomModelDescriptor::makeFromGeomMeshes((_anonymous_namespace_ *)v5, v12);
  uint64_t v3 = *(void *)v13;
  if (LOBYTE(v12[0])) {
    re::GeomModelDescriptor::operator=(*(void *)v13 + 24, (uint64_t)v12 + 8);
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v12);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v5);
  return v3;
}

uint64_t REGeomModelDescriptorCreateFromCapsuleOptions(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned __int16 v8 = *(_WORD *)a1;
  int v9 = *(_DWORD *)(a1 + 2);
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  __int16 v12 = *(_WORD *)(a1 + 17);
  uint64_t v7 = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v6 = 0;
  if (a2)
  {
    re::buildCapsule((re::GeomMesh *)v4, &v8);
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v4, 1uLL);
    if (!v5)
    {
      uint64_t v13 = 0;
      memset(v14, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v15 = 136315906;
      *(void *)&_OWORD v15[4] = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      __int16 v20 = 2048;
      uint64_t v21 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::buildCapsule(v7, &v8);
  }
  re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)v15);
  re::GeomModelDescriptor::makeFromGeomMeshes((_anonymous_namespace_ *)v4, v14);
  uint64_t v2 = *(void *)v15;
  if (LOBYTE(v14[0])) {
    re::GeomModelDescriptor::operator=(*(void *)v15 + 24, (uint64_t)v14 + 8);
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v14);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v4);
  return v2;
}

uint64_t REGeomModelDescriptorCreateFromConeOptions(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v8 = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  int v7 = 0;
  if (a3)
  {
    re::buildCone((uint64_t)v5, (unsigned __int16 *)v9);
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v5, 1uLL);
    if (!v6)
    {
      void v9[2] = 0;
      memset(v10, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)char v11 = 136315906;
      *(void *)&uint64_t v11[4] = "operator[]";
      __int16 v12 = 1024;
      int v13 = 789;
      __int16 v14 = 2048;
      uint64_t v15 = 0;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::buildCone(v8, (unsigned __int16 *)v9);
  }
  re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)v11);
  re::GeomModelDescriptor::makeFromGeomMeshes((_anonymous_namespace_ *)v5, v10);
  uint64_t v3 = *(void *)v11;
  if (LOBYTE(v10[0])) {
    re::GeomModelDescriptor::operator=(*(void *)v11 + 24, (uint64_t)v10 + 8);
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v10);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v5);
  return v3;
}

uint64_t REGeomModelDescriptorCreateFromCylinderOptions(int *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  uint64_t v9 = *(void *)(a1 + 1);
  int v10 = a1[3];
  int v11 = a1[4];
  char v12 = *((unsigned char *)a1 + 20);
  uint64_t v7 = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v6 = 0;
  if (a2)
  {
    re::buildCylinder((uint64_t)v4, (unsigned __int16 *)&v8);
  }
  else
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)v4, 1uLL);
    if (!v5)
    {
      uint64_t v13 = 0;
      memset(v14, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v15 = 136315906;
      *(void *)&_OWORD v15[4] = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      __int16 v20 = 2048;
      uint64_t v21 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::buildCylinder(v7, (unsigned __int16 *)&v8);
  }
  re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>((re *)v15);
  re::GeomModelDescriptor::makeFromGeomMeshes((_anonymous_namespace_ *)v4, v14);
  uint64_t v2 = *(void *)v15;
  if (LOBYTE(v14[0])) {
    re::GeomModelDescriptor::operator=(*(void *)v15 + 24, (uint64_t)v14 + 8);
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v14);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v4);
  return v2;
}

uint64_t *re::GeomModelDescriptor::freeReNewedArrayData<unsigned char>(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t re::GeomModelDescriptor::setAttribute<signed char,unsigned int>(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v42, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v42, a4, 0, (uint64_t)v37);
  if (!v37[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v38;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v39;
    *(void *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 32) = v40;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    long long v40 = 0uLL;
    goto LABEL_28;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v54;
    long long v23 = v55;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_28;
  }
  char v34 = 4;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v32, (re::DynamicString *)&v42);
  char v34 = a4;
  __int16 v16 = re::globalAllocators(v15);
  size_t v17 = *(void *)(a5 + 8);
  if (v17)
  {
    uint64_t v18 = v17 + 16;
    if (v17 >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 1, v17);
      _os_crash();
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v19 = (size_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v16[2] + 32))(v16[2], v18, 0);
    __int16 v20 = v19 + 2;
    *uint64_t v19 = v17;
    v19[1] = (size_t)v19;
    bzero(v19 + 2, v17);
    size_t v21 = *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v54 = v20;
  memcpy(v20, *(const void **)a5, v21);
  *(void *)uint64_t v47 = *(void *)(a5 + 8);
  uint64_t v46 = 1;
  int v45 = 0;
  char v44 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v54, (char *)&re::ConvertToGeomModelValueType<signed char>::kValueType, (uint64_t *)v47, &v46, &v45, &v44, (uint64_t *)&v54, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<signed char>, &v31);
  uint64_t v24 = v35;
  uint64_t v35 = v31;
  uint64_t v31 = v24;
  if (v24) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v54);
    uint64_t v25 = v36;
    uint64_t v36 = v54;
    *(void *)&long long v54 = v25;
    if (v25) {
  }
    }
  uint64_t v26 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v42);
  if (!v26)
  {
    *(void *)&long long v54 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v42, &v54);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v32);
    uint64_t v29 = v36;
    goto LABEL_21;
  }
  a6 = *v26;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v26)
  {
LABEL_37:
    uint64_t v46 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v47 = 136315906;
    *(void *)&void v47[4] = "operator[]";
    __int16 v48 = 1024;
    int v49 = 789;
    __int16 v50 = 2048;
    uint64_t v51 = a6;
    __int16 v52 = 2048;
    unint64_t v53 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v27 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v32);
  *((unsigned char *)v27 + 32) = v34;
  uint64_t v28 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v35;
  uint64_t v35 = v28;
  uint64_t v29 = *((void *)v27 + 6);
  *((void *)v27 + 6) = v36;
  uint64_t v36 = v29;
LABEL_21:
  *(unsigned char *)a1 = 1;
  if (v29)
  {

    uint64_t v36 = 0;
  }
  if (v35)
  {

    uint64_t v35 = 0;
  }
  if (v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
LABEL_28:
  if (!v37[0] && v39 && (v40 & 1) != 0) {
    (*(void (**)(void))(*(void *)v39 + 40))();
  }
  uint64_t result = v42;
  if (v42)
  {
    if (v43) {
      return (*(uint64_t (**)(void))(*(void *)v42 + 40))();
    }
  }
  return result;
}

uint64_t *re::GeomModelDescriptor::freeReNewedArrayData<signed char>(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t re::GeomModelDescriptor::setAttribute<unsigned char,unsigned int>(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v42, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v42, a4, 1, (uint64_t)v37);
  if (!v37[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v38;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v39;
    *(void *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 32) = v40;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    long long v40 = 0uLL;
    goto LABEL_28;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v54;
    long long v23 = v55;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_28;
  }
  char v34 = 4;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v32, (re::DynamicString *)&v42);
  char v34 = a4;
  __int16 v16 = re::globalAllocators(v15);
  size_t v17 = *(void *)(a5 + 8);
  if (v17)
  {
    uint64_t v18 = v17 + 16;
    if (v17 >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 1, v17);
      _os_crash();
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v19 = (size_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v16[2] + 32))(v16[2], v18, 0);
    __int16 v20 = v19 + 2;
    *uint64_t v19 = v17;
    v19[1] = (size_t)v19;
    bzero(v19 + 2, v17);
    size_t v21 = *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v54 = v20;
  memcpy(v20, *(const void **)a5, v21);
  *(void *)uint64_t v47 = *(void *)(a5 + 8);
  uint64_t v46 = 1;
  int v45 = 0;
  char v44 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v54, (char *)&re::ConvertToGeomModelValueType<unsigned char>::kValueType, (uint64_t *)v47, &v46, &v45, &v44, (uint64_t *)&v54, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<unsigned char>, &v31);
  uint64_t v24 = v35;
  uint64_t v35 = v31;
  uint64_t v31 = v24;
  if (v24) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v54);
    uint64_t v25 = v36;
    uint64_t v36 = v54;
    *(void *)&long long v54 = v25;
    if (v25) {
  }
    }
  uint64_t v26 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v42);
  if (!v26)
  {
    *(void *)&long long v54 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v42, &v54);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v32);
    uint64_t v29 = v36;
    goto LABEL_21;
  }
  a6 = *v26;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v26)
  {
LABEL_37:
    uint64_t v46 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v47 = 136315906;
    *(void *)&void v47[4] = "operator[]";
    __int16 v48 = 1024;
    int v49 = 789;
    __int16 v50 = 2048;
    uint64_t v51 = a6;
    __int16 v52 = 2048;
    unint64_t v53 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v27 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v32);
  *((unsigned char *)v27 + 32) = v34;
  uint64_t v28 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v35;
  uint64_t v35 = v28;
  uint64_t v29 = *((void *)v27 + 6);
  *((void *)v27 + 6) = v36;
  uint64_t v36 = v29;
LABEL_21:
  *(unsigned char *)a1 = 1;
  if (v29)
  {

    uint64_t v36 = 0;
  }
  if (v35)
  {

    uint64_t v35 = 0;
  }
  if (v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
LABEL_28:
  if (!v37[0] && v39 && (v40 & 1) != 0) {
    (*(void (**)(void))(*(void *)v39 + 40))();
  }
  uint64_t result = v42;
  if (v42)
  {
    if (v43) {
      return (*(uint64_t (**)(void))(*(void *)v42 + 40))();
    }
  }
  return result;
}

uint64_t re::GeomModelDescriptor::setAttribute<short,unsigned int>(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v43, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v43, a4, 2, (uint64_t)v38);
  if (!v38[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v40;
    *(void *)(a1 + 48) = v42;
    *(_OWORD *)(a1 + 32) = v41;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    long long v41 = 0uLL;
    goto LABEL_29;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v55;
    long long v23 = v56;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_29;
  }
  char v35 = 4;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v33, (re::DynamicString *)&v43);
  char v35 = a4;
  __int16 v16 = re::globalAllocators(v15);
  uint64_t v18 = *(void *)(a5 + 8);
  if (v18)
  {
    if (v18 < 0 || (unint64_t)(2 * v18) >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 2, v18);
      _os_crash();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v16[2] + 32))(v16[2], (2 * v18 + 16) | 1, 0);
    __int16 v20 = (void *)((v19 + 17) & 0xFFFFFFFFFFFFFFFELL);
    *(v20 - 2) = v18;
    *(v20 - 1) = v19;
    bzero(v20, 2 * v18);
    size_t v21 = 2 * *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v55 = v20;
  memcpy(v20, *(const void **)a5, v21);
  uint64_t v24 = *(void *)(a5 + 8);
  uint64_t v47 = 2;
  *(void *)__int16 v48 = v24;
  int v46 = 0;
  char v45 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v55, (char *)&re::ConvertToGeomModelValueType<short>::kValueType, (uint64_t *)v48, &v47, &v46, &v45, (uint64_t *)&v55, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<short>, &v32);
  uint64_t v25 = v36;
  uint64_t v36 = v32;
  uint64_t v32 = v25;
  if (v25) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v55);
    uint64_t v26 = v37;
    uint64_t v37 = v55;
    *(void *)&long long v55 = v26;
    if (v26) {
  }
    }
  uint64_t v27 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v43);
  if (!v27)
  {
    *(void *)&long long v55 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v43, &v55);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v33);
    uint64_t v30 = v37;
    goto LABEL_22;
  }
  a6 = *v27;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v27)
  {
LABEL_38:
    uint64_t v47 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v48 = 136315906;
    *(void *)&_OWORD v48[4] = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    __int16 v52 = a6;
    __int16 v53 = 2048;
    unint64_t v54 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v28 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v33);
  *((unsigned char *)v28 + 32) = v35;
  uint64_t v29 = *((void *)v28 + 5);
  *((void *)v28 + 5) = v36;
  uint64_t v36 = v29;
  uint64_t v30 = *((void *)v28 + 6);
  *((void *)v28 + 6) = v37;
  uint64_t v37 = v30;
LABEL_22:
  *(unsigned char *)a1 = 1;
  if (v30)
  {

    uint64_t v37 = 0;
  }
  if (v36)
  {

    uint64_t v36 = 0;
  }
  if (v33 && (v34 & 1) != 0) {
    (*(void (**)(void))(*(void *)v33 + 40))();
  }
LABEL_29:
  if (!v38[0] && v40 && (v41 & 1) != 0) {
    (*(void (**)(void))(*(void *)v40 + 40))();
  }
  uint64_t result = v43;
  if (v43)
  {
    if (v44) {
      return (*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return result;
}

uint64_t *re::GeomModelDescriptor::freeReNewedArrayData<short>(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t re::GeomModelDescriptor::setAttribute<double,unsigned int>(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v43, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v43, a4, 7, (uint64_t)v38);
  if (!v38[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v40;
    *(void *)(a1 + 48) = v42;
    *(_OWORD *)(a1 + 32) = v41;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    long long v41 = 0uLL;
    goto LABEL_29;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v55;
    long long v23 = v56;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_29;
  }
  char v35 = 4;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v33, (re::DynamicString *)&v43);
  char v35 = a4;
  __int16 v16 = re::globalAllocators(v15);
  unint64_t v18 = *(void *)(a5 + 8);
  if (v18)
  {
    if (v18 >> 61 || 8 * v18 >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 8, v18);
      _os_crash();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v16[2] + 32))(v16[2], (8 * v18 + 16) | 7, 0);
    __int16 v20 = (void *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v20 - 2) = v18;
    *(v20 - 1) = v19;
    bzero(v20, 8 * v18);
    size_t v21 = 8 * *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v55 = v20;
  memcpy(v20, *(const void **)a5, v21);
  uint64_t v24 = *(void *)(a5 + 8);
  uint64_t v47 = 8;
  *(void *)__int16 v48 = v24;
  int v46 = 0;
  char v45 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v55, (char *)&re::ConvertToGeomModelValueType<double>::kValueType, (uint64_t *)v48, &v47, &v46, &v45, (uint64_t *)&v55, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<double>, &v32);
  uint64_t v25 = v36;
  uint64_t v36 = v32;
  uint64_t v32 = v25;
  if (v25) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v55);
    uint64_t v26 = v37;
    uint64_t v37 = v55;
    *(void *)&long long v55 = v26;
    if (v26) {
  }
    }
  uint64_t v27 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v43);
  if (!v27)
  {
    *(void *)&long long v55 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v43, &v55);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v33);
    uint64_t v30 = v37;
    goto LABEL_22;
  }
  a6 = *v27;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v27)
  {
LABEL_38:
    uint64_t v47 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v48 = 136315906;
    *(void *)&_OWORD v48[4] = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    __int16 v52 = a6;
    __int16 v53 = 2048;
    unint64_t v54 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v28 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v33);
  *((unsigned char *)v28 + 32) = v35;
  uint64_t v29 = *((void *)v28 + 5);
  *((void *)v28 + 5) = v36;
  uint64_t v36 = v29;
  uint64_t v30 = *((void *)v28 + 6);
  *((void *)v28 + 6) = v37;
  uint64_t v37 = v30;
LABEL_22:
  *(unsigned char *)a1 = 1;
  if (v30)
  {

    uint64_t v37 = 0;
  }
  if (v36)
  {

    uint64_t v36 = 0;
  }
  if (v33 && (v34 & 1) != 0) {
    (*(void (**)(void))(*(void *)v33 + 40))();
  }
LABEL_29:
  if (!v38[0] && v40 && (v41 & 1) != 0) {
    (*(void (**)(void))(*(void *)v40 + 40))();
  }
  uint64_t result = v43;
  if (v43)
  {
    if (v44) {
      return (*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return result;
}

uint64_t *re::GeomModelDescriptor::freeReNewedArrayData<double>(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t _ZN2re19GeomModelDescriptor12setAttributeIDv2_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v43, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v43, a4, 8, (uint64_t)v38);
  if (!v38[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v40;
    *(void *)(a1 + 48) = v42;
    *(_OWORD *)(a1 + 32) = v41;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    long long v41 = 0uLL;
    goto LABEL_29;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v55;
    long long v23 = v56;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_29;
  }
  char v35 = 4;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v33, (re::DynamicString *)&v43);
  char v35 = a4;
  __int16 v16 = re::globalAllocators(v15);
  unint64_t v18 = *(void *)(a5 + 8);
  if (v18)
  {
    if (v18 >> 61 || 8 * v18 >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 8, v18);
      _os_crash();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v16[2] + 32))(v16[2], (8 * v18 + 16) | 7, 0);
    __int16 v20 = (void *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v20 - 2) = v18;
    *(v20 - 1) = v19;
    bzero(v20, 8 * v18);
    size_t v21 = 8 * *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v55 = v20;
  memcpy(v20, *(const void **)a5, v21);
  uint64_t v24 = *(void *)(a5 + 8);
  uint64_t v47 = 8;
  *(void *)__int16 v48 = v24;
  int v46 = 0;
  char v45 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v55, (char *)&_ZN2re27ConvertToGeomModelValueTypeIDv2_fE10kValueTypeE, (uint64_t *)v48, &v47, &v46, &v45, (uint64_t *)&v55, (uint64_t)_ZN2re19GeomModelDescriptor20freeReNewedArrayDataIDv2_fEEvPKv, &v32);
  uint64_t v25 = v36;
  uint64_t v36 = v32;
  uint64_t v32 = v25;
  if (v25) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v55);
    uint64_t v26 = v37;
    uint64_t v37 = v55;
    *(void *)&long long v55 = v26;
    if (v26) {
  }
    }
  uint64_t v27 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v43);
  if (!v27)
  {
    *(void *)&long long v55 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v43, &v55);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v33);
    uint64_t v30 = v37;
    goto LABEL_22;
  }
  a6 = *v27;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v27)
  {
LABEL_38:
    uint64_t v47 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v48 = 136315906;
    *(void *)&_OWORD v48[4] = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    __int16 v52 = a6;
    __int16 v53 = 2048;
    unint64_t v54 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v28 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v33);
  *((unsigned char *)v28 + 32) = v35;
  uint64_t v29 = *((void *)v28 + 5);
  *((void *)v28 + 5) = v36;
  uint64_t v36 = v29;
  uint64_t v30 = *((void *)v28 + 6);
  *((void *)v28 + 6) = v37;
  uint64_t v37 = v30;
LABEL_22:
  *(unsigned char *)a1 = 1;
  if (v30)
  {

    uint64_t v37 = 0;
  }
  if (v36)
  {

    uint64_t v36 = 0;
  }
  if (v33 && (v34 & 1) != 0) {
    (*(void (**)(void))(*(void *)v33 + 40))();
  }
LABEL_29:
  if (!v38[0] && v40 && (v41 & 1) != 0) {
    (*(void (**)(void))(*(void *)v40 + 40))();
  }
  uint64_t result = v43;
  if (v43)
  {
    if (v44) {
      return (*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return result;
}

uint64_t *_ZN2re19GeomModelDescriptor20freeReNewedArrayDataIDv2_fEEvPKv(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t _ZN2re19GeomModelDescriptor12setAttributeIDv3_fjEENS_6ResultINS_4UnitENS_13DetailedErrorEEERKNS_13DynamicStringENS_17GeomAttributeRateERKNS_5SliceIT_EERKNSB_IT0_EE(uint64_t a1, void *a2, uint64_t a3, int a4, unint64_t a5, re *a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 17), a3);
  if (v12) {
    uint64_t v13 = (const re::DynamicString *)v12;
  }
  else {
    uint64_t v13 = (const re::DynamicString *)a3;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v43, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v43, a4, 9, (uint64_t)v38);
  if (!v38[0])
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v40;
    *(void *)(a1 + 48) = v42;
    *(_OWORD *)(a1 + 32) = v41;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    long long v41 = 0uLL;
    goto LABEL_29;
  }
  if (!*(void *)(a5 + 8))
  {
    long long v22 = v55;
    long long v23 = v56;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 100;
    *(void *)(a1 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
    *(_OWORD *)(a1 + 40) = v23;
    goto LABEL_29;
  }
  char v35 = 4;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v15 = re::DynamicString::operator=((re::DynamicString *)&v33, (re::DynamicString *)&v43);
  char v35 = a4;
  __int16 v16 = re::globalAllocators(v15);
  unint64_t v18 = *(void *)(a5 + 8);
  if (v18)
  {
    if (v18 >> 60 || 16 * v18 >= 0xFFFFFFFFFFFFFFF0)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element std::string::size_type size = %zu, count = %zu", "!overflow", "allocateArray", 61, 16, v18);
      _os_crash();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v16[2] + 32))(v16[2], (16 * v18 + 16) | 0xF, 0);
    __int16 v20 = (void *)((v19 + 31) & 0xFFFFFFFFFFFFFFF0);
    *(v20 - 2) = v18;
    *(v20 - 1) = v19;
    bzero(v20, 16 * v18);
    size_t v21 = 16 * *(void *)(a5 + 8);
  }
  else
  {
    size_t v21 = 0;
    __int16 v20 = 0;
  }
  *(void *)&long long v55 = v20;
  memcpy(v20, *(const void **)a5, v21);
  uint64_t v24 = *(void *)(a5 + 8);
  uint64_t v47 = 16;
  *(void *)__int16 v48 = v24;
  int v46 = 0;
  char v45 = 1;
  re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v55, _ZN2re27ConvertToGeomModelValueTypeIDv3_fE10kValueTypeE, (uint64_t *)v48, &v47, &v46, &v45, (uint64_t *)&v55, (uint64_t)_ZN2re19GeomModelDescriptor20freeReNewedArrayDataIDv3_fEEvPKv, &v32);
  uint64_t v25 = v36;
  uint64_t v36 = v32;
  uint64_t v32 = v25;
  if (v25) {

  }
  if (*((void *)a6 + 1))
  {
    *(unsigned char *)a1 = 1;
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>(a6, (uint64_t *)&v55);
    uint64_t v26 = v37;
    uint64_t v37 = v55;
    *(void *)&long long v55 = v26;
    if (v26) {
  }
    }
  uint64_t v27 = (re **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a2 + 6), (uint64_t)&v43);
  if (!v27)
  {
    *(void *)&long long v55 = a2[14];
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a2 + 6), (re::DynamicString *)&v43, &v55);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a2 + 12), (uint64_t)&v33);
    uint64_t v30 = v37;
    goto LABEL_22;
  }
  a6 = *v27;
  a5 = a2[14];
  if (a5 <= (unint64_t)*v27)
  {
LABEL_38:
    uint64_t v47 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v48 = 136315906;
    *(void *)&_OWORD v48[4] = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    __int16 v52 = a6;
    __int16 v53 = 2048;
    unint64_t v54 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v28 = re::DynamicString::operator=((re::DynamicString *)(a2[16] + 56 * (void)a6), (re::DynamicString *)&v33);
  *((unsigned char *)v28 + 32) = v35;
  uint64_t v29 = *((void *)v28 + 5);
  *((void *)v28 + 5) = v36;
  uint64_t v36 = v29;
  uint64_t v30 = *((void *)v28 + 6);
  *((void *)v28 + 6) = v37;
  uint64_t v37 = v30;
LABEL_22:
  *(unsigned char *)a1 = 1;
  if (v30)
  {

    uint64_t v37 = 0;
  }
  if (v36)
  {

    uint64_t v36 = 0;
  }
  if (v33 && (v34 & 1) != 0) {
    (*(void (**)(void))(*(void *)v33 + 40))();
  }
LABEL_29:
  if (!v38[0] && v40 && (v41 & 1) != 0) {
    (*(void (**)(void))(*(void *)v40 + 40))();
  }
  uint64_t result = v43;
  if (v43)
  {
    if (v44) {
      return (*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return result;
}

uint64_t *_ZN2re19GeomModelDescriptor20freeReNewedArrayDataIDv3_fEEvPKv(re *a1)
{
  uint64_t result = re::globalAllocators(a1);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
    return (uint64_t *)v3();
  }
  return result;
}

void *re::make::shared::object<re::ShareableInternal<re::GeomModelDescriptor>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 240, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E6DF5C8;
  *(_OWORD *)(v3 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(void *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 108) = 0x7FFFFFFF;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 180) = 0u;
  *(_DWORD *)(v3 + 196) = 0x7FFFFFFF;
  *(_OWORD *)(v3 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  uint64_t result = re::DynamicString::setCapacity((void *)(v3 + 208), 0);
  *(void *)a1 = v3;
  return result;
}

double RERenderGraphDefaultTargetDescription@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = -1;
  *(void *)(a1 + 12) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 20) = _D0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_23436C460;
  *(_OWORD *)(a1 + 48) = xmmword_23442CAF0;
  *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 2;
  return result;
}

void RERenderGraphDefaultBufferDescription(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1065353216;
  *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 32;
}

uint64_t RERenderGraphDefaultReadSettings()
{
  return 0;
}

double RERenderGraphDefaultWriteSettings@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x100000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_23435FBB0;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t RERenderGraphManagerCreateAndAddProvider(re *a1, const char *a2, void *aBlock, int a4)
{
  void v17[5] = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)a1 + 38);
  *((void *)a1 + 38) = v7 + 1;
  int v8 = (re *)_Block_copy(aBlock);
  uint64_t v9 = re::globalAllocators(v8);
  uint64_t v10 = v9[2];
  v17[0] = &unk_26E736CE8;
  v17[1] = v7;
  void v17[3] = v10;
  _OWORD v17[4] = v17;
  uint64_t v11 = re::globalAllocators((re *)v9)[2];
  v16[0] = &unk_26E736D40;
  v16[1] = v8;
  uint64_t v16[3] = v11;
  void v16[4] = v16;
  re::RenderGraphManager::addProvider(a1, a2, (uint64_t)v17, (uint64_t)v16, a4, (uint64_t)v15);
  re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v16);
  re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v17);
  re::make::shared::object<re::Shareable<re::ProviderHandle>,re::ProviderHandle&>((re *)&v14, (uint64_t)v15);
  uint64_t v12 = v14;
  re::StringID::destroyString((re::StringID *)v15);
  return v12;
}

uint64_t RERenderGraphManagerCreateAndAddCachingProvider(re *a1, const char *a2, const void *a3, void *a4, int a5)
{
  v21[5] = *MEMORY[0x263EF8340];
  id v9 = a4;
  uint64_t v10 = _Block_copy(a3);
  uint64_t v11 = _Block_copy(v9);

  uint64_t v13 = re::globalAllocators(v12);
  uint64_t v14 = v13[2];
  v21[0] = &unk_26E736D98;
  v21[1] = v10;
  uint64_t v21[3] = v14;
  _OWORD v21[4] = v21;
  uint64_t v15 = re::globalAllocators((re *)v13)[2];
  v20[0] = &unk_26E736DF0;
  v20[1] = v11;
  void v20[3] = v15;
  _OWORD v20[4] = v20;
  re::RenderGraphManager::addProvider(a1, a2, (uint64_t)v21, (uint64_t)v20, a5, (uint64_t)v19);
  re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v20);
  re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v21);
  re::make::shared::object<re::Shareable<re::ProviderHandle>,re::ProviderHandle&>((re *)&v18, (uint64_t)v19);
  uint64_t v16 = v18;
  re::StringID::destroyString((re::StringID *)v19);
  return v16;
}

uint64_t RERenderGraphManagerAddProviderFromAsset(re::RenderGraphManager *a1, const char *a2, uint64_t a3, int a4)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v13);
  uint64_t v7 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)v13);
  if (v7)
  {
    re::RenderGraphManager::addProviderInternal(a1, a2, (const re::RenderGraphProviderBase *)(v7 + 8), a4, 0, (uint64_t)v11);
  }
  else
  {
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v12 = 0;
    re::StringID::invalid((re::StringID *)v11);
    uint64_t v12 = 0;
  }
  re::make::shared::object<re::Shareable<re::ProviderHandle>,re::ProviderHandle&>((re *)&v10, (uint64_t)v11);
  uint64_t v8 = v10;
  re::StringID::destroyString((re::StringID *)v11);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v8;
}

void RERenderGraphManagerRemoveProvider(uint64_t a1, uint64_t a2)
{
  re::StringID::StringID((re::StringID *)&v5, (const StringID *)(a2 + 24));
  uint64_t v6 = *(void *)(a2 + 40);
  re::StringID::StringID((re::StringID *)v4, &v5);
  void v4[2] = v6;
  re::RenderGraphManager::removeProvider(a1, (uint64_t)v4);
  re::StringID::destroyString((re::StringID *)v4);
  re::StringID::destroyString((re::StringID *)&v5);
}

uint64_t RERenderGraphAssetSetRuntimeNodeSetting(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  if ((result & 1) == 0)
  {
    if ((result & 1) == 0)
    {
      if ((result & 1) == 0)
      {
        if ((result & 1) == 0)
        {
          if ((result & 1) == 0)
          {
            if ((result & 1) == 0)
            {
              if ((result & 1) == 0)
              {
                if ((result & 1) == 0)
                {
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<BOOL>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow(v15, 0);
  if (v15
    && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v15 + 704)), v8 == 2)
    && (++*(_DWORD *)(v15 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v14)) != 0))
  {
    uint64_t v10 = v9;
    v16[0] = 0;
    v16[1] = "";
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v13);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v16, (const re::IntrospectionBase *)re::introspect<BOOL>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<double>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow(v15, 0);
  if (v15
    && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v15 + 704)), v8 == 2)
    && (++*(_DWORD *)(v15 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v14)) != 0))
  {
    uint64_t v10 = v9;
    v16[0] = 0;
    v16[1] = "";
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v13);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v16, (const re::IntrospectionBase *)re::introspect<double>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<float>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow(v15, 0);
  if (v15
    && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v15 + 704)), v8 == 2)
    && (++*(_DWORD *)(v15 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v14)) != 0))
  {
    uint64_t v10 = v9;
    v16[0] = 0;
    v16[1] = "";
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v13);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v16, (const re::IntrospectionBase *)re::introspect<float>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<int>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow(v15, 0);
  if (v15
    && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v15 + 704)), v8 == 2)
    && (++*(_DWORD *)(v15 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v14)) != 0))
  {
    uint64_t v10 = v9;
    v16[0] = 0;
    v16[1] = "";
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v13);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v16, (const re::IntrospectionBase *)re::introspect<int>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<unsigned int>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow(v15, 0);
  if (v15
    && (unsigned int v7 = atomic_load((unsigned int *)(v15 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v15 + 704)), v8 == 2)
    && (++*(_DWORD *)(v15 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v14)) != 0))
  {
    uint64_t v10 = v9;
    v16[0] = 0;
    v16[1] = "";
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v13);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v16, (const re::IntrospectionBase *)re::introspect<unsigned int>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<re::Vector2<float>>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  re::AssetHandle::loadNow(v14, 0);
  if (v14
    && (unsigned int v7 = atomic_load((unsigned int *)(v14 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v14 + 704)), v8 == 2)
    && (++*(_DWORD *)(v14 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v13)) != 0))
  {
    uint64_t v10 = v9;
    v15[0] = 0;
    v15[1] = "";
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v15, (const re::IntrospectionBase *)re::introspect<re::Vector2<float>>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<re::Vector3<float>>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  re::AssetHandle::loadNow(v14, 0);
  if (v14
    && (unsigned int v7 = atomic_load((unsigned int *)(v14 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v14 + 704)), v8 == 2)
    && (++*(_DWORD *)(v14 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v13)) != 0))
  {
    uint64_t v10 = v9;
    v15[0] = 0;
    v15[1] = "";
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v15, (const re::IntrospectionBase *)re::introspect<re::Vector3<float>>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<re::Vector4<float>>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  re::AssetHandle::loadNow(v14, 0);
  if (v14
    && (unsigned int v7 = atomic_load((unsigned int *)(v14 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v14 + 704)), v8 == 2)
    && (++*(_DWORD *)(v14 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v13)) != 0))
  {
    uint64_t v10 = v9;
    v15[0] = 0;
    v15[1] = "";
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v15, (const re::IntrospectionBase *)re::introspect<re::Vector4<float>>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return v11;
}

uint64_t anonymous namespace'::SetRuntimeNodeSettingHelper<re::Quaternion<float>>(uint64_t a1, const char *a2, const char *a3, char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  re::AssetHandle::loadNow(v14, 0);
  if (v14
    && (unsigned int v7 = atomic_load((unsigned int *)(v14 + 704)), v7 == 2)
    && (unsigned int v8 = atomic_load((unsigned int *)(v14 + 704)), v8 == 2)
    && (++*(_DWORD *)(v14 + 260),
        (id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v13)) != 0))
  {
    uint64_t v10 = v9;
    v15[0] = 0;
    v15[1] = "";
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    uint64_t v11 = re::RenderGraphFile::setRuntimeNodeSetting((_anonymous_namespace_ *)((char *)v10 + 8), (const re::StringID *)v15, (const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>(void)::info, a3, a4);
    re::StringID::destroyString((re::StringID *)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return v11;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingBool(uint64_t a1, const char *a2, const char *a3, char a4)
{
  char v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingDouble(uint64_t a1, const char *a2, const char *a3, double a4)
{
  double v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingFloat(uint64_t a1, const char *a2, const char *a3, float a4)
{
  float v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingInt32(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingUInt32(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingVector2F(uint64_t a1, const char *a2, const char *a3, double a4)
{
  double v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingVector3F(uint64_t a1, const char *a2, const char *a3, __n128 a4)
{
  __n128 v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingVector4F(uint64_t a1, const char *a2, const char *a3, __n128 a4)
{
  __n128 v5 = a4;
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingQuaternionF(uint64_t a1, const char *a2, const char *a3, __n128 a4)
{
  __n128 v5 = a4;
}

void RERenderGraphAssetSetRuntimeNodeStringSetting(uint64_t a1, const char *a2, char *a3, const char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  re::AssetHandle::loadNow(v14, 0);
  if (v14)
  {
    unsigned int v8 = atomic_load((unsigned int *)(v14 + 704));
    if (v8 == 2)
    {
      ++*(_DWORD *)(v14 + 260);
      id v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v13);
      if (v9)
      {
        uint64_t v10 = (_anonymous_namespace_ *)((char *)v9 + 8);
        v15[0] = 0;
        v15[1] = "";
        re::RenderGraphFile::setRuntimeNodeSetting<re::DynamicString>(v10, (const re::StringID *)v15, a3, (char *)&v11);
        re::StringID::destroyString((re::StringID *)v15);
      }
    }
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
}

void RERenderGraphAssetSetRuntimeNodeAssetHandleSetting(uint64_t a1, const char *a2, const char *a3, uint64_t a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  re::AssetAPIHelper::assetHandleCreate(a4, v11);
  re::AssetHandle::loadNow(v13, 0);
  re::AssetHandle::loadNow(v11[1], 0);
  if (v13)
  {
    unsigned int v7 = atomic_load((unsigned int *)(v13 + 704));
    if (v7 == 2)
    {
      ++*(_DWORD *)(v13 + 260);
      unsigned int v8 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v12);
      if (v8)
      {
        id v9 = (_anonymous_namespace_ *)((char *)v8 + 8);
        v14[0] = 0;
        v14[1] = "";
        {
          re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v10);
        }
        re::RenderGraphFile::setRuntimeNodeSetting(v9, (const re::StringID *)v14, (const re::IntrospectionBase *)re::introspect<re::AssetHandle>(void)::info, a3, (char *)v11);
        re::StringID::destroyString((re::StringID *)v14);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
}

uint64_t RERenderFrameMakeTargetHandle(re::RenderFrame *a1, char *__s, uint64_t a3)
{
  v9[0] = 3;
  uint64_t v12 = -1;
  int v13 = -1;
  char v14 = 0;
  uint64_t v16 = 0;
  int v18 = 1;
  uint64_t v20 = -1;
  int v21 = -1;
  long long v22 = xmmword_234378E20;
  char v23 = 0;
  if (*(_DWORD *)a3 == 1)
  {
    v9[0] = 1;
  }
  else if (!*(_DWORD *)a3)
  {
    v9[0] = 0;
  }
  int v3 = *(_DWORD *)(a3 + 16);
  int v11 = *(_DWORD *)(a3 + 12);
  HIDWORD(v12) = v3;
  uint64_t v4 = *(void *)(a3 + 64);
  uint64_t v5 = *(void *)(a3 + 40);
  v9[1] = *(void *)(a3 + 32);
  void v9[2] = v4;
  uint64_t v10 = *(void *)(a3 + 4);
  uint64_t v15 = *(void *)(a3 + 20);
  int v17 = v5;
  int32x2_t v19 = vmovn_s64(*(int64x2_t *)(a3 + 48));
  re::RenderFrame::createTarget(a1, (const re::RenderGraphTargetDescription *)v9, __s, &v7);
  return v8;
}

uint64_t RERenderFrameMakeBufferHandle(re::RenderFrame *a1, char *__s, uint64_t a3)
{
  int v7 = 0;
  char v9 = 0;
  int v12 = -1;
  long long v13 = xmmword_234378E20;
  int v3 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 2)
  {
    int v3 = 3;
  }
  else if (v3 != 1)
  {
    goto LABEL_6;
  }
  int v7 = v3;
LABEL_6:
  uint64_t v8 = *(void *)(a3 + 8);
  int v10 = *(_DWORD *)(a3 + 16);
  int v11 = *(void *)(a3 + 24);
  re::RenderFrame::createBuffer(a1, (const re::RenderGraphBufferDescription *)&v7, __s, &v5);
  return v6;
}

uint64_t RERenderFrameMakeExternalTargetHandle(re::RenderFrame *a1, char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = v5;
  if (a2)
  {
    unint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        char v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v41 = v7;
  int v11 = (char *)*((void *)a1 + 44);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      char v13 = v11[1];
      if (v13)
      {
        char v14 = (unsigned __int8 *)(v11 + 2);
        do
        {
          uint64_t v12 = 31 * v12 + v13;
          int v15 = *v14++;
          char v13 = v15;
        }
        while (v15);
      }
      v12 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v40 = v12;
  int v28 = 2;
  uint64_t v29 = -1;
  uint64_t v30 = -1;
  uint64_t v31 = -1;
  char v32 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v33 = _D0;
  long long v34 = xmmword_2343AEB90;
  long long v35 = xmmword_2343AEBA0;
  int v36 = -1;
  char v39 = 0;
  uint64_t v27 = 2;
  uint64_t v37 = -1;
  uint64_t v38 = ((v7 << 6) + (v7 >> 2) + v12 - 0x61C8864680B583E9) ^ v7;
  id v26 = v5;
  id v21 = v5;
  re::RenderFrame::registerExternalTexture((uint64_t)a1, &v26, &v41, &v40, 0);
  if (v6) {

  }
  re::RenderFrame::createTarget(a1, (const re::RenderGraphTargetDescription *)&v27, a2, &v24);
  uint64_t v22 = v25;

  return v22;
}

uint64_t RERenderFrameMakeExternalBufferHandle(re::RenderFrame *a1, char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = v5;
  if (a2)
  {
    unint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        char v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v33 = v7;
  int v11 = (char *)*((void *)a1 + 44);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      char v13 = v11[1];
      if (v13)
      {
        char v14 = (unsigned __int8 *)(v11 + 2);
        do
        {
          uint64_t v12 = 31 * v12 + v13;
          int v15 = *v14++;
          char v13 = v15;
        }
        while (v15);
      }
      v12 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v12;
  uint64_t v26 = -1;
  char v27 = 0;
  int v28 = 1065353216;
  unint64_t v29 = 0xFFFFFFFF00000020;
  int v25 = 2;
  uint64_t v30 = -1;
  uint64_t v31 = ((v7 << 6) + (v7 >> 2) + v12 - 0x61C8864680B583E9) ^ v7;
  id v16 = v5;
  id v17 = v6;
  id v22 = v17;
  int v23 = 0;
  unsigned int v24 = objc_msgSend(v6, sel_length);
  re::RenderFrame::registerExternalBuffer((uint64_t)a1, (uint64_t)&v22, &v33, &v32, 0);
  if (v17) {

  }
  if (v6) {
  re::RenderFrame::createBuffer(a1, (const re::RenderGraphBufferDescription *)&v25, a2, &v20);
  }
  uint64_t v18 = v21;

  return v18;
}

void RERenderFrameRegisterExternalTexture(uint64_t a1, char *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        char v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v6;
  int v10 = *(char **)(a1 + 352);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      char v12 = v10[1];
      if (v12)
      {
        char v13 = (unsigned __int8 *)(v10 + 2);
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *v13++;
          char v12 = v14;
        }
        while (v14);
      }
      v11 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  id v18 = v5;
  uint64_t v19 = v11;
  id v17 = v5;
  id v15 = v5;
  re::RenderFrame::registerExternalTexture(a1, &v18, &v20, &v19, (uint64_t)a2);
  id v16 = v17;
  if (v17)
  {

    id v16 = v17;
  }
}

void RERenderFrameRegisterExternalBuffer(uint64_t a1, char *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        char v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v23 = v6;
  int v10 = *(char **)(a1 + 352);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      char v12 = v10[1];
      if (v12)
      {
        char v13 = (unsigned __int8 *)(v10 + 2);
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *v13++;
          char v12 = v14;
        }
        while (v14);
      }
      v11 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v22 = v11;
  id v18 = v5;
  id v15 = v5;
  id v16 = v18;
  id v19 = v16;
  int v20 = 0;
  unsigned int v21 = objc_msgSend(v18, sel_length);
  re::RenderFrame::registerExternalBuffer(a1, (uint64_t)&v19, &v23, &v22, (uint64_t)a2);
  if (v16) {

  }
  id v17 = v18;
  if (v18)
  {

    id v17 = v18;
  }
}

uint64_t RERenderFrameMakeRegisteredExternalTargetHandle(re::RenderFrame *a1, char *__s, char *a3)
{
  if (a3)
  {
    unint64_t v3 = *a3;
    if (*a3)
    {
      char v4 = a3[1];
      if (v4)
      {
        id v5 = (unsigned __int8 *)(a3 + 2);
        do
        {
          unint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    unint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  char v7 = (char *)*((void *)a1 + 44);
  if (v7)
  {
    uint64_t v8 = 0x9E3779B97F4A7C17;
    uint64_t v9 = *v7;
    if (*v7)
    {
      char v10 = v7[1];
      if (v10)
      {
        uint64_t v11 = (unsigned __int8 *)(v7 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      uint64_t v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 0x61C8864680B583E9;
    }
  }
  else
  {
    uint64_t v8 = 0x1E3779B97F4A7C16;
  }
  int v22 = 2;
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  uint64_t v25 = -1;
  char v26 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v27 = _D0;
  long long v28 = xmmword_2343AEB90;
  long long v29 = xmmword_2343AEBA0;
  int v30 = -1;
  char v33 = 0;
  uint64_t v21 = 2;
  uint64_t v31 = -1;
  unint64_t v32 = ((v3 >> 2) + (v3 << 6) + v8) ^ v3;
  re::RenderFrame::createTarget(a1, (const re::RenderGraphTargetDescription *)&v21, __s, &v19);
  return v20;
}

uint64_t RERenderFrameMakeRegisteredExternalBufferHandle(re::RenderFrame *a1, char *__s, char *a3)
{
  if (a3)
  {
    unint64_t v3 = *a3;
    if (*a3)
    {
      char v4 = a3[1];
      if (v4)
      {
        id v5 = (unsigned __int8 *)(a3 + 2);
        do
        {
          unint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    unint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  char v7 = (char *)*((void *)a1 + 44);
  if (v7)
  {
    uint64_t v8 = 0x9E3779B97F4A7C17;
    uint64_t v9 = *v7;
    if (*v7)
    {
      char v10 = v7[1];
      if (v10)
      {
        uint64_t v11 = (unsigned __int8 *)(v7 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      uint64_t v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 0x61C8864680B583E9;
    }
  }
  else
  {
    uint64_t v8 = 0x1E3779B97F4A7C16;
  }
  uint64_t v17 = -1;
  char v18 = 0;
  int v19 = 1065353216;
  unint64_t v20 = 0xFFFFFFFF00000020;
  int v16 = 2;
  uint64_t v21 = -1;
  unint64_t v22 = ((v3 >> 2) + (v3 << 6) + v8) ^ v3;
  re::RenderFrame::createBuffer(a1, (const re::RenderGraphBufferDescription *)&v16, __s, &v14);
  return v15;
}

uint64_t RERenderFrameMakeRenderGraph(re::RenderFrame *a1, const char *a2)
{
  return re::RenderFrame::makeRenderGraph(a1, a2, 0);
}

_anonymous_namespace_ *RERenderFrameAddDataStruct(uint64_t a1, char *__s, const char *a3, const re::RuntimeRenderGraphDataStruct *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0x9E3779B97F4A7C17;
  size_t v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, &v13);
    unint64_t v10 = (v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  else
  {
    unint64_t v10 = 0;
  }
  size_t v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, &v13);
    unint64_t v8 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  return re::RenderGraphDataStore::add((re::RenderGraphDataStore *)(a1 + 32), ((v10 >> 2) + (v10 << 6) + v8) ^ v10, a4);
}

_anonymous_namespace_ *RERenderFrameCreateWrappedData(uint64_t a1, char *__s, const char *a3, const char *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0x9E3779B97F4A7C17;
  size_t v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, &v13);
    unint64_t v10 = (v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  else
  {
    unint64_t v10 = 0;
  }
  size_t v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, &v13);
    unint64_t v8 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  return re::RenderGraphDataStore::createWrappedData((re::RenderGraphDataStore *)(a1 + 32), ((v10 >> 2) + (v10 << 6) + v8) ^ v10, a4);
}

_anonymous_namespace_ *RERenderFrameCreateWrappedDataOptional(uint64_t a1, char *__s, const char *a3, const char *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0x9E3779B97F4A7C17;
  size_t v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, &v13);
    unint64_t v10 = (v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  else
  {
    unint64_t v10 = 0;
  }
  size_t v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, &v13);
    unint64_t v8 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  return re::RenderGraphDataStore::createWrappedData((re::RenderGraphDataStore *)(a1 + 32), ((v10 >> 2) + (v10 << 6) + v8) ^ v10, a4);
}

uint64_t RERenderFrameGetScopedInputTarget(re::RenderFrame *a1, const char *a2, const char *a3)
{
  re::RenderFrame::tryGetInputTarget(a1, a2, a3, &v4);
  return v5;
}

void RERenderFrameGetTargetDescription(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5 = (re *)(a1 + 3448);
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a2, &v41);
  v40[0] = *(void *)&v42.var0 >> 1;
  v40[1] = v43;
  int v6 = (_OWORD *)re::RenderGraphResourceDescriptions::targetDescription(v5, v40);
  long long v8 = v6[1];
  _Q0 = v6[2];
  *(_OWORD *)long long v34 = *v6;
  *(_OWORD *)&v34[16] = v8;
  long long v35 = _Q0;
  long long v9 = v6[6];
  long long v11 = v6[3];
  long long v10 = v6[4];
  long long v38 = v6[5];
  long long v39 = v9;
  long long v36 = v11;
  long long v37 = v10;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a3 + 20) = _Q0;
  *(void *)(a3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 2;
  if (*(_DWORD *)v34 == 2)
  {
    re::StringID::StringID((re::StringID *)v33, &v42);
    int v16 = (id *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 3312, (uint64_t *)&v39);
    if (v16) {
      int v16 = (id *)*v16;
    }
    uint64_t v17 = v16;
    char v18 = v17;
    if (v17)
    {

      re::StringID::destroyString((re::StringID *)v33);
      int v19 = [v18 width];
      int v20 = [v18 height];
      int v21 = [v18 sampleCount];
      int v22 = [v18 mipmapLevelCount];
      uint64_t v23 = [v18 pixelFormat];
      uint64_t v24 = [v18 usage];
      uint64_t v25 = [v18 resourceOptions];
      uint64_t v26 = [v18 textureType];
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v19;
      *(_DWORD *)(a3 + 8) = v20;
      *(_DWORD *)(a3 + 12) = v21;
      *(_DWORD *)(a3 + 20) = 0;
      *(_DWORD *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_DWORD *)(a3 + 16) = v22;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 40) = 1;
      *(void *)(a3 + 48) = v24;
      *(void *)(a3 + 56) = v25;
      *(void *)(a3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v26;
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v33);
    }
  }
  else
  {
    int v27 = *(_DWORD *)&v34[20];
    int v28 = *(_DWORD *)&v34[28];
    uint64_t v29 = *(int *)&v34[4];
    uint64_t v30 = SDWORD2(v36);
    uint64_t v31 = v37;
    uint64_t v32 = SDWORD1(v37);
    *(void *)(a3 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)&v34[12];
    *(_DWORD *)(a3 + 12) = v27;
    *(_DWORD *)(a3 + 16) = v28;
    *(void *)(a3 + 20) = *((void *)&v35 + 1);
    *(void *)(a3 + 32) = v29;
    *(void *)(a3 + 40) = v30;
    *(void *)(a3 + 48) = v31;
    *(void *)(a3 + 56) = v32;
    *(void *)(a3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v29;
  }
  re::StringID::destroyString((re::StringID *)&v42);
}

void RERenderFrameGetBufferDescription(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5 = (re *)(a1 + 3448);
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a2, &v21);
  v20[0] = *(void *)&v22.var0 >> 1;
  v20[1] = v23;
  int v6 = (long long *)re::RenderGraphResourceDescriptions::bufferDescription(v5, v20);
  long long v8 = v6[1];
  long long v7 = v6[2];
  long long v17 = *v6;
  long long v18 = v8;
  long long v19 = v7;
  *(_OWORD *)a3 = xmmword_23442CB00;
  *(_OWORD *)(a3 + 16) = unk_23442CB10;
  if (v17 == 2)
  {
    re::StringID::StringID((re::StringID *)&v15, &v22);
    re::RenderFrame::getExternalBuffer(a1, (uint64_t)&v17, (id **)&v16);
    id v9 = v16;
    if (v16)
    {

      re::StringID::destroyString((re::StringID *)&v15);
      uint64_t v10 = objc_msgSend(v9, sel_length);
      id v11 = objc_msgSend(v9, sel_resourceOptions);
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 16) = 0;
      *(void *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v11;
    }
    else
    {
      re::StringID::destroyString((re::StringID *)&v15);
    }
  }
  else
  {
    uint64_t v12 = *((void *)&v17 + 1);
    int v13 = DWORD1(v18);
    uint64_t v14 = SDWORD2(v18);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v14;
  }
  re::StringID::destroyString((re::StringID *)&v22);
}

uint64_t RERenderFrameGetInputTarget(re::RenderFrame *a1, const char *a2)
{
  re::RenderFrame::tryGetInputTarget(a1, a2, 0, &v3);
  return v4;
}

uint64_t RERenderFrameGetScopedInputBuffer(re::RenderFrame *a1, const char *a2, const char *a3)
{
  re::RenderFrame::tryGetInputBuffer(a1, a2, a3, &v4);
  return v5;
}

uint64_t RERenderFrameGetInputBuffer(re::RenderFrame *a1, const char *a2)
{
  re::RenderFrame::tryGetInputBuffer(a1, a2, 0, &v3);
  return v4;
}

void RERenderFrameSetScopedOutputTarget(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a3, &v11);
  *(void *)&v13[0] = v12[0] >> 1;
  v13[1] = *(double *)&v12[2];
  re::StringID::destroyString((re::StringID *)v12);
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        id v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v7;
  re::RenderFrame::addTargetOutput((re::RenderFrame *)a1, &v11, v13, a4);
}

BOOL RERenderFrameTargetIsValid(uint64_t a1, unsigned int a2)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a2, &v6);
  int v2 = v7[4];
  int v3 = v7[5];
  re::StringID::destroyString((re::StringID *)v7);
  return v2 != -1 && v3 != -1;
}

void RERenderFrameSetOutputTarget(uint64_t a1, char *a2, unsigned int a3)
{
}

void RERenderFrameSetScopedInheritanceTarget(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a3, &v11);
  *(void *)&v13[0] = v12[0] >> 1;
  v13[1] = *(double *)&v12[2];
  re::StringID::destroyString((re::StringID *)v12);
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        id v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v7;
  re::RenderFrame::inheritLaneProperties((re::RenderFrame *)a1, &v11, v13, a4);
}

void RERenderFrameSetInheritanceTarget(uint64_t a1, char *a2, unsigned int a3)
{
}

void RERenderFrameSetScopedOutputBuffer(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(a1 + 3448), a3, &v11);
  *(void *)&v13[0] = v12[0] >> 1;
  v13[1] = *(double *)&v12[2];
  re::StringID::destroyString((re::StringID *)v12);
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        id v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v7;
  re::RenderFrame::addBufferOutput((re::RenderFrame *)a1, &v11, v13, a4);
}

void RERenderFrameSetOutputBuffer(uint64_t a1, char *a2, unsigned int a3)
{
}

void RERenderManagerEmitGraph(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    uint64_t v6 = (re::RenderFrame *)re::RenderFrameBox::get(v5 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    uint64_t v6 = 0;
  }
  re::RenderFrame::emitGraph(v6, a2, a3);
}

void *RERenderGraphAddNodeInlineEx(re *a1, const char *a2, const void *a3, void *a4)
{
  void v17[5] = *MEMORY[0x263EF8340];
  id v7 = a4;
  char v8 = _Block_copy(a3);
  id v9 = _Block_copy(v7);

  uint64_t v11 = re::globalAllocators(v10);
  uint64_t v12 = v11[2];
  v17[0] = &unk_26E736E48;
  v17[1] = v8;
  void v17[3] = v12;
  _OWORD v17[4] = v17;
  uint64_t v13 = re::globalAllocators((re *)v11)[2];
  v16[0] = &unk_26E736EA0;
  v16[1] = v9;
  uint64_t v16[3] = v13;
  void v16[4] = v16;
  uint64_t v14 = re::RenderGraph::addNode(a1, a2, (uint64_t)v17, (uint64_t)v16);
  re::FunctionBase<24ul,void ()(re::RenderGraphContext &)>::destroyCallable((uint64_t)v16);
  re::FunctionBase<24ul,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::destroyCallable((uint64_t)v17);
  return v14;
}

re::RenderGraphNode *RERenderGraphAddNodeOfType(re *a1, const char *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphCameraSetupNode>(a1, a2);
      break;
    case 1:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphComputeNode>(a1, a2);
      break;
    case 2:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphDebugNode>(a1, a2);
      break;
    case 3:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphDebugMaterialsNode>(a1, a2);
      break;
    case 4:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphGenerateMipmapsNode>(a1, a2);
      break;
    case 5:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphMaterialReplaceNode>(a1, a2);
      break;
    case 6:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphMeshNode>(a1, a2);
      break;
    case 7:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphSynchronizeTargetNode>(a1, a2);
      break;
    case 8:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(a1, a2);
      break;
    case 9:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphCopyEntityAttributeBufferNode>(a1, a2);
      break;
    case 10:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphTextNode>(a1, a2);
      break;
    case 11:
      uint64_t result = re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(a1, a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void RERenderGraphBuilderReadTarget(re::RenderGraphBuilder *a1, unsigned int a2, uint64_t a3)
{
  re::RenderGraphBuilder::resourceFromIndex(a1, a2, (uint64_t)&v5);
  v7[0] = v6[0] >> 1;
  v7[1] = v6[2];
  re::StringID::destroyString((re::StringID *)v6);
  uint64_t v5 = a3 & 0x1FFFFFFFFLL;
  v6[0] = 2;
  re::RenderGraphBuilder::read((uint64_t)a1, (uint64_t)v7, (uint64_t)&v5);
}

uint64_t RERenderGraphBuilderWriteTarget(re::RenderGraphBuilder *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::RenderGraphBuilder::resourceFromIndex(a1, a2, (uint64_t)&v9);
  v8[0] = v10 >> 1;
  v8[1] = *((void *)&v11 + 1);
  re::StringID::destroyString((re::StringID *)&v10);
  long long v5 = *((_OWORD *)a3 + 1);
  __int16 v6 = *((_WORD *)a3 + 16);
  int v13 = 0;
  int v14 = 0;
  uint64_t v9 = *a3;
  long long v11 = v5;
  __int16 v12 = v6;
  return re::RenderGraphBuilder::write((uint64_t)a1, (uint64_t)v8, (uint64_t)&v9);
}

double RERenderGraphBuilderReadBuffer(re::RenderGraphBuilder *a1, unsigned int a2, uint64_t a3)
{
  re::RenderGraphBuilder::resourceFromIndex(a1, a2, (uint64_t)&v6);
  v8[0] = v7[0] >> 1;
  v8[1] = v7[2];
  re::StringID::destroyString((re::StringID *)v7);
  uint64_t v6 = a3 & 0x1FFFFFFFFLL;
  v7[0] = 2;
  return re::RenderGraphBuilder::read((uint64_t)a1, (uint64_t)v8, (uint64_t)&v6);
}

__n128 RERenderGraphBuilderWriteBuffer(re::RenderGraphBuilder *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::RenderGraphBuilder::resourceFromIndex(a1, a2, (uint64_t)&v9);
  v8[0] = v10 >> 1;
  v8[1] = *((void *)&v11 + 1);
  re::StringID::destroyString((re::StringID *)&v10);
  long long v5 = *((_OWORD *)a3 + 1);
  __int16 v6 = *((_WORD *)a3 + 16);
  int v13 = 0;
  int v14 = 0;
  uint64_t v9 = *a3;
  long long v11 = v5;
  __int16 v12 = v6;
  re::RenderGraphBuilder::write(a1, (uint64_t)v8, (uint64_t)&v9);
  return result;
}

id RERenderGraphContextAcquireRenderCommandEncoder(uint64_t a1)
{
  uint64_t v2 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(void *)(a1 + 8) + 104));
  re::RenderGraphContext::acquireManagedRenderEncoder(v5, a1, v2, 0);
  id v3 = v5[0];
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v5);
  return v3;
}

id RERenderGraphContextAcquireBlitCommandEncoder(uint64_t a1)
{
  uint64_t v2 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(void *)(a1 + 8) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder(a1, v2, *(re::RenderGraphNodeBase **)(a1 + 40), 0, &v5);
  id v3 = v5;

  return v3;
}

id RERenderGraphContextAcquireComputeCommandEncoder(uint64_t a1)
{
  uint64_t v2 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(void *)(a1 + 8) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder(a1, v2, *(re::RenderGraphNodeBase **)(a1 + 40), 0, &v5);
  id v3 = v5;

  return v3;
}

void RERenderGraphContextDynamicTableAddTexture(void *a1, char *a2, void *a3)
{
  id v5 = a3;
  __int16 v6 = v5;
  id v7 = (void *)(*a1 + 368);
  if (a2)
  {
    uint64_t v8 = *a2;
    if (*a2)
    {
      char v9 = a2[1];
      if (v9)
      {
        unint64_t v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  id v13 = v5;
  uint64_t v14 = v8;
  id v12 = v5;
  re::DynamicTextureTableAdd(v7, &v14, &v13);
  if (v13) {
}
  }

BOOL RERenderGraphContextDynamicTableRemoveTexture(uint64_t *a1, char *a2, const re::WeakStringID *a3)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        __int16 v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::DynamicTextureTableRemove((re *)(v3 + 368), (re::TextureTable *)&v9, a3);
}

id RERenderGraphContextMetalTexture(re::RenderGraphContext *a1, unsigned int a2)
{
  re::RenderGraphContext::resourceFromIndex(a1, a2, (uint64_t)v6);
  v8[0] = v7[0] >> 1;
  v8[1] = v7[2];
  re::RenderGraphContext::metalTexture((uint64_t)a1, (uint64_t)v8, 0, 0, &v9);
  id v3 = v9;
  uint64_t v4 = v3;
  if (v3)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)v7);
  return v4;
}

id RERenderGraphContextMetalBuffer(re::RenderGraphContext *a1, unsigned int a2)
{
  re::RenderGraphContext::resourceFromIndex(a1, a2, (uint64_t)&v5);
  v7[0] = v6[0] >> 1;
  v7[1] = v6[2];
  id v3 = *(id *)re::RenderGraphContext::metalBuffer((uint64_t)a1, (uint64_t)v7);
  re::StringID::destroyString((re::StringID *)v6);
  return v3;
}

unsigned char *RERenderGraphContextGetRasterizationRateMap(re::RenderGraphContext *a1)
{
  uint64_t v2 = (unsigned char *)re::RenderGraphDataStore::tryGet<re::VRRData>(*((void *)a1 + 146), *(void *)(*((void *)a1 + 5) + 48));
  if (v2)
  {
    if (v2[12]) {
      uint64_t v2 = *(id *)re::RenderGraphContext::getRateMap(a1, *((unsigned int *)v2 + 2));
    }
    else {
      uint64_t v2 = 0;
    }
  }
  return v2;
}

re::RuntimeRenderGraphDataStruct *RERenderGraphCreateRenderGraphDataStruct(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  id v3 = (re::RuntimeRenderGraphDataStruct *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 136, 8);
  return re::RuntimeRenderGraphDataStruct::RuntimeRenderGraphDataStruct(v3, (const char *)a1);
}

void RERenderGraphDataStructAddInt32(void *a1, char *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v29 = a3;
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v27);
  }
  uint64_t v5 = (int *)re::introspect<int>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<int>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<int>(a1, a2, v29);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<int>(a1, a2, v29);
    if ((v10 & 1) == 0)
    {
      int v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      int v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      id v13 = (re *)strlen(a2);
      uint64_t v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      id v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, a2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_OWORD *)long long buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        uint64_t v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        uint64_t v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v30, 0, sizeof(v30));
        *(void *)long long buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v32 = v30;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

void RERenderGraphDataStructAddFloat2(void *a1, char *__s2, double a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v28 = *(void *)&a3;
  {
    re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
  }
  uint64_t v5 = (int *)re::introspect<re::Vector2<float>>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<re::Vector2<float>>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector2<float>>(a1, __s2, v28);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __s2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector2<float>>(a1, __s2, v28);
    if ((v10 & 1) == 0)
    {
      int v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      int v27 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      id v13 = (re *)strlen(__s2);
      uint64_t v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      id v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, __s2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_OWORD *)long long buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        uint64_t v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        uint64_t v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v29, 0, sizeof(v29));
        *(void *)long long buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v31 = v29;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v27);
      }
      else
      {
LABEL_19:
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

void RERenderGraphDataStructAddFloat3(void *a1, char *__s2, __n128 a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  __n128 v28 = a3;
  {
    re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
  }
  uint64_t v5 = (int *)re::introspect<re::Vector3<float>>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<re::Vector3<float>>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector3<float>>(a1, __s2, v28.n128_i64[0], v28.n128_i64[1]);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __s2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector3<float>>(a1, __s2, v28.n128_i64[0], v28.n128_i64[1]);
    if ((v10 & 1) == 0)
    {
      int v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      int v27 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      id v13 = (re *)strlen(__s2);
      uint64_t v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      id v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, __s2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_OWORD *)long long buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        uint64_t v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        uint64_t v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v29, 0, sizeof(v29));
        *(void *)long long buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v31 = v29;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v27);
      }
      else
      {
LABEL_19:
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

void RERenderGraphDataStructAddFloat4(void *a1, char *a2, __n128 a3)
{
}

void RERenderGraphDataStructAddFloat3x3(void *a1, char *__s2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  __n128 v30 = a3;
  __n128 v31 = a4;
  __n128 v32 = a5;
  {
    re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
  }
  BOOL v7 = (int *)re::introspect<re::Matrix3x3<float>>(void)::info;
  unsigned int v8 = *((_DWORD *)re::introspect<re::Matrix3x3<float>>(void)::info + 4);
  BOOL v9 = v8 > 9;
  int v10 = (1 << v8) & 0x301;
  if (v9 || v10 == 0)
  {
    __n128 v34 = v30;
    __n128 v35 = v31;
    __n128 v36 = v32;
    uint64_t v28 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix3x3<float>>(a1, __s2, &v34);
    if ((v28 & 1) == 0)
    {
      int v29 = *re::graphicsLogObjects((re *)v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __s2;
        _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    __n128 v34 = v30;
    __n128 v35 = v31;
    __n128 v36 = v32;
    uint64_t v12 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix3x3<float>>(a1, __s2, &v34);
    if ((v12 & 1) == 0)
    {
      id v13 = re::globalAllocators((re *)v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 72, 8);
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(void *)(v14 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      long long v33 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v14);
      uint64_t v15 = (re *)strlen(__s2);
      id v16 = (char *)v15 + 1;
      unint64_t v17 = re::globalAllocators(v15);
      unint64_t v18 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v17[2] + 32))(v17[2], v16, 0);
      *(void *)(v14 + 8) = strcpy(v18, __s2);
      unint64_t v19 = a1[10];
      unint64_t v20 = (v19 + v7[6] - 1) & -(uint64_t)v7[6];
      uint64_t v21 = v20 - v19;
      if (v20 > v19)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v21;
        }
        while (v21);
      }
      long long v22 = *(_OWORD *)(v14 + 16);
      *(void *)(v14 + 16) = v7;
      *(void *)(v14 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_OWORD *)long long buf = v22;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v23 = a1[10];
      *(_DWORD *)(v14 + 36) = v23;
      *(_DWORD *)uint64_t v14 = 1;
      unint64_t v24 = v23;
      uint64_t v25 = (v7[5] + (uint64_t)v7[6] - 1) & -(uint64_t)v7[6];
      if (!v25) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        uint64_t v26 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v25;
      }
      while (v25);
      unint64_t v24 = a1[10];
      if (v24 > v23)
      {
        int v27 = (const re::IntrospectionBase **)(a1[12] + v23);
        memset(v38, 0, 24);
        *(void *)long long buf = re::globalAllocators(v26)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v42 = v38;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v33);
      }
      else
      {
LABEL_19:
        uint64_t v37 = 0;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v38 = 136315906;
        *(void *)&_OWORD v38[4] = "operator[]";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 789;
        *(_WORD *)&unsigned char v38[18] = 2048;
        *(void *)&v38[20] = v23;
        __int16 v39 = 2048;
        unint64_t v40 = v24;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

void RERenderGraphDataStructAddFloat4x4(void *a1, char *__s2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  __n128 v31 = a3;
  __n128 v32 = a4;
  __n128 v33 = a5;
  __n128 v34 = a6;
  {
    re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
  }
  unsigned int v8 = (int *)re::introspect<re::Matrix4x4<float>>(void)::info;
  unsigned int v9 = *((_DWORD *)re::introspect<re::Matrix4x4<float>>(void)::info + 4);
  BOOL v10 = v9 > 9;
  int v11 = (1 << v9) & 0x301;
  if (v10 || v11 == 0)
  {
    __n128 v36 = v31;
    __n128 v37 = v32;
    __n128 v38 = v33;
    __n128 v39 = v34;
    uint64_t v29 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix4x4<float>>(a1, __s2, &v36);
    if ((v29 & 1) == 0)
    {
      __n128 v30 = *re::graphicsLogObjects((re *)v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __s2;
        _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    __n128 v36 = v31;
    __n128 v37 = v32;
    __n128 v38 = v33;
    __n128 v39 = v34;
    uint64_t v13 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix4x4<float>>(a1, __s2, &v36);
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = re::globalAllocators((re *)v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 72, 8);
      *(_OWORD *)uint64_t v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(void *)(v15 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      __n128 v35 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v15);
      id v16 = (re *)strlen(__s2);
      unint64_t v17 = (char *)v16 + 1;
      unint64_t v18 = re::globalAllocators(v16);
      unint64_t v19 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v18[2] + 32))(v18[2], v17, 0);
      *(void *)(v15 + 8) = strcpy(v19, __s2);
      unint64_t v20 = a1[10];
      unint64_t v21 = (v20 + v8[6] - 1) & -(uint64_t)v8[6];
      uint64_t v22 = v21 - v20;
      if (v21 > v20)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v22;
        }
        while (v22);
      }
      long long v23 = *(_OWORD *)(v15 + 16);
      *(void *)(v15 + 16) = v8;
      *(void *)(v15 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
      *(_OWORD *)long long buf = v23;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v24 = a1[10];
      *(_DWORD *)(v15 + 36) = v24;
      *(_DWORD *)uint64_t v15 = 1;
      unint64_t v25 = v24;
      uint64_t v26 = (v8[5] + (uint64_t)v8[6] - 1) & -(uint64_t)v8[6];
      if (!v26) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        int v27 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v26;
      }
      while (v26);
      unint64_t v25 = a1[10];
      if (v25 > v24)
      {
        uint64_t v28 = (const re::IntrospectionBase **)(a1[12] + v24);
        memset(v41, 0, 24);
        *(void *)long long buf = re::globalAllocators(v27)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v45 = v41;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v35);
      }
      else
      {
LABEL_19:
        uint64_t v40 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v41 = 136315906;
        *(void *)&void v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 789;
        *(_WORD *)&v41[18] = 2048;
        *(void *)&v41[20] = v24;
        __int16 v42 = 2048;
        unint64_t v43 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

BOOL RERenderGraphDataStructGetBool(void *a1, char *a2, unsigned char *a3)
{
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>(a2, a1, v6);
  int v4 = v6[0];
  if (v6[0]) {
    *a3 = v6[1];
  }
  return v4 != 0;
}

BOOL RERenderGraphDataStructGetUInt32(void *a1, char *a2, _DWORD *a3)
{
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned int>(a2, a1, (uint64_t)v6);
  int v4 = v6[0];
  if (v6[0]) {
    *a3 = v7;
  }
  return v4 != 0;
}

uint64_t RERenderGraphDataStructGetInt32(void *a1, char *__s2, _DWORD *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v12);
  }
  if (re::introspect<int>(void)::info != *(_UNKNOWN **)(v9 + 16)) {
    return 0;
  }
  unint64_t v11 = *(int *)(v9 + 36);
  if (a1[10] <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *a3 = *(_DWORD *)(a1[12] + v11);
  return 1;
}

BOOL RERenderGraphDataStructGetFloat(void *a1, char *a2, _DWORD *a3)
{
  re::RuntimeRenderGraphDataStruct::getValueOfType<float>(a2, a1, (uint64_t)v6);
  int v4 = v6[0];
  if (v6[0]) {
    *a3 = v7;
  }
  return v4 != 0;
}

uint64_t RERenderGraphDataStructGetFloat2(void *a1, char *__s2, void *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
  }
  if (re::introspect<re::Vector2<float>>(void)::info != *(_UNKNOWN **)(v9 + 16)) {
    return 0;
  }
  unint64_t v11 = *(int *)(v9 + 36);
  if (a1[10] <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *a3 = *(void *)(a1[12] + v11);
  return 1;
}

uint64_t RERenderGraphDataStructGetFloat3(void *a1, char *__s2, _OWORD *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
  }
  if (re::introspect<re::Vector3<float>>(void)::info != *(_UNKNOWN **)(v9 + 16)) {
    return 0;
  }
  unint64_t v11 = *(int *)(v9 + 36);
  if (a1[10] <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *a3 = *(_OWORD *)(a1[12] + v11);
  return 1;
}

BOOL RERenderGraphDataStructGetFloat4(void *a1, char *a2, __n128 *a3)
{
  re::RuntimeRenderGraphDataStruct::getValueOfType<re::Vector4<float>>(a2, a1, v6);
  int v4 = v6[0].n128_u8[0];
  if (v6[0].n128_u8[0]) {
    *a3 = v6[1];
  }
  return v4 != 0;
}

uint64_t RERenderGraphDataStructGetFloat3x3(void *a1, char *__s2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
  }
  if (re::introspect<re::Matrix3x3<float>>(void)::info != *(_UNKNOWN **)(v9 + 16)) {
    return 0;
  }
  unint64_t v11 = *(int *)(v9 + 36);
  if (a1[10] <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = (long long *)(a1[12] + v11);
  long long v13 = *v12;
  long long v14 = v12[1];
  long long v15 = v12[2];
  *(_DWORD *)(a3 + 8) = *((void *)v12 + 1);
  *(void *)a3 = v13;
  *(_DWORD *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = DWORD2(v14);
  *(void *)(a3 + 16) = v14;
  *(_DWORD *)(a3 + 40) = DWORD2(v15);
  *(void *)(a3 + 32) = v15;
  return 1;
}

uint64_t RERenderGraphDataStructGetFloat4x4(void *a1, char *__s2, _OWORD *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
  }
  if (re::introspect<re::Matrix4x4<float>>(void)::info != *(_UNKNOWN **)(v9 + 16)) {
    return 0;
  }
  unint64_t v11 = *(int *)(v9 + 36);
  if (a1[10] <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = (_OWORD *)(a1[12] + v11);
  long long v13 = v12[1];
  long long v14 = v12[2];
  long long v15 = v12[3];
  *a3 = *v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  return 1;
}

uint64_t RERenderGraphDataWrapperGetBool(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = (char ***)a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v20, (void *)(a1 + 24));
  unint64_t v6 = v21;
  if (!v21) {
    goto LABEL_19;
  }
  unint64_t v18 = v5;
  unint64_t v7 = 0;
  unsigned int v19 = 0;
  LODWORD(v5) = 0;
  unsigned int v8 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_27:
      uint64_t v24 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      uint64_t v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = v7;
      __int16 v31 = 2048;
      unint64_t v32 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (*(_DWORD *)(v9 + 56)) {
      break;
    }
LABEL_13:
    LODWORD(v5) = v5 + 1;
    unint64_t v7 = v5;
    if (v6 <= v5)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v9 + 64) + 8 * v10);
    if (*(_DWORD *)v11 == 1)
    {
      size_t v12 = strlen(*(const char **)(v11 + 8));
      if (!strncmp((const char *)(a2 + v8), *(const char **)(v11 + 8), v12)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_27;
    }
    ++v10;
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (v10 >= *(unsigned int *)(v9 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v13 = strlen((const char *)(a2 + v8));
  if (v12 != v13)
  {
    if (*(_DWORD *)(*(void *)(v11 + 16) + 16) == 8)
    {
      v19 += *(_DWORD *)(v11 + 36);
      *(void *)long long buf = *(void *)(v11 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v20, buf);
      v8 += strlen(*(const char **)(v11 + 8)) + 1;
      unint64_t v6 = v21;
    }
    goto LABEL_11;
  }
  uint64_t v5 = &off_268773000;
  {
    if (v13)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v17);
    }
  }
  if (re::introspect<BOOL>(void)::info == *(_UNKNOWN **)(v11 + 16))
  {
    buf[0] = 0;
    memcpy(buf, (char *)v18[4] + v19 + *(int *)(v11 + 36), *((int *)re::introspect<BOOL>(void)::info + 5));
    LOBYTE(v5) = buf[0];
    uint64_t v14 = 1;
  }
  else
  {
    long long v15 = *re::graphicsLogObjects((re *)v13);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
LABEL_19:
    uint64_t v14 = 0;
  }
LABEL_21:
  if (v20[0] && v23) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  if (v14) {
    *a3 = (_BYTE)v5;
  }
  return v14;
}

uint64_t RERenderGraphDataWrapperGetUInt32(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (char ***)a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v20, (void *)(a1 + 24));
  unint64_t v6 = v21;
  if (!v21) {
    goto LABEL_19;
  }
  unint64_t v18 = v5;
  unint64_t v7 = 0;
  unsigned int v19 = 0;
  LODWORD(v5) = 0;
  unsigned int v8 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_27:
      uint64_t v24 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      uint64_t v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = v7;
      __int16 v31 = 2048;
      unint64_t v32 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (*(_DWORD *)(v9 + 56)) {
      break;
    }
LABEL_13:
    LODWORD(v5) = v5 + 1;
    unint64_t v7 = v5;
    if (v6 <= v5)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v9 + 64) + 8 * v10);
    if (*(_DWORD *)v11 == 1)
    {
      size_t v12 = strlen(*(const char **)(v11 + 8));
      if (!strncmp((const char *)(a2 + v8), *(const char **)(v11 + 8), v12)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_27;
    }
    ++v10;
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (v10 >= *(unsigned int *)(v9 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v13 = strlen((const char *)(a2 + v8));
  if (v12 != v13)
  {
    if (*(_DWORD *)(*(void *)(v11 + 16) + 16) == 8)
    {
      v19 += *(_DWORD *)(v11 + 36);
      *(void *)long long buf = *(void *)(v11 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v20, buf);
      v8 += strlen(*(const char **)(v11 + 8)) + 1;
      unint64_t v6 = v21;
    }
    goto LABEL_11;
  }
  uint64_t v5 = &off_268773000;
  {
    if (v13)
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v17);
    }
  }
  if (re::introspect<unsigned int>(void)::info == *(_UNKNOWN **)(v11 + 16))
  {
    *(_DWORD *)long long buf = 0;
    memcpy(buf, (char *)v18[4] + v19 + *(int *)(v11 + 36), *((int *)re::introspect<unsigned int>(void)::info + 5));
    LODWORD(v5) = *(_DWORD *)buf;
    uint64_t v14 = 1;
  }
  else
  {
    long long v15 = *re::graphicsLogObjects((re *)v13);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
LABEL_19:
    uint64_t v14 = 0;
  }
LABEL_21:
  if (v20[0] && v23) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  if (v14) {
    *a3 = v5;
  }
  return v14;
}

uint64_t RERenderGraphDataWrapperGetInt32(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (char ***)a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v20, (void *)(a1 + 24));
  unint64_t v6 = v21;
  if (!v21) {
    goto LABEL_19;
  }
  unint64_t v18 = v5;
  unint64_t v7 = 0;
  unsigned int v19 = 0;
  LODWORD(v5) = 0;
  unsigned int v8 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_27:
      uint64_t v24 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      uint64_t v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = v7;
      __int16 v31 = 2048;
      unint64_t v32 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (*(_DWORD *)(v9 + 56)) {
      break;
    }
LABEL_13:
    LODWORD(v5) = v5 + 1;
    unint64_t v7 = v5;
    if (v6 <= v5)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v9 + 64) + 8 * v10);
    if (*(_DWORD *)v11 == 1)
    {
      size_t v12 = strlen(*(const char **)(v11 + 8));
      if (!strncmp((const char *)(a2 + v8), *(const char **)(v11 + 8), v12)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_27;
    }
    ++v10;
    uint64_t v9 = *(void *)(v23 + 8 * v7);
    if (v10 >= *(unsigned int *)(v9 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v13 = strlen((const char *)(a2 + v8));
  if (v12 != v13)
  {
    if (*(_DWORD *)(*(void *)(v11 + 16) + 16) == 8)
    {
      v19 += *(_DWORD *)(v11 + 36);
      *(void *)long long buf = *(void *)(v11 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v20, buf);
      v8 += strlen(*(const char **)(v11 + 8)) + 1;
      unint64_t v6 = v21;
    }
    goto LABEL_11;
  }
  uint64_t v5 = &off_268773000;
  {
    if (v13)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v17);
    }
  }
  if (re::introspect<int>(void)::info == *(_UNKNOWN **)(v11 + 16))
  {
    *(_DWORD *)long long buf = 0;
    memcpy(buf, (char *)v18[4] + v19 + *(int *)(v11 + 36), *((int *)re::introspect<int>(void)::info + 5));
    LODWORD(v5) = *(_DWORD *)buf;
    uint64_t v14 = 1;
  }
  else
  {
    long long v15 = *re::graphicsLogObjects((re *)v13);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
LABEL_19:
    uint64_t v14 = 0;
  }
LABEL_21:
  if (v20[0] && v23) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  if (v14) {
    *a3 = v5;
  }
  return v14;
}

uint64_t RERenderGraphDataWrapperGetFloat(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  v23[1] = 0;
  unint64_t v24 = 0;
  v23[0] = 0;
  int v25 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v23, (void *)(a1 + 24));
  unint64_t v7 = v24;
  if (!v24) {
    goto LABEL_19;
  }
  uint64_t v20 = a1;
  unint64_t v21 = a3;
  unint64_t v8 = 0;
  unsigned int v22 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  while (1)
  {
    if (v7 <= v8)
    {
LABEL_28:
      uint64_t v27 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      __int16 v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 789;
      __int16 v32 = 2048;
      unint64_t v33 = v8;
      __int16 v34 = 2048;
      unint64_t v35 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = *(void *)(v26 + 8 * v8);
    if (*(_DWORD *)(v11 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v8 = ++v9;
    if (v7 <= v9)
    {
      uint64_t v16 = 0;
LABEL_21:
      a3 = v21;
      goto LABEL_22;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(v11 + 64) + 8 * v12);
    if (*(_DWORD *)v13 == 1)
    {
      size_t v14 = strlen(*(const char **)(v13 + 8));
      if (!strncmp((const char *)(a2 + v10), *(const char **)(v13 + 8), v14)) {
        break;
      }
    }
LABEL_11:
    if (v7 <= v8) {
      goto LABEL_28;
    }
    ++v12;
    uint64_t v11 = *(void *)(v26 + 8 * v8);
    if (v12 >= *(unsigned int *)(v11 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v15 = strlen((const char *)(a2 + v10));
  if (v14 != v15)
  {
    if (*(_DWORD *)(*(void *)(v13 + 16) + 16) == 8)
    {
      v22 += *(_DWORD *)(v13 + 36);
      *(void *)long long buf = *(void *)(v13 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v23, buf);
      v10 += strlen(*(const char **)(v13 + 8)) + 1;
      unint64_t v7 = v24;
    }
    goto LABEL_11;
  }
  {
    if (v15)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v19);
    }
  }
  if (re::introspect<float>(void)::info == *(_UNKNOWN **)(v13 + 16))
  {
    *(_DWORD *)long long buf = 0;
    memcpy(buf, (const void *)(*(void *)(v20 + 32) + v22 + *(int *)(v13 + 36)), *((int *)re::introspect<float>(void)::info + 5));
    int v3 = *(_DWORD *)buf;
    uint64_t v16 = 1;
    goto LABEL_21;
  }
  unint64_t v17 = *re::graphicsLogObjects((re *)v15);
  a3 = v21;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
  }
LABEL_19:
  uint64_t v16 = 0;
LABEL_22:
  if (v23[0] && v26) {
    (*(void (**)(void))(*(void *)v23[0] + 40))();
  }
  if (v16) {
    *a3 = v3;
  }
  return v16;
}

uint64_t RERenderGraphDataWrapperGetFloat2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  v22[1] = 0;
  unint64_t v23 = 0;
  v22[0] = 0;
  int v24 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v22, (void *)(a1 + 24));
  unint64_t v7 = v23;
  if (!v23) {
    goto LABEL_19;
  }
  uint64_t v19 = a1;
  uint64_t v20 = a3;
  unint64_t v8 = 0;
  unsigned int v21 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  while (1)
  {
    if (v7 <= v8)
    {
LABEL_28:
      uint64_t v26 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v27 = 136315906;
      int v28 = "operator[]";
      __int16 v29 = 1024;
      int v30 = 789;
      __int16 v31 = 2048;
      unint64_t v32 = v8;
      __int16 v33 = 2048;
      unint64_t v34 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = *(void *)(v25 + 8 * v8);
    if (*(_DWORD *)(v11 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v8 = ++v9;
    if (v7 <= v9)
    {
      uint64_t v16 = 0;
LABEL_21:
      a3 = v20;
      goto LABEL_22;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(v11 + 64) + 8 * v12);
    if (*(_DWORD *)v13 == 1)
    {
      size_t v14 = strlen(*(const char **)(v13 + 8));
      if (!strncmp((const char *)(a2 + v10), *(const char **)(v13 + 8), v14)) {
        break;
      }
    }
LABEL_11:
    if (v7 <= v8) {
      goto LABEL_28;
    }
    ++v12;
    uint64_t v11 = *(void *)(v25 + 8 * v8);
    if (v12 >= *(unsigned int *)(v11 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v15 = strlen((const char *)(a2 + v10));
  if (v14 != v15)
  {
    if (*(_DWORD *)(*(void *)(v13 + 16) + 16) == 8)
    {
      v21 += *(_DWORD *)(v13 + 36);
      *(void *)long long buf = *(void *)(v13 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v22, buf);
      v10 += strlen(*(const char **)(v13 + 8)) + 1;
      unint64_t v7 = v23;
    }
    goto LABEL_11;
  }
  {
    if (v15)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
  }
  if (re::introspect<re::Vector2<float>>(void)::info == *(_UNKNOWN **)(v13 + 16))
  {
    *(void *)long long buf = 0;
    memcpy(buf, (const void *)(*(void *)(v19 + 32) + v21 + *(int *)(v13 + 36)), *((int *)re::introspect<re::Vector2<float>>(void)::info + 5));
    uint64_t v3 = *(void *)buf;
    uint64_t v16 = 1;
    goto LABEL_21;
  }
  unint64_t v17 = *re::graphicsLogObjects((re *)v15);
  a3 = v20;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
  }
LABEL_19:
  uint64_t v16 = 0;
LABEL_22:
  if (v22[0] && v25) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  if (v16) {
    *a3 = v3;
  }
  return v16;
}

uint64_t RERenderGraphDataWrapperGetFloat3(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  v21[1] = 0;
  unint64_t v22 = 0;
  v21[0] = 0;
  int v23 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v21, (void *)(a1 + 24));
  unint64_t v6 = v22;
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v18 = a1;
  uint64_t v19 = a3;
  unint64_t v7 = 0;
  LODWORD(v20) = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_28:
      uint64_t v25 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      int v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 789;
      __int16 v30 = 2048;
      unint64_t v31 = v7;
      __int16 v32 = 2048;
      unint64_t v33 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(v24 + 8 * v7);
    if (*(_DWORD *)(v10 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v7 = ++v8;
    if (v6 <= v8)
    {
      uint64_t v15 = 0;
LABEL_21:
      a3 = v19;
      goto LABEL_22;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v10 + 64) + 8 * v11);
    if (*(_DWORD *)v12 == 1)
    {
      size_t v13 = strlen(*(const char **)(v12 + 8));
      if (!strncmp((const char *)(a2 + v9), *(const char **)(v12 + 8), v13)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_28;
    }
    ++v11;
    uint64_t v10 = *(void *)(v24 + 8 * v7);
    if (v11 >= *(unsigned int *)(v10 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v14 = strlen((const char *)(a2 + v9));
  if (v13 != v14)
  {
    if (*(_DWORD *)(*(void *)(v12 + 16) + 16) == 8)
    {
      LODWORD(v20) = *(_DWORD *)(v12 + 36) + v20;
      *(void *)long long buf = *(void *)(v12 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v21, buf);
      v9 += strlen(*(const char **)(v12 + 8)) + 1;
      unint64_t v6 = v22;
    }
    goto LABEL_11;
  }
  {
    if (v14)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
  }
  if (re::introspect<re::Vector3<float>>(void)::info == *(_UNKNOWN **)(v12 + 16))
  {
    *(_OWORD *)long long buf = 0u;
    memcpy(buf, (const void *)(*(void *)(v18 + 32) + v20 + *(int *)(v12 + 36)), *((int *)re::introspect<re::Vector3<float>>(void)::info + 5));
    long long v20 = *(_OWORD *)buf;
    uint64_t v15 = 1;
    goto LABEL_21;
  }
  uint64_t v16 = *re::graphicsLogObjects((re *)v14);
  a3 = v19;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
  }
LABEL_19:
  uint64_t v15 = 0;
LABEL_22:
  if (v21[0] && v24) {
    (*(void (**)(void))(*(void *)v21[0] + 40))();
  }
  if (v15) {
    *a3 = v20;
  }
  return v15;
}

uint64_t RERenderGraphDataWrapperGetFloat4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  v21[1] = 0;
  unint64_t v22 = 0;
  v21[0] = 0;
  int v23 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v21, (void *)(a1 + 24));
  unint64_t v6 = v22;
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v18 = a1;
  uint64_t v19 = a3;
  unint64_t v7 = 0;
  LODWORD(v20) = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_28:
      uint64_t v25 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      int v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 789;
      __int16 v30 = 2048;
      unint64_t v31 = v7;
      __int16 v32 = 2048;
      unint64_t v33 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(v24 + 8 * v7);
    if (*(_DWORD *)(v10 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v7 = ++v8;
    if (v6 <= v8)
    {
      uint64_t v15 = 0;
LABEL_21:
      a3 = v19;
      goto LABEL_22;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v10 + 64) + 8 * v11);
    if (*(_DWORD *)v12 == 1)
    {
      size_t v13 = strlen(*(const char **)(v12 + 8));
      if (!strncmp((const char *)(a2 + v9), *(const char **)(v12 + 8), v13)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_28;
    }
    ++v11;
    uint64_t v10 = *(void *)(v24 + 8 * v7);
    if (v11 >= *(unsigned int *)(v10 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v14 = strlen((const char *)(a2 + v9));
  if (v13 != v14)
  {
    if (*(_DWORD *)(*(void *)(v12 + 16) + 16) == 8)
    {
      LODWORD(v20) = *(_DWORD *)(v12 + 36) + v20;
      *(void *)long long buf = *(void *)(v12 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v21, buf);
      v9 += strlen(*(const char **)(v12 + 8)) + 1;
      unint64_t v6 = v22;
    }
    goto LABEL_11;
  }
  {
    if (v14)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
  }
  if (re::introspect<re::Vector4<float>>(void)::info == *(_UNKNOWN **)(v12 + 16))
  {
    memset(buf, 0, sizeof(buf));
    memcpy(buf, (const void *)(*(void *)(v18 + 32) + v20 + *(int *)(v12 + 36)), *((int *)re::introspect<re::Vector4<float>>(void)::info + 5));
    long long v20 = *(_OWORD *)buf;
    uint64_t v15 = 1;
    goto LABEL_21;
  }
  uint64_t v16 = *re::graphicsLogObjects((re *)v14);
  a3 = v19;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
  }
LABEL_19:
  uint64_t v15 = 0;
LABEL_22:
  if (v21[0] && v24) {
    (*(void (**)(void))(*(void *)v21[0] + 40))();
  }
  if (v15) {
    *a3 = v20;
  }
  return v15;
}

uint64_t RERenderGraphDataWrapperGetFloat3x3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v28 = 0;
  v25[1] = 0;
  unint64_t v26 = 0;
  v25[0] = 0;
  int v27 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v25, (void *)(a1 + 24));
  unint64_t v6 = v26;
  if (!v26) {
    goto LABEL_19;
  }
  *(void *)&long long v22 = a1;
  uint64_t v23 = a3;
  unint64_t v7 = 0;
  LODWORD(v2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_30:
      uint64_t v29 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      unint64_t v31 = "operator[]";
      __int16 v32 = 1024;
      int v33 = 789;
      __int16 v34 = 2048;
      unint64_t v35 = v7;
      __int16 v36 = 2048;
      unint64_t v37 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(v28 + 8 * v7);
    if (*(_DWORD *)(v10 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v7 = ++v8;
    if (v6 <= v8)
    {
      uint64_t v15 = 0;
      a3 = v23;
      goto LABEL_24;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v10 + 64) + 8 * v11);
    if (*(_DWORD *)v12 == 1)
    {
      size_t v13 = strlen(*(const char **)(v12 + 8));
      if (!strncmp((const char *)(a2 + v9), *(const char **)(v12 + 8), v13)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_30;
    }
    ++v11;
    uint64_t v10 = *(void *)(v28 + 8 * v7);
    if (v11 >= *(unsigned int *)(v10 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v14 = strlen((const char *)(a2 + v9));
  if (v13 != v14)
  {
    if (*(_DWORD *)(*(void *)(v12 + 16) + 16) == 8)
    {
      LODWORD(v2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(v12 + 36) + v24;
      *(void *)long long buf = *(void *)(v12 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v25, buf);
      v9 += strlen(*(const char **)(v12 + 8)) + 1;
      unint64_t v6 = v26;
    }
    goto LABEL_11;
  }
  {
    if (v14)
    {
      re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
    }
  }
  a3 = v23;
  if (re::introspect<re::Matrix3x3<float>>(void)::info == *(_UNKNOWN **)(v12 + 16))
  {
    unint64_t v17 = (const void *)(*(void *)(v22 + 32) + v24 + *(int *)(v12 + 36));
    size_t v18 = *((int *)re::introspect<re::Matrix3x3<float>>(void)::info + 5);
    if (v18 <= 0x2F) {
      size_t v19 = 48 - v18;
    }
    else {
      size_t v19 = 0;
    }
    bzero(&buf[v18], v19);
    memcpy(buf, v17, v18);
    long long v24 = v39;
    uint64_t v15 = 1;
    long long v21 = v40;
    long long v22 = *(_OWORD *)buf;
  }
  else
  {
    uint64_t v16 = *re::graphicsLogObjects((re *)v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
LABEL_19:
    uint64_t v15 = 0;
  }
LABEL_24:
  if (v25[0] && v28) {
    (*(void (**)(void))(*(void *)v25[0] + 40))();
  }
  if (v15)
  {
    *(_DWORD *)(a3 + 8) = DWORD2(v22);
    *(_DWORD *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = DWORD2(v24);
    *(void *)a3 = v22;
    *(void *)(a3 + 16) = v24;
    *(_DWORD *)(a3 + 40) = DWORD2(v21);
    *(void *)(a3 + 32) = v21;
  }
  return v15;
}

uint64_t RERenderGraphDataWrapperGetFloat4x4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v26[1] = 0;
  unint64_t v27 = 0;
  v26[0] = 0;
  int v28 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v26, (void *)(a1 + 24));
  unint64_t v6 = v27;
  if (!v27) {
    goto LABEL_19;
  }
  *(void *)&long long v23 = a1;
  long long v24 = a3;
  unint64_t v7 = 0;
  LODWORD(v25) = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_31:
      uint64_t v30 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v31 = 136315906;
      __int16 v32 = "operator[]";
      __int16 v33 = 1024;
      int v34 = 789;
      __int16 v35 = 2048;
      unint64_t v36 = v7;
      __int16 v37 = 2048;
      unint64_t v38 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(v29 + 8 * v7);
    if (*(_DWORD *)(v10 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v7 = ++v8;
    if (v6 <= v8)
    {
      uint64_t v15 = 0;
LABEL_24:
      a3 = v24;
      goto LABEL_25;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v10 + 64) + 8 * v11);
    if (*(_DWORD *)v12 == 1)
    {
      size_t v13 = strlen(*(const char **)(v12 + 8));
      if (!strncmp((const char *)(a2 + v9), *(const char **)(v12 + 8), v13)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_31;
    }
    ++v11;
    uint64_t v10 = *(void *)(v29 + 8 * v7);
    if (v11 >= *(unsigned int *)(v10 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v14 = strlen((const char *)(a2 + v9));
  if (v13 != v14)
  {
    if (*(_DWORD *)(*(void *)(v12 + 16) + 16) == 8)
    {
      LODWORD(v25) = *(_DWORD *)(v12 + 36) + v25;
      *(void *)long long buf = *(void *)(v12 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v26, buf);
      v9 += strlen(*(const char **)(v12 + 8)) + 1;
      unint64_t v6 = v27;
    }
    goto LABEL_11;
  }
  {
    if (v14)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
    }
  }
  if (re::introspect<re::Matrix4x4<float>>(void)::info == *(_UNKNOWN **)(v12 + 16))
  {
    unint64_t v17 = (const void *)(*(void *)(v23 + 32) + v25 + *(int *)(v12 + 36));
    size_t v18 = *((int *)re::introspect<re::Matrix4x4<float>>(void)::info + 5);
    if (v18 <= 0x3F) {
      size_t v19 = 64 - v18;
    }
    else {
      size_t v19 = 0;
    }
    bzero(&buf[v18], v19);
    memcpy(buf, v17, v18);
    long long v22 = *(_OWORD *)buf;
    long long v23 = v40;
    uint64_t v15 = 1;
    long long v25 = v41;
    long long v21 = v42;
    goto LABEL_24;
  }
  uint64_t v16 = *re::graphicsLogObjects((re *)v14);
  a3 = v24;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
  }
LABEL_19:
  uint64_t v15 = 0;
LABEL_25:
  if (v26[0] && v29) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  if (v15)
  {
    *a3 = v22;
    a3[1] = v23;
    a3[2] = v25;
    a3[3] = v21;
  }
  return v15;
}

uint64_t RERenderGraphDataWrapperSetBool(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  char __src = a3;
  uint64_t v21 = 0;
  v18[1] = 0;
  unint64_t v19 = 0;
  v18[0] = 0;
  int v20 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v18, (void *)(a1 + 24));
  unint64_t v4 = v19;
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v17 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      long long v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v5;
      __int16 v30 = 2048;
      unint64_t v31 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v17 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v18, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v19;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v15);
    }
  }
  if (re::introspect<BOOL>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v17 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<BOOL>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v18[0];
  if (v18[0])
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetUInt32(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int __src = a3;
  uint64_t v21 = 0;
  v18[1] = 0;
  unint64_t v19 = 0;
  v18[0] = 0;
  int v20 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v18, (void *)(a1 + 24));
  unint64_t v4 = v19;
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v17 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      long long v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v5;
      __int16 v30 = 2048;
      unint64_t v31 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v17 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v18, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v19;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v15);
    }
  }
  if (re::introspect<unsigned int>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v17 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<unsigned int>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v18[0];
  if (v18[0])
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetInt32(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int __src = a3;
  uint64_t v21 = 0;
  v18[1] = 0;
  unint64_t v19 = 0;
  v18[0] = 0;
  int v20 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v18, (void *)(a1 + 24));
  unint64_t v4 = v19;
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v17 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      long long v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v5;
      __int16 v30 = 2048;
      unint64_t v31 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v17 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v18, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v19;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v15);
    }
  }
  if (re::introspect<int>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v17 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<int>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v18[0];
  if (v18[0])
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  float __src = a3;
  uint64_t v21 = 0;
  v18[1] = 0;
  unint64_t v19 = 0;
  v18[0] = 0;
  int v20 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v18, (void *)(a1 + 24));
  unint64_t v4 = v19;
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v17 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      long long v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v5;
      __int16 v30 = 2048;
      unint64_t v31 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v21 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v17 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v18, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v19;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v15);
    }
  }
  if (re::introspect<float>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v17 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<float>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v18[0];
  if (v18[0])
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat2(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  *(double *)float __src = a3;
  uint64_t v20 = 0;
  v17[1] = 0;
  unint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v17, (void *)(a1 + 24));
  unint64_t v4 = v18;
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v16 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      __src[1] = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      uint64_t v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      unint64_t v27 = v5;
      __int16 v28 = 2048;
      unint64_t v29 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v16 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v17, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v18;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
  }
  if (re::introspect<re::Vector2<float>>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v16 + *(int *)(v10 + 36)), __src, *((int *)re::introspect<re::Vector2<float>>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v17[0];
  if (v17[0])
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat3(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  __n128 __src = a3;
  uint64_t v20 = 0;
  v17[1] = 0;
  unint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v17, (void *)(a1 + 24));
  unint64_t v4 = v18;
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v16 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      __int16 v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v5;
      __int16 v29 = 2048;
      unint64_t v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v16 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v17, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v18;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
  }
  if (re::introspect<re::Vector3<float>>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v16 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<re::Vector3<float>>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v17[0];
  if (v17[0])
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  __n128 __src = a3;
  uint64_t v20 = 0;
  v17[1] = 0;
  unint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v17, (void *)(a1 + 24));
  unint64_t v4 = v18;
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unsigned int v16 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    if (v4 <= v5)
    {
LABEL_24:
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      __int16 v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v5;
      __int16 v29 = 2048;
      unint64_t v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (*(_DWORD *)(v8 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_20;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
    if (*(_DWORD *)v10 == 1)
    {
      size_t v11 = strlen(*(const char **)(v10 + 8));
      if (!strncmp((const char *)(a2 + v7), *(const char **)(v10 + 8), v11)) {
        break;
      }
    }
LABEL_11:
    if (v4 <= v5) {
      goto LABEL_24;
    }
    ++v9;
    uint64_t v8 = *(void *)(v20 + 8 * v5);
    if (v9 >= *(unsigned int *)(v8 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v12 = strlen((const char *)(a2 + v7));
  if (v11 != v12)
  {
    if (*(_DWORD *)(*(void *)(v10 + 16) + 16) == 8)
    {
      v16 += *(_DWORD *)(v10 + 36);
      *(void *)long long buf = *(void *)(v10 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v17, buf);
      v7 += strlen(*(const char **)(v10 + 8)) + 1;
      unint64_t v4 = v18;
    }
    goto LABEL_11;
  }
  {
    if (v12)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
  }
  if (re::introspect<re::Vector4<float>>(void)::info == *(_UNKNOWN **)(v10 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v16 + *(int *)(v10 + 36)), &__src, *((int *)re::introspect<re::Vector4<float>>(void)::info + 5));
  }
  else
  {
    size_t v13 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v17[0];
  if (v17[0])
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat3x3(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  __src[0] = a3;
  __src[1] = a4;
  void __src[2] = a5;
  uint64_t v22 = 0;
  v19[1] = 0;
  unint64_t v20 = 0;
  v19[0] = 0;
  int v21 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v19, (void *)(a1 + 24));
  unint64_t v6 = v20;
  if (!v20) {
    goto LABEL_20;
  }
  unint64_t v7 = 0;
  unsigned int v18 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    if (v6 <= v7)
    {
LABEL_24:
      uint64_t v23 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      int v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = v7;
      __int16 v31 = 2048;
      unint64_t v32 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(v22 + 8 * v7);
    if (*(_DWORD *)(v10 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v7 = ++v8;
    if (v6 <= v8) {
      goto LABEL_20;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v10 + 64) + 8 * v11);
    if (*(_DWORD *)v12 == 1)
    {
      size_t v13 = strlen(*(const char **)(v12 + 8));
      if (!strncmp((const char *)(a2 + v9), *(const char **)(v12 + 8), v13)) {
        break;
      }
    }
LABEL_11:
    if (v6 <= v7) {
      goto LABEL_24;
    }
    ++v11;
    uint64_t v10 = *(void *)(v22 + 8 * v7);
    if (v11 >= *(unsigned int *)(v10 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v14 = strlen((const char *)(a2 + v9));
  if (v13 != v14)
  {
    if (*(_DWORD *)(*(void *)(v12 + 16) + 16) == 8)
    {
      v18 += *(_DWORD *)(v12 + 36);
      *(void *)long long buf = *(void *)(v12 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v19, buf);
      v9 += strlen(*(const char **)(v12 + 8)) + 1;
      unint64_t v6 = v20;
    }
    goto LABEL_11;
  }
  {
    if (v14)
    {
      re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
    }
  }
  if (re::introspect<re::Matrix3x3<float>>(void)::info == *(_UNKNOWN **)(v12 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v18 + *(int *)(v12 + 36)), __src, *((int *)re::introspect<re::Matrix3x3<float>>(void)::info + 5));
  }
  else
  {
    uint64_t v15 = *re::graphicsLogObjects((re *)v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v19[0];
  if (v19[0])
  {
    if (v22) {
      return (*(uint64_t (**)(void))(*(void *)v19[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderGraphDataWrapperSetFloat4x4(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  __src[0] = a3;
  __src[1] = a4;
  void __src[2] = a5;
  _OWORD __src[3] = a6;
  uint64_t v23 = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  re::DynamicArray<re::IntrospectionStructure const*>::add(v20, (void *)(a1 + 24));
  unint64_t v7 = v21;
  if (!v21) {
    goto LABEL_20;
  }
  unint64_t v8 = 0;
  unsigned int v19 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  while (1)
  {
    if (v7 <= v8)
    {
LABEL_24:
      uint64_t v24 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      __int16 v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 789;
      __int16 v30 = 2048;
      unint64_t v31 = v8;
      __int16 v32 = 2048;
      unint64_t v33 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = *(void *)(v23 + 8 * v8);
    if (*(_DWORD *)(v11 + 56)) {
      break;
    }
LABEL_13:
    unint64_t v8 = ++v9;
    if (v7 <= v9) {
      goto LABEL_20;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(v11 + 64) + 8 * v12);
    if (*(_DWORD *)v13 == 1)
    {
      size_t v14 = strlen(*(const char **)(v13 + 8));
      if (!strncmp((const char *)(a2 + v10), *(const char **)(v13 + 8), v14)) {
        break;
      }
    }
LABEL_11:
    if (v7 <= v8) {
      goto LABEL_24;
    }
    ++v12;
    uint64_t v11 = *(void *)(v23 + 8 * v8);
    if (v12 >= *(unsigned int *)(v11 + 56)) {
      goto LABEL_13;
    }
  }
  size_t v15 = strlen((const char *)(a2 + v10));
  if (v14 != v15)
  {
    if (*(_DWORD *)(*(void *)(v13 + 16) + 16) == 8)
    {
      v19 += *(_DWORD *)(v13 + 36);
      *(void *)long long buf = *(void *)(v13 + 16);
      re::DynamicArray<re::IntrospectionStructure const*>::add(v20, buf);
      v10 += strlen(*(const char **)(v13 + 8)) + 1;
      unint64_t v7 = v21;
    }
    goto LABEL_11;
  }
  {
    if (v15)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
    }
  }
  if (re::introspect<re::Matrix4x4<float>>(void)::info == *(_UNKNOWN **)(v13 + 16))
  {
    memcpy((void *)(*(void *)(a1 + 32) + v19 + *(int *)(v13 + 36)), __src, *((int *)re::introspect<re::Matrix4x4<float>>(void)::info + 5));
  }
  else
  {
    unsigned int v16 = *re::graphicsLogObjects((re *)v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Requested value doesn't match requested type.", buf, 2u);
    }
  }
LABEL_20:
  uint64_t result = v20[0];
  if (v20[0])
  {
    if (v23) {
      return (*(uint64_t (**)(void))(*(void *)v20[0] + 40))();
    }
  }
  return result;
}

uint64_t RERenderFrameSettingsSetTotalTime(uint64_t result, float a2)
{
  *(float *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

void RERenderFrameSettingsSetGpuWaitEvent(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v7 = v5;
  id v6 = v5;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 32), &v7);
  if (v7) {

  }
  *(void *)(a1 + 40) = a3;
}

void RERenderFrameSettingsSetGpuSignalEvent(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v7 = v5;
  id v6 = v5;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 48), &v7);
  if (v7) {

  }
  *(void *)(a1 + 56) = a3;
}

void RERenderFrameSettingsAddGpuWaitEvent(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  v7[0] = v6;
  id v5 = v6;
  v7[1] = a3;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add((void *)(a1 + 64), v7);
  if (v7[0]) {
}
  }

void RERenderFrameSettingsAddGpuSignalEvent(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  v7[0] = v6;
  id v5 = v6;
  v7[1] = a3;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add((void *)(a1 + 104), v7);
  if (v7[0]) {
}
  }

uint64_t (***RERenderGraphManagerSetDidReceiveErrorHandler(re *a1, void *aBlock))(void)
{
  v8[5] = *MEMORY[0x263EF8340];
  if (aBlock)
  {
    uint64_t v3 = (re *)_Block_copy(aBlock);
    uint64_t v4 = re::globalAllocators(v3)[2];
    id v5 = v7;
    v7[0] = &unk_26E736EF8;
    v7[1] = v3;
    void v7[3] = v4;
    float32x4_t v7[4] = v7;
  }
  else
  {
    memset(v8, 0, 24);
    id v8[3] = re::globalAllocators(a1)[2];
    id v8[4] = 0;
    id v5 = v8;
  }
  re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::operator=<24ul>((uint64_t)a1 + 312, (uint64_t)v5);
  return re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::destroyCallable((uint64_t)v5);
}

float RERenderGraphManagerFileProvidersGetMaxDisableTimeout()
{
  return 2.0;
}

uint64_t RERenderGraphManagerFileProvidersEnable(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 412) = 0;
  if (a2)
  {
    uint64_t result = re::RenderFrameBox::get(*(void *)(a2 + 32) + 344, *(void *)(a2 + 40));
    *(unsigned char *)(result + 42re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  return result;
}

uint64_t RERenderGraphManagerFileProvidersAreDisabled(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = (unsigned __int8 *)(re::RenderFrameBox::get(*(void *)(a2 + 32) + 344, *(void *)(a2 + 40)) + 424);
  }
  else {
    uint64_t v2 = (unsigned __int8 *)(a1 + 412);
  }
  return *v2;
}

std::chrono::steady_clock::time_point RERenderGraphManagerGraphCachingDisable(uint64_t a1, float a2)
{
  *(unsigned char *)(a1 + 380) = 1;
  *(float *)(a1 + 376) = a2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::steady_clock::time_point *)(a1 + 352) = result;
  *(unsigned char *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 672) = 0;
  return result;
}

uint64_t RERenderGraphManagerGraphCachingEnable(uint64_t result)
{
  *(unsigned char *)(result + 380) = 0;
  return result;
}

uint64_t RERenderGraphManagerGraphCachingIsDisabled(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = (unsigned __int8 *)(re::RenderFrameBox::get(*(void *)(a2 + 32) + 344, *(void *)(a2 + 40)) + 425);
  }
  else {
    uint64_t v2 = (unsigned __int8 *)(a1 + 380);
  }
  return *v2;
}

uint64_t RERenderGraphCachingSkipGraph()
{
  return 0;
}

size_t RERenderGraphCachingHashString(const char *a1)
{
  void v3[2] = *MEMORY[0x263EF8340];
  size_t result = strlen(a1);
  if (result)
  {
    MurmurHash3_x64_128((uint64_t)a1, result, 0, v3);
    return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
  }
  return result;
}

uint64_t RERenderGraphCachingHashCombine(unint64_t a1, uint64_t a2)
{
  return (a2 + (a1 << 6) + (a1 >> 2) - 0x61C8864680B583E9) ^ a1;
}

unint64_t RERenderGraphCachingHashBitMix(unint64_t a1)
{
  unint64_t v1 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
  return v1 ^ (v1 >> 31);
}

void re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E736CE8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E736CE8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736D40;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736D40;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736D98;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736D98;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736DF0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736DF0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphManagerCreateAndAddCachingProvider::$_1,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  *(unsigned char *)(a2 + 592) = 1;
  return result;
}

void *re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736E48;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736E48;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_0,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736EA0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736EA0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphAddNodeInlineEx::$_1,void ()(re::RenderGraphContext &)>::size()
{
  return 16;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<int>(void *a1, char *__s2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int __src = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  id v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v12);
  }
  if (re::introspect<int>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      unsigned int v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v10;
      __int16 v21 = 2048;
      unint64_t v22 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), &__src, *((int *)re::introspect<int>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector2<float>>(void *a1, char *__s2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  __src[0] = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  id v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
  }
  if (re::introspect<re::Vector2<float>>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      __src[1] = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      uint64_t v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 789;
      __int16 v17 = 2048;
      unint64_t v18 = v10;
      __int16 v19 = 2048;
      unint64_t v20 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), __src, *((int *)re::introspect<re::Vector2<float>>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector3<float>>(void *a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v4 = a1[5];
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
  }
  if (re::introspect<re::Vector3<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    unint64_t v12 = a1[10];
    if (v12 <= v11)
    {
      _OWORD __src[3] = 0;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      __int16 v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      unint64_t v19 = v11;
      __int16 v20 = 2048;
      unint64_t v21 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v11), __src, *((int *)re::introspect<re::Vector3<float>>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix3x3<float>>(void *a1, char *__s2, const void *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
  }
  if (re::introspect<re::Matrix3x3<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    if (a1[10] <= v11)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v11), a3, *((int *)re::introspect<re::Matrix3x3<float>>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::Matrix4x4<float>>(void *a1, char *__s2, const void *a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v3;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
  }
  if (re::introspect<re::Matrix4x4<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    if (a1[10] <= v11)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v11), a3, *((int *)re::introspect<re::Matrix4x4<float>>(void)::info + 5));
  }
  return 1;
}

uint64_t re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v6 = *a3;
  CFIndex v5 = a3[1];
  CFMutableDataRef Mutable = CFArrayCreateMutable(0, v5, MEMORY[0x263EFFF70]);
  uint64_t v8 = (void *)*MEMORY[0x263EFFC48];
  if (v5)
  {
    uint64_t v9 = (const char **)(v6 + 32);
    do
    {
      CFStringRef v16 = 0;
      userInfoKeys = v8;
      if (*(unsigned char *)(v9 - 1)) {
        unint64_t v10 = *v9;
      }
      else {
        unint64_t v10 = (char *)v9 - 7;
      }
      CFStringRef v16 = CFStringCreateWithCString(0, v10, 0x8000100u);
      if (*(v9 - 3) == (const char *)re::RenderGraphCachingErrorCategory(void)::instance)
      {
        CFIndex v12 = *((int *)v9 - 8);
        CFStringRef v11 = @"RERenderGraphCachingErrorDomain";
      }
      else
      {
        CFStringRef v11 = @"RERenderGraphErrorDomain";
        CFIndex v12 = 2;
      }
      CFErrorRef v13 = CFErrorCreateWithUserInfoKeysAndValues(0, v11, v12, (const void *const *)&userInfoKeys, (const void *const *)&v16, 1);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      v9 += 6;
      --v5;
    }
    while (v5);
  }
  int v14 = CFDictionaryCreateMutable(0, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryAddValue(v14, v8, @"Multiple errors (userInfo's UnderlyingError entry is a CFErrorRef array)");
  CFDictionaryAddValue(v14, (const void *)*MEMORY[0x263EFFC88], Mutable);
  CFRelease(Mutable);
  CFErrorRef v15 = CFErrorCreate(0, @"RERenderGraphErrorDomain", 1, v14);
  CFRelease(v14);
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), v4);
  CFRelease(v15);
}

void *re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E736EF8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E736EF8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERenderGraphManagerSetDidReceiveErrorHandler::$_0,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::size()
{
  return 16;
}

re::StringID *re::make::shared::object<re::Shareable<re::ProviderHandle>,re::ProviderHandle&>(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  CFIndex v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *CFIndex v5 = &unk_26E736F60;
  uint64_t result = re::StringID::StringID((re::StringID *)(v5 + 3), (const StringID *)a2);
  void v5[5] = *(void *)(a2 + 16);
  *(void *)a1 = v5;
  return result;
}

void *re::Shareable<re::ProviderHandle>::~Shareable(void *a1)
{
  *a1 = &unk_26E736F60;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ProviderHandle>::~Shareable(void *a1)
{
  *a1 = &unk_26E736F60;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void REVFXSceneComponentSetAsset(re::ecs2::VFXSceneComponent *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4) {
    uint64_t v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v5 = *((void *)a1 + 27);
  }
  if (*(void *)(v5 + 72) != a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v6);
    re::ecs2::VFXSceneComponent::setVFX((uint64_t)a1, (const re::AssetHandle *)v6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    re::ecs2::VFXSceneComponent::invalidateIfNeeded(a1);
  }
}

uint64_t REVFXSceneComponentGetAsset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    uint64_t v2 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v2 = *(void *)(a1 + 216);
  }
  return *(void *)(v2 + 72);
}

uint64_t REVFXSceneComponentSetSimulationRate(uint64_t result, float a2)
{
  *(float *)(result + 352) = a2;
  return result;
}

float REVFXSceneComponentGetSimulationRate(uint64_t a1)
{
  return *(float *)(a1 + 352);
}

_DWORD *REVFXSceneComponentResetSimulation(_DWORD *result)
{
  result[57] = 0;
  result[58] = 0;
  ++result[59];
  return result;
}

uint64_t REVFXSceneComponentSetSimulationState(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (a2 != 1) {
      return result;
    }
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 360) = v2;
  return result;
}

BOOL REVFXSceneComponentGetSimulationState(uint64_t a1)
{
  return *(unsigned char *)(a1 + 360) != 0;
}

float REVFXSceneComponentGetSimulationTime(uint64_t a1)
{
  return *(float *)(a1 + 228);
}

uint64_t REVFXSceneComponentSetSimulationTime(uint64_t result, float a2)
{
  float v2 = *(float *)(result + 228);
  if (a2 >= 0.0 && v2 != a2)
  {
    *(unsigned char *)(result + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
    if (v2 > a2)
    {
      int v4 = *(_DWORD *)(result + 236) + 1;
      *(_DWORD *)(result + 232) = 0;
      *(_DWORD *)(result + 236) = v4;
    }
    *(float *)(result + 228) = a2;
  }
  return result;
}

void *REVFXSceneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REVFXSceneComponentSetParameterString(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v10 = a3;
  uint64_t v6 = (re *)v10;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v6);
  Class v17 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v8 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:v6 type:0];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v12 = 3321888768;
    CFErrorRef v13 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP8NSStringZ37REVFXSceneComponentSetParameterStringE3__0EEvP11REComponentS2_lT_OT0__block_invoke;
    int v14 = &__block_descriptor_48_a8_32c143_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP8NSStringZ37REVFXSceneComponentSetParameterStringE3__0EEvP11REComponentS2_lT_OT0_EUlPhE__e8_v16__0_8l;
    CFErrorRef v15 = &v10;
    CFStringRef v16 = &v17;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 0, v8, buf);
  }
  else
  {
    uint64_t v9 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterKeyframeAnimation(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v12 = a4;
  int v8 = (re *)v12;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v8);
  Class v19 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v10 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:v8 type:a3];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v14 = 3321888768;
    CFErrorRef v15 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP19CAKeyframeAnimationZ48REVFXSceneComponentSetParameterKeyframeAnimationE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFStringRef v16 = &__block_descriptor_48_a8_32c173_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP19CAKeyframeAnimationZ48REVFXSceneComponentSetParameterKeyframeAnimationE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    Class v17 = &v12;
    __int16 v18 = &v19;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v7, a3, v10, buf);
  }
  else
  {
    CFStringRef v11 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

id REVFXSceneComponentGetParameterKeyframeAnimation(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  if (VFXMemorySerializationClass)
  {
    Class v7 = VFXMemorySerializationClass;
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v14 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v5, (uint64_t)buf, &v14);
    uint64_t v9 = v14;
    if (v14 == a3)
    {
      if (v17)
      {
        int v10 = [(objc_class *)v7 readKeyframeAnimation:v19];
LABEL_11:
        if (*(void *)buf && v19) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      id v12 = *re::foundationCoreLogObjects(v8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v20 = 138412802;
        unint64_t v21 = v5;
        __int16 v22 = 2048;
        uint64_t v23 = a3;
        __int16 v24 = 2048;
        uint64_t v25 = v9;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v20, 0x20u);
      }
    }
    int v10 = 0;
    goto LABEL_11;
  }
  CFStringRef v11 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  int v10 = 0;
LABEL_14:

  return v10;
}

void REVFXSceneComponentSetParameterBool(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, char a3)
{
  id v5 = a2;
  char v9 = a3;
  char v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:1];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIbZ35REVFXSceneComponentSetParameterBoolE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c129_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIbZ35REVFXSceneComponentSetParameterBoolE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 1, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterInt(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v9 = a3;
  uint64_t v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:6];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIlZ34REVFXSceneComponentSetParameterIntE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c128_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIlZ34REVFXSceneComponentSetParameterIntE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 6, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterInt8(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, char a3)
{
  id v5 = a2;
  char v9 = a3;
  char v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:6];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIaZ35REVFXSceneComponentSetParameterInt8E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c129_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIaZ35REVFXSceneComponentSetParameterInt8E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 6, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterInt16(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __int16 a3)
{
  id v5 = a2;
  __int16 v9 = a3;
  __int16 v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:8];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIsZ36REVFXSceneComponentSetParameterInt16E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIsZ36REVFXSceneComponentSetParameterInt16E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 8, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterInt32(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, int a3)
{
  id v5 = a2;
  int v9 = a3;
  int v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:9];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIiZ36REVFXSceneComponentSetParameterInt32E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIiZ36REVFXSceneComponentSetParameterInt32E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 9, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterInt64(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v9 = a3;
  uint64_t v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:10];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIxZ36REVFXSceneComponentSetParameterInt64E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIxZ36REVFXSceneComponentSetParameterInt64E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 10, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterUInt8(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, char a3)
{
  id v5 = a2;
  char v9 = a3;
  char v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:2];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIhZ36REVFXSceneComponentSetParameterUInt8E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIhZ36REVFXSceneComponentSetParameterUInt8E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 2, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterUInt16(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __int16 a3)
{
  id v5 = a2;
  __int16 v9 = a3;
  __int16 v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:3];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueItZ37REVFXSceneComponentSetParameterUInt16E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueItZ37REVFXSceneComponentSetParameterUInt16E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 3, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterUInt32(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, int a3)
{
  id v5 = a2;
  int v9 = a3;
  int v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:4];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIjZ37REVFXSceneComponentSetParameterUInt32E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIjZ37REVFXSceneComponentSetParameterUInt32E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 4, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterUInt64(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v9 = a3;
  uint64_t v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:5];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIyZ37REVFXSceneComponentSetParameterUInt64E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIyZ37REVFXSceneComponentSetParameterUInt64E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 5, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float a3)
{
  id v5 = a2;
  float v9 = a3;
  float v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:12];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIfZ36REVFXSceneComponentSetParameterFloatE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIfZ36REVFXSceneComponentSetParameterFloatE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 12, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat2(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, double a3)
{
  id v5 = a2;
  double v9 = a3;
  double v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v5);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v7 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:13];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv2_fZ37REVFXSceneComponentSetParameterFloat2E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv2_fZ37REVFXSceneComponentSetParameterFloat2E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v5, 13, v7, buf);
  }
  else
  {
    int v8 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat3(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __n128 a3)
{
  int v4 = a2;
  __n128 v9 = a3;
  __n128 v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v4);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v6 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:14];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv3_fZ37REVFXSceneComponentSetParameterFloat3E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv3_fZ37REVFXSceneComponentSetParameterFloat3E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v4, 14, v6, buf);
  }
  else
  {
    int v7 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat4(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __n128 a3)
{
  int v4 = a2;
  __n128 v9 = a3;
  __n128 v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v4);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v6 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:15];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ37REVFXSceneComponentSetParameterFloat4E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ37REVFXSceneComponentSetParameterFloat4E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    CFErrorRef v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v4, 15, v6, buf);
  }
  else
  {
    int v7 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat3x3(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __n128 a3, __n128 a4, __n128 a5)
{
  v13[0] = a3;
  v13[1] = a4;
  double v13[2] = a5;
  int v6 = a2;
  v21[0] = a3;
  v21[1] = a4;
  void v21[2] = a5;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v6);
  Class v20 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v8 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:v21 type:16];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v15 = 3321888768;
    Class v16 = ___ZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float3x3Z39REVFXSceneComponentSetParameterFloat3x3E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    __n128 v17 = &__block_descriptor_48_a8_32c147_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float3x3Z39REVFXSceneComponentSetParameterFloat3x3E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    int v18 = v13;
    uint64_t v19 = &v20;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v6, 16, v8, buf);
  }
  else
  {
    __n128 v9 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

void REVFXSceneComponentSetParameterFloat4x4(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v15[0] = a3;
  v15[1] = a4;
  void v15[2] = a5;
  uint64_t v15[3] = a6;
  int v7 = a2;
  v23[0] = a3;
  v23[1] = a4;
  void v23[2] = a5;
  void v23[3] = a6;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v7);
  Class v22 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v9 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:v23 type:17];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v17 = 3321888768;
    int v18 = ___ZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float4x4Z39REVFXSceneComponentSetParameterFloat4x4E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    uint64_t v19 = &__block_descriptor_48_a8_32c147_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float4x4Z39REVFXSceneComponentSetParameterFloat4x4E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    Class v20 = v15;
    unint64_t v21 = &v22;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v7, 17, v9, buf);
  }
  else
  {
    int v10 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

float REVFXSceneComponentSetParameterDouble(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, double a3)
{
  float v3 = a3;
  REVFXSceneComponentSetParameterFloat(a1, a2, v3);
  return result;
}

void REVFXSceneComponentSetParameterDouble2(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float64x2_t a3)
{
}

void REVFXSceneComponentSetParameterDouble3(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float64x2_t *a3)
{
}

void REVFXSceneComponentSetParameterDouble4(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float64x2_t *a3)
{
}

void REVFXSceneComponentSetParameterDouble3x3(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float64x2_t *a3)
{
}

void REVFXSceneComponentSetParameterDouble4x4(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, float64x2_t *a3)
{
}

void REVFXSceneComponentSetParameterQuatF(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, __n128 a3)
{
  __n128 v9 = a3;
  int v4 = a2;
  __n128 v17 = a3;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v4);
  Class v16 = VFXMemorySerializationClass;
  if (VFXMemorySerializationClass)
  {
    int v6 = [(objc_class *)VFXMemorySerializationClass VFXSerializedBufferSize:&v17 type:15];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v11 = 3321888768;
    id v12 = ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ36REVFXSceneComponentSetParameterQuatFE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke;
    CFErrorRef v13 = &__block_descriptor_48_a8_32c134_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ36REVFXSceneComponentSetParameterQuatFE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE__e8_v16__0_8l;
    uint64_t v14 = &v9;
    uint64_t v15 = &v16;
    re::ecs2::VFXSceneComponent::setParameterValueCopy(a1, v4, 15, v6, buf);
  }
  else
  {
    int v7 = *re::foundationCoreLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }
}

__CFString *REVFXSceneComponentGetParameterString(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)CFErrorRef v13 = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)v13, &v12);
    uint64_t v7 = v12;
    if (v12)
    {
      int v8 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 0;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", buf, 0x20u);
      }
    }
    else if (v15)
    {
      __n128 v9 = [(objc_class *)v5 readString:v17];
      goto LABEL_11;
    }
    __n128 v9 = &stru_26E738380;
LABEL_11:
    if (*(void *)v13 && v17) {
      (*(void (**)(void))(**(void **)v13 + 40))();
    }
    goto LABEL_14;
  }
  int v10 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CFErrorRef v13 = 0;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v13, 2u);
  }
  __n128 v9 = &stru_26E738380;
LABEL_14:

  return v9;
}

uint64_t REVFXSceneComponentGetParameterBool(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 1)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readBool:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 1;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterInt(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 6)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readInt:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 6;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterInt8(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 7)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readInt8:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 7;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterInt16(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 7)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readInt8:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 7;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterInt32(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 9)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readInt32:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 9;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterInt64(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 10)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readInt64:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 10;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterUInt8(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 2)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readUInt8:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 2;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterUInt16(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 3)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readUInt16:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 3;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterUInt32(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 4)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readUInt32:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 4;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

uint64_t REVFXSceneComponentGetParameterUInt64(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v12 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v12);
    uint64_t v7 = v12;
    if (v12 == 5)
    {
      if (v15)
      {
        uint64_t v8 = [(objc_class *)v5 readUInt64:v17];
LABEL_11:
        if (*(void *)buf && v17) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        goto LABEL_14;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v18 = 138412802;
        uint64_t v19 = v3;
        __int16 v20 = 2048;
        uint64_t v21 = 5;
        __int16 v22 = 2048;
        uint64_t v23 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v18, 0x20u);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  __n128 v9 = *re::foundationCoreLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

float REVFXSceneComponentGetParameterFloat(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v13);
    uint64_t v7 = v13;
    if (v13 == 12)
    {
      if (v16)
      {
        [(objc_class *)v5 readFloat:v18];
        float v9 = v8;
      }
      else
      {
        float v9 = 0.0;
      }
    }
    else
    {
      uint64_t v11 = *re::foundationCoreLogObjects(v6);
      float v9 = 0.0;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 12;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v19, 0x20u);
      }
    }
    if (*(void *)buf && v18) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    int v10 = *re::foundationCoreLogObjects(0);
    float v9 = 0.0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }

  return v9;
}

double REVFXSceneComponentGetParameterFloat2(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v13);
    uint64_t v7 = v13;
    if (v13 == 13)
    {
      if (v16)
      {
        [(objc_class *)v5 readSIMD2F:v18];
        double v9 = v8;
      }
      else
      {
        double v9 = 0.0;
      }
    }
    else
    {
      uint64_t v11 = *re::foundationCoreLogObjects(v6);
      double v9 = 0.0;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 13;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v19, 0x20u);
      }
    }
    if (*(void *)buf && v18) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    int v10 = *re::foundationCoreLogObjects(0);
    double v9 = 0.0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }

  return v9;
}

__n128 REVFXSceneComponentGetParameterFloat3(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v13);
    uint64_t v7 = v13;
    if (v13 == 14)
    {
      if (v16) {
        [(objc_class *)v5 readSIMD3F:v18];
      }
      else {
        long long v8 = 0uLL;
      }
      long long v12 = v8;
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      long long v12 = 0u;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 14;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v19, 0x20u);
      }
    }
    if (*(void *)buf && v18) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    double v9 = *re::foundationCoreLogObjects(0);
    long long v12 = 0u;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }

  return (__n128)v12;
}

__n128 REVFXSceneComponentGetParameterFloat4(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v13);
    uint64_t v7 = v13;
    if (v13 == 15)
    {
      if (v16) {
        [(objc_class *)v5 readSIMD4F:v18];
      }
      else {
        long long v8 = 0uLL;
      }
      long long v12 = v8;
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      long long v12 = 0u;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 15;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v19, 0x20u);
      }
    }
    if (*(void *)buf && v18) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    double v9 = *re::foundationCoreLogObjects(0);
    long long v12 = 0u;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }

  return (__n128)v12;
}

__n128 REVFXSceneComponentGetParameterFloat3x3(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)uint64_t v14 = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)v14, &v13);
    uint64_t v7 = v13;
    if (v13 == 16)
    {
      if (v16)
      {
        [(objc_class *)v5 readSIMD3x3F:v18];
        long long v12 = v8;
      }
      else
      {
        long long v12 = xmmword_23435FD50;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      long long v12 = xmmword_23435FD50;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 16;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", buf, 0x20u);
      }
    }
    if (*(void *)v14 && v18) {
      (*(void (**)(void))(**(void **)v14 + 40))();
    }
  }
  else
  {
    double v9 = *re::foundationCoreLogObjects(0);
    long long v12 = xmmword_23435FD50;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v14, 2u);
    }
  }

  return (__n128)v12;
}

__n128 REVFXSceneComponentGetParameterFloat4x4(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)uint64_t v14 = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)v14, &v13);
    uint64_t v7 = v13;
    if (v13 == 17)
    {
      if (v16)
      {
        [(objc_class *)v5 readSIMD4x4F:v18];
        long long v12 = v8;
      }
      else
      {
        long long v12 = xmmword_23435FD50;
      }
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      long long v12 = xmmword_23435FD50;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 17;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", buf, 0x20u);
      }
    }
    if (*(void *)v14 && v18) {
      (*(void (**)(void))(**(void **)v14 + 40))();
    }
  }
  else
  {
    double v9 = *re::foundationCoreLogObjects(0);
    long long v12 = xmmword_23435FD50;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v14, 2u);
    }
  }

  return (__n128)v12;
}

double REVFXSceneComponentGetParameterDouble(uint64_t a1, void *a2)
{
  return REVFXSceneComponentGetParameterFloat(a1, a2);
}

double REVFXSceneComponentGetParameterDouble2(uint64_t a1, void *a2)
{
  *(void *)&double result = *(_OWORD *)&vcvtq_f64_f32(COERCE_FLOAT32X2_T(REVFXSceneComponentGetParameterFloat2(a1, a2)));
  return result;
}

float64x2_t REVFXSceneComponentGetParameterDouble3@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, float64x2_t *a3@<X8>)
{
  __n128 ParameterFloat3 = REVFXSceneComponentGetParameterFloat3(a1, a2);
  float64x2_t v5 = vcvtq_f64_f32((float32x2_t)ParameterFloat3.n128_u64[0]);
  float64x2_t result = vcvt_hight_f64_f32((float32x4_t)ParameterFloat3);
  *a3 = v5;
  a3[1] = result;
  return result;
}

float64x2_t REVFXSceneComponentGetParameterDouble4@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, float64x2_t *a3@<X8>)
{
  __n128 ParameterFloat4 = REVFXSceneComponentGetParameterFloat4(a1, a2);
  float64x2_t v5 = vcvtq_f64_f32((float32x2_t)ParameterFloat4.n128_u64[0]);
  float64x2_t result = vcvt_hight_f64_f32((float32x4_t)ParameterFloat4);
  *a3 = v5;
  a3[1] = result;
  return result;
}

float64x2_t REVFXSceneComponentGetParameterDouble3x3@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, float64x2_t *a3@<X8>)
{
  __n128 ParameterFloat3x3 = REVFXSceneComponentGetParameterFloat3x3(a1, a2);
  *a3 = vcvtq_f64_f32((float32x2_t)ParameterFloat3x3.n128_u64[0]);
  a3[1] = vcvt_hight_f64_f32((float32x4_t)ParameterFloat3x3);
  a3[2] = vcvtq_f64_f32(*(float32x2_t *)v5.f32);
  a3[3] = vcvt_hight_f64_f32(v5);
  float64x2_t result = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
  a3[4] = result;
  a3[5] = vcvt_hight_f64_f32(v6);
  return result;
}

float64x2_t REVFXSceneComponentGetParameterDouble4x4@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, float64x2_t *a3@<X8>)
{
  __n128 ParameterFloat4x4 = REVFXSceneComponentGetParameterFloat4x4(a1, a2);
  *a3 = vcvtq_f64_f32((float32x2_t)ParameterFloat4x4.n128_u64[0]);
  a3[1] = vcvt_hight_f64_f32((float32x4_t)ParameterFloat4x4);
  a3[2] = vcvtq_f64_f32(*(float32x2_t *)v5.f32);
  a3[3] = vcvt_hight_f64_f32(v5);
  a3[4] = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
  a3[5] = vcvt_hight_f64_f32(v6);
  float64x2_t result = vcvtq_f64_f32(*(float32x2_t *)v7.f32);
  a3[6] = result;
  a3[7] = vcvt_hight_f64_f32(v7);
  return result;
}

__n128 REVFXSceneComponentGetParameterQuatF(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v3 = a2;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass(v3);
  if (VFXMemorySerializationClass)
  {
    Class v5 = VFXMemorySerializationClass;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v13 = -1;
    *(void *)long long buf = 0;
    re::ecs2::VFXSceneComponent::getParameterValueCopy(a1, v3, (uint64_t)buf, &v13);
    uint64_t v7 = v13;
    if (v13 == 15)
    {
      if (v16) {
        [(objc_class *)v5 readSIMD4F:v18];
      }
      else {
        long long v8 = xmmword_23435FBB0;
      }
      long long v12 = v8;
    }
    else
    {
      int v10 = *re::foundationCoreLogObjects(v6);
      long long v12 = xmmword_23435FBB0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v19 = 138412802;
        __int16 v20 = v3;
        __int16 v21 = 2048;
        uint64_t v22 = 15;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "VFX type mismatch accessing binding %@ expected %zu found %zu", v19, 0x20u);
      }
    }
    if (*(void *)buf && v18) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    double v9 = *re::foundationCoreLogObjects(0);
    long long v12 = xmmword_23435FBB0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    }
  }

  return (__n128)v12;
}

double REVFXSceneComponentGetParameterSRT()
{
  return *(double *)&_PromotedConst_2;
}

uint64_t REVFXSceneComponentSetScale(uint64_t result, float a2)
{
  *(float *)(result + 356) = a2;
  return result;
}

float REVFXSceneComponentGetScale(uint64_t a1)
{
  return *(float *)(a1 + 356);
}

uint64_t REVFXSceneComponentStartCollidingOutsidePortal(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(void *)(result + 240) = *(void *)(a2 + 296);
  }
  return result;
}

uint64_t REVFXSceneComponentStopCollidingOutsidePortal(uint64_t result)
{
  *(void *)(result + 240) = 0;
  return result;
}

uint64_t REVFXSceneComponentSetPortalPaddingForCollisions(uint64_t result, double a2)
{
  *(double *)(result + 248) = a2;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP8NSStringZ37REVFXSceneComponentSetParameterStringE3__0EEvP11REComponentS2_lT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeString:**(void **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c143_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP8NSStringZ37REVFXSceneComponentSetParameterStringE3__0EEvP11REComponentS2_lT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP19CAKeyframeAnimationZ48REVFXSceneComponentSetParameterKeyframeAnimationE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeKeyframeAnimation:**(void **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c173_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIU8__strongP19CAKeyframeAnimationZ48REVFXSceneComponentSetParameterKeyframeAnimationE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIbZ35REVFXSceneComponentSetParameterBoolE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeBool:**(unsigned __int8 **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c129_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIbZ35REVFXSceneComponentSetParameterBoolE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIlZ34REVFXSceneComponentSetParameterIntE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeInt:**(void **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c128_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIlZ34REVFXSceneComponentSetParameterIntE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIaZ35REVFXSceneComponentSetParameterInt8E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeInt:**(char **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c129_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIaZ35REVFXSceneComponentSetParameterInt8E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIsZ36REVFXSceneComponentSetParameterInt16E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeInt16:**(__int16 **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIsZ36REVFXSceneComponentSetParameterInt16E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIiZ36REVFXSceneComponentSetParameterInt32E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeInt32:**(unsigned int **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIiZ36REVFXSceneComponentSetParameterInt32E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIxZ36REVFXSceneComponentSetParameterInt64E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeInt64:**(void **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIxZ36REVFXSceneComponentSetParameterInt64E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIhZ36REVFXSceneComponentSetParameterUInt8E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeUInt8:**(unsigned __int8 **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIhZ36REVFXSceneComponentSetParameterUInt8E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueItZ37REVFXSceneComponentSetParameterUInt16E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeUInt16:**(unsigned __int16 **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueItZ37REVFXSceneComponentSetParameterUInt16E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIjZ37REVFXSceneComponentSetParameterUInt32E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeUInt32:**(unsigned int **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIjZ37REVFXSceneComponentSetParameterUInt32E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIyZ37REVFXSceneComponentSetParameterUInt64E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeUInt64:**(void **)(a1 + 32) to:a2];
}

__n128 __copy_helper_block_a8_32c131_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIyZ37REVFXSceneComponentSetParameterUInt64E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIfZ36REVFXSceneComponentSetParameterFloatE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  LODWORD(a3) = **(_DWORD **)(a1 + 32);
  return [**(id **)(a1 + 40) writeFloat:a2 to:a3];
}

__n128 __copy_helper_block_a8_32c130_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIfZ36REVFXSceneComponentSetParameterFloatE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv2_fZ37REVFXSceneComponentSetParameterFloat2E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeSIMD2F:a2 to:**(double **)(a1 + 32)];
}

__n128 __copy_helper_block_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv2_fZ37REVFXSceneComponentSetParameterFloat2E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv3_fZ37REVFXSceneComponentSetParameterFloat3E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeSIMD3F:a2 to:**(double **)(a1 + 32)];
}

__n128 __copy_helper_block_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv3_fZ37REVFXSceneComponentSetParameterFloat3E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ37REVFXSceneComponentSetParameterFloat4E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeSIMD4F:a2 to:**(double **)(a1 + 32)];
}

__n128 __copy_helper_block_a8_32c135_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ37REVFXSceneComponentSetParameterFloat4E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float3x3Z39REVFXSceneComponentSetParameterFloat3x3E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(**(id **)(a1 + 40), "writeSIMD3x3F:to:", a2, **(double **)(a1 + 32), *(double *)(*(void *)(a1 + 32) + 16), *(double *)(*(void *)(a1 + 32) + 32));
}

__n128 __copy_helper_block_a8_32c147_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float3x3Z39REVFXSceneComponentSetParameterFloat3x3E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float4x4Z39REVFXSceneComponentSetParameterFloat4x4E3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(**(id **)(a1 + 40), "writeSIMD4x4F:to:", a2, **(double **)(a1 + 32), *(double *)(*(void *)(a1 + 32) + 16), *(double *)(*(void *)(a1 + 32) + 32), *(double *)(*(void *)(a1 + 32) + 48));
}

__n128 __copy_helper_block_a8_32c147_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueI13simd_float4x4Z39REVFXSceneComponentSetParameterFloat4x4E3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ36REVFXSceneComponentSetParameterQuatFE3__0EEvP11REComponentP8NSStringlT_OT0__block_invoke(uint64_t a1, uint64_t a2)
{
  return [**(id **)(a1 + 40) writeSIMD4F:a2 to:**(double **)(a1 + 32)];
}

__n128 __copy_helper_block_a8_32c134_ZTSKZN12_GLOBAL__N_120VFXSetParameterValueIDv4_fZ36REVFXSceneComponentSetParameterQuatFE3__0EEvP11REComponentP8NSStringlT_OT0_EUlPhE_(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void REStateRecorderSystemSetEnabled(uint64_t a1, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = *(void *)(v4 + 24);
  if (a2)
  {
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        double v9 = (void *)re::ecs2::EntityComponentCollection::operator[](v8, v6);
        uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))(*v9);
        {
          uint64_t v24 = v4;
          uint64_t v4 = v24;
          if (v11)
          {
            re::introspect<re::ecs2::StateRecorderSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_StateRecorderSystem(0);
            uint64_t v4 = v24;
          }
        }
        int v10 = re::introspect<re::ecs2::StateRecorderSystem>(void)::info;
        if ((_UNKNOWN *)v4 != re::introspect<re::ecs2::StateRecorderSystem>(void)::info && (v7 & 0x80000000) != 0)
        {
          {
            __int16 v23 = v10;
            uint64_t v25 = v4;
            int v10 = v23;
            uint64_t v4 = v25;
            if (v12)
            {
              re::introspect<re::ecs2::NetworkSendSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkSendSystem(0);
              int v10 = v23;
              uint64_t v4 = v25;
            }
          }
          if ((_UNKNOWN *)v4 == re::introspect<re::ecs2::NetworkSendSystem>(void)::info) {
            uint64_t v7 = v6;
          }
          else {
            uint64_t v7 = v7;
          }
        }
        if ((void *)v4 == v10) {
          break;
        }
        if (v5 == ++v6) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      uint64_t v7 = 0xFFFFFFFFLL;
LABEL_31:
      uint64_t v19 = re::globalAllocators((re *)v4);
      __int16 v20 = (re::ecs2::StateRecorderSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2]
                                                                                                  + 32))(v19[2], 312, 8);
      double v21 = re::ecs2::StateRecorderSystem::StateRecorderSystem(v20);
      uint64_t v27 = v22;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void, double))(*(void *)a1 + 48))(a1, &v27, v7, 0, v21);
      if (v27) {
    }
      }
  }
  else if ((int)v5 >= 1)
  {
    unint64_t v13 = *(void *)(v4 + 24) + 1;
    do
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      uint64_t v15 = (void *)re::ecs2::EntityComponentCollection::operator[](v14, (v13 - 2));
      uint64_t v16 = (void *)(*(uint64_t (**)(void))(*(void *)*v15 + 32))(*v15);
      {
        re::introspect<re::ecs2::StateRecorderSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_StateRecorderSystem(0);
      }
      if (v16 == re::introspect<re::ecs2::StateRecorderSystem>(void)::info)
      {
        uint64_t v17 = *v15;
        uint64_t v26 = v17;
        if (v17) {
          id v18 = (id)(v17 + 8);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 56))(a1, &v26, 0);
        if (v26)
        {

          uint64_t v26 = 0;
        }
      }
      --v13;
    }
    while (v13 > 1);
  }
}

void *RENetworkComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *RENetworkAssetComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RENetworkComponentGuid(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return RESyncableGetGuid();
  }
  return result;
}

uint64_t RENetworkComponentIsAuthoritative(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return RESyncableIsAuthoritative();
  }
  else {
    return 1;
  }
}

uint64_t RENetworkComponentIsPendingLockRequest()
{
  return 0;
}

uint64_t RENetworkComponentOwnerPeerID(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return RESyncableGetOwnerPeerID();
  }
  return result;
}

BOOL RENetworkComponentHasOwnership(uint64_t a1)
{
  return !*(void *)(a1 + 32) || RESyncableGetOwnerPeerID() == 0;
}

uint64_t RENetworkComponentIsOwnershipLocked(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return RESyncableIsLocked();
  }
  else {
    return *(unsigned __int8 *)(a1 + 51) != 1;
  }
}

uint64_t RENetworkComponentRequestLockEntity(re::ecs2::NetworkComponent *a1)
{
  return 1;
}

re::ecs2::NetworkComponent *RENetworkComponentRequestOwnership(re::ecs2::NetworkComponent *a1, BOOL a2, const void *a3)
{
  return re::ecs2::NetworkComponent::requestOwnership(a1, a2, a3, 15.0);
}

BOOL RENetworkComponentUnlockEntity(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    RESyncableSetLocked();
    return !*(void *)(a1 + 32) || RESyncableGetOwnerPeerID() == 0;
  }
  else
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 51) = 1;
  }
  return result;
}

BOOL RENetworkComponentLockEntity(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 1;
    RESyncableSetLocked();
    if (*(void *)(a1 + 32)) {
      return RESyncableGetOwnerPeerID() == 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 51) = 0;
    return 1;
  }
  return v2;
}

uint64_t RENetworkComponentShouldAlwaysMigrate(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return MEMORY[0x270F59730]();
  }
  else {
    return *(unsigned __int8 *)(a1 + 52);
  }
}

BOOL RENetworkComponentSetAlwaysMigrate(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 32))
  {
    RESyncableSetMigrateWhenAbandoned();
    if (*(void *)(a1 + 32)) {
      return RESyncableGetOwnerPeerID() == 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 52) = a2;
  }
  return 1;
}

uint64_t RENetworkComponentNetworkShareMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 560);
}

uint64_t RENetworkComponentIsHosted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 617);
}

re::ecs2::NetworkComponent *RENetworkMarkComponentDirty(const re::ecs2::Component *a1)
{
  re::ecs2::Component::markDirty(a1);
  uint64_t v2 = *((void *)a1 + 2);
  if (!v2) {
    return 0;
  }
  BOOL result = *(re::ecs2::NetworkComponent **)(v2 + 200);
  if (result)
  {
    re::ecs2::NetworkComponent::markDirty(result, a1);
    return (re::ecs2::NetworkComponent *)1;
  }
  return result;
}

uint64_t RENetworkIsComponentDirty(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 200);
  if (!v2) {
    return 0;
  }
  float v3 = (re::ecs2::NetworkComponentInfo *)(v2 + 112);
  uint64_t v4 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(void *))(*a1 + 40))(a1);
  return re::ecs2::NetworkComponentInfo::isDirty(v3, v4, 3);
}

uint64_t RENetworkComponentSetSuppressMarkDirty(uint64_t result, char a2)
{
  *(unsigned char *)(result + 49) = a2;
  return result;
}

uint64_t RENetworkComponentIsSuppressingMarkDirty(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

BOOL RENetworkMarkEntityMetadataDirty(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 200);
  if (v1) {
    re::ecs2::NetworkComponent::markEntityDirty(*(re::ecs2::NetworkComponent **)(a1 + 200), (re::ecs2::NetworkComponent *)0xFF);
  }
  return v1 != 0;
}

BOOL RENetworkMarkEntityDirty(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 200);
  if (v1) {
    re::ecs2::NetworkComponent::markEntityDirty(*(re::ecs2::NetworkComponent **)(a1 + 200), (re::ecs2::NetworkComponent *)0xFF);
  }
  return v1 != 0;
}

BOOL RENetworkComponentBelongsToSession(uint64_t a1)
{
  if (!*(void *)(a1 + 32) || !RESyncableGetOwnerPeerID()) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 32) ? RESyncableGetOwnerPeerID() : 0;
  if (v2 == RESyncNetSessionPeerID()) {
    return 1;
  }
  if (*(void *)(a1 + 32)) {
    RESyncableGetFromPeerID();
  }
  if (RESyncNetSessionGetParticipantWithPeerID()) {
    return 1;
  }
  if (*(void *)(a1 + 32)) {
    RESyncableGetOwnerPeerID();
  }
  return RESyncNetSessionGetParticipantWithPeerID() != 0;
}

uint64_t RENetworkComponentSetAccessList(uint64_t a1, uint64_t a2)
{
  return re::ecs2::NetworkComponent::setAccessControl(a1, (uint64_t *)(a2 + 24));
}

uint64_t RENetworkComponentCopyAccessList(uint64_t a1)
{
  re::make::shared::object<re::Shareable<re::ecs2::SyncAccessControl>>((re *)&v4);
  uint64_t v2 = v4;
  *(_DWORD *)(v4 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a1 + 568);
  re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(v2 + 32, (uint64_t *)(a1 + 576));
  return v2;
}

uint64_t RENetAccessListCreate()
{
  re::make::shared::object<re::Shareable<re::ecs2::SyncAccessControl>>((re *)&v1);
  return v1;
}

uint64_t RENetAccessListCopy(uint64_t a1)
{
  re::make::shared::object<re::Shareable<re::ecs2::SyncAccessControl>>((re *)&v4);
  uint64_t v2 = v4;
  *(_DWORD *)(v4 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(v2 + 32, (uint64_t *)(a1 + 32));
  return v2;
}

BOOL RENetAccessListIsEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator==(a1 + 32, a2 + 32);
}

uint64_t RENetAccessListClear(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v2, 0, sizeof(v2));
  int v3 = 0;
  *(_DWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(a1 + 32, (uint64_t)v2);
  uint64_t result = v2[0];
  if (v2[0])
  {
    if (v4) {
      return (*(uint64_t (**)(void))(*(void *)v2[0] + 40))(v2[0]);
    }
  }
  return result;
}

uint64_t RENetAccessListGetCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

BOOL RENetAccessListGetEntryAt(uint64_t a1, unint64_t a2, void *a3, unsigned char *a4)
{
  unint64_t v4 = *(void *)(a1 + 48);
  if (v4 > a2)
  {
    uint64_t v5 = *(void *)(a1 + 64) + 16 * a2;
    *a3 = *(void *)v5;
    *a4 = *(_DWORD *)(v5 + 8);
  }
  return v4 > a2;
}

void RENetAccessListAddEntry(uint64_t a1, unint64_t a2, unsigned __int32 a3)
{
}

BOOL RENetAccessListRemoveEntry(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  int v5 = a3;
  return re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable((void *)(a1 + 32), (uint64_t)&v4);
}

uint64_t RENetAccessListSetDefaultPolicy(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t RENetAccessListGetDefaultPolicy(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t RENetEnumerateTLEsLinkedForSharing(void *a1, uint64_t a2)
{
  uint64_t result = 0;
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    int v5 = a1;
    do
    {
      unint64_t v6 = v5;
      int v5 = (void *)v5[3];
    }
    while (v5);
    uint64_t v7 = *(void *)(v6[2] + 56);
    if (v7 && (uint64_t v8 = a1[25]) != 0)
    {
      if (*(void *)(v8 + 32)) {
        uint64_t OwnerPeerID = RESyncableGetOwnerPeerID();
      }
      else {
        uint64_t OwnerPeerID = 0;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104))(v7);
      uint64_t v11 = *(void *)(v10 + 24);
      if (v11)
      {
        int v12 = *(uint64_t **)(v10 + 40);
        unint64_t v13 = &v12[v11];
        uint64_t v14 = &qword_268772000;
        __int16 v32 = v13;
        while (1)
        {
          uint64_t v15 = *v12;
          if (*v12) {
            id v16 = (id)(v15 + 8);
          }
          uint64_t v17 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v15 + 200), (const re::ecs2::ComponentTypeBase *)v14[430]);
          if (v17)
          {
            uint64_t v18 = *(void *)(v17 + 24);
            if (v18) {
              break;
            }
          }
          int v29 = 0;
          if (v15) {
            goto LABEL_33;
          }
LABEL_34:
          if (++v12 == v13) {
            int v30 = 1;
          }
          else {
            int v30 = v29;
          }
          if (v30 == 1) {
            return 1;
          }
        }
        uint64_t v19 = *(void *)(v17 + 40);
        uint64_t v20 = 8 * v18;
        while (1)
        {
          double v21 = *(void **)(*(void *)v19 + 16);
          if (v21 != a1)
          {
            uint64_t v22 = v21[3];
            if (!v22 || (*(unsigned char *)(v22 + 288) & 0x80) != 0)
            {
              uint64_t v23 = v21[25];
              if (v23)
              {
                uint64_t v24 = *(re **)(v23 + 32);
                if (v24) {
                  uint64_t v24 = (re *)RESyncableGetOwnerPeerID();
                }
                if (v24 == (re *)OwnerPeerID)
                {
                  uint64_t v25 = *re::ecsComponentsLogObjects(v24);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v26 = v25;
                    uint64_t v27 = v21[35];
                    *(_DWORD *)long long buf = 136315138;
                    uint64_t v34 = v27;
                    _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Found LinkedTLE Entity:%s for sharing.", buf, 0xCu);
                  }
                  uint64_t v28 = (re *)(*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v21);
                  if ((v28 & 1) == 0) {
                    break;
                  }
                }
              }
            }
          }
          v19 += 8;
          v20 -= 8;
          if (!v20)
          {
            int v29 = 0;
            goto LABEL_30;
          }
        }
        unint64_t v31 = *re::ecsComponentsLogObjects(v28);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "Early out, stopped enumerating LinkedTLE Entities, as callback returned false.", buf, 2u);
        }
        int v29 = 1;
LABEL_30:
        unint64_t v13 = v32;
        uint64_t v14 = &qword_268772000;
        if (!v15) {
          goto LABEL_34;
        }
LABEL_33:

        goto LABEL_34;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RENetGetEntityFromSyncObject(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (RESyncableGetTypeId())
    {
      return 0;
    }
    else
    {
      re::ecs2::NetworkComponent::getEntityBoundTo(v1, &v3);
      uint64_t v1 = v3;
      if (v3) {
    }
      }
  }
  return v1;
}

double REIntrospectedNetworkTypeUnregisterSwiftComponents()
{
}

void re::make::shared::object<re::Shareable<re::ecs2::SyncAccessControl>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 72, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E737338;
  *(_DWORD *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)a1 = v3;
}

void *re::Shareable<re::ecs2::SyncAccessControl>::~Shareable(void *a1)
{
  *a1 = &unk_26E737338;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::ecs2::SyncAccessControl>::~Shareable(void *a1)
{
  *a1 = &unk_26E737338;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t REStateCommandFactoryGetCommandCount()
{
  return 4;
}

uint64_t REStateCommandFactoryGetCommandName(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return kCommands[2 * a1 + 1];
  }
}

uint64_t REStateCommandFactoryCreateCommand(_anonymous_namespace_ *a1, const StringID *a2)
{
  uint64_t StateCommand = 0;
  if (a1 && a2)
  {
    v7[0] = 0;
    v7[1] = "";
    uint64_t StateCommand = re::ecs2::StateCommandFactoryECS::createStateCommand((re::ecs2::StateCommandFactoryECS *)v7, a2 + 17, v5);
    re::StringID::destroyString((re::StringID *)v7);
  }
  return StateCommand;
}

void REStateCommandSetParameterInt(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, uint64_t))(*(void *)a1 + 56))(a1, v6, a3);
  re::StringID::destroyString((re::StringID *)v6);
}

void REStateCommandSetParameterFloat(_anonymous_namespace_ *a1, const char *a2, float a3)
{
  v6[0] = 0;
  v6[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, float))(*(void *)a1 + 64))(a1, v6, a3);
  re::StringID::destroyString((re::StringID *)v6);
}

void REStateCommandSetParameterDouble(_anonymous_namespace_ *a1, const char *a2, double a3)
{
  v6[0] = 0;
  v6[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, double))(*(void *)a1 + 72))(a1, v6, a3);
  re::StringID::destroyString((re::StringID *)v6);
}

void REStateCommandSetParameterBool(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, uint64_t))(*(void *)a1 + 80))(a1, v6, a3);
  re::StringID::destroyString((re::StringID *)v6);
}

void REStateCommandSetParameterString(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  v8[0] = 0;
  v8[1] = "";
  v7[0] = 0;
  v7[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, void *))(*(void *)a1 + 88))(a1, v8, v7);
  re::StringID::destroyString((re::StringID *)v7);
  re::StringID::destroyString((re::StringID *)v8);
}

uint64_t REStateCommandGetParameterInt(_anonymous_namespace_ *a1, const char *a2)
{
  v5[0] = 0;
  v5[1] = "";
  uint64_t v6 = 0;
  (*(void (**)(_anonymous_namespace_ *, void *, uint64_t *))(*(void *)a1 + 96))(a1, v5, &v6);
  re::StringID::destroyString((re::StringID *)v5);
  return v6;
}

float REStateCommandGetParameterFloat(_anonymous_namespace_ *a1, const char *a2)
{
  float v6 = 0.0;
  v5[0] = 0;
  v5[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, float *))(*(void *)a1 + 104))(a1, v5, &v6);
  re::StringID::destroyString((re::StringID *)v5);
  return v6;
}

double REStateCommandGetParameterDouble(_anonymous_namespace_ *a1, const char *a2)
{
  v5[0] = 0;
  v5[1] = "";
  double v6 = 0.0;
  (*(void (**)(_anonymous_namespace_ *, void *, double *))(*(void *)a1 + 112))(a1, v5, &v6);
  re::StringID::destroyString((re::StringID *)v5);
  return v6;
}

uint64_t REStateCommandGetParameterBool(_anonymous_namespace_ *a1, const char *a2)
{
  unsigned __int8 v6 = 0;
  v5[0] = 0;
  v5[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, unsigned __int8 *))(*(void *)a1 + 120))(a1, v5, &v6);
  re::StringID::destroyString((re::StringID *)v5);
  return v6;
}

CFTypeRef REStateCommandGetParameterString(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  cStr = "";
  v7[0] = 0;
  v7[1] = "";
  (*(void (**)(_anonymous_namespace_ *, void *, uint64_t *))(*(void *)a1 + 128))(a1, v7, &v8);
  re::StringID::destroyString((re::StringID *)v7);
  CFStringRef v4 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFTypeRef v5 = CFAutorelease(v4);
  re::StringID::destroyString((re::StringID *)&v8);
  return v5;
}

void *REInputTargetComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REInputTargetComponentSetAllowsDirectInput(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(result + 25) = v2;
  return result;
}

uint64_t REInputTargetComponentSetAllowsIndirectInput(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(result + 26) = v2;
  return result;
}

uint64_t REInputTargetComponentGetAllowsDirectInput(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 25);
}

uint64_t REInputTargetComponentGetAllowsIndirectInput(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 26);
}

uint64_t REInputTargetComponentSetEnabled(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(unsigned char *)(result + 27) = v2;
  return result;
}

uint64_t REInputTargetComponentIsEnabled(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 27);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *((void *)v3[281] + 4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void RETextComponentSetCanvasSize(re::ecs2::TextComponent *a1, CGFloat a2, CGFloat a3)
{
  v3.width = a2;
  v3.height = a3;
  re::ecs2::TextComponent::setSize(a1, &v3);
}

void RETextComponentSetSize(re::ecs2::TextComponent *a1, CGFloat a2, CGFloat a3)
{
  v3.width = a2;
  v3.height = a3;
  re::ecs2::TextComponent::setSize(a1, &v3);
}

double RETextComponentGetCanvasSize(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

double RETextComponentGetSize(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void *RETextComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RETextComponentGetAttributedString(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t RETextComponentGetBackgroundColor(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

float *RETextComponentSetCornerRadius(float *this, float a2)
{
  CGSize v3 = this;
  if (this[24] != a2) {
    this = (float *)re::ecs2::Component::markDirty(this);
  }
  unsigned char v3[24] = a2;
  return this;
}

float RETextComponentGetCornerRadius(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

float *RETextComponentSetEdgeInsets(float *result, float a2, float a3, float a4, float a5)
{
  result[25] = a2;
  result[26] = a3;
  result[27] = a4;
  result[28] = a5;
  return result;
}

void RETextComponentSetRenderBlock(uint64_t a1, void *aBlock)
{
  CGSize v3 = _Block_copy(aBlock);
  CFStringRef v4 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v3;
}

void REBodyPoseEstimationRigCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *const *a6)
{
}

void anonymous namespace'::createBodyPoseEstimationRig(_anonymous_namespace_ *this, unint64_t a2, const char *const *a3, BOOL a4, uint64_t a5, const char *const *a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = *MEMORY[0x263EF8340];
  operator new();
}

REBodyPoseEstimationRig *REBodyPoseEstimationRigDestroy(REBodyPoseEstimationRig *result)
{
  if (result)
  {
    REBodyPoseEstimationRig::~REBodyPoseEstimationRig(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t REBodyPoseEstimationRigInputJointCount()
{
  return 17;
}

uint64_t REBodyPoseEstimationRigInputJointCountForRig(uint64_t a1)
{
  return *(void *)(a1 + 3000);
}

char *REBodyPoseEstimationRigInputJointName(unint64_t a1)
{
  if (a1 > 0x10) {
    return 0;
  }
  else {
}
  }

uint64_t REBodyPoseEstimationRigInputJointNameForRig(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 3000) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 3008) + 8 * a2);
  }
}

uint64_t REBodyPoseEstimationRigOutputJointCount()
{
  return 93;
}

uint64_t REBodyPoseEstimationRigOutputJointCountForRig(uint64_t a1)
{
  return *(void *)(a1 + 3024);
}

char *REBodyPoseEstimationRigOutputJointName(unint64_t a1)
{
  if (a1 > 0x5C) {
    return 0;
  }
  else {
}
  }

uint64_t REBodyPoseEstimationRigOutputJointNameForRig(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 3024) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 3032) + 8 * a2);
  }
}

unint64_t *REBodyPoseEstimationRigParentJointName(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)&long long v7 = a2;
  uint64_t result = (unint64_t *)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet(a1 + 1200, (char **)&v7);
  if (result)
  {
    unint64_t v4 = *(void *)(a1 + 1072);
    if (v4 <= *result)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v7 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v5 = *(void *)(a1 + 1088);
    unint64_t v6 = *(void *)(v5 + 56 * *result + 32);
    if (v6 != -1)
    {
      if (v4 > v6) {
        return *(unint64_t **)(v5 + 56 * v6 + 8);
      }
LABEL_9:
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v7 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return 0;
  }
  return result;
}

void REBodyPoseEstimationRigInitialJointTransform(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)&long long v12 = a2;
  CGSize v3 = (uint64_t *)re::HashTable<char const*,unsigned long,re::RigEvaluation::HashString,re::RigEvaluation::EqualString,true,false>::tryGet((uint64_t)(a1 + 150), (char **)&v12);
  if (v3)
  {
    uint64_t v5 = *v3;
    if (a1[134] <= (unint64_t)*v3)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_11:
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = a1[136];
    int v7 = *(unsigned __int8 *)(v6 + 56 * v5 + 16);
    if (v7 == 1)
    {
      unint64_t v9 = *(void *)(v6 + 56 * v5 + 24);
      if (a1[114] <= v9) {
        goto LABEL_12;
      }
      uint64_t v10 = a1[116] + (v9 << 6);
      int v11 = *(unsigned __int8 *)(v10 + 48);
      long long v12 = xmmword_23435FBB0;
      re::convertIntrinsicEulersToQuaternions<float>(v10 + 16, 1, v11, (uint64_t)&v12, 1);
    }
    else
    {
      if (v7 == 2)
      {
        unint64_t v8 = *(void *)(v6 + 56 * v5 + 24);
        if (a1[119] > v8)
        {
          re::calculateNodeSRT((float32x4_t *)(a1[121] + 96 * v8), (float32x4_t *)&v12);
          return;
        }
        goto LABEL_11;
      }
      re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) Unexpected node type: %u.", "!\"Unreachable code\"", "REBodyPoseEstimationRigInitialJointTransform", 370, *(unsigned __int8 *)(v6 + 56 * v5 + 16));
      _os_crash();
      __break(1u);
    }
  }
}

void REBodyPoseEstimationRigCalculateModelSpaceJoints(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  v4[559] = *MEMORY[0x263EF8340];
  REBodyPoseEstimationRigCalculateJoints(v1, v2, (unint64_t)v4, v3);
}

void REBodyPoseEstimationRigCalculateJoints(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (a1[342] == 17 && a1[369] == 186 && a1[363] == 93 && a1[360] == 93)
  {
    for (unint64_t i = 0; i != 17; ++i)
    {
      unint64_t v9 = a1[342];
      if (v9 <= i)
      {
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v36 = 136315906;
        long long v37 = "operator[]";
        __int16 v38 = 1024;
        int v39 = 468;
        __int16 v40 = 2048;
        unint64_t v41 = i;
        __int16 v42 = 2048;
        unint64_t v43 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_20;
      }
      *(_OWORD *)(a1[343] + 16 * i) = *(_OWORD *)(a2 + 16 * i);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v19 = 0u;
    re::EvaluationContextSlices::init((re::EvaluationContextSlices *)buf, (re::EvaluationContext *)(a1 + 320));
    (*(void (**)(void *, uint8_t *))(a1[222] + 16))(a1 + 222, buf);
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t i = 0;
    for (unint64_t j = (_OWORD *)(a3 + 16); ; j += 3)
    {
      a3 = a1[369];
      if (a3 <= v9) {
        break;
      }
      *(j - 1) = *(_OWORD *)(a1[370] + 16 * v9);
      a3 = a1[363];
      if (a3 <= i) {
        goto LABEL_21;
      }
      *unint64_t j = *(_OWORD *)(a1[364] + 8 * v9);
      unint64_t v4 = v9 + 1;
      a3 = a1[369];
      if (a3 <= v9 + 1) {
        goto LABEL_22;
      }
      j[1] = *(_OWORD *)(a1[370] + 16 * v9 + 16);
      a3 = a1[360];
      if (a3 <= i) {
        goto LABEL_23;
      }
      long long v12 = (long long *)(a1[361] + v10);
      long long v13 = (_OWORD *)(a4 + v10);
      long long v14 = *v12;
      long long v15 = v12[1];
      long long v16 = v12[3];
      double v13[2] = v12[2];
      _OWORD v13[3] = v16;
      *long long v13 = v14;
      v13[1] = v15;
      ++i;
      v10 += 64;
      v9 += 2;
      if (v9 == 186) {
        return;
      }
    }
LABEL_20:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    long long v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 468;
    __int16 v40 = 2048;
    unint64_t v41 = v9;
    __int16 v42 = 2048;
    unint64_t v43 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    long long v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 468;
    __int16 v40 = 2048;
    unint64_t v41 = i;
    __int16 v42 = 2048;
    unint64_t v43 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    long long v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 468;
    __int16 v40 = 2048;
    unint64_t v41 = v4;
    __int16 v42 = 2048;
    unint64_t v43 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    long long v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 468;
    __int16 v40 = 2048;
    unint64_t v41 = i;
    __int16 v42 = 2048;
    unint64_t v43 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_24:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v17 = (id)CoreRELog::log;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Body Pose Estimation Error - The rig has not been properly constructed.", buf, 2u);
  }
}

void REBodyPoseEstimationRigCalculateLocalSpaceJoints(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  v4[745] = *MEMORY[0x263EF8340];
  REBodyPoseEstimationRigCalculateJoints(v1, v2, v3, (uint64_t)v4);
}

void REBodyPoseEstimationRig::~REBodyPoseEstimationRig(REBodyPoseEstimationRig *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 377);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 374);
  re::EvaluationContext::~EvaluationContext((REBodyPoseEstimationRig *)((char *)this + 2560));
  re::EvaluationModelSingleThread::~EvaluationModelSingleThread((REBodyPoseEstimationRig *)((char *)this + 1776));
  re::RigGraphCompilation::~RigGraphCompilation((REBodyPoseEstimationRig *)((char *)this + 1640));
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 202);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 199);
  std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 194);
  re::DynamicArray<re::internal::RigIKCall>::deinit((uint64_t)this + 1512);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 186);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 183);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 180);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 177);
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 174);
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 171);
  re::FixedArray<re::internal::RigIKCall>::deinit((void *)this + 168);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 165);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 162);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 156);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 150);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 147);
  re::RigDefinition::~RigDefinition((REBodyPoseEstimationRig *)((char *)this + 32));
  re::Allocator::~Allocator(this);
}

void RETraceDirectCollectorCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 152, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E737380;
  *(_OWORD *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(unsigned char *)(v2 + 32) = 1;
  *(void *)(v2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = &unk_26E721B48;
  *(void *)(v2 + 40) = &unk_26E721A28;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  re::TraceHistory::TraceHistory((re::TraceHistory *)(v2 + 104));
}

void RETraceDirectCollectorStartCollecting(uint64_t a1, uint64_t a2)
{
}

uint64_t RETraceDirectCollectorSaveToFile(uint64_t a1, const char *a2)
{
  return re::TraceDirectCollector::saveToFile((re::TraceDirectCollector *)(a1 + 24), a2);
}

uint64_t RETraceDirectCollectorStopCollecting(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 64))(result, a1 + 24);
    *(void *)(a1 + 96) = 0;
  }
  return result;
}

void *re::Shareable<re::TraceDirectCollector>::~Shareable(void *a1)
{
  *a1 = &unk_26E737380;
  re::TraceDirectCollector::~TraceDirectCollector((re::TraceDirectCollector *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::TraceDirectCollector>::~Shareable(void *a1)
{
  *a1 = &unk_26E737380;
  re::TraceDirectCollector::~TraceDirectCollector((re::TraceDirectCollector *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *RESceneSpaceRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 RESceneSpaceRootComponentGetSceneToImmersiveTransform(__n128 *a1)
{
  return a1[2];
}

_OWORD *RESceneSpaceRootComponentSetSceneToImmersiveTransform(_OWORD *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  uint64_t v6[3] = a5;
  return re::ecs2::SceneSpaceRootComponent::setSceneToImmersiveTransform(a1, v6);
}

uint64_t RESceneSpaceRootComponentGetIsSelfInImmersiveSpace(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t RESceneSpaceRootComponentSetIsSelfInImmersiveSpace(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 96) != a2) {
    *(unsigned char *)(result + 96) = a2;
  }
  return result;
}

uint64_t RESceneSpaceRootComponentGetIsImmersiveSpaceOpen(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t RESceneSpaceRootComponentSetIsImmersiveSpaceOpen(uint64_t result, char a2)
{
  *(unsigned char *)(result + 97) = a2;
  return result;
}

uint64_t RESceneSpaceRootComponentFindComponentInHierarchy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    while (1)
    {
      uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (result) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 24);
      if (!v1 || (*(unsigned char *)(v1 + 288) & 0x80) != 0) {
        return 0;
      }
    }
  }
  return result;
}

void *RELightGroupComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id RERetain(uint64_t a1)
{
  return (id)(a1 + 8);
}

void RERelease(uint64_t a1)
{
}

uint64_t REGetRetainCount(uint64_t a1)
{
  return [(id)(a1 + 8) retainCount];
}

uint64_t _REStartupCount()
{
}

uint64_t REMemoryTraceEnableDebugLeakAssertion(char a1)
{
  uint64_t v1 = re::internal::MemoryTrace::debugLeakAssertion;
  re::internal::MemoryTrace::debugLeakAssertion = a1;
  return v1;
}

uint64_t REIsRSCompatible()
{
  return 0;
}

id REGetCoreREBundle()
{
  re::Bundle::coreREFramework(&v2);
  id v0 = v2;

  return v0;
}

uint64_t (***REAudioServiceStartAudioEngine(uint64_t (***result)(void)))(void)
{
  if (result) {
    return (uint64_t (***)(void))(**result)(result);
  }
  return result;
}

uint64_t REAudioServiceStopAudioEngine(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t REAudioEngineReady(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

void REAudioRegisterForPHASESoundEventMixerCreation(const void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      objc_initWeak(&location, v3);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      void v8[2] = __REAudioRegisterForPHASESoundEventMixerCreation_block_invoke;
      id v8[3] = &unk_264BEA238;
      objc_copyWeak(&v9, &location);
      uint64_t v6 = _Block_copy(v8);
      int v7 = (void *)v5[64];
      v5[64] = v6;

      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
  }
}

void __REAudioRegisterForPHASESoundEventMixerCreation_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v9);

  if (WeakRetained)
  {
    id v11 = objc_loadWeakRetained(v9);
    [v11 phaseEngine:v12 didCreatePhaseSoundEventWithMixer:v7 mixGroupName:v8];
  }
}

id REAudioServiceGetPhaseEngine(void *a1)
{
  if (a1)
  {
    a1 = (*(void (**)(void *))(*(void *)a1 + 128))(a1);
    uint64_t v1 = vars8;
  }
  return a1;
}

id REAudioServiceGetPhaseObjectForToken(void *a1)
{
  if (a1)
  {
    a1 = (*(void (**)(void *))(*(void *)a1 + 168))(a1);
    uint64_t v1 = vars8;
  }
  return a1;
}

os_unfair_lock_s *REAudioServiceGetPhaseGroups(os_unfair_lock_s *a1)
{
  if (a1)
  {
    if (a1)
    {
      re::AudioManager_PHASE::getPHASEGroups(a1);
      a1 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

re::AudioManager_PHASE_Async **REAudioServiceGetPhaseOccluderForSceneAndEntity(re::AudioManager_PHASE_Async **a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    if (a1)
    {
      re::AudioManager_PHASE_Async::getPHASEOccluderForSceneAndEntity(a1[65], a2, a3);
      a1 = (re::AudioManager_PHASE_Async **)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v3 = vars8;
  }
  return a1;
}

id REAudioServiceCreateSamplerDefinitionForToken(void *a1)
{
  if (a1)
  {
    a1 = (*(void (**)(void *))(*(void *)a1 + 136))(a1);
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t REAudioServiceGetAudioEngineStartCount(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

id REAudioServiceInsertPostProcessingEffect(void *a1)
{
  if (a1)
  {
    a1 = (*(void (**)(void *))(*(void *)a1 + 472))(a1);
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t REAudioServiceSetExternalSourceControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 504))();
  }
  return result;
}

uint64_t REAudioServiceGetExternalSourceControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 496))();
  }
  return result;
}

uint64_t REAudioServiceSetSTSControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 512))();
  }
  return result;
}

uint64_t REAudioServiceGetSTSControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 520))();
  }
  return result;
}

uint64_t REAudioServiceSetSTSObjects(const void *a1, const void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v8 = v5;
    if (v6) {
      re::AudioManager::setSTSObjects((uint64_t)v6, a2, v8);
    }
  }
  return MEMORY[0x270F9A790]();
}

uint64_t REAudioServiceJoinPlaybackHostingServiceAtEndpoint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 696))();
}

uint64_t REAudioServiceCopyEndpointForPlaybackHostingService(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 704))();
}

uint64_t REAudioServiceShouldLoadFileAssetsByAbsolutePath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 712))();
}

uint64_t REAudioServiceHandlesPlaybackForFileAndBufferResources(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 544))();
}

void REAudioServiceForceOutputType(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 3)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)a1 + 632);
    v3();
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109376;
      v4[1] = 0;
      __int16 v5 = 1024;
      int v6 = 2;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "The provided output type is invalid, please choose in the range of %ul and %ul", (uint8_t *)v4, 0xEu);
    }
  }
}

uint64_t REAudioServiceCurrentOutputType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 640))();
}

uint64_t REAudioServiceSetCustomHRIR(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 648))();
}

uint64_t REAudioServiceTriggerReset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t REAudioServiceSetRequiresAudioSessionForPlayback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 736))();
}

uint64_t REAudioServiceGetRequiresAudioSessionForPlayback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 744))();
}

uint64_t REAudioServiceAddAudioEngineRunnableReason(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 816))();
}

uint64_t REAudioServiceRemoveAudioEngineRunnableReason(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 824))();
}

uint64_t REAudioServiceSetSpaceBlendTargetPresetOrientation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 832))();
}

void *REAdaptiveResolutionComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REAdaptiveResolutionStateComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

float REAdaptiveResolutionStateComponentGetPixelsPerMeter(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REAdaptiveResolutionStateComponentSetPixelsPerMeter(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

void *REImageBasedReflectionReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REImageBasedReflectionReceiverComponentAddVideoAttachment(uint64_t a1, id a2, const char *a3)
{
  __int16 v5 = (_anonymous_namespace_ *)[a2 UTF8String];
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  v8[0] = 0;
  v8[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 32), &v7);
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REImageBasedReflectionReceiverComponentRemoveVideoAttachment(uint64_t a1, id a2, const char *a3)
{
  __int16 v5 = (_anonymous_namespace_ *)[a2 UTF8String];
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  v8[0] = 0;
  v8[1] = "";
  if (re::DynamicArray<re::ecs2::VideoMaterialAttachment>::remove(a1 + 32, &v7)) {
    re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 72), &v7);
  }
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

void re::internal::GeomMeshCollection::~GeomMeshCollection(re::internal::GeomMeshCollection *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*(void *)v3) {

      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + 2) = 0;
  int v5 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v5;
  if (*(void *)this)
  {
    if (*((void *)this + 4))
    {
      (*(void (**)(void))(**(void **)this + 40))(*(void *)this);
      int v5 = *((_DWORD *)this + 6);
    }
    *((void *)this + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(void *)this = 0;
    *((_DWORD *)this + 6) = v5 + 1;
  }
}

uint64_t REGeomMeshCollectionCreate()
{
  re::make::shared::object<re::Shareable<re::internal::GeomMeshCollection>>((re *)&v1);
  return v1;
}

uint64_t REGeomMeshCollectionCreateByReadingMeshesFromUSDFile(re::internal *a1)
{
  re::internal::importGeomMeshesFromFile(a1, (uint64_t)v10);
  if (v10[0])
  {
    re::make::shared::object<re::Shareable<re::internal::GeomMeshCollection>>((re *)&v9);
    uint64_t v2 = v9;
    if (v12)
    {
      uint64_t v3 = v14;
      uint64_t v4 = 736 * v12;
      do
      {
        re::make::shared::object<re::Shareable<re::GeomMesh>>(v1, &v8);
        uint64_t v1 = re::GeomMesh::operator=((re::GeomMesh *)(v8 + 24), v3);
        uint64_t v5 = v8;
        uint64_t v8 = 0;
        unint64_t v6 = *(void *)(v2 + 40);
        if (v6 >= *(void *)(v2 + 32))
        {
          uint64_t v1 = (re *)re::DynamicArray<float *>::growCapacity((void *)(v2 + 24), v6 + 1);
          unint64_t v6 = *(void *)(v2 + 40);
        }
        *(void *)(*(void *)(v2 + 56) + 8 * v6) = v5;
        *(void *)(v2 + 40) = v6 + 1;
        ++*(_DWORD *)(v2 + 48);
        if (v8) {

        }
        uint64_t v3 = (re::GeomMesh *)((char *)v3 + 736);
        v4 -= 736;
      }
      while (v4);
    }
    if (v10[0])
    {
      re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v11);
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  return v2;
}

BOOL REGeomMeshCollectionWriteMeshesToUSDFile(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  uint64_t v15 = 0;
  v12[1] = 0;
  unint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  unint64_t v4 = *(void *)(a2 + 40);
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v17, 0);
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)v12, v4, (re::GeomMesh *)&v17);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v17);
  unint64_t v5 = v13;
  if (v13)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = *(void *)(a2 + 40);
      if (v8 <= v7)
      {
        uint64_t v16 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v17 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v22 = 136315906;
        *(void *)&_OWORD v22[4] = "operator[]";
        *(_WORD *)&unsigned char v22[12] = 1024;
        *(_DWORD *)&v22[14] = 797;
        __int16 v23 = 2048;
        unint64_t v24 = v7;
        __int16 v25 = 2048;
        unint64_t v26 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        uint64_t v16 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v17 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v22 = 136315906;
        *(void *)&_OWORD v22[4] = "operator[]";
        *(_WORD *)&unsigned char v22[12] = 1024;
        *(_DWORD *)&v22[14] = 789;
        __int16 v23 = 2048;
        unint64_t v24 = v7;
        __int16 v25 = 2048;
        unint64_t v26 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v8 = v13;
      if (v13 <= v7) {
        goto LABEL_17;
      }
      re::GeomMesh::copy((re::GeomMesh *)(*(void *)(*(void *)(a2 + 56) + 8 * v7++) + 24), (re::GeomMesh *)(v15 + v6));
      v6 += 736;
    }
    while (v5 != v7);
    unint64_t v9 = v13;
  }
  else
  {
    unint64_t v9 = 0;
  }
  *(void *)long long v22 = v15;
  *(void *)&unsigned char v22[8] = v9;
  re::internal::exportGeomMeshesToUSDFile(a1, (unint64_t *)v22, (uint64_t)&v17);
  BOOL v10 = (_BYTE)v17 != 0;
  if (!(_BYTE)v17 && *((void *)&v18 + 1) && (v19 & 1) != 0) {
    (*(void (**)(void))(**((void **)&v18 + 1) + 40))();
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v12);
  return v10;
}

uint64_t REGeomMeshCollectionGetMeshCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t REGeomMeshCollectionGetMeshAtIndex(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 40) <= a2) {
      return 0;
    }
    else {
      return *(void *)(*(void *)(result + 56) + 8 * a2);
    }
  }
  return result;
}

void *REGeomMeshCollectionAddMesh(void *result, uint64_t a2)
{
  if (result && a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[5];
    if (v4 >= result[4])
    {
      re::DynamicArray<float *>::growCapacity(result + 3, v4 + 1);
      unint64_t v4 = v3[5];
    }
    *(void *)(v3[7] + 8 * vre::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
    v3[5] = v4 + 1;
    ++*((_DWORD *)v3 + 12);
    return (id)(a2 + 8);
  }
  return result;
}

void re::make::shared::object<re::Shareable<re::internal::GeomMeshCollection>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E7373C8;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void *re::Shareable<re::internal::GeomMeshCollection>::~Shareable(void *a1)
{
  *a1 = &unk_26E7373C8;
  re::internal::GeomMeshCollection::~GeomMeshCollection((re::internal::GeomMeshCollection *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::internal::GeomMeshCollection>::~Shareable(void *a1)
{
  *a1 = &unk_26E7373C8;
  re::internal::GeomMeshCollection::~GeomMeshCollection((re::internal::GeomMeshCollection *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *REPortalComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPortalComponentSetTargetWorldRoot(uint64_t this, uint64_t a2)
{
  *(void *)(this + 32) = *(void *)(a2 + 24);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentUnsetTargetWorldRoot(uint64_t this)
{
  *(void *)(this + 32) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentComponentSetTargetWorldRoot(uint64_t this, uint64_t a2)
{
  *(void *)(this + 32) = *(void *)(a2 + 24);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentGetTargetWorldID(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REPortalComponentSetTargetWorldID(uint64_t this, uint64_t a2)
{
  *(void *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPortalComponentGetClipPlanePosition(__n128 *a1)
{
  return a1[4];
}

uint64_t REPortalComponentSetClipPlanePosition(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPortalComponentGetClipPlaneNormal(__n128 *a1)
{
  return a1[5];
}

uint64_t REPortalComponentSetClipPlaneNormal(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 80) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPortalComponentGetPlanePosition(__n128 *a1)
{
  return a1[4];
}

uint64_t REPortalComponentSetPlanePosition(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  *(__n128 *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPortalComponentGetPlaneNormal(__n128 *a1)
{
  return a1[5];
}

uint64_t REPortalComponentSetPlaneNormal(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 80) = a2;
  *(__n128 *)(this + 112) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentGetUseClipPlane(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t REPortalComponentSetUseClipPlane(uint64_t this, char a2)
{
  *(unsigned char *)(this + 128) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentGetInheritsIBL(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 129);
}

uint64_t REPortalComponentSetInheritsIBL(uint64_t this, char a2)
{
  *(unsigned char *)(this + 129) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentGetInheritsProbeLighting(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 130);
}

uint64_t REPortalComponentSetInheritsProbeLighting(uint64_t this, char a2)
{
  *(unsigned char *)(this + 130) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalComponentGetAllowsCrossing(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 131);
}

uint64_t REPortalComponentSetAllowsCrossing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 131) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REPortalComponentGetLocalCrossingBounds()
{
  return 0.0;
}

uint64_t REPortalComponentCopyWorldRoot(re *a1)
{
  re::make::shared::object<re::ecs2::SharedWorldRootToken>(a1, &v3);
  uint64_t result = v3;
  *(void *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *((void *)a1 + 4);
  return result;
}

char *REPortalComponentGetTargetWorldEntity(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 40), *(void *)(a1 + 16));
}

uint64_t REPortalComponentSetTargetWorldEntity(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 40), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REPortalComponentGetCrossPlanePosition(__n128 *a1)
{
  return a1[6];
}

uint64_t REPortalComponentSetCrossPlanePosition(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REPortalComponentGetCrossPlaneNormal(__n128 *a1)
{
  return a1[7];
}

uint64_t REPortalComponentSetCrossPlaneNormal(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 112) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REServiceLocatorGetDirectResourceService(uint64_t a1)
{
  {
    re::introspect<re::DRContextService>(void)::info = re::introspect_DRContextService(0);
  }
  uint64_t v2 = re::introspect<re::DRContextService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t REDecoderCreate(_anonymous_namespace_ *a1)
{
  uint64_t v2 = re::Allocator::Allocator((re::Allocator *)v1, "Base MallocAllocator", 1);
  *(void *)uint64_t v2 = &unk_26E6DEC70;
  uint64_t v3 = (char *)v2 + 24;
  re::LeakTestAllocator::LeakTestAllocator((re::Allocator *)((char *)v2 + 24), "PersistentAllocator", (re::Allocator *)v1);
  unint64_t v4 = re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)(v1 + 104), "ScratchAllocator", (re::Allocator *)v1);
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  re::DynamicString::setCapacity((void *)(v1 + 200), 0);
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 260) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(void *)(v1 + 328) = 0;
  *(void *)(v1 + 336) = 0;
  *(void *)(v1 + 320) = 0;
  *(void *)(v1 + 341) = 0;
  *(void *)(v1 + 288) = v3;
  re::DynamicArray<float *>::setCapacity((void *)(v1 + 288), 0);
  ++*(_DWORD *)(v1 + 312);
  return v1;
}

uint64_t REDecoderDestroy(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 304);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 320);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v11 = v5;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 56, &v11);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v11);
      v4 -= 8;
    }
    while (v4);
  }
  *(void *)(a1 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  ++*(_DWORD *)(a1 + 312);
  uint64_t v6 = *(void *)(a1 + 288);
  if (v6)
  {
    if (*(void *)(a1 + 320)) {
      (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    }
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    *(void *)(a1 + 288) = 0;
    ++*(_DWORD *)(a1 + 312);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  if (v7)
  {
    if (*(void *)(a1 + 280)) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    *(void *)(a1 + 248) = 0;
    ++*(_DWORD *)(a1 + 272);
  }
  re::DynamicString::deinit((re::DynamicString *)(a1 + 200));
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)(a1 + 104), v8);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)(a1 + 24), v9);
  re::Allocator::~Allocator((re::Allocator *)a1);
  return 0;
}

uint64_t REDecoderOpen(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::open(*(void *)(a1 + 192), *(void *)(a1 + 184), 0, 0xFFFFFFFFLL, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 104));
  uint64_t v2 = *(void *)(a1 + 208);
  if (v2)
  {
    *(void *)(a1 + 208) = 1;
    uint64_t v3 = *(unsigned char **)(a1 + 216);
  }
  else
  {
    *(unsigned char *)(a1 + 208) = v2 & 1;
    uint64_t v3 = (unsigned char *)(a1 + 209);
  }
  uint64_t result = 0;
  *uint64_t v3 = 0;
  *(void *)(a1 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  ++*(_DWORD *)(a1 + 272);
  return result;
}

uint64_t REDecoderClose(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::close(*(_anonymous_namespace_ **)(a1 + 192));
  uint64_t result = 0;
  *(void *)(a1 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  ++*(_DWORD *)(a1 + 272);
  return result;
}

uint64_t REDecoderSetFromCFData(_anonymous_namespace_::DecoderData *a1, CFDataRef theData)
{
  uint64_t result = 1;
  if (a1 && theData)
  {
    BytePtr = (const char *)CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    {
      *((void *)a1 + 30) = theData;
      CFRetain(theData);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t REDecoderSetData(_anonymous_namespace_::DecoderData *this, const char *a2, uint64_t a3)
{
  uint64_t result = 1;
  if (this && a2 && a3)
  {
      return 0;
    else {
      return 2;
    }
  }
  return result;
}

BOOL anonymous namespace'::DecoderData::setData(_anonymous_namespace_::DecoderData *this, const char *a2, uint64_t a3)
{
  uint64_t v6 = (re::FixedArrayInputStream *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 3) + 32))((char *)this + 24, 64, 8);
  uint64_t v7 = re::FixedArrayInputStream::FixedArrayInputStream(v6, a2, a3, -1);
  *((void *)this + 23) = v7;
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 3) + 32))((char *)this + 24, 176, 8);
    uint64_t v9 = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::Encoder(v8, 13);
    *(void *)(v9 + 168) = 0;
    *((void *)this + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v9;
    *((void *)this + 29) = a3;
  }
  return v6 != 0;
}

uint64_t REDecoderGetStatus(uint64_t a1, void *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 192);
    if (*(unsigned char *)(v5 + 40))
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v7, (const re::DynamicString *)(v5 + 64));
      re::DynamicString::operator=((re::DynamicString *)(a1 + 200), (re::DynamicString *)&v7);
      if (v7 && (v8 & 1) != 0) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
      if (*(unsigned char *)(a1 + 208)) {
        uint64_t v6 = *(void *)(a1 + 216);
      }
      else {
        uint64_t v6 = a1 + 209;
      }
      *a2 = v6;
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadBool(uint64_t a1, const char *a2, unsigned char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeBool(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadDouble(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadFloat(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadInt8(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<signed char>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadInt16(uint64_t a1, const char *a2, __int16 *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<short>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadInt32(uint64_t a1, const char *a2, int *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<int>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadInt64(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<long long>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadString(uint64_t a1, const char *a2, char **a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    uint64_t v8 = 0;
    if (re::EncoderOPACK<re::FixedArrayInputStream>::beginString(*(void *)(a1 + 192), a2, 0, &v8, 0))
    {
      uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v8 + 1, 0);
      re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::add(a1 + 56, (uint64_t *)&v9);
      uint64_t v6 = v9;
      if (!v9) {
        return 2;
      }
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 288), &v9);
      uint64_t v7 = v8;
      if (v8)
      {
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeString(*(void *)(a1 + 192), v6, 0);
        uint64_t v7 = v8;
      }
      v6[v7] = 0;
      *a3 = v6;
      re::EncoderOPACK<re::FixedArrayInputStream>::endString(*(_anonymous_namespace_ **)(a1 + 192));
    }
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadUInt8(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned char>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadUInt16(uint64_t a1, const char *a2, __int16 *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned short>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadUInt32(uint64_t a1, const char *a2, int *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned int>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderReadUInt64(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned long long>(*(void *)(a1 + 192), a2, 0, a3, 0);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REDecoderBeginContainer(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  if (a2) {
    int v4 = 64;
  }
  else {
    int v4 = 16;
  }
  uint64_t v5 = (_anonymous_namespace_ *)re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(v3, "Container", 0, v4);
  if (!v5) {
    return 3;
  }
  unint64_t v6 = *(void *)(a1 + 256);
  unint64_t v7 = *(void *)(a1 + 264);
  if (v7 >= v6)
  {
    unint64_t v8 = v7 + 1;
    if (v6 < v7 + 1)
    {
      if (*(void *)(a1 + 248))
      {
        uint64_t v9 = 2 * v6;
        BOOL v10 = v6 == 0;
        unint64_t v11 = 8;
        if (!v10) {
          unint64_t v11 = v9;
        }
        if (v11 <= v8) {
          unint64_t v12 = v8;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(a1 + 248), v12);
      }
      else
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(a1 + 248), v8);
        ++*(_DWORD *)(a1 + 272);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 264);
  uint64_t v15 = (void *)(*(void *)(a1 + 280) + 16 * v14);
  *uint64_t v15 = 0;
  v15[1] = -1;
  *(void *)(a1 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v14 + 1;
  ++*(_DWORD *)(a1 + 272);
  long long v20 = 0;
  int v19 = 0;
  *(void *)(*(void *)(a1 + 280) + 16 * *(void *)(a1 + 264) - 16) = v20;
  uint64_t v16 = *(void *)(a1 + 192);
  if (v16 && *(int *)(v16 + 16) >= 1)
  {
    (*(void (**)(void))(**(void **)v16 + 24))();
    *(void *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = 0;
  }
  uint64_t v17 = *(void *)(a1 + 184);
  if (v17) {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
  else {
    uint64_t v18 = -1;
  }
  *(void *)(*(void *)(a1 + 280) + 16 * *(void *)(a1 + 264) - 8) = v18;
  if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::DecoderData::getInputStream(_anonymous_namespace_::DecoderData *this, const void **a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = *((void *)this + 24);
  if (v6 && *(int *)(v6 + 16) >= 1)
  {
    (*(void (**)(void))(**(void **)v6 + 24))();
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
  }
  uint64_t result = *((void *)this + 23);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, const void **, int *))(*(void *)result + 16))(result, a2, a3);
    if (result)
    {
      unint64_t v8 = *(uint64_t (**)(void))(**((void **)this + 23) + 24);
      return v8();
    }
  }
  return result;
}

uint64_t REDecoderEndContainer(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(a1 + 264)) {
    return 3;
  }
  re::EncoderOPACK<re::FixedArrayInputStream>::endObject(*(void *)(a1 + 192));
  if (*(unsigned char *)(*(void *)(a1 + 192) + 40)) {
    return 3;
  }
  uint64_t result = 0;
  --*(void *)(a1 + 264);
  ++*(_DWORD *)(a1 + 272);
  return result;
}

BOOL REDecoderTryReadNil(uint64_t *a1, uint64_t a2, const char *a3)
{
  if (!a1) {
    return 0;
  }
  memset(v23, 0, sizeof(v23));
  __s1 = 0;
  uint64_t v22 = 0;
  long long v20 = 0;
  if (a2 < 0 && (int v6 = *(unsigned __int8 *)a3, !*a3))
  {
    BOOL v12 = 0;
    unint64_t v13 = *(unsigned char **)&v23[1];
    int v14 = v23[0];
  }
  else
  {
    unint64_t v7 = *(_anonymous_namespace_ **)&v23[1];
    int v8 = v23[0];
    if (v12)
    {
      if (v22 != a2) {
        return 0;
      }
    }
    else
    {
        || v20 != (char *)strlen(a3)
        || memcmp(__s1, a3, (size_t)v20))
      {
        return 0;
      }
      unint64_t v7 = *(_anonymous_namespace_ **)&v23[1];
      int v8 = v23[0];
    }
    int v6 = !v12;
    unint64_t v13 = (char *)v7 + (int)v9;
    *(void *)&v23[1] = v13;
    int v14 = v8 - v9;
    v23[0] = v8 - v9;
  }
  BOOL v15 = 0;
  if (v14 < 1 || !v13) {
    return v15;
  }
  if (*v13 != 4) {
    return 0;
  }
  if (v12)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<long long>(a1[24], "iKey", 0, &v22, 0);
  }
  else if (v6 {
         && re::EncoderOPACK<re::FixedArrayInputStream>::beginString(a1[24], "sKey", 0, (uint64_t *)&v20, 0))
  }
  {
    if (v20) {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeString(a1[24], 0, 1);
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::endString((_anonymous_namespace_ *)a1[24]);
  }
  unsigned __int8 v19 = 0;
  re::EncoderOPACK<re::FixedArrayInputStream>::beginOptional(a1[24], "nil", 0, &v19, 0);
  uint64_t v17 = (unsigned __int8 *)a1[24];
  int v18 = v17[40] | v19;
  BOOL v15 = v18 == 0;
  if (!v18) {
    re::EncoderOPACK<re::FixedArrayInputStream>::endOptional((_anonymous_namespace_ *)v17);
  }
  return v15;
}

uint64_t anonymous namespace'::ElementSize(_anonymous_namespace_ *this, const void *a2)
{
  int v2 = (int)a2;
  unsigned int v3 = *(unsigned __int8 *)this;
  int v4 = 1;
  if (v3 <= 0x60)
  {
    switch(*(unsigned char *)this)
    {
      case '0':
LABEL_12:
        int v4 = 2;
        break;
      case '1':
LABEL_19:
        int v4 = 3;
        break;
      case '2':
      case '5':
LABEL_22:
        int v4 = 5;
        break;
      case '3':
      case '6':
LABEL_25:
        int v4 = 9;
        break;
      case '4':
        goto LABEL_15;
      default:
        if (v3 - 1 < 4) {
          break;
        }
LABEL_15:
        if (v3 - 7 < 0x29) {
          goto LABEL_16;
        }
        if (v3 - 64 > 0x20)
        {
          int v4 = v3 - 111;
          if (v3 == 111)
          {
            if ((int)a2 < 2) {
LABEL_16:
            }
              int v4 = 1;
            else {
              int v4 = strlen((const char *)this + 1) + 2;
            }
          }
          else
          {
            unsigned int v6 = v3 - 112;
            unsigned int v7 = (v3 + 48);
            int v8 = v3 - 207;
            if (v7 > 0xE) {
              int v8 = 1;
            }
            if (v6 > 0x20) {
              int v4 = v8;
            }
          }
        }
        else
        {
          int v4 = v3 - 63;
        }
        break;
    }
  }
  else if (*(unsigned __int8 *)this > 0xC0u)
  {
    switch(*(unsigned char *)this)
    {
      case 0xC1:
        goto LABEL_12;
      case 0xC2:
        goto LABEL_19;
      case 0xC3:
        int v4 = 4;
        break;
      case 0xC4:
        goto LABEL_22;
      default:
        if (v3 != 223 && v3 != 239) {
          goto LABEL_15;
        }
        break;
    }
  }
  else
  {
    switch(*(unsigned char *)this)
    {
      case 'a':
        if ((int)a2 < 2) {
          goto LABEL_12;
        }
        int v4 = *((unsigned __int8 *)this + 1) + 2;
        break;
      case 'b':
        if ((int)a2 < 3) {
          goto LABEL_19;
        }
        int v4 = *(unsigned __int16 *)((char *)this + 1) + 3;
        break;
      case 'c':
        if ((int)a2 < 5) {
          goto LABEL_22;
        }
        int v4 = *(_DWORD *)((char *)this + 1) + 5;
        break;
      case 'd':
        if ((int)a2 < 9) {
          goto LABEL_25;
        }
        int v4 = *(_DWORD *)((char *)this + 1) + 9;
        break;
      default:
        JUMPOUT(0);
    }
  }
  if (v4 >= v2) {
    return v2;
  }
  else {
    return v4;
  }
}

BOOL anonymous namespace'::ElementReadInt(_anonymous_namespace_ *this, const void *a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = *(unsigned __int8 *)this;
  unsigned int v5 = v4 - 7;
  if (a3 && v5 <= 0x2C)
  {
    if (v4 <= 0x2F)
    {
      uint64_t v6 = v4 - 8;
LABEL_17:
      *a3 = v6;
      return v5 < 0x2D;
    }
    switch(v4)
    {
      case '2':
        if ((int)a2 >= 5)
        {
          uint64_t v6 = *(int *)((char *)this + 1);
          goto LABEL_17;
        }
        break;
      case '1':
        if ((int)a2 >= 3)
        {
          uint64_t v6 = *(__int16 *)((char *)this + 1);
          goto LABEL_17;
        }
        break;
      case '0':
        if ((int)a2 >= 2)
        {
          uint64_t v6 = *((char *)this + 1);
          goto LABEL_17;
        }
        break;
      default:
        if ((int)a2 >= 9)
        {
          uint64_t v6 = *(void *)((char *)this + 1);
          goto LABEL_17;
        }
        break;
    }
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  return v5 < 0x2D;
}

BOOL anonymous namespace'::ElementReadString(_anonymous_namespace_ *this, const void *a2, unint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = *(unsigned __int8 *)this;
  unsigned int v6 = v5 - 64;
  if ((v5 - 64) > 0x2F || (a3 | a4) == 0) {
    return v6 < 0x30;
  }
  if (v5 >= 0x61)
  {
    int v11 = 0;
    int v10 = 1;
    switch(*(unsigned char *)this)
    {
      case 'a':
        break;
      case 'b':
        int v11 = 0;
        int v10 = 2;
        break;
      case 'c':
        int v11 = 0;
        int v10 = 4;
        break;
      case 'd':
        int v11 = 0;
        int v10 = 8;
        break;
      default:
        int v11 = 1;
        int v10 = 0;
        break;
    }
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
  }
  if (a3)
  {
    if (v10 + 1 < (int)a2) {
      BOOL v12 = (char *)this + v10 + 1;
    }
    else {
      BOOL v12 = 0;
    }
    *(void *)a3 = v12;
  }
  if (!a4) {
    return v6 < 0x30;
  }
  if (!v11)
  {
    if (v10 >= (int)a2)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      switch(v10)
      {
        case 1:
          unint64_t v14 = *((unsigned __int8 *)this + 1);
          break;
        case 2:
          unint64_t v14 = *(unsigned __int16 *)((char *)this + 1);
          break;
        case 4:
          unint64_t v14 = *(unsigned int *)((char *)this + 1);
          break;
        case 8:
          unint64_t v14 = *(void *)((char *)this + 1);
          break;
        default:
          break;
      }
    }
    BOOL v15 = (const char *)(int)a2;
    goto LABEL_30;
  }
  if (v5 != 111)
  {
    unint64_t v14 = v5 - 64;
    BOOL v15 = (const char *)(int)a2;
LABEL_30:
    if (v14 >= (int)a2) {
      unint64_t v13 = v15;
    }
    else {
      unint64_t v13 = (const char *)v14;
    }
    goto LABEL_33;
  }
  if ((int)a2 >= 2)
  {
    unint64_t v13 = (const char *)strlen((const char *)this + 1);
LABEL_33:
    *(void *)a4 = v13;
  }
  return v6 < 0x30;
}

BOOL REDecoderIsAtEndOfContainer(_anonymous_namespace_::DecoderData *a1)
{
  uint64_t v4 = 0;
  int v3 = 0;
  BOOL result = 0;
  if (v4) {
    BOOL v2 = v3 < 1;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    return *(unsigned char *)v4 == 3;
  }
  return result;
}

uint64_t REDecoderContainerElementCount(_anonymous_namespace_::DecoderData *this)
{
  uint64_t v2 = 1;
  do
    --v2;
  return -v2;
}

uint64_t anonymous namespace'::NextElement(_anonymous_namespace_::DecoderData *this, int a2)
{
  if (a2)
  {
    *((void *)this + 41) = 0;
    *((void *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    unint64_t v3 = *((unsigned int *)this + 84);
  }
  else
  {
    uint64_t v4 = *((int *)this + 85);
    *((void *)this + 41) += v4;
    unint64_t v3 = (*((_DWORD *)this + 84) - v4);
    *((_DWORD *)this + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
  }
  if ((int)v3 < 1) {
    return 0;
  }
  uint64_t v5 = (_anonymous_namespace_ *)*((void *)this + 41);
  while (1)
  {
    int v6 = *(unsigned __int8 *)v5;
    *((unsigned char *)this + 348) = v6;
    *((_DWORD *)this + 85) = v7;
    if (v6 == 239 || v6 == 223)
    {
      int v9 = *((_DWORD *)this + 86);
      *((_DWORD *)this + 86) = v9 + 1;
      if (!v9) {
        return 1;
      }
      goto LABEL_14;
    }
    if (v6 == 3)
    {
      int v8 = *((_DWORD *)this + 86);
      if (!v8) {
        return 0;
      }
      *((_DWORD *)this + 86) = v8 - 1;
      goto LABEL_14;
    }
    if (!*((_DWORD *)this + 86)) {
      return 1;
    }
LABEL_14:
    uint64_t v5 = (_anonymous_namespace_ *)((char *)v5 + v7);
    *((void *)this + 41) = v5;
    BOOL v10 = __OFSUB__(v3, v7);
    unint64_t v3 = (v3 - v7);
    *((_DWORD *)this + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
    if (((v3 & 0x80000000) != 0) ^ v10 | (v3 == 0)) {
      return 0;
    }
  }
}

uint64_t REDecoderContainerGetKey(uint64_t a1, int a2, void *a3, void *a4)
{
  return REDecoderContainerGetKeyAndOffset(a1, a2, a3, a4, &v5);
}

uint64_t REDecoderContainerGetKeyAndOffset(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  if (!*(void *)(a1 + 264)) {
    return 0;
  }
  if (result)
  {
    BOOL v10 = *(_anonymous_namespace_ **)(a1 + 328);
    int v11 = (const void *)*(int *)(a1 + 340);
    uint64_t result = 0;
    if (Element)
    {
      {
LABEL_8:
        *a5 = (char *)v11 + (void)v10 - *(void *)(*(void *)(a1 + 280) + 16 * *(void *)(a1 + 264) - 16);
        return 1;
      }
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      __uuid_t dst = (void *)(*(uint64_t (**)(void, char *, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v16 + 1, 0);
      re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::add(a1 + 56, (uint64_t *)&__dst);
      BOOL v15 = __dst;
      if (__dst)
      {
        memcpy(__dst, v17, (size_t)v16);
        v16[(void)v15] = 0;
        __uuid_t dst = v15;
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 288), &__dst);
        *a4 = v15;
        goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

BOOL REDecoderContainerSetOffset(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[33];
  if (v2)
  {
    uint64_t v5 = *(void *)(a1[35] + 16 * v2 - 8);
    uint64_t v6 = a1[24];
    if (v6 && *(int *)(v6 + 16) >= 1)
    {
      (*(void (**)(void))(**(void **)v6 + 24))();
      *(void *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
    }
    uint64_t v7 = a1[23];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 56))(v7, v5 + a2);
    }
  }
  return v2 != 0;
}

void anonymous namespace'::DecoderData::cleanUp(_anonymous_namespace_::DecoderData *this)
{
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::~Encoder(*((unsigned char **)this + 24));
    (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 40))((char *)this + 24, v2);
    *((void *)this + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  unint64_t v3 = (void (***)(void))*((void *)this + 23);
  if (v3)
  {
    (**v3)(*((void *)this + 23));
    (*(void (**)(char *, void (***)(void)))(*((void *)this + 3) + 40))((char *)this + 24, v3);
    *((void *)this + 23) = 0;
  }
  *((void *)this + 33) = 0;
  ++*((_DWORD *)this + 68);
  *((void *)this + 29) = 0;
  uint64_t v4 = (const void *)*((void *)this + 30);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 30) = 0;
  }
}

uint64_t RETimelineEventFilter(char *a1)
{
  if (!a1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  char v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (unsigned __int8 *)(a1 + 2);
    do
    {
      uint64_t v1 = 31 * v1 + v2;
      int v4 = *v3++;
      char v2 = v4;
    }
    while (v4);
  }
  return v1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t RETimelineEventGetParameterInt(char *a1, uint64_t a2, uint64_t a3)
{
  ParameterIntPointer = (unsigned int *)RETimelineEventGetParameterIntPointer(a1, a2, a3);
  if (ParameterIntPointer) {
    return *ParameterIntPointer;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t RETimelineEventGetParameterIntPointer(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a1;
  uint64_t v7 = re::TimelineEventData::parameter<int>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

float RETimelineEventGetParameterFloat(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ParameterFloatPointer = RETimelineEventGetParameterFloatPointer(a1, a2, a3);
  if (ParameterFloatPointer) {
    return *(float *)ParameterFloatPointer;
  }
  else {
    return NAN;
  }
}

uint64_t RETimelineEventGetParameterFloatPointer(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a1;
  uint64_t v7 = re::TimelineEventData::parameter<float>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t RETimelineEventGetParameterString(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a1;
  uint64_t v7 = re::TimelineEventData::parameter<re::StringID>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (v7) {
    return *(void *)(v7 + 8);
  }
  else {
    return 0;
  }
}

double RETimelineEventGetParameterVector4(char *a1, uint64_t a2, uint64_t a3)
{
  ParameterVector4Pointer = (long long *)RETimelineEventGetParameterVector4Pointer(a1, a2, a3);
  if (ParameterVector4Pointer) {
    long long v4 = *ParameterVector4Pointer;
  }
  else {
    *(void *)&long long v4 = vdupq_n_s32(0x7FC00000u).u64[0];
  }
  return *(double *)&v4;
}

uint64_t RETimelineEventGetParameterVector4Pointer(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a1;
  uint64_t v7 = re::TimelineEventData::parameter<re::Vector4<float>>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t RETimelineEventGetParameterDataSize(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a1;
  uint64_t v7 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (v7) {
    return *(void *)(v7 + 8);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineEventGetParameterData(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(void *)&v9[0] = 2 * v3;
  *((void *)&v9[0] + 1) = a1;
  uint64_t v7 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(a3, a2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (!v7) {
    return 0;
  }
  if (!*(void *)(v7 + 8))
  {
    memset(v9, 0, sizeof(v9));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v7 + 16);
}

id RETimelineEventGetSwiftParameter(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      char v4 = a1[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v10[0] = 2 * v3;
  v10[1] = a1;
  uint64_t v7 = (void **)re::TimelineEventData::parameter<re::ObjCObject>(a3, a2, v10);
  re::StringID::destroyString((re::StringID *)v10);
  if (!v7) {
    return 0;
  }
  int v8 = *v7;
  if (!*v7) {
    return 0;
  }
  return v8;
}

uint64_t RETimelineEventGetConstantDataSize(uint64_t a1)
{
  return *(void *)(a1 + 488);
}

uint64_t RETimelineEventGetConstantData(uint64_t a1)
{
  if (!*(void *)(a1 + 488))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 496);
}

id RETimelineEventGetSwiftConstantData(uint64_t a1)
{
  id v1 = *(id *)(a1 + 504);

  return v1;
}

BOOL RETimelineEventHandleIsValid(uint64_t a1)
{
  return a1 != -1;
}

uint64_t RETimelineEventGetParameterType(char *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      char v3 = a1[1];
      if (v3)
      {
        char v4 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v2 = 31 * v2 + v3;
          int v5 = *v4++;
          char v3 = v5;
        }
        while (v5);
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  v9[0] = 2 * v2;
  v9[1] = a1;
  uint64_t v6 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2 + 136, v9);
  if (v6) {
    unsigned __int8 v7 = *(unsigned char *)(v6 + 8);
  }
  else {
    unsigned __int8 v7 = 0;
  }
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t RETimelineEventGetAnimatedType(char *a1)
{
  return *a1;
}

BOOL RETimelineEventSetAnimatedFloatValue(uint64_t a1, float a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  else if (*(unsigned char *)(a1 + 2))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v4 + 12))
    {
      **(float **)uint64_t v4 = a2;
      ++*(_DWORD *)(v4 + 8);
      return 1;
    }
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedDoubleValue(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1 == 1)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v2 + 12))
      {
        **(double **)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedVector2FValue(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v2 + 12))
      {
        **(double **)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedVector3FValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 3)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedVector4FValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 4)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedQuaternionFValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 5)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetAnimatedSRTValue(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  if (*(unsigned char *)a1 == 6)
  {
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v4 + 12))
      {
        int v5 = *(__n128 **)v4;
        *int v5 = a2;
        v5[1] = a3;
        void v5[2] = a4;
        ++*(_DWORD *)(v4 + 8);
        return 1;
      }
    }
  }
  else
  {
    unsigned __int8 v7 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v8 = 0;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v8, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceFloatValue(re *a1)
{
  if (!*(unsigned char *)a1) {
    return *((void *)a1 + 2);
  }
  id v1 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceDoubleValue(re *a1)
{
  if (*(unsigned char *)a1 == 1) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceVector2FValue(re *a1)
{
  if (*(unsigned char *)a1 == 2) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceVector3FValue(re *a1)
{
  if (*(unsigned char *)a1 == 3) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceVector4FValue(re *a1)
{
  if (*(unsigned char *)a1 == 4) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceQuaternionFValue(re *a1)
{
  if (*(unsigned char *)a1 == 5) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultSourceSRTValue(re *a1)
{
  if (*(unsigned char *)a1 == 6) {
    return *((void *)a1 + 2);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get base value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetFloatValue(re *a1)
{
  if (!*(unsigned char *)a1) {
    return **((void **)a1 + 3);
  }
  id v1 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetDoubleValue(re *a1)
{
  if (*(unsigned char *)a1 == 1) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetVector2FValue(re *a1)
{
  if (*(unsigned char *)a1 == 2) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetVector3FValue(re *a1)
{
  if (*(unsigned char *)a1 == 3) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetVector4FValue(re *a1)
{
  if (*(unsigned char *)a1 == 4) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetQuaternionFValue(re *a1)
{
  if (*(unsigned char *)a1 == 5) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetDefaultTargetSRTValue(re *a1)
{
  if (*(unsigned char *)a1 == 6) {
    return **((void **)a1 + 3);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not read get last blend stage animated value - wrong type.", v3, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetFloatValue(uint64_t a1, float a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  else if (*(unsigned char *)(a1 + 1))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v4 + 12))
    {
      **(float **)uint64_t v4 = a2;
      ++*(_DWORD *)(v4 + 8);
      return 1;
    }
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetDoubleValue(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1 == 1)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v2 + 12))
      {
        **(double **)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetVector2FValue(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v2 + 12))
      {
        **(double **)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetVector3FValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 3)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetVector4FValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 4)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetQuaternionFValue(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)a1 == 5)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v2 + 12))
      {
        *(__n128 *)*(void *)uint64_t v2 = a2;
        ++*(_DWORD *)(v2 + 8);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v4 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v5, 2u);
  }
  return 0;
}

BOOL RETimelineEventSetDefaultTargetSRTValue(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  if (*(unsigned char *)a1 == 6)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v4 + 12))
      {
        int v5 = *(__n128 **)v4;
        *int v5 = a2;
        v5[1] = a3;
        void v5[2] = a4;
        ++*(_DWORD *)(v4 + 8);
        return 1;
      }
    }
  }
  else
  {
    unsigned __int8 v7 = *re::animationLogObjects((re *)a1);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int v8 = 0;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v8, 2u);
  }
  return 0;
}

uint64_t RETimelineEventGetSkeletalPoseJointCount(re *a1)
{
  if (*(unsigned char *)a1 == 7) {
    return *(void *)(*((void *)a1 + 2) + 24);
  }
  uint64_t v2 = *re::animationLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)char v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Can not write animated value - wrong type.", v3, 2u);
  }
  return 0;
}

uint64_t RETimelineEventSetAnimatedSkeletalPoseJointValue(re *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v14[0] = a3;
  v14[1] = a4;
  void v14[2] = a5;
  if (*(unsigned char *)a1 != 7)
  {
    int v8 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    int v9 = "Can not write animated value - wrong type.";
    uint64_t v10 = v8;
    uint32_t v11 = 2;
LABEL_10:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  if (*(void *)(*((void *)a1 + 2) + 24) <= a2)
  {
    BOOL v12 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 134217984;
    unint64_t v16 = a2;
    int v9 = "Can not write animated joint index - index value (%zu) is out of range.";
    uint64_t v10 = v12;
    uint32_t v11 = 12;
    goto LABEL_10;
  }
  uint64_t v6 = (_DWORD *)*((void *)a1 + 4);
  uint64_t v7 = 1;
  re::FixedArray<re::GenericSRT<float>>::copy((void *)(*(void *)v6 + 16), a2, v14, 1);
  ++v6[2];
  return v7;
}

BOOL RETimelineEventSetAnimatedSkeletalPoseJoints(re *a1, const void *a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    uint32_t v11 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v13) = 0;
    int v8 = "Can not write animated value - wrong type.";
    int v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_7;
  }
  if (*(void *)(*((void *)a1 + 2) + 24) < a3)
  {
    int v5 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)(*((void *)a1 + 2) + 24);
    int v13 = 134218240;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    unint64_t v16 = a3;
    int v8 = "Unexpected joint count. Expected %zu, but got %zu";
    int v9 = v5;
    uint32_t v10 = 22;
LABEL_7:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v13, v10);
    return 0;
  }
  BOOL v12 = (_DWORD *)*((void *)a1 + 4);
  re::FixedArray<re::GenericSRT<float>>::copy((void *)(*(void *)v12 + 16), 0, a2, a3);
  ++v12[2];
  return 1;
}

BOOL RETimelineEventGetDefaultTargetSkeletalPoseJoints(re *a1, _OWORD *a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    int v13 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v16) = 0;
    uint32_t v10 = "Can not write animated value - wrong type.";
    uint32_t v11 = v13;
    uint32_t v12 = 2;
    goto LABEL_7;
  }
  int v5 = (re *)re::FixedArray<re::GenericSRT<float>>::slice(**((void **)a1 + 3) + 16, 0, *(void *)(**((void **)a1 + 3) + 24));
  if (v6 < a3)
  {
    unint64_t v7 = v6;
    int v8 = *re::animationLogObjects(v5);
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v16 = 134218240;
    unint64_t v17 = v7;
    __int16 v18 = 2048;
    unint64_t v19 = a3;
    uint32_t v10 = "Unexpected joint count. Expected %zu, but got %zu";
    uint32_t v11 = v8;
    uint32_t v12 = 22;
LABEL_7:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v16, v12);
    return 0;
  }
  for (; a3; --a3)
  {
    long long v14 = *(_OWORD *)v5;
    long long v15 = *((_OWORD *)v5 + 2);
    a2[1] = *((_OWORD *)v5 + 1);
    a2[2] = v15;
    *a2 = v14;
    a2 += 3;
    int v5 = (re *)((char *)v5 + 48);
  }
  return 1;
}

char *RETimelineEventGetDefaultTargetSkeletalPoseJointValue(re *a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    unint64_t v6 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    LOWORD(v11) = 0;
    unint64_t v7 = "Can not write animated value - wrong type.";
    int v8 = v6;
    uint32_t v9 = 2;
LABEL_10:
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, v9);
    return 0;
  }
  char v3 = (re *)re::FixedArray<re::GenericSRT<float>>::slice(**((void **)a1 + 3) + 16, 0, *(void *)(**((void **)a1 + 3) + 24));
  if (v4 > a2) {
    return (char *)v3 + 48 * a2;
  }
  uint32_t v10 = *re::animationLogObjects(v3);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = 134217984;
    unint64_t v12 = a2;
    unint64_t v7 = "Can not write animated joint index - index value (%zu) is out of range.";
    int v8 = v10;
    uint32_t v9 = 12;
    goto LABEL_10;
  }
  return 0;
}

BOOL RETimelineEventGetDefaultSourceSkeletalPoseJoints(re *a1, _OWORD *a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    uint64_t v13 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v16) = 0;
    uint32_t v10 = "Can not write animated value - wrong type.";
    int v11 = v13;
    uint32_t v12 = 2;
    goto LABEL_7;
  }
  int v5 = (re *)re::FixedArray<re::GenericSRT<float>>::slice(*((void *)a1 + 2) + 16, 0, *(void *)(*((void *)a1 + 2) + 24));
  if (v6 < a3)
  {
    unint64_t v7 = v6;
    int v8 = *re::animationLogObjects(v5);
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v16 = 134218240;
    unint64_t v17 = v7;
    __int16 v18 = 2048;
    unint64_t v19 = a3;
    uint32_t v10 = "Unexpected joint count. Expected %zu, but got %zu";
    int v11 = v8;
    uint32_t v12 = 22;
LABEL_7:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v16, v12);
    return 0;
  }
  for (; a3; --a3)
  {
    long long v14 = *(_OWORD *)v5;
    long long v15 = *((_OWORD *)v5 + 2);
    a2[1] = *((_OWORD *)v5 + 1);
    a2[2] = v15;
    *a2 = v14;
    a2 += 3;
    int v5 = (re *)((char *)v5 + 48);
  }
  return 1;
}

char *RETimelineEventGetDefaultSourceSkeletalPoseJointValue(re *a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    unint64_t v6 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    LOWORD(v11) = 0;
    unint64_t v7 = "Can not write animated value - wrong type.";
    int v8 = v6;
    uint32_t v9 = 2;
LABEL_10:
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, v9);
    return 0;
  }
  char v3 = (re *)re::FixedArray<re::GenericSRT<float>>::slice(*((void *)a1 + 2) + 16, 0, *(void *)(*((void *)a1 + 2) + 24));
  if (v4 > a2) {
    return (char *)v3 + 48 * a2;
  }
  uint32_t v10 = *re::animationLogObjects(v3);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = 134217984;
    unint64_t v12 = a2;
    unint64_t v7 = "Can not write animated joint index - index value (%zu) is out of range.";
    int v8 = v10;
    uint32_t v9 = 12;
    goto LABEL_10;
  }
  return 0;
}

uint64_t RETimelineEventSetDefaultTargetSkeletalPoseJointValue(re *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v14[0] = a3;
  v14[1] = a4;
  void v14[2] = a5;
  if (*(unsigned char *)a1 != 7)
  {
    int v8 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    uint32_t v9 = "Can not write animated value - wrong type.";
    uint32_t v10 = v8;
    uint32_t v11 = 2;
LABEL_10:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  if (*(void *)(*((void *)a1 + 2) + 24) <= a2)
  {
    unint64_t v12 = *re::animationLogObjects(a1);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 134217984;
    unint64_t v16 = a2;
    uint32_t v9 = "Can not write animated joint index - index value (%zu) is out of range.";
    uint32_t v10 = v12;
    uint32_t v11 = 12;
    goto LABEL_10;
  }
  unint64_t v6 = (_DWORD *)*((void *)a1 + 3);
  uint64_t v7 = 1;
  re::FixedArray<re::GenericSRT<float>>::copy((void *)(*(void *)v6 + 16), a2, v14, 1);
  ++v6[2];
  return v7;
}

BOOL RETimelineEventSetDefaultTargetSkeletalPoseJoints(re *a1, const void *a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 != 7)
  {
    uint32_t v11 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v13) = 0;
    int v8 = "Can not write animated value - wrong type.";
    uint32_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_7;
  }
  if (*(void *)(*((void *)a1 + 2) + 24) < a3)
  {
    int v5 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)(*((void *)a1 + 2) + 24);
    int v13 = 134218240;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    unint64_t v16 = a3;
    int v8 = "Unexpected joint count. Expected %zu, but got %zu";
    uint32_t v9 = v5;
    uint32_t v10 = 22;
LABEL_7:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v13, v10);
    return 0;
  }
  unint64_t v12 = (_DWORD *)*((void *)a1 + 3);
  re::FixedArray<re::GenericSRT<float>>::copy((void *)(*(void *)v12 + 16), 0, a2, a3);
  ++v12[2];
  return 1;
}

uint64_t CoreRELog()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  return CoreRELog::log;
}

os_log_t __CoreRELog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.re", "API");
  CoreRELog::log = (uint64_t)result;
  return result;
}

CFDataRef REZipArchiveCopyFileAsData(_anonymous_namespace_ *a1, const char *a2, void *a3)
{
  if (!v10[0])
  {
    CFDataRef v8 = 0;
    if (a3) {
      *a3 = v11;
    }
    goto LABEL_14;
  }
  if (v12[0]) {
    unint64_t v6 = (const UInt8 *)v12[1];
  }
  else {
    unint64_t v6 = (const UInt8 *)v12 + 1;
  }
  if (v12[0]) {
    CFIndex v7 = v12[0] >> 1;
  }
  else {
    CFIndex v7 = LOBYTE(v12[0]) >> 1;
  }
  CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v6, v7);
  if (!v10[0])
  {
LABEL_14:

    return v8;
  }
  if (v11 && (v12[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v8;
}

double REZipArchiveMemoryBufferGetDefaultLayerMTime(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (!archive_read_new()) {
    return 0.0;
  }
  archive_read_support_format_zip();
  if (archive_read_open_memory())
  {
    double DefaultLayerMTimeFromArchive = 0.0;
    if (a3)
    {
      CFStringRef v5 = (const __CFString *)*MEMORY[0x263EFFC60];
      int v6 = archive_errno();
      *a3 = CFErrorCreate(0, v5, v6, 0);
    }
  }
  else
  {
    double DefaultLayerMTimeFromArchive = re::ZipArchiveGetDefaultLayerMTimeFromArchive();
  }
  archive_read_free();
  return DefaultLayerMTimeFromArchive;
}

double RERemoteEffectsServiceHoverEffectSettingsCreate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 112, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E737430;
  *(_OWORD *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = xmmword_23442CF70;
  *(_DWORD *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1157234688;
  *(unsigned char *)(v2 + 68) = 1;
  *(_OWORD *)(v2 + 72) = xmmword_23442CF80;
  double result = 3.52429198e-14;
  *(void *)(v2 + 88) = 0x3D23D70A3E99999ALL;
  return result;
}

__n128 *RERemoteEffectsServiceHoverEffectSettingsSetLuminanceCurve(__n128 *result, __n128 a2)
{
  result[3] = a2;
  return result;
}

__n128 RERemoteEffectsServiceHoverEffectSettingsGetLuminanceCurve(__n128 *a1)
{
  return a1[3];
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetGlowPositionLerpFactor(uint64_t result, float a2)
{
  *(float *)(result + 92) = a2;
  return result;
}

float RERemoteEffectsServiceHoverEffectSettingsGetGlowPositionLerpFactor(uint64_t a1)
{
  return *(float *)(a1 + 92);
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetGlowAppearAnimationsEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 68) = a2;
  return result;
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsGetGlowAppearAnimationsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetGlowTransitionMinScale(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  return result;
}

float RERemoteEffectsServiceHoverEffectSettingsGetGlowTransitionMinScale(uint64_t a1)
{
  return *(float *)(a1 + 72);
}

float RERemoteEffectsServiceHoverEffectSettingsSetGlowAppearDuration(uint64_t a1, double a2)
{
  float result = a2;
  *(float *)(a1 + 76) = result;
  return result;
}

double RERemoteEffectsServiceHoverEffectSettingsGetGlowAppearDuration(uint64_t a1)
{
  return *(float *)(a1 + 76);
}

float RERemoteEffectsServiceHoverEffectSettingsSetGlowDisappearDuration(uint64_t a1, double a2)
{
  float result = a2;
  *(float *)(a1 + 80) = result;
  return result;
}

double RERemoteEffectsServiceHoverEffectSettingsGetGlowDisappearDuration(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

float RERemoteEffectsServiceHoverEffectSettingsSetGlowRadiusInPoints(uint64_t a1, double a2)
{
  float result = a2;
  *(float *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = result;
  return result;
}

double RERemoteEffectsServiceHoverEffectSettingsGetGlowRadiusInPoints(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetGlowInnerRadiusFraction(uint64_t result, float a2)
{
  *(float *)(result + 88) = a2;
  return result;
}

float RERemoteEffectsServiceHoverEffectSettingsGetGlowInnerRadiusFraction(uint64_t a1)
{
  return *(float *)(a1 + 88);
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetIntensityFallOffPower(uint64_t result, float a2)
{
  *(float *)(result + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

float RERemoteEffectsServiceHoverEffectSettingsGetIntensityFallOffPower(uint64_t a1)
{
  return *(float *)(a1 + 84);
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsSetApplyRecursivelyFromSeparatedParent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 96) = a2;
  return result;
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsGetApplyRecursivelyFromSeparatedParent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

unsigned char *RERemoteEffectsServiceHitTestDataSetVersion(unsigned char *result, char a2)
{
  *float result = a2;
  return result;
}

uint64_t RERemoteEffectsServiceHitTestDataGetVersion(unsigned __int8 *a1)
{
  return *a1;
}

__n128 *RERemoteEffectsServiceHitTestDataSetLocation(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

__n128 RERemoteEffectsServiceHitTestDataGetLocation(__n128 *a1)
{
  return a1[1];
}

uint64_t RERemoteEffectsServiceHitTestDataSetTargetEntity(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t RERemoteEffectsServiceHitTestDataGetTargetEntity(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RERemoteEffectsServiceHitTestDataSetSource(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

uint64_t RERemoteEffectsServiceHitTestDataGetSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

void RERemoteEffectsServiceAddHitTestData(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v22 = 0;
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 32);
  char v21 = *(unsigned char *)(a2 + 40);
  __int16 v12 = 0;
  char v13 = 0;
  char v3 = *(unsigned char *)(a3 + 68);
  int v4 = *(_DWORD *)(a3 + 72);
  int v5 = *(_DWORD *)(a3 + 64);
  int v6 = *(_DWORD *)(a3 + 92);
  char v7 = *(unsigned char *)(a3 + 96);
  long long v10 = *(_OWORD *)(a3 + 48);
  char v11 = v3;
  int v14 = v4;
  float64x2_t v15 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 76));
  int v16 = v5;
  uint64_t v17 = *(void *)(a3 + 84);
  int v18 = v6;
  char v19 = 0;
  char v20 = v7;
  re::ecs2::RemoteEffectsService::applyHitTestData(a1, (uint64_t)&v8);
}

void *re::Shareable<RERemoteEffectsServiceHoverEffectSettings>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<RERemoteEffectsServiceHoverEffectSettings>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *REAudioSessionComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REAudioSessionComponentJoinSession(re::ecs2::AudioSessionComponent *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v3 = a2;
  uint64_t v4 = *((void *)a1 + 2);
  int v5 = (id)*re::audioLogObjects(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      int v6 = *(const char **)(v4 + 280);
    }
    else {
      int v6 = "none";
    }
    int v7 = 136315650;
    long long v8 = v6;
    __int16 v9 = 2112;
    long long v10 = v3;
    __int16 v11 = 1024;
    int v12 = [(re *)v3 opaqueSessionID];
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE][ECS] REAudioSessionComponentJoinSession entity(%s) session(%@) sessionID(0x%x)", (uint8_t *)&v7, 0x1Cu);
  }

  re::ecs2::AudioSessionComponent::joinSession(a1, (AVAudioSession *)v3);
}

uint64_t REAudioSessionComponentJoinSessionID(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = (id)*re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      int v6 = *(const char **)(v4 + 280);
    }
    else {
      int v6 = "none";
    }
    int v7 = *(_DWORD *)(a1 + 64);
    int v9 = 136315650;
    long long v10 = v6;
    __int16 v11 = 1024;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE][ECS] REAudioSessionComponentJoinSessionID entity(%s) old sessionID(0x%x) new sessionID(0x%x)", (uint8_t *)&v9, 0x18u);
  }

  *(_DWORD *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAudioSessionComponentControlSessionUUID(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 UUIDString];
    uint64_t v4 = (_anonymous_namespace_ *)[v3 UTF8String];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    re::DynamicString::setCapacity(&v6, 0);
  }
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (re::DynamicString *)&v6);
  re::ecs2::Component::enqueueMarkDirty(a1);
  uint64_t result = (uint64_t)v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*v6 + 40))();
    }
  }
  return result;
}

BOOL REAudioSessionComponentIsActivelyControllingSessionUUID(uint64_t a1, void *a2)
{
  id v3 = [a2 UUIDString];
  uint64_t v4 = (_anonymous_namespace_ *)[v3 UTF8String];

  re::DynamicString::DynamicString((re::DynamicString *)v9, (const re::DynamicString *)&v10);
  BOOL v7 = re::DynamicString::operator==(a1 + 80, (uint64_t)v9) && *(void *)(a1 + 112) && *(void *)(a1 + 120) != 0;
  if (*(void *)&v9[0])
  {
    if (BYTE8(v9[0])) {
      (*(void (**)(void))(**(void **)&v9[0] + 40))();
    }
    memset(v9, 0, sizeof(v9));
  }
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v12, v5, v6);
  }
  return v7;
}

uint64_t REAudioSessionComponentOverrideInputMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 68) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalPoseDefinitionAssetCreateAssetWithDefinitions(re *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 320, 8);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + ++*(void *)(result + 272) = 0u;
  *(_OWORD *)(v10 + 288) = 0u;
  *(_OWORD *)(v10 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  re::SkeletalPoseDefinitionAsset::init((re::SkeletalPoseDefinitionAsset *)v10, 0);
  if (*(void *)(v10 + 288) >= a4)
  {
    if (!a4) {
      goto LABEL_8;
    }
  }
  else
  {
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)(v10 + 280), a4);
  }
  uint64_t v12 = a5 + 16;
  do
  {
    LOBYTE(v22) = *(unsigned char *)(v12 - 16);
    __int16 v13 = *(const char **)(v12 - 8);
    v23[0] = 0;
    v23[1] = "";
    int v14 = *(const char **)v12;
    v24[0] = 0;
    v24[1] = "";
    uint64_t v17 = *(const char **)(v12 + 8);
    v25[0] = 0;
    v25[1] = "";
    if (v17)
    {
    }
    char v26 = 0;
    int v27 = *(_DWORD *)(v12 + 16);
    re::DynamicArray<re::SkeletalPoseMeshMap>::add((void *)(v10 + 280), (uint64_t)&v22);
    re::StringID::destroyString((re::StringID *)v25);
    re::StringID::destroyString((re::StringID *)v24);
    re::StringID::destroyString((re::StringID *)v23);
    v12 += 40;
    --a4;
  }
  while (a4);
LABEL_8:
  re::SkeletalPoseDefinitionAsset::assetType(appended);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 416))(&v22);
  uint64_t v18 = v22;
  if (v22) {
    id v19 = (id)(v22 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  return v18;
}

void *anonymous namespace'::appendSkeletalPoseDefinition(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v59 = *MEMORY[0x263EF8340];
  __int16 v38 = (_anonymous_namespace_ *)(result + 15);
  unint64_t v5 = result[17] + a2;
  if (result[16] < v5) {
    uint64_t result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v38, v5);
  }
  int v36 = v4;
  long long v37 = v4 + 25;
  unint64_t v6 = v4[27] + a2;
  if (v4[26] < v6) {
    uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(v37, v6);
  }
  if (a2)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (unint64_t *)(a3 + 24 * v7);
      unint64_t v9 = *v8;
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = 0;
      if (*v8) {
        break;
      }
LABEL_11:
      re::DynamicArray<re::FixedArray<re::StringID>>::add(v38, &v42);
      uint64_t v21 = a3 + 24 * v7;
      uint64_t v23 = *(void *)(v21 + 16);
      uint64_t v22 = (void *)(v21 + 16);
      if (v23)
      {
        unint64_t v24 = v36[17];
        unint64_t v13 = v24 - 1;
        __int16 v25 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(v37, v24);
        unint64_t v15 = v36[27];
        if (v15 <= v13) {
          goto LABEL_21;
        }
        uint64_t v26 = v36[29];
        unint64_t v27 = *v8;
        if (*v8)
        {
          uint64_t v28 = 0;
          unint64_t v15 = 0;
          uint64_t v29 = v26 + 24 * v13;
          long long v30 = (unint64_t *)(v29 + 8);
          long long v31 = (void *)(v29 + 16);
          while (1)
          {
            unint64_t v12 = *v30;
            if (*v30 <= v15) {
              break;
            }
            long long v32 = (long long *)(*v22 + v28);
            long long v33 = (_OWORD *)(*v31 + v28);
            long long v34 = *v32;
            long long v35 = v32[2];
            v33[1] = v32[1];
            void v33[2] = v35;
            *long long v33 = v34;
            ++v15;
            v28 += 48;
            if (v15 >= *v8) {
              goto LABEL_17;
            }
          }
LABEL_20:
          uint64_t v40 = 0;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v54 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v46 = 136315906;
          long long v47 = "operator[]";
          __int16 v48 = 1024;
          int v49 = 468;
          __int16 v50 = 2048;
          unint64_t v51 = v15;
          __int16 v52 = 2048;
          unint64_t v53 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_21:
          uint64_t v40 = 0;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v54 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v46 = 136315906;
          long long v47 = "operator[]";
          __int16 v48 = 1024;
          int v49 = 789;
          __int16 v50 = 2048;
          unint64_t v51 = v13;
          __int16 v52 = 2048;
          unint64_t v53 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
LABEL_17:
      uint64_t result = re::FixedArray<re::StringID>::deinit(&v42);
      if (++v7 == a2) {
        return result;
      }
    }
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = a3 + 24 * v7 + 8;
    while (1)
    {
      int v14 = *(const char **)(*(void *)v13 + 8 * v12);
      uint64_t v40 = 0;
      unint64_t v41 = "";
      unint64_t v15 = v43;
      if (v43 <= v12) {
        break;
      }
      int v16 = (void *)(v44 + v11);
      uint64_t v17 = v40;
      uint64_t v18 = v41;
      uint64_t v40 = 0;
      unint64_t v41 = "";
      uint64_t v19 = *(void *)(v44 + v11 + 8);
      unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v44 + v11) & 1;
      v16[1] = v18;
      *(void *)&long long v54 = v20;
      *((void *)&v54 + 1) = v19;
      *int v16 = v17;
      re::StringID::destroyString((re::StringID *)&v54);
      re::StringID::destroyString((re::StringID *)&v40);
      ++v12;
      v11 += 16;
      if (v12 >= *v8) {
        goto LABEL_11;
      }
    }
    uint64_t v45 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v46 = 136315906;
    long long v47 = "operator[]";
    __int16 v48 = 1024;
    int v49 = 468;
    __int16 v50 = 2048;
    unint64_t v51 = v12;
    __int16 v52 = 2048;
    unint64_t v53 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

uint64_t RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  unint64_t v12 = re::globalAllocators(a1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 320, 8);
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + ++*(void *)(result + 272) = 0u;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  unint64_t v61 = (_anonymous_namespace_ *)(v13 + 160);
  re::SkeletalPoseDefinitionAsset::init((re::SkeletalPoseDefinitionAsset *)v13, 0);
  uint64_t v62 = a4;
  unint64_t v15 = *(void *)(v13 + 176) + a4;
  if (*(void *)(v13 + 168) < v15) {
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v61, v15);
  }
  uint64_t v59 = (void *)(v13 + 240);
  unint64_t v16 = *(void *)(v13 + 256) + a4;
  if (*(void *)(v13 + 248) < v16) {
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(v59, v16);
  }
  if (a4)
  {
    uint64_t v17 = 0;
    uint64_t v60 = a5;
    while (1)
    {
      uint64_t v18 = (unint64_t *)(a5 + 24 * v17);
      unint64_t v19 = *v18;
      unint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v65 = 0;
      if (*v18) {
        break;
      }
LABEL_11:
      re::DynamicArray<re::FixedArray<re::StringID>>::add(v61, &v65);
      uint64_t v31 = a5 + 24 * v17;
      uint64_t v33 = *(void *)(v31 + 16);
      long long v32 = (void *)(v31 + 16);
      if (v33)
      {
        unint64_t v34 = *(void *)(v13 + 176);
        unint64_t v23 = v34 - 1;
        long long v35 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(v59, v34);
        unint64_t v22 = *(void *)(v13 + 256);
        if (v22 <= v23) {
          goto LABEL_31;
        }
        uint64_t v36 = *(void *)(v13 + 272);
        unint64_t v37 = *v18;
        if (*v18)
        {
          uint64_t v38 = 0;
          unint64_t v22 = 0;
          uint64_t v39 = v36 + 24 * v23;
          uint64_t v40 = (unint64_t *)(v39 + 8);
          unint64_t v41 = (void *)(v39 + 16);
          while (1)
          {
            unint64_t v23 = *v40;
            if (*v40 <= v22) {
              break;
            }
            uint64_t v42 = (long long *)(*v32 + v38);
            long long v44 = v42[2];
            long long v43 = v42[3];
            long long v46 = *v42;
            long long v45 = v42[1];
            long long v47 = (_OWORD *)(*v41 + v38);
            *long long v47 = v46;
            v47[1] = v45;
            char v47[2] = v44;
            v47[3] = v43;
            ++v22;
            v38 += 64;
            if (v22 >= *v18) {
              goto LABEL_17;
            }
          }
LABEL_30:
          uint64_t v63 = 0;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v77 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v69 = 136315906;
          long long v70 = "operator[]";
          __int16 v71 = 1024;
          int v72 = 468;
          __int16 v73 = 2048;
          unint64_t v74 = v22;
          __int16 v75 = 2048;
          unint64_t v76 = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_31:
          uint64_t v63 = 0;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v77 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v69 = 136315906;
          long long v70 = "operator[]";
          __int16 v71 = 1024;
          int v72 = 789;
          __int16 v73 = 2048;
          unint64_t v74 = v23;
          __int16 v75 = 2048;
          unint64_t v76 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
LABEL_17:
      appended = (_anonymous_namespace_ *)re::FixedArray<re::StringID>::deinit(&v65);
      ++v17;
      a5 = v60;
      if (v17 == v62) {
        goto LABEL_18;
      }
    }
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v23 = a5 + 24 * v17 + 8;
    while (1)
    {
      unint64_t v24 = *(const char **)(*(void *)v23 + 8 * v22);
      uint64_t v63 = 0;
      __int16 v64 = "";
      unint64_t v25 = v66;
      if (v66 <= v22) {
        break;
      }
      uint64_t v26 = (void *)(v67 + v21);
      uint64_t v27 = v63;
      uint64_t v28 = v64;
      uint64_t v63 = 0;
      __int16 v64 = "";
      uint64_t v29 = *(void *)(v67 + v21 + 8);
      unint64_t v30 = v27 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v67 + v21) & 1;
      v26[1] = v28;
      *(void *)&long long v77 = v30;
      *((void *)&v77 + 1) = v29;
      *uint64_t v26 = v27;
      re::StringID::destroyString((re::StringID *)&v77);
      re::StringID::destroyString((re::StringID *)&v63);
      ++v22;
      v21 += 16;
      if (v22 >= *v18) {
        goto LABEL_11;
      }
    }
    uint64_t v68 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v77 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v69 = 136315906;
    long long v70 = "operator[]";
    __int16 v71 = 1024;
    int v72 = 468;
    __int16 v73 = 2048;
    unint64_t v74 = v22;
    __int16 v75 = 2048;
    unint64_t v76 = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
LABEL_18:
  if (*(void *)(v13 + 288) >= a6)
  {
    if (!a6) {
      goto LABEL_26;
    }
  }
  else
  {
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)(v13 + 280), a6);
  }
  uint64_t v48 = a7 + 24;
  do
  {
    LOBYTE(v77) = *(unsigned char *)(v48 - 24);
    int v49 = *(const char **)(v48 - 16);
    *((void *)&v77 + 1) = 0;
    *(void *)&long long v78 = "";
    __int16 v50 = *(const char **)(v48 - 8);
    *((void *)&v78 + 1) = 0;
    *(void *)&long long v79 = "";
    unint64_t v53 = *(const char **)v48;
    if (*(void *)v48)
    {
      *((void *)&v79 + 1) = 0;
      *(void *)&long long v80 = "";
    }
    else
    {
      *((void *)&v79 + 1) = 0;
      *(void *)&long long v80 = "";
    }
    BYTE8(v80) = *(unsigned char *)(v48 + 8);
    HIDWORD(v80) = *(_DWORD *)(v48 + 12);
    re::DynamicArray<re::SkeletalPoseMeshMap>::add((void *)(v13 + 280), (uint64_t)&v77);
    re::StringID::destroyString((re::StringID *)((char *)&v79 + 8));
    re::StringID::destroyString((re::StringID *)((char *)&v78 + 8));
    re::StringID::destroyString((re::StringID *)((char *)&v77 + 8));
    v48 += 40;
    --a6;
  }
  while (a6);
LABEL_26:
  re::SkeletalPoseDefinitionAsset::assetType(appended);
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 416))(&v77);
  uint64_t v54 = v77;
  if ((void)v77) {
    id v55 = (id)(v77 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v77);
  return v54;
}

uint64_t RESkeletalPoseDefinitionAssetCreateAssetForMesh(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v13);
  id v3 = (re *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v13);
  uint64_t v4 = re::globalAllocators(v3);
  unint64_t v5 = (re::SkeletalPoseDefinitionAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 320, 8);
  unint64_t v6 = v5;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 1re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  if (v3) {
    re::SkeletalPoseDefinitionAsset::init(v5, v3, 0);
  }
  else {
    uint64_t v7 = (re::SkeletalPoseDefinitionAsset *)re::SkeletalPoseDefinitionAsset::init(v5, 0);
  }
  uint64_t v8 = re::SkeletalPoseDefinitionAsset::assetType(v7);
  (*(void (**)(void *__return_ptr, uint64_t, re::SkeletalPoseDefinitionAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v12, a1, v6, v8, 0, 0, 0);
  uint64_t v9 = v12[0];
  if (v12[0]) {
    id v10 = (id)(v12[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v9;
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 136);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

const char *RESkeletalPoseDefinitionAssetGetPoseName(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 56);
    if (v4 <= a2)
    {
      void v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      uint64_t v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v5 = *(const char **)(*(void *)(v3 + 72) + 16 * a2 + 8);
  }
  else
  {
    unint64_t v5 = "";
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

uint64_t RESkeletalPoseDefinitionAssetGetJointCount(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 136);
    if (v4 <= a2)
    {
      void v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      uint64_t v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *(void *)(*(void *)(v3 + 152) + 24 * a2 + 8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

const char *RESkeletalPoseDefinitionAssetGetJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v5 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v10);
  if (!v5)
  {
    int v8 = "";
    goto LABEL_6;
  }
  unint64_t v6 = *(void *)(v5 + 136);
  if (v6 <= a2)
  {
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 797;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 476;
    __int16 v16 = 2048;
    unint64_t v17 = a3;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 152);
  unint64_t v6 = *(void *)(v7 + 24 * a2 + 8);
  if (v6 <= a3) {
    goto LABEL_8;
  }
  int v8 = *(const char **)(*(void *)(v7 + 24 * a2 + 16) + 16 * a3 + 8);
LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v8;
}

const char *RESkeletalPoseDefinitionAssetGetModelPoseName(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 96);
    if (v4 <= a2)
    {
      void v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      uint64_t v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *(const char **)(*(void *)(v3 + 112) + 16 * a2 + 8);
  }
  else
  {
    uint64_t v5 = "";
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpacePoseCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 176);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpaceJointCount(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 176);
    if (v4 <= a2)
    {
      void v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      uint64_t v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *(void *)(*(void *)(v3 + 192) + 24 * a2 + 8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

const char *RESkeletalPoseDefinitionAssetGetModelSpaceJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v5 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v10);
  if (!v5)
  {
    int v8 = "";
    goto LABEL_6;
  }
  unint64_t v6 = *(void *)(v5 + 176);
  if (v6 <= a2)
  {
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 797;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    uint64_t v11 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v12 = 136315906;
    unint64_t v13 = "operator[]";
    __int16 v14 = 1024;
    int v15 = 476;
    __int16 v16 = 2048;
    unint64_t v17 = a3;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 192);
  unint64_t v6 = *(void *)(v7 + 24 * a2 + 8);
  if (v6 <= a3) {
    goto LABEL_8;
  }
  int v8 = *(const char **)(*(void *)(v7 + 24 * a2 + 16) + 16 * a3 + 8);
LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v8;
}

uint64_t RESkeletalPoseDefinitionAssetGetJointDefaultTransform(uint64_t a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  uint64_t v7 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v14);
  if (v7 && *(void *)(v7 + 216) > a2 && (uint64_t v8 = *(void *)(v7 + 232), *(void *)(v8 + 24 * a2 + 8) > a3))
  {
    uint64_t v9 = (long long *)(*(void *)(v8 + 24 * a2 + 16) + 48 * a3);
    long long v10 = *v9;
    long long v11 = v9[2];
    a4[1] = v9[1];
    a4[2] = v11;
    *a4 = v10;
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v12;
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpaceJointDefaultTransform(uint64_t a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v15);
  uint64_t v7 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v15);
  if (v7 && *(void *)(v7 + 256) > a2 && (uint64_t v8 = *(void *)(v7 + 272), *(void *)(v8 + 24 * a2 + 8) > a3))
  {
    uint64_t v9 = (long long *)(*(void *)(v8 + 24 * a2 + 16) + (a3 << 6));
    long long v10 = *v9;
    long long v11 = v9[1];
    long long v12 = v9[3];
    a4[2] = v9[2];
    a4[3] = v12;
    *a4 = v10;
    a4[1] = v11;
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v13;
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseMeshMapCountEx(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 296);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void RESkeletalPoseDefinitionAssetGetPoseMeshMapEx(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v5 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v12);
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 296);
    if (v6 <= a2)
    {
      void v12[3] = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      __int16 v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 797;
      __int16 v17 = 2048;
      unint64_t v18 = a2;
      __int16 v19 = 2048;
      unint64_t v20 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v7 = *(void *)(v5 + 312);
    uint64_t v8 = v7 + (a2 << 6);
    *(unsigned char *)a3 = *(unsigned char *)v8;
    *(void *)(a3 + 8) = *(void *)(v8 + 16);
    uint64_t v9 = *(unsigned char **)(v8 + 32);
    if (v9 && !*v9) {
      uint64_t v9 = 0;
    }
    *(void *)(a3 + 16) = v9;
    long long v10 = *(unsigned char **)(v8 + 48);
    if (v10 && !*v10) {
      long long v10 = 0;
    }
    *(void *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v10;
    uint64_t v11 = v7 + (a2 << 6);
    *(unsigned char *)(a3 + 32) = *(unsigned char *)(v11 + 56) == 1;
    *(_DWORD *)(a3 + 36) = *(_DWORD *)(v11 + 60);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseMeshMapCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 296);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 312);
  uint64_t v5 = v1 << 6;
  unint64_t v6 = (unsigned __int8 *)(v4 + 56);
  do
  {
    int v7 = *v6;
    v6 += 64;
    if (!v7) {
      ++result;
    }
    v5 -= 64;
  }
  while (v5);
  return result;
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseMeshMap(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 296);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3 << 6;
    for (unint64_t i = (_DWORD *)(*(void *)(result + 312) + 60); ; i += 16)
    {
      if (!*((unsigned char *)i - 4)) {
        ++v4;
      }
      if (v4 > a2) {
        break;
      }
      v5 -= 64;
      if (!v5) {
        return result;
      }
    }
    *(unsigned char *)a3 = *((unsigned char *)i - 60);
    *(void *)(a3 + 8) = *(void *)(i - 11);
    int v7 = *(unsigned char **)(i - 7);
    if (v7 && !*v7) {
      int v7 = 0;
    }
    *(void *)(a3 + 16) = v7;
    uint64_t v8 = *(unsigned char **)(i - 3);
    if (v8)
    {
      if (!*v8) {
        uint64_t v8 = 0;
      }
    }
    *(void *)(a3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
    *(_DWORD *)(a3 + 32) = *i;
  }
  return result;
}

uint64_t RESkeletalPoseDefinitionAssetGetSkeletonCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t RESkeletalPoseDefinitionAssetGetSkeletonAsset(uint64_t a1, unint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v9);
  if (!v3) {
    goto LABEL_6;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a2)
  {
    _DWORD v9[3] = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v10 = 136315906;
    uint64_t v11 = "operator[]";
    __int16 v12 = 1024;
    int v13 = 797;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    __int16 v16 = 2048;
    unint64_t v17 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (*(void *)(v5 + 24 * a2 + 8))
  {
    uint64_t v6 = *(void *)(v5 + 24 * a2);
    if (v6) {
      id v7 = (id)(v6 + 8);
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v6;
}

uint64_t RESkeletalPoseDefinitionAssetGetSkeletonAssetForPose(uint64_t a1, uint64_t a2, int a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v22);
  uint64_t v5 = (void *)re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v22);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_WORD *)long long v21 = 0;
    int v10 = "Invalid SkeletalPoseDefinitionAsset";
    goto LABEL_36;
  }
  uint64_t v6 = v5;
  if (v5[2] == 1)
  {
    id v7 = (uint64_t *)v5[4];
    if (v7[1])
    {
      uint64_t v8 = *v7;
      if (*v7) {
        goto LABEL_33;
      }
      goto LABEL_34;
    }
LABEL_31:
    uint64_t v8 = 0;
    goto LABEL_34;
  }
  uint64_t v11 = v5[37];
  if (!v11)
  {
LABEL_27:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_WORD *)long long v21 = 0;
    int v10 = "Unable to find associated SkeletonAsset for SkeletalPose";
LABEL_36:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, v21, 2u);
LABEL_30:

    goto LABEL_31;
  }
  uint64_t v12 = v5[39];
  uint64_t v13 = v12 + (v11 << 6);
  while (1)
  {
    if (*(_DWORD *)(v12 + 60) == a2 && *(unsigned __int8 *)(v12 + 56) == a3)
    {
      uint64_t v14 = v6[2];
      if (v14) {
        break;
      }
    }
LABEL_26:
    v12 += 64;
    if (v12 == v13) {
      goto LABEL_27;
    }
  }
  unint64_t v15 = (re::SkeletonAsset *)v6[4];
  uint64_t v16 = 24 * v14;
  while (1)
  {
    if (*((void *)v15 + 1))
    {
      uint64_t v17 = re::AssetHandle::asset<re::SkeletonAsset>(v15);
      if (!v17)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        long long v18 = (id)CoreRELog::log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v21 = 0;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Invalid SkeletonAsset handle found", v21, 2u);
        }

        goto LABEL_25;
      }
      if (re::StringID::operator==((void *)(v17 + 88), (void *)(v12 + 40))) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (re::SkeletonAsset *)((char *)v15 + 24);
    v16 -= 24;
    if (!v16) {
      goto LABEL_26;
    }
  }
  uint64_t v8 = *(void *)v15;
  if (*(void *)v15) {
LABEL_33:
  }
    id v19 = (id)(v8 + 8);
LABEL_34:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v8;
}

uint64_t RESkeletonPoseDefinitionAssetCreateBuilder(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 344, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E737478;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)((char *)v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  uint64_t v3 = (_OWORD *)((char *)v3 + 24);
  *(_OWORD *)(v2 + 248) = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  re::SkeletalPoseDefinitionAsset::init((re::SkeletalPoseDefinitionAsset *)v3, 0);
  return v2;
}

uint64_t RESkeletonPoseDefinitionBuilderAddLocalPose(void *a1, const char *a2, unint64_t a3, const char **a4)
{
  uint64_t v8 = a1 + 8;
  uint64_t v9 = a1[10];
  unint64_t v25 = 0;
  uint64_t v26 = "";
  re::DynamicArray<re::StringID>::add(v8, (uint64_t *)&v25);
  re::StringID::destroyString((re::StringID *)&v25);
  int v10 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::resize(a1 + 18, v9 + 1);
  uint64_t v11 = (void *)(a1[22] + 24 * a1[20] - 24);
  if (a3)
  {
    uint64_t v13 = *(void **)(a1[22] + 24 * a1[20] - 8);
    uint64_t v14 = 8 * a3;
    do
    {
      unint64_t v15 = *a4++;
      uint64_t v23 = 0;
      long long v24 = "";
      uint64_t v16 = v23;
      uint64_t v17 = v24;
      uint64_t v23 = 0;
      long long v24 = "";
      long long v18 = (const char *)v13[1];
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
      v13[1] = v17;
      unint64_t v25 = v19;
      uint64_t v26 = v18;
      *uint64_t v13 = v16;
      v13 += 2;
      re::StringID::destroyString((re::StringID *)&v25);
      re::StringID::destroyString((re::StringID *)&v23);
      v14 -= 8;
    }
    while (v14);
  }
  long long v20 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(a1 + 28, v9 + 1);
  uint64_t v21 = a1[32] + 24 * a1[30];
  *(void *)(v21 - 16) = 0;
  return v9;
}

BOOL RESkeletonPoseDefinitionBuilderSetLocalPoseDefaultTransforms(_anonymous_namespace_ *a1, unint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v6 = *((void *)a1 + 20);
  if (v6 <= a2)
  {
    uint64_t v12 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    uint64_t v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(*((void *)a1 + 22) + 24 * a2 + 8);
  if (v9 != a3) {
    return v9 == a3;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __uuid_t dst = 0;
  memcpy(__dst, a4, 48 * a3);
  unint64_t v4 = *((void *)a1 + 30);
  if (v4 <= a2)
  {
LABEL_9:
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    uint64_t v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::FixedArray<float>::operator=((uint64_t *)(*((void *)a1 + 32) + 24 * a2), &v12);
  if (v12 && v13) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  return v9 == a3;
}

uint64_t RESkeletonPoseDefinitionBuilderAddModelPose(void *a1, const char *a2, unint64_t a3, const char **a4)
{
  uint64_t v8 = a1 + 13;
  uint64_t v9 = a1[15];
  unint64_t v25 = 0;
  long long v26 = "";
  re::DynamicArray<re::StringID>::add(v8, (uint64_t *)&v25);
  re::StringID::destroyString((re::StringID *)&v25);
  int v10 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::resize(a1 + 23, v9 + 1);
  uint64_t v11 = (void *)(a1[27] + 24 * a1[25] - 24);
  if (a3)
  {
    uint64_t v13 = *(void **)(a1[27] + 24 * a1[25] - 8);
    uint64_t v14 = 8 * a3;
    do
    {
      uint64_t v15 = *a4++;
      uint64_t v23 = 0;
      long long v24 = "";
      uint64_t v16 = v23;
      uint64_t v17 = v24;
      uint64_t v23 = 0;
      long long v24 = "";
      __int16 v18 = (const char *)v13[1];
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
      v13[1] = v17;
      unint64_t v25 = v19;
      long long v26 = v18;
      *uint64_t v13 = v16;
      v13 += 2;
      re::StringID::destroyString((re::StringID *)&v25);
      re::StringID::destroyString((re::StringID *)&v23);
      v14 -= 8;
    }
    while (v14);
  }
  __int16 v20 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(a1 + 33, v9 + 1);
  uint64_t v21 = a1[37] + 24 * a1[35];
  *(void *)(v21 - 16) = 0;
  return v9;
}

BOOL RESkeletonPoseDefinitionBuilderSetModelPoseDefaultTransforms(_anonymous_namespace_ *a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v6 = *((void *)a1 + 25);
  if (v6 <= a2)
  {
    uint64_t v17 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    __int16 v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 2048;
    unint64_t v28 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(*((void *)a1 + 27) + 24 * a2 + 8);
  if (v9 != a3) {
    return v9 == a3;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a3)
  {
    uint64_t v11 = &a4[4 * a3];
    uint64_t v12 = v19;
    do
    {
      long long v13 = a4[1];
      long long v14 = a4[2];
      long long v15 = a4[3];
      *uint64_t v12 = *a4;
      v12[1] = v13;
      void v12[2] = v14;
      void v12[3] = v15;
      a4 += 4;
      v12 += 4;
    }
    while (a4 != v11);
  }
  unint64_t v4 = *((void *)a1 + 35);
  if (v4 <= a2)
  {
LABEL_12:
    uint64_t v20 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    __int16 v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 2048;
    unint64_t v28 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::FixedArray<float>::operator=((uint64_t *)(*((void *)a1 + 37) + 24 * a2), &v17);
  if (v17 && v18) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return v9 == a3;
}

void RESkeletonPoseDefinitionBuilderAddMeshMapping(_anonymous_namespace_ *a1, int a2, uint64_t a3, const char *a4)
{
  id v7 = (void *)((char *)a1 + 304);
  v12[0] = *(unsigned char *)a3;
  uint64_t v8 = *(const char **)(a3 + 8);
  v13[0] = 0;
  v13[1] = "";
  uint64_t v9 = *(const char **)(a3 + 16);
  v14[0] = 0;
  v14[1] = "";
  v15[0] = 0;
  v15[1] = "";
  char v16 = 0;
  int v17 = a2;
  re::DynamicArray<re::SkeletalPoseMeshMap>::add(v7, (uint64_t)v12);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
}

void RESkeletonPoseDefinitionBuilderAddModelSpaceMeshMapping(_anonymous_namespace_ *a1, int a2, uint64_t a3, const char *a4)
{
  id v7 = (void *)((char *)a1 + 304);
  v12[0] = *(unsigned char *)a3;
  uint64_t v8 = *(const char **)(a3 + 8);
  v13[0] = 0;
  v13[1] = "";
  uint64_t v9 = *(const char **)(a3 + 16);
  v14[0] = 0;
  v14[1] = "";
  v15[0] = 0;
  v15[1] = "";
  char v16 = 1;
  int v17 = a2;
  re::DynamicArray<re::SkeletalPoseMeshMap>::add(v7, (uint64_t)v12);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
}

uint64_t RESkeletonPoseDefinitionBuilderCreateAsset(uint64_t a1, uint64_t a2)
{
  void v31[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 320, 8);
  *(void *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(void *)uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 8) = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(v5 + 24);
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 40) = *(void *)(a1 + 64);
  *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 48) = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = *(void *)(v5 + 56);
  *(void *)(v5 + 56) = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v9;
  ++*(_DWORD *)(a1 + 88);
  ++*(_DWORD *)(v5 + 64);
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 80) = *(void *)(a1 + 104);
  *(void *)(a1 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 88) = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  uint64_t v10 = *(void *)(v5 + 96);
  *(void *)(v5 + 96) = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v11;
  ++*(_DWORD *)(a1 + 128);
  ++*(_DWORD *)(v5 + 104);
  *(void *)(v5 + 152) = 0;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 120) = *(void *)(a1 + 144);
  *(void *)(a1 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 128) = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  uint64_t v12 = *(void *)(v5 + 136);
  *(void *)(v5 + 136) = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v12;
  uint64_t v13 = *(void *)(v5 + 152);
  *(void *)(v5 + 152) = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v13;
  ++*(_DWORD *)(a1 + 168);
  ++*(_DWORD *)(v5 + 144);
  *(void *)(v5 + 192) = 0;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 176) = 0;
  *(void *)(v5 + 160) = 0;
  *(_DWORD *)(v5 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 160) = *(void *)(a1 + 184);
  *(void *)(a1 + 18re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 168) = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  uint64_t v14 = *(void *)(v5 + 176);
  *(void *)(v5 + 176) = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(v5 + 192);
  *(void *)(v5 + 192) = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v15;
  ++*(_DWORD *)(a1 + 208);
  ++*(_DWORD *)(v5 + 184);
  *(void *)(v5 + 232) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 216) = 0;
  *(void *)(v5 + 200) = 0;
  *(_DWORD *)(v5 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 200) = *(void *)(a1 + 224);
  *(void *)(a1 + 22re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 208) = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  uint64_t v16 = *(void *)(v5 + 216);
  *(void *)(v5 + 216) = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v16;
  uint64_t v17 = *(void *)(v5 + 232);
  *(void *)(v5 + 232) = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v17;
  ++*(_DWORD *)(a1 + 248);
  ++*(_DWORD *)(v5 + 224);
  *(void *)(v5 + ++*(void *)(result + 272) = 0;
  *(void *)(v5 + 248) = 0;
  *(void *)(v5 + 256) = 0;
  *(void *)(v5 + 240) = 0;
  *(_DWORD *)(v5 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 240) = *(void *)(a1 + 264);
  *(void *)(a1 + 26re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 248) = *(void *)(a1 + 272);
  *(void *)(a1 + ++*(void *)(result + 272) = 0;
  uint64_t v18 = *(void *)(v5 + 256);
  *(void *)(v5 + 256) = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v18;
  uint64_t v19 = *(void *)(v5 + 272);
  *(void *)(v5 + ++*(void *)(result + 272) = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v19;
  ++*(_DWORD *)(a1 + 288);
  ++*(_DWORD *)(v5 + 264);
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 280) = *(void *)(a1 + 304);
  *(void *)(a1 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v5 + 288) = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  uint64_t v20 = *(void *)(v5 + 296);
  *(void *)(v5 + 296) = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = v20;
  uint64_t v21 = *(void *)(v5 + 312);
  *(void *)(v5 + 312) = *(void *)(a1 + 336);
  *(void *)(a1 + 336) = v21;
  ++*(_DWORD *)(a1 + 328);
  ++*(_DWORD *)(v5 + 304);
  uint64_t v31[3] = v31;
  long long v30 = v29;
  v31[0] = &unk_26E7374C0;
  uint64_t v28 = v5;
  v29[0] = &unk_26E7374C0;
  __int16 v22 = (re::SkeletalPoseDefinitionAsset *)std::__function::__value_func<void ()(re::SkeletalPoseDefinitionAsset *)>::~__value_func[abi:nn180100](v31);
  __int16 v23 = re::SkeletalPoseDefinitionAsset::assetType(v22);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a2 + 416))(v31, a2, v28, v23, 0, 0, 0);
  uint64_t v24 = v31[0];
  if (v31[0])
  {
    id v25 = (id)(v31[0] + 8);
    uint64_t v28 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
  if (!v28) {
    goto LABEL_6;
  }
  v31[0] = v28;
  if (v30)
  {
    (*(void (**)(void *, void *))(*v30 + 48))(v30, v31);
LABEL_6:
    std::__function::__value_func<void ()(re::SkeletalPoseDefinitionAsset *)>::~__value_func[abi:nn180100](v29);
    return v24;
  }
  __int16 v27 = std::__throw_bad_function_call[abi:nn180100]();
  return re::Shareable<re::SkeletalPoseDefinitionAsset>::~Shareable(v27);
}

void *re::Shareable<re::SkeletalPoseDefinitionAsset>::~Shareable(void *a1)
{
  *a1 = &unk_26E737478;
  uint64_t v2 = (uint64_t)(a1 + 28);
  uint64_t v3 = (uint64_t)(a1 + 3);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(v2);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a1 + 23));
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a1 + 18));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 13));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 8));
  re::DynamicArray<re::AssetHandle>::deinit(v3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::SkeletalPoseDefinitionAsset>::~Shareable(void *a1)
{
  *a1 = &unk_26E737478;
  uint64_t v2 = (uint64_t)(a1 + 28);
  uint64_t v3 = (uint64_t)(a1 + 3);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(v2);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a1 + 23));
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a1 + 18));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 13));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 8));
  re::DynamicArray<re::AssetHandle>::deinit(v3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7374C0;
  return result;
}

void std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7374C0;
}

re *std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::SkeletalPoseDefinitionAsset>((re *)"operator()", 36, *a2);
}

uint64_t std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::SkeletalPoseDefinitionAsset,std::function<void ()(re::SkeletalPoseDefinitionAsset*)>> re::makeDefaultUniquePtr<re::SkeletalPoseDefinitionAsset,re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset &&)::{lambda(re::SkeletalPoseDefinitionAsset*)#1},std::allocator<re::SkeletalPoseDefinitionAsset*>,void ()(re::SkeletalPoseDefinitionAsset &&)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::SkeletalPoseDefinitionAsset *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *RERayCastComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

uint64_t RERayCastComponentGetCastType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 80);
}

uint64_t RERayCastComponentSetCastType(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  *(_DWORD *)(result + 80) = v2;
  return result;
}

__n128 RERayCastComponentGetRay@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  long long v5 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)a3 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = *(__n128 *)(v4 + 64);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

__n128 RERayCastComponentSetRay(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  __n128 result = *(__n128 *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_DWORD *)(a2 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  return result;
}

uint64_t RERayCastComponentGetGroup(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 100);
}

uint64_t RERayCastComponentSetGroup(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  *(_DWORD *)(result + 100) = v2;
  return result;
}

uint64_t RERayCastComponentGetMask(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 104);
}

uint64_t RERayCastComponentSetMask(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  *(_DWORD *)(result + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v2;
  return result;
}

uint64_t RERayCastComponentHasContact(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (result) {
    return re::ecs2::EntityHandle::resolve((id *)(result + 64), *(void *)(result + 16)) != 0;
  }
  return result;
}

int32x4_t RERayCastComponentGetContactWorldPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 16);
  int32x4_t result = vdupq_n_s32(0x7FC00000u);
  if (v2)
  {
    int32x4_t v5 = result;
    uint64_t v4 = (int32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    int32x4_t result = v5;
    if (v4) {
      return v4[2];
    }
  }
  return result;
}

char *RERayCastComponentGetContactEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (id *)(v4 + 64);
  return re::ecs2::EntityHandle::resolve(v6, v5);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[275] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

id REShaderGraphAssetCopyArgumentReflection(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::ShaderGraphAsset>((re::ShaderGraphAsset *)v14);
  if (v1)
  {
    uint64_t v2 = (re::ShaderGraphAsset *)v1;
    uint64_t v3 = objc_opt_new();
    double CustomUniformsArgument = re::ShaderGraphAsset::getCustomUniformsArgument(v2, (uint64_t)v9);
    if (v12)
    {
      uint64_t v5 = (unsigned char *)(v13 + 77);
      uint64_t v6 = 80 * v12;
      do
      {
        if (*v5)
        {
          uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", *(void *)(v5 - 53), CustomUniformsArgument);
          [v3 addObject:v7];
        }
        v5 += 80;
        v6 -= 80;
      }
      while (v6);
    }
    re::FixedArray<re::MetalTypeInfo>::deinit(&v11);
    re::StringID::destroyString((re::StringID *)&v10);
    re::StringID::destroyString((re::StringID *)v9);
  }
  else
  {
    uint64_t v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v3;
}

void *RESkeletalDebugComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RESkeletalDebugComponentGetDrawModelSkeletonEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t RESkeletalDebugComponentSetDrawModelSkeletonEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentGetJointRenderDepthEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 27);
}

uint64_t RESkeletalDebugComponentSetJointRenderDepthEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 27) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentGetDrawRigJointsEnabled()
{
  return 0;
}

uint64_t RESkeletalDebugComponentGetDrawJointNamesEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t RESkeletalDebugComponentSetDrawJointNamesEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentGetDrawModelBoundingBoxEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t RESkeletalDebugComponentSetDrawModelBoundingBoxEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 120) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentGetDrawMeshPartBoundingBoxesEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 121);
}

uint64_t RESkeletalDebugComponentSetDrawMeshPartBoundingBoxesEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 121) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentGetJointNameRegexFilter(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return *(void *)(a1 + 48);
  }
  else {
    return a1 + 41;
  }
}

uint64_t RESkeletalDebugComponentSetJointNameRegexFilter(uint64_t a1, char *__s)
{
  uint64_t v3 = (re::DynamicString *)(a1 + 32);
  v5[0] = __s;
  v5[1] = strlen(__s);
  re::DynamicString::operator=(v3, (uint64_t)v5);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 RESkeletalDebugComponentGetTextColor3(__n128 *a1)
{
  return a1[4];
}

uint64_t RESkeletalDebugComponentSetTextColor3(uint64_t this, __n128 a2)
{
  a2.n128_u32[3] = 1.0;
  *(__n128 *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetTextColor4(__n128 *a1)
{
  return a1[4];
}

uint64_t RESkeletalDebugComponentSetTextColor4(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESkeletalDebugComponentGetTextScale(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

uint64_t RESkeletalDebugComponentSetTextScale(uint64_t this, float a2)
{
  *(float *)(this + 80) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetBoneColor3(__n128 *a1)
{
  return a1[6];
}

uint64_t RESkeletalDebugComponentSetBoneColor3(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetBoneColor4(__n128 *a1)
{
  return a1[6];
}

uint64_t RESkeletalDebugComponentSetBoneColor4(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESkeletalDebugComponentGetAxisLength(uint64_t a1)
{
  return *(float *)(a1 + 112);
}

uint64_t RESkeletalDebugComponentSetAxisLength(uint64_t this, float a2)
{
  *(float *)(this + 112) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetModelBoundingBoxColor4(__n128 *a1)
{
  return a1[9];
}

uint64_t RESkeletalDebugComponentSetModelBoundingBoxColor4(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetMeshPartBoundingBoxColor4(__n128 *a1)
{
  return a1[10];
}

uint64_t RESkeletalDebugComponentSetMeshPartBoundingBoxColor4(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 160) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESkeletalDebugComponentGetLineWidth(uint64_t a1)
{
  return *(float *)(a1 + 116);
}

uint64_t RESkeletalDebugComponentSetLineWidth(uint64_t this, float a2)
{
  *(float *)(this + 116) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetTextColor(__n128 *a1)
{
  return a1[4];
}

uint64_t RESkeletalDebugComponentSetTextColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESkeletalDebugComponentSetBoneColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 RESkeletalDebugComponentGetBoneColor(__n128 *a1)
{
  return a1[6];
}

double REShaderGraphMaterialInstanceCreate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ShaderGraphMaterial *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  return re::ShaderGraphMaterial::ShaderGraphMaterial(v3, a1);
}

void *REShaderGraphParameterCreateHandle(_anonymous_namespace_ *a1)
{
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  uint64_t v3 = re::globalAllocators(v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 40, 8);
  StringID v7 = v6;
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *uint64_t v4 = &unk_26E737550;
  re::StringID::StringID((re::StringID *)(v4 + 3), &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  re::StringID::destroyString((re::StringID *)&v6);
  return v4;
}

double REShaderGraphMaterialSetBoolParameterWithHandle(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  char __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 1uLL, &__s2, a1, (uint64_t)v8, 2u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetBoolParameter(re::ShaderGraphMaterial *a1, const char *a2, char a3)
{
  return re::ShaderGraphMaterial::setBool(a1, a2, a3, (uint64_t)&v4);
}

uint64_t REShaderGraphMaterialGetBoolParameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(unsigned __int8 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetFloatParameterWithHandle(void *a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v6, (uint64_t)v7);
  uint64_t v6 = 0;
  float __s2 = a3;
  re::ShaderGraphMaterial::setConstant(v5, 4uLL, &__s2, a1, (uint64_t)v7, 1u);
}

double REShaderGraphMaterialSetFloatParameter(re::ShaderGraphMaterial *a1, const char *a2, float a3)
{
  return re::ShaderGraphMaterial::setFloat(a1, a2, a3, (uint64_t)&v4);
}

float REShaderGraphMaterialGetFloatParameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(float *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetIntParameterWithHandle(void *a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  int __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 4uLL, &__s2, a1, (uint64_t)v8, 3u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetIntParameter(re::ShaderGraphMaterial *a1, const char *a2, int a3)
{
  return re::ShaderGraphMaterial::setInt(a1, a2, a3, (uint64_t)&v4);
}

uint64_t REShaderGraphMaterialGetIntParameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(unsigned int *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetUIntParameterWithHandle(void *a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  int __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 4uLL, &__s2, a1, (uint64_t)v8, 7u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetUIntParameter(re::ShaderGraphMaterial *a1, const char *a2, int a3)
{
  return re::ShaderGraphMaterial::setUint(a1, a2, a3, (uint64_t)&v4);
}

uint64_t REShaderGraphMaterialGetUIntParameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(unsigned int *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetFloat2ParameterWithHandle(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v6, (uint64_t)v7);
  uint64_t v6 = 0;
  double __s2 = a3;
  re::ShaderGraphMaterial::setConstant(v5, 8uLL, &__s2, a1, (uint64_t)v7, 0x20u);
}

double REShaderGraphMaterialSetFloat2Parameter(void *a1, char *a2, double a3)
{
  return re::ShaderGraphMaterial::setVector2F(a1, a2, *(uint64_t *)&a3, (uint64_t)&v4);
}

double REShaderGraphMaterialGetFloat2Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(double *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetInt2ParameterWithHandle(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v6, (uint64_t)v7);
  uint64_t v6 = 0;
  double __s2 = a3;
  re::ShaderGraphMaterial::setConstant(v5, 8uLL, &__s2, a1, (uint64_t)v7, 4u);
}

double REShaderGraphMaterialSetInt2Parameter(void *a1, char *a2, double a3)
{
  return re::ShaderGraphMaterial::setInt2(a1, a2, (uint64_t)&v4, a3);
}

double REShaderGraphMaterialGetInt2Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(double *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetUInt2ParameterWithHandle(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v6, (uint64_t)v7);
  uint64_t v6 = 0;
  double __s2 = a3;
  re::ShaderGraphMaterial::setConstant(v5, 8uLL, &__s2, a1, (uint64_t)v7, 8u);
}

double REShaderGraphMaterialSetUInt2Parameter(void *a1, char *a2, double a3)
{
  return re::ShaderGraphMaterial::setUint2(a1, a2, (uint64_t)&v4, a3);
}

double REShaderGraphMaterialGetUInt2Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(double *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetColor3ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v4 = *(void *)(a2 + 24) >> 1;
  return re::ShaderGraphMaterial::setColorGamut3F(a1, &v4, a3.n128_i64[0], a3.n128_u32[2], (uint64_t)v5);
}

double REShaderGraphMaterialSetColor3Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setColorGamut3F(a1, a2, a3.n128_i64[0], a3.n128_u32[2], (uint64_t)&v4);
}

double REShaderGraphMaterialGetColor3Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return COERCE_DOUBLE(re::ShaderGraphMaterial::colorGamut3FValue((uint64_t)a1, (uint64_t)v4));
}

double REShaderGraphMaterialSetFloat3ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 0x21u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetFloat3Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setVector3F(a1, a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)&v4);
}

__n128 REShaderGraphMaterialGetFloat3Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetInt3ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 5u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetInt3Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setInt3(a1, a2, (uint64_t)&v4, a3);
}

__n128 REShaderGraphMaterialGetInt3Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetUInt3ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 9u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetUInt3Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setUint3(a1, a2, (uint64_t)&v4, a3);
}

__n128 REShaderGraphMaterialGetUInt3Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetColor4ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v6 = *(void *)(a2 + 24) >> 1;
  __n128 v4 = a3;
  char v5 = 0;
  return re::ShaderGraphMaterial::setColorGamut4F(a1, &v6, (uint64_t)&v4, (uint64_t)v7);
}

double REShaderGraphMaterialSetColor4Parameter(void *a1, char *a2, __n128 a3)
{
  __n128 v4 = a3;
  char v5 = 0;
  return re::ShaderGraphMaterial::setColorGamut4F(a1, a2, (uint64_t)&v4, (uint64_t)v6);
}

double REShaderGraphMaterialGetColor4Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v5);
  re::ShaderGraphMaterial::colorGamut4FValue((uint64_t)a1, (uint64_t)v5, (uint64_t)v4);
  return v4[0];
}

double REShaderGraphMaterialSetFloat4ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 0x22u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetFloat4Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setVector4F(a1, a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)&v4);
}

__n128 REShaderGraphMaterialGetFloat4Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetInt4ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 6u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetInt4Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setInt4(a1, a2, (uint64_t)&v4, a3);
}

__n128 REShaderGraphMaterialGetInt4Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetUInt4ParameterWithHandle(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v7 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v7, (uint64_t)v8);
  uint64_t v7 = 0;
  __n128 __s2 = a3;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v6, 0x10uLL, &__s2, a1, (uint64_t)v8, 0xAu).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetUInt4Parameter(void *a1, char *a2, __n128 a3)
{
  return re::ShaderGraphMaterial::setUint4(a1, a2, (uint64_t)&v4, a3);
}

__n128 REShaderGraphMaterialGetUInt4Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetFloat2x2ParameterWithHandle(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v8, (uint64_t)v9);
  uint64_t v8 = 0;
  *(double *)__n128 __s2 = a3;
  *(double *)&__s2[1] = a4;
  re::ShaderGraphMaterial::setConstant(v7, 0x10uLL, __s2, a1, (uint64_t)v9, 0x30u);
}

double REShaderGraphMaterialSetFloat2x2Parameter(void *a1, char *a2, double a3, double a4)
{
  return re::ShaderGraphMaterial::setMatrix2x2F(a1, a2, *(uint64_t *)&a3, *(uint64_t *)&a4, (uint64_t)&v5);
}

double REShaderGraphMaterialGetFloat2x2Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(double *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetFloat3x3ParameterWithHandle(void *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v12 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v12, (uint64_t)v13);
  uint64_t v12 = 0;
  __s2[0] = a3;
  __s2[1] = a4;
  void __s2[2] = a5;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v11, 0x30uLL, __s2, a1, (uint64_t)v13, 0x31u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetFloat3x3Parameter(void *a1, char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  v6[0] = a3;
  v6[1] = a4;
  void v6[2] = a5;
  return re::ShaderGraphMaterial::setMatrix3x3F(a1, a2, v6, (uint64_t)v7);
}

double REShaderGraphMaterialGetFloat3x3Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(double *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

double REShaderGraphMaterialSetFloat4x4ParameterWithHandle(void *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v14 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::handle(a1, &v14, (uint64_t)v15);
  uint64_t v14 = 0;
  __s2[0] = a3;
  __s2[1] = a4;
  void __s2[2] = a5;
  _OWORD __s2[3] = a6;
  *(void *)&double result = re::ShaderGraphMaterial::setConstant(v13, 0x40uLL, __s2, a1, (uint64_t)v15, 0x32u).n128_u64[0];
  return result;
}

double REShaderGraphMaterialSetFloat4x4Parameter(void *a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v7[0] = a3;
  v7[1] = a4;
  void v7[2] = a5;
  void v7[3] = a6;
  return re::ShaderGraphMaterial::setMatrix4x4F(a1, a2, v7, (uint64_t)v8);
}

__n128 REShaderGraphMaterialGetFloat4x4Parameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v4);
  return *(__n128 *)re::ShaderGraphMaterial::getConstant((uint64_t)a1, (uint64_t)v4);
}

void REShaderGraphMaterialSetTextureParameterWithHandle(void *a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v7);
  uint64_t v5 = *(void *)(a2 + 24) >> 1;
  re::ShaderGraphMaterial::setAssetHandle(a1, &v5, v7, (uint64_t)v6);
  v6[0] = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void REShaderGraphMaterialSetTextureParameter(re::ShaderGraphMaterial *a1, const char *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v6);
  re::ShaderGraphMaterial::setAssetHandle(a1, a2, (const re::AssetHandle *)v6, (uint64_t)v5);
  v5[0] = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t REShaderGraphMaterialGetTextureParameter(re::ShaderGraphMaterial *a1, const char *a2)
{
  re::ShaderGraphMaterial::handle(a1, a2, (uint64_t)v6);
  re::ShaderGraphMaterial::assetHandleValue((uint64_t)a1, (uint64_t)v6, (re::AssetHandle *)v5);
  uint64_t v3 = v5[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

void re::ShaderGraphParameterHandle::~ShaderGraphParameterHandle(re::ShaderGraphParameterHandle *this)
{
  *(void *)this = &unk_26E737550;
  re::StringID::destroyString((re::ShaderGraphParameterHandle *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E737550;
  re::StringID::destroyString((re::ShaderGraphParameterHandle *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RERenderManagerGetTargetDisplayInfoProvider(uint64_t a1)
{
  return *(void *)(a1 + 288);
}

__n128 RETargetDisplayInfoProviderGetTintMatrix(__n128 *a1)
{
  unint64_t v2 = a1[76].n128_u64[0];
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
    return a1[77];
  }
  return result;
}

void RETargetDisplayInfoProviderSetDisplayMinimumBrightnessNitsProvider(void *a1, void *a2)
{
  id v3 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)a1);
  *a1 = &unk_26E737598;
  uint64_t v4 = _Block_copy(v3);

  a1[1] = v4;
  a1[4] = a1;
}

void RETargetDisplayInfoProviderSetDisplayAverageBrightnessNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 6);
  id v4 = a2;
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable(v3);
  a1[6] = &unk_26E737600;
  uint64_t v5 = _Block_copy(v4);

  a1[7] = v5;
  a1[10] = v3;
}

void RETargetDisplayInfoProviderSetDisplayMaximumBrightnessNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 12);
  id v4 = a2;
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable(v3);
  a1[12] = &unk_26E737600;
  uint64_t v5 = _Block_copy(v4);

  a1[13] = v5;
  a1[16] = v3;
}

void RETargetDisplayInfoProviderSetDisplayContrastRatioProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 18);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[18] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[19] = v5;
  a1[22] = v3;
}

void RETargetDisplayInfoProviderSetDisplayAdjustsBlackLevelProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 24);
  id v4 = a2;
  re::FunctionBase<24ul,BOOL ()(void)>::destroyCallable(v3);
  a1[24] = &unk_26E737668;
  uint64_t v5 = _Block_copy(v4);

  a1[25] = v5;
  a1[28] = v3;
}

void RETargetDisplayInfoProviderSetDisplaySDRMaxBrightnessNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 30);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[30] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[31] = v5;
  a1[34] = v3;
}

void RETargetDisplayInfoProviderSetDisplayAmbientLuxProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 36);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[36] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[37] = v5;
  a1[40] = v3;
}

void RETargetDisplayInfoProviderSetDisplayCurrentMinNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 42);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[42] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[43] = v5;
  a1[46] = v3;
}

void RETargetDisplayInfoProviderSetDisplayCurrentMaxNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 48);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[48] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[49] = v5;
  a1[52] = v3;
}

void RETargetDisplayInfoProviderSetDisplayTargetNitsProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 54);
  id v4 = a2;
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable(v3);
  a1[54] = &unk_26E737600;
  uint64_t v5 = _Block_copy(v4);

  a1[55] = v5;
  a1[58] = v3;
}

void RETargetDisplayInfoProviderSetDisplayMaxEDRValueProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 60);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[60] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[61] = v5;
  a1[64] = v3;
}

void RETargetDisplayInfoProviderSetDisplayMaxEDRFactorProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 66);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[66] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[67] = v5;
  a1[70] = v3;
}

void RETargetDisplayInfoProviderSetContentModeProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 72);
  id v4 = a2;
  re::FunctionBase<24ul,unsigned char ()(void)>::destroyCallable(v3);
  a1[72] = &unk_26E7376C0;
  uint64_t v5 = _Block_copy(v4);

  a1[73] = v5;
  a1[76] = v3;
}

void RETargetDisplayInfoProviderSetCameraScaleProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 78);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[78] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[79] = v5;
  a1[82] = v3;
}

void RETargetDisplayInfoProviderSetClippingPointLuxProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 84);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[84] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[85] = v5;
  a1[88] = v3;
}

uint64_t (***RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,void ()(re::TonemapLUT)>::destroyCallable((uint64_t)(a1 + 95));
  a1[95] = &unk_26E737728;
  a1[96] = v3;
  a1[99] = a1 + 95;
  return result;
}

uint64_t (***RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,void ()(re::TonemapFloatLUT)>::destroyCallable((uint64_t)(a1 + 90));
  a1[90] = &unk_26E737790;
  a1[91] = v3;
  a1[94] = a1 + 90;
  return result;
}

uint64_t (***RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,re::TonemapLUTDomain ()(void)>::destroyCallable((uint64_t)(a1 + 100));
  a1[100] = &unk_26E7377F8;
  a1[101] = v3;
  a1[104] = a1 + 100;
  return result;
}

uint64_t (***RETargetDisplayInfoProviderSetImageHistogramConsumer(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,void ()(re::ImageHistogram)>::destroyCallable((uint64_t)(a1 + 107));
  a1[107] = &unk_26E737860;
  a1[108] = v3;
  a1[111] = a1 + 107;
  return result;
}

void RETargetDisplayInfoProviderSetLeftDisplayPrimaryCalibrationProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 112);
  id v4 = a2;
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable(v3);
  a1[112] = &unk_26E7378C8;
  uint64_t v5 = _Block_copy(v4);

  a1[113] = v5;
  a1[116] = v3;
}

void RETargetDisplayInfoProviderSetRightDisplayPrimaryCalibrationProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 124);
  id v4 = a2;
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable(v3);
  a1[124] = &unk_26E7378C8;
  uint64_t v5 = _Block_copy(v4);

  a1[125] = v5;
  a1[128] = v3;
}

uint64_t (***RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,re::LuminanceMap ()(void)>::destroyCallable((uint64_t)(a1 + 136));
  a1[136] = &unk_26E737930;
  a1[137] = v3;
  a1[140] = a1 + 136;
  return result;
}

uint64_t (***RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  __n128 result = re::FunctionBase<24ul,re::LuminanceMap ()(void)>::destroyCallable((uint64_t)(a1 + 142));
  a1[142] = &unk_26E737998;
  a1[143] = v3;
  a1[146] = a1 + 142;
  return result;
}

void RETargetDisplayInfoProviderSetTintMatrixProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 148);
  id v4 = a2;
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable(v3);
  a1[148] = &unk_26E7378C8;
  uint64_t v5 = _Block_copy(v4);

  a1[149] = v5;
  a1[152] = v3;
}

void RETargetDisplayInfoProviderSetAmbientAdaptationScaleProvider(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 160);
  id v4 = a2;
  re::FunctionBase<24ul,float ()(void)>::destroyCallable(v3);
  a1[160] = &unk_26E737598;
  uint64_t v5 = _Block_copy(v4);

  a1[161] = v5;
  a1[164] = v3;
}

uint64_t re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737598;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737598;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<float({block_pointer} {__strong})(void),float ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737600;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737600;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<unsigned int({block_pointer} {__strong})(void),unsigned int ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737668;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737668;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<BOOL({block_pointer} {__strong})(void),BOOL ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7376C0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7376C0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<unsigned char({block_pointer} {__strong})(void),unsigned char ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737728;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E737728;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTConsumer::$_0,void ()(re::TonemapLUT)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737790;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E737790;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapFloatLUTConsumer::$_0,void ()(re::TonemapFloatLUT)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7377F8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7377F8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetPostBlendToneMapLUTDomainProvider::$_0,re::TonemapLUTDomain ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737860;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E737860;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetImageHistogramConsumer::$_0,void ()(re::ImageHistogram)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7378C8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7378C8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<simd_float3x3({block_pointer} {__strong})(void),simd_float3x3 ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737930;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E737930;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetLeftDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737998;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E737998;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RETargetDisplayInfoProviderSetRightDisplayLuminanceMapProvider::$_0,re::LuminanceMap ()(void)>::size()
{
  return 16;
}

const char *RESkeletonAssetGetName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v6);
  if (v1)
  {
    uint64_t v2 = *(const char **)(v1 + 96);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid skeleton asset handle used.", v5, 2u);
    }

    uint64_t v2 = "";
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v2;
}

uint64_t RESkeletonAssetGetJointCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v1 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v6);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 112);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid skeleton asset handle used.", v5, 2u);
    }

    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v2;
}

uint64_t RESkeletonAssetGetJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v10);
  if (!v3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid skeleton asset handle used.", buf, 2u);
    }

    goto LABEL_14;
  }
  uint64_t v4 = v3;
  if (*(void *)(v3 + 112) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(v4 + 96);
      *(_DWORD *)long long buf = 136315394;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Skeleton %s does not have joint index %lu", buf, 0x16u);
    }

LABEL_14:
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(*(void *)(v3 + 120) + 16 * a2 + 8);
LABEL_15:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

uint64_t RESkeletonAssetGetJointParentIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v10);
  if (!v3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid skeleton asset handle used.", buf, 2u);
    }

    goto LABEL_16;
  }
  uint64_t v4 = v3;
  if (*(void *)(v3 + 136) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(v4 + 96);
      *(_DWORD *)long long buf = 136315394;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Skeleton %s does not have joint index %lu", buf, 0x16u);
    }

LABEL_16:
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  if (*(_DWORD *)(*(void *)(v3 + 144) + 4 * a2) == -1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v3 + 144) + 4 * a2;
  }
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

uint64_t RESkeletonAssetGetJointLocalRestTransform(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v3 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v10);
  if (!v3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid skeleton asset handle used.", buf, 2u);
    }

    goto LABEL_14;
  }
  uint64_t v4 = v3;
  if (*(void *)(v3 + 160) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(v4 + 96);
      *(_DWORD *)long long buf = 136315394;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Skeleton %s does not have joint index %lu", buf, 0x16u);
    }

LABEL_14:
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(v3 + 168) + 48 * a2;
LABEL_15:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

uint64_t RESkeletonAssetGetPoseLocalSpace(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v11);
  uint64_t v5 = re::AssetHandle::asset<re::SkeletonAsset>((re::SkeletonAsset *)v11);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v8 = "Invalid skeleton asset handle used.";
    goto LABEL_14;
  }
  if (*(void *)(v5 + 160) != a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v8 = "Invalid buffer size used.";
LABEL_14:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v10, 2u);
LABEL_11:

    uint64_t v6 = 0;
    goto LABEL_12;
  }
  memcpy(a3, *(const void **)(v5 + 168), 48 * a2);
  uint64_t v6 = 1;
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v6;
}

uint64_t RENetSyncBufferWrite(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    JUMPOUT(0x237DBB060);
  }
  return 1;
}

char *RECustomDeformerCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(a2 + 40) + 1128);
  uint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 104, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *((void *)v5 + 3) = v3;
  *(void *)uint64_t v5 = &unk_26E7379F0;
  *((void *)v5 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = -1;
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a1 + 24));
  *((void *)v5 + 7) = *(void *)(a1 + 72);
  *((void *)v5 + 8) = *(void *)(a1 + 80);
  *((void *)v5 + 9) = _Block_copy(*(const void **)(a1 + 40));
  *((void *)v5 + 10) = _Block_copy(*(const void **)(a1 + 48));
  *((void *)v5 + 11) = _Block_copy(*(const void **)(a1 + 56));
  *((void *)v5 + 12) = *(void *)(a1 + 64);
  if (*(void *)(a1 + 56)) {
  else
  }
    uint64_t v6 = 0;
  if (*(void *)(a1 + 48)) {
  else
  }
    uint64_t v7 = 0;
  int v8 = buf[0];
  if (buf[0])
  {
    *((void *)v5 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)&v23[4];
    uint64_t v9 = v5 + 8;
    uint64_t v10 = v5 + 8;
    uint64_t v19 = v5;
    char v18 = 1;
    if (buf[0])
    {

      return v19;
    }
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v19 = *(char **)&v23[4];
    uint64_t v9 = v26;
    uint64_t v11 = v27;
    uint64_t v12 = v24;
    uint64_t v13 = v25;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    v21[1] = v9;
    void v21[2] = v11;
    uint64_t v20 = v12;
    v21[0] = v13;
    uint64_t v14 = v13 & 1;
    char v18 = 0;
  }
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(void))(*(void *)v24 + 40))();
  }

  if (v8) {
    return v19;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = (char *)v21 + 1;
    if (v14) {
      uint64_t v17 = v9;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)__int16 v23 = v17;
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Could not create custom deformer: %s", buf, 0xCu);
  }

  if (v18)
  {
    if (v19) {
  }
    }
  else
  {
    __n128 result = v20;
    if (!v20) {
      return result;
    }
    if (v21[0]) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
  }
  return 0;
}

void *RECustomDeformerBuilderCreateCPUDeformer(const char *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = a2;
  uint64_t v20 = 0;
  uint64_t v21 = "";
  uint64_t v10 = v21;
  uint64_t v11 = v22;
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  uint64_t v21 = "";
  uint64_t v13 = v22[3];
  uint64_t v14 = v22[4];
  uint64_t v22[3] = v12;
  uint64_t v11[4] = v10;
  v23[0] = v12 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v23[1] = v14;
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v20);
  uint64_t v15 = _Block_copy(v8);

  uint64_t v16 = (void *)v11[5];
  void v11[5] = v15;

  uint64_t v17 = _Block_copy(v7);
  char v18 = (void *)v11[6];
  void v11[6] = v17;

  char v11[8] = a4;
  return v11;
}

void *RECustomDeformerBuilderCreateGPUDeformer(const char *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = a2;
  uint64_t v20 = 0;
  uint64_t v21 = "";
  uint64_t v10 = v21;
  uint64_t v11 = v22;
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  uint64_t v21 = "";
  uint64_t v13 = v22[3];
  uint64_t v14 = v22[4];
  uint64_t v22[3] = v12;
  uint64_t v11[4] = v10;
  v23[0] = v12 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v23[1] = v14;
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v20);
  uint64_t v15 = _Block_copy(v8);

  uint64_t v16 = (void *)v11[5];
  void v11[5] = v15;

  uint64_t v17 = _Block_copy(v7);
  char v18 = (void *)v11[7];
  v11[7] = v17;

  char v11[8] = a4;
  return v11;
}

uint64_t RECustomDeformerBuilderSetInputPositionEnabled(uint64_t result, int a2)
{
  uint64_t v2 = 2;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(void *)(result + 72) = *(void *)(result + 72) & 0xFFFFFFFFFFFFFFFDLL | v2;
  return result;
}

void RECustomDeformerBuilderSetInputBufferEnabled(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 > 3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v10, 8u);
    }
  }
  else
  {
    uint64_t v5 = a1 + 72;
    if (a2 - 1 >= 3) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = (a2 - 1) + 2;
    }
    unsigned int v7 = re::Bitset<64>::toWordIndex(a1 + 72, v6);
    uint64_t v8 = 1 << v6;
    if (!a3) {
      uint64_t v8 = 0;
    }
    *(void *)(v5 + 8 * v7) = *(void *)(v5 + 8 * v7) & ~(1 << v6) | v8;
  }
}

uint64_t RECustomDeformerBuilderSetOutputPositionEnabled(uint64_t result, int a2)
{
  uint64_t v2 = 2;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(void *)(result + 80) = *(void *)(result + 80) & 0xFFFFFFFFFFFFFFFDLL | v2;
  return result;
}

void RECustomDeformerBuilderSetOutputBufferEnabled(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 > 3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v10, 8u);
    }
  }
  else
  {
    uint64_t v5 = a1 + 80;
    if (a2 - 1 >= 3) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = (a2 - 1) + 2;
    }
    unsigned int v7 = re::Bitset<64>::toWordIndex(a1 + 80, v6);
    uint64_t v8 = 1 << v6;
    if (!a3) {
      uint64_t v8 = 0;
    }
    *(void *)(v5 + 8 * v7) = *(void *)(v5 + 8 * v7) & ~(1 << v6) | v8;
  }
}

uint64_t RECustomDeformerAllocatorAllocateGPUBuffer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = a1 + 8;
  LODWORD(v8[0]) = 2;
  re::FrameContext::perFrameAllocTail(*(re::FrameContext **)a1, a2, a3, (uint64_t)v8 + 8);
  long long v9 = 0uLL;
  uint64_t v5 = (_OWORD *)re::BucketArray<RECustomDeformerAllocationData,32ul>::addUninitialized(v4);
  long long v6 = v8[1];
  *uint64_t v5 = v8[0];
  v5[1] = v6;
  void v5[2] = v9;
  return *(void *)(a1 + 48) - 1;
}

uint64_t RECustomDeformerAllocatorAllocateCpuToGPUBuffer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = a1 + 8;
  LODWORD(v8[0]) = 2;
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)a1, a2, a3, (uint64_t)v8 + 8);
  long long v9 = 0uLL;
  uint64_t v5 = (_OWORD *)re::BucketArray<RECustomDeformerAllocationData,32ul>::addUninitialized(v4);
  long long v6 = v8[1];
  *uint64_t v5 = v8[0];
  v5[1] = v6;
  void v5[2] = v9;
  return *(void *)(a1 + 48) - 1;
}

uint64_t RECustomDeformerAllocatorAllocateCPUBuffer(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 1);
  *(void *)((char *)&v8 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  HIDWORD(v8) = 0;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*a1 + 24) + 32))(*(void *)(*a1 + 24));
  uint64_t v6 = re::BucketArray<RECustomDeformerAllocationData,32ul>::addUninitialized(v4);
  *(_DWORD *)uint64_t v6 = 1;
  *(_OWORD *)(v6 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
  *(_OWORD *)(v6 + 16) = 0uLL;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 40) = a2;
  return a1[6] - 1;
}

uint64_t RECustomDeformerAllocatorBufferCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t RECustomDeformerAllocatorConstBuffer(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 16) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v3 = a1 + 32;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 48 * (a2 & 0x1F);
}

uint64_t RECustomDeformerAllocatorBuffer(uint64_t a1, unint64_t a2)
{
  return re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](a1 + 8, a2);
}

BOOL RECustomDeformerAllocationIsGPUBuffer(_DWORD *a1)
{
  return *a1 == 2;
}

uint64_t RECustomDeformerAllocationConstGPUBuffer(uint64_t a1)
{
  return a1 + 8;
}

uint64_t RECustomDeformerAllocationGPUBuffer(uint64_t a1)
{
  return a1 + 8;
}

BOOL RECustomDeformerAllocationIsCPUBuffer(_DWORD *a1)
{
  return *a1 == 1;
}

uint64_t RECustomDeformerAllocationConstCPUBuffer(uint64_t a1)
{
  return a1 + 32;
}

uint64_t RECustomDeformerAllocationCPUBuffer(uint64_t a1)
{
  return a1 + 32;
}

uint64_t RECustomDeformerVertexBufferInputPositionBuffer(uint64_t a1)
{
  unsigned __int8 v3 = 1;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, 1u);
  return *(void *)(a1 + 64)
       + 32
       * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 56), &v3)+ 8;
}

uint64_t RECustomDeformerVertexBufferInputBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 >= 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v6, 8u);
    }

    return 0;
  }
  else
  {
    LOBYTE(v6[0]) = a2 + 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2 + 1);
    return *(void *)(a1 + 64)
         + 32
         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 56), (unsigned __int8 *)v6)+ 8;
  }
}

uint64_t RECustomDeformerVertexBufferOutputPositionBuffer(uint64_t a1)
{
  unsigned __int8 v3 = 1;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, 1u);
  return *(void *)(a1 + 192)
       + 32
       * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 184), &v3)+ 8;
}

uint64_t RECustomDeformerVertexBufferOutputBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 >= 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v6, 8u);
    }

    return 0;
  }
  else
  {
    LOBYTE(v6[0]) = a2 + 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2 + 1);
    return *(void *)(a1 + 192)
         + 32
         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 184), (unsigned __int8 *)v6)+ 8;
  }
}

uint64_t RECustomDeformerVertexBufferInputPositionFormat(uint64_t a1)
{
  unsigned __int8 v3 = 1;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, 1u);
  return *(unsigned __int8 *)(*(void *)(a1 + 128)
                            + 20
                            * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 120), &v3)+ 16);
}

uint64_t RECustomDeformerVertexBufferInputFormat(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 >= 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v6, 8u);
    }

    return 0;
  }
  else
  {
    LOBYTE(v6[0]) = a2 + 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2 + 1);
    return *(unsigned __int8 *)(*(void *)(a1 + 128)
                              + 20
                              * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 120), (unsigned __int8 *)v6)+ 16);
  }
}

uint64_t RECustomDeformerVertexBufferOutputPositionFormat(uint64_t a1)
{
  unsigned __int8 v3 = 1;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, 1u);
  return *(unsigned __int8 *)(*(void *)(a1 + 256)
                            + 20
                            * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 248), &v3)+ 16);
}

uint64_t RECustomDeformerVertexBufferOutputFormat(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 >= 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", (uint8_t *)v6, 8u);
    }

    return 0;
  }
  else
  {
    LOBYTE(v6[0]) = a2 + 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2 + 1);
    return *(unsigned __int8 *)(*(void *)(a1 + 256)
                              + 20
                              * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 248), (unsigned __int8 *)v6)+ 16);
  }
}

uint64_t RECustomDeformerVertexBufferSetOutputPositionBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7 = *(unsigned __int8 *)(a2 + 8);
  int v10 = 16842753;
  __int16 v9 = (re::sizeFromVertexFormat(a4, a2) + 3) & 0x1FC;
  unsigned __int8 v12 = a4;
  int v11 = 0;
  return re::DeformationVertexBufferState::setOutputBuffer(a1, 1u, v7, a3, (uint64_t)&v9);
}

void RECustomDeformerVertexBufferAllocateOutputPositionBuffer(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
}

void RECustomDeformerVertexBufferAllocateOutputBuffer(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a3 < 4)
  {
    uint64_t v11 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(void *)(*(void *)(a1 + 32) + 8), v10);
    *(_DWORD *)&_OWORD v35[2] = 16842753;
    *(_WORD *)long long v35 = (re::sizeFromVertexFormat(a5, v12) + 3) & 0x1FC;
    unsigned __int8 v37 = a5;
    int v36 = 0;
    unint64_t v14 = *(void *)(a1 + 24);
    if (v14 > a2)
    {
      unsigned int v15 = *(unsigned __int8 *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](**(void **)(a1 + 32) + 8, *(void *)(*(void *)(a1 + 16) + 8 * a2))+ 16);
      uint64_t v16 = *(void **)(v11 + 360);
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 16);
      if (a3 < 4) {
        unsigned __int8 v18 = a3 + 1;
      }
      else {
        unsigned __int8 v18 = 1;
      }
      int v31 = *(_DWORD *)v35;
      __int16 v32 = *(_WORD *)&v35[4];
      int v33 = 0;
      unsigned __int8 v34 = a5;
      unsigned int v19 = re::DeformationBufferAllocator::alloc(v16, v17, v18, (uint64_t)&v31, v15, a4);
      uint64_t v20 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v11 + 360), v15, v19);
      uint64_t v22 = *(void *)(a1 + 32);
      unint64_t v23 = *(void *)(v22 + 48);
      if (v23 <= v10)
      {
        re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v10, v23);
        _os_crash();
        __break(1u);
      }
      uint64_t v24 = v20;
      uint64_t v25 = *(void *)(v22 + 40) + 312 * v10;
      if (a3 < 4) {
        unsigned __int8 v26 = a3 + 1;
      }
      else {
        unsigned __int8 v26 = 1;
      }
      uint64_t v27 = *(unsigned __int8 *)(a1 + 8);
      id v28 = objc_msgSend(*(id *)(v20 + 24), sel_contents);
      uint64_t v29 = *(void *)(v24 + 24);
      *(void *)long long buf = v28;
      uint64_t v39 = *(void *)(v24 + 32);
      uint64_t v40 = v29;
      re::DeformationVertexBufferState::setOutputBuffer(v25, v26, v27, (uint64_t)buf, (uint64_t)v35);
      return;
    }
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v14);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v30 = (id)CoreRELog::log;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Invalid RECustomDeformerVertexBufferType %u.", buf, 8u);
  }
}

uint64_t anonymous namespace'::resolveDeformationIndexFromCoreREDeformationIndex(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 > a2) {
    return *(void *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](**(void **)(a1 + 32) + 8, *(void *)(*(void *)(a1 + 16) + 8 * a2))+ 8);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, a2, v2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomDeformerGPUBufferGPUOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t RECustomDeformerGPUBufferSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t RECustomDeformerGPUBufferCPUData(uint64_t a1)
{
  return *(void *)a1 + *(unsigned int *)(a1 + 8);
}

id RECustomDeformerGPUBufferGPUData(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

uint64_t RECustomDeformerCPUBufferSize(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t RECustomDeformerCPUBufferConstData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECustomDeformerCPUBufferData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECustomDeformerAttributeBufferOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t RECustomDeformerAttributeBufferSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

char *RECustomDeformerAttributeBufferContents(uint64_t a1)
{
  return (char *)objc_msgSend(*(id *)a1, sel_contents) + *(unsigned int *)(a1 + 8);
}

id RECustomDeformerAttributeBufferMetalBuffer(id *a1)
{
  return *a1;
}

uint64_t RECustomDeformerParametersDeformationCount(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RECustomDeformerParametersConstPositionVertexBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(v5 + 48);
  if (v6 > v3) {
    return *(void *)(v5 + 40) + 312 * v3;
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v3, v6);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomDeformerParametersPositionVertexBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(v5 + 48);
  if (v6 > v3) {
    return *(void *)(v5 + 40) + 312 * v3;
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v3, v6);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomDeformerParametersConstVertexBufferData(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(v5 + 48);
  if (v6 > v3) {
    return *(void *)(v5 + 40) + 312 * v3;
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v3, v6);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomDeformerParametersVertexBufferData(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(v5 + 48);
  if (v6 > v3) {
    return *(void *)(v5 + 40) + 312 * v3;
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v3, v6);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomDeformerParametersDeformationModelNullable(void *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(void *)(a1[4] + 8), v3) + 352)
                 + 120);
  if (v4 && *(void *)(v4 + 16) > *a1) {
    return *(void *)(*(void *)(v4 + 32) + 16 * *a1);
  }
  else {
    return 0;
  }
}

uint64_t RECustomDeformerParametersDeformationInputNullable(void *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(void *)(a1[4] + 8), v3) + 352)
                 + 120);
  if (v4 && *(void *)(v4 + 16) > *a1) {
    return *(void *)(*(void *)(v4 + 32) + 16 * *a1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t RECustomDeformerParametersMeshAttributeBuffer(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v8 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(void *)(*(void *)(a1 + 32) + 8), v7);
  uint64_t v9 = re::DataArray<re::MeshModel>::get(a3 + 8, *(void *)(*(void *)(v8 + 368) + 16));
  unint64_t v10 = *(unsigned __int16 *)(v8 + 392);
  unint64_t v11 = *(void *)(v9 + 56);
  if (v11 <= v10)
  {
    memset(v32, 0, sizeof(v32));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v25 = 136315906;
    *(void *)&_OWORD v25[4] = "operator[]";
    __int16 v26 = 1024;
    int v27 = 476;
    __int16 v28 = 2048;
    unint64_t v29 = v10;
    __int16 v30 = 2048;
    unint64_t v31 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = (re::AttributeTable *)(*(void *)(v9 + 64) + 560 * v10);
  uint64_t v13 = v12;
  do
  {
    unint64_t v14 = v13;
    uint64_t v13 = (re::AttributeTable *)*((void *)v13 + 1);
  }
  while (v13 && !*((void *)v14 + 9));
  if (a4)
  {
    uint64_t v15 = *a4;
    if (*a4)
    {
      char v16 = a4[1];
      if (v16)
      {
        uint64_t v17 = (unsigned __int8 *)(a4 + 2);
        do
        {
          uint64_t v15 = 31 * v15 + v16;
          int v18 = *v17++;
          char v16 = v18;
        }
        while (v18);
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)&v32[0] = 2 * v15;
  *((void *)&v32[0] + 1) = a4;
  *(void *)uint64_t v25 = v15 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v19 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v14 + 6, v25);
  if (v19 != -1)
  {
    uint64_t v20 = *((void *)v14 + 7) + 16 * v19;
    *(void *)uint64_t v25 = 0;
    re::StringID::destroyString((re::StringID *)v32);
    uint64_t v21 = re::AttributeTable::buffers(v12);
    unint64_t v23 = *(unsigned __int8 *)(v20 + 8);
    if (v22 > v23) {
      return v21 + 16 * v23;
    }
LABEL_18:
    re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v23, v22);
    _os_crash();
    __break(1u);
  }
  *(void *)uint64_t v25 = 0;
  re::StringID::destroyString((re::StringID *)v32);
  return 0;
}

uint64_t **RECustomDeformerRulesZeroOutputPositionBuffer(uint64_t **result)
{
  uint64_t v1 = *result;
  *uint64_t v1 = **result | 2;
  *((unsigned char *)v1 + 9) = 2;
  return result;
}

uint64_t **RECustomDeformerRulesCopyInputToOutputPositionBuffer(uint64_t **result)
{
  uint64_t v1 = *result;
  *uint64_t v1 = **result | 2;
  *((unsigned char *)v1 + 9) = 1;
  return result;
}

void RECustomDeformerRulesAddPostDeformationBlit(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = *(_anonymous_namespace_ **)(a1 + 8);
  v15[0] = v11;
  id v14 = v11;
  v15[1] = a3;
  void v15[2] = v12;
  uint64_t v15[3] = a5;
  _OWORD v15[4] = a6;
  char v16 = 1;
  re::DynamicArray<re::PostDeformationBlit>::add(v13, (uint64_t)v15);
  if (v15[0]) {
}
  }

void RECustomDeformerRulesAddWaitForEvent(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  id v5 = a2;
  id v6 = v5;

  unint64_t v9 = *(void *)(v4 + 8);
  unint64_t v8 = *(void *)(v4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)v4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity((void *)v4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity((void *)v4, v10);
        ++*(_DWORD *)(v4 + 24);
      }
    }
    unint64_t v8 = *(void *)(v4 + 16);
  }
  uint64_t v13 = (void *)(*(void *)(v4 + 32) + 16 * v8);
  *uint64_t v13 = v6;
  v13[1] = a3;
  *(void *)(v4 + 16) = v8 + 1;
  ++*(_DWORD *)(v4 + 24);
}

uint64_t anonymous namespace'::customAddDeformationCallback(_anonymous_namespace_ *this, uint64_t a2, void *a3)
{
  return *(void *)(a2 + 56);
}

uint64_t **anonymous namespace'::customAllocateBuffersCallback(uint64_t *a1, char a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  re::globalAllocators((re *)a1);
  uint64_t v17 = a1[3];
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 64, 8);
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_DWORD *)(v18 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  *(void *)(v18 + 32) = 0;
  *(void *)(v18 + 40) = 0;
  *(_DWORD *)(v18 + 56) = 0;
  *(void *)(v18 + 48) = 0;
  uint64_t v19 = re::globalAllocators((re *)v18)[2];
  __int16 v26 = &unk_26E737A38;
  uint64_t v29 = v19;
  __int16 v30 = &v26;
  uint64_t v20 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v17 + 16))(v17, v18, &v26);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v26);
  *uint64_t v20 = a1;
  re::BucketArray<RECustomDeformerAllocationData,32ul>::init((uint64_t)(v20 + 1), a1[3], 1uLL);
  uint64_t v21 = *(void **)(a10 + 32);
  char v27 = a2;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  __int16 v30 = a3;
  v25[0] = a4;
  v25[1] = a5;
  void v25[2] = a6;
  __int16 v26 = v21;
  unint64_t v22 = _Block_copy(*(const void **)(a10 + 72));
  (*((void (**)(void *, uint64_t **, void **, void *, void))v22 + 2))(v22, v20, &v26, v25, *(void *)(a10 + 96));

  return v20;
}

void anonymous namespace'::customDeformGPUFunction(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = a7[4];
  char v13 = 1;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a3;
  unint64_t v9 = (const void *)a7[11];
  id v10 = *a2;
  unint64_t v11 = (void (**)(void *, uint64_t, uint64_t *, id, void))_Block_copy(v9);
  v11[2](v11, a1, &v12, v10, a7[12]);
}

void anonymous namespace'::customDeformCPUFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 + 32);
  char v10 = 0;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a2;
  unint64_t v8 = (void (**)(void *, uint64_t, uint64_t *, void))_Block_copy(*(const void **)(a6 + 80));
  v8[2](v8, a1, &v9, *(void *)(a6 + 96));
}

void anonymous namespace'::RECustomDeformerInternal::~RECustomDeformerInternal(_anonymous_namespace_::RECustomDeformerInternal *this)
{
  *(void *)this = &unk_26E7379F0;
  if (*((void *)this + 4) != -1)
  {
    re::CustomDeformers::unregisterCustomDeformer(*((re::CustomDeformers **)this + 3), (_anonymous_namespace_::RECustomDeformerInternal *)((char *)this + 40), (uint64_t)v2);
    if (!v2[0] && v3 && (v4 & 1) != 0) {
      (*(void (**)(void))(*(void *)v3 + 40))();
    }
  }

  re::StringID::destroyString((_anonymous_namespace_::RECustomDeformerInternal *)((char *)this + 40));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void *re::BucketArray<RECustomDeformerAllocationData,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<RECustomDeformerAllocationData,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::internal::Callable<anonymous namespace'::customAllocateBuffersCallback(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &,re::Slice<unsigned long>,unsigned long,void *)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<anonymous namespace'::customAllocateBuffersCallback(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &,re::Slice<unsigned long>,unsigned long,void *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (uint64_t *)(*a2 + 8);
  uint64_t v4 = *(void *)(*a2 + 48);
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
      re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)v3, i);
  }
  while (*(void *)(v2 + 16))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3);
  *(void *)(v2 + 48) = 0;
  ++*(_DWORD *)(v2 + 56);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3);
}

void *re::internal::Callable<anonymous namespace'::customAllocateBuffersCallback(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &,re::Slice<unsigned long>,unsigned long,void *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E737A38;
  return result;
}

void *re::internal::Callable<anonymous namespace'::customAllocateBuffersCallback(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &,re::Slice<unsigned long>,unsigned long,void *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E737A38;
  return result;
}

uint64_t re::internal::Callable<anonymous namespace'::customAllocateBuffersCallback(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &,re::Slice<unsigned long>,unsigned long,void *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void *re::BucketArray<RECustomDeformerAllocationData,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        id v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1536, 0);
          id v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

double re::make::shared::object<anonymous namespace'::RECustomDeformerBuilderInternal>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(void *)(v3 + 80) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E737A90;
  *(void *)(v3 + 32) = "";
  double result = 0.0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(void *)a1 = v3;
  return result;
}

void anonymous namespace'::RECustomDeformerBuilderInternal::~RECustomDeformerBuilderInternal(id *this)
{
  *this = &unk_26E737A90;

  re::StringID::destroyString((re::StringID *)(this + 3));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t re::BucketArray<RECustomDeformerAllocationData,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<RECustomDeformerAllocationData,32ul>::setBucketsCapacity((void *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 0x1F);
}

void *RECharacterControllerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *RECharacterControllerComponentStateGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float RECharacterControllerComponentGetRadius(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 64);
}

uint64_t RECharacterControllerComponentSetRadius(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  uint64_t result = *(void *)(v4 + 80);
  if (result)
  {
    unint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 184);
    v5.n128_f32[0] = a3;
    return v7(v5);
  }
  return result;
}

float RECharacterControllerComponentGetHeight(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 60);
}

uint64_t RECharacterControllerComponentSetHeight(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 60) = a3;
  uint64_t result = *(void *)(v4 + 80);
  if (result)
  {
    unint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 200);
    v5.n128_f32[0] = a3;
    return v7(v5);
  }
  return result;
}

uint64_t RECharacterControllerComponentMove(uint64_t a1, uint64_t a2, __n128 a3, float a4)
{
  __n128 v6 = a3;
  uint64_t result = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, __n128 *, float))(*(void *)result + 80))(result, &v6, a4);
  }
  return result;
}

uint64_t RECharacterControllerComponentMoveEx(re *a1, __n128 a2, float a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 2);
  if (!v3) {
    return 0;
  }
  if ((*(unsigned char *)(v3 + 288) & 0x80) != 0) {
    return 0;
  }
  uint64_t v6 = *((void *)a1 + 2);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = *(void *)(v6 + 24);
  }
  while (v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = *(re::EventBus **)(v8 + 288);
  char v27 = 0;
  int __src = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v28 = 0;
  int v31 = 0;
  uint64_t v10 = re::globalAllocators(a1)[2];
  v36[0] = &unk_26E737AD8;
  v36[1] = &v27;
  v36[3] = v10;
  v36[4] = v36;
  uint64_t v34 = v10;
  uint64_t v35 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>((uint64_t)v33, (uint64_t)v36);
  int Type = re::EventBus::getTypeId<RECharacterControllerDidHitEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v9, (uint64_t)Type);
  uint64_t v43 = v34;
  uint64_t v44 = 0;
  unint64_t v13 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>((uint64_t)v42, (uint64_t)v33);
  uint64_t v40 = re::globalAllocators(v13)[2];
  uint64_t v41 = 0;
  v37.n128_u64[0] = (unint64_t)&unk_26E737B40;
  uint64_t v38 = v43;
  uint64_t v39 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>((uint64_t)&v37.n128_i64[1], (uint64_t)v42);
  uint64_t v41 = &v37;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable((uint64_t)v42);
  uint64_t v14 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v37, v3, 0);
  unint64_t v16 = v15;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v37);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable((uint64_t)v33);
  re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, v17);
  __n128 v37 = a2;
  uint64_t v18 = *((void *)a1 + 10);
  if (v18) {
    LOBYTE(v18) = (*(uint64_t (**)(uint64_t, __n128 *, float))(*(void *)v18 + 80))(v18, &v37, a3);
  }
  char v27 = v18;
  uint64_t v19 = (re *)re::EventBus::unsubscribe((uint64_t)v9, v14, v16);
  uint64_t v20 = 0;
  if (v27)
  {
    if (v30)
    {
      uint64_t v21 = re::globalAllocators(v19);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[2] + 32))(v21[2], 72, 8);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v20, 0);
      *(void *)uint64_t v20 = &unk_26E737B98;
      *(_OWORD *)(v20 + 40) = 0u;
      *(_OWORD *)(v20 + 56) = 0u;
      *(_OWORD *)(v20 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
      *(unsigned char *)(v20 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v27;
      if ((char *)(v20 + 24) != &v27)
      {
        if (v28)
        {
          unint64_t v22 = v30;
          *(void *)(v20 + 32) = v28;
          re::DynamicArray<re::RigSplineIKJoint>::setCapacity((void *)(v20 + 32), v22);
          ++*(_DWORD *)(v20 + 56);
          unint64_t v23 = v30;
          if (v30 >= *(void *)(v20 + 48))
          {
            re::DynamicArray<re::RigSplineIKJoint>::setCapacity((void *)(v20 + 32), v30);
            uint64_t v25 = *(void *)(v20 + 48);
            if (v25)
            {
              memmove(*(void **)(v20 + 64), __src, 80 * v25);
              uint64_t v25 = *(void *)(v20 + 48);
            }
            memcpy((void *)(*(void *)(v20 + 64) + 80 * v25), (char *)__src + 80 * v25, 80 * v23 - 80 * v25);
          }
          else if (v30)
          {
            memmove(*(void **)(v20 + 64), __src, 80 * v30);
          }
          *(void *)(v20 + 48) = v23;
        }
      }
    }
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable((uint64_t)v36);
  if (v28 && __src) {
    (*(void (**)(void))(*(void *)v28 + 40))();
  }
  return v20;
}

uint64_t RECharacterControllerCollisionResultGetHitFlags(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24);
  }
  return result;
}

uint64_t RECharacterControllerCollisionResultGetCollisionCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t RECharacterControllerCollisionResultGetHitEntityAtCollisionIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 64) + 80 * a2);
}

__n128 RECharacterControllerCollisionResultGetHitPositionAtCollisionIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 64) + 80 * a2 + 16);
}

__n128 RECharacterControllerCollisionResultGetHitNormalAtCollisionIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 64) + 80 * a2 + 32);
}

__n128 RECharacterControllerCollisionResultGetMoveDirectionAtCollisionIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 64) + 80 * a2 + 48);
}

float RECharacterControllerCollisionResultGetMoveDistanceAtCollisionIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(float *)(*(void *)(a1 + 64) + 80 * a2 + 64);
}

double RECharacterControllerComponentGetPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (v2) {
    return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v2));
  }
  else {
    return 0.0;
  }
}

uint64_t RECharacterControllerComponentSetPosition(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 v4 = a3;
  uint64_t result = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)result + 96))(result, &v4);
  }
  return result;
}

float RECharacterControllerComponentGetSkinWidth(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 40);
}

uint64_t RECharacterControllerComponentSetSkinWidth(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 40) = a3;
  uint64_t result = *(void *)(v4 + 80);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 104);
    v5.n128_f32[0] = a3;
    return v7(v5);
  }
  return result;
}

float RECharacterControllerComponentGetSlopeLimit(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 44);
}

uint64_t RECharacterControllerComponentSetSlopeLimit(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  uint64_t result = *(void *)(v4 + 80);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 120);
    v5.n128_f32[0] = a3;
    return v7(v5);
  }
  return result;
}

float RECharacterControllerComponentGetStepLimit(uint64_t a1, uint64_t a2)
{
  return *(float *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 48);
}

uint64_t RECharacterControllerComponentSetStepLimit(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  *(float *)(v4 + 48) = a3;
  uint64_t result = *(void *)(v4 + 80);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 136);
    v5.n128_f32[0] = a3;
    return v7(v5);
  }
  return result;
}

double RECharacterControllerComponentGetUpVector(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (v2) {
    return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v2));
  }
  else {
    return 0.0078125;
  }
}

uint64_t RECharacterControllerComponentSetUpVector(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 v4 = a3;
  uint64_t result = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)result + 152))(result, &v4);
  }
  return result;
}

double RECharacterControllerComponentGetVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (v2) {
    long long v3 = *(_OWORD *)(v2 + 256);
  }
  else {
    *(void *)&long long v3 = 0;
  }
  return *(double *)&v3;
}

void *RECharacterControllerComponentSetCollisionFilter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  unint64_t v7 = __PAIR64__(a3, v4);
  *(void *)(v5 + 52) = __PAIR64__(a3, v4);
  uint64_t result = *(void **)(v5 + 80);
  if (result) {
    return (void *)re::CharacterController::setCollisionFilter(result, &v7);
  }
  return result;
}

uint64_t RECharacterControllerComponentGetCollisionGroup(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 52);
}

uint64_t RECharacterControllerComponentGetCollisionMask(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 56);
}

uint64_t RECharacterControllerComponentOnGround(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 80);
  if (v2) {
    return *(unsigned char *)(v2 + 76) & 1;
  }
  else {
    return 0;
  }
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    long long v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[255] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::internal::Callable<RECharacterControllerComponentMoveEx::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<RECharacterControllerComponentMoveEx::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator()(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 8) + 40);
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  int v7 = *(_DWORD *)(a3 + 64);
  uint64_t v8 = *((void *)a1 + 1);
  unint64_t v9 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 && v9 < v11)
  {
    long long v19 = *(_OWORD *)(a3 + 48);
    long long v20 = *(_OWORD *)(a3 + 32);
    long long v21 = *(_OWORD *)(a3 + 16);
    if (*(void *)(v8 + 8))
    {
      uint64_t v13 = 2 * v9;
      BOOL v14 = v9 == 0;
      unint64_t v15 = 8;
      if (!v14) {
        unint64_t v15 = v13;
      }
      if (v15 <= v11) {
        unint64_t v16 = v11;
      }
      else {
        unint64_t v16 = v15;
      }
      re::DynamicArray<re::RigSplineIKJoint>::setCapacity((void *)(v8 + 8), v16);
    }
    else
    {
      re::DynamicArray<re::RigSplineIKJoint>::setCapacity((void *)(v8 + 8), v11);
      ++*(_DWORD *)(v8 + 32);
    }
    long long v5 = v20;
    long long v4 = v21;
    long long v6 = v19;
  }
  uint64_t v17 = *(void *)(v8 + 40) + 80 * *(void *)(v8 + 24);
  *(void *)uint64_t v17 = v3;
  *(_OWORD *)(v17 + 16) = v4;
  *(_OWORD *)(v17 + 32) = v5;
  *(_OWORD *)(v17 + 48) = v6;
  *(_DWORD *)(v17 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v7;
  ++*(void *)(v8 + 24);
  ++*(_DWORD *)(v8 + 32);
  return 0;
}

void *re::internal::Callable<RECharacterControllerComponentMoveEx::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E737AD8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<RECharacterControllerComponentMoveEx::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E737AD8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECharacterControllerComponentMoveEx::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::size()
{
  return 16;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E737B40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E737B40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737B40;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737B40;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RECharacterControllerDidHitEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RECharacterControllerDidHitEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::Shareable<anonymous namespace'::CharacterControllerCollisionResult>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E737B98;
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(void *)(a1 + 64)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    v3[1] = 0;
    void v3[2] = 0;
    *uint64_t v3 = 0;
    ++*(_DWORD *)(a1 + 56);
  }
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  return a1;
}

void re::Shareable<anonymous namespace'::CharacterControllerCollisionResult>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E737B98;
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(void *)(a1 + 64)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    *(void *)(a1 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    v3[1] = 0;
    void v3[2] = 0;
    *uint64_t v3 = 0;
    ++*(_DWORD *)(a1 + 56);
  }
  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *REVirtualEnvironmentProbeComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REVirtualEnvironmentProbeComponentAddResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  re::AssetAPIHelper::assetHandleCreate(a2, v5);
  void v5[3] = 0x3F80000000000000;
  re::DynamicArray<re::ecs2::ProbeResource>::add(v3, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::ecs2::Component::enqueueMarkDirty(a1);
  return *(void *)(a1 + 48) - 1;
}

uint64_t REVirtualEnvironmentProbeComponentGetResourceCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t REVirtualEnvironmentProbeComponentClearResources(uint64_t a1)
{
  re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)(a1 + 32));
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REVirtualEnvironmentProbeComponentSetResource(re::ecs2::Component *this, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*((void *)this + 6) > a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, &v11);
    unint64_t v5 = *((void *)this + 6);
    if (v5 <= a2)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      unint64_t v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      __int16 v21 = 2048;
      unint64_t v22 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v6 = (uint64_t *)(*((void *)this + 8) + 32 * a2);
    uint64_t v7 = v6[1];
    v6[1] = v12;
    uint64_t v12 = v7;
    uint64_t v8 = *v6;
    uint64_t *v6 = 0;
    uint64_t *v6 = v11;
    uint64_t v11 = v8;
    uint64_t v9 = v6[2];
    _DWORD v6[2] = v13;
    uint64_t v13 = v9;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REVirtualEnvironmentProbeComponentGetResource(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 64) + 32 * a2);
  }
}

uint64_t REVirtualEnvironmentProbeComponentSetIntensityExponent(uint64_t this, unint64_t a2, float a3)
{
  if (*(void *)(this + 48) > a2) {
    *(float *)(*(void *)(this + 64) + 32 * a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REVirtualEnvironmentProbeComponentGetIntensityExponent(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (*(void *)(a1 + 48) > a2) {
    return *(float *)(*(void *)(a1 + 64) + 32 * a2 + 24);
  }
  return result;
}

uint64_t REVirtualEnvironmentProbeComponentSetRelativeWeight(uint64_t this, unint64_t a2, float a3)
{
  if (*(void *)(this + 48) > a2)
  {
    if (a3 > 1.0) {
      a3 = 1.0;
    }
    if (a3 < 0.0) {
      a3 = 0.0;
    }
    *(float *)(*(void *)(this + 64) + 32 * a2 + 28) = a3;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REVirtualEnvironmentProbeComponentGetRelativeWeight(uint64_t a1, unint64_t a2)
{
  float result = 0.0;
  if (*(void *)(a1 + 48) > a2) {
    return *(float *)(*(void *)(a1 + 64) + 32 * a2 + 28);
  }
  return result;
}

void *RETimebaseComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RETimebaseComponentAddTimebase(re::ecs2::TimebaseComponent *a1)
{
  uint64_t TimebaseService = re::ecs2::TimebaseComponent::getTimebaseService(a1);
  if (TimebaseService)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)TimebaseService + 64);
    return v2();
  }
  else
  {
    uint64_t v4 = re::TimebaseLog(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "component has no timebase service", v5, 2u);
    }

    return 0;
  }
}

void RETimebaseComponentRemoveTimebase(re::ecs2::TimebaseComponent *a1)
{
  uint64_t TimebaseService = re::ecs2::TimebaseComponent::getTimebaseService(a1);
  if (TimebaseService)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)TimebaseService + 72);
    v2();
  }
  else
  {
    uint64_t v3 = re::TimebaseLog(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "component has no timebase service", v4, 2u);
    }
  }
}

uint64_t RETimebaseComponentGetRootID(uint64_t a1)
{
  return re::TimebaseTree::rootID((re::TimebaseTree *)(a1 + 32));
}

double RETimebaseComponentGetLatestAbsoluteTime(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

uint64_t RETimebaseComponentGetSourceID(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

__n128 RETimebaseComponentGetSourceAnchorToLatestSnapshot@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 88);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 104);
  return result;
}

double RETimebaseComponentSetSourceIDWithAnchorToLatestSnapshot(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTime v4 = *a3;
  *(void *)&double result = re::TimebaseTree::anchorTreeToSourceTimebase((re::TimebaseTree *)(a1 + 32), a2, &v4).n128_u64[0];
  return result;
}

__n128 re::TimebaseTree::anchorTreeToSourceTimebase(re::TimebaseTree *this, uint64_t a2, CMTime *a3)
{
  *((void *)this + 6) = a2;
  __n128 result = *(__n128 *)&a3->value;
  *((void *)this + 9) = a3->epoch;
  *(__n128 *)((char *)this + 56) = result;
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 50;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *((void *)this + 2);
    while (*(void *)(v9 + 200 * v8 + 48))
    {
      if (v4 <= (int)v5 + 1) {
        int v10 = v5 + 1;
      }
      else {
        int v10 = *((_DWORD *)this + 8);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v10 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v11 = v8;
        if ((*(_DWORD *)(v9 + 200 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      int v11 = v10;
LABEL_17:
      LODWORD(v5) = v11;
      if (v4 == v11) {
        return result;
      }
    }
    uint64_t v12 = (__n128 *)(v9 + 200 * v8);
    __n128 result = v12[4];
    *((void *)this + 12) = v12[5].n128_u64[0];
    *((__n128 *)this + 5) = result;
  }
  return result;
}

double RETimebaseComponentSetSourceID(uint64_t a1, uint64_t a2)
{
  CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
  *(void *)&double result = re::TimebaseTree::anchorTreeToSourceTimebase((re::TimebaseTree *)(a1 + 32), a2, &v3).n128_u64[0];
  return result;
}

uint64_t RETimebaseComponentGetMasterID(re *a1)
{
  uint64_t v2 = re::TimebaseLog(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "RETimebaseComponentGetMasterID() is deprecated. Use RETimebaseComponentGetSourceID() instead.", v4, 2u);
  }

  return *((void *)a1 + 10);
}

__n128 RETimebaseComponentGetMasterAnchorToLatestSnapshot@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = re::TimebaseLog((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "RETimebaseComponentGetMasterAnchorToLatestSnapshot() is deprecated. Use RETimebaseComponentGetSourceAnchorToLatestSnapshot() instead.", v6, 2u);
  }

  __n128 result = *(__n128 *)(a1 + 88);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 104);
  return result;
}

double RETimebaseComponentSetMasterIDWithAnchorToLatestSnapshot(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v6 = re::TimebaseLog((re *)a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v8.value) = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "RETimebaseComponentSetMasterIDWithAnchorToLatestSnapshot() is deprecated. Use RETimebaseComponentSetSourceIDWithAnchorToLatestSnapshot() instead.", (uint8_t *)&v8, 2u);
  }

  CMTime v8 = *a3;
  *(void *)&double result = re::TimebaseTree::anchorTreeToSourceTimebase((re::TimebaseTree *)(a1 + 32), a2, &v8).n128_u64[0];
  return result;
}

double RETimebaseComponentSetMasterID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::TimebaseLog((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v6.value) = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "RETimebaseComponentSetMasterID() is deprecated. Use RETimebaseComponentSetSourceID() instead.", (uint8_t *)&v6, 2u);
  }

  CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
  *(void *)&double result = re::TimebaseTree::anchorTreeToSourceTimebase((re::TimebaseTree *)(a1 + 32), a2, &v6).n128_u64[0];
  return result;
}

void *REPassthroughDarkeningComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REPassthroughDarkeningComponentIsLightspillEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REPassthroughDarkeningComponentIsVideoPassthroughTintingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REPassthroughDarkeningComponentSetLightspillEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REPassthroughDarkeningComponentSetVideoPassthroughTintingEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REPassthroughDarkeningComponentIsSuspendingChromaticAdaptation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t REPassthroughDarkeningComponentSuspendChromaticAdaptation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 100) = a2;
  return result;
}

uint64_t REPassthroughDarkeningComponentGetDarkeningMatrix(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return a1 + 48;
  }
  else {
    return 0;
  }
}

uint64_t REPassthroughDarkeningComponentSetDarkeningMatrix(uint64_t result, long long *a2)
{
  if (a2)
  {
    long long v3 = *a2;
    long long v2 = a2[1];
    long long v4 = a2[2];
    if (!*(unsigned char *)(result + 32)) {
      *(unsigned char *)(result + 32) = 1;
    }
    *(_OWORD *)(result + 48) = v3;
    *(_OWORD *)(result + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v2;
    *(_OWORD *)(result + 80) = v4;
  }
  else if (*(unsigned char *)(result + 32))
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t REPassthroughDarkeningComponentSetLightSpillIntensity(uint64_t result, float a2)
{
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *(float *)(result + 96) = a2;
  return result;
}

float REPassthroughDarkeningComponentGetLightSpillIntensity(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

float REPassthroughDarkeningComponentGetGlowIntensity(uint64_t a1)
{
  return *(float *)(a1 + 104);
}

uint64_t REPassthroughDarkeningComponentSetGlowIntensity(uint64_t result, float a2)
{
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *(float *)(result + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t RETraceClientCreate(void *a1)
{
  uint64_t v1 = a1;
  long long v2 = re::globalAllocators(v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 152, 8);
  long long v4 = v1;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E737BE0;
  *(void *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = &unk_26E737C28;
  re::TraceClient::TraceClient((NSObject **)(v3 + 32), (dispatch_queue_t)v4);

  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v3 + 120) = v3 + 24;
  *(void *)(v3 + 128) = 0;

  return v3;
}

void RETraceClientConnect(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x10uLL, "%d", a3);
  re::TraceClient::connect((nw_parameters_t *)(a1 + 32), a2, __str);
}

void RETraceClientConnectWithFileHandle(uint64_t a1)
{
}

void RETraceClientConnectForTargetApps(uint64_t a1, const char *a2, int a3, const char **a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x10uLL, "%d", a3);
  if (a4 && a5 && a6)
  {
    do
    {
      if (*a4 && *a5) {
        re::TraceClient::addTargetApp((re::TraceClient *)(a1 + 32), *a4, *a5);
      }
      ++a5;
      ++a4;
      --a6;
    }
    while (a6);
  }
  re::TraceClient::connect((nw_parameters_t *)(a1 + 32), a2, __str);
}

void RETraceClientConnectWithFileHandleForTargetApps(uint64_t a1, int a2, const char **a3, uint64_t *a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v6 = a4;
    if (a4)
    {
      uint64_t v7 = a5;
      if (a5)
      {
        CMTime v8 = a3;
        do
        {
          if (*v8 && *v6) {
            re::TraceClient::addTargetApp((re::TraceClient *)(a1 + 32), *v8, *v6);
          }
          ++v6;
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
  }
  re::TraceClient::connectWithFileHandle((re::TraceClient *)(a1 + 32));
}

void RETraceClientDisconnect(uint64_t a1)
{
}

void RETraceClientSetConnectedHandler(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  long long v4 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v3;
}

void RETraceClientSetDisconnectedHandler(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  long long v4 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v3;
}

void RETraceClientSetLoadHandler(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  long long v4 = *(void **)(a1 + 144);
  *(void *)(a1 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
}

void anonymous namespace'::TraceClientProxy::~TraceClientProxy(_anonymous_namespace_::TraceClientProxy *this)
{
  *(void *)this = &unk_26E737BE0;
  *((void *)this + 3) = &unk_26E737C28;
  long long v2 = (_anonymous_namespace_::TraceClientProxy *)((char *)this + 32);
  *((void *)this + 15) = re::s_nullClientDelegate;

  re::TraceClient::~TraceClient(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t anonymous namespace'::TraceClientProxy::clientConnected(_anonymous_namespace_::TraceClientProxy *this)
{
  uint64_t result = *((void *)this + 16);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void anonymous namespace'::TraceClientProxy::clientLoadedDelta(re *a1, uint64_t a2)
{
  if (*((void *)a1 + 18))
  {
    re::make::shared::object<re::Shareable<re::TraceDelta>>(a1, &v14);
    uint64_t v4 = v14;
    uint64_t v5 = v14 + 24;
    *(_OWORD *)(v14 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(_OWORD *)a2;
    if (v5 != a2)
    {
      uint64_t v6 = *(void *)(v4 + 40);
      uint64_t v7 = *(void *)(a2 + 16);
      if (v6) {
        BOOL v8 = v7 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8 && v6 != v7)
      {
        re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v10 = *(void *)(v4 + 48);
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(v4 + 40) = v7;
      *(void *)(v4 + 48) = v11;
      *(void *)(a2 + 16) = v6;
      *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v10;
      uint64_t v12 = *(void *)(v4 + 56);
      *(void *)(v4 + 56) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v12;
      uint64_t v13 = *(void *)(v4 + 72);
      *(void *)(v4 + 72) = *(void *)(a2 + 48);
      *(void *)(a2 + 48) = v13;
      ++*(_DWORD *)(a2 + 40);
      ++*(_DWORD *)(v4 + 64);
    }
    (*(void (**)(void))(*((void *)a1 + 18) + 16))();
    if (v14) {
  }
    }
}

uint64_t anonymous namespace'::TraceClientProxy::clientDisconnected(_anonymous_namespace_::TraceClientProxy *this)
{
  uint64_t result = *((void *)this + 17);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void non-virtual thunk to'anonymous namespace'::TraceClientProxy::~TraceClientProxy(_anonymous_namespace_::TraceClientProxy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t non-virtual thunk to'anonymous namespace'::TraceClientProxy::clientConnected(_anonymous_namespace_::TraceClientProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void non-virtual thunk to'anonymous namespace'::TraceClientProxy::clientLoadedDelta(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'anonymous namespace'::TraceClientProxy::clientDisconnected(_anonymous_namespace_::TraceClientProxy *this)
{
  uint64_t result = *((void *)this + 14);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t REVideoCaptionSnappingComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VideoCaptionSnappingComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REVideoCaptionSnappingComponentSetElementSize(re::ecs2::Component *a1, double a2, float a3)
{
  if (a1)
  {
    *((float *)&a2 + 1) = a3;
    *((double *)a1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
    uint64_t v4 = *(re::ecs2::NetworkComponent **)(*((void *)a1 + 2) + 200);
    if (v4) {
      re::ecs2::NetworkComponent::markDirty(v4, a1);
    }
  }
}

double REVideoCaptionSnappingComponentGetElementSize(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 32);
  }
  else {
    return 0.0;
  }
}

void REVideoCaptionSnappingComponentSetElementActiveState(re::ecs2::Component *a1, char a2)
{
  if (a1)
  {
    *((unsigned char *)a1 + 40) = a2;
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(*((void *)a1 + 2) + 200);
    if (v3) {
      re::ecs2::NetworkComponent::markDirty(v3, a1);
    }
  }
}

BOOL REVideoCaptionSnappingComponentGetElementActiveState(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 40) != 0;
  }
  return result;
}

uint64_t REEncoderCreate(_anonymous_namespace_ *a1)
{
  long long v2 = re::Allocator::Allocator((re::Allocator *)v1, "Base MallocAllocator", 1);
  *(void *)long long v2 = &unk_26E6DEC70;
  re::LeakTestAllocator::LeakTestAllocator((re::Allocator *)((char *)v2 + 24), "PersistentAllocator", (re::Allocator *)v1);
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)(v1 + 104), "ScratchAllocator", (re::Allocator *)v1);
  uint64_t v3 = re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)(v1 + 184), -1);
  *(void *)(v1 + 408) = 0;
  *(void *)(v1 + 38re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v1 + 392) = 0;
  *(void *)(v1 + 376) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  *(void *)(v1 + 280) = 0;
  *(void *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(void *)(v1 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v1 + 312) = 0;
  *(unsigned char *)(v1 + 320) = 0;
  *(_DWORD *)(v1 + 416) = 13;
  *(void *)(v1 + 432) = 1024;
  *(unsigned char *)(v1 + 420) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA07C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AFA07C0);
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v5, (uint64_t)v7);
      if (v7[0]) {
        uint64_t v6 = v8;
      }
      else {
        uint64_t v6 = 0;
      }
      _MergedGlobals_533 = v6;
      __cxa_guard_release(&qword_26AFA07C0);
    }
  }
  if (_MergedGlobals_533) {
    *(void *)(v1 + 432) = _MergedGlobals_533;
  }
  *(void *)(v1 + 480) = 0;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 46re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  re::DynamicString::setCapacity((void *)(v1 + 456), 0);
  *(_DWORD *)(v1 + 488) = 0;
  return v1;
}

uint64_t REEncoderDestroy(unsigned char *a1)
{
  if (!a1) {
    return 1;
  }
  re::DynamicString::deinit((re::DynamicString *)(a1 + 456));
  re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::close((_anonymous_namespace_ *)(a1 + 280));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 376));
  if (a1[320]) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 344));
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)(a1 + 184));
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)(a1 + 104), v2);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)(a1 + 24), v3);
  re::Allocator::~Allocator((re::Allocator *)a1);
  return 0;
}

uint64_t REEncoderOpen(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  *(void *)(a1 + 280) = a1 + 184;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 30re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1 + 24;
  *(void *)(a1 + 312) = a1 + 104;
  v5[0] = 0;
  re::Optional<re::DetailedError>::operator=(a1 + 320, v5);
  if (v5[0] && *(void *)&v7[1] && (v7[3] & 1) != 0) {
    (*(void (**)(void))(**(void **)&v7[1] + 40))();
  }
  *(void *)(a1 + 376) = *(void *)(a1 + 304);
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)(a1 + 376), 0x40uLL);
  ++*(_DWORD *)(a1 + 400);
  v5[0] = 0;
  long long v6 = 0u;
  memset(v7, 0, sizeof(v7));
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add(a1 + 376, (uint64_t)v5);
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 46re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
    uint64_t v3 = *(unsigned char **)(a1 + 472);
  }
  else
  {
    *(unsigned char *)(a1 + 46re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v2 & 1;
    uint64_t v3 = (unsigned char *)(a1 + 465);
  }
  uint64_t result = 0;
  *uint64_t v3 = 0;
  *(_DWORD *)(a1 + 488) = 0;
  return result;
}

uint64_t REEncoderClose(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::close((_anonymous_namespace_ *)(a1 + 280));
  *(unsigned char *)(a1 + 192) = 0;
  if (!google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)(a1 + 224))) {
    return 3;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 488) = 0;
  return result;
}

_anonymous_namespace_ *re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::close(_anonymous_namespace_ *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    if (!*((unsigned char *)result + 40)) {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 96);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
    *(void *)uint64_t v1 = 0;
    *((void *)v1 + 3) = 0;
    *((void *)v1 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  return result;
}

const void *REEncoderCopyToCFData(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = **(const void ***)(a1 + 200);
  CFRetain(v1);
  return v1;
}

uint64_t REEncoderGetData(uint64_t a1, UInt8 **a2, CFIndex *a3)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (a3)
    {
      *a2 = CFDataGetMutableBytePtr(**(CFMutableDataRef **)(a1 + 200));
      CFIndex Length = CFDataGetLength(**(CFDataRef **)(a1 + 200));
      uint64_t result = 0;
      *a3 = Length;
    }
  }
  return result;
}

uint64_t REEncoderGetStatus(uint64_t a1, void *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (*(unsigned char *)(a1 + 320))
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v6, (const re::DynamicString *)(a1 + 344));
      re::DynamicString::operator=((re::DynamicString *)(a1 + 456), (re::DynamicString *)&v6);
      if (v6 && (v7 & 1) != 0) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
      if (*(unsigned char *)(a1 + 464)) {
        uint64_t v5 = *(void *)(a1 + 472);
      }
      else {
        uint64_t v5 = a1 + 465;
      }
      *a2 = v5;
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REEncoderWriteBool(uint64_t a1, const char *a2, int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    if (a3) {
      char v6 = 1;
    }
    else {
      char v6 = 2;
    }
    char __src = v6;
    if (!*(unsigned char *)(a1 + 320)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Boolean");
    }
    uint64_t v7 = *(void *)(a1 + 408);
    uint64_t v8 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v7 + 48 * v8) != 2) {
      ++*(void *)(v7 + 48 * v8 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteDouble(uint64_t a1, const char *a2, double a3)
{
  double v8 = a3;
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    char __src = 54;
    if (!*(unsigned char *)(a1 + 320))
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Double"); {
      if (!*(unsigned char *)(a1 + 320)
      }
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&v8, 8uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Double");
      }
    }
    uint64_t v5 = *(void *)(a1 + 408);
    uint64_t v6 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v5 + 48 * v6) != 2) {
      ++*(void *)(v5 + 48 * v6 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteFloat(uint64_t a1, const char *a2, float a3)
{
  float v8 = a3;
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    char __src = 53;
    if (!*(unsigned char *)(a1 + 320))
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Float"); {
      if (!*(unsigned char *)(a1 + 320)
      }
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&v8, 4uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Float");
      }
    }
    uint64_t v5 = *(void *)(a1 + 408);
    uint64_t v6 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v5 + 48 * v6) != 2) {
      ++*(void *)(v5 + 48 * v6 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteInt8(uint64_t a1, const char *a2, int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteInt16(uint64_t a1, const char *a2, int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteInt32(uint64_t a1, const char *a2, int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteInt64(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteString(uint64_t a1, const char *a2, char *__s)
{
  uint64_t result = 1;
  if (a1 && __s)
  {
    size_t v7 = strlen(__s);
    if (*(unsigned char *)(a1 + 320))
    {
LABEL_36:
      if (*(unsigned char *)(a1 + 320)) {
        return 3;
      }
      else {
        return 0;
      }
    }
    unint64_t v8 = v7;
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    if (v8 > 0x20)
    {
      if (v8 <= 0xFF)
      {
        LOBYTE(__src) = 97;
        if (*(unsigned char *)(a1 + 320)) {
          goto LABEL_35;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"String(8-Bit Length)"); {
        int v11 = *(unsigned __int8 *)(a1 + 320);
        }
        LOBYTE(__src) = v8;
        if (v11
          || (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) != 0)
        {
          goto LABEL_35;
        }
        uint64_t v9 = "String(8-Bit Length)";
      }
      else if (v8 >> 16)
      {
        if (HIDWORD(v8))
        {
          LOBYTE(__src) = 100;
          if (*(unsigned char *)(a1 + 320)) {
            goto LABEL_35;
          }
          if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"String(64-Bit Length)"); {
          int v10 = *(unsigned __int8 *)(a1 + 320);
          }
          unint64_t __src = v8;
          if (v10
            || (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 8uLL) & 1) != 0)
          {
            goto LABEL_35;
          }
          uint64_t v9 = "String(64-Bit Length)";
        }
        else
        {
          LOBYTE(__src) = 99;
          if (*(unsigned char *)(a1 + 320)) {
            goto LABEL_35;
          }
          if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"String(32-Bit Length)"); {
          int v13 = *(unsigned __int8 *)(a1 + 320);
          }
          LODWORD(__src) = v8;
          if (v13
            || (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 4uLL) & 1) != 0)
          {
            goto LABEL_35;
          }
          uint64_t v9 = "String(32-Bit Length)";
        }
      }
      else
      {
        LOBYTE(__src) = 98;
        if (*(unsigned char *)(a1 + 320)) {
          goto LABEL_35;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"String(16-Bit Length)"); {
        int v12 = *(unsigned __int8 *)(a1 + 320);
        }
        LOWORD(__src) = v8;
        if (v12
          || (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 2uLL) & 1) != 0)
        {
          goto LABEL_35;
        }
        uint64_t v9 = "String(16-Bit Length)";
      }
    }
    else
    {
      LOBYTE(__src) = v8 + 64;
      if (*(unsigned char *)(a1 + 320)
        || (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) != 0)
      {
        goto LABEL_35;
      }
      uint64_t v9 = "Small String";
    }
    re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)v9);
LABEL_35:
    LOBYTE(v23) = 8;
    DWORD1(v23) = 0;
    *((void *)&v23 + 1) = a2;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    unint64_t v25 = v8;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1 + 280, &v23);
    uint64_t v14 = *(void *)(a1 + 408);
    unint64_t v15 = *(void *)(a1 + 392);
    unint64_t v16 = v15 - 1;
    *(void *)(v14 + 48 * (v15 - 1) + 16) = 0;
    if (!*(unsigned char *)(a1 + 320))
    {
      if (!v8) {
        goto LABEL_46;
      }
      size_t v17 = *(void *)(v14 + 48 * v16 + 24);
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), __s, v17) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, 0, (uint64_t)"String"); {
      uint64_t v14 = *(void *)(a1 + 408);
      }
      unint64_t v15 = *(void *)(a1 + 392);
      unint64_t v16 = v15 - 1;
      if (*(unsigned char *)(v14 + 48 * (v15 - 1)) != 2) {
        *(void *)(v14 + 48 * v16 + 32) += v17;
      }
      if (!*(unsigned char *)(a1 + 320))
      {
LABEL_46:
        if (*(void *)(v14 + 48 * v16 + 32) == *(void *)(v14 + 48 * v16 + 24))
        {
          for (uint64_t i = *(void *)(v14 + 48 * v16 + 16); i; --i)
            re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(a1 + 280);
          uint64_t v19 = *(void *)(a1 + 408);
          uint64_t v20 = *(void *)(a1 + 392) - 1;
          if (*(unsigned char *)(v19 + 48 * v20) != 2) {
            ++*(void *)(v19 + 48 * v20 + 32);
          }
        }
        else
        {
          if (v29) {
            __int16 v21 = *(unsigned char **)&v30[7];
          }
          else {
            __int16 v21 = v30;
          }
          uint64_t v22 = *(void *)(a1 + 408) + 48 * *(void *)(a1 + 392);
          re::DynamicString::format((re::DynamicString *)"Failed to serialize string \"%s\". Expected number of characters: %lld. Actual number of characters: %lld.", (re::DynamicString *)&v23, v21, *(void *)(v22 - 24), *(void *)(v22 - 16));
          if (void)v23 && (BYTE8(v23)) {
            (*(void (**)(void))(*(void *)v23 + 40))();
          }
          if (__src && (v29 & 1) != 0) {
            (*(void (**)(void))(*(void *)__src + 40))();
          }
        }
      }
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t REEncoderWriteUInt8(uint64_t a1, const char *a2, unsigned int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteUInt16(uint64_t a1, const char *a2, unsigned int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteUInt32(uint64_t a1, const char *a2, unsigned int a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    uint64_t v6 = *(void *)(a1 + 408);
    uint64_t v7 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v6 + 48 * v7) != 2) {
      ++*(void *)(v6 + 48 * v7 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteUInt64(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, a2);
    if (a3 < 0)
    {
      char __src = 120;
      if (!*(unsigned char *)(a1 + 320))
      {
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"Small Data"); {
        int v7 = *(unsigned __int8 *)(a1 + 320);
        }
        uint64_t v10 = a3;
        if (!v7
          && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&v10, 8uLL) & 1) == 0)
        {
          re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, a2, (uint64_t)"UInt64");
        }
      }
    }
    else
    {
      re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(a1 + 280, a2, a3);
    }
    uint64_t v8 = *(void *)(a1 + 408);
    uint64_t v9 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v8 + 48 * v9) != 2) {
      ++*(void *)(v8 + 48 * v9 + 32);
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderBeginContainer(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  if (a2) {
    int v3 = 64;
  }
  else {
    int v3 = 16;
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, "Container");
  if ((v3 & 0x10) != 0)
  {
    char __src = -33;
    if (!*(unsigned char *)(a1 + 320)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, "Container", (uint64_t)"Object");
    }
    char v5 = 1;
  }
  else
  {
    char __src = -17;
    if (!*(unsigned char *)(a1 + 320)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, "Container", (uint64_t)"Object");
    }
    char v5 = 2;
  }
  LOBYTE(v6) = v5;
  DWORD1(v6) = v3;
  *((void *)&v6 + 1) = "Container";
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0xFFFFFFFF80000000;
  uint64_t v10 = 0;
  re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1 + 280, &v6);
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 408) + 48 * *(void *)(a1 + 392) - 32) = 0;
  ++*(_DWORD *)(a1 + 488);
  return result;
}

uint64_t REEncoderEndContainer(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (*(int *)(a1 + 488) < 1) {
    return 3;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    char __src = 3;
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, 0, (uint64_t)"Object"); {
    uint64_t v2 = *(void *)(a1 + 408);
    }
    uint64_t v3 = *(void *)(a1 + 392) - 1;
    uint64_t v4 = *(void *)(v2 + 48 * v3 + 16);
    if (v4)
    {
      do
      {
        --v4;
        re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(a1 + 280);
      }
      while (v4);
      uint64_t v2 = *(void *)(a1 + 408);
      uint64_t v3 = *(void *)(a1 + 392) - 1;
    }
    uint64_t v5 = *(void *)(a1 + 408);
    uint64_t v6 = *(void *)(a1 + 392) - 1;
    if (*(unsigned char *)(v5 + 48 * v6) != 2) {
      ++*(void *)(v5 + 48 * v6 + 32);
    }
  }
  --*(_DWORD *)(a1 + 488);
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t REEncoderWriteNil(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(a1 + 280, "nil");
    LOBYTE(__src) = 4;
    if (!*(unsigned char *)(a1 + 320)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)(a1 + 280), (char *)&__src, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1 + 280, "nil", (uint64_t)"Optional");
    }
    LOBYTE(v9[0]) = 3;
    DWORD1(v9[0]) = 0;
    *((void *)&v9[0] + 1) = "nil";
    memset(&v9[1], 0, 32);
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1 + 280, v9);
    uint64_t v3 = *(void *)(a1 + 408);
    unint64_t v4 = *(void *)(a1 + 392);
    *(void *)(v3 + 48 * (v4 - 1) + 16) = 0;
    if (!*(unsigned char *)(a1 + 320))
    {
      if (*(void *)(v3 + 48 * (v4 - 1) + 32) == *(void *)(v3 + 48 * (v4 - 1) + 24))
      {
        uint64_t v5 = *(void *)(a1 + 408);
        uint64_t v6 = *(void *)(a1 + 392) - 1;
        if (*(unsigned char *)(v5 + 48 * v6) != 2) {
          ++*(void *)(v5 + 48 * v6 + 32);
        }
      }
      else
      {
        if (v11) {
          uint64_t v7 = *(unsigned char **)&v12[7];
        }
        else {
          uint64_t v7 = v12;
        }
        if (*(uint64_t *)(*(void *)(a1 + 408) + 48 * *(void *)(a1 + 392) - 24) <= 0) {
          uint64_t v8 = "Optional should not have a value.";
        }
        else {
          uint64_t v8 = "Optional requires a value.";
        }
        re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)v9, v7, v8);
        if (*(void *)&v9[0] && (BYTE8(v9[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v9[0] + 40))();
        }
        if (__src && (v11 & 1) != 0) {
          (*(void (**)(void))(*(void *)__src + 40))();
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 320)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::advance(uint64_t result, const char *a2)
{
  uint64_t v2 = *(void *)(result + 128);
  uint64_t v3 = *(void *)(result + 112) - 1;
  if (*(unsigned char *)(v2 + 48 * v3) == 2 && (*(unsigned char *)(v2 + 48 * v3 + 4) & 0x40) == 0) {
    return re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(result, a2, 0);
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::writeInteger(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((unint64_t)(a3 + 1) > 0x28)
  {
    if (a3 == (char)a3)
    {
      LOBYTE(__src) = 48;
      if (!*(unsigned char *)(result + 40))
      {
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0) {
          uint64_t result = re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)"8-Bit Signed Integer");
        }
        int v7 = *(unsigned __int8 *)(v5 + 40);
        LOBYTE(__src) = a3;
        if (!v7)
        {
          uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v5, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
          {
            uint64_t v6 = "8-Bit Signed Integer";
            return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)v6);
          }
        }
      }
    }
    else
    {
      LOBYTE(__src) = 51;
      if (!*(unsigned char *)(result + 40))
      {
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0) {
          uint64_t result = re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)"64-Bit Signed Integer");
        }
        int v8 = *(unsigned __int8 *)(v5 + 40);
        uint64_t __src = a3;
        if (!v8)
        {
          uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v5, (char *)&__src, 8uLL);
          if ((result & 1) == 0)
          {
            uint64_t v6 = "64-Bit Signed Integer";
            return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)v6);
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(__src) = a3 + 8;
    if (!*(unsigned char *)(result + 40))
    {
      uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL);
      if ((result & 1) == 0)
      {
        uint64_t v6 = "Small Signed Integer";
        return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(uint64_t a1, const char *a2, uint64_t a3)
{
  if (v8) {
    uint64_t v5 = *(unsigned char **)&v9[7];
  }
  else {
    uint64_t v5 = v9;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: Error %s type %s.", (re::DynamicString *)&v10, "serialize", v5, "writing", a3);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)v7 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    return result;
  }
  uint64_t v1 = result;
  unsigned __int8 __src = 0;
  uint64_t v2 = *(void *)(result + 168);
  if (v2)
  {
    uint64_t v3 = v2 - 1;
    int v4 = *(unsigned __int8 *)(result + v3 + 160);
    unsigned __int8 __src = v4;
    *(void *)(v1 + 168) = v3;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL))
    {
      int v12 = "Member";
      uint64_t v13 = v1;
      return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
    int v4 = __src;
  }
  uint64_t result = (uint64_t)re::OPACK::toString(v4);
  uint64_t v5 = result;
  unsigned __int8 v6 = __src;
  if (__src > 0x2Fu)
  {
    switch(__src)
    {
      case '0':
LABEL_20:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        uint64_t v10 = (void *)v1;
        size_t v11 = 1;
        goto LABEL_73;
      case '1':
LABEL_30:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        unint64_t v15 = *(void *)(v1 + 168);
        if (!v15)
        {
          size_t v11 = 2;
          goto LABEL_72;
        }
        uint64_t v8 = 2;
        if (v15 >= 2) {
          uint64_t v9 = 2;
        }
        else {
          uint64_t v9 = *(void *)(v1 + 168);
        }
        *(void *)(v1 + 168) = v15 - v9;
        if (v15 != 1) {
          return result;
        }
        goto LABEL_48;
      case '2':
      case '5':
LABEL_23:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        unint64_t v14 = *(void *)(v1 + 168);
        if (!v14)
        {
          size_t v11 = 4;
          goto LABEL_72;
        }
        uint64_t v8 = 4;
        if (v14 >= 4) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = *(void *)(v1 + 168);
        }
        *(void *)(v1 + 168) = v14 - v9;
        if (v14 > 3) {
          return result;
        }
        goto LABEL_48;
      case '3':
      case '6':
        goto LABEL_12;
      case '4':
        goto LABEL_37;
      default:
        switch(__src)
        {
          case 0xC1u:
            goto LABEL_20;
          case 0xC2u:
            goto LABEL_30;
          case 0xC3u:
            if (*(unsigned char *)(v1 + 40)) {
              return result;
            }
            unint64_t v18 = *(void *)(v1 + 168);
            if (!v18)
            {
              size_t v11 = 3;
              goto LABEL_72;
            }
            uint64_t v19 = 3;
            if (v18 < 3) {
              uint64_t v19 = *(void *)(v1 + 168);
            }
            *(void *)(v1 + 168) = v18 - v19;
            size_t v11 = v19 ^ 3;
            if (v19 == 3) {
              return result;
            }
            goto LABEL_72;
          case 0xC4u:
            goto LABEL_23;
          default:
            goto LABEL_37;
        }
    }
  }
  if (__src - 1 >= 4)
  {
    if (__src == 5)
    {
      if (*(unsigned char *)(v1 + 40)) {
        return result;
      }
      unint64_t v17 = *(void *)(v1 + 168);
      if (!v17)
      {
        size_t v11 = 16;
        goto LABEL_72;
      }
      uint64_t v8 = 16;
      if (v17 >= 0x10) {
        uint64_t v9 = 16;
      }
      else {
        uint64_t v9 = *(void *)(v1 + 168);
      }
      *(void *)(v1 + 168) = v17 - v9;
      if (v17 > 0xF) {
        return result;
      }
    }
    else
    {
      if (__src != 6)
      {
LABEL_37:
        if (__src - 7 < 0x29) {
          return result;
        }
        if (__src - 64 > 0x24)
        {
          if (__src - 112 > 0x24)
          {
            if ((__src + 96) >= 0x21u)
            {
              if ((__src + 48) > 0xEu)
              {
                if (__src == 223)
                {
                  uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readTag(v1, (char *)&__src, (uint64_t)"Array value/terminator");
                  if (result)
                  {
                    do
                    {
                      unsigned __int8 v23 = __src;
                      if (__src == 3) {
                        break;
                      }
                      unint64_t v24 = *(void *)(v1 + 168);
                      if (v24 <= 7)
                      {
                        *(void *)(v1 + 168) = v24 + 1;
                        *(unsigned char *)(v1 + v24 + 160) = v23;
                      }
                      re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(v1);
                      uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readTag(v1, (char *)&__src, (uint64_t)"Array value/terminator");
                    }
                    while ((result & 1) != 0);
                  }
                }
                else if ((__src + 32) > 0xEu)
                {
                  if (__src == 239)
                  {
                    for (uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readTag(v1, (char *)&__src, (uint64_t)"Dictionary key/value/terminator");
                          result;
                          uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readTag(v1, (char *)&__src, (uint64_t)"Dictionary key/value/terminator"))
                    {
                      unsigned __int8 v28 = __src;
                      if (__src == 3) {
                        break;
                      }
                      unint64_t v29 = *(void *)(v1 + 168);
                      if (v29 <= 7)
                      {
                        *(void *)(v1 + 168) = v29 + 1;
                        *(unsigned char *)(v1 + v29 + 160) = v28;
                      }
                      uint64_t v30 = -2;
                      do
                      {
                        re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(v1);
                        BOOL v27 = __CFADD__(v30++, 1);
                      }
                      while (!v27);
                    }
                  }
                  else
                  {
                    if (v36) {
                      int v31 = *(unsigned char **)&v37[7];
                    }
                    else {
                      int v31 = v37;
                    }
                    re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Found unsupported tag while skipping over data.", (re::DynamicString *)&v38, v31);
                    *(void *)&long long v42 = 400;
                    *((void *)&v42 + 1) = re::FoundationErrorCategory(void)::instance;
                    uint64_t v32 = v40;
                    uint64_t v45 = v40;
                    uint64_t v46 = v41;
                    uint64_t v33 = v38;
                    char v34 = v39;
                    uint64_t v43 = v38;
                    uint64_t v44 = v39;
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, &v42);
                    if (v33 && (v34 & 1) != 0) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 40))(v33, v32);
                    }
                    uint64_t result = v35;
                    if (v35 && (v36 & 1) != 0) {
                      return (*(uint64_t (**)(void))(*(void *)v35 + 40))();
                    }
                  }
                }
                else
                {
                  unint64_t v25 = *(void *)(v1 + 168);
                  if (v25 <= 7)
                  {
                    *(void *)(v1 + 168) = v25 + 1;
                    *(unsigned char *)(v1 + v25 + 160) = v6;
                  }
                  *(void *)&long long v42 = 0;
                  uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readDictionaryTag(v1, (char *)&v42);
                  if (2 * (void)v42)
                  {
                    uint64_t v26 = -2 * v42;
                    do
                    {
                      uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(v1);
                      BOOL v27 = __CFADD__(v26++, 1);
                    }
                    while (!v27);
                  }
                }
              }
              else
              {
                unint64_t v21 = *(void *)(v1 + 168);
                if (v21 <= 7)
                {
                  *(void *)(v1 + 168) = v21 + 1;
                  *(unsigned char *)(v1 + v21 + 160) = v6;
                }
                *(void *)&long long v42 = 0;
                uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readArrayTag(v1, (char *)&v42);
                for (i = v42; i; uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::skipObject(v1))
                  --i;
              }
            }
            return result;
          }
          unint64_t v20 = *(void *)(v1 + 168);
          if (v20 <= 7)
          {
            *(void *)(v1 + 168) = v20 + 1;
            *(unsigned char *)(v1 + v20 + 160) = v6;
          }
          *(void *)&long long v42 = 0;
          re::EncoderOPACK<re::CFDataBufferedOutputStream>::readDataTag(v1, (uint64_t *)&v42);
        }
        else
        {
          unint64_t v16 = *(void *)(v1 + 168);
          if (v16 <= 7)
          {
            *(void *)(v1 + 168) = v16 + 1;
            *(unsigned char *)(v1 + v16 + 160) = v6;
          }
          *(void *)&long long v42 = 0;
          re::EncoderOPACK<re::CFDataBufferedOutputStream>::readStringTag(v1, (uint64_t *)&v42);
        }
        return re::EncoderOPACK<re::CFDataBufferedOutputStream>::readRaw(v1, v42, v5);
      }
LABEL_12:
      if (*(unsigned char *)(v1 + 40)) {
        return result;
      }
      unint64_t v7 = *(void *)(v1 + 168);
      if (!v7)
      {
        size_t v11 = 8;
        goto LABEL_72;
      }
      uint64_t v8 = 8;
      if (v7 >= 8) {
        uint64_t v9 = 8;
      }
      else {
        uint64_t v9 = *(void *)(v1 + 168);
      }
      *(void *)(v1 + 168) = v7 - v9;
      if (v7 > 7) {
        return result;
      }
    }
LABEL_48:
    size_t v11 = v8 - v9;
LABEL_72:
    uint64_t v10 = (void *)v1;
LABEL_73:
    uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v10, 0, v11);
    if ((result & 1) == 0)
    {
      uint64_t v13 = v1;
      int v12 = (const char *)v5;
      return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readTag(uint64_t a1, char *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 168);
    if (v5)
    {
      uint64_t v6 = v5 - 1;
      *a2 = *(unsigned char *)(a1 + v6 + 160);
      *(void *)(a1 + 168) = v6;
      return 1;
    }
    uint64_t v3 = 1;
    if (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, a2, 1uLL))return v3; {
    re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1, "unknown", a3);
    }
  }
  return 0;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readRaw(uint64_t result, size_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(result + 40))
  {
    size_t v4 = a2;
    uint64_t v5 = result;
    size_t v6 = *(void *)(result + 168);
    if (v6)
    {
      if (v6 >= a2) {
        size_t v7 = a2;
      }
      else {
        size_t v7 = *(void *)(result + 168);
      }
      *(void *)(result + 168) = v6 - v7;
      size_t v4 = a2 - v7;
    }
    if (v4)
    {
      uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, 0, v4);
      if ((result & 1) == 0)
      {
        return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v5, "unknown", a3);
      }
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readStringTag(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 40)) {
    return result;
  }
  uint64_t v3 = result;
  unsigned __int8 __src = 0;
  uint64_t v4 = *(void *)(result + 168);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t result = *(unsigned __int8 *)(result + v5 + 160);
    unsigned __int8 __src = *(unsigned char *)(v3 + v5 + 160);
    *(void *)(v3 + 168) = v5;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"String"); {
    uint64_t result = __src;
    }
  }
  if ((result - 64) > 0x20)
  {
    switch((int)result)
    {
      case 'a':
        LOBYTE(v30) = 0;
        if (!*(unsigned char *)(v3 + 40))
        {
          uint64_t v6 = *(void *)(v3 + 168);
          if (v6)
          {
            uint64_t v7 = v6 - 1;
            LODWORD(v6) = *(unsigned __int8 *)(v3 + v6 - 1 + 160);
            *(void *)(v3 + 168) = v7;
          }
          else
          {
            uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, (char *)&v30, 1uLL);
            if (!result) {
              return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"String");
            }
            LODWORD(v6) = v30;
          }
          uint64_t v6 = v6;
          goto LABEL_8;
        }
        return result;
      case 'b':
        LOWORD(v30) = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v9 = *(void *)(v3 + 168);
        if (v9)
        {
          uint64_t v10 = 2;
          if (v9 < 2) {
            uint64_t v10 = *(void *)(v3 + 168);
          }
          int64_t v11 = v9 - v10;
          if ((uint64_t)(v9 - 1) >= (uint64_t)(v9 - v10))
          {
            int v12 = (char *)&v30;
            uint64_t v24 = *(void *)(v3 + 168);
            do
            {
              *v12++ = *(unsigned char *)(v3 + 159 + v24);
              int64_t v25 = v24 - 2;
              --v24;
            }
            while (v25 >= v11);
          }
          else
          {
            int v12 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v11;
          if (v9 > 1)
          {
LABEL_43:
            uint64_t v6 = (unsigned __int16)v30;
            goto LABEL_8;
          }
          size_t v23 = 2 - v10;
        }
        else
        {
          int v12 = (char *)&v30;
          size_t v23 = 2;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v12, v23);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"String");
        }
        goto LABEL_43;
      case 'c':
        LODWORD(v30) = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v13 = *(void *)(v3 + 168);
        if (v13)
        {
          uint64_t v14 = 4;
          if (v13 < 4) {
            uint64_t v14 = *(void *)(v3 + 168);
          }
          int64_t v15 = v13 - v14;
          if ((uint64_t)(v13 - 1) >= (uint64_t)(v13 - v14))
          {
            unint64_t v16 = (char *)&v30;
            uint64_t v26 = *(void *)(v3 + 168);
            do
            {
              *v16++ = *(unsigned char *)(v3 + 159 + v26);
              int64_t v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v15);
          }
          else
          {
            unint64_t v16 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v15;
          if (v13 > 3) {
            goto LABEL_49;
          }
          size_t v21 = 4 - v14;
        }
        else
        {
          unint64_t v16 = (char *)&v30;
          size_t v21 = 4;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v16, v21);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"String");
        }
LABEL_49:
        uint64_t v6 = v30;
        goto LABEL_8;
      case 'd':
        uint64_t v30 = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v17 = *(void *)(v3 + 168);
        if (v17)
        {
          uint64_t v18 = 8;
          if (v17 < 8) {
            uint64_t v18 = *(void *)(v3 + 168);
          }
          int64_t v19 = v17 - v18;
          if ((uint64_t)(v17 - 1) >= (uint64_t)(v17 - v18))
          {
            unint64_t v20 = (char *)&v30;
            uint64_t v28 = *(void *)(v3 + 168);
            do
            {
              *v20++ = *(unsigned char *)(v3 + 159 + v28);
              int64_t v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v19);
          }
          else
          {
            unint64_t v20 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v19;
          if (v17 > 7) {
            goto LABEL_55;
          }
          size_t v22 = 8 - v18;
        }
        else
        {
          unint64_t v20 = (char *)&v30;
          size_t v22 = 8;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v20, v22);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"String");
        }
LABEL_55:
        uint64_t v6 = v30;
        goto LABEL_8;
      default:
        uint64_t v8 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(v3, (uint64_t)"String", (uint64_t)v8);
    }
  }
  uint64_t v6 = result - 64;
LABEL_8:
  *a2 = v6;
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readDataTag(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 40)) {
    return result;
  }
  uint64_t v3 = result;
  unsigned __int8 __src = 0;
  uint64_t v4 = *(void *)(result + 168);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t result = *(unsigned __int8 *)(result + v5 + 160);
    unsigned __int8 __src = *(unsigned char *)(v3 + v5 + 160);
    *(void *)(v3 + 168) = v5;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__src, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"BLOB"); {
    uint64_t result = __src;
    }
  }
  if ((result - 112) > 0x20)
  {
    switch((int)result)
    {
      case 145:
        LOBYTE(v30) = 0;
        if (!*(unsigned char *)(v3 + 40))
        {
          uint64_t v6 = *(void *)(v3 + 168);
          if (v6)
          {
            uint64_t v7 = v6 - 1;
            LODWORD(v6) = *(unsigned __int8 *)(v3 + v6 - 1 + 160);
            *(void *)(v3 + 168) = v7;
          }
          else
          {
            uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, (char *)&v30, 1uLL);
            if (!result) {
              return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"BLOB");
            }
            LODWORD(v6) = v30;
          }
          uint64_t v6 = v6;
          goto LABEL_8;
        }
        return result;
      case 146:
        LOWORD(v30) = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v9 = *(void *)(v3 + 168);
        if (v9)
        {
          uint64_t v10 = 2;
          if (v9 < 2) {
            uint64_t v10 = *(void *)(v3 + 168);
          }
          int64_t v11 = v9 - v10;
          if ((uint64_t)(v9 - 1) >= (uint64_t)(v9 - v10))
          {
            int v12 = (char *)&v30;
            uint64_t v24 = *(void *)(v3 + 168);
            do
            {
              *v12++ = *(unsigned char *)(v3 + 159 + v24);
              int64_t v25 = v24 - 2;
              --v24;
            }
            while (v25 >= v11);
          }
          else
          {
            int v12 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v11;
          if (v9 > 1)
          {
LABEL_43:
            uint64_t v6 = (unsigned __int16)v30;
            goto LABEL_8;
          }
          size_t v23 = 2 - v10;
        }
        else
        {
          int v12 = (char *)&v30;
          size_t v23 = 2;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v12, v23);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"BLOB");
        }
        goto LABEL_43;
      case 147:
        LODWORD(v30) = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v13 = *(void *)(v3 + 168);
        if (v13)
        {
          uint64_t v14 = 4;
          if (v13 < 4) {
            uint64_t v14 = *(void *)(v3 + 168);
          }
          int64_t v15 = v13 - v14;
          if ((uint64_t)(v13 - 1) >= (uint64_t)(v13 - v14))
          {
            unint64_t v16 = (char *)&v30;
            uint64_t v26 = *(void *)(v3 + 168);
            do
            {
              *v16++ = *(unsigned char *)(v3 + 159 + v26);
              int64_t v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v15);
          }
          else
          {
            unint64_t v16 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v15;
          if (v13 > 3) {
            goto LABEL_49;
          }
          size_t v21 = 4 - v14;
        }
        else
        {
          unint64_t v16 = (char *)&v30;
          size_t v21 = 4;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v16, v21);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"BLOB");
        }
LABEL_49:
        uint64_t v6 = v30;
        goto LABEL_8;
      case 148:
        uint64_t v30 = 0;
        if (*(unsigned char *)(v3 + 40)) {
          return result;
        }
        unint64_t v17 = *(void *)(v3 + 168);
        if (v17)
        {
          uint64_t v18 = 8;
          if (v17 < 8) {
            uint64_t v18 = *(void *)(v3 + 168);
          }
          int64_t v19 = v17 - v18;
          if ((uint64_t)(v17 - 1) >= (uint64_t)(v17 - v18))
          {
            unint64_t v20 = (char *)&v30;
            uint64_t v28 = *(void *)(v3 + 168);
            do
            {
              *v20++ = *(unsigned char *)(v3 + 159 + v28);
              int64_t v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v19);
          }
          else
          {
            unint64_t v20 = (char *)&v30;
          }
          *(void *)(v3 + 168) = v19;
          if (v17 > 7) {
            goto LABEL_55;
          }
          size_t v22 = 8 - v18;
        }
        else
        {
          unint64_t v20 = (char *)&v30;
          size_t v22 = 8;
        }
        uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, v20, v22);
        if ((result & 1) == 0) {
          return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"BLOB");
        }
LABEL_55:
        uint64_t v6 = v30;
        goto LABEL_8;
      default:
        uint64_t v8 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(v3, (uint64_t)"BLOB", (uint64_t)v8);
    }
  }
  uint64_t v6 = result - 112;
LABEL_8:
  *a2 = v6;
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readArrayTag(uint64_t result, char *__src)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v3 = result;
    unsigned __int8 __srca = 0;
    uint64_t v4 = *(void *)(result + 168);
    if (v4)
    {
      uint64_t v5 = v4 - 1;
      uint64_t result = *(unsigned __int8 *)(result + v5 + 160);
      unsigned __int8 __srca = *(unsigned char *)(v3 + v5 + 160);
      *(void *)(v3 + 168) = v5;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__srca, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"Array"); {
      uint64_t result = __srca;
      }
    }
    if ((result + 48) > 0xEu)
    {
      if (result == 223)
      {
        return re::EncoderOPACK<re::CFDataBufferedOutputStream>::readUint64(v3, __src);
      }
      else
      {
        uint64_t v6 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(v3, (uint64_t)"Array", (uint64_t)v6);
      }
    }
    else
    {
      *(void *)unsigned __int8 __src = result - 208;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readDictionaryTag(uint64_t result, char *__src)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v3 = result;
    unsigned __int8 __srca = 0;
    uint64_t v4 = *(void *)(result + 168);
    if (v4)
    {
      uint64_t v5 = v4 - 1;
      uint64_t result = *(unsigned __int8 *)(result + v5 + 160);
      unsigned __int8 __srca = *(unsigned char *)(v3 + v5 + 160);
      *(void *)(v3 + 168) = v5;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)result, (char *)&__srca, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"Dictionary"); {
      uint64_t result = __srca;
      }
    }
    if ((result + 32) <= 0xEu)
    {
      *(void *)unsigned __int8 __src = result - 224;
      return result;
    }
    if (result != 210) {
      goto LABEL_17;
    }
    uint64_t result = re::EncoderOPACK<re::CFDataBufferedOutputStream>::readUint64(v3, __src);
    if (!result || *(unsigned char *)(v3 + 40)) {
      return result;
    }
    uint64_t v6 = *(void *)(v3 + 168);
    if (v6)
    {
      uint64_t v7 = v6 - 1;
      uint64_t result = *(unsigned __int8 *)(v3 + v7 + 160);
      unsigned __int8 __srca = *(unsigned char *)(v3 + v7 + 160);
      *(void *)(v3 + 168) = v7;
      goto LABEL_16;
    }
    if (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)v3, (char *)&__srca, 1uLL))
    {
      uint64_t result = __srca;
LABEL_16:
      if (result == 239) {
        return result;
      }
LABEL_17:
      uint64_t v8 = re::OPACK::toString(result);
      return re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(v3, (uint64_t)"Dictionary", (uint64_t)v8);
    }
    return re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(v3, "unknown", (uint64_t)"Dictionary");
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v12) {
    uint64_t v6 = *(unsigned char **)&v13[7];
  }
  else {
    uint64_t v6 = v13;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Expected type: \"%s\". Actual type: \"%s\".", (re::DynamicString *)&v14, v6, a2, a3);
  *(void *)&long long v18 = 400;
  *((void *)&v18 + 1) = re::FoundationErrorCategory(void)::instance;
  uint64_t v7 = v16;
  uint64_t v21 = v16;
  uint64_t v22 = v17;
  uint64_t v8 = v14;
  char v9 = v15;
  uint64_t v19 = v14;
  uint64_t v20 = v15;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, &v18);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, v7);
  }
  uint64_t result = v11;
  if (v11)
  {
    if (v12) {
      return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::CFDataBufferedOutputStream>::readUint64(uint64_t a1, char *__src)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unsigned __int8 __srca = 0;
  uint64_t v5 = *(void *)(a1 + 168);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    int v7 = *(unsigned __int8 *)(a1 + v5 - 1 + 160);
    unsigned __int8 __srca = v7;
    *(void *)(a1 + 168) = v6;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, (char *)&__srca, 1uLL) & 1) == 0)
    {
LABEL_25:
      long long v18 = "UInt64";
LABEL_26:
      re::Encoder<re::EncoderOPACK<re::CFDataBufferedOutputStream>,re::CFDataBufferedOutputStream>::setErrorWithType(a1, "unknown", (uint64_t)v18);
      return 0;
    }
    int v7 = __srca;
  }
  if (v7 != 120)
  {
    unint64_t v14 = *(void *)(a1 + 168);
    if (v14 <= 7)
    {
      *(void *)(a1 + 168) = v14 + 1;
      *(unsigned char *)(a1 + v14 + 160) = v7;
    }
    uint64_t v44 = 0;
    if (*(unsigned char *)(a1 + 40)) {
      return 0;
    }
    unsigned __int8 v46 = 0;
    uint64_t v15 = *(void *)(a1 + 168);
    if (v15)
    {
      uint64_t v16 = v15 - 1;
      unsigned int v17 = *(unsigned __int8 *)(a1 + v16 + 160);
      unsigned __int8 v46 = *(unsigned char *)(a1 + v16 + 160);
      *(void *)(a1 + 168) = v16;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, (char *)&v46, 1uLL) & 1) == 0)
      {
        long long v18 = "Int64";
        goto LABEL_26;
      }
      unsigned int v17 = v46;
    }
    if (v17 - 7 <= 0x28)
    {
      uint64_t v44 = v17 - 8;
LABEL_31:
      uint64_t v19 = v44;
LABEL_32:
      *(void *)unsigned __int8 __src = v19;
      return 1;
    }
    switch(v17)
    {
      case '0':
        LOBYTE(v45) = 0;
        if (*(unsigned char *)(a1 + 40)) {
          return 0;
        }
        uint64_t v19 = *(void *)(a1 + 168);
        if (v19)
        {
          uint64_t v20 = v19 - 1;
          LOBYTE(v19) = *(unsigned char *)(a1 + v19 - 1 + 160);
          *(void *)(a1 + 168) = v20;
        }
        else
        {
          if (!re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, (char *)&v45, 1uLL))
          {
            long long v18 = "8-Bit Signed Integer";
            goto LABEL_26;
          }
          LOBYTE(v19) = v45;
        }
        uint64_t v19 = (char)v19;
        goto LABEL_32;
      case '1':
        LOWORD(v45) = 0;
        if (*(unsigned char *)(a1 + 40)) {
          return 0;
        }
        unint64_t v22 = *(void *)(a1 + 168);
        if (v22)
        {
          uint64_t v23 = 2;
          if (v22 < 2) {
            uint64_t v23 = *(void *)(a1 + 168);
          }
          int64_t v24 = v22 - v23;
          if ((uint64_t)(v22 - 1) >= (uint64_t)(v22 - v23))
          {
            int64_t v25 = (char *)&v45;
            uint64_t v37 = *(void *)(a1 + 168);
            do
            {
              *v25++ = *(unsigned char *)(a1 + 159 + v37);
              int64_t v38 = v37 - 2;
              --v37;
            }
            while (v38 >= v24);
          }
          else
          {
            int64_t v25 = (char *)&v45;
          }
          *(void *)(a1 + 168) = v24;
          if (v22 > 1) {
            goto LABEL_69;
          }
          size_t v34 = 2 - v23;
        }
        else
        {
          int64_t v25 = (char *)&v45;
          size_t v34 = 2;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, v25, v34) & 1) == 0)
        {
          long long v18 = "16-Bit Signed Integer";
          goto LABEL_26;
        }
LABEL_69:
        uint64_t v19 = (__int16)v45;
        goto LABEL_32;
      case '2':
        int v45 = 0;
        if (*(unsigned char *)(a1 + 40)) {
          return 0;
        }
        unint64_t v26 = *(void *)(a1 + 168);
        if (v26)
        {
          uint64_t v27 = 4;
          if (v26 < 4) {
            uint64_t v27 = *(void *)(a1 + 168);
          }
          int64_t v28 = v26 - v27;
          if ((uint64_t)(v26 - 1) >= (uint64_t)(v26 - v27))
          {
            int64_t v29 = (char *)&v45;
            uint64_t v39 = *(void *)(a1 + 168);
            do
            {
              *v29++ = *(unsigned char *)(a1 + 159 + v39);
              int64_t v40 = v39 - 2;
              --v39;
            }
            while (v40 >= v28);
          }
          else
          {
            int64_t v29 = (char *)&v45;
          }
          *(void *)(a1 + 168) = v28;
          if (v26 > 3) {
            goto LABEL_76;
          }
          size_t v35 = 4 - v27;
        }
        else
        {
          int64_t v29 = (char *)&v45;
          size_t v35 = 4;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, v29, v35) & 1) == 0)
        {
          long long v18 = "32-Bit Signed Integer";
          goto LABEL_26;
        }
LABEL_76:
        uint64_t v19 = v45;
        goto LABEL_32;
      case '3':
        if (*(unsigned char *)(a1 + 40)) {
          return 0;
        }
        unint64_t v30 = *(void *)(a1 + 168);
        if (v30)
        {
          uint64_t v31 = 8;
          if (v30 < 8) {
            uint64_t v31 = *(void *)(a1 + 168);
          }
          int64_t v32 = v30 - v31;
          if ((uint64_t)(v30 - 1) >= (uint64_t)(v30 - v31))
          {
            uint64_t v33 = (char *)&v44;
            uint64_t v41 = *(void *)(a1 + 168);
            do
            {
              *v33++ = *(unsigned char *)(a1 + 159 + v41);
              int64_t v42 = v41 - 2;
              --v41;
            }
            while (v42 >= v32);
          }
          else
          {
            uint64_t v33 = (char *)&v44;
          }
          *(void *)(a1 + 168) = v32;
          if (v30 > 7) {
            goto LABEL_31;
          }
          size_t v36 = 8 - v31;
        }
        else
        {
          uint64_t v33 = (char *)&v44;
          size_t v36 = 8;
        }
        if (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, v33, v36))goto LABEL_31; {
        long long v18 = "64-Bit Signed Integer";
        }
        goto LABEL_26;
      default:
        uint64_t v21 = re::OPACK::toString(v17);
        re::EncoderOPACK<re::CFDataBufferedOutputStream>::setErrorUnexpectedTag(a1, (uint64_t)"Int64", (uint64_t)v21);
        return 0;
    }
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    unint64_t v8 = *(void *)(a1 + 168);
    if (v8)
    {
      uint64_t v9 = 8;
      if (v8 < 8) {
        uint64_t v9 = *(void *)(a1 + 168);
      }
      int64_t v10 = v8 - v9;
      if ((uint64_t)(v8 - 1) >= (uint64_t)(v8 - v9))
      {
        uint64_t v11 = *(void *)(a1 + 168);
        do
        {
          *__src++ = *(unsigned char *)(a1 + 159 + v11);
          int64_t v12 = v11 - 2;
          --v11;
        }
        while (v12 >= v10);
      }
      *(void *)(a1 + 168) = v10;
      if (v8 > 7) {
        return 1;
      }
      size_t v13 = 8 - v9;
    }
    else
    {
      size_t v13 = 8;
    }
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((void *)a1, __src, v13) & 1) == 0)goto LABEL_25; {
    return 1;
    }
  }
  return 0;
}

uint64_t re::CoreREAssetUtils::textureSemanticOption(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFBooleanRef Value = CFDictionaryGetValue(a1, @"kRETextureAssetCreateOptionSemantic");
    if (Value)
    {
      uint64_t v5 = Value;
      if (CFEqual(Value, @"kRETextureAssetCreateSemanticColor")) {
        return 3;
      }
      if (CFEqual(v5, @"kRETextureAssetCreateSemanticHDRColor")) {
        return 4;
      }
    }
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a1, @"kRETextureAssetCreateOptionSemantic");
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        unsigned int v14 = 0;
        CFNumberGetValue(v7, kCFNumberIntType, &v14);
        return v14;
      }
      else
      {
        CFTypeID v9 = CFGetTypeID(v7);
        int64_t v10 = (re *)CFCopyTypeIDDescription(v9);
        uint64_t v11 = *re::pipelineLogObjects(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          size_t v13 = v11;
          unsigned int v14 = 136315394;
          CStringPtr = CFStringGetCStringPtr(@"kRETextureAssetCreateOptionSemantic", 0x8000100u);
          __int16 v16 = 2080;
          unsigned int v17 = CFStringGetCStringPtr((CFStringRef)v10, 0x8000100u);
          _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Wrong type for %s. Expected a number, but got %s", (uint8_t *)&v14, 0x16u);
        }
        CFRelease(v10);
      }
    }
  }
  return a2;
}

uint64_t re::CoreREAssetUtils::latLongSamplingQualityOption(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"kRECubeMapCreateOptionLatLongSamplingQuality");
    if (Value)
    {
      CFNumberRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFNumberGetTypeID())
      {
        unsigned int v11 = 0;
        CFNumberGetValue(v4, kCFNumberIntType, &v11);
        return v11;
      }
      else
      {
        CFTypeID v6 = CFGetTypeID(v4);
        CFNumberRef v7 = (re *)CFCopyTypeIDDescription(v6);
        CFTypeID v8 = *re::pipelineLogObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int64_t v10 = v8;
          unsigned int v11 = 136315394;
          CStringPtr = CFStringGetCStringPtr(@"kRECubeMapCreateOptionLatLongSamplingQuality", 0x8000100u);
          __int16 v13 = 2080;
          unsigned int v14 = CFStringGetCStringPtr((CFStringRef)v7, 0x8000100u);
          _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Wrong type for %s. Expected a number, but got %s", (uint8_t *)&v11, 0x16u);
        }
        CFRelease(v7);
      }
    }
  }
  return a2;
}

uint64_t anonymous namespace'::GetUnsignedInteger<unsigned int>(const __CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      unsigned int v13 = 0;
      CFNumberGetValue(v6, kCFNumberIntType, &v13);
      return v13;
    }
    else
    {
      CFTypeID v8 = CFGetTypeID(v6);
      CFTypeID v9 = (re *)CFCopyTypeIDDescription(v8);
      int64_t v10 = *re::pipelineLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int64_t v12 = v10;
        unsigned int v13 = 136315394;
        CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
        __int16 v15 = 2080;
        __int16 v16 = CFStringGetCStringPtr((CFStringRef)v9, 0x8000100u);
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Wrong type for %s. Expected a number, but got %s", (uint8_t *)&v13, 0x16u);
      }
      CFRelease(v9);
    }
  }
  return a3;
}

uint64_t re::CoreREAssetUtils::iblSamplingQuality(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"kREEnvironmentResourceCreateOptionSamplingQuality");
    if (Value)
    {
      CFNumberRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFNumberGetTypeID())
      {
        unsigned int v11 = 0;
        CFNumberGetValue(v4, kCFNumberIntType, &v11);
        return v11;
      }
      else
      {
        CFTypeID v6 = CFGetTypeID(v4);
        CFTypeID v7 = (re *)CFCopyTypeIDDescription(v6);
        CFTypeID v8 = *re::pipelineLogObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int64_t v10 = v8;
          unsigned int v11 = 136315394;
          CStringPtr = CFStringGetCStringPtr(@"kREEnvironmentResourceCreateOptionSamplingQuality", 0x8000100u);
          __int16 v13 = 2080;
          unsigned int v14 = CFStringGetCStringPtr((CFStringRef)v7, 0x8000100u);
          _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Wrong type for %s. Expected a number, but got %s", (uint8_t *)&v11, 0x16u);
        }
        CFRelease(v7);
      }
    }
  }
  return a2;
}

void re::CoreREAssetUtils::textureASTCCompressionOptions(re::CoreREAssetUtils *this@<X0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  int v28 = (int)a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  CFNumberRef v4 = this;
  uint64_t v5 = [(re::CoreREAssetUtils *)v4 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v34;
    unint64_t v9 = 1;
    uint64_t v27 = a3;
LABEL_3:
    uint64_t v29 = v7;
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v34 != v8) {
        objc_enumerationMutation(v4);
      }
      unsigned int v11 = *(void **)(*((void *)&v33 + 1) + 8 * v10);
      int64_t v12 = [(re::CoreREAssetUtils *)v4 objectForKey:v11];
      if ([v11 isEqualToString:@"kRETextureCompressionOptionASTCBlockSize"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          CFStringRef v19 = @"kRETextureCompressionOptionASTCBlockSize";
LABEL_31:
          CStringPtr = CFStringGetCStringPtr(v19, 0x8000100u);
          re::DynamicString::format((re::DynamicString *)"TextureASTCCompression option dictionary: value for key '%s' must be an kRETextureASTCCompressionBlockSize enum value.", (re::DynamicString *)&v30, CStringPtr);
          goto LABEL_34;
        }
        uint64_t v13 = [v12 unsignedIntValue];
        uint64_t v14 = v13;
        if (v13) {
          BOOL v15 = (int)v13 <= 14;
        }
        else {
          BOOL v15 = 0;
        }
        if (!v15)
        {
          uint64_t v20 = CFStringGetCStringPtr(@"kRETextureCompressionOptionASTCBlockSize", 0x8000100u);
          goto LABEL_33;
        }
        unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v13;
      }
      else if ([v11 isEqualToString:@"kRETextureCompressionOptionASTCMode"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          CFStringRef v19 = @"kRETextureCompressionOptionASTCMode";
          goto LABEL_31;
        }
        uint64_t v16 = [v12 unsignedIntValue];
        uint64_t v14 = v16;
        if ((int)v16 > 3)
        {
          uint64_t v20 = CFStringGetCStringPtr(@"kRETextureCompressionOptionASTCMode", 0x8000100u);
LABEL_33:
          re::DynamicString::format((re::DynamicString *)"TextureASTCCompression option dictionary: invalid value '%d' for key '%s'; expecting an"
                                 " kRETextureASTCCompressionBlockSize enum value.",
            (re::DynamicString *)&v30,
            v14,
            v20);
LABEL_34:
          long long v21 = v30;
          uint64_t v22 = v31;
          uint64_t v23 = v32;
          *(unsigned char *)uint64_t v27 = 0;
          *(_OWORD *)(v27 + 8) = v21;
          *(void *)(v27 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v22;
          *(void *)(v27 + 32) = v23;

          goto LABEL_35;
        }
        unint64_t v9 = v9 | ((unint64_t)v16 << 32);
      }
      else if ([v11 isEqualToString:@"kRETextureCompressionOptionASTCQuality"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          int64_t v25 = CFStringGetCStringPtr(@"kRETextureCompressionOptionASTCQuality", 0x8000100u);
          re::DynamicString::format((re::DynamicString *)"TextureASTCCompression option dictionary: value for key '%s' must be an RETextureASTCCompressionQuality enum value.", (re::DynamicString *)&v30, v25);
          goto LABEL_34;
        }
        uint64_t v17 = [v12 unsignedIntValue];
        uint64_t v18 = v17;
        if (!v17 || (int)v17 > 4)
        {
          unint64_t v26 = CFStringGetCStringPtr(@"kRETextureCompressionOptionASTCMode", 0x8000100u);
          re::DynamicString::format((re::DynamicString *)"TextureASTCCompression option dictionary: invalid value '%d' for key '%s'; expecting an"
                                 " RETextureASTCCompressionQuality enum value.",
            (re::DynamicString *)&v30,
            v18,
            v26);
          goto LABEL_34;
        }
        uint64_t v29 = dword_23442DB24[(int)v17];
      }
      else if (v28)
      {
        re::DynamicString::format((re::DynamicString *)"TextureASTCCompression option dictionary: unsupported key: '%s'.", (re::DynamicString *)&v30, [v11 UTF8String]);
        goto LABEL_34;
      }

      if (v6 == ++v10)
      {
        uint64_t v6 = [(re::CoreREAssetUtils *)v4 countByEnumeratingWithState:&v33 objects:v37 count:16];
        a3 = v27;
        uint64_t v7 = v29;
        if (v6) {
          goto LABEL_3;
        }
        goto LABEL_28;
      }
    }
  }
  uint64_t v7 = 0;
  unint64_t v9 = 1;
LABEL_28:

  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7 << 32;
LABEL_35:
}

void re::CoreREAssetUtils::logAndSetErrorFromString(re::CoreREAssetUtils *this, char *a2, __CFError **a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v5 = *re::pipelineLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)userInfoValues = 136315138;
      *(void *)&userInfoValues[4] = this;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "%s", userInfoValues, 0xCu);
      if (!a2) {
        return;
      }
    }
    else if (!a2)
    {
      return;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)this, 0x8000100u);
    userInfoKeys = (void *)*MEMORY[0x263EFFC70];
    *(void *)userInfoValues = v6;
    *(void *)a2 = CFErrorCreateWithUserInfoKeysAndValues(0, @"REPipelineErrorDomain", 100, (const void *const *)&userInfoKeys, (const void *const *)userInfoValues, 1);
    CFRelease(*(CFTypeRef *)userInfoValues);
  }
}

uint64_t re::CoreREAssetUtils::assetManagerTextureMemoryAssetCreateWithTextureData(unsigned char *a1, uint64_t a2, int a3, char a4, long long *a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a2 + 88))
  {
    id v10 = *(id *)(a2 + 8);
    unsigned int v11 = v10;
    if (a1[1344] && !objc_msgSend(v10, sel_iosurface) && (objc_msgSend(v11, sel_isShareable) & 1) == 0)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int64_t v12 = (id)CoreRELog::log;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = objc_msgSend(objc_msgSend(v11, sel_label), sel_UTF8String);
        _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "REAssetManagerTextureMemoryAssetCreateWithMTLTexture: should create texture '%s' as a shared texture for efficiency", (uint8_t *)&buf, 0xCu);
      }
    }
    if (v11) {
  }
    }
  long long v13 = a5[1];
  v21[0] = *a5;
  v21[1] = v13;
  uint64_t TextureAsset = (re::TextureAsset *)re::TextureAsset::makeTextureAsset(a2, a3, v21);
  long long buf = 0uLL;
  uint64_t v23 = 0;
  BOOL v15 = re::TextureAsset::assetType(TextureAsset);
  if (a4) {
    (*(void (**)(long long *__return_ptr, unsigned char *, re::TextureAsset *, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v19, a1, TextureAsset, v15, 0, 0, 1);
  }
  else {
    (*(void (**)(long long *__return_ptr, unsigned char *, re::TextureAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v19, a1, TextureAsset, v15, 0, 0, 0);
  }
  uint64_t v16 = v19;
  long long buf = v19;
  long long v19 = 0uLL;
  uint64_t v23 = v20;
  uint64_t v20 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf);
  return v16;
}

id re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(uint64_t a1, void *a2, void *a3)
{
  v49[4] = *MEMORY[0x263EF8340];
  uint64_t v41 = a2;
  v40[1] = 0;
  uint64_t v40[2] = 0;
  v37[0] = 0;
  long long v38 = v24;
  long long v39 = v25;
  uint64_t v6 = *(void *)(a1 + 1040);
  uint64_t v7 = re::TextureAsset::assetType(v5);
  uint64_t v8 = (re::TextureAsset *)*(id *)(re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v6, (unint64_t)v7)+ 40);
  int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0x7FFFFFFFLL;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 0;
  uint64_t v31 = 0x7FFFFFFFLL;
  uint64_t v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  int v35 = 0;
  uint64_t v9 = re::TextureAsset::assetType(v8);
  id v10 = re::globalAllocators((re *)v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 152, 8);
  int64_t v12 = v8;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 56) = 65793;
  *(void *)(v11 + 80) = 0;
  *(_WORD *)(v11 + 88) = 0;
  *(void *)(v11 + 128) = 0;
  *(void *)(v11 + 136) = v37;
  *(void *)(v11 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v11 + 112) = 0;
  *(void *)(v11 + 96) = 0;
  *(_DWORD *)(v11 + 120) = 0;
  *(void *)uint64_t v11 = &unk_26E737CA0;
  *(void *)(v11 + 8) = 0;
  long long v13 = v12;
  *(void *)(v11 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v13;
  uint64_t v44 = &unk_26E737DF8;
  long long v47 = &v44;
  v49[3] = v49;
  uint64_t v48 = v11;
  v49[0] = &unk_26E737DF8;
  re::internal::AssetTypeRegistry::registerAssetType((uint64_t)&v24, (char **)v9, &v48);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v48);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v44);

  v40[0] = (uint64_t)&v24;
  BOOL v15 = re::TextureAsset::assetType(v14);
  v23[0] = 0;
  CompiledAssetFromData = (re::TextureAsset *)re::AssetUtilities::loadCompiledAssetFromData((id *)&v41, v40, (const char **)v15, 0, 0, (uint64_t)v23, (uint64_t)&v44);
  if ((_BYTE)v44)
  {
    id v17 = re::TextureAsset::assetType(CompiledAssetFromData);
    uint64_t v18 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)&v24, (unint64_t)v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v45);
  }
  if (v37[0])
  {
    id v19 = (id) v38;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v20 = (id)CoreRELog::log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if (BYTE8(v38)) {
        uint64_t v22 = (char *)v39;
      }
      else {
        uint64_t v22 = (char *)&v38 + 9;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v43 = v22;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Failed to get header from compiled texture: %s", buf, 0xCu);
    }

    id v19 = 0;
    if (a3) {
      *a3 = 0;
    }
  }
  if (!(_BYTE)v44 && v45 && (v46 & 1) != 0) {
    (*(void (**)(uint64_t, void **))(*(void *)v45 + 40))(v45, v47);
  }
  re::internal::AssetTypeRegistry::~AssetTypeRegistry((re::internal::AssetTypeRegistry *)&v24);

  return v19;
}

void re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::CompiledHeaderAssetLoader::~CompiledHeaderAssetLoader(id *a1)
{
  *a1 = &unk_26E737CA0;

  re::TextureAssetLoader::~TextureAssetLoader((re::TextureAssetLoader *)a1);
}

{
  uint64_t vars8;

  *a1 = &unk_26E737CA0;

  re::TextureAssetLoader::~TextureAssetLoader((re::TextureAssetLoader *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::CompiledHeaderAssetLoader::createRuntimeData(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6 = a2[94];
  if (v6)
  {
    if (re::isHDR(v6)) {
      unsigned __int8 v7 = 1;
    }
    else {
      unsigned __int8 v7 = 2;
    }
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  int v20 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v13 = a3;
  int v16 = 0;
  re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v13, 0xFFFFFFFFFFFFFFFFLL);
  re::loadDescriptor(v14, v15, (id *)(a1 + 144), v7, (uint64_t)v11);
  re::Result<NS::SharedPtr<MTL::TextureDescriptor>,re::DynamicString>::operator=(*(void *)(a1 + 136), (uint64_t)v11);
  if (!**(unsigned char **)(a1 + 136))
  {
    id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v8, sel_setWidth_, (int)a2[90]);
    objc_msgSend(v8, sel_setHeight_, (int)a2[91]);
    objc_msgSend(v8, sel_setDepth_, (int)a2[92]);
    objc_msgSend(v8, sel_setPixelFormat_, (int)a2[94]);
    objc_msgSend(v8, sel_setTextureType_, (int)a2[95]);
    objc_msgSend(v8, sel_setSwizzle_, a2[96]);
    id v9 = v8;
    v11[0] = 1;
    id v12 = v9;
    re::Result<NS::SharedPtr<MTL::TextureDescriptor>,re::DynamicString>::operator=(*(void *)(a1 + 136), (uint64_t)v11);
    if (v8) {
  }
    }
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    int v16 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  if (v17 && v21) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  return 1;
}

uint64_t re::Result<NS::SharedPtr<MTL::TextureDescriptor>,re::DynamicString>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), (void **)(a2 + 8));
    }
    else
    {
      uint64_t v5 = (_OWORD *)(a1 + 8);
      CFNumberRef v4 = *(void **)(a1 + 8);
      if (v4) {

      }
      *uint64_t v5 = 0u;
      *(_OWORD *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a2 + 32) = 0;
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v6;
      *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v7;
      *(unsigned char *)a1 = 0;
      *(void *)(a2 + 16) = v9;
      *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v8;
    }
  }
  else if (*(unsigned char *)a2)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + 8), (re::DynamicString *)(a2 + 8));
  }
  return a1;
}

void std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E737DF8;
  return result;
}

void std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737DF8;
}

re *std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"operator()", 364, *a2);
}

uint64_t std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0,std::allocator<re::CoreREAssetUtils::assetManagerCopyTextureDescriptorWithCompiledData(REAssetManager *,__CFData const*,__CFError **)::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

void *REImmersiveSpaceTrackerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECollisionWorldDumpWithBlock(const re::CollisionWorld *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v7 = a4;
    uint64_t v17 = re::globalAllocators(v7)[2];
    uint64_t v18 = 0;
    char v19 = 0;
    id v20 = 0;
    uint64_t v15 = 0;
    re::FunctionBase<24ul,void ()(CollisionWorldWriter &,void const*,unsigned long)>::destroyCallable((uint64_t)v16);
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 32))(v17, 32, 0);
    void *v8 = &unk_26E738118;
    v8[1] = a2;
    _OWORD v8[2] = a3;
    id v8[3] = &v15;
    uint64_t v18 = v8;
    char v19 = 0;
    uint64_t v9 = _Block_copy(v7);

    id v10 = v20;
    id v20 = v9;
  }
  else
  {
    uint64_t v11 = a4;
    uint64_t v17 = re::globalAllocators(v11)[2];
    uint64_t v18 = 0;
    char v19 = 0;
    id v20 = 0;
    uint64_t v15 = 0;
    re::FunctionBase<24ul,void ()(CollisionWorldWriter &,void const*,unsigned long)>::destroyCallable((uint64_t)v16);
    v16[0] = &unk_26E738180;
    v16[1] = &v15;
    uint64_t v18 = v16;
    char v19 = 0;
    id v12 = _Block_copy(v11);

    id v10 = v20;
    id v20 = v12;
  }

  CollisionWorldWriter::write((CollisionWorldWriter *)v16, a1);
  if (v19) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v15;
  }

  re::FunctionBase<24ul,void ()(CollisionWorldWriter &,void const*,unsigned long)>::destroyCallable((uint64_t)v16);
  return v13;
}

uint64_t CollisionWorldWriter::write(CollisionWorldWriter *this, const re::CollisionWorld *a2)
{
  LODWORD(v16) = 5;
  LODWORD(v15) = (*(uint64_t (**)(const re::CollisionWorld *))(*(void *)a2 + 176))(a2);
  v10[0] = &v16;
  uint64_t v18 = 4;
  (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
  v10[0] = &v15;
  uint64_t v18 = 4;
  (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
  uint64_t result = (*(uint64_t (**)(const re::CollisionWorld *))(*(void *)a2 + 176))(a2);
  if (result)
  {
    uint64_t v5 = result;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*((unsigned char *)this + 40)) {
        break;
      }
      uint64_t v7 = (void **)(*(uint64_t (**)(const re::CollisionWorld *, uint64_t))(*(void *)a2 + 184))(a2, i);
      int v17 = ((uint64_t (*)(void **))(*v7)[2])(v7);
      v10[0] = &v17;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      int v16 = v7[4];
      v10[0] = &v16;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      v10[0] = (char *)&v16 + 4;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      uint64_t v15 = v7[5];
      v10[0] = &v15;
      uint64_t v18 = 8;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      char v14 = 0;
      v10[0] = &v14;
      uint64_t v18 = 1;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      int v13 = *((_DWORD *)v7 + 22);
      v10[0] = &v13;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      int v12 = (unint64_t)((uint64_t (*)(void **))(*v7)[2])(v7) >> 32;
      v10[0] = &v12;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      ((void (*)(void **))(*v7)[2])(v7);
      int v11 = v8;
      v10[0] = &v11;
      uint64_t v18 = 4;
      (*(void (**)(void, CollisionWorldWriter *, void *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, v10, &v18);
      (*(void (**)(void *__return_ptr))(*v7[2] + 40))(v10);
      CollisionWorldWriter::writePose((uint64_t)this, (uint64_t)v10);
      uint64_t v9 = (const re::CollisionShape *)(*(uint64_t (**)(void *))(*v7[2] + 24))(v7[2]);
      CollisionWorldWriter::writeShape(this, v9);
      uint64_t result = *((void *)this + 6);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(result + 16))(result, v7, i);
      }
    }
  }
  return result;
}

_anonymous_namespace_ *RECollisionWorldCreateFromBufferWithBlock(unsigned int *a1, unint64_t a2, void *a3)
{
  void v67[5] = *MEMORY[0x263EF8340];
  int v8 = a3;
  uint64_t v52 = re::globalAllocators(v8)[2];
  uint64_t v62 = 0;
  char v53 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  int v61 = 0;
  uint64_t v9 = (void (**)(void))_Block_copy(v8);

  uint64_t v54 = a1;
  unint64_t v55 = a2;
  uint64_t v56 = 0;
  long long v57 = v9;
  if (a2 >= 4 && (unsigned int v3 = *a1, v65[0] = *a1, v56 = 4, a2 > 7))
  {
    int v12 = 0;
    unsigned int v4 = a1[1];
    v65[1] = v4;
    uint64_t v56 = 8;
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    int v12 = 1;
    char v53 = 1;
  }
  char v14 = re::globalAllocators(v10);
  uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v14[2]);
  if (v4)
  {
    uint64_t v18 = 0;
    __int32 v49 = v16.n128_u32[0];
    __int32 v50 = v16.n128_u32[0];
    while (1)
    {
      if (v12) {
        goto LABEL_51;
      }
      unint64_t v19 = v56;
      uint64_t v20 = v56 + 4;
      if (v56 + 4 > v55) {
        goto LABEL_16;
      }
      v16.n128_u32[0] = *(unsigned int *)((char *)v54 + v56);
      v56 += 4;
      unint64_t v21 = v19 + 8;
      if (v19 + 8 > v55) {
        goto LABEL_13;
      }
      uint64_t v22 = (const float *)((char *)v54 + v20);
      __n128 v17 = v16;
      float32x4_t v23 = vld1q_dup_f32(v22);
      v17.n128_u32[1] = v23.u32[1];
      uint64_t v56 = v19 + 8;
      uint64_t v20 = v19 + 12;
      if (v19 + 12 > v55) {
        break;
      }
      long long v24 = (const float *)((char *)v54 + v21);
      float32x4_t v25 = vld1q_dup_f32(v24);
      v17.n128_u32[2] = v25.u32[2];
      __n128 v16 = v17;
      uint64_t v56 = v19 + 12;
      unint64_t v21 = v19 + 20;
      if (v19 + 20 > v55)
      {
LABEL_13:
        unint64_t v19 = v20;
        goto LABEL_16;
      }
      uint64_t v5 = *(void *)((char *)v54 + v20);
      uint64_t v56 = v19 + 20;
      v19 += 21;
      if (v19 > v55) {
        goto LABEL_15;
      }
      int v26 = 0;
      v16.n128_u8[12] = *((unsigned char *)v54 + v21);
      uint64_t v56 = v19;
LABEL_17:
      if (v3 < 2)
      {
        int v8 = 0;
LABEL_32:
        __int32 v49 = v16.n128_u32[0];
        __int32 v50 = v16.n128_u32[0];
        goto LABEL_33;
      }
      if (v19 + 4 > v55) {
        int v27 = 1;
      }
      else {
        int v27 = v26;
      }
      if (v27 == 1)
      {
        char v53 = 1;
      }
      else
      {
        int v8 = (re *)*(unsigned int *)((char *)v54 + v19);
        uint64_t v56 = v19 + 4;
        v19 += 4;
      }
      if (v3 < 4) {
        goto LABEL_32;
      }
      unint64_t v28 = v19 + 4;
      if (v19 + 4 > v55) {
        LOBYTE(v27) = 1;
      }
      if (v27) {
        goto LABEL_31;
      }
      __int32 v50 = *(unsigned int *)((char *)v54 + v19);
      uint64_t v56 = v19 + 4;
      v19 += 8;
      if (v19 > v55)
      {
        unint64_t v19 = v28;
LABEL_31:
        char v53 = 1;
        goto LABEL_33;
      }
      __int32 v49 = *(unsigned int *)((char *)v54 + v28);
      uint64_t v56 = v19;
LABEL_33:
      __n128 v63 = 0uLL;
      *(void *)&long long v64 = 0;
      *((void *)&v64 + 1) = 0x3F80000000000000;
      int8x16_t v51 = (int8x16_t)v16;
      if (v19 + 28 <= v55)
      {
        long long v29 = *(_OWORD *)((char *)v54 + v19);
        v17.n128_u64[0] = *(void *)((char *)v54 + v19 + 16);
        uint64_t v56 = v19 + 28;
        long long v64 = v29;
        v17.n128_u32[2] = *(unsigned int *)((char *)v54 + v19 + 24);
        __n128 v63 = v17;
      }
      else
      {
        char v53 = 1;
      }
      CollisionShape = CollisionWorldReader::readCollisionShape(v67, (uint64_t)&v52, v65);
      if (v53)
      {
        std::unique_ptr<re::CollisionShape,std::function<void ()(re::CollisionShape*)>>::~unique_ptr[abi:nn180100](v67);
        goto LABEL_51;
      }
      uint64_t v32 = re::globalAllocators((re *)CollisionShape)[2];
      uint64_t v33 = v67[0];
      v67[0] = 0;
      uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128 *, re *, uint64_t))(*(void *)v31 + 168))(v31, v32, v33, &v63, v8, v52);
      float32x4_t v35 = (float32x4_t)v51;
      v35.i32[1] = v50;
      v35.i32[2] = v49;
      float32x4_t v66 = v35;
      re::CollisionObject::setScale((uint64_t)v34, &v66);
      unint64_t v36 = vextq_s8(v51, v51, 4uLL).u64[0];
      if (v34[4] != v36)
      {
        v34[4] = v36;
        (*(void (**)(void *))(*v34 + 80))(v34);
      }
      void v34[5] = v5;
      uint64_t v37 = *((void *)v15 + 16);
      v34[7] = v37;
      (*(void (**)(uint64_t, void *))(*(void *)v37 + 192))(v37, v34);
      uint64_t v38 = v60;
      uint64_t v60 = 0;
      if (v38)
      {
        long long v39 = v62;
        uint64_t v40 = 40 * v38;
        do
        {
          long long v39 = std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>::~unique_ptr[abi:nn180100](v39)
              + 5;
          v40 -= 40;
        }
        while (v40);
      }
      ++v61;
      if (v57) {
        v57[2]();
      }
      std::unique_ptr<re::CollisionShape,std::function<void ()(re::CollisionShape*)>>::~unique_ptr[abi:nn180100](v67);
      int v12 = 0;
      ++v18;
      __n128 v16 = (__n128)v51;
      if (v18 == v4) {
        goto LABEL_54;
      }
    }
    __n128 v16 = v17;
LABEL_15:
    unint64_t v19 = v21;
LABEL_16:
    int v26 = 1;
    char v53 = 1;
    goto LABEL_17;
  }
  if ((v11 & 1) == 0)
  {
LABEL_51:
    for (uint64_t i = (re *)(*(uint64_t (**)(_anonymous_namespace_ *, __n128))(*(void *)v15 + 176))(v15, v16);
          i;
          uint64_t i = (re *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v15 + 176))(v15))
    {
      int64_t v42 = (re::CollisionObject *)(*(uint64_t (**)(_anonymous_namespace_ *, void))(*(void *)v15 + 184))(v15, 0);
      re::ContactSetCollection::remove((re::ContactSetCollection *)(*((void *)v15 + 16) + 72), v42);
      (*(void (**)(void, re::CollisionObject *))(**((void **)v15 + 16) + 200))(*((void *)v15 + 16), v42);
      *((void *)v42 + 7) = 0;
      re::internal::destroyPersistent<re::CollisionObject>((re *)"read", 234, (void (***)(void))v42);
    }
    uint64_t v43 = re::globalAllocators(i)[2];
    (**(void (***)(_anonymous_namespace_ *))v15)(v15);
    (*(void (**)(uint64_t, _anonymous_namespace_ *))(*(void *)v43 + 40))(v43, v15);
    uint64_t v15 = 0;
  }
LABEL_54:
  uint64_t v44 = v58;
  if (v58)
  {
    uint64_t v45 = v62;
    if (v62)
    {
      if (v60)
      {
        uint64_t v46 = 40 * v60;
        long long v47 = v62;
        do
        {
          long long v47 = std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>::~unique_ptr[abi:nn180100](v47)
              + 5;
          v46 -= 40;
        }
        while (v46);
      }
      (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v44 + 40))(v44, v45, v16);
    }
  }

  return v15;
}

uint64_t RECollisionWorldDump(const re::CollisionWorld *a1, uint64_t a2, uint64_t a3)
{
  return RECollisionWorldDumpWithBlock(a1, a2, a3, 0);
}

_anonymous_namespace_ *RECollisionWorldCreateFromBuffer(unsigned int *a1, unint64_t a2)
{
  return RECollisionWorldCreateFromBufferWithBlock(a1, a2, 0);
}

uint64_t CollisionWorldWriter::writePose(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 16;
  uint64_t v6 = a2 + 16;
  (*(void (**)(void, uint64_t, uint64_t *, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1, &v6, &v5);
  uint64_t v5 = 12;
  uint64_t v6 = a2;
  return (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1, &v6, &v5);
}

uint64_t CollisionWorldWriter::writeShape(CollisionWorldWriter *this, const re::CollisionShape *a2)
{
  int v26 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 24))(a2);
  *(void *)&long long v27 = &v26;
  uint64_t v33 = 4;
  uint64_t result = (*(uint64_t (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4)
                                                                                            + 16))(*((void *)this + 4), this, &v27, &v33);
  if (v26 == 7)
  {
    LODWORD(v32) = *((void *)a2 + 4);
    *(void *)&long long v27 = &v32;
    uint64_t v33 = 4;
    uint64_t result = (*(uint64_t (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4)
                                                                                              + 16))(*((void *)this + 4), this, &v27, &v33);
    uint64_t v5 = *((void *)a2 + 4);
    if (v5)
    {
      uint64_t v6 = *((void *)a2 + 5);
      uint64_t v7 = 240 * v5;
      int v8 = (const re::CollisionShape **)(v6 + 64);
      do
      {
        if (*((unsigned char *)this + 40)) {
          break;
        }
        long long v9 = *((_OWORD *)v8 - 2);
        long long v27 = *((_OWORD *)v8 - 3);
        long long v28 = v9;
        CollisionWorldWriter::writePose((uint64_t)this, (uint64_t)&v27);
        id v10 = *v8;
        v8 += 30;
        uint64_t result = CollisionWorldWriter::writeShape(this, v10);
        v7 -= 240;
      }
      while (v7);
    }
  }
  else if (!*((unsigned char *)this + 40))
  {
    uint64_t result = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 24))(a2);
    switch((int)result)
    {
      case 2:
        LODWORD(v32) = (*(float (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        *(void *)&long long v27 = &v32;
        uint64_t v11 = 4;
        goto LABEL_29;
      case 3:
        *(void *)&long long v27 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        *((void *)&v27 + 1) = v12;
        uint64_t v33 = (uint64_t)&v27;
        uint64_t v13 = 12;
        goto LABEL_19;
      case 4:
      case 8:
        LODWORD(v32) = (*(float (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        (*(void (**)(const re::CollisionShape *))(*(void *)a2 + 72))(a2);
        goto LABEL_21;
      case 5:
        uint64_t v15 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 72))(a2);
        LODWORD(v31) = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 80))(a2);
        __n128 v16 = (_anonymous_namespace_ *)(*(uint64_t (**)(const re::CollisionShape *, void, void))(*(void *)a2 + 88))(a2, 0, 0);
        int v29 = 2;
        int v30 = (int)v16;
        long long v27 = 0uLL;
        uint64_t v17 = v16;
        *(void *)&long long v28 = 0;
        (*(void (**)(const re::CollisionShape *, void, uint64_t))(*(void *)a2 + 88))(a2, v28, v17);
        uint64_t v33 = (uint64_t)&v31;
        uint64_t v32 = 4;
        (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
        uint64_t v33 = (uint64_t)&v29;
        uint64_t v32 = 4;
        (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
        uint64_t v33 = (uint64_t)&v30;
        uint64_t v32 = 4;
        (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
        if (v31 != 0.0)
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          do
          {
            uint64_t v33 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2) + v18;
            uint64_t v32 = 12;
            (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
            ++v19;
            v18 += v15;
          }
          while (v19 < LODWORD(v31));
        }
        uint64_t v33 = v28;
        uint64_t v32 = (v30 * v29);
        (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
        uint64_t result = v27;
        if ((void)v27 && *((void *)&v27 + 1)) {
          return (*(uint64_t (**)(void))(*(void *)v27 + 40))();
        }
        return result;
      case 6:
        long long v27 = *(_OWORD *)(*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        float v31 = (*(float (**)(const re::CollisionShape *))(*(void *)a2 + 72))(a2);
        uint64_t v33 = (uint64_t)&v27;
        uint64_t v32 = 12;
        (*(void (**)(void, CollisionWorldWriter *, uint64_t *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v33, &v32);
        uint64_t v33 = (uint64_t)&v31;
        uint64_t v13 = 4;
LABEL_19:
        uint64_t v32 = v13;
        uint64_t v20 = *(uint64_t (**)(void))(**((void **)this + 4) + 16);
        goto LABEL_31;
      case 9:
        LODWORD(v32) = (*(float (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        float v14 = (*(float (**)(const re::CollisionShape *))(*(void *)a2 + 72))(a2);
LABEL_21:
        float v31 = v14;
        *(void *)&long long v27 = &v32;
        uint64_t v33 = 4;
        (*(void (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v27, &v33);
        *(void *)&long long v27 = &v31;
        uint64_t v33 = 4;
        goto LABEL_30;
      case 12:
        uint64_t v21 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 72))(a2);
        LODWORD(v32) = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 80))(a2);
        LODWORD(v31) = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 104))(a2);
        if ((*(unsigned int (**)(const re::CollisionShape *))(*(void *)a2 + 88))(a2) == 1) {
          int v22 = 2;
        }
        else {
          int v22 = 4;
        }
        int v30 = v22;
        uint64_t v23 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 64))(a2);
        uint64_t v24 = (*(uint64_t (**)(const re::CollisionShape *))(*(void *)a2 + 96))(a2);
        *(void *)&long long v27 = &v32;
        uint64_t v33 = 4;
        (*(void (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v27, &v33);
        *(void *)&long long v27 = &v30;
        uint64_t v33 = 4;
        (*(void (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v27, &v33);
        *(void *)&long long v27 = &v31;
        uint64_t v33 = 4;
        (*(void (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4) + 16))(*((void *)this + 4), this, &v27, &v33);
        if (v32)
        {
          unint64_t v25 = 0;
          do
          {
            *(void *)&long long v27 = v23;
            uint64_t v33 = 12;
            (*(void (**)(void, CollisionWorldWriter *, long long *, uint64_t *))(**((void **)this + 4)
                                                                                          + 16))(*((void *)this + 4), this, &v27, &v33);
            ++v25;
            v23 += v21;
          }
          while (v25 < v32);
        }
        uint64_t v11 = (LODWORD(v31) * v30);
        *(void *)&long long v27 = v24;
LABEL_29:
        uint64_t v33 = v11;
LABEL_30:
        uint64_t v20 = *(uint64_t (**)(void))(**((void **)this + 4) + 16);
LABEL_31:
        uint64_t result = v20();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(CollisionWorldWriter &,void const*,unsigned long)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t *CollisionWorldReader::readCollisionShape(uint64_t *result, uint64_t a2, unsigned int *a3)
{
  unsigned int v4 = result;
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 8)) {
    goto LABEL_3;
  }
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = v6 + 4;
  if (v6 + 4 > v5) {
    goto LABEL_3;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(v9 + v6);
  *(void *)(a2 + 32) = v7;
  if (v10 == 7)
  {
    unint64_t v11 = v6 + 8;
    if (v11 > v5)
    {
LABEL_3:
      *(unsigned char *)(a2 + 8) = 1;
      *uint64_t result = 0;
      result[4] = 0;
      return result;
    }
    unint64_t v12 = *(unsigned int *)(v9 + v7);
    *(void *)(a2 + 32) = v11;
    long long v114 = 0;
    unint64_t v115 = 0;
    uint64_t v116 = 0;
    if (v12)
    {
                                                          + 32))();
      if (!v13) {
        goto LABEL_94;
      }
      uint64_t v15 = v13;
      __n128 v16 = v13;
      unint64_t v17 = v12 - 1;
      if (v12 != 1)
      {
        __n128 v16 = v13;
        do
        {
          *(void *)__n128 v16 = 0;
          *((void *)v16 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
          __n128 v16 = (_anonymous_namespace_ *)((char *)v16 + 40);
          --v17;
        }
        while (v17);
      }
      *(void *)__n128 v16 = 0;
      *((void *)v16 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
    else
    {
      uint64_t v15 = 0;
    }
    if (v12)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      int v29 = (uint64_t *)((char *)v15 + 32);
      int v30 = (char *)v15 + 8;
      while (1)
      {
        if (*(unsigned char *)(a2 + 8)) {
          goto LABEL_37;
        }
        uint64_t v31 = *(void *)(a2 + 32);
        uint64_t v32 = v31 + 28;
        if ((unint64_t)(v31 + 28) <= *(void *)(a2 + 24))
        {
          uint64_t v34 = *(void *)(a2 + 16) + v31;
          long long v33 = *(_OWORD *)v34;
          *(void *)&long long v26 = *(void *)(v34 + 16);
          DWORD2(v26) = *(_DWORD *)(v34 + 24);
          *(void *)(a2 + 32) = v32;
        }
        else
        {
          *(unsigned char *)(a2 + 8) = 1;
          long long v26 = 0uLL;
          long long v33 = xmmword_23435FBB0;
        }
        unint64_t v35 = v115;
        if (v115 <= v28) {
          break;
        }
        unint64_t v36 = (_OWORD *)(v116 + v27);
        *unint64_t v36 = v26;
        v36[1] = v33;
        CollisionWorldReader::readCollisionShape(&v121, a2, a3);
        uint64_t v37 = v121;
        *(void *)&long long v121 = 0;
        uint64_t v38 = *(v29 - 4);
        *(v29 - re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v37;
        if (v38) {
          std::function<void ()(re::CollisionShape *)>::operator()(*v29, v38);
        }
        uint64_t v39 = *v29;
        *int v29 = 0;
        uint64_t v40 = v29 - 3;
        if (v29 - 3 == (uint64_t *)v39)
        {
          (*(void (**)(uint64_t *))(*v40 + 32))(v29 - 3);
        }
        else if (v39)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 40))(v39);
        }
        if ((void)v123)
        {
          if ((long long *)v123 == (long long *)((char *)&v121 + 8))
          {
            *int v29 = (uint64_t)v40;
            (*(void (**)(void, uint64_t *))(*(void *)v123 + 24))(v123, v29 - 3);
          }
          else
          {
            *int v29 = v123;
            *(void *)&long long v123 = 0;
          }
        }
        else
        {
          *int v29 = 0;
        }
        unint64_t v25 = (_anonymous_namespace_ *)std::unique_ptr<re::CollisionShape,std::function<void ()(re::CollisionShape*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v121);
        ++v28;
        v29 += 5;
        v30 += 40;
        v27 += 32;
        if (v12 == v28) {
          goto LABEL_36;
        }
      }
      uint64_t v111 = 0;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v123 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v118 = 136315906;
      *(void *)&v118[4] = "operator[]";
      *(_WORD *)&v118[12] = 1024;
      *(_DWORD *)&v118[14] = 468;
      __int16 v119 = 2048;
      *(void *)unint64_t v120 = v28;
      *(_WORD *)&v120[8] = 2048;
      *(void *)&v120[10] = v35;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_93;
    }
LABEL_36:
    if (*(unsigned char *)(a2 + 8))
    {
LABEL_37:
      *unsigned int v4 = 0;
      double v4[4] = 0;
    }
    else
    {
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      if (v12)
      {
        uint64_t v44 = 0;
        int v29 = v112;
        uint64_t v45 = v15;
        while (1)
        {
          uint64_t v46 = *(void *)v45;
          *(void *)uint64_t v45 = 0;
          if (v29 == v44) {
            break;
          }
          *(void *)(v113 + 8 * (void)v4re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v46;
          uint64_t v44 = (uint64_t *)((char *)v44 + 1);
          uint64_t v45 = (_anonymous_namespace_ *)((char *)v45 + 40);
          if ((uint64_t *)v12 == v44) {
            goto LABEL_51;
          }
        }
LABEL_93:
        uint64_t v117 = 0;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v118 = 136315906;
        *(void *)&v118[4] = "operator[]";
        *(_WORD *)&v118[12] = 1024;
        *(_DWORD *)&v118[14] = 468;
        __int16 v119 = 2048;
        *(void *)unint64_t v120 = v29;
        *(_WORD *)&v120[8] = 2048;
        *(void *)&v120[10] = v29;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_94:
        re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
LABEL_51:
      uint64_t v48 = re::globalAllocators(v43);
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, void, void))(*(void *)v47 + 160))(v47, v48[2], v113, v116, v12, 0, *(void *)a2);
      *(void *)&long long v121 = &unk_26E737E78;
      *((void *)&v122 + 1) = &v121;
      double v4[4] = (uint64_t)(v4 + 1);
      *unsigned int v4 = v49;
      v4[1] = (uint64_t)&unk_26E737E78;
      std::__function::__value_func<void ()(re::CollisionShape *)>::~__value_func[abi:nn180100](&v121);
      if (v111 && v112) {
        (*(void (**)(void))(*(void *)v111 + 40))();
      }
    }
    uint64_t result = v114;
    if (v114) {
      BOOL v41 = v115 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (!v41) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*v114 + 40))();
    }
    if (v12)
    {
      uint64_t v42 = 0;
      do
      {
        std::unique_ptr<re::CollisionShape,std::function<void ()(re::CollisionShape*)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)v15 + v42));
        v42 += 40;
      }
      while (40 * v12 != v42);
    }
  }
  else
  {
    int v18 = v10 - 2;
    unsigned int v19 = *a3;
    switch(v18)
    {
      case 0:
        unint64_t v20 = v6 + 8;
        if (v20 > v5) {
          goto LABEL_3;
        }
        float v21 = *(float *)(v9 + v7);
        *(void *)(a2 + 32) = v20;
        uint64_t v23 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v22 + 112))(v22, v23[2], v21);
        goto LABEL_90;
      case 1:
        *(_OWORD *)long long v118 = 0u;
        uint64_t v50 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)long long v118 = *(_DWORD *)(v9 + v7);
        *(void *)(a2 + 32) = v50;
        uint64_t v51 = v6 + 12;
        if (v6 + 12 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)&v118[4] = *(_DWORD *)(v9 + v50);
        *(void *)(a2 + 32) = v51;
        unint64_t v52 = v6 + 16;
        if (v52 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)&v118[8] = *(_DWORD *)(v9 + v51);
        *(void *)(a2 + 32) = v52;
        uint64_t v54 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v53 + 32))(v53, v54[2], v118);
        goto LABEL_90;
      case 2:
        uint64_t v55 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        float v56 = *(float *)(v9 + v7);
        *(void *)(a2 + 32) = v55;
        unint64_t v57 = v6 + 12;
        if (v57 > v5) {
          goto LABEL_3;
        }
        float v58 = *(float *)(v9 + v55);
        *(void *)(a2 + 32) = v57;
        uint64_t v60 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v59 + 40))(v59, v60[2], v56, v58);
        goto LABEL_90;
      case 3:
        if (v19 < 5) {
          goto LABEL_89;
        }
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        uint64_t v61 = *(unsigned int *)(v9 + v7);
        *(void *)(a2 + 32) = v6 + 8;
        uint64_t v62 = v6 + 12;
        if (v6 + 12 > v5) {
          goto LABEL_3;
        }
        *(void *)(a2 + 32) = v62;
        unint64_t v63 = v6 + 16;
        if (v63 > v5) {
          goto LABEL_3;
        }
        uint64_t v64 = *(unsigned int *)(v9 + v62);
        *(void *)(a2 + 32) = v63;
        unint64_t v65 = v63 + 12 * v61;
        if (v65 > v5) {
          goto LABEL_3;
        }
        *(void *)(a2 + 32) = v65;
        unint64_t v66 = v65 + 2 * v64;
        if (v66 > v5) {
          goto LABEL_3;
        }
        uint64_t v67 = v9 + v63;
        *(void *)(a2 + 32) = v66;
        int v69 = re::globalAllocators((re *)result);
        uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 48))(v68, v69[2], v67, v61, 12);
        *(void *)&long long v121 = &unk_26E738098;
        *((void *)&v122 + 1) = &v121;
        *unsigned int v4 = v70;
        double v4[4] = (uint64_t)(v4 + 1);
        __int16 v71 = &unk_26E738098;
        break;
      case 4:
        *(_OWORD *)long long v118 = 0u;
        uint64_t v72 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)long long v118 = *(_DWORD *)(v9 + v7);
        *(void *)(a2 + 32) = v72;
        uint64_t v73 = v6 + 12;
        if (v6 + 12 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)&v118[4] = *(_DWORD *)(v9 + v72);
        *(void *)(a2 + 32) = v73;
        uint64_t v74 = v6 + 16;
        if (v6 + 16 > v5) {
          goto LABEL_3;
        }
        *(_DWORD *)&v118[8] = *(_DWORD *)(v9 + v73);
        *(void *)(a2 + 32) = v74;
        unint64_t v75 = v6 + 20;
        if (v75 > v5) {
          goto LABEL_3;
        }
        float v76 = *(float *)(v9 + v74);
        *(void *)(a2 + 32) = v75;
        long long v78 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, float))(*(void *)v77 + 104))(v77, v78[2], v118, v76);
        goto LABEL_90;
      case 6:
        uint64_t v79 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        float v80 = *(float *)(v9 + v7);
        *(void *)(a2 + 32) = v79;
        unint64_t v81 = v6 + 12;
        if (v81 > v5) {
          goto LABEL_3;
        }
        float v82 = *(float *)(v9 + v79);
        *(void *)(a2 + 32) = v81;
        unint64_t v84 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v83 + 128))(v83, v84[2], v80, v82);
        goto LABEL_90;
      case 7:
        uint64_t v85 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        float v86 = *(float *)(v9 + v7);
        *(void *)(a2 + 32) = v85;
        unint64_t v87 = v6 + 12;
        if (v87 > v5) {
          goto LABEL_3;
        }
        float v88 = *(float *)(v9 + v85);
        *(void *)(a2 + 32) = v87;
        uint64_t v90 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v89 + 120))(v89, v90[2], v86, v88);
        goto LABEL_90;
      case 10:
        if (v19 < 5) {
          goto LABEL_89;
        }
        uint64_t v91 = v6 + 8;
        if (v6 + 8 > v5) {
          goto LABEL_3;
        }
        uint64_t v92 = *(unsigned int *)(v9 + v7);
        *(void *)(a2 + 32) = v91;
        uint64_t v93 = v6 + 12;
        if (v6 + 12 > v5) {
          goto LABEL_3;
        }
        int v94 = *(_DWORD *)(v9 + v91);
        *(void *)(a2 + 32) = v93;
        unint64_t v95 = v6 + 16;
        if (v95 > v5) {
          goto LABEL_3;
        }
        uint64_t v96 = *(unsigned int *)(v9 + v93);
        *(void *)(a2 + 32) = v95;
        uint64_t v97 = v94 == 2 ? 1 : 2 * (v94 == 4);
        unint64_t v98 = v95 + 12 * v92;
        if (v98 > v5) {
          goto LABEL_3;
        }
        *(void *)(a2 + 32) = v98;
        unint64_t v99 = v98 + (v96 * v94);
        if (v99 > v5) {
          goto LABEL_3;
        }
        uint64_t v100 = v9 + v95;
        uint64_t v101 = v9 + v98;
        *(void *)(a2 + 32) = v99;
        __int16 v103 = re::globalAllocators((re *)result);
        uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, _BYTE))(*(void *)v102 + 152))(v102, v103[2], v100, v92, 12, v101, v96, v97, 0, 0, 0);
        *(void *)long long v118 = &unk_26E737F88;
        *(void *)&v120[4] = v118;
        *(void *)&long long v123 = (char *)&v121 + 8;
        *(void *)&long long v121 = v104;
        *((void *)&v121 + 1) = &unk_26E737F88;
        re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::add(a2 + 48, (uint64_t *)&v121);
        std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v121);
        uint64_t v105 = (re *)std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::~__value_func[abi:nn180100](v118);
        uint64_t v107 = re::globalAllocators(v105);
        uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106 + 144))(v106, v107[2], v104);
        *(void *)&long long v121 = &unk_26E738018;
        *((void *)&v122 + 1) = &v121;
        *unsigned int v4 = v108;
        double v4[4] = (uint64_t)(v4 + 1);
        __int16 v71 = &unk_26E738018;
        break;
      default:
LABEL_89:
        uint64_t v110 = re::globalAllocators((re *)result);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v109 + 96))(v109, v110[2]);
LABEL_90:
        *(void *)&long long v121 = &unk_26E737F08;
        *((void *)&v122 + 1) = &v121;
        *unsigned int v4 = v24;
        double v4[4] = (uint64_t)(v4 + 1);
        __int16 v71 = &unk_26E737F08;
        break;
    }
    v4[1] = (uint64_t)v71;
    return std::__function::__value_func<void ()(re::CollisionShape *)>::~__value_func[abi:nn180100](&v121);
  }
  return result;
}

uint64_t std::function<void ()(re::CollisionShape *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x234345E14);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::~__func()
{
}

void *std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E737E78;
  return result;
}

void std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737E78;
}

re *std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::CollisionShape>(*a2);
}

uint64_t std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readCompound(CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target_type()
{
}

re *re::internal::destroyPersistent<re::CollisionShape>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

void *std::__function::__value_func<void ()(re::CollisionShape *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::~__func()
{
}

void *std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E737F08;
  return result;
}

void std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737F08;
}

re *std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::CollisionShape>(*a2);
}

uint64_t std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConcreteShape(RECollisionShapeType,CollisionWorldReader::CollisionWorldHeader const&)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target_type()
{
}

uint64_t re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  unint64_t v11 = (void *)(*(void *)(a1 + 32) + 40 * v5);
  uint64_t v12 = *a2;
  *a2 = 0;
  *unint64_t v11 = v12;
  uint64_t result = std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::__value_func[abi:nn180100]((uint64_t)(v11 + 1), (uint64_t)(a2 + 1));
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void *re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        unsigned __int8 v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      BOOL v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (uint64_t)(v7 + 1);
        uint64_t v11 = 40 * v9;
        uint64_t v12 = (uint64_t *)v5[4];
        do
        {
          uint64_t v13 = *v8;
          *uint64_t v12 = 0;
          v12 += 5;
          *(void *)(v10 - 8) = v13;
          std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::__value_func[abi:nn180100](v10, (uint64_t)(v8 + 1));
          std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>::~unique_ptr[abi:nn180100](v8);
          v10 += 40;
          BOOL v8 = v12;
          v11 -= 40;
        }
        while (v11);
        BOOL v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v3;
      *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  }
  return a1;
}

void std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::~__func()
{
}

void *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E737F88;
  return result;
}

void std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E737F88;
}

re *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::operator()(re *result, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    unint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::IndexedTriangleMesh *)#1}>,void ()(re::IndexedTriangleMesh *)>::target_type()
{
}

uint64_t *std::unique_ptr<re::IndexedTriangleMesh,std::function<void ()(re::IndexedTriangleMesh*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = a1[4];
  uint64_t v6 = v2;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
LABEL_4:
    std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::~__value_func[abi:nn180100](a1 + 1);
    return a1;
  }
  unint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::~__value_func[abi:nn180100](v5);
}

void *std::__function::__value_func<void ()(re::IndexedTriangleMesh *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::~__func()
{
}

void *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E738018;
  return result;
}

void std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E738018;
}

re *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::CollisionShape>(*a2);
}

uint64_t std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readTriangleMesh(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target_type()
{
}

void std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::~__func()
{
}

void *std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E738098;
  return result;
}

void std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E738098;
}

re *std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::CollisionShape>(*a2);
}

uint64_t std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1},std::allocator<CollisionWorldReader::readConvexPolyhedron(void)::{lambda(re::CollisionShape *)#1}>,void ()(re::CollisionShape *)>::target_type()
{
}

uint64_t *std::unique_ptr<re::CollisionShape,std::function<void ()(re::CollisionShape*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::CollisionShape *)>::operator()(a1[4], v2);
  }
  std::__function::__value_func<void ()(re::CollisionShape *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<RECollisionWorldDumpWithBlock::$_0,void ()(CollisionWorldWriter &,void const*,unsigned long)>::~Callable()
{
}

void **re::internal::Callable<RECollisionWorldDumpWithBlock::$_0,void ()(CollisionWorldWriter &,void const*,unsigned long)>::operator()(void **result, uint64_t a2, const void **a3, size_t *a4)
{
  size_t v4 = *a4;
  uint64_t v5 = *result[3];
  if (v5 + *a4 <= (unint64_t)result[2])
  {
    if (!*(unsigned char *)(a2 + 40))
    {
      uint64_t v6 = result;
      uint64_t result = (void **)memcpy((char *)result[1] + v5, *a3, *a4);
      *v6[3] += v4;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 40) = 1;
  }
  return result;
}

uint64_t re::internal::Callable<RECollisionWorldDumpWithBlock::$_0,void ()(CollisionWorldWriter &,void const*,unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E738118;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<RECollisionWorldDumpWithBlock::$_0,void ()(CollisionWorldWriter &,void const*,unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E738118;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<RECollisionWorldDumpWithBlock::$_0,void ()(CollisionWorldWriter &,void const*,unsigned long)>::size()
{
  return 32;
}

void re::internal::Callable<RECollisionWorldDumpWithBlock::$_1,void ()(CollisionWorldWriter &,void const*,unsigned long)>::~Callable()
{
}

uint64_t re::internal::Callable<RECollisionWorldDumpWithBlock::$_1,void ()(CollisionWorldWriter &,void const*,unsigned long)>::operator()(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!*(unsigned char *)(a2 + 40)) {
    **(void **)(result + 8) += *a4;
  }
  return result;
}

void *re::internal::Callable<RECollisionWorldDumpWithBlock::$_1,void ()(CollisionWorldWriter &,void const*,unsigned long)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E738180;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<RECollisionWorldDumpWithBlock::$_1,void ()(CollisionWorldWriter &,void const*,unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E738180;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECollisionWorldDumpWithBlock::$_1,void ()(CollisionWorldWriter &,void const*,unsigned long)>::size()
{
  return 16;
}

id REShaderLibraryAssetGetMetalLibrary(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v11);
  if (v12)
  {
    unsigned int v3 = atomic_load((unsigned int *)(v12 + 704));
    if (v3 == 2) {
      goto LABEL_6;
    }
    uint64_t v4 = v12;
  }
  else
  {
    uint64_t v4 = 0;
  }
  re::AssetHandle::loadNow(v4, 0);
LABEL_6:
  if (v12 && (unsigned int v5 = atomic_load((unsigned int *)(v12 + 704)), v5 == 3)
    || (uint64_t v6 = *(void *)(re::AssetHandle::asset<re::ShaderLibraryAsset>((re::ShaderLibraryAsset *)&v11) + 72),
        uint64_t v7 = *(void *)(a1 + 56) + 264,
        uint64_t v13 = v6,
        (uint64_t v8 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v7, &v13)) == 0))
  {
    id v9 = 0;
  }
  else
  {
    id v9 = *(id *)(v8 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return v9;
}

uint64_t REAudioSceneServiceSetExternalSourceControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

uint64_t REAudioSceneServiceGetExternalSourceControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t REAudioSceneServiceSetSTSControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t REAudioSceneServiceGetSTSControl(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 112))();
  }
  return result;
}

uint64_t REAudioSceneServiceUpdateEngine(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 152))();
  }
  return result;
}

uint64_t REComponentCreateByType(int a1)
{
  uint64_t v1 = REComponentClassFromType(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 32))(&v3);
  return v3;
}

void *REComponentClassFromType(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t result = 0;
  if (a1 > 1999)
  {
    if (a1 <= 3000)
    {
      if (a1 > 2099)
      {
        switch(a1)
        {
          case 2100:
            return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          case 2101:
            return re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          case 2102:
            return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          default:
LABEL_160:
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            uint64_t v4 = (id)CoreRELog::log;
            if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            {
              v5[0] = 67109120;
              v5[1] = a1;
              _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REComponentType %d does not exist", (uint8_t *)v5, 8u);
            }

            return 0;
        }
      }
      else
      {
        switch(a1)
        {
          case 2000:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2001:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2003:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2004:
LABEL_21:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2005:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2006:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2007:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2008:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2009:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2013:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2014:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2015:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2016:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2017:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2018:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2020:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2023:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2024:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2025:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2026:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2027:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2028:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2029:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2030:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2031:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2034:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 2035:
LABEL_22:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          case 2036:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          default:
            goto LABEL_160;
        }
      }
    }
    else if (a1 <= 4001)
    {
      switch(a1)
      {
        case 3001:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3002:
          goto LABEL_21;
        case 3003:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3004:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
          break;
        case 3005:
          return result;
        case 3006:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3008:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3009:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3010:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3012:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3013:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 3014:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3015:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3017:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3020:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3022:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3026:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 3028:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        default:
          goto LABEL_160;
      }
    }
    else
    {
      switch(a1)
      {
        case 5000:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5001:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5002:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5003:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5004:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5005:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5006:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5007:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5008:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5009:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
          break;
        case 5010:
        case 5013:
          goto LABEL_160;
        case 5011:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 5012:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        case 5014:
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
        default:
          if (a1 != 4400) {
            goto LABEL_160;
          }
          uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 2:
      case 3:
      case 38:
      case 74:
        goto LABEL_160;
      case 4:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 5:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 6:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 7:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 8:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 9:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 10:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 11:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 12:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 13:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 14:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 15:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 16:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 17:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 18:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 19:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        break;
      case 20:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 21:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 22:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 23:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 24:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 25:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 26:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 27:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 28:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 29:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 30:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 31:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 32:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 33:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 34:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 35:
        return result;
      case 36:
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v3 = (id)CoreRELog::log;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v5[0]) = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "can't instantiate a custom component", (uint8_t *)v5, 2u);
        }

        uint64_t result = 0;
        break;
      case 37:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 39:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 40:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 41:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 42:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 43:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 44:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 45:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 46:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 47:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 48:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 49:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 50:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 51:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 52:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 53:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 54:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 55:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 56:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 57:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 58:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 59:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        break;
      case 60:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 61:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 62:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 63:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 64:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 65:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 66:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 67:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 68:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 69:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 70:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 71:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ClusterShadowMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 72:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::ClusterShadowSeparatorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 73:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        break;
      case 75:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 76:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 77:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      case 78:
        uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        break;
      default:
        switch(a1)
        {
          case 1000:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 1001:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 1003:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 1004:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 1006:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            break;
          case 1008:
            goto LABEL_22;
          case 1009:
            uint64_t result = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            break;
          default:
            goto LABEL_160;
        }
        break;
    }
  }
  return result;
}

uint64_t REComponentCreateByClass(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  return v2;
}

uint64_t REEntityGetLocalId(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

re::ecs2::Entity *REEntityCreate(re::ecs2::EntityFactory *a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v1 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v1, 4uLL, &v3);
  return v3;
}

uint64_t REEntityGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 360);
}

void REEntitySetName(unint64_t *a1, const char *a2)
{
  v4[0] = 0;
  v4[1] = (uint64_t)"";
  re::StringID::operator=(a1 + 34, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t REEntityGetName(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

uint64_t REEntityGetParent(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  if ((*(unsigned char *)(v1 + 288) & 0x80) != 0) {
    return 0;
  }
  return *(void *)(a1 + 24);
}

void REEntitySetParent(re::ecs2::Entity *a1, re::ecs2::Entity *a2)
{
}

void REEntityInsertChild(re::ecs2::Entity *a1, re::ecs2::Entity *this, unint64_t a3)
{
}

uint64_t REEntityGetScene(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 24);
  }
  while (a1);
  return *(void *)(v1 + 16);
}

uint64_t REEntityGetSceneNullable(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 24);
  }
  while (a1);
  return *(void *)(v1 + 16);
}

uint64_t REEntityGetChildCount(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

unint64_t REEntityGetChildren(uint64_t a1, void *__dst, unint64_t a3)
{
  if (*(void *)(a1 + 328) >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = *(void *)(a1 + 328);
  }
  if (v3) {
    memcpy(__dst, *(const void **)(a1 + 344), 8 * v3);
  }
  return v3;
}

uint64_t REEntityGetChild(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 328) <= a2) {
    return 0;
  }
  else {
    return *(void *)re::ecs2::EntityComponentCollection::operator[](a1 + 304, a2);
  }
}

uint64_t REEntityFindInHierarchyByName(_anonymous_namespace_ *a1, const char *a2)
{
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  uint64_t v4 = re::ecs2::Entity::findInHierarchyByName((uint64_t)a1, &v6);
  re::StringID::destroyString((re::StringID *)&v6);
  return v4;
}

uint64_t REEntityGetSelfActive(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 288) >> 3) & 1;
}

uint64_t REEntityGetSelfEnabled(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 288) >> 3) & 1;
}

uint64_t REEntityIsActive(uint64_t a1)
{
  return *(_DWORD *)(a1 + 288) & 1;
}

uint64_t REEntityIsEnabledInHierarchy(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 288) >> 1) & 1;
}

uint64_t REEntityIsAnchored(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 288) >> 2) & 1;
}

CFStringRef REEntityGetDebugDescription(re::ecs2::Entity *a1)
{
  re::ecs2::Entity::debugDescription(a1, (re::DynamicString *)&v4);
  if (v5) {
    uint64_t v1 = *(const char **)&v6[7];
  }
  else {
    uint64_t v1 = v6;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  return v2;
}

CFStringRef REEntityGetDebugDescriptionRecursive(re::ecs2::Entity *a1)
{
  re::ecs2::Entity::debugDescriptionRecursive(a1, (re::DynamicString *)&v4);
  if (v5) {
    uint64_t v1 = *(const char **)&v6[7];
  }
  else {
    uint64_t v1 = v6;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  return v2;
}

double REEntityCalculateWorldMatrix4x4F(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, &v7);
  return *(double *)&v7;
}

double REEntityCalculateWorldPose(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldSRT(this, (const re::ecs2::Entity *)1, (uint64_t)v7);
  return *(double *)&v7[4];
}

double REEntityCalculateWorldPosition(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, v7);
  return *(double *)&v8;
}

double REEntityCalculateWorldOrientation(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldOrientation(this, (const re::ecs2::Entity *)1);
  return v6;
}

double REEntityCalculateWorldScale(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldScale(this, (const re::ecs2::Entity *)1);
  return v6;
}

double REEntityCalculateModifiedWorldMatrix4x4F(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  double v6 = this;
  do
  {
    long long v7 = v6;
    double v6 = (re::ecs2::TransformComponent **)v6[3];
  }
  while (v6);
  long long v8 = v7[2];
  if (v8 && (uint64_t v9 = *((void *)v8 + 7)) != 0)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    uint64_t v11 = (re::ecs2::TransformHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v10);
    re::ecs2::TransformHelper::computeWorldMatrixForRendering(v11, this, &v13);
  }
  else
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, &v13);
  }
  return *(double *)&v13;
}

double REEntityCalculateModifiedWorldPose(re::ecs2::TransformComponent **this)
{
  CFStringRef v2 = this;
  do
  {
    unint64_t v3 = v2;
    CFStringRef v2 = (re::ecs2::TransformComponent **)v2[3];
  }
  while (v2);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, v13);
  double v6 = this;
  do
  {
    long long v7 = v6;
    double v6 = (re::ecs2::TransformComponent **)v6[3];
  }
  while (v6);
  long long v8 = v7[2];
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + 7);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
      uint64_t v11 = (re::ecs2::TransformHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v10);
      re::ecs2::TransformHelper::computeWorldMatrixForRendering(v11, this, v13);
    }
  }
  long long v15 = xmmword_23435FBB0;
  int32x4_t v16 = 0u;
  long long v14 = 0u;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v13, &v16, &v15, &v14);
  return *(double *)&v14;
}

double REEntityCalculateWorldMatrix4x4FForRendering(re::ecs2::TransformComponent **this, uint64_t a2)
{
  uint64_t v4 = this;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (re::ecs2::TransformComponent **)v4[3];
  }
  while (v4);
  double v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
    }
  }
  re::ecs2::TransformHelper::computeWorldMatrixForRendering(this, a2, &v9);
  return *(double *)&v9;
}

double REEntityCalculateWorldPoseForRendering(re::ecs2::TransformComponent **this, uint64_t a2)
{
  uint64_t v4 = this;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (re::ecs2::TransformComponent **)v4[3];
  }
  while (v4);
  double v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
    }
  }
  re::ecs2::TransformHelper::computeWorldMatrixForRendering(this, a2, v9);
  long long v11 = xmmword_23435FBB0;
  int32x4_t v12 = 0u;
  long long v10 = 0u;
  re::decomposeScaleRotationTranslation<float>((uint64_t)v9, &v12, &v11, &v10);
  return *(double *)&v10;
}

const re::ecs2::ComponentTypeBase *REEntityGetComponent(uint64_t a1, int a2)
{
  uint64_t result = (const re::ecs2::ComponentTypeBase *)REComponentClassFromType(a2);
  if (result) {
    return (const re::ecs2::ComponentTypeBase *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), result);
  }
  return result;
}

uint64_t REEntityGetOrAddComponent(uint64_t a1, int a2)
{
  unint64_t v3 = (const re::ecs2::ComponentTypeBase *)REComponentClassFromType(a2);
  uint64_t v4 = v3;
  BOOL v5 = v3 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
    || v3 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  if (v5 && !*(void *)(a1 + 224)) {
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), v4);
}

void REEntityRemoveComponent(uint64_t a1, re::ecs2::Component *a2)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)a2 + 40))(a2) == re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 82);
    if (*(_WORD *)(a1 + 82))
    {
      double v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                           + 16);
      uint64_t v7 = *(int16x8_t **)(a1 + 88);
      int16x8_t v8 = vld1q_dup_s16(v6);
      int v9 = 1;
      while (1)
      {
        uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0]) {
          break;
        }
        v9 -= 8;
        ++v7;
        if (!--v5) {
          goto LABEL_2;
        }
      }
      if (v10.u16[0] - v9 < *(unsigned __int16 *)(a1 + 80)) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      }
    }
  }
LABEL_2:
  if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)a2 + 40))(a2) == re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    uint64_t v4 = &re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  else
  {
    if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)a2 + 40))(a2) != re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      goto LABEL_19;
    }
    uint64_t v4 = &re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  }
  uint64_t v11 = *(unsigned __int16 *)(a1 + 82);
  if (!*(_WORD *)(a1 + 82)) {
    goto LABEL_17;
  }
  int32x4_t v12 = (const __int16 *)(*v4 + 16);
  long long v13 = *(int16x8_t **)(a1 + 88);
  int16x8_t v14 = vld1q_dup_s16(v12);
  int v15 = 1;
  while (1)
  {
    uint16x8_t v16 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v14, *v13), (int8x16_t)xmmword_23436BBD0);
    v16.i16[0] = vmaxvq_u16(v16);
    if (v16.i32[0]) {
      break;
    }
    v15 -= 8;
    ++v13;
    if (!--v11) {
      goto LABEL_17;
    }
  }
  if (v16.u16[0] - v15 >= *(unsigned __int16 *)(a1 + 80))
  {
LABEL_17:
    if (*(void *)(a1 + 224)) {
      re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    }
  }
LABEL_19:
  if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)a2 + 40))(a2) == re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
    && *((unsigned char *)a2 + 168))
  {
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
}

uint64_t REEntityGetCustomComponent(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
}

uint64_t REEntityGetComponentByClass(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
}

uint64_t REEntityAddComponentByClass(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v4 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
  uint64_t v5 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
  BOOL v6 = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a2
    || re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a2;
  if (v6 && !*(void *)(a1 + 224)) {
    re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return v5;
}

uint64_t REEntityGetOrAddComponentByClass(uint64_t a1, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v4 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
  uint64_t v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
  BOOL v6 = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a2
    || re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a2;
  if (v6 && !*(void *)(a1 + 224)) {
    re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return v5;
}

void REEntityRemoveComponentByClass(uint64_t a1, re::ecs2::ComponentTypeBase *a2)
{
  if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a2)
  {
    uint64_t v11 = *(unsigned __int16 *)(a1 + 82);
    if (*(_WORD *)(a1 + 82))
    {
      int32x4_t v12 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
      long long v13 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                            + 16);
      int16x8_t v14 = *(int16x8_t **)(a1 + 88);
      int16x8_t v15 = vld1q_dup_s16(v13);
      int v16 = 1;
      while (1)
      {
        uint16x8_t v17 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v15, *v14), (int8x16_t)xmmword_23436BBD0);
        v17.i16[0] = vmaxvq_u16(v17);
        if (v17.i32[0]) {
          break;
        }
        v16 -= 8;
        ++v14;
        if (!--v11) {
          goto LABEL_2;
        }
      }
      if (v17.u16[0] - v16 < *(unsigned __int16 *)(a1 + 80)) {
        re::ecs2::EntityComponentCollection::remove(v12, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      }
    }
  }
LABEL_2:
  if (re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a2)
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 82);
    if (*(_WORD *)(a1 + 82))
    {
      unsigned int v19 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      unint64_t v20 = *(int16x8_t **)(a1 + 88);
      int16x8_t v21 = vld1q_dup_s16(v19);
      int v8 = 1;
      while (1)
      {
        uint16x8_t v22 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v21, *v20), (int8x16_t)xmmword_23436BBD0);
        v22.i16[0] = vmaxvq_u16(v22);
        unsigned __int16 v10 = v22.i16[0];
        if (v22.i32[0]) {
          break;
        }
        v8 -= 8;
        ++v20;
        if (!--v18) {
          goto LABEL_20;
        }
      }
LABEL_19:
      if (v10 - v8 < *(unsigned __int16 *)(a1 + 80)) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    if (re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)a2) {
      goto LABEL_22;
    }
    uint64_t v4 = *(unsigned __int16 *)(a1 + 82);
    if (*(_WORD *)(a1 + 82))
    {
      uint64_t v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                           + 16);
      BOOL v6 = *(int16x8_t **)(a1 + 88);
      int16x8_t v7 = vld1q_dup_s16(v5);
      int v8 = 1;
      do
      {
        uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
        v9.i16[0] = vmaxvq_u16(v9);
        unsigned __int16 v10 = v9.i16[0];
        if (v9.i32[0]) {
          goto LABEL_19;
        }
        v8 -= 8;
        ++v6;
      }
      while (--v4);
    }
  }
LABEL_20:
  if (*(void *)(a1 + 224)) {
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
LABEL_22:
  if (re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a2)
  {
    uint64_t v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
    if (v23)
    {
      if (*(unsigned char *)(v23 + 168)) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
    }
  }
  re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), a2);
}

uint64_t REEntityGetComponentAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 56) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 72) + 8 * a2);
}

uint64_t REEntityGetComponentCount(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t REComponentClassFromName(re::ecs2::ComponentTypeRegistry *a1)
{
  CFStringRef v2 = re::ecs2::ComponentTypeRegistry::instance(a1);
  v5[0] = 0;
  v5[1] = "";
  uint64_t v3 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v2, (const re::StringID *)v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t REComponentClassFromTypeInfo(uint64_t a1)
{
  uint64_t v1 = (re::ecs2::ComponentTypeRegistry *)re::TypeInfo::TypeInfo((uint64_t)&v13, a1);
  if (v14 != 8) {
    return 0;
  }
  CFStringRef v2 = re::ecs2::ComponentTypeRegistry::instance(v1);
  uint64_t v3 = *((void *)v2 + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t)v2;
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = re::ecs2::ComponentTypeRegistry::operator[](v4, v5);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 56))(&v9);
    if (v9 == v13)
    {
      uint64_t v7 = *v15;
      if (v10 == (unsigned __int16)*v15 && v11 == WORD1(v7) && ((v12 ^ HIDWORD(v7)) & 0xFFFFFF) == 0) {
        break;
      }
    }
    if (v3 == ++v5) {
      return 0;
    }
  }
  return v6;
}

uint64_t REEntityAddComponentNoEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 82);
  if (!*(_WORD *)(a1 + 82)) {
    goto LABEL_7;
  }
  uint64_t v3 = (const __int16 *)(a2 + 16);
  uint64_t v4 = *(int16x8_t **)(a1 + 88);
  int16x8_t v5 = vld1q_dup_s16(v3);
  int v6 = 1;
  while (1)
  {
    uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0]) {
      break;
    }
    v6 -= 8;
    ++v4;
    if (!--v2) {
      goto LABEL_7;
    }
  }
  if (v7.u16[0] - v6 < *(unsigned __int16 *)(a1 + 80))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!entity->components().contains(*type)", "REEntityAddComponentNoEvents", 1017);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v8 = a1 + 32;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 32))(&v13, a2);
    uint64_t v12 = v13;
    if (v13) {
      id v9 = (id)(v13 + 8);
    }
    re::ecs2::EntityComponentCollection::add(v8, &v12, 0);
    if (v12)
    {

      uint64_t v12 = 0;
    }
    uint64_t v10 = v13;
    if (v13) {

    }
    return v10;
  }
  return result;
}

re::ecs2::Scene *REEntitySendAddAndActivateComponentEvents(int16x8_t **a1, re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v5 = *((unsigned __int16 *)a1 + 41);
  if (*((_WORD *)a1 + 41))
  {
    uint64_t v4 = a2;
    uint64_t v3 = (re::ecs2::Entity *)a1;
    uint64_t v2 = (re::ecs2::EntityComponentCollection *)(a1 + 4);
    int v6 = (const __int16 *)((char *)a2 + 16);
    uint16x8_t v7 = a1[11];
    int16x8_t v8 = vld1q_dup_s16(v6);
    int v9 = 1;
    do
    {
      uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
      v10.i16[0] = vmaxvq_u16(v10);
      unsigned __int16 v11 = v10.i16[0];
      if (v10.i32[0]) {
        goto LABEL_6;
      }
      v9 -= 8;
      ++v7;
      --v5;
    }
    while (v5);
  }
  do
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "entity->components().contains(*type)", "REEntitySendAddAndActivateComponentEvents", 1029);
    _os_crash();
    __break(1u);
LABEL_6:
    ;
  }
  while (v11 - v9 >= *((unsigned __int16 *)v3 + 40));
  uint64_t v12 = v3;
  do
  {
    uint64_t v13 = v12;
    uint64_t v12 = (re::ecs2::Entity *)*((void *)v12 + 3);
  }
  while (v12);
  uint64_t result = (re::ecs2::Scene *)*((void *)v13 + 2);
  if (result) {
    uint64_t result = (re::ecs2::Scene *)re::ecs2::Scene::sendAddAndActivateComponentEvents(result, v3, v4);
  }
  BOOL v15 = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)v4
     || re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)v4;
  if (v15 && !*((void *)v3 + 28))
  {
    int v16 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    return (re::ecs2::Scene *)re::ecs2::EntityComponentCollection::add(v2, v16);
  }
  return result;
}

void REEntityRemoveAllComponents(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v3 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
    do
    {
      re::ecs2::EntityComponentCollection::removeAt(v3, v1 - 1);
      uint64_t v1 = *(void *)(a1 + 56);
    }
    while (v1);
  }
}

uint64_t REComponentClassGetName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REComponentSaveToStream(re::ecs2::ECSSerialization *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  re::ecs2::ECSSerialization::createSerializedJsonData(a1, (uint64_t)v4);
  if (v4[0]) {
    return v5;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v2 = (id)CoreRELog::log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    if (v6) {
      uint64_t v3 = *(unsigned char **)&v7[7];
    }
    else {
      uint64_t v3 = v7;
    }
    *(_DWORD *)long long buf = 136315138;
    int v9 = v3;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  if (v4[0]) {
    return 0;
  }
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      (*(void (**)(void))(*(void *)v5 + 40))();
    }
    return 0;
  }
  return result;
}

void *REEntityAddOrUpdateComponentFromStream(uint64_t a1, const re::ecs2::ComponentTypeBase *a2, AssetService *a3, CFDataRef theData)
{
  CFDataRef v19 = theData;
  int Length = CFDataGetLength(theData);
  __int16 v12 = 0;
  uint64_t v13 = &v19;
  unsigned __int16 v11 = &unk_26E714A48;
  char v14 = &unk_26E6BE790;
  BytePtr = CFDataGetBytePtr(theData);
  int v16 = Length;
  int v17 = Length;
  uint64_t v18 = 0;
  updated = re::ecs2::ECSSerialization::addOrUpdateComponentFromJsonStream(a1, a3, (uint64_t)&v11, a2);
  re::internal::MemoryInputStream<__CFData const*>::~MemoryInputStream((uint64_t)&v11);
  return updated;
}

id REComponentCopyToPropertyBag(unsigned int *a1)
{
  uint64_t v2 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 40))(a1);
  uint64_t v3 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  re::PropertyBagHelper::makeWithIntrospectedData(v3, a1, 0, (uint64_t)v7, v4);
  if (!v7[0]) {
    return 0;
  }
  id v5 = v8;

  if (v7[0]) {
  return v5;
  }
}

void REComponentLoadFromPropertyBag(re::DynamicString **a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  double v4 = v3;
  uint64_t v13 = v4;
  uint64_t v5 = (*((uint64_t (**)(re::DynamicString **))*a1 + 5))(a1);
  char v6 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);

  if ((v7 & 1) == 0)
  {
    int v9 = *re::ecsCoreLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (uint64_t (*)(re::DynamicString **))*((void *)*a1 + 5);
      unsigned __int16 v11 = v9;
      uint64_t v12 = *(void *)(v10(a1) + 32);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = v12;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "copyToIntrospectedData failed on '%s'", buf, 0xCu);
    }
  }
}

uint64_t REComponentClassGetComponentIntrospectionInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t REComponentClassIsTransient(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) & 1;
}

re::ecs2::Entity *REEntityCreateCopy(re::ecs2::ECSHelper *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ECSHelper::deepCopyEntity(a1, a2, 0, 0, 0, &v7);
  int v5 = 0;
  memset(v4, 0, sizeof(v4));
  uint64_t v6 = 0x7FFFFFFFLL;
  re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity((re::internal::MeshSortGroupFixupTable *)v4, v7);
  uint64_t v2 = v7;
  char v7 = 0;
  re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v4);
  if (v7) {

  }
  return v2;
}

re::ecs2::Entity *REEntityCopy(re::ecs2::ECSHelper *a1, unsigned __int16 *a2)
{
  if (a2[1] != 1)
  {
    BOOL v4 = 0;
    uint64_t v6 = 0;
    char v7 = 0;
    BOOL v3 = 0;
    goto LABEL_8;
  }
  BOOL v3 = *((unsigned char *)a2 + 4) != 0;
  BOOL v4 = *((unsigned char *)a2 + 5) != 0;
  unsigned int v5 = *a2;
  if (v5 < 9)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))*((void *)a2 + 1);
  if (v5 < 0x11)
  {
LABEL_7:
    char v7 = 0;
    goto LABEL_8;
  }
  char v7 = (BOOL (*)(void *, void *))*((void *)a2 + 2);
LABEL_8:
  re::ecs2::ECSHelper::deepCopyEntity(a1, (const re::ecs2::Entity *)v3, v7, v4, v6, &v9);
  return v9;
}

re::ecs2::ECSHelper *REComponentCopy(re::ecs2::ECSHelper *result, const re::ecs2::Component *a2)
{
  if (result)
  {
    re::ecs2::ECSHelper::deepCopyComponent(result, a2, &v2);
    return (re::ecs2::ECSHelper *)v2;
  }
  return result;
}

uint64_t REEntityGetLocalActive(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 288) >> 3) & 1;
}

uint64_t REEntityAddExistingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 82);
  if (!*(_WORD *)(a1 + 82)) {
    goto LABEL_8;
  }
  uint64_t v6 = (const __int16 *)(v4 + 16);
  char v7 = *(int16x8_t **)(a1 + 88);
  int16x8_t v8 = vld1q_dup_s16(v6);
  int v9 = 1;
  while (1)
  {
    uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
    v10.i16[0] = vmaxvq_u16(v10);
    if (v10.i32[0]) {
      break;
    }
    v9 -= 8;
    ++v7;
    if (!--v5) {
      goto LABEL_8;
    }
  }
  if (v10.u16[0] - v9 < *(unsigned __int16 *)(a1 + 80)) {
    return 0;
  }
LABEL_8:
  uint64_t v14 = a2;
  id v12 = (id)(a2 + 8);
  uint64_t v11 = 1;
  re::ecs2::EntityComponentCollection::add(a1 + 32, &v14, 1);
  if (v14) {

  }
  return v11;
}

uint64_t RESceneEntityGroupCreate(re *a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = a2 + 24;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 168, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(void *)(v5 + 160) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(_OWORD *)(v5 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(void *)uint64_t v5 = &unk_26E7381D8;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_DWORD *)(v5 + 56) = 0;
  *(void *)(v5 + 60) = 0x7FFFFFFFLL;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  *(_OWORD *)(v5 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 132) = 0u;
  *(void *)(v5 + 148) = 0x7FFFFFFFLL;
  *(_DWORD *)(v5 + 160) = 0;
  if (v5 + 24 != v3 && *(void *)v3)
  {
    if (*(_DWORD *)(v3 + 28) <= 3u) {
      signed int v6 = 3;
    }
    else {
      signed int v6 = *(_DWORD *)(v3 + 28);
    }
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v5 + 24, *(void *)v3, v6);
    re::HashTable<re::ecs2::ComponentTypeBase *,REComponentAccess,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(v5 + 24, v3);
  }
  uint64_t v44 = (unint64_t *)(v5 + 112);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(v5 + 112, *(_DWORD *)(v3 + 28));
  uint64_t v7 = *((void *)a1 + 16);
  if (!v7) {
    goto LABEL_19;
  }
  unint64_t v8 = 0;
  int v9 = (uint64_t *)*((void *)a1 + 18);
  uint64_t v10 = 8 * v7;
  uint64_t v11 = 8 * v7;
  id v12 = v9;
  do
  {
    uint64_t v13 = *v12++;
    v11 -= 8;
  }
  while (v11);
  if (v8)
  {
    uint64_t v14 = (re *)re::DynamicArray<float *>::setCapacity((void *)(v5 + 72), v8);
    uint64_t v15 = *(unsigned int *)(v3 + 32);
    if (v15)
    {
      uint64_t v16 = 0;
      int v17 = (int *)(*(void *)(v3 + 16) + 8);
      while (1)
      {
        int v18 = *v17;
        v17 += 8;
        if (v18 < 0) {
          break;
        }
        if (v15 == ++v16)
        {
          LODWORD(v16) = *(_DWORD *)(v3 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    if (v15 != v16)
    {
      uint64_t v20 = v16;
      unsigned int v21 = *(_DWORD *)(v3 + 32);
      unsigned int v43 = v21;
      do
      {
        uint64_t v22 = *(void *)(v3 + 16) + 32 * v20;
        if (*(_DWORD *)(v22 + 24) <= 0x63u)
        {
          uint64_t v24 = *(void **)(v22 + 16);
          uint64_t v23 = (uint64_t *)(v22 + 16);
          if (re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == v24) {
            uint64_t v25 = 48;
          }
          else {
            uint64_t v25 = 8;
          }
          long long v26 = re::globalAllocators(v14);
          uint64_t v14 = (re *)(*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v26[4] + 32))(v26[4], v25 * v8, 0);
          uint64_t v27 = *v23;
          unint64_t v28 = 0xBF58476D1CE4E5B9 * (*v23 ^ ((unint64_t)*v23 >> 30));
          unint64_t v29 = (0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31);
          unint64_t v30 = *v44;
          if (!*v44
            || (unint64_t v30 = v29 % *(unsigned int *)(v5 + 136),
                uint64_t v31 = *(unsigned int *)(*(void *)(v5 + 120) + 4 * v30),
                v31 == 0x7FFFFFFF))
          {
LABEL_36:
            uint64_t v33 = *(unsigned int *)(v5 + 148);
            if (v33 == 0x7FFFFFFF)
            {
              uint64_t v33 = *(unsigned int *)(v5 + 144);
              int v34 = v33;
              if (v33 == *(_DWORD *)(v5 + 136))
              {
                unint64_t v35 = v14;
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v44, 2 * *(_DWORD *)(v5 + 140));
                uint64_t v14 = v35;
                unint64_t v30 = v29 % *(unsigned int *)(v5 + 136);
                int v34 = *(_DWORD *)(v5 + 144);
                uint64_t v27 = *v23;
              }
              *(_DWORD *)(v5 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v34 + 1;
              uint64_t v36 = *(void *)(v5 + 128);
              int v37 = *(_DWORD *)(v36 + 40 * v33 + 8);
            }
            else
            {
              uint64_t v36 = *(void *)(v5 + 128);
              int v37 = *(_DWORD *)(v36 + 40 * v33 + 8);
              *(_DWORD *)(v5 + 148) = v37 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v36 + 40 * v33 + 8) = v37 | 0x80000000;
            *(_DWORD *)(*(void *)(v5 + 128) + 40 * v33 + 8) = *(_DWORD *)(*(void *)(v5 + 128) + 40 * v33 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v5 + 120) + 4 * v30);
            *(void *)(*(void *)(v5 + 128) + 40 * v33) = v29;
            *(void *)(*(void *)(v5 + 128) + 40 * v33 + 16) = v27;
            uint64_t v38 = *(void *)(v5 + 128) + 40 * v33;
            *(void *)(v38 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
            *(void *)(v38 + 32) = v14;
            *(_DWORD *)(*(void *)(v5 + 120) + 4 * v30) = v33;
            ++*(_DWORD *)(v5 + 140);
            ++*(_DWORD *)(v5 + 152);
          }
          else
          {
            uint64_t v32 = *(void *)(v5 + 128);
            while (*(void *)(v32 + 40 * v31 + 16) != v27)
            {
              LODWORD(v31) = *(_DWORD *)(v32 + 40 * v31 + 8) & 0x7FFFFFFF;
              if (v31 == 0x7FFFFFFF) {
                goto LABEL_36;
              }
            }
          }
          unsigned int v21 = *(_DWORD *)(v3 + 32);
          LODWORD(v15) = v43;
        }
        if (v21 <= (int)v16 + 1) {
          unsigned int v39 = v16 + 1;
        }
        else {
          unsigned int v39 = v21;
        }
        while (1)
        {
          uint64_t v20 = (v16 + 1);
          if (v39 - 1 == v16) {
            break;
          }
          LODWORD(v16) = v16 + 1;
          unsigned int v40 = v20;
          if ((*(_DWORD *)(*(void *)(v3 + 16) + 32 * v20 + 8) & 0x80000000) != 0) {
            goto LABEL_50;
          }
        }
        unsigned int v40 = v39;
LABEL_50:
        LODWORD(v16) = v40;
      }
      while (v15 != v40);
    }
    do
    {
      uint64_t v41 = *v9++;
      v10 -= 8;
    }
    while (v10);
    *(_DWORD *)(v5 + 160) = 1;
  }
  else
  {
LABEL_19:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    CFDataRef v19 = (id)CoreRELog::log;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_INFO, "No entities match the requested query", buf, 2u);
    }

    return 0;
  }
  return v5;
}

uint64_t anonymous namespace'::matchComponents(re::ecs2::EntityComponentCollection *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 8;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 == v7)
  {
LABEL_23:
    if (!a3) {
      return 1;
    }
    uint64_t v40 = *(void *)this;
    id v18 = (id)(v40 + 8);
    re::DynamicArray<re::TransitionCondition *>::add((void *)(a3 + 72), &v40);
    uint64_t v19 = *(unsigned int *)(a2 + 32);
    if (v19)
    {
      uint64_t v20 = 0;
      unsigned int v21 = (int *)(*(void *)(a2 + 16) + 8);
      while (1)
      {
        int v22 = *v21;
        v21 += 8;
        if (v22 < 0) {
          break;
        }
        if (v19 == ++v20)
        {
          LODWORD(v20) = *(_DWORD *)(a2 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v20) = 0;
    }
    if (v19 == v20) {
      return 1;
    }
    uint64_t v23 = v20;
    uint64_t v24 = a3 + 112;
    uint64_t v25 = *(void *)(a2 + 16);
    while (1)
    {
      uint64_t v26 = v25 + 32 * v23;
      if (*(_DWORD *)(v26 + 24) <= 1u)
      {
        uint64_t v27 = (void **)(v26 + 16);
        uint64_t v28 = re::ecs2::EntityComponentCollection::get(this, *(const re::ecs2::ComponentTypeBase **)(v26 + 16));
        unint64_t v29 = (_OWORD *)v28;
        if (v28) {
          id v30 = (id)(v28 + 8);
        }
        uint64_t v31 = *v27;
        uint64_t v32 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v24, (unint64_t)v31);
        uint64_t v34 = *v32;
        uint64_t v33 = v32[1];
        if (re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == v31)
        {
          unint64_t v35 = (_OWORD *)(v33 + 48 * v34);
          long long v36 = v29[2];
          long long v37 = v29[4];
          v35[1] = v29[3];
          _OWORD v35[2] = v37;
          *unint64_t v35 = v36;
          ++*v32;
        }
        else
        {
          *(void *)(v33 + 8 * v3re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v29;
          ++*v32;
          if (!v29) {
            goto LABEL_40;
          }
        }
      }
LABEL_40:
      uint64_t v25 = *(void *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v20 + 1)) {
        int v38 = v20 + 1;
      }
      else {
        int v38 = *(_DWORD *)(a2 + 32);
      }
      while (1)
      {
        uint64_t v23 = (v20 + 1);
        if (v38 - 1 == v20) {
          break;
        }
        LODWORD(v20) = v20 + 1;
        int v39 = v23;
        if ((*(_DWORD *)(v25 + 32 * v23 + 8) & 0x80000000) != 0) {
          goto LABEL_47;
        }
      }
      int v39 = v38;
LABEL_47:
      LODWORD(v20) = v39;
      if (v19 == v39) {
        return 1;
      }
    }
  }
  uint64_t v10 = v7;
  uint64_t v11 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v12 = v11 + 32 * v10;
    uint64_t v13 = (const re::ecs2::ComponentTypeBase **)(v12 + 16);
    unsigned int v14 = *(_DWORD *)(v12 + 24);
    if (v14 < 2)
    {
LABEL_12:
      uint64_t result = re::ecs2::EntityComponentCollection::get(this, *v13);
      if (!result) {
        return result;
      }
      goto LABEL_15;
    }
    if (v14 == 101) {
      break;
    }
    if (v14 == 100) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v11 = *(void *)(a2 + 16);
    if (*(_DWORD *)(a2 + 32) <= (v7 + 1)) {
      int v16 = v7 + 1;
    }
    else {
      int v16 = *(_DWORD *)(a2 + 32);
    }
    while (1)
    {
      uint64_t v10 = (v7 + 1);
      if (v16 - 1 == v7) {
        break;
      }
      LODWORD(v7) = v7 + 1;
      int v17 = v10;
      if ((*(_DWORD *)(v11 + 32 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_22;
      }
    }
    int v17 = v16;
LABEL_22:
    LODWORD(v7) = v17;
    if (v6 == v17) {
      goto LABEL_23;
    }
  }
  if (!re::ecs2::EntityComponentCollection::get(this, *v13)) {
    goto LABEL_15;
  }
  return 0;
}

void RESceneEntityGroupApply(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    *(_DWORD *)(a1 + 160) = 2;
    unint64_t v2 = *(void *)(a1 + 88);
    if (v2)
    {
      unint64_t v3 = 0;
      unsigned int v4 = *(_DWORD *)(a1 + 56);
      unsigned int v5 = v4;
      do
      {
        uint64_t v6 = 0;
        if (v5)
        {
          uint64_t v7 = (int *)(*(void *)(a1 + 40) + 8);
          while (1)
          {
            int v8 = *v7;
            v7 += 8;
            if (v8 < 0) {
              break;
            }
            if (v5 == ++v6)
            {
              LODWORD(v6) = v5;
              break;
            }
          }
        }
        if (v5 != v6)
        {
          uint64_t v9 = v6;
          uint64_t v10 = (re::ecs2::EntityComponentCollection *)(*(void *)(*(void *)(a1 + 104) + 8 * v3) + 32);
          while (1)
          {
            uint64_t v11 = *(void *)(a1 + 40) + 32 * v9;
            if (*(_DWORD *)(v11 + 24) == 1)
            {
              uint64_t v12 = *(const re::ecs2::ComponentTypeBase **)(v11 + 16);
              uint64_t v13 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 112, (unint64_t)v12);
              unsigned int v14 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v10, v12);
              if (re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)v12)
              {
                re::internal::assertLog((re::internal *)5, v15, "assertion failure: '%s' (%s:line %i) Component type %s is not supported for DataArray access", "!\"Unreachable code\"", "dataArrayToComponent", 1360, *((void *)v12 + 4));
                _os_crash();
                __break(1u);
                return;
              }
              int v16 = (long long *)(*(void *)(v13 + 8) + 48 * v3);
              long long v17 = *v16;
              long long v18 = v16[2];
              uint64_t v14[3] = v16[1];
              _OWORD v14[4] = v18;
              void v14[2] = v17;
              re::ecs2::Component::enqueueMarkDirty((uint64_t)v14);
              unsigned int v4 = *(_DWORD *)(a1 + 56);
            }
            if (v4 <= (int)v6 + 1) {
              unsigned int v19 = v6 + 1;
            }
            else {
              unsigned int v19 = v4;
            }
            while (1)
            {
              uint64_t v9 = (v6 + 1);
              if (v19 - 1 == v6) {
                break;
              }
              LODWORD(v6) = v6 + 1;
              unsigned int v20 = v9;
              if ((*(_DWORD *)(*(void *)(a1 + 40) + 32 * v9 + 8) & 0x80000000) != 0) {
                goto LABEL_21;
              }
            }
            unsigned int v20 = v19;
LABEL_21:
            LODWORD(v6) = v20;
            if (v5 == v20)
            {
              unint64_t v2 = *(void *)(a1 + 88);
              unsigned int v5 = v4;
              break;
            }
          }
        }
        ++v3;
      }
      while (v3 < v2);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v21 = (id)CoreRELog::log;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Entity group cannot be applied more than once", buf, 2u);
    }
  }
}

void REEntityGroupDescriptorCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 72, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v2 + 60) = 0x7FFFFFFF;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E738220;
}

void REEntityGroupDescriptorAddAccess(uint64_t a1, int a2, unint64_t a3)
{
  if (a1) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  unint64_t v8 = *(void *)v5;
  if (*(void *)v5)
  {
    unint64_t v8 = v7 % *(unsigned int *)(v5 + 24);
    uint64_t v9 = *(unsigned int *)(*(void *)(v5 + 8) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(v5 + 16);
      if (*(void *)(v15 + 32 * v9 + 16) == a3)
      {
LABEL_15:
        *(_DWORD *)(v15 + 32 * v9 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
        goto LABEL_16;
      }
      while (1)
      {
        uint64_t v9 = *(_DWORD *)(v15 + 32 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v15 + 32 * v9 + 16) == a3) {
          goto LABEL_15;
        }
      }
    }
  }
  uint64_t v10 = *(unsigned int *)(v5 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(v5 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(v5 + 24))
    {
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(v5, 2 * *(_DWORD *)(v5 + 28));
      LODWORD(v8) = v7 % *(unsigned int *)(v5 + 24);
      int v11 = *(_DWORD *)(v5 + 32);
    }
    *(_DWORD *)(v5 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(v5 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(v5 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
    *(_DWORD *)(v5 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 32 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(v5 + 16) + 32 * v10 + 8) = *(_DWORD *)(*(void *)(v5 + 16) + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v5 + 8) + 4 * v8);
  *(void *)(*(void *)(v5 + 16) + 32 * v10) = v7;
  *(void *)(*(void *)(v5 + 16) + 32 * v10 + 16) = a3;
  uint64_t v14 = *(void *)(v5 + 8);
  *(_DWORD *)(*(void *)(v5 + 16) + 32 * v10 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  *(_DWORD *)(v14 + 4 * v8) = v10;
  ++*(_DWORD *)(v5 + 28);
LABEL_16:
  ++*(_DWORD *)(v5 + 40);
}

uint64_t REEntityGroupGetEntities(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t REEntityGroupGetComponentDataArray(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 112, a2);
  if (v3) {
    return *(void *)v3;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v5 = (id)CoreRELog::log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    int v7 = 136315138;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid component type %s requested in REEntityGroupGetComponentArray", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

uint64_t REEntityIsStateValid(uint64_t a1)
{
  return re::ecs2::Entity::isStateValid(a1, 12543);
}

void *REEntityFindAssetDependencies(void *a1, uint64_t a2, uint64_t a3)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  v6[0] = &unk_26E738298;
  v6[1] = &v4;
  _DWORD v6[2] = &v5;
  uint64_t v6[3] = v6;
  re::ecs2::ComponentHelper::findAssetHandles(a1, (uint64_t)v6);
  return std::__function::__value_func<void ()(re::AssetHandle *)>::~__value_func[abi:nn180100](v6);
}

uint64_t REIsSceneEntity(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 288) >> 7;
}

uint64_t REIsEntityHidden(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 289) >> 2) & 1;
}

uint64_t REHideEntity(uint64_t result)
{
  *(_DWORD *)(result + 288) |= 0x400u;
  return result;
}

uint64_t REEntityIsBeingDestroyed(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 289) >> 3) & 1;
}

BOOL REEntityIsNonHiddenAndInHierarchy(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 289) & 4) != 0) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v2 = a1;
  do
  {
    BOOL result = v2 == a2;
    if (v2 == a2) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 24);
    if (!v2) {
      break;
    }
  }
  while ((*(unsigned char *)(v2 + 288) & 0x80) == 0);
  return result;
}

void re::HashTable<re::ecs2::ComponentTypeBase *,REComponentAccess,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 32 * v12) = v9;
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        uint64_t v16 = *(void *)(a1 + 8);
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *((_DWORD *)v8 + 6);
        *(_DWORD *)(v16 + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void anonymous namespace'::EntityGroup::~EntityGroup(uint64_t **this)
{
  uint64_t v1 = (_anonymous_namespace_::EntityGroup *)this;
  *this = (uint64_t *)&unk_26E7381D8;
  uint64_t v2 = this[11];
  if (v2)
  {
    uint64_t v3 = this[13];
    uint64_t v4 = 8 * (void)v2;
    do
    {
      uint64_t v5 = *v3++;

      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v6 = *((unsigned int *)v1 + 36);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(*((void *)v1 + 16) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 10;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *((_DWORD *)v1 + 36);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    do
    {
      uint64_t v11 = *((void *)v1 + 16);
      uint64_t v12 = re::globalAllocators((re *)this);
      this = (uint64_t **)(*(uint64_t (**)(uint64_t, void))(*(void *)v12[4] + 40))(v12[4], *(void *)(v11 + 40 * v10 + 32));
      unsigned int v13 = *((_DWORD *)v1 + 36);
      if (v13 <= (int)v7 + 1) {
        unsigned int v13 = v7 + 1;
      }
      int v14 = v7;
      while (1)
      {
        uint64_t v10 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(*((void *)v1 + 16) + 40 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      LODWORD(v7) = v13;
LABEL_19:
      ;
    }
    while (v6 != v7);
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v1 + 14);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 72);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 3);
  *(void *)uint64_t v1 = &unk_26E6DECE0;
  objc_destructInstance((char *)v1 + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::EntityGroupSharedDescriptor::~EntityGroupSharedDescriptor(_anonymous_namespace_::EntityGroupSharedDescriptor *this)
{
  *(void *)this = &unk_26E6DECE0;
  uint64_t v1 = (uint64_t *)((char *)this + 24);
  objc_destructInstance((char *)this + 8);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  uint64_t v1 = (uint64_t *)((char *)this + 24);
  objc_destructInstance((char *)this + 8);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::~__func()
{
}

__n128 std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E738298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E738298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t result, void **a2)
{
  if ((*a2)[1]) {
    return (**(uint64_t (***)(void, void))(result + 8))(**a2, **(void **)(result + 16));
  }
  return result;
}

uint64_t std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REEntityFindAssetDependencies::$_0,std::allocator<REEntityFindAssetDependencies::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

uint64_t REAssetLoadRequestGetStats(re::AssetLoadRequest *a1)
{
  re::AssetLoadRequest::getStatistics(a1, &v3);
  uint64_t v1 = v3;
  if (v3) {

  }
  return v1;
}

void REAssetLoadRequestStatsForEachStat(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  void v5[2] = __REAssetLoadRequestStatsForEachStat_block_invoke;
  void v5[3] = &unk_264BEA2C8;
  id v6 = v3;
  id v4 = v3;
  re::AssetLoadRequest::LoadStatistics::forEachStat(a1, (uint64_t)v5);
}

uint64_t __REAssetLoadRequestStatsForEachStat_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t REAssetTypeStatsGetTypeName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return *(void *)(a1 + 16);
  }
  else {
    return a1 + 9;
  }
}

double REAssetTypeStatsGetCumulativeLoadTime(uint64_t a1)
{
  return (double)*(unint64_t *)(a1 + 32) / 1000000000.0;
}

uint64_t REAssetTypeStatsGetCumulativeFileSize(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *RERenderPassGroupGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *RERenderPassGroupReferenceGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RERenderPassGroupComponentSetActiveState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderPassGroupComponentGetActiveState(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t RERenderPassGroupComponentSetRenderOnTop(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderPassGroupComponentGetRenderOnTop(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t RERenderPassGroupReferenceComponentSetRenderPassGroupComponent(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    re::ecs2::EntityHandle::EntityHandle((uint64_t)location, *(void *)(a2 + 16));
  }
  else
  {
    objc_initWeak(location, 0);
    location[1] = 0;
    location[2] = 0;
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  }
  re::ecs2::EntityHandle::operator=((id *)(a1 + 32), (uint64_t)location);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  objc_destroyWeak(location);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RERenderPassGroupReferenceComponentGetRenderPassGroupComponent(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = (id *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  id WeakRetained = (char *)objc_loadWeakRetained(v1);
  id v4 = WeakRetained - 8;
  if (!WeakRetained) {
    id v4 = 0;
  }
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (WeakRetained) {

  }
  return v5;
}

uint64_t REProtectionOptionsServiceGetAllowedProtectionOptions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t REProtectionOptionsServiceSetAllowedProtectionOptions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t REProtectionOptionsServiceGetDesiredProtectionOptions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t REStructBuilderCreate()
{
  uint64_t v1 = re::introspectionAllocator(v0);
  uint64_t v2 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 120, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_WORD *)(v3 + 28) = 0;
  *(_DWORD *)(v3 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v3 = &unk_26E715EC0;
  *(_OWORD *)(v3 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(void *)(v3 + 16) = 8;
  *(void *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 24, 8);
  *(_WORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 40, 8);
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)uint64_t v5 = v1;
  re::DynamicArray<float *>::setCapacity((void *)v5, 0);
  ++*(_DWORD *)(v5 + 24);
  *(void *)(v4 + 8) = v5;
  return v4;
}

uint64_t REStructBuilderDestroy(uint64_t a1)
{
  uint64_t v2 = re::introspectionAllocator((re *)a1);
  if (!*(unsigned char *)(a1 + 17))
  {
    re::internal::destroy(*(re ***)a1, 0);
    *(void *)a1 = 0;
    re::internal::destroy(*(re **)(*(void *)(a1 + 8) + 32), *(void *)(*(void *)(a1 + 8) + 16));
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      if (*v3)
      {
        if (v3[4]) {
          (*(void (**)(void))(*(void *)*v3 + 40))(*v3);
        }
        v3[4] = 0;
        v3[1] = 0;
        void v3[2] = 0;
        *uint64_t v3 = 0;
        ++*((_DWORD *)v3 + 6);
      }
      (*(void (**)(void *, void *))(*(void *)v2 + 40))(v2, v3);
    }
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t))(*(void *)v2 + 40);
  return v4(v2, a1);
}

uint64_t REStructBuilderInit(re *a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = re::introspectionAllocator(a1);
  size_t v11 = strlen(a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void *, size_t, void))(*(void *)v10 + 32))(v10, v11 + 1, 0);
  unsigned int v13 = strcpy(v12, a2);
  uint64_t v14 = *(void *)a1;
  *(void *)(v14 + 48) = v13;
  *(_DWORD *)(v14 + 20) = a3;
  *(void *)(v14 + 72) = a4;
  *(void *)(v14 + 80) = a5;
  *((unsigned char *)a1 + 16) = 1;
  return 1;
}

_anonymous_namespace_ *REStructBuilderAddMemberStructWithTag(re *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a4 + 16) == 8)
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid member type info. Struct type expected.", "structInfo->type == IntrospectionType::kStructure", "REStructBuilderAddMemberStructWithTag", 399);
    __n128 result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *anonymous namespace'::structBuilderAddMember(re *a1, int a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v10 = re::introspectionAllocator(a1);
  size_t v11 = strlen(a3);
  uint64_t v12 = (char *)(*(uint64_t (**)(void *, size_t, void))(*(void *)v10 + 32))(v10, v11 + 1, 0);
  strcpy(v12, a3);
  if (a2 <= 0) {
    a2 = *(_DWORD *)(*((void *)a1 + 1) + 16) + 1;
  }
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
  *(_DWORD *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = v12;
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v13 + 32) = a2;
  *(_DWORD *)(v13 + 36) = a5;
  *(_DWORD *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = 0;
  *(void *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  uint64_t v14 = (_anonymous_namespace_ *)*((void *)a1 + 1);
  uint64_t v16 = v13;
  return re::DynamicArray<re::RigDataValue *>::add(v14, &v16);
}

_anonymous_namespace_ *REStructBuilderAddMemberStruct(re *a1, const char *a2, uint64_t a3, int a4)
{
  return REStructBuilderAddMemberStructWithTag(a1, 0xFFFFFFFFLL, a2, a3, a4);
}

_anonymous_namespace_ *REStructBuilderAddMemberEnumWithTag(re *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a4 + 16) == 9)
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid member type info. Enum type expected.", "enumInfo->type == IntrospectionType::kEnum", "REStructBuilderAddMemberEnumWithTag", 416);
    __n128 result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *REStructBuilderAddMemberEnum(re *a1, const char *a2, uint64_t a3, int a4)
{
  return REStructBuilderAddMemberEnumWithTag(a1, 0xFFFFFFFFLL, a2, a3, a4);
}

_anonymous_namespace_ *REStructBuilderAddMemberDataTypeWithTag(re *a1, uint64_t a2, const char *a3, int a4, int a5)
{
  int v7 = a2;
}

uint64_t anonymous namespace'::infoFromIntrospectedDataType(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = (uint64_t *)&re::introspect<BOOL>(void)::info;
      break;
    case 1:
      {
        uint64_t v2 = &re::introspect<char>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<char>(void)::info;
        long long v36 = &re::introspect<char>(void)::info;
        if (v10)
        {
          re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v11);
          goto LABEL_79;
        }
      }
      break;
    case 2:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<unsigned char>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<unsigned char>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<unsigned char>(void)::info;
        if (v12)
        {
          re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v13);
          goto LABEL_79;
        }
      }
      break;
    case 3:
      {
        uint64_t v2 = &re::introspect<short>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<short>(void)::info;
        long long v36 = &re::introspect<short>(void)::info;
        if (v14)
        {
          re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v15);
          goto LABEL_79;
        }
      }
      break;
    case 4:
      {
        uint64_t v2 = &re::introspect<unsigned short>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<unsigned short>(void)::info;
        long long v36 = &re::introspect<unsigned short>(void)::info;
        if (v16)
        {
          re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v17);
          goto LABEL_79;
        }
      }
      break;
    case 5:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<int>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<int>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<int>(void)::info;
        if (v18)
        {
          re::introspect<int>(void)::info = re::introspect_int(0, v19);
          goto LABEL_79;
        }
      }
      break;
    case 6:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<unsigned int>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<unsigned int>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<unsigned int>(void)::info;
        if (v20)
        {
          re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v21);
          goto LABEL_79;
        }
      }
      break;
    case 7:
      {
        uint64_t v2 = &re::introspect<long long>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<long long>(void)::info;
        long long v36 = &re::introspect<long long>(void)::info;
        if (v22)
        {
          re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v23);
          goto LABEL_79;
        }
      }
      break;
    case 8:
      {
        uint64_t v2 = &re::introspect<unsigned long long>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<unsigned long long>(void)::info;
        long long v36 = &re::introspect<unsigned long long>(void)::info;
        if (v24)
        {
          re::introspect<unsigned long long>(void)::info = (uint64_t)re::introspect_uint64_t(0, v25);
          goto LABEL_79;
        }
      }
      break;
    case 9:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<float>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<float>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<float>(void)::info;
        if (v26)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v27);
          goto LABEL_79;
        }
      }
      break;
    case 10:
      {
        uint64_t v2 = &re::introspect<double>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<double>(void)::info;
        long long v36 = &re::introspect<double>(void)::info;
        if (v28)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v29);
          goto LABEL_79;
        }
      }
      break;
    case 11:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector2<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector2<float>>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<re::Vector2<float>>(void)::info;
        if (v30)
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          goto LABEL_79;
        }
      }
      break;
    case 12:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector3<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector3<float>>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<re::Vector3<float>>(void)::info;
        if (v31)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          goto LABEL_79;
        }
      }
      break;
    case 13:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector4<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Vector4<float>>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<re::Vector4<float>>(void)::info;
        if (v32)
        {
          re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
          goto LABEL_79;
        }
      }
      break;
    case 14:
      {
        uint64_t v2 = &re::introspect<re::Quaternion<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = &re::introspect<re::Quaternion<float>>(void)::info;
        long long v36 = &re::introspect<re::Quaternion<float>>(void)::info;
        if (v33)
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          goto LABEL_79;
        }
      }
      break;
    case 15:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Matrix3x3<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Matrix3x3<float>>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<re::Matrix3x3<float>>(void)::info;
        if (v34)
        {
          re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
          goto LABEL_79;
        }
      }
      break;
    case 16:
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Matrix4x4<float>>(void)::info;
      }
      else
      {
        uint64_t v2 = (uint64_t *)&re::introspect<re::Matrix4x4<float>>(void)::info;
        long long v36 = (uint64_t *)&re::introspect<re::Matrix4x4<float>>(void)::info;
        if (v35)
        {
          re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
          goto LABEL_79;
        }
      }
      break;
    case 17:
      uint64_t v2 = &qword_26AFA07E0;
      if ((atomic_load_explicit(algn_26AFA07E8, memory_order_acquire) & 1) == 0)
      {
        long long v36 = &qword_26AFA07E0;
        if (__cxa_guard_acquire((__guard *)algn_26AFA07E8))
        {
          uint64_t v4 = re::IntrospectionInfo<char *>::get(0, v3);
          uint64_t v5 = &qword_26AFA07E0;
          goto LABEL_78;
        }
        uint64_t v2 = &qword_26AFA07E0;
      }
      break;
    case 18:
      uint64_t v2 = &qword_26AFA07F0;
      if ((atomic_load_explicit(algn_26AFA07F8, memory_order_acquire) & 1) == 0)
      {
        long long v36 = &qword_26AFA07F0;
        if (__cxa_guard_acquire((__guard *)algn_26AFA07F8))
        {
          re::IntrospectionInfo<re::SharedAssetHandle *>::get(0);
          uint64_t v5 = &qword_26AFA07F0;
          uint64_t v4 = &qword_26AFA09B8;
LABEL_78:
          *uint64_t v5 = (uint64_t)v4;
          uint64_t v9 = v5 + 1;
          goto LABEL_79;
        }
        uint64_t v2 = &qword_26AFA07F0;
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid REIntrospectedDataType.", "!\"Unreachable code\"", "infoFromIntrospectedDataType", 44);
      _os_crash();
      __break(1u);
LABEL_42:
      uint64_t v2 = (uint64_t *)&re::introspect<BOOL>(void)::info;
      long long v36 = (uint64_t *)&re::introspect<BOOL>(void)::info;
      if (v7)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
LABEL_79:
        __cxa_guard_release(v9);
        uint64_t v2 = v36;
      }
      break;
  }
  return *v2;
}

_anonymous_namespace_ *REStructBuilderAddMemberDataType(re *a1, const char *a2, int a3, int a4)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerStructWithTag(re *a1, const re::IntrospectionBase *a2, const char *a3, _anonymous_namespace_ *a4, int a5)
{
  if (*((_DWORD *)a4 + 4) == 8)
  {
    int v7 = (int)a2;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid member type info. Struct type expected.", "structInfo->type == IntrospectionType::kStructure", "REStructBuilderAddMemberPointerStructWithTag", 447);
    __n128 result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
  }
  return result;
}

ArcSharedObject *anonymous namespace'::getOrCreatePointer(_anonymous_namespace_ *this, const re::IntrospectionBase *a2)
{
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  re::DynamicString::setCapacity(&v12, 0x10uLL);
  re::appendPrettyTypeName(this, (const re::IntrospectionBase *)&v12, v4);
  re::DynamicString::append((re::DynamicString *)&v12, "*", 1uLL);
  if (v13) {
    id v6 = v14;
  }
  else {
    id v6 = (re::IntrospectionRegistry *)((char *)&v13 + 1);
  }
  int v7 = (ArcSharedObject *)re::IntrospectionRegistry::lookupType(v6, v5);
  if (!v7)
  {
    uint64_t v8 = re::introspectionAllocator(0);
    int v7 = (ArcSharedObject *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 64, 8);
    ArcSharedObject::ArcSharedObject(v7, 0);
    *(void *)(v9 + 16) = 0x800000001;
    *(_DWORD *)(v9 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 8;
    *(_WORD *)(v9 + 28) = 0;
    *(void *)(v9 + 32) = 0;
    *(void *)(v9 + 40) = 0xFFFFFFFFLL;
    *(void *)uint64_t v9 = &unk_26E6CDA08;
    *(void *)(v9 + 48) = this;
    *(void *)(v9 + 56) = 0;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v9, v10);
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v7;
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerStruct(re *a1, const char *a2, _anonymous_namespace_ *a3, int a4)
{
  return REStructBuilderAddMemberPointerStructWithTag(a1, (const re::IntrospectionBase *)0xFFFFFFFFLL, a2, a3, a4);
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerEnumWithTag(re *a1, const re::IntrospectionBase *a2, const char *a3, _anonymous_namespace_ *this, int a5)
{
  if (*((_DWORD *)this + 4) == 9)
  {
    int v7 = (int)a2;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid member type info. Enum type expected.", "enumInfo->type == IntrospectionType::kEnum", "REStructBuilderAddMemberPointerEnumWithTag", 465);
    __n128 result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerEnum(re *a1, const char *a2, _anonymous_namespace_ *this, int a4)
{
  return REStructBuilderAddMemberPointerEnumWithTag(a1, (const re::IntrospectionBase *)0xFFFFFFFFLL, a2, this, a4);
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerDataTypeWithTag(re *a1, uint64_t a2, const char *a3, int a4, int a5)
{
  int v7 = a2;
}

uint64_t anonymous namespace'::pointerInfoFromIntrospectedDataType(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = &qword_26AFA0808;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0810, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0808;
        if (__cxa_guard_acquire(&qword_26AFA0810))
        {
          re::IntrospectionInfo<BOOL *>::get();
          uint64_t v3 = &qword_26AFA0808;
          uint64_t v4 = &qword_26AFA09F8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0808;
      }
      break;
    case 1:
      uint64_t v2 = &qword_26AFA07E0;
      if ((atomic_load_explicit(algn_26AFA07E8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA07E0;
        if (__cxa_guard_acquire((__guard *)algn_26AFA07E8))
        {
          uint64_t v4 = re::IntrospectionInfo<char *>::get(0, v5);
          uint64_t v3 = &qword_26AFA07E0;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA07E0;
      }
      break;
    case 2:
      uint64_t v2 = &qword_26AFA0820;
      if ((atomic_load_explicit(algn_26AFA0828, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0820;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0828))
        {
          re::IntrospectionInfo<unsigned char *>::get();
          uint64_t v3 = &qword_26AFA0820;
          uint64_t v4 = &qword_26AFA0A38;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0820;
      }
      break;
    case 3:
      uint64_t v2 = &qword_26AFA0838;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0840, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0838;
        if (__cxa_guard_acquire(&qword_26AFA0840))
        {
          re::IntrospectionInfo<short *>::get();
          uint64_t v3 = &qword_26AFA0838;
          uint64_t v4 = &qword_26AFA0A78;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0838;
      }
      break;
    case 4:
      uint64_t v2 = &qword_26AFA0850;
      if ((atomic_load_explicit(algn_26AFA0858, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0850;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0858))
        {
          re::IntrospectionInfo<unsigned short *>::get();
          uint64_t v3 = &qword_26AFA0850;
          uint64_t v4 = &qword_26AFA0AB8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0850;
      }
      break;
    case 5:
      uint64_t v2 = &qword_26AFA0868;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0870, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0868;
        if (__cxa_guard_acquire(&qword_26AFA0870))
        {
          re::IntrospectionInfo<int *>::get();
          uint64_t v3 = &qword_26AFA0868;
          uint64_t v4 = &qword_26AFA0AF8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0868;
      }
      break;
    case 6:
      uint64_t v2 = &qword_26AFA0880;
      if ((atomic_load_explicit(algn_26AFA0888, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0880;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0888))
        {
          re::IntrospectionInfo<unsigned int *>::get();
          uint64_t v3 = &qword_26AFA0880;
          uint64_t v4 = &qword_26AFA0B38;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0880;
      }
      break;
    case 7:
      uint64_t v2 = &qword_26AFA0898;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08A0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0898;
        if (__cxa_guard_acquire(&qword_26AFA08A0))
        {
          re::IntrospectionInfo<long long *>::get();
          uint64_t v3 = &qword_26AFA0898;
          uint64_t v4 = &qword_26AFA0B78;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0898;
      }
      break;
    case 8:
      uint64_t v2 = &qword_26AFA08B0;
      if ((atomic_load_explicit(algn_26AFA08B8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA08B0;
        if (__cxa_guard_acquire((__guard *)algn_26AFA08B8))
        {
          re::IntrospectionInfo<unsigned long long *>::get();
          uint64_t v3 = &qword_26AFA08B0;
          uint64_t v4 = &qword_26AFA0BB8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA08B0;
      }
      break;
    case 9:
      uint64_t v2 = &qword_26AFA08C8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08D0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA08C8;
        if (__cxa_guard_acquire(&qword_26AFA08D0))
        {
          re::IntrospectionInfo<float *>::get();
          uint64_t v3 = &qword_26AFA08C8;
          uint64_t v4 = &qword_26AFA0BF8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA08C8;
      }
      break;
    case 10:
      uint64_t v2 = &qword_26AFA08E0;
      if ((atomic_load_explicit(algn_26AFA08E8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA08E0;
        if (__cxa_guard_acquire((__guard *)algn_26AFA08E8))
        {
          re::IntrospectionInfo<double *>::get();
          uint64_t v3 = &qword_26AFA08E0;
          uint64_t v4 = &qword_26AFA0C38;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA08E0;
      }
      break;
    case 11:
      uint64_t v2 = &qword_26AFA08F8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0900, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA08F8;
        if (__cxa_guard_acquire(&qword_26AFA0900))
        {
          re::IntrospectionInfo<re::Vector2<float> *>::get();
          uint64_t v3 = &qword_26AFA08F8;
          uint64_t v4 = &qword_26AFA0C78;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA08F8;
      }
      break;
    case 12:
      uint64_t v2 = &qword_26AFA0910;
      if ((atomic_load_explicit(algn_26AFA0918, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0910;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0918))
        {
          re::IntrospectionInfo<re::Vector3<float> *>::get();
          uint64_t v3 = &qword_26AFA0910;
          uint64_t v4 = &qword_26AFA0CB8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0910;
      }
      break;
    case 13:
      uint64_t v2 = &qword_26AFA0928;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0930, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0928;
        if (__cxa_guard_acquire(&qword_26AFA0930))
        {
          re::IntrospectionInfo<re::Vector4<float> *>::get();
          uint64_t v3 = &qword_26AFA0928;
          uint64_t v4 = &qword_26AFA0CF8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0928;
      }
      break;
    case 14:
      uint64_t v2 = &qword_26AFA0940;
      if ((atomic_load_explicit(algn_26AFA0948, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0940;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0948))
        {
          re::IntrospectionInfo<re::Quaternion<float> *>::get();
          uint64_t v3 = &qword_26AFA0940;
          uint64_t v4 = &qword_26AFA0D38;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0940;
      }
      break;
    case 15:
      uint64_t v2 = &qword_26AFA0958;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0960, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0958;
        if (__cxa_guard_acquire(&qword_26AFA0960))
        {
          re::IntrospectionInfo<re::Matrix3x3<float> *>::get();
          uint64_t v3 = &qword_26AFA0958;
          uint64_t v4 = &qword_26AFA0D78;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0958;
      }
      break;
    case 16:
      uint64_t v2 = &qword_26AFA0970;
      if ((atomic_load_explicit(algn_26AFA0978, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0970;
        if (__cxa_guard_acquire((__guard *)algn_26AFA0978))
        {
          re::IntrospectionInfo<re::Matrix4x4<float> *>::get();
          uint64_t v3 = &qword_26AFA0970;
          uint64_t v4 = &qword_26AFA0DB8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0970;
      }
      break;
    case 17:
      uint64_t v2 = &qword_26AFA0988;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0990, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = &qword_26AFA0988;
        if (__cxa_guard_acquire(&qword_26AFA0990))
        {
          re::IntrospectionInfo<char **>::get();
          uint64_t v3 = &qword_26AFA0988;
          uint64_t v4 = &qword_26AFA0DF8;
          goto LABEL_61;
        }
        uint64_t v2 = &qword_26AFA0988;
      }
      break;
    case 18:
      uint64_t v2 = &qword_26AFA09A0;
      id v6 = (__guard *)algn_26AFA09A8;
      if ((atomic_load_explicit(algn_26AFA09A8, memory_order_acquire) & 1) == 0) {
        goto LABEL_59;
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid REIntrospectedDataType.", "!\"Unreachable code\"", "pointerInfoFromIntrospectedDataType", 70);
      id v6 = (__guard *)_os_crash();
      __break(1u);
LABEL_59:
      uint64_t v8 = v2;
      if (__cxa_guard_acquire(v6))
      {
        re::IntrospectionInfo<re::SharedAssetHandle **>::get();
        uint64_t v3 = &qword_26AFA09A0;
        uint64_t v4 = &qword_26AFA0E38;
LABEL_61:
        *uint64_t v3 = (uint64_t)v4;
        __cxa_guard_release(v3 + 1);
        uint64_t v2 = v8;
      }
      else
      {
        uint64_t v2 = &qword_26AFA09A0;
      }
      break;
  }
  return *v2;
}

_anonymous_namespace_ *REStructBuilderAddMemberPointerDataType(re *a1, const char *a2, int a3, int a4)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountStructWithTag(re *a1, const re::IntrospectionBase *a2, const char *a3, _anonymous_namespace_ *this, int a5, int a6, int a7)
{
  int v11 = (int)a2;
}

_anonymous_namespace_ *anonymous namespace'::structBuilderAddMemberArrayWithCount(re *a1, int a2, const char *a3, uint64_t a4, int a5, int a6, int a7)
{
  int v14 = re::introspectionAllocator(a1);
  size_t v15 = strlen(a3);
  int v16 = (char *)(*(uint64_t (**)(void *, size_t, void))(*(void *)v14 + 32))(v14, v15 + 1, 0);
  strcpy(v16, a3);
  if (a2 <= 0) {
    a2 = *(_DWORD *)(*((void *)a1 + 1) + 16) + 1;
  }
  uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
  *(_DWORD *)uint64_t v19 = 1;
  *(void *)(v19 + 8) = v16;
  *(void *)(v19 + 16) = a4;
  *(void *)(v19 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(_DWORD *)(v19 + 32) = a2;
  *(_DWORD *)(v19 + 36) = a5;
  *(_DWORD *)(v19 + 40) = 1;
  *(void *)(v19 + 48) = v18;
  *(void *)(v19 + 56) = 0;
  *(_DWORD *)(v19 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a7;
  int v20 = (_anonymous_namespace_ *)*((void *)a1 + 1);
  uint64_t v22 = v19;
  return re::DynamicArray<re::RigDataValue *>::add(v20, &v22);
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountStruct(re *a1, const re::IntrospectionBase *a2, _anonymous_namespace_ *this, int a4, int a5, int a6)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountEnumWithTag(re *a1, const re::IntrospectionBase *a2, const char *a3, _anonymous_namespace_ *this, int a5, int a6, int a7)
{
  int v11 = (int)a2;
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountEnum(re *a1, const re::IntrospectionBase *a2, _anonymous_namespace_ *this, int a4, int a5, int a6)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountDataTypeWithTag(re *a1, uint64_t a2, const char *a3, int a4, int a5, int a6, int a7)
{
  int v11 = a2;
}

_anonymous_namespace_ *REStructBuilderAddMemberArrayWithCountDataType(re *a1, const char *a2, int a3, int a4, int a5, int a6)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayStructWithTag(re *a1, int a2, const char *a3, _anonymous_namespace_ *a4, int a5, const re::IntrospectionBase *a6)
{
}

re::IntrospectionCStyleArray *anonymous namespace'::getOrCreateCStyleArray(_anonymous_namespace_ *this, const re::IntrospectionBase *a2)
{
  uint64_t v14 = 0;
  size_t v15 = 0;
  uint64_t v16 = 0;
  re::DynamicString::setCapacity(&v13, 0);
  re::DynamicString::setCapacity(&v13, 0x10uLL);
  re::appendPrettyTypeName(this, (const re::IntrospectionBase *)&v13, v5);
  re::DynamicString::appendf((re::DynamicString *)&v13, "[%d]", a2);
  if (v14) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = (re::IntrospectionRegistry *)((char *)&v14 + 1);
  }
  uint64_t v8 = (re::IntrospectionCStyleArray *)re::IntrospectionRegistry::lookupType(v7, v6);
  if (!v8)
  {
    uint64_t v9 = re::introspectionAllocator(0);
    uint64_t v8 = (re::IntrospectionCStyleArray *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
    re::IntrospectionCStyleArray::IntrospectionCStyleArray(v8, this, (uint64_t)a2);
    re::IntrospectionRegistry::add(v10, v11);
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*v13 + 40))();
  }
  return v8;
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayStruct(re *a1, const char *a2, _anonymous_namespace_ *this, int a4, re::IntrospectionBase *a5)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayEnumWithTag(re *a1, int a2, const char *a3, _anonymous_namespace_ *this, int a5, re::IntrospectionBase *a6)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayEnum(re *a1, const char *a2, _anonymous_namespace_ *this, int a4, re::IntrospectionBase *a5)
{
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayDataTypeWithTag(re *a1, uint64_t a2, const char *a3, int a4, int a5, const re::IntrospectionBase *a6)
{
  int v9 = a2;
}

_anonymous_namespace_ *REStructBuilderAddMemberCStyleArrayDataType(re *a1, const char *a2, int a3, int a4, const re::IntrospectionBase *a5)
{
}

uint64_t RECIntrospectionStructRegister(uint64_t *a1, const char *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = (re *)re::IntrospectionRegistry::lookupType(*(re::IntrospectionRegistry **)(*a1 + 48), a2);
  if (v4)
  {
    uint64_t v5 = *re::foundationIntrospectionLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(v3 + 48);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v19 = v15;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Struct name already exists \"%s\"", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    *a1 = 0;
    *((unsigned char *)a1 + 17) = 1;
    uint64_t v6 = a1[1];
    *(_DWORD *)(v3 + 56) = *(void *)(v6 + 16);
    *(void *)(v3 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = *(void *)(v6 + 32);
    uint64_t v7 = re::introspectionAllocator(0);
    (*(void (**)(void *, uint64_t))(*(void *)v7 + 40))(v7, a1[1]);
    a1[1] = 0;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v3, v8);
    int v9 = (ArcSharedObject *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 64, 8);
    ArcSharedObject::ArcSharedObject(v9, 0);
    *(void *)(v10 + 16) = 0x800000001;
    *(_DWORD *)(v10 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 8;
    *(_WORD *)(v10 + 28) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0xFFFFFFFFLL;
    *(void *)uint64_t v10 = &unk_26E6CDA08;
    *(void *)(v10 + 48) = v3;
    *(void *)(v10 + 56) = 0;
    BOOL v12 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v10, v11);
    uint64_t v13 = re::introspectionSharedMutex((re *)v12);
    std::__shared_mutex_base::lock(v13);
    std::__shared_mutex_base::unlock(v13);
  }
  return v3;
}

void anonymous namespace'::registerType(_anonymous_namespace_ *this, re::TypeRegistry *a2, const re::IntrospectionBase *a3)
{
  *(_OWORD *)this = *((_OWORD *)a3 + 2);
  if (!*(void *)this)
  {
    re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v39);
    if (BYTE8(v39)) {
      uint64_t v6 = v40;
    }
    else {
      uint64_t v6 = (char *)&v39 + 9;
    }
    re::TypeRegistry::makeStringID(a2, v6, (re::StringID *)v41);
    uint64_t v8 = (_anonymous_namespace_ *)v39;
    if (void)v39 && (BYTE8(v39)) {
      uint64_t v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v39 + 40))();
    }
    int v9 = (_OWORD *)((char *)a3 + 32);
    int v10 = *((_DWORD *)a3 + 4);
    switch(v10)
    {
      case 8:
        re::TypeRegistry::makeStringID(a2, *((const char **)a3 + 6), (re::StringID *)&v32);
        unint64_t v11 = *((int *)a3 + 5);
        unint64_t v12 = *((int *)a3 + 6);
        v37[0] = 0;
        v37[1] = 0xFFFFFFFFLL;
        re::TypeBuilder::beginObjectType((uint64_t)&v39, (uint64_t *)&v32, 1, 1, v11, v12, (uint64_t)v37);
        re::StringID::destroyString((re::StringID *)&v32);
        if (*((void *)a3 + 9)) {
        if (*((void *)a3 + 10))
        }
        if (!*((_DWORD *)a3 + 14))
        {
LABEL_35:
          re::TypeBuilder::commitTo((re::TypeBuilder *)&v39, a2, &v32);
          *(_OWORD *)this = v32;
          *int v9 = *(_OWORD *)this;
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v22);
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v39, v23);
LABEL_38:
          re::StringID::destroyString((re::StringID *)v41);
          return;
        }
        uint64_t v14 = 0;
        while (1)
        {
          uint64_t v15 = *(void *)(*((void *)a3 + 8) + 8 * v14);
          if (*(_DWORD *)v15 != 1) {
            break;
          }
          int v16 = *(_DWORD *)(v15 + 40);
          if (v16 == 1)
          {
            uint64_t v17 = *(re **)(v15 + 8);
            long long v18 = *(_OWORD *)(*(void *)(*(void *)(v15 + 16) + 48) + 32);
            long long v34 = *(_OWORD *)(*(void *)(v15 + 48) + 32);
            long long v35 = v18;
            uint64_t v19 = *((void *)a3 + 6);
            re::makePrettyMemberName(v17, (re::DynamicString *)&v29);
            if (v30) {
              uint64_t v20 = *(unsigned char **)&v31[7];
            }
            else {
              uint64_t v20 = v31;
            }
            re::DynamicString::format((re::DynamicString *)"%s::%s", (re::DynamicString *)&v32, v19, v20);
            if (v29 && (v30 & 1) != 0) {
              (*(void (**)(void))(*(void *)v29 + 40))();
            }
            if (BYTE8(v32)) {
              unsigned int v21 = v33;
            }
            else {
              unsigned int v21 = (char *)&v32 + 9;
            }
            re::TypeRegistry::makeStringID(a2, v21, (re::StringID *)&v29);
            long long v27 = v34;
            long long v28 = v35;
            re::TypeBuilder::beginArrayType((uint64_t)v38, &v29, (re **)&v28, (uint64_t)&v27, *(_DWORD *)(v15 + 64) - *(_DWORD *)(v15 + 36));
            re::TypeBuilder::commitTo((re::TypeBuilder *)v38, a2, &v26);
            re::TypeRegistry::makeStringID(a2, *(const char **)(v15 + 8), (re::StringID *)v25);
            long long v24 = v26;
            re::TypeBuilder::addObjectMember((uint64_t)&v39, *(unsigned int *)(v15 + 32), (uint64_t)&v24, v25, *(_DWORD *)(v15 + 36));
            re::StringID::destroyString((re::StringID *)v25);
            re::StringID::destroyString((re::StringID *)&v29);
            if ((void)v32)
            {
              if (BYTE8(v32)) {
                (*(void (**)(void))(*(void *)v32 + 40))();
              }
            }
          }
          else
          {
            if (v16) {
              goto LABEL_41;
            }
            re::TypeRegistry::makeStringID(a2, *(const char **)(v15 + 8), (re::StringID *)&v32);
            re::TypeBuilder::addObjectMember((uint64_t)&v39, *(unsigned int *)(v15 + 32), (uint64_t)v36, (uint64_t *)&v32, *(_DWORD *)(v15 + 36));
            re::StringID::destroyString((re::StringID *)&v32);
          }
          if (++v14 >= (unint64_t)*((unsigned int *)a3 + 14)) {
            goto LABEL_35;
          }
        }
        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unexpected IntrospectionStructureAttributeType.", "!\"Unreachable code\"", "registerType", 289);
        _os_crash();
        __break(1u);
LABEL_41:
        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unexpected IntrospectionMemberType.", "!\"Unreachable code\"", "registerType", 286);
        _os_crash();
        __break(1u);
        break;
      case 2:
        re::TypeBuilderHelper::registerArray(a2, v41, &v39, *((int *)a3 + 16), (re::TypeRegistry **)v38);
        goto LABEL_37;
      case 1:
        re::TypeBuilderHelper::registerPointer(a2, v41, (uint64_t)&v39, 1, (re::TypeRegistry **)v38);
LABEL_37:
        *(_OWORD *)this = v38[0];
        *int v9 = *(_OWORD *)this;
        goto LABEL_38;
    }
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Unexpected introspection type.", "!\"Unreachable code\"", "registerType", 295);
    _os_crash();
    __break(1u);
  }
}

uint64_t RECIntrospectionStructUnregister(__n128 *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a1[1].n128_u32[0] != 8)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid type info. Struct type expected.", "structInfo->type == IntrospectionType::kStructure", "RECIntrospectionStructUnregister", 660);
    _os_crash();
    __break(1u);
  }
  uint64_t v3 = re::introspectionSharedMutex((re *)a1);
  std::__shared_mutex_base::lock(v3);
  long long v37 = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v34, 0);
  ++v36;
  __n128 v33 = a1[2];
  re::DynamicArray<re::TypeID>::add((_anonymous_namespace_ *)v34, &v33);
  if (v30[0])
  {
    uint64_t v5 = (re *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)v26, v31, v32);
    if (v29)
    {
      for (unint64_t i = 0; i < (unint64_t)v29; ++i)
      {
        re::TypeMemberCollection::operator[](v26, i, (uint64_t)v22);
        re::TypeRegistry::typeInfo(v22[0], *v22[2], &v38);
        uint64_t v5 = (re *)re::TypeInfo::TypeInfo((uint64_t)&v23, (uint64_t)&v38.n128_i64[1]);
        if (v24 == 4 && (*(_DWORD *)(v25 + 84) & 0xFFFFFF) != 0)
        {
          unint64_t v7 = *(void *)v25;
          v38.n128_u64[0] = v23;
          v38.n128_u64[1] = v7;
          re::DynamicArray<re::TypeID>::add((_anonymous_namespace_ *)v34, &v38);
        }
      }
    }
  }
  if (v35)
  {
    uint64_t v8 = v37;
    uint64_t v9 = 16 * v35;
    do
    {
      long long v10 = *v8++;
      long long v21 = v10;
      v9 -= 16;
    }
    while (v9);
  }
  unint64_t v11 = re::introspectionSharedMutex(v5);
  std::__shared_mutex_base::unlock(v11);
  uint64_t v13 = re::globalAllocators(v12);
  uint64_t v14 = v13[2];
  v38.n128_u64[0] = (unint64_t)&unk_26E738318;
  v38.n128_u64[1] = (unint64_t)a1;
  uint64_t v39 = v14;
  uint64_t v40 = &v38;
  uint64_t v29 = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  re::DynamicArray<float *>::setCapacity(v26, 0);
  ++v28;
  re::IntrospectionRegistry::query((uint64_t)&v38, v26);
  re::IntrospectionRegistry::remove((re::IntrospectionRegistry *)a1, v15);
  if (v27)
  {
    uint64_t v17 = v29;
    uint64_t v18 = 8 * v27;
    do
    {
      uint64_t v19 = *v17++;
      re::internal::destroy(v19, v16);
      v18 -= 8;
    }
    while (v18);
  }
  if (v26[0] && v29) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  re::FunctionBase<24ul,BOOL ()(re::IntrospectionBase const*)>::destroyCallable((uint64_t)&v38);
  uint64_t result = v34[0];
  if (v34[0])
  {
    if (v37) {
      return (*(uint64_t (**)(void))(*(void *)v34[0] + 40))();
    }
  }
  return result;
}

BOOL RECIntrospectionStructIsRegistered(re::IntrospectionRegistry *a1, const char *a2)
{
  return re::IntrospectionRegistry::lookupType(a1, a2) != 0;
}

re::IntrospectionRegistry *RECIntrospectionStructFindByName(re::IntrospectionRegistry *result, const char *a2)
{
  if (result)
  {
    uint64_t result = (re::IntrospectionRegistry *)re::IntrospectionRegistry::lookupType(result, a2);
    if (!result || *((_DWORD *)result + 4) != 8) {
      return 0;
    }
  }
  return result;
}

void re::IntrospectionInfo<re::SharedAssetHandle *>::get(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0800))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA09B8);
    __cxa_guard_release(&qword_26AFA0800);
  }
  if (a1)
  {
    if (_MergedGlobals_534) {
      return;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
    char v2 = _MergedGlobals_534;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
    if (v2) {
      return;
    }
    uint64_t v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
    if (_MergedGlobals_534) {
      goto LABEL_19;
    }
  }
  _MergedGlobals_534 = 1;
  uint64_t v6 = re::introspect_SharedAssetHandle((re::IntrospectionBase **)1);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA09B8, 0);
  qword_26AFA09C8 = 0x800000001;
  dword_26AFA09D0 = 8;
  word_26AFA09D4 = 0;
  *(void *)&xmmword_26AFA09D8 = 0;
  *((void *)&xmmword_26AFA09D8 + 1) = 0xFFFFFFFFLL;
  qword_26AFA09B8 = (uint64_t)&unk_26E6CDA08;
  qword_26AFA09E8 = v6;
  qword_26AFA09F0 = 0;
  re::IntrospectionRegistry::add(v7, v8);
  re::getPrettyTypeName((re *)&qword_26AFA09B8, (const re::IntrospectionBase *)&v13);
  if (BYTE8(v13)) {
    uint64_t v9 = v14;
  }
  else {
    uint64_t v9 = (char *)&v13 + 9;
  }
  if (void)v13 && (BYTE8(v13)) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  if (v15 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
  {
    long long v10 = v13;
  }
  else
  {
    long long v13 = *(_OWORD *)(v6 + 32);
    long long v10 = v12;
  }
  xmmword_26AFA09D8 = v10;
  re::StringID::destroyString((re::StringID *)&v15);
  if ((a1 & 1) == 0)
  {
LABEL_19:
    unint64_t v11 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::unlock(v11);
  }
}

void re::IntrospectionInfo<BOOL *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0818, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0818))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA09F8);
    __cxa_guard_release(&qword_26AFA0818);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07C9;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07C9 & 1) == 0)
    {
      byte_26AFA07C9 = 1;
      uint64_t v5 = re::introspect_BOOL((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA09F8, 0);
      qword_26AFA0A08 = 0x800000001;
      dword_26AFA0A10 = 8;
      word_26AFA0A14 = 0;
      *(void *)&xmmword_26AFA0A18 = 0;
      *((void *)&xmmword_26AFA0A18 + 1) = 0xFFFFFFFFLL;
      qword_26AFA09F8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0A28 = (uint64_t)v5;
      qword_26AFA0A30 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA09F8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0A18 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<unsigned char *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0830))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0A38);
    __cxa_guard_release(&qword_26AFA0830);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CA;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CA & 1) == 0)
    {
      byte_26AFA07CA = 1;
      uint64_t v5 = re::introspect_uint8_t((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0A38, 0);
      qword_26AFA0A48 = 0x800000001;
      dword_26AFA0A50 = 8;
      word_26AFA0A54 = 0;
      *(void *)&xmmword_26AFA0A58 = 0;
      *((void *)&xmmword_26AFA0A58 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0A38 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0A68 = (uint64_t)v5;
      qword_26AFA0A70 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0A38, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0A58 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<short *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0848))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0A78);
    __cxa_guard_release(&qword_26AFA0848);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CB;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CB & 1) == 0)
    {
      byte_26AFA07CB = 1;
      uint64_t v5 = re::introspect_short((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0A78, 0);
      qword_26AFA0A88 = 0x800000001;
      dword_26AFA0A90 = 8;
      word_26AFA0A94 = 0;
      *(void *)&xmmword_26AFA0A98 = 0;
      *((void *)&xmmword_26AFA0A98 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0A78 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0AA8 = (uint64_t)v5;
      qword_26AFA0AB0 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0A78, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0A98 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<unsigned short *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0860))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0AB8);
    __cxa_guard_release(&qword_26AFA0860);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CC;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CC & 1) == 0)
    {
      byte_26AFA07CC = 1;
      uint64_t v5 = re::introspect_uint16_t((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0AB8, 0);
      qword_26AFA0AC8 = 0x800000001;
      dword_26AFA0AD0 = 8;
      word_26AFA0AD4 = 0;
      *(void *)&xmmword_26AFA0AD8 = 0;
      *((void *)&xmmword_26AFA0AD8 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0AB8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0AE8 = (uint64_t)v5;
      qword_26AFA0AF0 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0AB8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0AD8 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<int *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0878))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0AF8);
    __cxa_guard_release(&qword_26AFA0878);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CD;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CD & 1) == 0)
    {
      byte_26AFA07CD = 1;
      uint64_t v5 = re::introspect_int((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0AF8, 0);
      qword_26AFA0B08 = 0x800000001;
      dword_26AFA0B10 = 8;
      word_26AFA0B14 = 0;
      *(void *)&xmmword_26AFA0B18 = 0;
      *((void *)&xmmword_26AFA0B18 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0AF8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0B28 = (uint64_t)v5;
      qword_26AFA0B30 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0AF8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0B18 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<unsigned int *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0890))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0B38);
    __cxa_guard_release(&qword_26AFA0890);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CE;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CE & 1) == 0)
    {
      byte_26AFA07CE = 1;
      uint64_t v5 = re::introspect_uint32_t((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0B38, 0);
      qword_26AFA0B48 = 0x800000001;
      dword_26AFA0B50 = 8;
      word_26AFA0B54 = 0;
      *(void *)&xmmword_26AFA0B58 = 0;
      *((void *)&xmmword_26AFA0B58 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0B38 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0B68 = (uint64_t)v5;
      qword_26AFA0B70 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0B38, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0B58 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<long long *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA08A8))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0B78);
    __cxa_guard_release(&qword_26AFA08A8);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07CF;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07CF & 1) == 0)
    {
      byte_26AFA07CF = 1;
      uint64_t v5 = re::introspect_int64_t((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0B78, 0);
      qword_26AFA0B88 = 0x800000001;
      dword_26AFA0B90 = 8;
      word_26AFA0B94 = 0;
      *(void *)&xmmword_26AFA0B98 = 0;
      *((void *)&xmmword_26AFA0B98 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0B78 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0BA8 = (uint64_t)v5;
      qword_26AFA0BB0 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0B78, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0B98 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<unsigned long long *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA08C0))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0BB8);
    __cxa_guard_release(&qword_26AFA08C0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07D0;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D0 & 1) == 0)
    {
      byte_26AFA07D0 = 1;
      uint64_t v5 = re::introspect_uint64_t((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0BB8, 0);
      qword_26AFA0BC8 = 0x800000001;
      dword_26AFA0BD0 = 8;
      word_26AFA0BD4 = 0;
      *(void *)&xmmword_26AFA0BD8 = 0;
      *((void *)&xmmword_26AFA0BD8 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0BB8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0BE8 = (uint64_t)v5;
      qword_26AFA0BF0 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0BB8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0BD8 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<float *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA08D8))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0BF8);
    __cxa_guard_release(&qword_26AFA08D8);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07D1;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D1 & 1) == 0)
    {
      byte_26AFA07D1 = 1;
      uint64_t v5 = re::introspect_float((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0BF8, 0);
      qword_26AFA0C08 = 0x800000001;
      dword_26AFA0C10 = 8;
      word_26AFA0C14 = 0;
      *(void *)&xmmword_26AFA0C18 = 0;
      *((void *)&xmmword_26AFA0C18 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0BF8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0C28 = (uint64_t)v5;
      qword_26AFA0C30 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0BF8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0C18 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<double *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA08F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA08F0))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0C38);
    __cxa_guard_release(&qword_26AFA08F0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07D2;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D2 & 1) == 0)
    {
      byte_26AFA07D2 = 1;
      uint64_t v5 = re::introspect_double((re *)1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0C38, 0);
      qword_26AFA0C48 = 0x800000001;
      dword_26AFA0C50 = 8;
      word_26AFA0C54 = 0;
      *(void *)&xmmword_26AFA0C58 = 0;
      *((void *)&xmmword_26AFA0C58 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0C38 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0C68 = (uint64_t)v5;
      qword_26AFA0C70 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0C38, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = v5[2];
        long long v9 = v11;
      }
      xmmword_26AFA0C58 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<re::Vector2<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0908))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0C78);
    __cxa_guard_release(&qword_26AFA0908);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D3;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D3 & 1) == 0)
    {
      byte_26AFA07D3 = 1;
      uint64_t v4 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0C78, 0);
      qword_26AFA0C88 = 0x800000001;
      dword_26AFA0C90 = 8;
      word_26AFA0C94 = 0;
      *(void *)&xmmword_26AFA0C98 = 0;
      *((void *)&xmmword_26AFA0C98 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0C78 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0CA8 = v4;
      qword_26AFA0CB0 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0C78, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0C98 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<re::Vector3<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0920))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0CB8);
    __cxa_guard_release(&qword_26AFA0920);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D4;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D4 & 1) == 0)
    {
      byte_26AFA07D4 = 1;
      uint64_t v4 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0CB8, 0);
      qword_26AFA0CC8 = 0x800000001;
      dword_26AFA0CD0 = 8;
      word_26AFA0CD4 = 0;
      *(void *)&xmmword_26AFA0CD8 = 0;
      *((void *)&xmmword_26AFA0CD8 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0CB8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0CE8 = v4;
      qword_26AFA0CF0 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0CB8, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0CD8 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<re::Vector4<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0938))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0CF8);
    __cxa_guard_release(&qword_26AFA0938);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D5;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D5 & 1) == 0)
    {
      byte_26AFA07D5 = 1;
      uint64_t v4 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0CF8, 0);
      qword_26AFA0D08 = 0x800000001;
      dword_26AFA0D10 = 8;
      word_26AFA0D14 = 0;
      *(void *)&xmmword_26AFA0D18 = 0;
      *((void *)&xmmword_26AFA0D18 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0CF8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0D28 = v4;
      qword_26AFA0D30 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0CF8, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0D18 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<re::Quaternion<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0950))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0D38);
    __cxa_guard_release(&qword_26AFA0950);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D6;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D6 & 1) == 0)
    {
      byte_26AFA07D6 = 1;
      uint64_t v4 = re::introspect_QuaternionF((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0D38, 0);
      qword_26AFA0D48 = 0x800000001;
      dword_26AFA0D50 = 8;
      word_26AFA0D54 = 0;
      *(void *)&xmmword_26AFA0D58 = 0;
      *((void *)&xmmword_26AFA0D58 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0D38 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0D68 = v4;
      qword_26AFA0D70 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0D38, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0D58 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<re::Matrix3x3<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0968))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0D78);
    __cxa_guard_release(&qword_26AFA0968);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D7;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D7 & 1) == 0)
    {
      byte_26AFA07D7 = 1;
      uint64_t v4 = re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0D78, 0);
      qword_26AFA0D88 = 0x800000001;
      dword_26AFA0D90 = 8;
      word_26AFA0D94 = 0;
      *(void *)&xmmword_26AFA0D98 = 0;
      *((void *)&xmmword_26AFA0D98 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0D78 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0DA8 = v4;
      qword_26AFA0DB0 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0D78, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0D98 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<re::Matrix4x4<float> *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0980))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0DB8);
    __cxa_guard_release(&qword_26AFA0980);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  char v0 = byte_26AFA07D8;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D8 & 1) == 0)
    {
      byte_26AFA07D8 = 1;
      uint64_t v4 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0DB8, 0);
      qword_26AFA0DC8 = 0x800000001;
      dword_26AFA0DD0 = 8;
      word_26AFA0DD4 = 0;
      *(void *)&xmmword_26AFA0DD8 = 0;
      *((void *)&xmmword_26AFA0DD8 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0DB8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0DE8 = v4;
      qword_26AFA0DF0 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AFA0DB8, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v7 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if (v13 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v8 = v11;
      }
      else
      {
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v8 = v10;
      }
      xmmword_26AFA0DD8 = v8;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    long long v9 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v9);
  }
}

void re::IntrospectionInfo<char **>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0998, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0998))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0DF8);
    __cxa_guard_release(&qword_26AFA0998);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  char v0 = byte_26AFA07D9;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07D9 & 1) == 0)
    {
      byte_26AFA07D9 = 1;
      uint64_t v5 = re::IntrospectionInfo<char *>::get(1, v4);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0DF8, 0);
      qword_26AFA0E08 = 0x800000001;
      dword_26AFA0E10 = 8;
      word_26AFA0E14 = 0;
      *(void *)&xmmword_26AFA0E18 = 0;
      *((void *)&xmmword_26AFA0E18 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0DF8 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0E28 = (uint64_t)v5;
      qword_26AFA0E30 = 0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_26AFA0DF8, (const re::IntrospectionBase *)&v12);
      if (BYTE8(v12)) {
        long long v8 = v13;
      }
      else {
        long long v8 = (char *)&v12 + 9;
      }
      if (void)v12 && (BYTE8(v12)) {
        (*(void (**)(void))(*(void *)v12 + 40))();
      }
      if (v14 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v9 = v12;
      }
      else
      {
        long long v12 = *((_OWORD *)v5 + 2);
        long long v9 = v11;
      }
      xmmword_26AFA0E18 = v9;
      re::StringID::destroyString((re::StringID *)&v14);
    }
    long long v10 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v10);
  }
}

void re::IntrospectionInfo<re::SharedAssetHandle **>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA09B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA09B0))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AFA0E38);
    __cxa_guard_release(&qword_26AFA09B0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v9);
  char v0 = byte_26AFA07DA;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v9);
  if ((v0 & 1) == 0)
  {
    char v2 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::lock(v2);
    if ((byte_26AFA07DA & 1) == 0)
    {
      byte_26AFA07DA = 1;
      re::IntrospectionInfo<re::SharedAssetHandle *>::get(1);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AFA0E38, 0);
      qword_26AFA0E48 = 0x800000001;
      dword_26AFA0E50 = 8;
      word_26AFA0E54 = 0;
      *(void *)&xmmword_26AFA0E58 = 0;
      *((void *)&xmmword_26AFA0E58 + 1) = 0xFFFFFFFFLL;
      qword_26AFA0E38 = (uint64_t)&unk_26E6CDA08;
      qword_26AFA0E68 = (uint64_t)&qword_26AFA09B8;
      qword_26AFA0E70 = 0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AFA0E38, (const re::IntrospectionBase *)&v9);
      if (BYTE8(v9)) {
        uint64_t v6 = v10;
      }
      else {
        uint64_t v6 = (char *)&v9 + 9;
      }
      if (void)v9 && (BYTE8(v9)) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      if (v11 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        xmmword_26AFA0E58 = v9;
      }
      else
      {
        long long v9 = xmmword_26AFA09D8;
        xmmword_26AFA0E58 = v8;
      }
      re::StringID::destroyString((re::StringID *)&v11);
    }
    unint64_t v7 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::unlock(v7);
  }
}

uint64_t anonymous namespace'::constructorV2(_anonymous_namespace_ *this, re::TypeInfo *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  uint64_t v5 = re::TypeInfo::name(a2);
  unint64_t v7 = (uint64_t (*)(void))re::IntrospectionRegistry::lookupType((re::IntrospectionRegistry *)v5[1], v6)[9];
  return v7();
}

uint64_t anonymous namespace'::destructorV2(_anonymous_namespace_ *this, re::TypeInfo *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  uint64_t v5 = re::TypeInfo::name(a2);
  unint64_t v7 = (uint64_t (*)(void))re::IntrospectionRegistry::lookupType((re::IntrospectionRegistry *)v5[1], v6)[10];
  return v7();
}

void re::internal::Callable<RECIntrospectionStructUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::~Callable()
{
}

BOOL re::internal::Callable<RECIntrospectionStructUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(v2 + 16);
  return (v4 == 2 || v4 == 1) && *(void *)(v2 + 48) == v3;
}

void *re::internal::Callable<RECIntrospectionStructUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E738318;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<RECIntrospectionStructUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E738318;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECIntrospectionStructUnregister::$_0,BOOL ()(re::IntrospectionBase const*)>::size()
{
  return 16;
}

void *REMotionStateComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

__n128 REMotionStateComponentGetLinearVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v3 = 128;
  if (*(_DWORD *)(v2 + 144) == *(_DWORD *)(v2 + 152)) {
    uint64_t v3 = 96;
  }
  return *(__n128 *)(v2 + v3);
}

uint64_t REMotionStateComponentSetLinearVelocity(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = (__n128 *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  _WORD v3[8] = a3;
  ++v3[9].n128_u32[0];
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

__n128 REMotionStateComponentGetAngularVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  uint64_t v3 = 160;
  if (*(_DWORD *)(v2 + 176) == *(_DWORD *)(v2 + 184)) {
    uint64_t v3 = 112;
  }
  return *(__n128 *)(v2 + v3);
}

uint64_t REMotionStateComponentSetAngularVelocity(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = (__n128 *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  v3[10] = a3;
  ++v3[11].n128_u32[0];
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

uint64_t REMotionStateComponentIsSleeping(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 25);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[262] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *REPhysicsOriginComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REMakeMassFrame(__n128 *a1@<X8>, float a2@<S0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a3;
  a1[3].n128_f32[0] = a2;
}

float REMakeMassFrameFromShapeAndDensity@<S0>(re::MassFrame *a1@<X0>, const re::CollisionShape *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::MassFrame::makeFromShapeAndDensity(a1, a2, a4, v7);
  float32x4_t v5 = v7[1];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v7[2];
  float result = v8;
  a3[3].f32[0] = v8;
  return result;
}

float REMakeMassFrameFromShapeAndMass@<S0>(re::MassFrame *a1@<X0>, const re::CollisionShape *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::MassFrame::makeFromShapeAndMass(a1, a2, a4, v7);
  float32x4_t v5 = v7[1];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v7[2];
  float result = v8;
  a3[3].f32[0] = v8;
  return result;
}

void REMakeMassFrameFromShapeAssetAndDensity(uint64_t a1@<X0>, float32x4_t *a2@<X8>, float a3@<S0>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v5 = re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)v8);
  if (v5)
  {
    re::MassFrame::makeFromShapeAndDensity(*(re::MassFrame **)(v5 + 8), v6, a3, v9);
    float32x4_t v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    a2[2] = v9[2];
    a2[3].i32[0] = v10;
  }
  else
  {
    *a2 = (float32x4_t)kInvalidMassFrame;
    a2[1] = (float32x4_t)unk_23442E470;
    a2[2] = (float32x4_t)xmmword_23442E480;
    a2[3] = (float32x4_t)unk_23442E490;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void REMakeMassFrameFromShapeAssetAndMass(uint64_t a1@<X0>, float32x4_t *a2@<X8>, float a3@<S0>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v5 = re::AssetHandle::asset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)v8);
  if (v5)
  {
    re::MassFrame::makeFromShapeAndMass(*(re::MassFrame **)(v5 + 8), v6, a3, v9);
    float32x4_t v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    a2[2] = v9[2];
    a2[3].i32[0] = v10;
  }
  else
  {
    *a2 = (float32x4_t)kInvalidMassFrame;
    a2[1] = (float32x4_t)unk_23442E470;
    a2[2] = (float32x4_t)xmmword_23442E480;
    a2[3] = (float32x4_t)unk_23442E490;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

uint64_t REPhysicsMaterialCreate(__n128 a1, __n128 a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, float))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                            + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, a2, a2.n128_f32[0]);
}

uint64_t REPhysicsMaterialCreate2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
}

void (***REPhysicsMaterialDestroy(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::PhysicsFactory::m_defaultAllocator;
    (**result)(result);
    uint64_t v3 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v2 + 40);
    return (void (***)(void))v3(v2, v1);
  }
  return result;
}

float REPhysicsMaterialGetFriction(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

float REPhysicsMaterialGetStaticFriction(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

float REPhysicsMaterialGetRestitution(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

double REPhysicsMaterialGetRollingFriction()
{
  return 0.0;
}

double REPhysicsMaterialGetSpinningFriction()
{
  return 0.0;
}

float REPhysicsMaterialGetDynamicFriction(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

uint64_t RERigidBodyCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return RERigidBodyCreate2(a1, a2, &v4, 1);
}

uint64_t RERigidBodyCreate2(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v9;
  void v15[2] = v8;
  int v16 = v7;
  size_t v10 = 8 * a4;
  MEMORY[0x270FA5388](a1);
  long long v12 = (char *)v15 - v11;
  if (v10 >= 0x200) {
    size_t v13 = 512;
  }
  else {
    size_t v13 = v10;
  }
  bzero(v12, v13);
  if (a4) {
    memcpy(v12, a3, v10);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, char *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                         + 40))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v15, v12, a4);
}

re *RERigidBodyDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t RERigidBodyGetShape(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t RERigidBodyGetCollisionObject(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

float RERigidBodyGetMassFrame@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 176);
  float result = *(float *)(a1 + 192);
  *(float *)(a2 + 48) = result;
  return result;
}

uint64_t RERigidBodyGetMaterial(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 80))(a1, 0);
}

uint64_t RERigidBodyGetMotionType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t RERigidBodyIsCCDEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 304);
}

uint64_t RERigidBodySetCCDEnabled(unsigned char *a1, char a2)
{
  a1[304] = a2;
  return (*(uint64_t (**)(void))(*(void *)a1 + 432))();
}

float RERigidBodyGetCCDVelocityThreshold(uint64_t a1)
{
  return *(float *)(a1 + 220);
}

uint64_t RERigidBodySetCCDVelocityThreshold(float *a1, float a2)
{
  a1[55] = a2;
  return (*(uint64_t (**)(void))(*(void *)a1 + 432))();
}

uint64_t RERigidBodyGetLockTranslationX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t RERigidBodySetLockTranslationX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t RERigidBodyGetLockTranslationY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t RERigidBodySetLockTranslationY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t RERigidBodyGetLockTranslationZ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t RERigidBodySetLockTranslationZ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t RERigidBodyGetLockRotationX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t RERigidBodySetLockRotationX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t RERigidBodyGetLockRotationY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t RERigidBodySetLockRotationY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t RERigidBodyGetLockRotationZ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t RERigidBodySetLockRotationZ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

double RERigidBodyGetPose(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v2);
  return *(double *)&v2;
}

uint64_t RERigidBodySetPose(__n128 *a1, __n128 a2, __n128 a3)
{
  v4[0] = a2;
  v4[1] = a3;
  a1[1] = a2;
  a1[2] = a3;
  return (*(uint64_t (**)(__n128 *, _OWORD *))(a1->n128_u64[0] + 64))(a1, v4);
}

double RERigidBodyGetPoseCenterOfMass(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 208))(&v2);
  return *(double *)&v2;
}

double RERigidBodyGetLinearVelocity(uint64_t a1)
{
  return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1));
}

uint64_t RERigidBodySetLinearVelocity(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 224))(a1, &v3);
}

double RERigidBodyGetAngularVelocity(uint64_t a1)
{
  return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1));
}

uint64_t RERigidBodySetAngularVelocity(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 240))(a1, &v3);
}

float32x4_t RERigidBodyAddForceCenterOfMass(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t result = vaddq_f32(a1[15], a2);
  a1[15] = result;
  return result;
}

float32x4_t RERigidBodyAddForceWorld(float32x4_t *a1, int32x4_t a2, float32x4_t a3)
{
  (*(void (**)(float32x4_t *__return_ptr))(a1->i64[0] + 208))(v9);
  float32x4_t v4 = vsubq_f32(a3, v9[0]);
  int32x4_t v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(v4)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
  float32x4_t result = vaddq_f32(a1[16], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL));
  a1[15] = vaddq_f32(a1[15], (float32x4_t)a2);
  a1[16] = result;
  return result;
}

float32x4_t RERigidBodyAddTorque(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t result = vaddq_f32(a1[16], a2);
  a1[16] = result;
  return result;
}

uint64_t RERigidBodyClearForces(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

uint64_t RERigidBodyApplyLinearImpulse(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 256))(a1, &v3);
}

uint64_t RERigidBodyApplyAngularImpulse(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 264))(a1, &v3);
}

uint64_t RERigidBodyApplyImpulseWorld(uint64_t a1, __n128 a2, __n128 a3)
{
  __n128 v4 = a3;
  __n128 v5 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *, __n128 *))(*(void *)a1 + 272))(a1, &v5, &v4);
}

uint64_t RERigidBodyCanSleep(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

uint64_t RERigidBodySetCanSleep(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

uint64_t RERigidBodyIsSleeping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

uint64_t RERigidBodySleep(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
}

uint64_t RERigidBodyWakeUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

double RERigidBodyCalculateVelocityAtWorldPoint(uint64_t a1, float32x4_t a2)
{
  float32x4_t v4 = a2;
  re::RigidBody::calculateVelocityAtWorldPoint(a1, &v4);
  return v2;
}

double RERigidBodyCalculateVelocityAtLocalPoint(uint64_t a1, int32x4_t a2)
{
  int32x4_t v4 = a2;
  re::RigidBody::calculateVelocityAtLocalPoint(a1, &v4);
  return v2;
}

re *REForceEffectDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    __n128 v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t REForceEffectGetSimulation(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t REForceEffectIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t REForceEffectSetIsEnabled(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 16) != a2)
  {
    *(unsigned char *)(result + 16) = a2;
    uint64_t v2 = *(void *)result;
    if (a2) {
      return (*(uint64_t (**)(void))(v2 + 24))();
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 32))();
    }
  }
  return result;
}

uint64_t REForceEffectGetType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

__n128 REForceEffectCreateGravity(re *a1, __n128 a2)
{
  uint64_t v2 = re::globalAllocators(a1);
  __n128 v3 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 48, 16);
  v3[1].n128_u8[0] = 1;
  v3->n128_u64[0] = (unint64_t)&unk_26E716478;
  v3->n128_u64[1] = 0;
  __n128 result = a2;
  void v3[2] = a2;
  return result;
}

__n128 REGravityGetAcceleration(__n128 *a1)
{
  return a1[2];
}

uint64_t REGravitySetAcceleration(uint64_t a1, const re::PhysicsSimulation *a2, __n128 a3)
{
  int32x4_t v4 = *(_anonymous_namespace_ **)(a1 + 8);
  if (v4)
  {
    __n128 v9 = a3;
    a3 = v9;
    if (isLegacyGlobalSimulation)
    {
      uint64_t v6 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), v9);
      uint64_t v7 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v6);
      __n128 v10 = v9;
      (*(void (**)(uint64_t, __n128 *))(*(void *)v7 + 96))(v7, &v10);
      a3 = v9;
    }
  }
  __n128 v10 = a3;
  return re::Gravity::setAcceleration(a1, &v10);
}

uint64_t REForceEffectCreateDamping(re *a1, float a2, float a3)
{
  __n128 v5 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 32, 8);
  *(unsigned char *)(result + 16) = 1;
  *(void *)uint64_t result = &unk_26E717240;
  *(void *)(result + 8) = 0;
  *(float *)(result + 20) = a2;
  *(float *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  return result;
}

float REDampingGetLinearDamping(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

uint64_t REDampingSetLinearDamping(re::Damping *this, const re::PhysicsSimulation *a2, float a3)
{
  __n128 v5 = (_anonymous_namespace_ *)*((void *)this + 1);
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    uint64_t v7 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v6);
    (*(void (**)(uint64_t, float))(*(void *)v7 + 112))(v7, a3);
  }
  return re::Damping::setLinearDamping((uint64_t)this, a3);
}

float REDampingGetAngularDamping(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t REDampingSetAngularDamping(re::Damping *this, const re::PhysicsSimulation *a2, float a3)
{
  __n128 v5 = (_anonymous_namespace_ *)*((void *)this + 1);
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    uint64_t v7 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v6);
    (*(void (**)(uint64_t, float))(*(void *)v7 + 128))(v7, a3);
  }
  return re::Damping::setAngularDamping((uint64_t)this, a3);
}

__n128 REForceEffectCreateExplosion(re *a1, __n128 a2, float a3, float a4, float a5)
{
  long long v8 = re::globalAllocators(a1);
  __n128 v9 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 80, 16);
  v9[1].n128_u8[0] = 1;
  v9->n128_u64[0] = (unint64_t)&unk_26E716910;
  v9->n128_u64[1] = 0;
  __n128 result = a2;
  float32x4_t v9[2] = a2;
  v9[3].n128_f32[0] = a3;
  v9[3].n128_f32[1] = a4;
  v9[3].n128_f32[2] = a5;
  return result;
}

__n128 REExplosionGetPosition(__n128 *a1)
{
  return a1[2];
}

__n128 *REExplosionSetPosition(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

float REExplosionGetRadius(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

uint64_t REExplosionSetRadius(uint64_t result, float a2)
{
  *(float *)(result + 48) = a2;
  return result;
}

float REExplosionGetDuration(uint64_t a1)
{
  return *(float *)(a1 + 52);
}

uint64_t REExplosionSetDuration(uint64_t result, float a2)
{
  *(float *)(result + 52) = a2;
  return result;
}

float REExplosionGetForce(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

uint64_t REExplosionSetForce(uint64_t result, float a2)
{
  *(float *)(result + 56) = a2;
  return result;
}

__n128 REForceEffectCreateDampedSpring(re *a1, unint64_t a2, __n128 a3, __n128 a4, float a5, float a6, float a7)
{
  long long v12 = re::globalAllocators(a1);
  size_t v13 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 96, 16);
  v13[1].n128_u8[0] = 1;
  v13->n128_u64[0] = (unint64_t)&unk_26E716DA0;
  v13->n128_u64[1] = 0;
  v13[5].n128_f32[1] = a5;
  v13[5].n128_f32[2] = a6;
  v13[1].n128_u64[1] = (unint64_t)a1;
  v13[2].n128_u64[0] = a2;
  __n128 result = a4;
  uint64_t v13[3] = a3;
  _OWORD v13[4] = a4;
  v13[5].n128_f32[0] = a7;
  return result;
}

uint64_t REDampedSpringGetBodyA(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t REDampedSpringSetBodyA(uint64_t result, uint64_t a2)
{
  *(void *)(result + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t REDampedSpringGetBodyB(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REDampedSpringSetBodyB(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

__n128 REDampedSpringGetLocalPositionA(__n128 *a1)
{
  return a1[3];
}

__n128 *REDampedSpringSetLocalPositionA(__n128 *result, __n128 a2)
{
  result[3] = a2;
  return result;
}

__n128 REDampedSpringGetLocalPositionB(__n128 *a1)
{
  return a1[4];
}

__n128 *REDampedSpringSetLocalPositionB(__n128 *result, __n128 a2)
{
  result[4] = a2;
  return result;
}

float REDampedSpringGetRestLength(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

uint64_t REDampedSpringSetRestLength(uint64_t result, float a2)
{
  *(float *)(result + 80) = a2;
  return result;
}

float REDampedSpringGetSpringConstant(uint64_t a1)
{
  return *(float *)(a1 + 84);
}

uint64_t REDampedSpringSetSpringConstant(uint64_t result, float a2)
{
  *(float *)(result + 8re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

float REDampedSpringGetDampingConstant(uint64_t a1)
{
  return *(float *)(a1 + 88);
}

uint64_t REDampedSpringSetDampingConstant(uint64_t result, float a2)
{
  *(float *)(result + 88) = a2;
  return result;
}

double REForceEffectCreateGoal(re *a1, __n128 a2, __n128 a3, float a4, float a5)
{
  long long v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 176, 16);
  *(unsigned char *)(v9 + 16) = 1;
  *(void *)uint64_t v9 = &unk_26E716AA0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v9 + 32) = a2;
  *(__n128 *)(v9 + 48) = a3;
  double result = 0.0;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v9 + 96) = _Q1;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_DWORD *)(v9 + 152) = 4;
  *(__n128 *)(v9 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  *(__n128 *)(v9 + 80) = a3;
  *(void *)(v9 + 160) = 0;
  *(void *)(v9 + 168) = 0;
  *(float *)(v9 + 112) = a4;
  *(float *)(v9 + 116) = a5;
  return result;
}

double REForceEffectCreateRelativeGoal(re *a1, uint64_t a2, char a3, __n128 a4, __n128 a5, float a6, float a7)
{
  long long v12 = re::globalAllocators(a1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 176, 16);
  *(unsigned char *)(v13 + 16) = 1;
  *(void *)uint64_t v13 = &unk_26E716AA0;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v13 + 32) = a4;
  *(__n128 *)(v13 + 48) = a5;
  double result = 0.0;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v13 + 96) = _Q1;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_DWORD *)(v13 + 152) = 4;
  *(_DWORD *)(v13 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  *(__n128 *)(v13 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a4;
  *(__n128 *)(v13 + 80) = a5;
  *(unsigned char *)(v13 + 156) = a3;
  *(void *)(v13 + 160) = 0;
  *(void *)(v13 + 168) = a2;
  *(float *)(v13 + 112) = a6;
  *(float *)(v13 + 116) = a7;
  return result;
}

double REForceEffectCreateNestedGoal(re *a1, uint64_t a2, __n128 a3, __n128 a4, float a5, float a6)
{
  __n128 v10 = re::globalAllocators(a1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 176, 16);
  *(unsigned char *)(v11 + 16) = 1;
  *(void *)uint64_t v11 = &unk_26E716AA0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v11 + 32) = a3;
  *(__n128 *)(v11 + 48) = a4;
  double result = 0.0;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v11 + 96) = _Q1;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_DWORD *)(v11 + 152) = 4;
  *(_DWORD *)(v11 + 14re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 2;
  *(__n128 *)(v11 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a3;
  *(__n128 *)(v11 + 80) = a4;
  *(void *)(v11 + 160) = a2;
  *(void *)(v11 + 168) = 0;
  *(float *)(v11 + 112) = a5;
  *(float *)(v11 + 116) = a6;
  return result;
}

uint64_t REForceEffectStartGoalTimer(uint64_t result, float a2)
{
  *(float *)(result + 128) = a2;
  *(_DWORD *)(result + 132) = 0;
  return result;
}

uint64_t REForceEffectStopGoalTimer(uint64_t result)
{
  *(void *)(result + 128) = 0;
  return result;
}

float REForceEffectStepGoalTime(uint64_t a1, float result)
{
  if (*(float *)(a1 + 128) > 0.0 && !*(unsigned char *)(a1 + 157))
  {
    double result = *(float *)(a1 + 132) + result;
    *(float *)(a1 + 132) = result;
  }
  return result;
}

__n128 REForceEffectCreateLinearSpring(re *a1, unint64_t a2, __n128 a3, __n128 a4, float a5, float a6)
{
  __n128 v10 = re::globalAllocators(a1);
  uint64_t v11 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 112, 16);
  v11[1].n128_u8[0] = 1;
  v11->n128_u64[0] = (unint64_t)&unk_26E716618;
  v11->n128_u64[1] = 0;
  v11[1].n128_u64[1] = (unint64_t)a1;
  v11[2].n128_u64[0] = a2;
  __n128 result = a4;
  uint64_t v11[3] = a3;
  uint64_t v11[4] = a4;
  v11[5].n128_u32[2] = 0;
  v11[6].n128_u64[0] = 0;
  v11[5].n128_f32[0] = a6;
  v11[5].n128_f32[1] = a5;
  return result;
}

__n128 REForceEffectCreateAngularSpring(re *a1, unint64_t a2, __n128 a3, __n128 a4, float a5, float a6)
{
  __n128 v10 = re::globalAllocators(a1);
  uint64_t v11 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 96, 16);
  v11[1].n128_u8[0] = 1;
  v11->n128_u64[0] = (unint64_t)&unk_26E716E18;
  v11->n128_u64[1] = 0;
  v11[1].n128_u64[1] = (unint64_t)a1;
  v11[2].n128_u64[0] = a2;
  __n128 result = a4;
  uint64_t v11[3] = a3;
  uint64_t v11[4] = a4;
  v11[5].n128_u64[1] = 0;
  v11[5].n128_f32[0] = a6;
  v11[5].n128_f32[1] = a5;
  return result;
}

__n128 REForceEffectCreateRadialRepulsion(re *a1, unsigned __int32 a2, __n128 a3, __n128 a4, float a5)
{
  long long v8 = re::globalAllocators(a1);
  uint64_t v9 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 80, 16);
  v9[1].n128_u8[0] = 1;
  v9->n128_u64[0] = (unint64_t)&unk_26E7174B8;
  v9->n128_u64[1] = 0;
  v9[1].n128_u64[1] = (unint64_t)a1;
  __n128 result = a4;
  float32x4_t v9[2] = a3;
  float32x4_t v9[3] = a4;
  v9[4].n128_f32[0] = a5;
  v9[4].n128_u32[1] = a2;
  return result;
}

uint64_t REForceEffectCreatePunctual(re *a1, int a2, char a3, char a4, __n128 a5, float a6, float a7)
{
  uint64_t v13 = re::globalAllocators(a1);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 144, 16);
  return re::WiggleForce::WiggleForce(v14, (uint64_t)a1, a2, a3, a4, a5, a6, a7);
}

double REForceEffectCreateDirectional(re *a1, __n128 a2, float a3)
{
  char v3 = (char)a1;
  __n128 v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 144, 16);
  *(unsigned char *)(v6 + 16) = 1;
  *(void *)uint64_t v6 = &unk_26E716A28;
  *(void *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(__n128 *)(v6 + 48) = a2;
  *(void *)(v6 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v6 + 72) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 80) = _Q0;
  *(float *)(v6 + 96) = a3;
  *(void *)(v6 + 100) = 0xFFFF00000000;
  *(void *)&double result = 1;
  *(void *)(v6 + 108) = 1;
  *(unsigned char *)(v6 + 116) = v3;
  *(void *)(v6 + 117) = 0;
  *(_DWORD *)(v6 + 12re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  return result;
}

__n128 REForceEffectCreateVortex(re *a1, int a2, __n128 a3, float32x4_t a4, float a5, float a6)
{
  __n128 v10 = re::globalAllocators(a1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 144, 16);
  *(unsigned char *)(v11 + 16) = 1;
  *(void *)uint64_t v11 = &unk_26E716A28;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v11 + 128) = a3;
  int32x4_t v12 = (int32x4_t)vmulq_f32(a4, a4);
  v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  *(__n128 *)(v11 + 32) = a3;
  *(float32x4_t *)(v11 + 48) = vmulq_n_f32(a4, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
  *(void *)(v11 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v11 + 72) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(v11 + 80) = result;
  *(float *)(v11 + 96) = a5;
  *(float *)(v11 + 100) = a6;
  *(void *)(v11 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0x20000FFFFLL;
  *(_DWORD *)(v11 + 112) = a2;
  *(_WORD *)(v11 + 116) = 256;
  *(void *)(v11 + 118) = 0;
  *(_WORD *)(v11 + 126) = 0;
  return result;
}

double REForceEffectCreateNoise(re *a1, char a2, __n128 a3, float a4)
{
  uint64_t v7 = re::globalAllocators(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 144, 16);
  *(unsigned char *)(v8 + 16) = 1;
  *(void *)uint64_t v8 = &unk_26E716A28;
  *(void *)(v8 + 8) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v8 + 48) = a3;
  *(void *)(v8 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  *(void *)(v8 + 72) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v8 + 80) = _Q0;
  *(float *)(v8 + 96) = a4;
  *(void *)(v8 + 100) = 0xFFFF00000000;
  *(void *)&double result = 3;
  *(void *)(v8 + 108) = 3;
  *(unsigned char *)(v8 + 116) = a2;
  *(void *)(v8 + 117) = 0;
  *(_DWORD *)(v8 + 12re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0;
  return result;
}

double REForceEffectCreateDamp(re *a1, __n128 a2, float a3, float a4)
{
  uint64_t v7 = re::globalAllocators(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 144, 16);
  *(unsigned char *)(v8 + 16) = 1;
  *(void *)uint64_t v8 = &unk_26E716A28;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 2re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a1;
  *(__n128 *)(v8 + 128) = a2;
  *(__n128 *)(v8 + 32) = a2;
  *(_OWORD *)(v8 + 48) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v8 + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 0u;
  *(_OWORD *)(v8 + 80) = _Q1;
  *(float *)(v8 + 96) = a3;
  *(float *)(v8 + 100) = a4;
  *(_DWORD *)(v8 + 10re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = 1;
  *(void *)&double result = 0x200000004;
  *(void *)(v8 + 108) = 0x200000004;
  *(_WORD *)(v8 + 116) = 256;
  *(void *)(v8 + 118) = 0;
  *(_WORD *)(v8 + 126) = 0;
  return result;
}

__n64 RELinearLimitRange(double a1, float a2)
{
  result.n64_f32[1] = a2;
  return result;
}

float32x2_t RELinearLimitSymmetricRange(float a1)
{
  return vmul_n_f32((float32x2_t)0x3F000000BF000000, a1);
}

int32x2_t RELinearLimitLocked(int32x2_t a1)
{
  return vdup_lane_s32(a1, 0);
}

double RELinearLimitFree()
{
  return -0.00781250185;
}

__n64 REAngularLimitRange(re::AngularLimit *a1, float a2, float a3)
{
  result.n64_f32[0] = re::AngularLimit::range(a1, a2, a3);
  result.n64_u32[1] = v3;
  return result;
}

__n64 REAngularLimitSymmetricRange(re::AngularLimit *a1, float a2)
{
  result.n64_f32[0] = re::AngularLimit::symmetricRange(a1, a2);
  result.n64_u32[1] = v2;
  return result;
}

__n64 REAngularLimitLocked(re::AngularLimit *a1, float a2)
{
  re::AngularLimit::locked(a1, a2);
  result.n64_u32[1] = v2;
  return result;
}

__n64 REAngularLimitFree(re::AngularLimit *a1)
{
  result.n64_f32[0] = re::AngularLimit::free(a1);
  result.n64_u32[1] = v1;
  return result;
}

re *REConstraintDestroy(void (***a1)(void))
{
  return re::internal::destroyPersistent<re::PhysicsSimulation>((re *)"REConstraintDestroy", 1092, a1);
}

uint64_t REConstraintGetCollisionEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))();
}

uint64_t REConstraintSetCollisionsEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56))();
}

uint64_t REBallSocketJointCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 72))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t REBallSocketJointSetAngularLimits(int8x8_t *a1, float32x2_t a2, float32_t a3)
{
  a2.f32[1] = a3;
  float32x2_t v3 = (float32x2_t)vdup_n_s32(0x40490FDBu);
  float32x2_t v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a2, v3), (int8x8_t)v3, (int8x8_t)a2);
  __asm { FMOV            V1.2S, #-1.0 }
  a1[7] = vbsl_s8((int8x8_t)vcgt_f32(_D1, v4), (int8x8_t)_D1, (int8x8_t)v4);
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

float REBallSocketJointGetYLimit(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

float REBallSocketJointGetZLimit(uint64_t a1)
{
  return *(float *)(a1 + 60);
}

uint64_t REFixedJointCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 56))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t REHingeJointCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 48))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t REHingeJointEnableLimit(uint64_t a1, int a2, double a3)
{
  LODWORD(a3) = -1077342245;
  if (!a2) {
    *(float *)&a3 = 1.0;
  }
  float v3 = 1.5708;
  if (!a2) {
    float v3 = 0.0;
  }
  return re::HingeJoint::setAngularLimit(a1, a3, v3);
}

uint64_t REHingeJointSetAngularLimit(uint64_t a1, double a2)
{
  return re::HingeJoint::setAngularLimit(a1, a2, *((float *)&a2 + 1));
}

double REHingeJointGetAngularLimits(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t REJointGetLimitType(float a1, float a2)
{
  unsigned int v2 = a1 < a2;
  if (a2 == a1) {
    unsigned int v2 = 2;
  }
  if ((LODWORD(a2) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    unsigned int v2 = 0;
  }
  if ((LODWORD(a1) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t REHingeJointGetAngularLimitType(uint64_t a1)
{
  float v1 = *(float *)(a1 + 56);
  if ((LODWORD(v1) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  float v2 = *(float *)(a1 + 60);
  if ((LODWORD(v2) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  if (v2 == v1) {
    return 2;
  }
  return v1 < v2;
}

uint64_t RESliderJointCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 64))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t RESliderJointSetLinearLimit(double *a1, double a2)
{
  a1[7] = a2;
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

double RESliderJointGetAngularLimits()
{
  *(void *)&double result = 1065353216;
  return result;
}

uint64_t RESliderJointGetAngularLimitType()
{
  return 0;
}

double RESliderJointGetLinearLimits(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t RESliderJointGetLinearLimitType(uint64_t a1)
{
  float v1 = *(float *)(a1 + 56);
  if ((LODWORD(v1) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  float v2 = *(float *)(a1 + 60);
  if ((LODWORD(v2) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  if (v2 == v1) {
    return 2;
  }
  return v1 < v2;
}

uint64_t RETwistSwingJointCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 96))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t RETwistSwingJointSetAngularLimit(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  return re::TwistSwingJoint::setAngularLimit(a1, a2, &v4);
}

uint64_t REGeneric6DOFConstraintCreate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v9[0] = a4;
  v9[1] = a5;
  v8[0] = a6;
  v8[1] = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 88))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, a1, v9, a2, v8, a3);
}

uint64_t REGeneric6DOFConstraintSetLinearLimits(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  return re::Generic6DOFConstraint::setLinearLimit(a1, a2, &v4);
}

__n64 REGeneric6DOFConstraintGetAngularLimits(uint64_t a1, uint64_t a2)
{
  unsigned __int32 v6 = *(void *)re::Generic6DOFConstraint::angularLimit(a1, a2);
  uint64_t v4 = re::Generic6DOFConstraint::angularLimit(a1, a2);
  result.n64_u32[0] = v6;
  result.n64_u32[1] = *(_DWORD *)(v4 + 4);
  return result;
}

uint64_t re::Generic6DOFConstraint::angularLimit(uint64_t a1, uint64_t a2)
{
  if (a2 < 3) {
    return a1 + 8 * (int)a2 + 80;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < N", "operator[]", 242, (int)a2, 3, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

__n64 REGeneric6DOFConstraintGetLinearLimits(uint64_t a1, uint64_t a2)
{
  unsigned __int32 v6 = *(void *)re::Generic6DOFConstraint::linearLimit(a1, a2);
  uint64_t v4 = re::Generic6DOFConstraint::linearLimit(a1, a2);
  result.n64_u32[0] = v6;
  result.n64_u32[1] = *(_DWORD *)(v4 + 4);
  return result;
}

uint64_t REGeneric6DOFConstraintSetAngularLimits(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  return re::Generic6DOFConstraint::setAngularLimit(a1, a2, &v4);
}

uint64_t REGeneric6DOFConstraintSetLinearSpring(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  LOBYTE(v6) = 1;
  *(void *)((char *)&v6 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = __PAIR64__(LODWORD(a4), LODWORD(a3));
  *((float *)&v6 + 3) = a5;
  return re::Generic6DOFConstraint::setLinearSpring(a1, a2, &v6);
}

uint64_t REGeneric6DOFConstraintSetAngularSpring(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  LOBYTE(v6) = 1;
  *(void *)((char *)&v6 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = __PAIR64__(LODWORD(a4), LODWORD(a3));
  *((float *)&v6 + 3) = a5;
  return re::Generic6DOFConstraint::setAngularSpring(a1, a2, &v6);
}

uint64_t REGeneric6DOFConstraintSetLinearMotor(uint64_t a1, uint64_t a2, char a3, float a4, float a5, float a6)
{
  LOBYTE(v7) = 1;
  *(void *)((char *)&v7 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  BYTE12(v7) = a3;
  float v8 = a6;
  return re::Generic6DOFConstraint::setLinearMotor(a1, a2, &v7);
}

uint64_t REGeneric6DOFConstraintSetAngularMotor(uint64_t a1, uint64_t a2, char a3, float a4, float a5, float a6)
{
  LOBYTE(v7) = 1;
  *(void *)((char *)&v7 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  BYTE12(v7) = a3;
  float v8 = a6;
  return re::Generic6DOFConstraint::setAngularMotor(a1, a2, &v7);
}

_anonymous_namespace_ *REPhysicsSimulationCreate()
{
  char v0 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                            + 32))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
  return v0;
}

re *REPhysicsSimulationDestroy(void (***a1)(void))
{
  return re::internal::destroyPersistent<re::PhysicsSimulation>((re *)"REPhysicsSimulationDestroy", 1430, a1);
}

float REPhysicsSimulationSettingsGetTimeStep(float *a1, const re::PhysicsSimulation *a2)
{
    return a1[17];
  uint64_t v3 = (*(uint64_t (**)(float *))(*(void *)a1 + 56))(a1);
  double v4 = *(void (**)(void))(*(void *)re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v3) + 152);
  v4();
  return result;
}

uint64_t anonymous namespace'::isLegacyGlobalSimulation(_anonymous_namespace_ *this, const re::PhysicsSimulation *a2)
{
  uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *, const re::PhysicsSimulation *))(*(void *)this + 56))(this, a2);
  if (result)
  {
    uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(result);
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result) == (void)this;
    }
  }
  return result;
}

uint64_t REPhysicsSimulationSettingsSetTimeStep(float *a1, const re::PhysicsSimulation *a2, float a3)
{
  if (result)
  {
    uint64_t v6 = (*(uint64_t (**)(float *))(*(void *)a1 + 56))(a1);
    uint64_t v7 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v6);
    uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)v7 + 144))(v7, a3);
  }
  a1[17] = a3;
  return result;
}

uint64_t REPhysicsSimulationSettingsGetAdaptiveTimeStep()
{
  return 0;
}

uint64_t REPhysicsSimulationSettingsGetMaxNumberOfTimeSteps(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t REPhysicsSimulationSettingsSetMaxNumberOfTimeSteps(uint64_t result, int a2)
{
  *(_DWORD *)(result + 6re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = a2;
  return result;
}

uint64_t REPhysicsSimulationGetCollisionWorld(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t REPhysicsSimulationAddRigidBody(uint64_t a1, re::RigidBody *a2)
{
  return re::RigidBodyCollection::add((re::RigidBodyCollection *)(a1 + 80), a2);
}

uint64_t REPhysicsSimulationRemoveRigidBody(uint64_t a1, re::RigidBody *a2)
{
  return re::RigidBodyCollection::remove((re::RigidBody ***)(a1 + 80), a2);
}

BOOL REPhysicsSimulationContainsRigidBody(uint64_t a1, uint64_t a2)
{
  return a2
      && (uint64_t v2 = *(void *)(a2 + 72)) != 0
      && *(void *)(v2 + 56) == *(void *)(*(void *)(*(void *)(a1 + 80) + 56) + 128);
}

uint64_t REPhysicsSimulationGetRigidBodyCount(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t REPhysicsSimulationGetRigidBody(uint64_t a1, unint64_t a2)
{
  return re::ecs2::ComponentTypeRegistry::operator[](a1 + 80, a2);
}

void REPhysicsSimulationAddConstraint(uint64_t a1, re::Constraint *a2)
{
}

BOOL REPhysicsSimulationRemoveConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return re::DynamicArray<re::Allocator const*>::removeStable((void *)(a1 + 152), &v3);
}

uint64_t REPhysicsSimulationGetConstraintCount(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

uint64_t REPhysicsSimulationGetConstraint(uint64_t a1, unint64_t a2)
{
  return re::PhysicsJointCollection::operator[](a1 + 136, a2);
}

void *REPhysicsSimulationAddForceEffect(uint64_t a1, re::ForceEffect *a2)
{
  double v4 = a2;
  re::DynamicArray<re::TransitionCondition *>::add((void *)(a1 + 256), &v4);
  return re::ForceEffect::setSimulation(v4, *(re::PhysicsSimulation **)(a1 + 248));
}

BOOL REPhysicsSimulationRemoveForceEffect(uint64_t a1, re::ForceEffect *a2)
{
  double v4 = (_anonymous_namespace_ *)*((void *)a2 + 1);
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 1) + 56))(*((void *)a2 + 1));
    uint64_t v6 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v5);
    if ((*(unsigned int (**)(re::ForceEffect *))(*(void *)a2 + 16))(a2) == 1)
    {
      v8[0] = 0;
      v8[1] = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, v8);
    }
    else if ((*(unsigned int (**)(re::ForceEffect *))(*(void *)a2 + 16))(a2) == 2)
    {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 112))(v6, 0.00001);
      (*(void (**)(uint64_t, float))(*(void *)v6 + 128))(v6, 0.05);
    }
  }
  return re::ForceEffectCollection::remove((re::ForceEffectCollection *)(a1 + 248), a2);
}

BOOL REPhysicsSimulationContainsForceEffect(uint64_t a1, uint64_t a2)
{
  return a2 && *(void *)(a2 + 8) == *(void *)(a1 + 248);
}

uint64_t REPhysicsSimulationGetForceEffectCount(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

uint64_t REPhysicsSimulationGetForceEffect(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 288) + 8 * a2);
}

double REPhysicsSimulationGetTime(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

float REPhysicsSimulationGetContactImpulse(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (float32x4_t *)re::ContactSet::operator[](a2, a3);
  float32x4_t v4 = vmulq_f32(v3[3], v3[3]);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
}

uint64_t REPhysicsDebugRendererIsEnabled()
{
  return re::PhysicsDebugRenderer::isUsingPhysicsDebugRenderer(void)::featureEnabled;
}

uint64_t REPhysicsDebugRendererFeatureForceEnabled(uint64_t result)
{
  re::PhysicsDebugRenderer::isUsingPhysicsDebugRenderer(void)::featureEnabled = result;
  return result;
}

void *REPerspectiveCameraComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REOrthographicCameraComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *RECustomMatrixCameraComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RESceneFindFirstCameraComponent(uint64_t a1)
{
  if (re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(a1))
  {
    return re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(a1);
  }
  else if (re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(a1))
  {
    return re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(a1);
  }
  else
  {
    uint64_t result = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(a1);
    if (result)
    {
      return re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(a1);
    }
  }
  return result;
}

double REMakeProjectionMatrix(float a1, float a2)
{
  v4[0] = COERCE_UNSIGNED_INT(1.5697 / (float)(a1 / a2));
  v4[1] = xmmword_234394F90;
  _OWORD v4[2] = xmmword_234394FA0;
  uint64_t v4[3] = xmmword_2343971D0;
  re::Projection::makeReverseDepth(v4, &v3);
  return *(double *)&v3;
}

double REMakeProjectionMatrixWithAspectRatio(float a1)
{
  v3[0] = COERCE_UNSIGNED_INT(1.5697 / a1);
  v3[1] = xmmword_234394F90;
  void v3[2] = xmmword_234394FA0;
  unint64_t v3[3] = xmmword_2343971D0;
  re::Projection::makeReverseDepth(v3, &v2);
  return *(double *)&v2;
}

double RECustomMatrixCameraComponentCalculateWorldPose(uint64_t a1, uint64_t a2)
{
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(a1, a2, &v3);
  return *(double *)v3.i64;
}

double REPerspectiveCameraComponentCalculateWorldPose(uint64_t a1, uint64_t a2)
{
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

double REOrthographicCameraComponentCalculateWorldPose(uint64_t a1, uint64_t a2)
{
  re::ecs2::OrthographicCameraComponent::calculateWorldPose(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

double RECustomMatrixCameraComponentCalculateProjection@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::CustomMatrixCameraComponent::calculateProjection(a1, a2, (uint64_t)&v5);
  *(_DWORD *)a3 = v5;
  *(_OWORD *)(a3 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
  *(void *)(a3 + 20) = v7;
  *(unsigned char *)(a3 + 28) = v8;
  *(_OWORD *)(a3 + 32) = v9;
  *(_DWORD *)(a3 + 48) = v10;
  double result = v11;
  *(double *)(a3 + 56) = v11;
  return result;
}

double REPerspectiveCameraComponentCalculateProjectionWithAspectRatio@<D0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  re::ecs2::PerspectiveCameraComponent::calculateProjection(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  *(_OWORD *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
  *(void *)(a2 + 20) = v7;
  *(unsigned char *)(a2 + 28) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 48) = v10;
  double result = v11;
  *(double *)(a2 + 56) = v11;
  return result;
}

double REOrthographicCameraComponentCalculateProjectionWithAspectRatio@<D0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  re::ecs2::OrthographicCameraComponent::calculateProjection(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  *(_OWORD *)(a2 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = v6;
  *(void *)(a2 + 20) = v7;
  *(unsigned char *)(a2 + 28) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 48) = v10;
  double result = v11;
  *(double *)(a2 + 56) = v11;
  return result;
}

uint64_t RECustomMatrixCameraComponentSetProjection(uint64_t a1, int *a2, unsigned int a3)
{
  int v6 = *a2;
  long long v7 = *(_OWORD *)(a2 + 1);
  uint64_t v8 = *(void *)(a2 + 5);
  char v9 = *((unsigned char *)a2 + 28);
  long long v10 = *((_OWORD *)a2 + 2);
  int v11 = a2[12];
  uint64_t v12 = *((void *)a2 + 7);
  re::Projection::computeMatrix4x4F((re::Projection *)&v6, (uint64_t)v13);
  re::ecs2::CustomMatrixCameraComponent::setProjectionFromMatrix(a1, v13, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPerspectiveCameraComponentSetNear(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPerspectiveCameraComponentSetFar(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPerspectiveCameraComponentSetFieldOfView(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPerspectiveCameraComponentSetFieldOfViewDirection(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPerspectiveCameraComponentGetNear(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

float REPerspectiveCameraComponentGetFar(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float REPerspectiveCameraComponentGetFieldOfView(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REPerspectiveCameraComponentGetFieldOfViewDirection(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t REOrthographicCameraComponentSetNear(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REOrthographicCameraComponentSetFar(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REOrthographicCameraComponentSetScale(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REOrthographicCameraComponentSetScaleDirection(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REOrthographicCameraComponentGetNear(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

float REOrthographicCameraComponentGetFar(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float REOrthographicCameraComponentGetScale(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REOrthographicCameraComponentGetScaleDirection(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

__n128 RECustomMatrixCameraComponentGetProjectionMatrix(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)re::ecs2::CustomMatrixCameraComponent::projectionMatrix(a1, a2);
}

double REPerspectiveCameraComponentGetProjectionMatrix(float *a1)
{
  re::Projection::makePerspectiveFieldOfViewReverseDepth((float)(a1[9] * 3.1416) / 180.0, 1.0, a1[7], a1[8], &v2);
  return *(double *)&v2;
}

float REOrthographicCameraComponentGetProjectionMatrix(uint64_t a1)
{
  float result = 2.0 / (float)(*(float *)(a1 + 36) + *(float *)(a1 + 36));
  __asm { FMOV            V3.4S, #1.0 }
  return result;
}

uint64_t RECustomMatrixCameraComponentSetProjectionFromMatrix(uint64_t a1, unsigned int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = (__int128)a3;
  v8[1] = (__int128)a4;
  void v8[2] = (__int128)a5;
  uint64_t v8[3] = (__int128)a6;
  re::ecs2::CustomMatrixCameraComponent::setProjectionFromMatrix(a1, v8, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

double RECustomMatrixCameraComponentGetLocalEyePose(uint64_t a1, uint64_t a2)
{
  re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, a2, &v3);
  return *(double *)v3.i64;
}

double REPerspectiveCameraComponentGetLocalEyePose(_OWORD *a1, uint64_t a2)
{
  re::ecs2::PerspectiveCameraComponent::localEyePose(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

double REOrthographicCameraComponentGetLocalEyePose(_OWORD *a1, uint64_t a2)
{
  re::ecs2::OrthographicCameraComponent::localEyePose(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

uint64_t RECustomMatrixCameraComponentSetLocalEyePose(uint64_t a1, int a2, __n128 a3, __n128 a4)
{
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::CustomMatrixCameraComponent::setEyePose(a1, v6, 0, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPerspectiveCameraComponentSetLocalEyePose(uint64_t a1, int a2, __n128 a3, __n128 a4)
{
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::PerspectiveCameraComponent::setLocalEyePose(a1, v6, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REOrthographicCameraComponentSetLocalEyePose(uint64_t a1, int a2, __n128 a3, __n128 a4)
{
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::OrthographicCameraComponent::setLocalEyePose(a1, v6, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

double RECustomMatrixCameraComponentCalculateLocalEyePoseMatrix(uint64_t a1, uint64_t a2)
{
  re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

double REPerspectiveCameraComponentCalculateLocalEyePoseMatrix(_OWORD *a1, uint64_t a2)
{
  re::ecs2::PerspectiveCameraComponent::localEyePoseMatrix(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

double REOrthographicCameraComponentCalculateLocalEyePoseMatrix(_OWORD *a1, uint64_t a2)
{
  re::ecs2::OrthographicCameraComponent::localEyePoseMatrix(a1, a2, (uint64_t)&v3);
  return *(double *)&v3;
}

uint64_t RECustomMatrixCameraComponentSetLocalEyePoseFromMatrix(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  uint64_t v8[3] = a6;
  re::ecs2::CustomMatrixCameraComponent::setLocalEyePoseFromMatrix(a1, (uint64_t)v8, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPerspectiveCameraComponentSetLocalEyePoseFromMatrix(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  uint64_t v8[3] = a6;
  re::ecs2::PerspectiveCameraComponent::setLocalEyePoseFromMatrix(a1, (uint64_t)v8, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REOrthographicCameraComponentSetLocalEyePoseFromMatrix(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  uint64_t v8[3] = a6;
  re::ecs2::OrthographicCameraComponent::setLocalEyePoseFromMatrix(a1, (uint64_t)v8, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RECustomMatrixCameraComponentSetWorldEyePoseFromMatrix(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  uint64_t v8[3] = a6;
  re::ecs2::CustomMatrixCameraComponent::setWorldEyePoseFromMatrix(a1, (uint64_t)v8, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

float32x4_t *RECustomMatrixCameraComponentMoveToLookAtAABB(uint64_t a1, uint64_t a2)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent **)(a2 + 240), 1, (uint64_t)v6);
  float result = (float32x4_t *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(*(void *)(a2 + 176) + 32));
  if (result)
  {
    re::MeshAsset::aabbFromMesh(result, v6, (uint64_t)v5);
    return (float32x4_t *)CameraHelper<re::ecs2::CustomMatrixCameraComponent>::moveCameraToLookAtAABB(*(void **)(a1 + 16), v5);
  }
  return result;
}

float32x4_t *REPerspectiveCameraComponentMoveToLookAtAABB(uint64_t a1, uint64_t a2)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent **)(a2 + 240), 1, (uint64_t)v6);
  float result = (float32x4_t *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(*(void *)(a2 + 176) + 32));
  if (result)
  {
    re::MeshAsset::aabbFromMesh(result, v6, (uint64_t)v5);
    return (float32x4_t *)CameraHelper<re::ecs2::PerspectiveCameraComponent>::moveCameraToLookAtAABB(*(float **)(a1 + 16), v5);
  }
  return result;
}

float32x4_t *REOrthographicCameraComponentMoveToLookAtAABB(uint64_t a1, uint64_t a2)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent **)(a2 + 240), 1, (uint64_t)v6);
  float result = (float32x4_t *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(*(void *)(a2 + 176) + 32));
  if (result)
  {
    re::MeshAsset::aabbFromMesh(result, v6, (uint64_t)v5);
    return (float32x4_t *)CameraHelper<re::ecs2::OrthographicCameraComponent>::moveCameraToLookAtAABB(*(float **)(a1 + 16), v5);
  }
  return result;
}

void *RECustomMatrixCameraComponentMoveToLookAtGivenAABB(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return CameraHelper<re::ecs2::CustomMatrixCameraComponent>::moveCameraToLookAtAABB(*(void **)(a1 + 16), v4);
}

float *REPerspectiveCameraComponentMoveToLookAtGivenAABB(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return CameraHelper<re::ecs2::PerspectiveCameraComponent>::moveCameraToLookAtAABB(*(float **)(a1 + 16), v4);
}

float *REOrthographicCameraComponentMoveToLookAtGivenAABB(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return CameraHelper<re::ecs2::OrthographicCameraComponent>::moveCameraToLookAtAABB(*(float **)(a1 + 16), v4);
}

uint64_t RECheckAABBInsidePerspectiveCameraFrustumAnyViewWithCustomViewport(uint64_t a1, re::ecs2::Entity *a2, __n128 a3, __n128 a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v13[0] = a3;
  v13[1] = a4;
  int v6 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
  re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::ecs2::PerspectiveCameraComponent::getRealTimeProjection((re::ecs2::PerspectiveCameraComponent *)a1, a2, (re::RenderManager *)1, 0.0, (uint64_t)&v14);
  v12[0] = (float32x4_t)xmmword_23435FD50;
  v12[1] = (float32x4_t)xmmword_23435FD60;
  void v12[2] = (float32x4_t)xmmword_23435FD80;
  void v12[3] = (float32x4_t)xmmword_23435FBB0;
  uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)v13, &v14, v12);
  if (v16)
  {
    uint64_t v8 = v17;
    char v9 = &v17[9 * v16];
    do
    {
      *(void *)uint64_t v8 = 0;
      ++*((_DWORD *)v8 + 2);
      v8 += 9;
    }
    while (v8 != v9);
  }
  if (v14.i64[0])
  {
    long long v10 = v15;
    int v11 = &v15[7 * v14.i64[0]];
    do
    {
      *(void *)long long v10 = 0;
      ++*((_DWORD *)v10 + 2);
      v10 += 7;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t RECheckEntityInsidePerspectiveCameraFrustumAnyViewWithCustomViewport(re::ecs2::TransformComponent **a1, uint64_t a2, re::ecs2::Entity *a3, int a4, double a5, float a6, float a7)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, (const re::ecs2::Entity *)1, v36);
  long long v42 = xmmword_23435FD50;
  v43[0] = xmmword_23435FD60;
  v43[1] = xmmword_23435FD80;
  void v43[2] = xmmword_23435FBB0;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a4, (float32x4_t *)&v42, 1, (uint64_t)&v32);
  float32x2_t v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
  float32x2_t v34 = vadd_f32(v34, v13);
  float v35 = v35 + *(float *)&a5;
  float32x2_t v32 = vsub_f32(v32, v13);
  float v33 = v33 - *(float *)&a5;
  re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v42 = 0;
  DWORD2(v42) = 0;
  unint64_t v44 = 0;
  int v45 = 0;
  char v47 = 0;
  if (a6 == 1.0)
  {
    re::ecs2::PerspectiveCameraComponent::getRealTimeProjection((re::ecs2::PerspectiveCameraComponent *)a2, a3, (re::RenderManager *)1, 0.0, (uint64_t)v37);
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)&v42, v37);
    ++DWORD2(v42);
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(&v44, v39);
    ++v45;
    char v47 = v41;
    if (v39[0])
    {
      unint64_t v15 = v40;
      uint64_t v16 = &v40[9 * v39[0]];
      do
      {
        *(void *)unint64_t v15 = 0;
        ++*((_DWORD *)v15 + 2);
        v15 += 9;
      }
      while (v15 != v16);
    }
    if (v37[0])
    {
      uint64_t v17 = v38;
      uint64_t v18 = &v38[7 * v37[0]];
      do
      {
        *(void *)uint64_t v17 = 0;
        ++*((_DWORD *)v17 + 2);
        v17 += 7;
      }
      while (v17 != v18);
    }
  }
  else
  {
    uint64_t v19 = v14;
    int v20 = *(_DWORD *)(v14 + 36);
    uint64_t v21 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(float *)(v21 + 36) = *(float *)(v21 + 36) * a6;
    re::ecs2::PerspectiveCameraComponent::getRealTimeProjection((re::ecs2::PerspectiveCameraComponent *)a2, a3, (re::RenderManager *)1, a7, (uint64_t)v37);
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)&v42, v37);
    ++DWORD2(v42);
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(&v44, v39);
    ++v45;
    char v47 = v41;
    if (v39[0])
    {
      uint64_t v22 = v40;
      unint64_t v23 = &v40[9 * v39[0]];
      do
      {
        *(void *)uint64_t v22 = 0;
        ++*((_DWORD *)v22 + 2);
        v22 += 9;
      }
      while (v22 != v23);
    }
    if (v37[0])
    {
      char v24 = v38;
      uint64_t v25 = &v38[7 * v37[0]];
      do
      {
        *(void *)char v24 = 0;
        ++*((_DWORD *)v24 + 2);
        v24 += 7;
      }
      while (v24 != v25);
    }
    *(_DWORD *)(v19 + 36) = v20;
  }
  uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)&v32, (float32x4_t *)&v42, v36);
  if (v44)
  {
    uint64_t v27 = v46;
    int v28 = &v46[9 * v44];
    do
    {
      *(void *)uint64_t v27 = 0;
      ++*((_DWORD *)v27 + 2);
      v27 += 9;
    }
    while (v27 != v28);
  }
  if ((void)v42)
  {
    uint64_t v29 = v43;
    char v30 = &v43[7 * v42];
    do
    {
      *(void *)uint64_t v29 = 0;
      ++*((_DWORD *)v29 + 2);
      v29 += 7;
    }
    while (v29 != v30);
  }
  return result;
}

uint64_t RECheckEntityInsideCustomMatrixCameraFrustumAnyViewWithCustomViewport(re::ecs2::TransformComponent **a1, re::ecs2::EntityComponentCollection *a2, uint64_t a3, int a4, double a5, float a6, float a7)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, (const re::ecs2::Entity *)1, v225);
  *(_OWORD *)int v226 = xmmword_23435FD50;
  *(_OWORD *)&v226[16] = xmmword_23435FD60;
  long long v227 = xmmword_23435FD80;
  long long v228 = xmmword_23435FBB0;
  char v185 = a4;
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a4, (float32x4_t *)v226, 1, (uint64_t)&v221);
  float32x2_t v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
  float32x2_t v223 = vadd_f32(v223, v12);
  float v224 = v224 + *(float *)&a5;
  float32x2_t v221 = vsub_f32(v221, v12);
  float v222 = v222 - *(float *)&a5;
  a2 = (re::ecs2::EntityComponentCollection *)((char *)a2 + 32);
  v186 = (re::ecs2::CameraViewDescriptorsComponent *)re::ecs2::EntityComponentCollection::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  float32x2_t v13 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t v15 = (float32x4_t *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF0);
  v15[-1].i64[0] = 2;
  v15[-1].i64[1] = (uint64_t)v14;
  v15->i64[0] = 0;
  v15->i64[1] = 0;
  v15[1].i64[0] = 0;
  v15[1].i64[1] = 0x3F80000000000000;
  v15[2].i64[0] = 0;
  v184 = v15 + 2;
  v15[3].i64[0] = 0;
  v15[3].i64[1] = 0x3F80000000000000;
  v15[2].i64[1] = 0;
  uint64_t v189 = (uint64_t)v15;
  uint64_t v17 = 0;
  unint64_t v18 = (v16 + 31) & 0xFFFFFFFFFFFFFFF0;
  *(void *)(v18 - 16) = 2;
  *(void *)(v18 - 8) = v16;
  do
  {
    uint64_t v19 = v18 + v17;
    *(_DWORD *)uint64_t v19 = 0;
    *(_OWORD *)(v19 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = xmmword_234390F00;
    *(void *)(v19 + 20) = 0xBDCCCCCD3DCCCCCDLL;
    *(unsigned char *)(v19 + 28) = 0;
    *(_OWORD *)(v19 + 32) = xmmword_23435FD80;
    *(_DWORD *)(v19 + 48) = 1;
    v17 += 64;
    *(void *)(v19 + 56) = 0;
  }
  while (v17 != 128);
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v13, 0, v220);
  float32x4_t v20 = v220[1];
  *(float32x4_t *)uint64_t v189 = v220[0];
  *(float32x4_t *)(v189 + 16) = v20;
  uint64_t v21 = v186;
  uint64_t v22 = *((void *)v186 + 27);
  unint64_t v190 = v18;
  v211 = v13;
  if (v22 != 1)
  {
    if (!v22)
    {
      if (!*((void *)v186 + 32))
      {
        *(_DWORD *)int v226 = 0;
        *(_OWORD *)&v226[4] = xmmword_234390F00;
        *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
        v226[28] = 0;
        long long v227 = xmmword_23435FD80;
        LODWORD(v228) = 1;
        *((void *)&v228 + 1) = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)v226, (uint64_t)v13 + 256);
        long long v24 = *(_OWORD *)v226;
        long long v25 = *(_OWORD *)&v226[16];
        float32x4_t v26 = (float32x4_t)v227;
        long long v27 = v228;
        *(_OWORD *)(v18 + 32) = v227;
        *(_OWORD *)(v18 + 48) = v27;
        *(_OWORD *)unint64_t v18 = v24;
        *(_OWORD *)(v18 + 16) = v25;
        if (*((unsigned char *)v13 + 32))
        {
          int v28 = *(re::DrawingManager **)(a3 + 104);
          if (v28) {
            float v29 = re::DrawingManager::layerAspect(v28, 0, *(double *)&v24);
          }
          else {
            float v29 = 1.0;
          }
          float v150 = (float)(*(float *)(v18 + 12) + *(float *)(v18 + 16)) * 0.5;
          v23.i32[0] = *(_DWORD *)(v18 + 24);
          float v151 = v29 * (float)((float)(*(float *)(v18 + 20) - v23.f32[0]) * 0.5);
          v26.f32[0] = v150 + v151;
          *(float *)(v18 + 12) = v150 - v151;
          *(float *)(v18 + 16) = v150 + v151;
        }
        if (a6 != 1.0)
        {
          float v152 = (float)(*(float *)(v18 + 12) + *(float *)(v18 + 16)) * 0.5;
          float v153 = (float)(*(float *)(v18 + 20) - *(float *)(v18 + 24)) * 0.5;
          *(float *)(v18 + 12) = v152 - (float)(v153 * a7);
          *(float *)(v18 + 16) = v152 + (float)(v153 * a7);
          float v154 = atan2f(v153, *(float *)(v18 + 4));
          re::Projection::setFovY((re::Projection *)v18, (float)(v154 + v154) * a6);
        }
        char v218 = v185;
        char v219 = 0;
        re::buildCullingFrustum(v189, (_DWORD *)v18, 1u, &v218, (uint64_t)v226, v26, v23);
        v216.i64[0] = 0;
        v216.i32[2] = 0;
        long long v155 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v216, (uint64_t *)v226);
        if (v189) {
        uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)&v221, &v216, v225);
        }
        if (v216.i64[0])
        {
          long long v157 = v217;
          long long v158 = &v217[7 * v216.i64[0]];
          do
          {
            *(void *)long long v157 = 0;
            ++*((_DWORD *)v157 + 2);
            v157 += 7;
          }
          while (v157 != v158);
        }
        if (v229)
        {
          long long v159 = v230;
          long long v160 = &v230[9 * v229];
          do
          {
            *(void *)long long v159 = 0;
            ++*((_DWORD *)v159 + 2);
            v159 += 9;
          }
          while (v159 != v160);
        }
        if (*(void *)v226)
        {
          long long v161 = &v226[16];
          long long v162 = &v226[112 * *(void *)v226 + 16];
          do
          {
            *(void *)long long v161 = 0;
            ++*((_DWORD *)v161 + 2);
            v161 += 112;
          }
          while (v161 != v162);
        }
        return result;
      }
      goto LABEL_53;
    }
    goto LABEL_10;
  }
  if (*((void *)v186 + 32))
  {
LABEL_10:
    char v30 = 0;
    int v176 = &v226[16];
    v180 = (_OWORD *)(v18 + 64);
    uint64_t v182 = (uint64_t)v13 + 256;
    uint64_t v178 = (uint64_t)v13 + 320;
    while (1)
    {
      int v187 = v30;
      uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v21, v30);
      *(_DWORD *)int v226 = 0;
      *(_OWORD *)&v226[4] = xmmword_234390F00;
      *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
      v226[28] = 0;
      long long v227 = xmmword_23435FD80;
      LODWORD(v228) = 1;
      *((void *)&v228 + 1) = 0;
      re::Projection::setFromMatrix4x4F((uint64_t)v226, v182);
      long long v32 = *(_OWORD *)v226;
      long long v33 = *(_OWORD *)&v226[16];
      long long v34 = v228;
      *(_OWORD *)(v18 + 32) = v227;
      *(_OWORD *)(v18 + 48) = v34;
      *(_OWORD *)unint64_t v18 = v32;
      *(_OWORD *)(v18 + 16) = v33;
      re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v13, 1, v215);
      float32x4_t v37 = v215[1];
      *(float32x4_t *)uint64_t v189 = v215[0];
      *(float32x4_t *)(v189 + 16) = v37;
      if (*(unsigned char *)(ViewDescriptor + 192))
      {
        *(_DWORD *)int v226 = 0;
        *(_OWORD *)&v226[4] = xmmword_234390F00;
        *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
        v226[28] = 0;
        long long v227 = xmmword_23435FD80;
        LODWORD(v228) = 1;
        *((void *)&v228 + 1) = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)v226, v178);
        long long v38 = *(_OWORD *)&v226[16];
        _OWORD *v180 = *(_OWORD *)v226;
        v180[1] = v38;
        long long v39 = v228;
        v180[2] = v227;
        v180[3] = v39;
        unsigned int v40 = 2;
        re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v13, 2, v214);
        float32x4_t v41 = v214[1];
        float32x4_t *v184 = v214[0];
        v184[1] = v41;
      }
      else
      {
        unsigned int v40 = 1;
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      unint64_t v44 = *(void *)(ViewDescriptor + 304);
      uint64_t v45 = 32;
      uint64_t v46 = 80;
      uint64_t v191 = v40;
      do
      {
        if (!v44) {
          goto LABEL_36;
        }
        unint64_t v47 = 0;
        uint64_t v48 = ViewDescriptor + 16 * v43;
        uint64_t v195 = v45;
        uint64_t v197 = v43;
        uint64_t v49 = (float *)(v18 + (v43 << 6));
        v206 = (float *)(v48 + 208);
        v208 = (float *)(v48 + 204);
        uint64_t v50 = v49 + 3;
        uint64_t v51 = v49 + 4;
        unint64_t v52 = v49 + 5;
        uint64_t v53 = v49 + 6;
        int v202 = v49 + 1;
        v204 = (re::Projection *)v49;
        uint64_t v54 = v45;
        uint64_t v193 = v46;
        uint64_t v55 = v46;
        uint64_t v199 = v42;
        do
        {
          uint64_t v56 = *(void *)(ViewDescriptor + 320);
          re::AssetHandle::AssetHandle((re::AssetHandle *)v226, (const re::AssetHandle *)(v56 + v54));
          float v58 = *v208;
          float v59 = *v206;
          if (*(void *)&v226[8])
          {
            uint64_t v60 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v226);
            if (*(_DWORD *)(v60 + 240)) {
LABEL_142:
            }
              std::__throw_bad_variant_access[abi:nn180100]();
            id v61 = *(id *)(v60 + 160);
            float v62 = (float)(unint64_t)objc_msgSend(v61, sel_width);
            float v63 = v62 / (float)(unint64_t)objc_msgSend(v61, sel_height);
            if (v61) {
          }
            }
          else
          {
            unsigned int v64 = *(_DWORD *)(v56 + v55);
            if (v64 == -1)
            {
              uint64_t v66 = v56 + v42;
              uint64_t v67 = *(void **)(v66 + 88);
              if (v67)
              {
                float v68 = (float)(unint64_t)objc_msgSend(v67, sel_width);
                int v69 = *(void **)(v66 + 88);
LABEL_28:
                float v63 = v68 / (float)(unint64_t)objc_msgSend(v69, sel_height, v176);
                goto LABEL_30;
              }
              uint64_t v70 = *(void **)(v66 + 104);
              if (v70)
              {
                float v68 = (float)(unint64_t)objc_msgSend(v70, sel_width);
                int v69 = *(void **)(v66 + 104);
                goto LABEL_28;
              }
            }
            else
            {
              unint64_t v65 = *(re::DrawingManager **)(a3 + 104);
              if (v65)
              {
                float v63 = re::DrawingManager::layerAspect(v65, v64, v57);
                goto LABEL_30;
              }
            }
            float v63 = 1.0;
          }
LABEL_30:
          float32x2_t v13 = v211;
          if (*((unsigned char *)v211 + 32))
          {
            float v71 = (float)(*v50 + *v51) * 0.5;
            float v72 = (float)((float)(v58 / v59) * v63) * (float)((float)(*v52 - *v53) * 0.5);
            *uint64_t v51 = v71 + v72;
            *uint64_t v50 = v71 - v72;
          }
          if (a6 != 1.0)
          {
            float v73 = (float)(*v50 + *v51) * 0.5;
            float v74 = (float)(*v52 - *v53) * 0.5;
            *uint64_t v51 = v73 + (float)(v74 * a7);
            *uint64_t v50 = v73 - (float)(v74 * a7);
            float v75 = atan2f(v74, *v202);
            re::Projection::setFovY(v204, (float)(v75 + v75) * a6);
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v226);
          ++v47;
          unint64_t v44 = *(void *)(ViewDescriptor + 304);
          v42 += 136;
          v55 += 136;
          v54 += 136;
        }
        while (v44 > v47);
        unint64_t v18 = v190;
        uint64_t v43 = v197;
        uint64_t v42 = v199;
        uint64_t v46 = v193;
        uint64_t v45 = v195;
LABEL_36:
        ++v43;
        v42 += 8;
        v46 += 4;
        v45 += 24;
      }
      while (v43 != v191);
      char v218 = v185;
      char v219 = 0;
      re::buildCullingFrustum(v189, (_DWORD *)v18, v191, &v218, (uint64_t)v226, v35, v36);
      v216.i64[0] = 0;
      v216.i32[2] = 0;
      re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v216, (uint64_t *)v226);
      uint64_t isBoundingBoxInsidePlanesArray = re::isBoundingBoxInsidePlanesArray((uint64_t)&v221, &v216, v225);
      char v77 = isBoundingBoxInsidePlanesArray;
      if (isBoundingBoxInsidePlanesArray)
      {
        if (v189) {
                                                              + 40))();
        }
        if (v18) {
      }
        }
      if (v216.i64[0])
      {
        uint64_t v79 = v217;
        float v80 = &v217[7 * v216.i64[0]];
        do
        {
          *(void *)uint64_t v79 = 0;
          ++*((_DWORD *)v79 + 2);
          v79 += 7;
        }
        while (v79 != v80);
      }
      if (v229)
      {
        unint64_t v81 = v230;
        float v82 = &v230[9 * v229];
        do
        {
          *(void *)unint64_t v81 = 0;
          ++*((_DWORD *)v81 + 2);
          v81 += 9;
        }
        while (v81 != v82);
      }
      if (*(void *)v226)
      {
        uint64_t v83 = v176;
        unint64_t v84 = &v176[112 * *(void *)v226];
        do
        {
          *(void *)uint64_t v83 = 0;
          ++*((_DWORD *)v83 + 2);
          v83 += 112;
        }
        while (v83 != v84);
      }
      if (v77) {
        return 1;
      }
      uint64_t v21 = v186;
      char v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v187 + 1);
      if (*((void *)v186 + 27) <= (unint64_t)v187 + 1)
      {
LABEL_53:
        if (!*((void *)v21 + 32)) {
          goto LABEL_97;
        }
        uint64_t v85 = 0;
        int v177 = &v226[16];
        int v181 = (_OWORD *)(v18 + 64);
        uint64_t v183 = (uint64_t)v13 + 256;
        uint64_t v179 = (uint64_t)v13 + 320;
        while (1)
        {
          uint64_t v188 = v85;
          uint64_t v86 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v21, (re::ecs2::CameraViewDescriptorsComponent *)(v85 + 0x10000));
          *(_DWORD *)int v226 = 0;
          *(_OWORD *)&v226[4] = xmmword_234390F00;
          *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
          v226[28] = 0;
          long long v227 = xmmword_23435FD80;
          LODWORD(v228) = 1;
          *((void *)&v228 + 1) = 0;
          re::Projection::setFromMatrix4x4F((uint64_t)v226, v183);
          long long v87 = *(_OWORD *)v226;
          long long v88 = *(_OWORD *)&v226[16];
          long long v89 = v228;
          *(_OWORD *)(v18 + 32) = v227;
          *(_OWORD *)(v18 + 48) = v89;
          *(_OWORD *)unint64_t v18 = v87;
          *(_OWORD *)(v18 + 16) = v88;
          re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v13, 1, v213);
          float32x4_t v92 = v213[1];
          *(float32x4_t *)uint64_t v189 = v213[0];
          *(float32x4_t *)(v189 + 16) = v92;
          if (*(unsigned char *)(v86 + 192))
          {
            *(_DWORD *)int v226 = 0;
            *(_OWORD *)&v226[4] = xmmword_234390F00;
            *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
            v226[28] = 0;
            long long v227 = xmmword_23435FD80;
            LODWORD(v228) = 1;
            *((void *)&v228 + 1) = 0;
            re::Projection::setFromMatrix4x4F((uint64_t)v226, v179);
            long long v93 = *(_OWORD *)&v226[16];
            *int v181 = *(_OWORD *)v226;
            v181[1] = v93;
            long long v94 = v228;
            v181[2] = v227;
            v181[3] = v94;
            unsigned int v95 = 2;
            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v13, 2, v212);
            float32x4_t v96 = v212[1];
            float32x4_t *v184 = v212[0];
            v184[1] = v96;
          }
          else
          {
            unsigned int v95 = 1;
          }
          uint64_t v97 = 0;
          uint64_t v98 = 0;
          unint64_t v99 = *(void *)(v86 + 304);
          uint64_t v100 = 32;
          uint64_t v101 = 80;
          uint64_t v192 = v95;
          do
          {
            if (!v99) {
              goto LABEL_80;
            }
            unint64_t v102 = 0;
            uint64_t v103 = v86 + 16 * v98;
            uint64_t v196 = v100;
            uint64_t v198 = v98;
            uint64_t v104 = (float *)(v18 + (v98 << 6));
            int v207 = (float *)(v103 + 208);
            int v209 = (float *)(v103 + 204);
            uint64_t v105 = v104 + 3;
            uint64_t v106 = v104 + 4;
            uint64_t v107 = v104 + 5;
            uint64_t v108 = v104 + 6;
            int v203 = v104 + 1;
            int v205 = (re::Projection *)v104;
            uint64_t v109 = v100;
            uint64_t v194 = v101;
            uint64_t v110 = v101;
            uint64_t v200 = v97;
            do
            {
              uint64_t v111 = *(void *)(v86 + 320);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v226, (const re::AssetHandle *)(v111 + v109));
              float v113 = *v209;
              float v114 = *v207;
              if (*(void *)&v226[8])
              {
                uint64_t v115 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v226);
                if (*(_DWORD *)(v115 + 240)) {
                  goto LABEL_142;
                }
                id v116 = *(id *)(v115 + 160);
                float v117 = (float)(unint64_t)objc_msgSend(v116, sel_width);
                float v118 = v117 / (float)(unint64_t)objc_msgSend(v116, sel_height);
                if (v116) {
              }
                }
              else
              {
                unsigned int v119 = *(_DWORD *)(v111 + v110);
                if (v119 == -1)
                {
                  uint64_t v121 = v111 + v97;
                  long long v122 = *(void **)(v121 + 88);
                  if (v122)
                  {
                    float v123 = (float)(unint64_t)objc_msgSend(v122, sel_width);
                    long long v124 = *(void **)(v121 + 88);
LABEL_72:
                    float v118 = v123 / (float)(unint64_t)objc_msgSend(v124, sel_height, v177);
                    goto LABEL_74;
                  }
                  long long v125 = *(void **)(v121 + 104);
                  if (v125)
                  {
                    float v123 = (float)(unint64_t)objc_msgSend(v125, sel_width);
                    long long v124 = *(void **)(v121 + 104);
                    goto LABEL_72;
                  }
                }
                else
                {
                  unint64_t v120 = *(re::DrawingManager **)(a3 + 104);
                  if (v120)
                  {
                    float v118 = re::DrawingManager::layerAspect(v120, v119, v112);
                    goto LABEL_74;
                  }
                }
                float v118 = 1.0;
              }
LABEL_74:
              float32x2_t v13 = v211;
              if (*((unsigned char *)v211 + 32))
              {
                float v126 = (float)(*v105 + *v106) * 0.5;
                float v127 = (float)((float)(v113 / v114) * v118) * (float)((float)(*v107 - *v108) * 0.5);
                *uint64_t v106 = v126 + v127;
                *uint64_t v105 = v126 - v127;
              }
              if (a6 != 1.0)
              {
                float v128 = (float)(*v105 + *v106) * 0.5;
                float v129 = (float)(*v107 - *v108) * 0.5;
                *uint64_t v106 = v128 + (float)(v129 * a7);
                *uint64_t v105 = v128 - (float)(v129 * a7);
                float v130 = atan2f(v129, *v203);
                re::Projection::setFovY(v205, (float)(v130 + v130) * a6);
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v226);
              ++v102;
              unint64_t v99 = *(void *)(v86 + 304);
              v97 += 136;
              v110 += 136;
              v109 += 136;
            }
            while (v99 > v102);
            unint64_t v18 = v190;
            uint64_t v98 = v198;
            uint64_t v97 = v200;
            uint64_t v101 = v194;
            uint64_t v100 = v196;
LABEL_80:
            ++v98;
            v97 += 8;
            v101 += 4;
            v100 += 24;
          }
          while (v98 != v192);
          char v218 = v185;
          char v219 = 0;
          re::buildCullingFrustum(v189, (_DWORD *)v18, v192, &v218, (uint64_t)v226, v90, v91);
          v216.i64[0] = 0;
          v216.i32[2] = 0;
          re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v216, (uint64_t *)v226);
          uint64_t v131 = re::isBoundingBoxInsidePlanesArray((uint64_t)&v221, &v216, v225);
          char v132 = v131;
          if (v131)
          {
            if (v189) {
                                                                   + 40))();
            }
            if (v18) {
          }
            }
          if (v216.i64[0])
          {
            long long v134 = v217;
            long long v135 = &v217[7 * v216.i64[0]];
            do
            {
              *(void *)long long v134 = 0;
              ++*((_DWORD *)v134 + 2);
              v134 += 7;
            }
            while (v134 != v135);
          }
          if (v229)
          {
            long long v136 = v230;
            long long v137 = &v230[9 * v229];
            do
            {
              *(void *)long long v136 = 0;
              ++*((_DWORD *)v136 + 2);
              v136 += 9;
            }
            while (v136 != v137);
          }
          if (*(void *)v226)
          {
            long long v138 = v177;
            long long v139 = &v177[112 * *(void *)v226];
            do
            {
              *(void *)long long v138 = 0;
              ++*((_DWORD *)v138 + 2);
              v138 += 112;
            }
            while (v138 != v139);
          }
          if (v132) {
            return 1;
          }
          uint64_t v21 = v186;
          uint64_t v85 = v188 + 1;
          if (*((void *)v186 + 32) <= (unint64_t)(v188 + 1))
          {
LABEL_97:
            if (v189) {
            if (v18)
            }
            return 0;
          }
        }
      }
    }
  }
  uint64_t v142 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v186, 0);
  *(_DWORD *)int v226 = 0;
  *(_OWORD *)&v226[4] = xmmword_234390F00;
  *(void *)&v226[20] = 0xBDCCCCCD3DCCCCCDLL;
  v226[28] = 0;
  long long v227 = xmmword_23435FD80;
  LODWORD(v228) = 1;
  *((void *)&v228 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v226, (uint64_t)v13 + 256);
  long long v144 = *(_OWORD *)v226;
  long long v145 = *(_OWORD *)&v226[16];
  float32x4_t v146 = (float32x4_t)v227;
  long long v147 = v228;
  *(_OWORD *)(v18 + 32) = v227;
  *(_OWORD *)(v18 + 48) = v147;
  *(_OWORD *)unint64_t v18 = v144;
  *(_OWORD *)(v18 + 16) = v145;
  if (*(void *)(v142 + 304))
  {
    uint64_t v21 = v186;
    if (!*((void *)v186 + 27)) {
      goto LABEL_53;
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)v13 + 32))
  {
    long long v148 = *(re::DrawingManager **)(a3 + 104);
    if (v148) {
      float v149 = re::DrawingManager::layerAspect(v148, 0, *(double *)&v144);
    }
    else {
      float v149 = 1.0;
    }
    float v163 = (float)(*(float *)(v18 + 12) + *(float *)(v18 + 16)) * 0.5;
    v143.i32[0] = *(_DWORD *)(v18 + 24);
    float v164 = v149 * (float)((float)(*(float *)(v18 + 20) - v143.f32[0]) * 0.5);
    v146.f32[0] = v163 + v164;
    *(float *)(v18 + 12) = v163 - v164;
    *(float *)(v18 + 16) = v163 + v164;
  }
  if (a6 != 1.0)
  {
    float v165 = (float)(*(float *)(v18 + 12) + *(float *)(v18 + 16)) * 0.5;
    float v166 = (float)(*(float *)(v18 + 20) - *(float *)(v18 + 24)) * 0.5;
    *(float *)(v18 + 12) = v165 - (float)(v166 * a7);
    *(float *)(v18 + 16) = v165 + (float)(v166 * a7);
    float v167 = atan2f(v166, *(float *)(v18 + 4));
    re::Projection::setFovY((re::Projection *)v18, (float)(v167 + v167) * a6);
  }
  char v218 = v185;
  char v219 = 0;
  re::buildCullingFrustum(v189, (_DWORD *)v18, 1u, &v218, (uint64_t)v226, v146, v143);
  v216.i64[0] = 0;
  v216.i32[2] = 0;
  long long v168 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v216, (uint64_t *)v226);
  if (v189) {
  uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)&v221, &v216, v225);
  }
  if (v216.i64[0])
  {
    long long v170 = v217;
    v171 = &v217[7 * v216.i64[0]];
    do
    {
      *(void *)long long v170 = 0;
      ++*((_DWORD *)v170 + 2);
      v170 += 7;
    }
    while (v170 != v171);
  }
  if (v229)
  {
    v172 = v230;
    v173 = &v230[9 * v229];
    do
    {
      *(void *)v172 = 0;
      ++*((_DWORD *)v172 + 2);
      v172 += 9;
    }
    while (v172 != v173);
  }
  if (*(void *)v226)
  {
    int v174 = &v226[16];
    int v175 = &v226[112 * *(void *)v226 + 16];
    do
    {
      *(void *)int v174 = 0;
      ++*((_DWORD *)v174 + 2);
      v174 += 112;
    }
    while (v174 != v175);
  }
  return result;
}

uint64_t RECheckAABBInsideCustomMatrixCameraFrustumAnyViewWithCustomViewport(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v202 = *MEMORY[0x263EF8340];
  v196[0] = a3;
  v196[1] = a4;
  float32x4_t v4 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
  long long v162 = (re::ecs2::CameraViewDescriptorsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v182 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  int v6 = (float32x4_t *)(((unint64_t)v5 + 31) & 0xFFFFFFFFFFFFFFF0);
  v6[-1].i64[0] = 2;
  v6[-1].i64[1] = (uint64_t)v5;
  v6->i64[0] = 0;
  v6->i64[1] = 0;
  v6[1].i64[0] = 0;
  v6[1].i64[1] = 0x3F80000000000000;
  v6[2].i64[0] = 0;
  long long v161 = v6 + 2;
  v6[3].i64[0] = 0;
  v6[3].i64[1] = 0x3F80000000000000;
  v6[2].i64[1] = 0;
  uint64_t v165 = (uint64_t)v6;
  uint64_t v8 = 0;
  unint64_t v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFF0;
  *(void *)(v9 - 16) = 2;
  *(void *)(v9 - 8) = v7;
  do
  {
    uint64_t v10 = v9 + v8;
    *(_DWORD *)uint64_t v10 = 0;
    *(_OWORD *)(v10 + re::DynamicOverflowArray<PerTextureMetrics,8ul>::deinit((void *)this + 4) = xmmword_234390F00;
    *(void *)(v10 + 20) = 0xBDCCCCCD3DCCCCCDLL;
    *(unsigned char *)(v10 + 28) = 0;
    *(_OWORD *)(v10 + 32) = xmmword_23435FD80;
    *(_DWORD *)(v10 + 48) = 1;
    v8 += 64;
    *(void *)(v10 + 56) = 0;
  }
  while (v8 != 128);
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v182, 0, v195);
  float32x4_t v11 = v195[1];
  *(float32x4_t *)uint64_t v165 = v195[0];
  *(float32x4_t *)(v165 + 16) = v11;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)v182, 0, v194);
  float32x4_t v12 = v194[1];
  *(float32x4_t *)uint64_t v165 = v194[0];
  *(float32x4_t *)(v165 + 16) = v12;
  float32x2_t v13 = v162;
  uint64_t v14 = *((void *)v162 + 27);
  unint64_t v166 = v9;
  if (v14 != 1)
  {
    uint64_t v15 = (uint64_t)v182;
    if (!v14)
    {
      if (!*((void *)v162 + 32))
      {
        *(_DWORD *)uint64_t v197 = 0;
        *(_OWORD *)&v197[4] = xmmword_234390F00;
        *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
        v197[28] = 0;
        long long v198 = xmmword_23435FD80;
        LODWORD(v199) = 1;
        *((void *)&v199 + 1) = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)v197, (uint64_t)v182 + 256);
        long long v17 = *(_OWORD *)v197;
        long long v18 = *(_OWORD *)&v197[16];
        float32x4_t v19 = (float32x4_t)v198;
        long long v20 = v199;
        *(_OWORD *)(v9 + 32) = v198;
        *(_OWORD *)(v9 + 48) = v20;
        *(_OWORD *)unint64_t v9 = v17;
        *(_OWORD *)(v9 + 16) = v18;
        if (*((unsigned char *)v182 + 32))
        {
          uint64_t v21 = *(re::DrawingManager **)(a2 + 104);
          if (v21) {
            float v22 = re::DrawingManager::layerAspect(v21, 0, *(double *)&v17);
          }
          else {
            float v22 = 1.0;
          }
          float v135 = (float)(*(float *)(v9 + 12) + *(float *)(v9 + 16)) * 0.5;
          v16.i32[0] = *(_DWORD *)(v9 + 24);
          float v136 = v22 * (float)((float)(*(float *)(v9 + 20) - v16.f32[0]) * 0.5);
          v19.f32[0] = v135 + v136;
          *(float *)(v9 + 12) = v135 - v136;
          *(float *)(v9 + 16) = v135 + v136;
        }
        __int16 v193 = 1;
        re::buildCullingFrustum(v165, (_DWORD *)v9, 1u, &v193, (uint64_t)v197, v19, v16);
        v191.i64[0] = 0;
        v191.i32[2] = 0;
        long long v137 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v191, (uint64_t *)v197);
        if (v165) {
        long long v187 = xmmword_23435FD50;
        }
        long long v188 = xmmword_23435FD60;
        long long v189 = xmmword_23435FD80;
        long long v190 = xmmword_23435FBB0;
        uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)v196, &v191, (float32x4_t *)&v187);
        if (v191.i64[0])
        {
          long long v139 = v192;
          long long v140 = &v192[7 * v191.i64[0]];
          do
          {
            *(void *)long long v139 = 0;
            ++*((_DWORD *)v139 + 2);
            v139 += 7;
          }
          while (v139 != v140);
        }
        if (v200)
        {
          long long v141 = v201;
          uint64_t v142 = &v201[9 * v200];
          do
          {
            *(void *)long long v141 = 0;
            ++*((_DWORD *)v141 + 2);
            v141 += 9;
          }
          while (v141 != v142);
        }
        if (*(void *)v197)
        {
          float32x4_t v143 = &v197[16];
          long long v144 = &v197[112 * *(void *)v197 + 16];
          do
          {
            *(void *)float32x4_t v143 = 0;
            ++*((_DWORD *)v143 + 2);
            v143 += 112;
          }
          while (v143 != v144);
        }
        return result;
      }
      goto LABEL_51;
    }
    goto LABEL_10;
  }
  uint64_t v15 = (uint64_t)v182;
  if (*((void *)v162 + 32))
  {
LABEL_10:
    float32x4_t v23 = 0;
    uint64_t v159 = v15 + 256;
    uint64_t v155 = v15 + 320;
    long long v157 = (_OWORD *)(v9 + 64);
    while (1)
    {
      float v163 = v23;
      uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v13, v23);
      *(_DWORD *)uint64_t v197 = 0;
      uint64_t v25 = v15;
      *(_OWORD *)&v197[4] = xmmword_234390F00;
      *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
      v197[28] = 0;
      long long v198 = xmmword_23435FD80;
      LODWORD(v199) = 1;
      *((void *)&v199 + 1) = 0;
      re::Projection::setFromMatrix4x4F((uint64_t)v197, v159);
      long long v26 = *(_OWORD *)v197;
      long long v27 = *(_OWORD *)&v197[16];
      long long v28 = v199;
      *(_OWORD *)(v9 + 32) = v198;
      *(_OWORD *)(v9 + 48) = v28;
      *(_OWORD *)unint64_t v9 = v26;
      *(_OWORD *)(v9 + 16) = v27;
      re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v15, 1, v186);
      float32x4_t v31 = v186[1];
      *(float32x4_t *)uint64_t v165 = v186[0];
      *(float32x4_t *)(v165 + 16) = v31;
      if (*(unsigned char *)(ViewDescriptor + 192))
      {
        *(_DWORD *)uint64_t v197 = 0;
        *(_OWORD *)&v197[4] = xmmword_234390F00;
        *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
        v197[28] = 0;
        long long v198 = xmmword_23435FD80;
        LODWORD(v199) = 1;
        *((void *)&v199 + 1) = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)v197, v155);
        long long v32 = *(_OWORD *)&v197[16];
        *long long v157 = *(_OWORD *)v197;
        v157[1] = v32;
        long long v33 = v199;
        v157[2] = v198;
        v157[3] = v33;
        unsigned int v34 = 2;
        re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v25, 2, v185);
        float32x4_t v35 = v185[1];
        *long long v161 = v185[0];
        v161[1] = v35;
      }
      else
      {
        unsigned int v34 = 1;
      }
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v38 = *(void *)(ViewDescriptor + 304);
      uint64_t v39 = 32;
      uint64_t v40 = 80;
      uint64_t v167 = v34;
      uint64_t v15 = (uint64_t)v182;
      do
      {
        if (!v38) {
          goto LABEL_34;
        }
        unint64_t v41 = 0;
        uint64_t v42 = ViewDescriptor + 16 * v37;
        uint64_t v43 = (float *)(v42 + 204);
        unint64_t v44 = (float *)(v42 + 208);
        uint64_t v171 = v39;
        uint64_t v173 = v37;
        uint64_t v45 = (float *)(v9 + (v37 << 6));
        uint64_t v46 = v45 + 3;
        unint64_t v47 = v45 + 4;
        uint64_t v178 = v45 + 6;
        v180 = v45 + 5;
        uint64_t v169 = v40;
        uint64_t v175 = v36;
        do
        {
          uint64_t v48 = *(void *)(ViewDescriptor + 320);
          re::AssetHandle::AssetHandle((re::AssetHandle *)v197, (const re::AssetHandle *)(v48 + v39));
          float v50 = *v43;
          float v51 = *v44;
          if (*(void *)&v197[8])
          {
            uint64_t v52 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v197);
            if (*(_DWORD *)(v52 + 240)) {
LABEL_134:
            }
              std::__throw_bad_variant_access[abi:nn180100]();
            id v53 = *(id *)(v52 + 160);
            float v54 = (float)(unint64_t)objc_msgSend(v53, sel_width);
            float v55 = v54 / (float)(unint64_t)objc_msgSend(v53, sel_height);
            if (v53) {
          }
            }
          else
          {
            unsigned int v56 = *(_DWORD *)(v48 + v40);
            if (v56 == -1)
            {
              uint64_t v58 = v48 + v36;
              float v59 = *(void **)(v58 + 88);
              if (v59)
              {
                float v60 = (float)(unint64_t)objc_msgSend(v59, sel_width);
                id v61 = *(void **)(v58 + 88);
LABEL_28:
                float v55 = v60 / (float)(unint64_t)objc_msgSend(v61, sel_height);
                goto LABEL_30;
              }
              float v62 = *(void **)(v58 + 104);
              if (v62)
              {
                float v60 = (float)(unint64_t)objc_msgSend(v62, sel_width);
                id v61 = *(void **)(v58 + 104);
                goto LABEL_28;
              }
            }
            else
            {
              double v57 = *(re::DrawingManager **)(a2 + 104);
              if (v57)
              {
                float v55 = re::DrawingManager::layerAspect(v57, v56, v49);
                goto LABEL_30;
              }
            }
            float v55 = 1.0;
          }
LABEL_30:
          uint64_t v15 = (uint64_t)v182;
          if (*((unsigned char *)v182 + 32))
          {
            float v63 = (float)(*v46 + *v47) * 0.5;
            float v64 = (float)((float)(v50 / v51) * v55) * (float)((float)(*v180 - *v178) * 0.5);
            *unint64_t v47 = v63 + v64;
            *uint64_t v46 = v63 - v64;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v197);
          ++v41;
          unint64_t v38 = *(void *)(ViewDescriptor + 304);
          v36 += 136;
          v40 += 136;
          v39 += 136;
        }
        while (v38 > v41);
        unint64_t v9 = v166;
        uint64_t v37 = v173;
        uint64_t v36 = v175;
        uint64_t v40 = v169;
        uint64_t v39 = v171;
LABEL_34:
        ++v37;
        v36 += 8;
        v40 += 4;
        v39 += 24;
      }
      while (v37 != v167);
      __int16 v193 = 1;
      re::buildCullingFrustum(v165, (_DWORD *)v9, v167, &v193, (uint64_t)v197, v29, v30);
      v191.i64[0] = 0;
      v191.i32[2] = 0;
      re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v191, (uint64_t *)v197);
      long long v187 = xmmword_23435FD50;
      long long v188 = xmmword_23435FD60;
      long long v189 = xmmword_23435FD80;
      long long v190 = xmmword_23435FBB0;
      uint64_t isBoundingBoxInsidePlanesArray = re::isBoundingBoxInsidePlanesArray((uint64_t)v196, &v191, (float32x4_t *)&v187);
      char v66 = isBoundingBoxInsidePlanesArray;
      if (isBoundingBoxInsidePlanesArray)
      {
        if (v165) {
        if (v9)
        }
      }
      if (v191.i64[0])
      {
        float v68 = v192;
        int v69 = &v192[7 * v191.i64[0]];
        do
        {
          *(void *)float v68 = 0;
          ++*((_DWORD *)v68 + 2);
          v68 += 7;
        }
        while (v68 != v69);
      }
      if (v200)
      {
        uint64_t v70 = v201;
        float v71 = &v201[9 * v200];
        do
        {
          *(void *)uint64_t v70 = 0;
          ++*((_DWORD *)v70 + 2);
          v70 += 9;
        }
        while (v70 != v71);
      }
      if (*(void *)v197)
      {
        float v72 = &v197[16];
        float v73 = &v197[112 * *(void *)v197 + 16];
        do
        {
          *(void *)float v72 = 0;
          ++*((_DWORD *)v72 + 2);
          v72 += 112;
        }
        while (v72 != v73);
      }
      if (v66) {
        return 1;
      }
      float32x2_t v13 = v162;
      float32x4_t v23 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v163 + 1);
      if (*((void *)v162 + 27) <= (unint64_t)v163 + 1)
      {
LABEL_51:
        if (!*((void *)v13 + 32)) {
          goto LABEL_93;
        }
        uint64_t v74 = 0;
        uint64_t v160 = v15 + 256;
        uint64_t v156 = v15 + 320;
        long long v158 = (_OWORD *)(v9 + 64);
        while (1)
        {
          uint64_t v164 = v74;
          uint64_t v75 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v13, (re::ecs2::CameraViewDescriptorsComponent *)(v74 + 0x10000));
          *(_DWORD *)uint64_t v197 = 0;
          *(_OWORD *)&v197[4] = xmmword_234390F00;
          *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
          v197[28] = 0;
          long long v198 = xmmword_23435FD80;
          LODWORD(v199) = 1;
          *((void *)&v199 + 1) = 0;
          re::Projection::setFromMatrix4x4F((uint64_t)v197, v160);
          long long v76 = *(_OWORD *)v197;
          long long v77 = *(_OWORD *)&v197[16];
          long long v78 = v199;
          *(_OWORD *)(v9 + 32) = v198;
          *(_OWORD *)(v9 + 48) = v78;
          *(_OWORD *)unint64_t v9 = v76;
          *(_OWORD *)(v9 + 16) = v77;
          re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v15, 1, v184);
          float32x4_t v81 = v184[1];
          *(float32x4_t *)uint64_t v165 = v184[0];
          *(float32x4_t *)(v165 + 16) = v81;
          if (*(unsigned char *)(v75 + 192))
          {
            uint64_t v82 = v15;
            *(_DWORD *)uint64_t v197 = 0;
            *(_OWORD *)&v197[4] = xmmword_234390F00;
            *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
            v197[28] = 0;
            long long v198 = xmmword_23435FD80;
            LODWORD(v199) = 1;
            *((void *)&v199 + 1) = 0;
            re::Projection::setFromMatrix4x4F((uint64_t)v197, v156);
            long long v83 = *(_OWORD *)&v197[16];
            *long long v158 = *(_OWORD *)v197;
            v158[1] = v83;
            long long v84 = v199;
            v158[2] = v198;
            v158[3] = v84;
            unsigned int v85 = 2;
            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v82, 2, v183);
            float32x4_t v86 = v183[1];
            *long long v161 = v183[0];
            v161[1] = v86;
          }
          else
          {
            unsigned int v85 = 1;
          }
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          unint64_t v89 = *(void *)(v75 + 304);
          uint64_t v90 = 32;
          uint64_t v91 = 80;
          uint64_t v168 = v85;
          uint64_t v15 = (uint64_t)v182;
          do
          {
            if (!v89) {
              goto LABEL_76;
            }
            unint64_t v92 = 0;
            uint64_t v93 = v75 + 16 * v88;
            long long v94 = (float *)(v93 + 204);
            unsigned int v95 = (float *)(v93 + 208);
            uint64_t v172 = v90;
            uint64_t v174 = v88;
            float32x4_t v96 = (float *)(v9 + (v88 << 6));
            uint64_t v97 = v96 + 3;
            uint64_t v98 = v96 + 4;
            uint64_t v179 = v96 + 6;
            int v181 = v96 + 5;
            uint64_t v170 = v91;
            uint64_t v176 = v87;
            do
            {
              uint64_t v99 = *(void *)(v75 + 320);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v197, (const re::AssetHandle *)(v99 + v90));
              float v101 = *v94;
              float v102 = *v95;
              if (*(void *)&v197[8])
              {
                uint64_t v103 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v197);
                if (*(_DWORD *)(v103 + 240)) {
                  goto LABEL_134;
                }
                id v104 = *(id *)(v103 + 160);
                float v105 = (float)(unint64_t)objc_msgSend(v104, sel_width);
                float v106 = v105 / (float)(unint64_t)objc_msgSend(v104, sel_height);
                if (v104) {
              }
                }
              else
              {
                unsigned int v107 = *(_DWORD *)(v99 + v91);
                if (v107 == -1)
                {
                  uint64_t v109 = v99 + v87;
                  uint64_t v110 = *(void **)(v109 + 88);
                  if (v110)
                  {
                    float v111 = (float)(unint64_t)objc_msgSend(v110, sel_width);
                    double v112 = *(void **)(v109 + 88);
LABEL_70:
                    float v106 = v111 / (float)(unint64_t)objc_msgSend(v112, sel_height);
                    goto LABEL_72;
                  }
                  float v113 = *(void **)(v109 + 104);
                  if (v113)
                  {
                    float v111 = (float)(unint64_t)objc_msgSend(v113, sel_width);
                    double v112 = *(void **)(v109 + 104);
                    goto LABEL_70;
                  }
                }
                else
                {
                  uint64_t v108 = *(re::DrawingManager **)(a2 + 104);
                  if (v108)
                  {
                    float v106 = re::DrawingManager::layerAspect(v108, v107, v100);
                    goto LABEL_72;
                  }
                }
                float v106 = 1.0;
              }
LABEL_72:
              uint64_t v15 = (uint64_t)v182;
              if (*((unsigned char *)v182 + 32))
              {
                float v114 = (float)(*v97 + *v98) * 0.5;
                float v115 = (float)((float)(v101 / v102) * v106) * (float)((float)(*v181 - *v179) * 0.5);
                *uint64_t v98 = v114 + v115;
                *uint64_t v97 = v114 - v115;
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v197);
              ++v92;
              unint64_t v89 = *(void *)(v75 + 304);
              v87 += 136;
              v91 += 136;
              v90 += 136;
            }
            while (v89 > v92);
            unint64_t v9 = v166;
            uint64_t v88 = v174;
            uint64_t v87 = v176;
            uint64_t v91 = v170;
            uint64_t v90 = v172;
LABEL_76:
            ++v88;
            v87 += 8;
            v91 += 4;
            v90 += 24;
          }
          while (v88 != v168);
          __int16 v193 = 1;
          re::buildCullingFrustum(v165, (_DWORD *)v9, v168, &v193, (uint64_t)v197, v79, v80);
          v191.i64[0] = 0;
          v191.i32[2] = 0;
          re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v191, (uint64_t *)v197);
          long long v187 = xmmword_23435FD50;
          long long v188 = xmmword_23435FD60;
          long long v189 = xmmword_23435FD80;
          long long v190 = xmmword_23435FBB0;
          uint64_t v116 = re::isBoundingBoxInsidePlanesArray((uint64_t)v196, &v191, (float32x4_t *)&v187);
          char v117 = v116;
          if (v116)
          {
            if (v165) {
            if (v9)
            }
          }
          if (v191.i64[0])
          {
            unsigned int v119 = v192;
            unint64_t v120 = &v192[7 * v191.i64[0]];
            do
            {
              *(void *)unsigned int v119 = 0;
              ++*((_DWORD *)v119 + 2);
              v119 += 7;
            }
            while (v119 != v120);
          }
          if (v200)
          {
            uint64_t v121 = v201;
            long long v122 = &v201[9 * v200];
            do
            {
              *(void *)uint64_t v121 = 0;
              ++*((_DWORD *)v121 + 2);
              v121 += 9;
            }
            while (v121 != v122);
          }
          if (*(void *)v197)
          {
            float v123 = &v197[16];
            long long v124 = &v197[112 * *(void *)v197 + 16];
            do
            {
              *(void *)float v123 = 0;
              ++*((_DWORD *)v123 + 2);
              v123 += 112;
            }
            while (v123 != v124);
          }
          if (v117) {
            return 1;
          }
          float32x2_t v13 = v162;
          uint64_t v74 = v164 + 1;
          if (*((void *)v162 + 32) <= (unint64_t)(v164 + 1))
          {
LABEL_93:
            if (v165) {
            if (v9)
            }
            return 0;
          }
        }
      }
    }
  }
  uint64_t v127 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v162, 0);
  *(_DWORD *)uint64_t v197 = 0;
  *(_OWORD *)&v197[4] = xmmword_234390F00;
  *(void *)&v197[20] = 0xBDCCCCCD3DCCCCCDLL;
  v197[28] = 0;
  long long v198 = xmmword_23435FD80;
  LODWORD(v199) = 1;
  *((void *)&v199 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v197, (uint64_t)v182 + 256);
  long long v129 = *(_OWORD *)v197;
  long long v130 = *(_OWORD *)&v197[16];
  float32x4_t v131 = (float32x4_t)v198;
  long long v132 = v199;
  *(_OWORD *)(v9 + 32) = v198;
  *(_OWORD *)(v9 + 48) = v132;
  *(_OWORD *)unint64_t v9 = v129;
  *(_OWORD *)(v9 + 16) = v130;
  if (*(void *)(v127 + 304))
  {
    uint64_t v15 = (uint64_t)v182;
    float32x2_t v13 = v162;
    if (!*((void *)v162 + 27)) {
      goto LABEL_51;
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)v182 + 32))
  {
    long long v133 = *(re::DrawingManager **)(a2 + 104);
    if (v133) {
      float v134 = re::DrawingManager::layerAspect(v133, 0, *(double *)&v129);
    }
    else {
      float v134 = 1.0;
    }
    float v145 = (float)(*(float *)(v9 + 12) + *(float *)(v9 + 16)) * 0.5;
    v128.i32[0] = *(_DWORD *)(v9 + 24);
    float v146 = v134 * (float)((float)(*(float *)(v9 + 20) - v128.f32[0]) * 0.5);
    v131.f32[0] = v145 + v146;
    *(float *)(v9 + 12) = v145 - v146;
    *(float *)(v9 + 16) = v145 + v146;
  }
  __int16 v193 = 1;
  re::buildCullingFrustum(v165, (_DWORD *)v9, 1u, &v193, (uint64_t)v197, v131, v128);
  v191.i64[0] = 0;
  v191.i32[2] = 0;
  long long v147 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v191, (uint64_t *)v197);
  if (v165) {
  long long v187 = xmmword_23435FD50;
  }
  long long v188 = xmmword_23435FD60;
  long long v189 = xmmword_23435FD80;
  long long v190 = xmmword_23435FBB0;
  uint64_t result = re::isBoundingBoxInsidePlanesArray((uint64_t)v196, &v191, (float32x4_t *)&v187);
  if (v191.i64[0])
  {
    float v149 = v192;
    float v150 = &v192[7 * v191.i64[0]];
    do
    {
      *(void *)float v149 = 0;
      ++*((_DWORD *)v149 + 2);
      v149 += 7;
    }
    while (v149 != v150);
  }
  if (v200)
  {
    float v151 = v201;
    float v152 = &v201[9 * v200];
    do
    {
      *(void *)float v151 = 0;
      ++*((_DWORD *)v151 + 2);
      v151 += 9;
    }
    while (v151 != v152);
  }
  if (*(void *)v197)
  {
    float v153 = &v197[16];
    float v154 = &v197[112 * *(void *)v197 + 16];
    do
    {
      *(void *)float v153 = 0;
      ++*((_DWORD *)v153 + 2);
      v153 += 112;
    }
    while (v153 != v154);
  }
  return result;
}

uint64_t RECheckEntityInsideCustomMatrixCameraFrustumOneViewOneEyeWithScreenPosition(re::ecs2::TransformComponent **a1, re::ecs2::EntityComponentCollection *a2, uint64_t a3, int a4, int a5, float32x2_t a6, float a7, double a8, float32x2_t a9)
{
  double v100 = a8;
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, (const re::ecs2::Entity *)1, v117);
  a2 = (re::ecs2::EntityComponentCollection *)((char *)a2 + 32);
  uint64_t v14 = (re::ecs2::CameraViewDescriptorsComponent *)re::ecs2::EntityComponentCollection::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v15 = re::ecs2::EntityComponentCollection::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v16 = v15;
  float32x4_t v114 = 0uLL;
  uint64_t v115 = 0;
  uint64_t v116 = 0x3F80000000000000;
  *(_DWORD *)float v111 = 0;
  *(_OWORD *)&v111[4] = xmmword_234390F00;
  *(void *)&v111[20] = 0xBDCCCCCD3DCCCCCDLL;
  v111[28] = 0;
  long long v112 = xmmword_23435FD80;
  v113.i32[0] = 1;
  v113.i64[1] = 0;
  uint64_t v17 = *((void *)v14 + 27);
  if (!v17)
  {
    if (!*((void *)v14 + 32))
    {
      *(_DWORD *)&v111[4] = 1036831949;
      *(_DWORD *)&v111[12] = -1110651699;
      *(_DWORD *)&v111[20] = 1036831949;
      v111[28] = 0;
      v113.i32[0] = 1;
      *(float *)&double v18 = re::Projection::setFromMatrix4x4F((uint64_t)v111, v15 + 256);
      if (*(unsigned char *)(v16 + 32))
      {
        float32x4_t v19 = *(re::DrawingManager **)(a3 + 104);
        if (v19) {
          float v20 = re::DrawingManager::layerAspect(v19, 0, v18);
        }
        else {
          float v20 = 1.0;
        }
        float v21 = (float)(*(float *)&v111[12] + *(float *)&v111[16]) * 0.5;
        float v22 = v20 * (float)((float)(*(float *)&v111[20] - *(float *)&v111[24]) * 0.5);
        *(float *)&v111[16] = v21 + v22;
        *(float *)&v111[12] = v21 - v22;
      }
    }
    uint64_t v17 = *((void *)v14 + 27);
  }
  if (v17 == 1 && !*((void *)v14 + 32))
  {
    uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v14, 0);
    *(_DWORD *)unsigned int v119 = 0;
    *(_OWORD *)&v119[4] = xmmword_234390F00;
    *(void *)&v119[20] = 0xBDCCCCCD3DCCCCCDLL;
    v119[28] = 0;
    long long v120 = xmmword_23435FD80;
    v121.i32[0] = 1;
    v121.i64[1] = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v119, v16 + 256);
    *(_OWORD *)float v111 = *(_OWORD *)v119;
    *(_OWORD *)&v111[16] = *(_OWORD *)&v119[16];
    long long v112 = v120;
    float32x4_t v113 = v121;
    if (!*(void *)(ViewDescriptor + 304))
    {
      if (*(unsigned char *)(v16 + 32))
      {
        long long v24 = *(re::DrawingManager **)(a3 + 104);
        if (v24) {
          float v25 = re::DrawingManager::layerAspect(v24, 0, *(double *)&v120);
        }
        else {
          float v25 = 1.0;
        }
        float v26 = (float)(*(float *)&v111[12] + *(float *)&v111[16]) * 0.5;
        float v27 = v25 * (float)((float)(*(float *)&v111[20] - *(float *)&v111[24]) * 0.5);
        *(float *)&v111[16] = v26 + v27;
        *(float *)&v111[12] = v26 - v27;
      }
    }
  }
  uint64_t v28 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v14, (re::ecs2::CameraViewDescriptorsComponent *)a5);
  if (v28)
  {
    uint64_t v29 = v28;
    *(_DWORD *)unsigned int v119 = 0;
    *(_OWORD *)&v119[4] = xmmword_234390F00;
    *(void *)&v119[20] = 0xBDCCCCCD3DCCCCCDLL;
    v119[28] = 0;
    long long v120 = xmmword_23435FD80;
    v121.i32[0] = 1;
    v121.i64[1] = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v119, v16 + 256);
    *(_OWORD *)float v111 = *(_OWORD *)v119;
    *(_OWORD *)&v111[16] = *(_OWORD *)&v119[16];
    long long v112 = v120;
    float32x4_t v113 = v121;
    re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v16, 0, &v114);
    if (*(void *)(v29 + 304))
    {
      uint64_t v30 = 0;
      for (unint64_t i = 0; *(void *)(v29 + 304) > i; ++i)
      {
        uint64_t v32 = *(void *)(v29 + 320);
        long long v33 = re::AssetHandle::AssetHandle((re::AssetHandle *)v119, (const re::AssetHandle *)(v32 + v30 + 32));
        float v35 = *(float *)(v29 + 204);
        float v36 = *(float *)(v29 + 208);
        if (*(void *)&v119[8])
        {
          uint64_t v37 = re::AssetHandle::asset<re::TextureAsset>(v33);
          if (*(_DWORD *)(v37 + 240))
          {
LABEL_75:
            uint64_t v99 = std::__throw_bad_variant_access[abi:nn180100]();
            return RECustomMatrixCameraComponentSetAutoFitFullScreenAspect(v99);
          }
          id v38 = *(id *)(v37 + 160);
          float v39 = (float)(unint64_t)objc_msgSend(v38, sel_width);
          float v40 = v39 / (float)(unint64_t)objc_msgSend(v38, sel_height);
          if (v38) {
        }
          }
        else
        {
          unsigned int v41 = *(_DWORD *)(v32 + v30 + 80);
          if (v41 == -1)
          {
            uint64_t v43 = v32 + v30;
            unint64_t v44 = *(void **)(v43 + 88);
            if (v44)
            {
              float v45 = (float)(unint64_t)objc_msgSend(v44, sel_width);
              uint64_t v46 = *(void **)(v43 + 88);
            }
            else
            {
              unint64_t v47 = *(void **)(v43 + 104);
              if (!v47)
              {
LABEL_32:
                float v40 = 1.0;
                goto LABEL_33;
              }
              float v45 = (float)(unint64_t)objc_msgSend(v47, sel_width);
              uint64_t v46 = *(void **)(v43 + 104);
            }
            float v40 = v45 / (float)(unint64_t)objc_msgSend(v46, sel_height, *(void *)&v100);
          }
          else
          {
            uint64_t v42 = *(re::DrawingManager **)(a3 + 104);
            if (!v42) {
              goto LABEL_32;
            }
            float v40 = re::DrawingManager::layerAspect(v42, v41, v34);
          }
        }
LABEL_33:
        if (*(unsigned char *)(v16 + 32))
        {
          float v48 = (float)(*(float *)&v111[12] + *(float *)&v111[16]) * 0.5;
          float v49 = (float)((float)(v35 / v36) * v40) * (float)((float)(*(float *)&v111[20] - *(float *)&v111[24]) * 0.5);
          *(float *)&v111[16] = v48 + v49;
          *(float *)&v111[12] = v48 - v49;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v119);
        v30 += 136;
      }
    }
  }
  uint64_t v50 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v14, (re::ecs2::CameraViewDescriptorsComponent *)(a5 + 0x10000));
  *(_DWORD *)unsigned int v119 = 0;
  *(_OWORD *)&v119[4] = xmmword_234390F00;
  *(void *)&v119[20] = 0xBDCCCCCD3DCCCCCDLL;
  v119[28] = 0;
  long long v120 = xmmword_23435FD80;
  v121.i32[0] = 1;
  v121.i64[1] = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v119, v16 + 256);
  *(_OWORD *)float v111 = *(_OWORD *)v119;
  *(_OWORD *)&v111[16] = *(_OWORD *)&v119[16];
  long long v112 = v120;
  float32x4_t v113 = v121;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v16, 0, &v114);
  if (*(void *)(v50 + 304))
  {
    uint64_t v51 = 0;
    for (unint64_t j = 0; *(void *)(v50 + 304) > j; ++j)
    {
      uint64_t v53 = *(void *)(v50 + 320);
      float v54 = re::AssetHandle::AssetHandle((re::AssetHandle *)v119, (const re::AssetHandle *)(v53 + v51 + 32));
      float v56 = *(float *)(v50 + 204);
      float v57 = *(float *)(v50 + 208);
      if (*(void *)&v119[8])
      {
        uint64_t v58 = re::AssetHandle::asset<re::TextureAsset>(v54);
        if (*(_DWORD *)(v58 + 240)) {
          goto LABEL_75;
        }
        id v59 = *(id *)(v58 + 160);
        float v60 = (float)(unint64_t)objc_msgSend(v59, sel_width);
        float v61 = v60 / (float)(unint64_t)objc_msgSend(v59, sel_height);
        if (v59) {

        }
        goto LABEL_51;
      }
      unsigned int v62 = *(_DWORD *)(v53 + v51 + 80);
      if (v62 == -1)
      {
        uint64_t v64 = v53 + v51;
        unint64_t v65 = *(void **)(v64 + 88);
        if (v65)
        {
          float v66 = (float)(unint64_t)objc_msgSend(v65, sel_width);
          uint64_t v67 = *(void **)(v64 + 88);
        }
        else
        {
          float v68 = *(void **)(v64 + 104);
          if (!v68)
          {
LABEL_50:
            float v61 = 1.0;
            goto LABEL_51;
          }
          float v66 = (float)(unint64_t)objc_msgSend(v68, sel_width);
          uint64_t v67 = *(void **)(v64 + 104);
        }
        float v61 = v66 / (float)(unint64_t)objc_msgSend(v67, sel_height, *(void *)&v100);
      }
      else
      {
        float v63 = *(re::DrawingManager **)(a3 + 104);
        if (!v63) {
          goto LABEL_50;
        }
        float v61 = re::DrawingManager::layerAspect(v63, v62, v55);
      }
LABEL_51:
      if (*(unsigned char *)(v16 + 32))
      {
        float v69 = (float)(*(float *)&v111[12] + *(float *)&v111[16]) * 0.5;
        float v70 = (float)((float)(v56 / v57) * v61) * (float)((float)(*(float *)&v111[20] - *(float *)&v111[24]) * 0.5);
        *(float *)&v111[16] = v69 + v70;
        *(float *)&v111[12] = v69 - v70;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v119);
      v51 += 136;
    }
  }
  float32x2_t v71 = vdiv_f32(vsub_f32(a6, (float32x2_t)__PAIR64__(LODWORD(v100), LODWORD(a7))), a9);
  float32x2_t v72 = vdiv_f32(vadd_f32((float32x2_t)__PAIR64__(LODWORD(v100), LODWORD(a7)), a6), a9);
  float v101 = v72.f32[0];
  float32x2_t v73 = v71;
  float v74 = v72.f32[1];
  re::ecs2::MeshComponentHelper::computeEntityMeshBounds((uint64_t)a1, a4, v117, 1, (uint64_t)v110);
  uint64_t v75 = 0;
  float v76 = *(float *)v110;
  float v77 = *(float *)&v110[1];
  float v78 = *(float *)&v110[4];
  float v79 = *(float *)&v110[5];
  float v80 = *(float *)&v110[2];
  *(int32x2_t *)&long long v81 = vdup_n_s32(0x7F800000u);
  *(void *)&long long v82 = 0x7F0000007FLL;
  float v83 = *(float *)&v110[6];
  do
  {
    long long v106 = v82;
    long long v107 = v81;
    if ((v75 & 4) != 0) {
      float v84 = v83;
    }
    else {
      float v84 = v80;
    }
    float v105 = v84;
    re::Projection::computeMatrix4x4F((re::Projection *)v111, (uint64_t)v109);
    re::RenderCamera::computeInverseTransform(&v114, (uint64_t)v108);
    uint64_t v85 = 0;
    float32x4_t v86 = (float32x4_t)v109[0];
    float32x4_t v87 = (float32x4_t)v109[1];
    float32x4_t v88 = (float32x4_t)v109[2];
    float32x4_t v89 = (float32x4_t)v109[3];
    v118[0] = v108[0];
    v118[1] = v108[1];
    v118[2] = v108[2];
    v118[3] = v108[3];
    do
    {
      *(float32x4_t *)&v119[v85 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v86, COERCE_FLOAT(v118[v85])), v87, *(float32x2_t *)&v118[v85], 1), v88, (float32x4_t)v118[v85], 2), v89, (float32x4_t)v118[v85], 3);
      ++v85;
    }
    while (v85 != 4);
    if (v75) {
      float v90 = v78;
    }
    else {
      float v90 = v76;
    }
    if ((v75 & 2) != 0) {
      float v91 = v79;
    }
    else {
      float v91 = v77;
    }
    int32x4_t v92 = (int32x4_t)vaddq_f32(v121, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v119, v90), *(float32x4_t *)&v119[16], v91), (float32x4_t)v120, v105));
    *(float32x2_t *)v92.i8 = vdiv_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v92.i8), (float32x2_t)vdup_laneq_s32(v92, 3));
    *((void *)&v82 + 1) = *((void *)&v106 + 1);
    *((void *)&v81 + 1) = *((void *)&v107 + 1);
    *(int8x8_t *)&long long v81 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v107, *(float32x2_t *)v92.i8), *(int8x8_t *)v92.i8, *(int8x8_t *)&v107);
    *(int8x8_t *)&long long v82 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)&v106), *(int8x8_t *)v92.i8, *(int8x8_t *)&v106);
    ++v75;
  }
  while (v75 != 8);
  float v93 = *((float *)&v81 + 1) * 0.5 + 0.5;
  if (v101 >= v93)
  {
    float32_t v94 = *((float *)&v82 + 1) * 0.5 + 0.5;
    BOOL v95 = v73.f32[0] <= v94;
  }
  else
  {
    BOOL v95 = 0;
  }
  if (!v95) {
    return 0;
  }
  float32_t v98 = (float)-*(float *)&v81 * 0.5 + 0.5;
  if (v73.f32[1] > v98) {
    return 0;
  }
  float v97 = (float)-*(float *)&v82 * 0.5 + 0.5;
  return v74 >= v97;
}

uint64_t RECustomMatrixCameraComponentSetAutoFitFullScreenAspect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RECustomMatrixCameraComponentGetAutoFitFullScreenAspect(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t RECustomMatrixCameraComponentAdjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPerspectiveCameraComponentAdjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REOrthographicCameraComponentAdjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RENetSessionCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v4 = RESyncNetSessionConfigurationCreate();
    if (a2)
    {
      RESyncNetSessionConfigurationSetIsLeader();
      RENetSessionConfigurationSetAllowLeaderMigration(v4, *(unsigned __int8 *)(a2 + 9));
      if (*(void *)a2) {
        RESyncNetSessionConfigurationSetTransportQueue();
      }
      RESyncNetSessionConfigurationSetUserContext();
      RESyncNetSessionConfigurationSetAuthorityPolicy();
    }
    RESyncNetSessionConfigurationSetAllowTimeSync();
    RESyncNetSessionConfigurationSetDiscoveryView();
    uint64_t v2 = RESyncNetSessionCreate();
  }
  return v2;
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  return MEMORY[0x270EE20D8](inAudioFile);
}

OSStatus AudioFileInitializeWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  return MEMORY[0x270EE2110](inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, *(void *)&inFileType, inFormat, *(void *)&inFlags);
}

OSStatus AudioFileOpenWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x270EE2128](inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, *(void *)&inFileTypeHint, outAudioFile);
}

uint64_t BOMCopierCancelCopy()
{
  return MEMORY[0x270F126A8]();
}

uint64_t BOMCopierCopyWithOptions()
{
  return MEMORY[0x270F126B0]();
}

uint64_t BOMCopierFree()
{
  return MEMORY[0x270F126C0]();
}

uint64_t BOMCopierNew()
{
  return MEMORY[0x270F126C8]();
}

uint64_t BOMCopierSetCopyFileFinishedHandler()
{
  return MEMORY[0x270F126D8]();
}

uint64_t BOMCopierSetUserData()
{
  return MEMORY[0x270F12708]();
}

uint64_t BOMCopierUserData()
{
  return MEMORY[0x270F12710]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x270EFB788]();
  return result;
}

uint64_t CAMachPortGetPort()
{
  return MEMORY[0x270EFB868]();
}

uint64_t CAMachPortGetTypeID()
{
  return MEMORY[0x270EFB870]();
}

uint64_t CARenderContextGetAuditToken()
{
  return MEMORY[0x270EFB878]();
}

uint64_t CARenderContextGetProcessId()
{
  return MEMORY[0x270EFB880]();
}

uint64_t CARenderNotificationAddObserver()
{
  return MEMORY[0x270EFB888]();
}

uint64_t CARenderNotificationRemoveObserver()
{
  return MEMORY[0x270EFB890]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x270EE4298](allocator, context);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x270EE42A8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x270EE42F8](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x270EE43B0](alloc, str, attributes);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x270EE4400](aStr);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE4548](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x270EE45B8](allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x270EE45E8](bundle);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x270EE4788](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x270EE47B0](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x270EE4870](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x270EE4890](allocator, formatter, at);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x270EE49C8](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x270EE49D8](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x270EE4A18](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x270EE4A20](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x270EE4A48](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B98]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D40](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x270EE4E58]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x270EE4E68]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x270EE4F48](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x270EE4F60](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50A8](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE50F0](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x270EE5118](alloc, formatOptions, format, arguments);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5150](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x270EE51E0](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5348](anURL);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE5390](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A0](allocator, url);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5440](anURL);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorConversionInfoRef CGColorConversionInfoCreate(CGColorSpaceRef src, CGColorSpaceRef dst)
{
  return (CGColorConversionInfoRef)MEMORY[0x270EE5B38](src, dst);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x270EE5B60](a1, *(void *)&intent, color, options);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B90](space, pattern, components);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x270EE5BC0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x270EE5BD0](color);
}

CGColorRef CGColorGetConstantColor(CFStringRef colorName)
{
  return (CGColorRef)MEMORY[0x270EE5BD8](colorName);
}

CGPatternRef CGColorGetPattern(CGColorRef color)
{
  return (CGPatternRef)MEMORY[0x270EE5BE8](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x270EE5BF8]();
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5C20](color);
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  return (CFDataRef)MEMORY[0x270EE5C28](space);
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x270EE5C40](space);
}

CGColorSpaceRef CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace, size_t lastIndex, const unsigned __int8 *colorTable)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C80](baseSpace, lastIndex, colorTable);
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C90](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithICCData(CFTypeRef data)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C98](data);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CB8](plist);
}

uint64_t CGColorSpaceEqualToColorSpace()
{
  return MEMORY[0x270EE5CC0]();
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CD8](space);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x270EE5D10](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D18](space);
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  return MEMORY[0x270EE5D38](s);
}

BOOL CGColorSpaceIsPQBased(CGColorSpaceRef s)
{
  return MEMORY[0x270EE5D48](s);
}

BOOL CGColorSpaceIsWideGamutRGB(CGColorSpaceRef a1)
{
  return MEMORY[0x270EE5D58](a1);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5D68](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D78](space);
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x270EE5DA0]();
}

uint64_t CGColorTransformCreate()
{
  return MEMORY[0x270EE5DB0]();
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginTransparencyLayerWithRect(CGContextRef c, CGRect rect, CFDictionaryRef auxInfo)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawConicGradient(CGContextRef c, CGGradientRef gradient, CGPoint center, CGFloat angle)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
}

void CGContextEOClip(CGContextRef c)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

uint64_t CGContextGetBaseCTM()
{
  return MEMORY[0x270EE5FB0]();
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x270EE5FC0](retstr, c);
}

uint64_t CGContextGetGState()
{
  return MEMORY[0x270EE5FE0]();
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x270EE60D8]();
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

uint64_t CGContextSetCompositeOperation()
{
  return MEMORY[0x270EE60F0]();
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

uint64_t CGContextSetLineWidthThreshold()
{
  return MEMORY[0x270EE6180]();
}

void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
{
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
}

uint64_t CGContextSetSoftMask()
{
  return MEMORY[0x270EE61F0]();
}

uint64_t CGContextSetStrokeAdjust()
{
  return MEMORY[0x270EE61F8]();
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

uint64_t CGContextSetStyle()
{
  return MEMORY[0x270EE6220]();
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

uint64_t CGDashGetPattern()
{
  return MEMORY[0x270EE6288]();
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x270EE62B8](provider);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t CGFontGetQuantizationLevelWithStyle()
{
  return MEMORY[0x270EE64A0]();
}

uint64_t CGGStateGetAlpha()
{
  return MEMORY[0x270EE6570]();
}

uint64_t CGGStateGetCTM()
{
  return MEMORY[0x270EE6578]();
}

uint64_t CGGStateGetCompositeOperation()
{
  return MEMORY[0x270EE6588]();
}

uint64_t CGGStateGetFillColor()
{
  return MEMORY[0x270EE6590]();
}

uint64_t CGGStateGetFlatness()
{
  return MEMORY[0x270EE6598]();
}

uint64_t CGGStateGetLineCap()
{
  return MEMORY[0x270EE65C8]();
}

uint64_t CGGStateGetLineDash()
{
  return MEMORY[0x270EE65D0]();
}

uint64_t CGGStateGetLineJoin()
{
  return MEMORY[0x270EE65D8]();
}

uint64_t CGGStateGetLineWidth()
{
  return MEMORY[0x270EE65E0]();
}

uint64_t CGGStateGetLineWidthThreshold()
{
  return MEMORY[0x270EE65E8]();
}

uint64_t CGGStateGetMiterLimit()
{
  return MEMORY[0x270EE65F0]();
}

uint64_t CGGStateGetPatternPhase()
{
  return MEMORY[0x270EE65F8]();
}

uint64_t CGGStateGetShouldAntialias()
{
  return MEMORY[0x270EE6600]();
}

uint64_t CGGStateGetShouldDrawBitmapRuns()
{
  return MEMORY[0x270EE6608]();
}

uint64_t CGGStateGetStrokeAdjust()
{
  return MEMORY[0x270EE6618]();
}

uint64_t CGGStateGetStrokeColor()
{
  return MEMORY[0x270EE6620]();
}

uint64_t CGGStateGetStyle()
{
  return MEMORY[0x270EE6628]();
}

uint64_t CGGradientCreateWithColorComponentsAndOptions()
{
  return MEMORY[0x270EE6688]();
}

void CGGradientRelease(CGGradientRef gradient)
{
}

uint64_t CGImageBlockGetBytesPerRow()
{
  return MEMORY[0x270EE66D0]();
}

uint64_t CGImageBlockGetData()
{
  return MEMORY[0x270EE66D8]();
}

uint64_t CGImageBlockGetRect()
{
  return MEMORY[0x270EE66E0]();
}

uint64_t CGImageBlockSetGetColorSpace()
{
  return MEMORY[0x270EE6700]();
}

uint64_t CGImageBlockSetGetComponentType()
{
  return MEMORY[0x270EE6708]();
}

uint64_t CGImageBlockSetGetCount()
{
  return MEMORY[0x270EE6710]();
}

uint64_t CGImageBlockSetGetImageBlock()
{
  return MEMORY[0x270EE6718]();
}

uint64_t CGImageBlockSetGetPixelSize()
{
  return MEMORY[0x270EE6720]();
}

uint64_t CGImageBlockSetGetSize()
{
  return MEMORY[0x270EE6728]();
}

uint64_t CGImageBlockSetRelease()
{
  return MEMORY[0x270EE6730]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6738](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

uint64_t CGImageCreateByScaling()
{
  return MEMORY[0x270EF4EC0]();
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  return (CGImageRef)MEMORY[0x270EE6748](image, space);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x270EE6750](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithMask(CGImageRef image, CGImageRef mask)
{
  return (CGImageRef)MEMORY[0x270EE6768](image, mask);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x270EE6778](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x270EE6780](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x270EE67A0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x270EE67C0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x270EE67E8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x270EE6810]();
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x270EE6838]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate)
{
  return (CGImageRef)MEMORY[0x270EE6888](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, provider, decode, shouldInterpolate);
}

uint64_t CGImageNotificationCenter()
{
  return MEMORY[0x270EE6890]();
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions()
{
  return MEMORY[0x270EE68A0]();
}

uint64_t CGImageProviderGetBitmapInfo()
{
  return MEMORY[0x270EE68B8]();
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x270EE6908](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x270EE6910]();
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x270EF5068](isrc);
}

uint64_t CGNotificationCenterAddCallback()
{
  return MEMORY[0x270EE6978]();
}

uint64_t CGNotificationCenterRemoveCallback()
{
  return MEMORY[0x270EE6980]();
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7008](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

uint64_t CGPathCreateWithData()
{
  return MEMORY[0x270EE7048]();
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7050](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7058](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7060](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7070](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x270EE70C8](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x270EE7110](info, matrix, *(void *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

uint64_t CGPatternCreateWithImage2()
{
  return MEMORY[0x270EE7118]();
}

void CGPatternRelease(CGPatternRef pattern)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7250]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x270EE7268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x270EE7270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t CGRenderingStateGetBaseCTM()
{
  return MEMORY[0x270EE72D8]();
}

uint64_t CGSVGAttributeGetAtom()
{
  return MEMORY[0x270F233A0]();
}

uint64_t CGSVGAttributeGetPaint()
{
  return MEMORY[0x270F233B0]();
}

uint64_t CGSVGColorCreateCGColor()
{
  return MEMORY[0x270F233F8]();
}

uint64_t CGSVGDocumentGetCanvasSize()
{
  return MEMORY[0x270F23430]();
}

uint64_t CGSVGDocumentGetRootNode()
{
  return MEMORY[0x270F23448]();
}

uint64_t CGSVGNodeEnumerate()
{
  return MEMORY[0x270F23488]();
}

uint64_t CGSVGNodeFindAttribute()
{
  return MEMORY[0x270F23498]();
}

uint64_t CGSVGNodeGetType()
{
  return MEMORY[0x270F234E8]();
}

uint64_t CGSVGPaintGetColor()
{
  return MEMORY[0x270F23510]();
}

uint64_t CGSVGPaintGetType()
{
  return MEMORY[0x270F23518]();
}

uint64_t CGSVGPathCreateCGPath()
{
  return MEMORY[0x270F23520]();
}

uint64_t CGSVGShapeNodeGetEllipseGeometry()
{
  return MEMORY[0x270F23540]();
}

uint64_t CGSVGShapeNodeGetFloatCount()
{
  return MEMORY[0x270F23550]();
}

uint64_t CGSVGShapeNodeGetFloats()
{
  return MEMORY[0x270F23558]();
}

uint64_t CGSVGShapeNodeGetPath()
{
  return MEMORY[0x270F23570]();
}

uint64_t CGSVGShapeNodeGetPrimitive()
{
  return MEMORY[0x270F23580]();
}

uint64_t CGSVGShapeNodeGetRectGeometry()
{
  return MEMORY[0x270F23590]();
}

uint64_t CGSoftMaskCreate()
{
  return MEMORY[0x270EE7358]();
}

uint64_t CGSoftMaskRelease()
{
  return MEMORY[0x270EE7390]();
}

uint64_t CGStyleCreateFocusRing()
{
  return MEMORY[0x270EE7398]();
}

uint64_t CGStyleCreateFocusRingWithColor()
{
  return MEMORY[0x270EE73A0]();
}

uint64_t CGStyleCreateShadow()
{
  return MEMORY[0x270EE73A8]();
}

uint64_t CGStyleCreateShadowWithColor()
{
  return MEMORY[0x270EE73B0]();
}

uint64_t CGStyleGetColor()
{
  return MEMORY[0x270EE73B8]();
}

uint64_t CGStyleGetData()
{
  return MEMORY[0x270EE73C0]();
}

uint64_t CGStyleGetType()
{
  return MEMORY[0x270EE73D8]();
}

uint64_t CGStyleRelease()
{
  return MEMORY[0x270EE73E0]();
}

OSStatus CMAudioClockCreate(CFAllocatorRef allocator, CMClockRef *clockOut)
{
  return MEMORY[0x270EE7978](allocator, clockOut);
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x270EE79D0]();
}

OSStatus CMBlockBufferCreateContiguous(CFAllocatorRef structureAllocator, CMBlockBufferRef sourceBuffer, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x270EE79F8](structureAllocator, sourceBuffer, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x270EE7A08](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x270EE7A20](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x270EE7A30](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x270EE7A40](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

uint64_t CMClockConvertHostTimeToSystemUnits(CMTime *hostTime)
{
  return MEMORY[0x270EE7A98](hostTime);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x270EE7AA0]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x270EE7AA8](retstr, clock);
}

CFTypeID CMClockGetTypeID(void)
{
  return MEMORY[0x270EE7AB0]();
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x270EE7AB8](retstr, hostTime);
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x270EE7B80]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x270EE7B88]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x270EE7BA0]();
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x270EE7BD0](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x270EE7C18](sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x270EE7C30](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x270EE7C58](sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x270EE7C88](sbuf, createIfNecessary);
}

size_t CMSampleBufferGetSampleSize(CMSampleBufferRef sbuf, CMItemIndex sampleIndex)
{
  return MEMORY[0x270EE7C90](sbuf, sampleIndex);
}

size_t CMSampleBufferGetTotalSampleSize(CMSampleBufferRef sbuf)
{
  return MEMORY[0x270EE7CB0](sbuf);
}

OSStatus CMSimpleQueueCreate(CFAllocatorRef allocator, int32_t capacity, CMSimpleQueueRef *queueOut)
{
  return MEMORY[0x270EE7CF8](allocator, *(void *)&capacity, queueOut);
}

const void *__cdecl CMSimpleQueueDequeue(CMSimpleQueueRef queue)
{
  return (const void *)MEMORY[0x270EE7D08](queue);
}

OSStatus CMSimpleQueueEnqueue(CMSimpleQueueRef queue, const void *element)
{
  return MEMORY[0x270EE7D18](queue, element);
}

CMTime *__cdecl CMSyncConvertTime(CMTime *__return_ptr retstr, CMTime *time, CMClockOrTimebaseRef fromClockOrTimebase, CMClockOrTimebaseRef toClockOrTimebase)
{
  return (CMTime *)MEMORY[0x270EE7D40](retstr, time, fromClockOrTimebase, toClockOrTimebase);
}

Float64 CMSyncGetRelativeRate(CMClockOrTimebaseRef ofClockOrTimebase, CMClockOrTimebaseRef relativeToClockOrTimebase)
{
  MEMORY[0x270EE7D48](ofClockOrTimebase, relativeToClockOrTimebase);
  return result;
}

OSStatus CMSyncGetRelativeRateAndAnchorTime(CMClockOrTimebaseRef ofClockOrTimebase, CMClockOrTimebaseRef relativeToClockOrTimebase, Float64 *outRelativeRate, CMTime *outOfClockOrTimebaseAnchorTime, CMTime *outRelativeToClockOrTimebaseAnchorTime)
{
  return MEMORY[0x270EE7D50](ofClockOrTimebase, relativeToClockOrTimebase, outRelativeRate, outOfClockOrTimebaseAnchorTime, outRelativeToClockOrTimebaseAnchorTime);
}

CMTime *__cdecl CMSyncGetTime(CMTime *__return_ptr retstr, CMClockOrTimebaseRef clockOrTimebase)
{
  return (CMTime *)MEMORY[0x270EE7D58](retstr, clockOrTimebase);
}

Boolean CMSyncMightDrift(CMClockOrTimebaseRef clockOrTimebase1, CMClockOrTimebaseRef clockOrTimebase2)
{
  return MEMORY[0x270EE7D60](clockOrTimebase1, clockOrTimebase2);
}

CMTime *__cdecl CMTimeAbsoluteValue(CMTime *__return_ptr retstr, CMTime *time)
{
  return (CMTime *)MEMORY[0x270EE7D90](retstr, time);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7D98](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x270EE7DD0](time1, time2);
}

CFStringRef CMTimeCopyDescription(CFAllocatorRef allocator, CMTime *time)
{
  return (CFStringRef)MEMORY[0x270EE7DF0](allocator, time);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x270EE7E08](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x270EE7E10](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x270EE7E20](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x270EE7E38](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiplyByFloat64(CMTime *__return_ptr retstr, CMTime *time, Float64 multiplier)
{
  return (CMTime *)MEMORY[0x270EE7E68](retstr, time, multiplier);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7F08](retstr, lhs, rhs);
}

OSStatus CMTimebaseAddTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return MEMORY[0x270EE7F18](timebase, timerSource);
}

CMClockOrTimebaseRef CMTimebaseCopySource(CMTimebaseRef timebase)
{
  return (CMClockOrTimebaseRef)MEMORY[0x270EE7F20](timebase);
}

uint64_t CMTimebaseCreateReadOnlyTimebase()
{
  return MEMORY[0x270EE7F28]();
}

OSStatus CMTimebaseCreateWithSourceClock(CFAllocatorRef allocator, CMClockRef sourceClock, CMTimebaseRef *timebaseOut)
{
  return MEMORY[0x270EE7F30](allocator, sourceClock, timebaseOut);
}

OSStatus CMTimebaseCreateWithSourceTimebase(CFAllocatorRef allocator, CMTimebaseRef sourceTimebase, CMTimebaseRef *timebaseOut)
{
  return MEMORY[0x270EE7F38](allocator, sourceTimebase, timebaseOut);
}

Float64 CMTimebaseGetEffectiveRate(CMTimebaseRef timebase)
{
  MEMORY[0x270EE7F40](timebase);
  return result;
}

Float64 CMTimebaseGetRate(CMTimebaseRef timebase)
{
  MEMORY[0x270EE7F48](timebase);
  return result;
}

CMTime *__cdecl CMTimebaseGetTime(CMTime *__return_ptr retstr, CMTimebaseRef timebase)
{
  return (CMTime *)MEMORY[0x270EE7F50](retstr, timebase);
}

CFTypeID CMTimebaseGetTypeID(void)
{
  return MEMORY[0x270EE7F60]();
}

OSStatus CMTimebaseRemoveTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return MEMORY[0x270EE7F68](timebase, timerSource);
}

OSStatus CMTimebaseSetRate(CMTimebaseRef timebase, Float64 rate)
{
  return MEMORY[0x270EE7F70](timebase, rate);
}

OSStatus CMTimebaseSetRateAndAnchorTime(CMTimebaseRef timebase, Float64 rate, CMTime *timebaseTime, CMTime *immediateSourceTime)
{
  return MEMORY[0x270EE7F78](timebase, timebaseTime, immediateSourceTime, rate);
}

OSStatus CMTimebaseSetSourceClock(CMTimebaseRef timebase, CMClockRef newSourceClock)
{
  return MEMORY[0x270EE7F80](timebase, newSourceClock);
}

OSStatus CMTimebaseSetSourceTimebase(CMTimebaseRef timebase, CMTimebaseRef newSourceTimebase)
{
  return MEMORY[0x270EE7F88](timebase, newSourceTimebase);
}

OSStatus CMTimebaseSetTime(CMTimebaseRef timebase, CMTime *time)
{
  return MEMORY[0x270EE7F90](timebase, time);
}

OSStatus CMTimebaseSetTimerDispatchSourceNextFireTime(CMTimebaseRef timebase, dispatch_source_t timerSource, CMTime *fireTime, uint32_t flags)
{
  return MEMORY[0x270EE7F98](timebase, timerSource, fireTime, *(void *)&flags);
}

OSStatus CMVideoFormatDescriptionCreateFromHEVCParameterSets(CFAllocatorRef allocator, size_t parameterSetCount, const uint8_t *const *parameterSetPointers, const size_t *parameterSetSizes, int NALUnitHeaderLength, CFDictionaryRef extensions, CMFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x270EE7FC8](allocator, parameterSetCount, parameterSetPointers, parameterSetSizes, *(void *)&NALUnitHeaderLength, extensions, formatDescriptionOut);
}

OSStatus CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(CMFormatDescriptionRef videoDesc, size_t parameterSetIndex, const uint8_t **parameterSetPointerOut, size_t *parameterSetSizeOut, size_t *parameterSetCountOut, int *NALUnitHeaderLengthOut)
{
  return MEMORY[0x270EE7FE8](videoDesc, parameterSetIndex, parameterSetPointerOut, parameterSetSizeOut, parameterSetCountOut, NALUnitHeaderLengthOut);
}

CFStringRef CTFontCopyFullName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x270EE9A48](font);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x270EE9AD0](font, glyph, matrix);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  MEMORY[0x270EE9BE8](font);
  return result;
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  MEMORY[0x270EE9C00](font);
  return result;
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  MEMORY[0x270EE9C10](font);
  return result;
}

CGFloat CTFontGetXHeight(CTFontRef font)
{
  MEMORY[0x270EE9CA0](font);
  return result;
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x270EE9D18](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x270EE9D38](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x270EE9D40](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  MEMORY[0x270EE9D48](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x270EE9DB0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x270EE9DC0](line);
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return (CTParagraphStyleRef)MEMORY[0x270EE9E18](settings, settingCount);
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x270EE9E50](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x270EE9E68](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x270EE9FC0](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x270EE9FC8](buffer, *(void *)&attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  return (CGColorSpaceRef)MEMORY[0x270EEA0A0](attachments);
}

CGRect CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer)
{
  MEMORY[0x270EEA0A8](imageBuffer);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGSize CVImageBufferGetDisplaySize(CVImageBufferRef imageBuffer)
{
  MEMORY[0x270EEA0B8](imageBuffer);
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t CVImageBufferSetCleanAperture()
{
  return MEMORY[0x270EEA0C8]();
}

uint64_t CVImageBufferSetDisplayDimensions()
{
  return MEMORY[0x270EEA0D0]();
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x270EEA0E0](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x270EEA0F0](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x270EEA110](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA168](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1D0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA258](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x270EEA278](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA288](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolFlush(CVPixelBufferPoolRef pool, CVPixelBufferPoolFlushFlags options)
{
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  return (CFDictionaryRef)MEMORY[0x270EEA340](allocator, *(void *)&pixelFormat);
}

ColorSyncProfileRef ColorSyncProfileCreate(CFDataRef data, CFErrorRef *error)
{
  return (ColorSyncProfileRef)MEMORY[0x270EE37E8](data, error);
}

CFTypeRef ColorSyncTransformCopyProperty(ColorSyncTransformRef transform, CFTypeRef key, CFDictionaryRef options)
{
  return (CFTypeRef)MEMORY[0x270EE3810](transform, key, options);
}

ColorSyncTransformRef ColorSyncTransformCreate(CFArrayRef profileSequence, CFDictionaryRef options)
{
  return (ColorSyncTransformRef)MEMORY[0x270EE3818](profileSequence, options);
}

uint64_t CoreIKACPFilteringSolve()
{
  return MEMORY[0x270F1A3D0]();
}

uint64_t CoreIKACPFilteringSolverSetSmoothness()
{
  return MEMORY[0x270F1A3D8]();
}

uint64_t CoreIKACPPenetrationConstraintSetPlaneDefinition()
{
  return MEMORY[0x270F1A3E0]();
}

uint64_t CoreIKACPPenetrationSolve()
{
  return MEMORY[0x270F1A3E8]();
}

uint64_t CoreIKACPPenetrationSolverConstraintCount()
{
  return MEMORY[0x270F1A3F0]();
}

uint64_t CoreIKACPPenetrationSolverGetConstraintByIndex()
{
  return MEMORY[0x270F1A3F8]();
}

uint64_t CoreIKACPPenetrationSolverGetConstraintTargetName()
{
  return MEMORY[0x270F1A400]();
}

uint64_t CoreIKACPPenetrationSolverGetTargetRestPose()
{
  return MEMORY[0x270F1A408]();
}

uint64_t CoreIKACPSlidingSolve()
{
  return MEMORY[0x270F1A410]();
}

uint64_t CoreIKAutoMatchingGenerateHierarchyToRigMapping()
{
  return MEMORY[0x270F1A418]();
}

uint64_t CoreIKAutoMatchingGenerateRetargetRig()
{
  return MEMORY[0x270F1A420]();
}

uint64_t CoreIKConstraintCountFromRig()
{
  return MEMORY[0x270F1A428]();
}

uint64_t CoreIKCreateACPFilteringSolverFromRig()
{
  return MEMORY[0x270F1A440]();
}

uint64_t CoreIKCreateACPPenetrationSolverFromRig()
{
  return MEMORY[0x270F1A448]();
}

uint64_t CoreIKCreateACPSlidingSolverFromRig()
{
  return MEMORY[0x270F1A450]();
}

uint64_t CoreIKCreateRigFromJSONBuffer()
{
  return MEMORY[0x270F1A468]();
}

uint64_t CoreIKCreateSolverFromRig()
{
  return MEMORY[0x270F1A470]();
}

uint64_t CoreIKDestroyACPFilteringSolver()
{
  return MEMORY[0x270F1A478]();
}

uint64_t CoreIKDestroyACPPenetrationSolver()
{
  return MEMORY[0x270F1A480]();
}

uint64_t CoreIKDestroyACPSlidingSolver()
{
  return MEMORY[0x270F1A488]();
}

uint64_t CoreIKDestroyRig()
{
  return MEMORY[0x270F1A490]();
}

uint64_t CoreIKDestroySolver()
{
  return MEMORY[0x270F1A498]();
}

uint64_t CoreIKDoubleExponentialPositionFilterCreate()
{
  return MEMORY[0x270F1A4A0]();
}

uint64_t CoreIKDoubleExponentialPositionFilterDestroy()
{
  return MEMORY[0x270F1A4A8]();
}

uint64_t CoreIKDoubleExponentialPositionFilterDoFilter()
{
  return MEMORY[0x270F1A4B0]();
}

uint64_t CoreIKDoubleExponentialTransformFilterCreate()
{
  return MEMORY[0x270F1A4B8]();
}

uint64_t CoreIKDoubleExponentialTransformFilterDestroy()
{
  return MEMORY[0x270F1A4C0]();
}

uint64_t CoreIKDoubleExponentialTransformFilterDoFilter()
{
  return MEMORY[0x270F1A4C8]();
}

uint64_t CoreIKFootPlacementConstraintIsRayTracing()
{
  return MEMORY[0x270F1A4D0]();
}

uint64_t CoreIKFootPlacementConstraintSetBlendWeight()
{
  return MEMORY[0x270F1A4D8]();
}

uint64_t CoreIKFootPlacementConstraintSetRayTraceParameters()
{
  return MEMORY[0x270F1A4E0]();
}

uint64_t CoreIKFootPlacementSolverCreate()
{
  return MEMORY[0x270F1A4E8]();
}

uint64_t CoreIKFootPlacementSolverDestroy()
{
  return MEMORY[0x270F1A4F0]();
}

uint64_t CoreIKFootPlacementSolverGetConstraint()
{
  return MEMORY[0x270F1A4F8]();
}

uint64_t CoreIKFootPlacementSolverGetConstraintCount()
{
  return MEMORY[0x270F1A500]();
}

uint64_t CoreIKFootPlacementSolverGetGenericSolver()
{
  return MEMORY[0x270F1A508]();
}

uint64_t CoreIKFootPlacementSolverSetBodyControllerParameters()
{
  return MEMORY[0x270F1A510]();
}

uint64_t CoreIKGenericConstraintGetBase()
{
  return MEMORY[0x270F1A518]();
}

uint64_t CoreIKGenericConstraintGetUseLocalSpaceLookAtAxis()
{
  return MEMORY[0x270F1A540]();
}

uint64_t CoreIKGenericConstraintHasLookAtEnabled()
{
  return MEMORY[0x270F1A548]();
}

uint64_t CoreIKGenericConstraintSetLookAtAxis()
{
  return MEMORY[0x270F1A550]();
}

uint64_t CoreIKGenericConstraintSetLookAtParameters()
{
  return MEMORY[0x270F1A558]();
}

uint64_t CoreIKGenericConstraintSetLookAtTarget()
{
  return MEMORY[0x270F1A560]();
}

uint64_t CoreIKGenericConstraintSetOrientationTargetBlendWeight()
{
  return MEMORY[0x270F1A568]();
}

uint64_t CoreIKGenericConstraintSetTargetOrientation()
{
  return MEMORY[0x270F1A570]();
}

uint64_t CoreIKGenericConstraintSetTargetParameters()
{
  return MEMORY[0x270F1A578]();
}

uint64_t CoreIKGenericConstraintSetTargetTranslation()
{
  return MEMORY[0x270F1A580]();
}

uint64_t CoreIKGenericConstraintSetTranslationTargetBlendWeight()
{
  return MEMORY[0x270F1A588]();
}

uint64_t CoreIKGenericSolverCreate()
{
  return MEMORY[0x270F1A5A0]();
}

uint64_t CoreIKGenericSolverDestroy()
{
  return MEMORY[0x270F1A5A8]();
}

uint64_t CoreIKGenericSolverGetConstraint()
{
  return MEMORY[0x270F1A5B0]();
}

uint64_t CoreIKGenericSolverGetConstraintCount()
{
  return MEMORY[0x270F1A5B8]();
}

uint64_t CoreIKGenericSolverGetConstraintIndex()
{
  return MEMORY[0x270F1A5C0]();
}

uint64_t CoreIKGenericSolverGetConstraintTargetName()
{
  return MEMORY[0x270F1A5C8]();
}

uint64_t CoreIKGenericSolverGetJoint()
{
  return MEMORY[0x270F1A5D0]();
}

uint64_t CoreIKGenericSolverGetJointCount()
{
  return MEMORY[0x270F1A5D8]();
}

uint64_t CoreIKGenericSolverGetMaxIterations()
{
  return MEMORY[0x270F1A5E0]();
}

uint64_t CoreIKGenericSolverGetPGain()
{
  return MEMORY[0x270F1A5E8]();
}

uint64_t CoreIKGenericSolverGetTargetRestPose()
{
  return MEMORY[0x270F1A5F8]();
}

uint64_t CoreIKGenericSolverReset()
{
  return MEMORY[0x270F1A600]();
}

uint64_t CoreIKGenericSolverSetMaxIterations()
{
  return MEMORY[0x270F1A628]();
}

uint64_t CoreIKGenericSolverSetRestPose()
{
  return MEMORY[0x270F1A638]();
}

uint64_t CoreIKGenericSolverSetWorldToSolverTransform()
{
  return MEMORY[0x270F1A648]();
}

uint64_t CoreIKGenericSolverSolve()
{
  return MEMORY[0x270F1A650]();
}

uint64_t CoreIKGetConstraintOrientationEnabled()
{
  return MEMORY[0x270F1A658]();
}

uint64_t CoreIKGetConstraintOrientationWeight()
{
  return MEMORY[0x270F1A660]();
}

uint64_t CoreIKGetConstraintPositionEnabled()
{
  return MEMORY[0x270F1A668]();
}

uint64_t CoreIKGetConstraintPositionWeight()
{
  return MEMORY[0x270F1A670]();
}

uint64_t CoreIKJointGetName()
{
  return MEMORY[0x270F1A680]();
}

uint64_t CoreIKJointSetRetargetingGain()
{
  return MEMORY[0x270F1A6A0]();
}

uint64_t CoreIKJointSetRetargetingGainDOF()
{
  return MEMORY[0x270F1A6A8]();
}

uint64_t CoreIKJointSetRotationStiffness()
{
  return MEMORY[0x270F1A6B0]();
}

uint64_t CoreIKSetConstraintOrientationWeight()
{
  return MEMORY[0x270F1A710]();
}

uint64_t CoreIKSetConstraintPositionWeight()
{
  return MEMORY[0x270F1A718]();
}

uint64_t CoreIKSolve()
{
  return MEMORY[0x270F1A720]();
}

uint64_t CoreIKSolverGetConstraintCount()
{
  return MEMORY[0x270F1A730]();
}

uint64_t CoreIKSourceJointCountFromRig()
{
  return MEMORY[0x270F1A748]();
}

uint64_t CoreIKSourceJointNameFromRig()
{
  return MEMORY[0x270F1A750]();
}

uint64_t CoreIKTargetJointCountFromRig()
{
  return MEMORY[0x270F1A758]();
}

uint64_t CoreIKTargetJointNameFromRig()
{
  return MEMORY[0x270F1A760]();
}

uint64_t DRBufferAsResource()
{
  return MEMORY[0x270F26128]();
}

uint64_t DRBufferDescriptorCreate()
{
  return MEMORY[0x270F26138]();
}

uint64_t DRBufferDescriptorSetCapacity()
{
  return MEMORY[0x270F26140]();
}

uint64_t DRBufferDescriptorSetSizeMultiple()
{
  return MEMORY[0x270F26148]();
}

uint64_t DRBufferGetBytesUsed()
{
  return MEMORY[0x270F26150]();
}

uint64_t DRBufferRead()
{
  return MEMORY[0x270F26158]();
}

uint64_t DRBufferReplace()
{
  return MEMORY[0x270F26168]();
}

uint64_t DRContextConfigCreate()
{
  return MEMORY[0x270F26190]();
}

uint64_t DRContextConfigGetMode()
{
  return MEMORY[0x270F26198]();
}

uint64_t DRContextConfigSetDevice()
{
  return MEMORY[0x270F261A0]();
}

uint64_t DRContextConfigSetDispatchQueue()
{
  return MEMORY[0x270F261A8]();
}

uint64_t DRContextConfigSetMode()
{
  return MEMORY[0x270F261B0]();
}

uint64_t DRContextConfigSetReuseStrategy()
{
  return MEMORY[0x270F261B8]();
}

uint64_t DRContextCreate()
{
  return MEMORY[0x270F261C0]();
}

uint64_t DRContextCreateBuffer()
{
  return MEMORY[0x270F261C8]();
}

uint64_t DRContextSetChangeObserver()
{
  return MEMORY[0x270F261E0]();
}

uint64_t DRContextSetOnCommitComplete()
{
  return MEMORY[0x270F261E8]();
}

uint64_t DRMemoryResourceCopyBuffer()
{
  return MEMORY[0x270F261F0]();
}

uint64_t DRMemoryResourceCopyToXPC()
{
  return MEMORY[0x270F261F8]();
}

uint64_t DRMemoryResourceCreate()
{
  return MEMORY[0x270F26200]();
}

uint64_t DRMemoryResourceCreateFromXPC()
{
  return MEMORY[0x270F26208]();
}

uint64_t DRMemoryResourceDidUpdateBytes()
{
  return MEMORY[0x270F26210]();
}

uint64_t DRMemoryResourceGetBytes()
{
  return MEMORY[0x270F26218]();
}

uint64_t DRMemoryResourceGetLength()
{
  return MEMORY[0x270F26220]();
}

uint64_t DRMemoryResourceIsPrivateToProcess()
{
  return MEMORY[0x270F26228]();
}

uint64_t DRMeshAsResource()
{
  return MEMORY[0x270F26230]();
}

uint64_t DRMeshCopyDescriptor()
{
  return MEMORY[0x270F26238]();
}

uint64_t DRMeshDescriptorCalculateBufferSizes()
{
  return MEMORY[0x270F26248]();
}

uint64_t DRMeshDescriptorGetIndexType()
{
  return MEMORY[0x270F26260]();
}

uint64_t DRMeshDescriptorGetVertexAttributeCount()
{
  return MEMORY[0x270F26268]();
}

uint64_t DRMeshDescriptorGetVertexAttributeFormat()
{
  return MEMORY[0x270F26270]();
}

uint64_t DRMeshDescriptorGetVertexLayout()
{
  return MEMORY[0x270F26288]();
}

uint64_t DRMeshGetPartAt()
{
  return MEMORY[0x270F262E0]();
}

uint64_t DRMeshGetPartCount()
{
  return MEMORY[0x270F262E8]();
}

uint64_t DRMeshReadIndicesUsing()
{
  return MEMORY[0x270F26300]();
}

uint64_t DRMeshReadVerticesUsing()
{
  return MEMORY[0x270F26310]();
}

uint64_t DRResourceAsBuffer()
{
  return MEMORY[0x270F26358]();
}

uint64_t DRResourceAsMesh()
{
  return MEMORY[0x270F26360]();
}

uint64_t DRResourceAsTexture()
{
  return MEMORY[0x270F26368]();
}

uint64_t DRResourceGetClientIdentifier()
{
  return MEMORY[0x270F26370]();
}

uint64_t DRResourceGetIdentifier()
{
  return MEMORY[0x270F26378]();
}

uint64_t DRResourcesCommitCopyEventWithDevice()
{
  return MEMORY[0x270F26380]();
}

uint64_t DRResourcesCommitCopyToXPC()
{
  return MEMORY[0x270F26388]();
}

uint64_t DRResourcesCommitGetId()
{
  return MEMORY[0x270F26390]();
}

uint64_t DRResourcesCommitHasEvent()
{
  return MEMORY[0x270F26398]();
}

uint64_t DRTextureAsResource()
{
  return MEMORY[0x270F263A0]();
}

uint64_t DRTextureCopyDescriptor()
{
  return MEMORY[0x270F263A8]();
}

uint64_t DRTextureDescriptorGetArrayLength()
{
  return MEMORY[0x270F263C0]();
}

uint64_t DRTextureDescriptorGetDepth()
{
  return MEMORY[0x270F263C8]();
}

uint64_t DRTextureDescriptorGetHeight()
{
  return MEMORY[0x270F263D0]();
}

uint64_t DRTextureDescriptorGetMipmapLevelCount()
{
  return MEMORY[0x270F263D8]();
}

uint64_t DRTextureDescriptorGetPixelFormat()
{
  return MEMORY[0x270F263E0]();
}

uint64_t DRTextureDescriptorGetTextureType()
{
  return MEMORY[0x270F263E8]();
}

uint64_t DRTextureDescriptorGetWidth()
{
  return MEMORY[0x270F263F0]();
}

uint64_t DRTextureReadTexture()
{
  return MEMORY[0x270F26440]();
}

uint64_t DRValidateIndices()
{
  return MEMORY[0x270F26450]();
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x270EE2368](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2370](inExtAudioFile, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileGetPropertyInfo(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x270EE2380](inExtAudioFile, *(void *)&inPropertyID, outSize, outWritable);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270EE2398](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270EE23B8](inExtAudioFile, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x270EE23C8](inFileID, inForWriting, outExtAudioFile);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x270EE23D8](inExtAudioFile, *(void *)&inNumberFrames, ioData);
}

uint64_t FigDataChannelGroupAddDataChannelWithFigTags()
{
  return MEMORY[0x270EF5CB0]();
}

uint64_t FigDataChannelGroupCreate()
{
  return MEMORY[0x270EF5CB8]();
}

uint64_t FigDataChannelGroupCreateForUseCase()
{
  return MEMORY[0x270EF5CC0]();
}

uint64_t FigDataChannelGroupGetCountOfDataChannels()
{
  return MEMORY[0x270EF5CC8]();
}

uint64_t FigDataChannelGroupGetDataChannelByIndex()
{
  return MEMORY[0x270EF5CD0]();
}

uint64_t FigDerivedClockCreateWithGetTimeCallback()
{
  return MEMORY[0x270EE8180]();
}

uint64_t FigDerivedClockGetDerivedStorage()
{
  return MEMORY[0x270EE8188]();
}

uint64_t FigDerivedClockVerifyCallbacksMatch()
{
  return MEMORY[0x270EE8190]();
}

uint64_t FigSTSCreateRemote()
{
  return MEMORY[0x270F49AF0]();
}

uint64_t FigSemaphoreCreate()
{
  return MEMORY[0x270EE8358]();
}

uint64_t FigSemaphoreDestroy()
{
  return MEMORY[0x270EE8360]();
}

uint64_t FigSemaphoreSignal()
{
  return MEMORY[0x270EE8368]();
}

uint64_t FigSemaphoreWaitRelative()
{
  return MEMORY[0x270EE8370]();
}

uint64_t FigTagCollectionContainsTag()
{
  return MEMORY[0x270EE83B0]();
}

uint64_t FigTagCollectionGetTagsWithCategory()
{
  return MEMORY[0x270EE83C0]();
}

uint64_t FigTagEqualToTag()
{
  return MEMORY[0x270EE83C8]();
}

uint64_t FigTagGetSInt64Value()
{
  return MEMORY[0x270EE83D0]();
}

uint64_t FigVideoReceiverCreate()
{
  return MEMORY[0x270EF5DB0]();
}

uint64_t FigVideoTargetCreateWithVideoReceiverEndpointID()
{
  return MEMORY[0x270EF5DB8]();
}

Boolean IOHIDDeviceConformsTo(IOHIDDeviceRef device, uint32_t usagePage, uint32_t usage)
{
  return MEMORY[0x270EF4058](device, *(void *)&usagePage, *(void *)&usage);
}

CFTypeRef IOHIDDeviceGetProperty(IOHIDDeviceRef device, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF4078](device, key);
}

void IOHIDDeviceRegisterInputValueCallback(IOHIDDeviceRef device, IOHIDValueCallback callback, void *context)
{
}

IOHIDElementType IOHIDElementGetType(IOHIDElementRef element)
{
  return MEMORY[0x270EF4180](element);
}

uint32_t IOHIDElementGetUsage(IOHIDElementRef element)
{
  return MEMORY[0x270EF41A0](element);
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x270EF4528](manager, *(void *)&options);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x270EF4540](allocator, *(void *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x270EF4550](manager, *(void *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void IOHIDManagerSetDeviceMatchingMultiple(IOHIDManagerRef manager, CFArrayRef multiple)
{
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

IOHIDElementRef IOHIDValueGetElement(IOHIDValueRef value)
{
  return (IOHIDElementRef)MEMORY[0x270EF4760](value);
}

CFIndex IOHIDValueGetIntegerValue(IOHIDValueRef value)
{
  return MEMORY[0x270EF4768](value);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x270F3D448]();
}

uint64_t IOSurfaceAcceleratorGetHistogram()
{
  return MEMORY[0x270F3D450]();
}

uint64_t IOSurfaceAcceleratorGetRunLoopSource()
{
  return MEMORY[0x270F3D458]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x270F3D468]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF4C20](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x270EF4C38](aSurface);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C50](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x270EF4C90]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D68](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D88](buffer);
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x270EF4DA0]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

uint64_t IOSurfaceGetYCbCrMatrix()
{
  return MEMORY[0x270EF4DF8]();
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x270EF4E38](xobj);
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x270EF4E40]();
}

uint64_t IOSurfaceSetOwnership()
{
  return MEMORY[0x270EF4E58]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

uint64_t MGGetProductType()
{
  return MEMORY[0x270F95FD8]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

uint64_t MTLDataTypeGetSize()
{
  return MEMORY[0x270EF5E48]();
}

uint64_t MTLGetTextureLevelInfoForDevice()
{
  return MEMORY[0x270EF5E98]();
}

uint64_t MTLGetTextureLevelInfoForDeviceWithOptions()
{
  return MEMORY[0x270EF5EA0]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x270EF5EE0]();
}

uint64_t MTLPixelFormatGetName()
{
  return MEMORY[0x270EF5EF0]();
}

uint64_t MTLTextureTypeString()
{
  return MEMORY[0x270EF5FB0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t ParallelCompressionFileClose()
{
  return MEMORY[0x270F96658]();
}

uint64_t ParallelCompressionFileOpen()
{
  return MEMORY[0x270F96660]();
}

uint64_t ParallelCompressionFileRead()
{
  return MEMORY[0x270F96668]();
}

uint64_t ParallelCompressionFileWrite()
{
  return MEMORY[0x270F96670]();
}

uint64_t RESyncAddSyncObjectContextEntry()
{
  return MEMORY[0x270F58D50]();
}

uint64_t RESyncAddSyncObjectReadContextEntry()
{
  return MEMORY[0x270F58D58]();
}

uint64_t RESyncAddSyncObjectWriteContextEntry()
{
  return MEMORY[0x270F58D60]();
}

uint64_t RESyncBiasedVLQRead()
{
  return MEMORY[0x270F58D80]();
}

uint64_t RESyncBiasedVLQWrite()
{
  return MEMORY[0x270F58D88]();
}

uint64_t RESyncBitReaderAlignToByte()
{
  return MEMORY[0x270F58D90]();
}

uint64_t RESyncBitReaderBytesLeft()
{
  return MEMORY[0x270F58D98]();
}

uint64_t RESyncBitReaderConstructNoAlloc()
{
  return MEMORY[0x270F58DA0]();
}

uint64_t RESyncBitReaderDataPtr()
{
  return MEMORY[0x270F58DA8]();
}

uint64_t RESyncBitReaderDestructNoDealloc()
{
  return MEMORY[0x270F58DB0]();
}

uint64_t RESyncBitReaderGetRequiredSize()
{
  return MEMORY[0x270F58DB8]();
}

uint64_t RESyncBitReaderIsOverflow()
{
  return MEMORY[0x270F58DC0]();
}

uint64_t RESyncBitReaderReadBool()
{
  return MEMORY[0x270F58DC8]();
}

uint64_t RESyncBitReaderReadData()
{
  return MEMORY[0x270F58DD0]();
}

uint64_t RESyncBitReaderReadFloat()
{
  return MEMORY[0x270F58DD8]();
}

uint64_t RESyncBitReaderReadPeerID()
{
  return MEMORY[0x270F58DE0]();
}

uint64_t RESyncBitReaderReadUInt32()
{
  return MEMORY[0x270F58DE8]();
}

uint64_t RESyncBitReaderReadUInt8()
{
  return MEMORY[0x270F58DF0]();
}

uint64_t RESyncBitReaderSize()
{
  return MEMORY[0x270F58DF8]();
}

uint64_t RESyncBitReaderSkipData()
{
  return MEMORY[0x270F58E00]();
}

uint64_t RESyncBitWriterBackedRequiredSize()
{
  return MEMORY[0x270F58E08]();
}

uint64_t RESyncBitWriterCloseBuffer()
{
  return MEMORY[0x270F58E10]();
}

uint64_t RESyncBitWriterConstructBackedNoAlloc()
{
  return MEMORY[0x270F58E18]();
}

uint64_t RESyncBitWriterConstructNoAlloc()
{
  return MEMORY[0x270F58E20]();
}

uint64_t RESyncBitWriterData()
{
  return MEMORY[0x270F58E28]();
}

uint64_t RESyncBitWriterDestructNoDealloc()
{
  return MEMORY[0x270F58E30]();
}

uint64_t RESyncBitWriterGetRequiredSize()
{
  return MEMORY[0x270F58E38]();
}

uint64_t RESyncBitWriterGrowBuffer()
{
  return MEMORY[0x270F58E40]();
}

uint64_t RESyncBitWriterIsOverflow()
{
  return MEMORY[0x270F58E48]();
}

uint64_t RESyncBitWriterOpenBuffer()
{
  return MEMORY[0x270F58E50]();
}

uint64_t RESyncBitWriterSize()
{
  return MEMORY[0x270F58E58]();
}

uint64_t RESyncBitWriterWriteBool()
{
  return MEMORY[0x270F58E60]();
}

uint64_t RESyncBitWriterWriteData()
{
  return MEMORY[0x270F58E68]();
}

uint64_t RESyncBitWriterWriteFloat()
{
  return MEMORY[0x270F58E70]();
}

uint64_t RESyncBitWriterWriteUInt32()
{
  return MEMORY[0x270F58E78]();
}

uint64_t RESyncBitWriterWriteUInt64()
{
  return MEMORY[0x270F58E80]();
}

uint64_t RESyncBitWriterWriteUInt8()
{
  return MEMORY[0x270F58E88]();
}

uint64_t RESyncCommitCaptureSnapshot()
{
  return MEMORY[0x270F58E90]();
}

uint64_t RESyncCommitEnumerateForRead()
{
  return MEMORY[0x270F58E98]();
}

uint64_t RESyncCommitGetSourcePeerID()
{
  return MEMORY[0x270F58EA0]();
}

uint64_t RESyncCommitIsAtomic()
{
  return MEMORY[0x270F58EA8]();
}

uint64_t RESyncCommitListAddCopy()
{
  return MEMORY[0x270F58EB0]();
}

uint64_t RESyncCommitListAddNewCommit()
{
  return MEMORY[0x270F58EB8]();
}

uint64_t RESyncCommitListCreate()
{
  return MEMORY[0x270F58EC8]();
}

uint64_t RESyncCommitListGetEntry()
{
  return MEMORY[0x270F58ED0]();
}

uint64_t RESyncCommitListGetEntryCount()
{
  return MEMORY[0x270F58ED8]();
}

uint64_t RESyncCommitMarkDestroyed()
{
  return MEMORY[0x270F58EE0]();
}

uint64_t RESyncCommitSetForwarded()
{
  return MEMORY[0x270F58EE8]();
}

uint64_t RESyncCreateSyncObjectContext()
{
  return MEMORY[0x270F58F10]();
}

uint64_t RESyncCreateSyncObjectReadContext()
{
  return MEMORY[0x270F58F18]();
}

uint64_t RESyncCreateSyncObjectWriteContext()
{
  return MEMORY[0x270F58F20]();
}

uint64_t RESyncCreateSyncService()
{
  return MEMORY[0x270F58F28]();
}

uint64_t RESyncCustomLeaderElectionAddPeer()
{
  return MEMORY[0x270F58F30]();
}

uint64_t RESyncCustomLeaderElectionCreate()
{
  return MEMORY[0x270F58F38]();
}

uint64_t RESyncCustomLeaderElectionDeinit()
{
  return MEMORY[0x270F58F40]();
}

uint64_t RESyncCustomLeaderElectionDestroy()
{
  return MEMORY[0x270F58F48]();
}

uint64_t RESyncCustomLeaderElectionHandleMigration()
{
  return MEMORY[0x270F58F50]();
}

uint64_t RESyncCustomLeaderElectionInit()
{
  return MEMORY[0x270F58F58]();
}

uint64_t RESyncCustomLeaderElectionIsLeader()
{
  return MEMORY[0x270F58F60]();
}

uint64_t RESyncCustomLeaderElectionProcessCapabilities()
{
  return MEMORY[0x270F58F68]();
}

uint64_t RESyncCustomLeaderElectionRemovePeer()
{
  return MEMORY[0x270F58F70]();
}

uint64_t RESyncCustomLeaderElectionRunLoop()
{
  return MEMORY[0x270F58F78]();
}

uint64_t RESyncCustomLeaderElectionSetSession()
{
  return MEMORY[0x270F58F80]();
}

uint64_t RESyncCustomProtocolLayerOnReceiveData()
{
  return MEMORY[0x270F58FA8]();
}

uint64_t RESyncDestroySyncObjectContext()
{
  return MEMORY[0x270F58FB0]();
}

uint64_t RESyncDestroySyncObjectReadContext()
{
  return MEMORY[0x270F58FB8]();
}

uint64_t RESyncDestroySyncObjectWriteContext()
{
  return MEMORY[0x270F58FC0]();
}

uint64_t RESyncDiscoveryIdentityObserverCreate()
{
  return MEMORY[0x270F58FC8]();
}

uint64_t RESyncDiscoveryIdentityObserverOnCreate()
{
  return MEMORY[0x270F58FD0]();
}

uint64_t RESyncDiscoveryIdentityObserverOnDestroy()
{
  return MEMORY[0x270F58FD8]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetAddress()
{
  return MEMORY[0x270F58FE0]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetDisplayName()
{
  return MEMORY[0x270F58FE8]();
}

uint64_t RESyncDiscoveryIdentityObserverOnIsLocal()
{
  return MEMORY[0x270F58FF0]();
}

uint64_t RESyncDiscoveryViewCreateWithObserver()
{
  return MEMORY[0x270F59008]();
}

uint64_t RESyncDiscoveryViewObserverCreate()
{
  return MEMORY[0x270F59020]();
}

uint64_t RESyncDiscoveryViewObserverOnCreate()
{
  return MEMORY[0x270F59028]();
}

uint64_t RESyncDiscoveryViewObserverOnCreateProtocolLayer()
{
  return MEMORY[0x270F59030]();
}

uint64_t RESyncDiscoveryViewObserverOnDestroy()
{
  return MEMORY[0x270F59038]();
}

uint64_t RESyncDiscoveryViewObserverOnGetAuthData()
{
  return MEMORY[0x270F59040]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentitiesCount()
{
  return MEMORY[0x270F59048]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentityAtIndex()
{
  return MEMORY[0x270F59050]();
}

uint64_t RESyncDiscoveryViewObserverOnRequestIdentity()
{
  return MEMORY[0x270F59058]();
}

uint64_t RESyncGetSyncObjectContextEntry()
{
  return MEMORY[0x270F59070]();
}

uint64_t RESyncGetSyncObjectReadContextEntry()
{
  return MEMORY[0x270F59078]();
}

uint64_t RESyncGetSyncObjectWriteContextEntry()
{
  return MEMORY[0x270F59080]();
}

uint64_t RESyncIdentityCreateWithObserver()
{
  return MEMORY[0x270F59088]();
}

uint64_t RESyncLeaderElectionCreateCustom()
{
  return MEMORY[0x270F590A0]();
}

uint64_t RESyncLeaderElectionCreateLowestPeerID()
{
  return MEMORY[0x270F590A8]();
}

uint64_t RESyncMCServiceConfigCreateNoAlloc()
{
  return MEMORY[0x270F590B0]();
}

uint64_t RESyncMCServiceConfigDestroyNoDealloc()
{
  return MEMORY[0x270F590B8]();
}

uint64_t RESyncMCServiceConfigGetSize()
{
  return MEMORY[0x270F590C0]();
}

uint64_t RESyncMCServiceConfigSetDispatchQueue()
{
  return MEMORY[0x270F590C8]();
}

uint64_t RESyncMCServiceConfigSetSyncService()
{
  return MEMORY[0x270F590D0]();
}

uint64_t RESyncMCServiceCreate()
{
  return MEMORY[0x270F590D8]();
}

uint64_t RESyncMCServiceDestroy()
{
  return MEMORY[0x270F590E0]();
}

uint64_t RESyncNetSessionAddObserver()
{
  return MEMORY[0x270F59120]();
}

uint64_t RESyncNetSessionAveragedStatsAggregated()
{
  return MEMORY[0x270F59128]();
}

uint64_t RESyncNetSessionConfigurationCreate()
{
  return MEMORY[0x270F59130]();
}

uint64_t RESyncNetSessionConfigurationSetAllowTimeSync()
{
  return MEMORY[0x270F59138]();
}

uint64_t RESyncNetSessionConfigurationSetAuthorityPolicy()
{
  return MEMORY[0x270F59140]();
}

uint64_t RESyncNetSessionConfigurationSetDiscoveryView()
{
  return MEMORY[0x270F59150]();
}

uint64_t RESyncNetSessionConfigurationSetIsLeader()
{
  return MEMORY[0x270F59168]();
}

uint64_t RESyncNetSessionConfigurationSetLeaderElection()
{
  return MEMORY[0x270F59180]();
}

uint64_t RESyncNetSessionConfigurationSetTransportQueue()
{
  return MEMORY[0x270F591B0]();
}

uint64_t RESyncNetSessionConfigurationSetUserContext()
{
  return MEMORY[0x270F591C8]();
}

uint64_t RESyncNetSessionCreate()
{
  return MEMORY[0x270F591D8]();
}

uint64_t RESyncNetSessionGetIsLocal()
{
  return MEMORY[0x270F591F0]();
}

uint64_t RESyncNetSessionGetIsLocalPeer()
{
  return MEMORY[0x270F591F8]();
}

uint64_t RESyncNetSessionGetParticipantAtIndex()
{
  return MEMORY[0x270F59200]();
}

uint64_t RESyncNetSessionGetParticipantWithPeerID()
{
  return MEMORY[0x270F59208]();
}

uint64_t RESyncNetSessionIsActive()
{
  return MEMORY[0x270F59218]();
}

uint64_t RESyncNetSessionIsInitialized()
{
  return MEMORY[0x270F59220]();
}

uint64_t RESyncNetSessionLastStatsAggregated()
{
  return MEMORY[0x270F59228]();
}

uint64_t RESyncNetSessionLeader()
{
  return MEMORY[0x270F59230]();
}

uint64_t RESyncNetSessionObserverCreate()
{
  return MEMORY[0x270F59238]();
}

uint64_t RESyncNetSessionObserverOnConnectionConnected()
{
  return MEMORY[0x270F59240]();
}

uint64_t RESyncNetSessionObserverOnConnectionDisconnected()
{
  return MEMORY[0x270F59248]();
}

uint64_t RESyncNetSessionObserverOnLeaderChanged()
{
  return MEMORY[0x270F59250]();
}

uint64_t RESyncNetSessionObserverOnParticipantJoin()
{
  return MEMORY[0x270F59258]();
}

uint64_t RESyncNetSessionObserverOnParticipantLeave()
{
  return MEMORY[0x270F59260]();
}

uint64_t RESyncNetSessionObserverOnPeerDidPause()
{
  return MEMORY[0x270F59268]();
}

uint64_t RESyncNetSessionObserverOnPeerDidResume()
{
  return MEMORY[0x270F59270]();
}

uint64_t RESyncNetSessionObserverOnReceiveData()
{
  return MEMORY[0x270F59278]();
}

uint64_t RESyncNetSessionObserverOnReceiveUserData()
{
  return MEMORY[0x270F59280]();
}

uint64_t RESyncNetSessionObserverOnStart()
{
  return MEMORY[0x270F59288]();
}

uint64_t RESyncNetSessionObserverOnStop()
{
  return MEMORY[0x270F59290]();
}

uint64_t RESyncNetSessionParticipantsCount()
{
  return MEMORY[0x270F592A0]();
}

uint64_t RESyncNetSessionPeerID()
{
  return MEMORY[0x270F592A8]();
}

uint64_t RESyncNetSessionRemoveObserver()
{
  return MEMORY[0x270F592B0]();
}

uint64_t RESyncNetSessionSendData()
{
  return MEMORY[0x270F592B8]();
}

uint64_t RESyncNetSessionSendDataUnreliableUnordered()
{
  return MEMORY[0x270F592C0]();
}

uint64_t RESyncNetSessionSetCapabilitiesIsLeader()
{
  return MEMORY[0x270F592C8]();
}

uint64_t RESyncNetSessionSetIsLocal()
{
  return MEMORY[0x270F592D8]();
}

uint64_t RESyncNetSessionSetLeader()
{
  return MEMORY[0x270F592E0]();
}

uint64_t RESyncObjectReadContextIsLocalSession()
{
  return MEMORY[0x270F592F0]();
}

uint64_t RESyncObjectReadContextSupportsProtocolLevelAlmond()
{
  return MEMORY[0x270F592F8]();
}

uint64_t RESyncObjectReadContextSupportsProtocolLevelWalnut()
{
  return MEMORY[0x270F59300]();
}

uint64_t RESyncObjectWriteContextIsLocalSession()
{
  return MEMORY[0x270F59308]();
}

uint64_t RESyncObjectWriteContextSupportsProtocolLevelAlmond()
{
  return MEMORY[0x270F59310]();
}

uint64_t RESyncObjectWriteContextSupportsProtocolLevelPistachio()
{
  return MEMORY[0x270F59318]();
}

uint64_t RESyncObjectWriteContextSupportsProtocolLevelWalnut()
{
  return MEMORY[0x270F59320]();
}

uint64_t RESyncParticipantGetPeerID()
{
  return MEMORY[0x270F59370]();
}

uint64_t RESyncParticipantGetUserContext()
{
  return MEMORY[0x270F59378]();
}

uint64_t RESyncParticipantHasForceAuthorityCapability()
{
  return MEMORY[0x270F59380]();
}

uint64_t RESyncProtocolHandleConnectionGetStats()
{
  return MEMORY[0x270F59388]();
}

uint64_t RESyncProtocolHandleConnectionSetStats()
{
  return MEMORY[0x270F59390]();
}

uint64_t RESyncProtocolLayerObserverOnClose()
{
  return MEMORY[0x270F593D0]();
}

uint64_t RESyncProtocolLayerObserverOnCreate()
{
  return MEMORY[0x270F593D8]();
}

uint64_t RESyncProtocolLayerObserverOnDeinit()
{
  return MEMORY[0x270F593E0]();
}

uint64_t RESyncProtocolLayerObserverOnDestroy()
{
  return MEMORY[0x270F593E8]();
}

uint64_t RESyncProtocolLayerObserverOnDisconnect()
{
  return MEMORY[0x270F593F0]();
}

uint64_t RESyncProtocolLayerObserverOnHostStats()
{
  return MEMORY[0x270F593F8]();
}

uint64_t RESyncProtocolLayerObserverOnInit()
{
  return MEMORY[0x270F59400]();
}

uint64_t RESyncProtocolLayerObserverOnLocalAddresses()
{
  return MEMORY[0x270F59408]();
}

uint64_t RESyncProtocolLayerObserverOnOpenNullable()
{
  return MEMORY[0x270F59410]();
}

uint64_t RESyncProtocolLayerObserverOnPreferredPacketSize()
{
  return MEMORY[0x270F59418]();
}

uint64_t RESyncProtocolLayerObserverOnSetDisconnectTimeout()
{
  return MEMORY[0x270F59420]();
}

uint64_t RESyncProtocolLayerObserverOnUpdate()
{
  return MEMORY[0x270F59428]();
}

uint64_t RESyncProtocolLayerObserverOnWait()
{
  return MEMORY[0x270F59430]();
}

uint64_t RESyncProtocolLayerObserverOnWakeup()
{
  return MEMORY[0x270F59438]();
}

uint64_t RESyncReadContextGetStateSize()
{
  return MEMORY[0x270F59440]();
}

uint64_t RESyncReadContextGetSyncable()
{
  return MEMORY[0x270F59448]();
}

uint64_t RESyncReadContextIsDataChanged()
{
  return MEMORY[0x270F59450]();
}

uint64_t RESyncReadContextIsDestroyed()
{
  return MEMORY[0x270F59458]();
}

uint64_t RESyncReadContextIsNew()
{
  return MEMORY[0x270F59460]();
}

uint64_t RESyncRelease()
{
  return MEMORY[0x270F59468]();
}

uint64_t RESyncRetain()
{
  return MEMORY[0x270F59470]();
}

uint64_t RESyncServiceAddObserver()
{
  return MEMORY[0x270F59478]();
}

uint64_t RESyncServiceAddTransferReportObserver()
{
  return MEMORY[0x270F59480]();
}

uint64_t RESyncServiceAddView()
{
  return MEMORY[0x270F59488]();
}

uint64_t RESyncServiceAfterFrameUpdate()
{
  return MEMORY[0x270F59490]();
}

uint64_t RESyncServiceBeforeFrameUpdate()
{
  return MEMORY[0x270F59498]();
}

uint64_t RESyncServiceConfigCreateDefaultNoAlloc()
{
  return MEMORY[0x270F594A0]();
}

uint64_t RESyncServiceConfigDestruct()
{
  return MEMORY[0x270F594A8]();
}

uint64_t RESyncServiceConfigGetSize()
{
  return MEMORY[0x270F594B0]();
}

uint64_t RESyncServiceConfigSetDispatchQueue()
{
  return MEMORY[0x270F594B8]();
}

uint64_t RESyncServiceConfigSetSchemaHash()
{
  return MEMORY[0x270F594C0]();
}

uint64_t RESyncServiceCreateIncomingSyncable()
{
  return MEMORY[0x270F594C8]();
}

uint64_t RESyncServiceCreateSessionAndStartSync()
{
  return MEMORY[0x270F594D0]();
}

uint64_t RESyncServiceCreateSyncableWithTypeId()
{
  return MEMORY[0x270F594D8]();
}

uint64_t RESyncServiceCreateSyncableWithTypeInfo()
{
  return MEMORY[0x270F594E0]();
}

uint64_t RESyncServiceFindSyncableWithGuid()
{
  return MEMORY[0x270F594E8]();
}

uint64_t RESyncServiceGetLocalPeerId()
{
  return MEMORY[0x270F594F0]();
}

uint64_t RESyncServiceGetSession()
{
  return MEMORY[0x270F594F8]();
}

uint64_t RESyncServiceGetSessionCount()
{
  return MEMORY[0x270F59500]();
}

uint64_t RESyncServiceGetSyncSession()
{
  return MEMORY[0x270F59508]();
}

uint64_t RESyncServiceGetTypeInfo()
{
  return MEMORY[0x270F59510]();
}

uint64_t RESyncServiceObserverCreate()
{
  return MEMORY[0x270F59518]();
}

uint64_t RESyncServiceObserverOnDataArrive()
{
  return MEMORY[0x270F59520]();
}

uint64_t RESyncServiceObserverOnSessionDidAdd()
{
  return MEMORY[0x270F59528]();
}

uint64_t RESyncServiceObserverOnSessionDidReceiveOwnershipChange()
{
  return MEMORY[0x270F59530]();
}

uint64_t RESyncServiceObserverOnSessionDidReceiveOwnershipHandoff()
{
  return MEMORY[0x270F59538]();
}

uint64_t RESyncServiceObserverOnSessionDidReceiveOwnershipRequest()
{
  return MEMORY[0x270F59540]();
}

uint64_t RESyncServiceObserverOnSessionDidReceiveOwnershipResponse()
{
  return MEMORY[0x270F59548]();
}

uint64_t RESyncServiceObserverOnSessionWillRemove()
{
  return MEMORY[0x270F59550]();
}

uint64_t RESyncServiceRegisterTypeInfo()
{
  return MEMORY[0x270F59558]();
}

uint64_t RESyncServiceRemoveObserver()
{
  return MEMORY[0x270F59560]();
}

uint64_t RESyncServiceRemoveSyncable()
{
  return MEMORY[0x270F59568]();
}

uint64_t RESyncServiceRemoveTransferReportObserver()
{
  return MEMORY[0x270F59570]();
}

uint64_t RESyncServiceRemoveView()
{
  return MEMORY[0x270F59578]();
}

uint64_t RESyncSessionGetNetSession()
{
  return MEMORY[0x270F595A0]();
}

uint64_t RESyncSessionHasViewFilterCB()
{
  return MEMORY[0x270F595A8]();
}

uint64_t RESyncSessionIsLocal()
{
  return MEMORY[0x270F595B0]();
}

uint64_t RESyncSessionIsPrivileged()
{
  return MEMORY[0x270F595B8]();
}

uint64_t RESyncSessionReceive()
{
  return MEMORY[0x270F595C0]();
}

uint64_t RESyncSessionReceiveRaw()
{
  return MEMORY[0x270F595C8]();
}

uint64_t RESyncSessionSend()
{
  return MEMORY[0x270F595D0]();
}

uint64_t RESyncSessionSendRaw()
{
  return MEMORY[0x270F595D8]();
}

uint64_t RESyncSessionSetViewFilterCB()
{
  return MEMORY[0x270F595E0]();
}

uint64_t RESyncSyncableTypeInfoCreate()
{
  return MEMORY[0x270F595E8]();
}

uint64_t RESyncSyncableTypeInfoGetDebugName()
{
  return MEMORY[0x270F595F0]();
}

uint64_t RESyncSyncableTypeInfoGetReadSnapshotCb()
{
  return MEMORY[0x270F595F8]();
}

uint64_t RESyncSyncableTypeInfoGetWriteSnapshotCb()
{
  return MEMORY[0x270F59600]();
}

uint64_t RESyncSyncableTypeInfoSetDebugName()
{
  return MEMORY[0x270F59608]();
}

uint64_t RESyncSyncableTypeInfoSetReadPayloadCb()
{
  return MEMORY[0x270F59610]();
}

uint64_t RESyncSyncableTypeInfoSetReadPayloadDeltaCb()
{
  return MEMORY[0x270F59618]();
}

uint64_t RESyncSyncableTypeInfoSetReadSnapshotCb()
{
  return MEMORY[0x270F59620]();
}

uint64_t RESyncSyncableTypeInfoSetSupportsNetworkSync()
{
  return MEMORY[0x270F59628]();
}

uint64_t RESyncSyncableTypeInfoSetSupportsOwnershipTransfer()
{
  return MEMORY[0x270F59630]();
}

uint64_t RESyncSyncableTypeInfoSetSupportsViews()
{
  return MEMORY[0x270F59638]();
}

uint64_t RESyncSyncableTypeInfoSetTypeId()
{
  return MEMORY[0x270F59640]();
}

uint64_t RESyncSyncableTypeInfoSetWritePayloadCb()
{
  return MEMORY[0x270F59648]();
}

uint64_t RESyncSyncableTypeInfoSetWritePayloadDeltaCb()
{
  return MEMORY[0x270F59650]();
}

uint64_t RESyncSyncableTypeInfoSetWriteSnapshotCb()
{
  return MEMORY[0x270F59658]();
}

uint64_t RESyncSyncableTypeInfoSupportsNetworkSync()
{
  return MEMORY[0x270F59660]();
}

uint64_t RESyncTransferReportObserverCreate()
{
  return MEMORY[0x270F59668]();
}

uint64_t RESyncTransferReportObserverOnTransferReportSend()
{
  return MEMORY[0x270F59670]();
}

uint64_t RESyncViewCreate()
{
  return MEMORY[0x270F59678]();
}

uint64_t RESyncViewGetObjectCount()
{
  return MEMORY[0x270F59680]();
}

uint64_t RESyncViewGetUserData()
{
  return MEMORY[0x270F59688]();
}

uint64_t RESyncViewSetFromPeerID()
{
  return MEMORY[0x270F59690]();
}

uint64_t RESyncViewSetOwnerPeerID()
{
  return MEMORY[0x270F59698]();
}

uint64_t RESyncViewSetUserData()
{
  return MEMORY[0x270F596A0]();
}

uint64_t RESyncableBindWithParent()
{
  return MEMORY[0x270F596A8]();
}

uint64_t RESyncableGetChild()
{
  return MEMORY[0x270F596B0]();
}

uint64_t RESyncableGetChildCount()
{
  return MEMORY[0x270F596B8]();
}

uint64_t RESyncableGetDirectView()
{
  return MEMORY[0x270F596C0]();
}

uint64_t RESyncableGetFromPeerID()
{
  return MEMORY[0x270F596C8]();
}

uint64_t RESyncableGetGuid()
{
  return MEMORY[0x270F596D0]();
}

uint64_t RESyncableGetHierarchicalView()
{
  return MEMORY[0x270F596D8]();
}

uint64_t RESyncableGetOwnerPeerID()
{
  return MEMORY[0x270F596E0]();
}

uint64_t RESyncableGetParent()
{
  return MEMORY[0x270F596E8]();
}

uint64_t RESyncableGetTypeId()
{
  return MEMORY[0x270F596F0]();
}

uint64_t RESyncableGetTypeInfo()
{
  return MEMORY[0x270F596F8]();
}

uint64_t RESyncableGetUserData()
{
  return MEMORY[0x270F59700]();
}

uint64_t RESyncableHandoffOwnership()
{
  return MEMORY[0x270F59708]();
}

uint64_t RESyncableHasOwnership()
{
  return MEMORY[0x270F59710]();
}

uint64_t RESyncableIsAuthoritative()
{
  return MEMORY[0x270F59718]();
}

uint64_t RESyncableIsDestroyed()
{
  return MEMORY[0x270F59720]();
}

uint64_t RESyncableIsLocked()
{
  return MEMORY[0x270F59728]();
}

uint64_t RESyncableIsOpaque()
{
  return MEMORY[0x270F59738]();
}

uint64_t RESyncableReadState()
{
  return MEMORY[0x270F59740]();
}

uint64_t RESyncableSetDirectView()
{
  return MEMORY[0x270F59748]();
}

uint64_t RESyncableSetLocked()
{
  return MEMORY[0x270F59750]();
}

uint64_t RESyncableSetMigrateWhenAbandoned()
{
  return MEMORY[0x270F59758]();
}

uint64_t RESyncableSetUserData()
{
  return MEMORY[0x270F59760]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

uint64_t TimeSyncAddgPTPServices()
{
  return MEMORY[0x270F7E270]();
}

uint64_t TimeSyncClockAddAWDLPort()
{
  return MEMORY[0x270F7E278]();
}

uint64_t TimeSyncClockAddUDPv4EndToEndPort()
{
  return MEMORY[0x270F7E280]();
}

uint64_t TimeSyncClockAddUDPv6EndToEndPort()
{
  return MEMORY[0x270F7E288]();
}

uint64_t TimeSyncClockCreateWithClockIdentifer()
{
  return MEMORY[0x270F7E290]();
}

uint64_t TimeSyncClockDispose()
{
  return MEMORY[0x270F7E298]();
}

uint64_t TimeSyncClockGetClockRateAndAnchors()
{
  return MEMORY[0x270F7E2A0]();
}

uint64_t TimeSyncClockGetgPTPGrandmasterIdentity()
{
  return MEMORY[0x270F7E2A8]();
}

uint64_t TimeSyncClockRemoveAWDLPort()
{
  return MEMORY[0x270F7E2B0]();
}

uint64_t TimeSyncClockRemoveUDPv4EndToEndPort()
{
  return MEMORY[0x270F7E2B8]();
}

uint64_t TimeSyncClockRemoveUDPv6EndToEndPort()
{
  return MEMORY[0x270F7E2C0]();
}

uint64_t TimeSyncClockSetLockStateChangeCallback()
{
  return MEMORY[0x270F7E2C8]();
}

uint64_t TimeSyncClockSetMasterChangeCallback()
{
  return MEMORY[0x270F7E2D0]();
}

uint64_t TimeSyncClockSetgPTPGrandmasterAndPortChangeCallback()
{
  return MEMORY[0x270F7E2D8]();
}

uint64_t TimeSyncClockSetgPTPGrandmasterChangeCallback()
{
  return MEMORY[0x270F7E2E0]();
}

uint64_t TimeSyncClockSetgPTPLocalPortChangeCallback()
{
  return MEMORY[0x270F7E2E8]();
}

uint64_t TimeSyncSystemDomainClockIdentifier()
{
  return MEMORY[0x270F7E2F0]();
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x270F06630](allocator, *(void *)&width, *(void *)&height, *(void *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  return MEMORY[0x270F06648](session, imageBuffer, presentationTimeStamp, duration, frameProperties, infoFlagsOut, outputHandler);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  return MEMORY[0x270F06668](session);
}

Boolean VTDecompressionSessionCanAcceptFormatDescription(VTDecompressionSessionRef session, CMFormatDescriptionRef newFormatDesc)
{
  return MEMORY[0x270F066D0](session, newFormatDesc);
}

OSStatus VTDecompressionSessionCreate(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFDictionaryRef videoDecoderSpecification, CFDictionaryRef destinationImageBufferAttributes, const VTDecompressionOutputCallbackRecord *outputCallback, VTDecompressionSessionRef *decompressionSessionOut)
{
  return MEMORY[0x270F066D8](allocator, videoFormatDescription, videoDecoderSpecification, destinationImageBufferAttributes, outputCallback, decompressionSessionOut);
}

OSStatus VTDecompressionSessionDecodeFrameWithOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionOutputHandler outputHandler)
{
  return MEMORY[0x270F066F0](session, sampleBuffer, *(void *)&decodeFlags, infoFlagsOut, outputHandler);
}

void VTDecompressionSessionInvalidate(VTDecompressionSessionRef session)
{
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x270F067E0](allocator, pixelTransferSessionOut);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x270F067F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x270F06820](session, propertyKey, propertyValue);
}

uint64_t _AXDarkenSystemColors()
{
  return MEMORY[0x270F90520]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabled()
{
  return MEMORY[0x270F90738]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x270ED7D10](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x270F98210](retstr, this);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98240](this, __c, __pos);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x270F98278](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  double v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  double v1 = (const std::string_view::value_type *)MEMORY[0x270F98290](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x270F982D0](this, a2.__data_, a2.__size_);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F984B0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98500](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x270F98668]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x270F98838](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x270F98848](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x270F989D8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::__libcpp_atomic_wait(const void *a1, std::__cxx_contention_t a2)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void std::__cxx_atomic_notify_all(const void *a1)
{
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const void *a1)
{
  return MEMORY[0x270F98A28](a1);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x270F98AF8](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x270F98B00](this, a2, a3, a4);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98B60](a1, __ec);
}

void *__cdecl std::align(size_t __align, size_t __sz, void **__ptr, size_t *__space)
{
  return (void *)MEMORY[0x270F98B88](__align, __sz, __ptr, __space);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98BC8](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x270F98C98]();
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x270F98E00](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E28](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x270F98EE8](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

float __exp10f(float a1)
{
  MEMORY[0x270ED7DD0](a1);
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  MEMORY[0x270ED7E18]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _exit(int a1)
{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x270ED8028](dso, description, activity, *(void *)&flags);
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x270ED8068]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x270ED80B0]();
}

float _simd_orient_pf2(simd_float2 a1, simd_float2 a2, simd_float2 a3)
{
  MEMORY[0x270ED82F8](*(__n128 *)a1.f32, *(__n128 *)a2.f32, *(__n128 *)a3.f32);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x270F18A78]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

uint64_t archive_entry_mtime()
{
  return MEMORY[0x270F97D68]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x270F97D88]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x270F97E20]();
}

uint64_t archive_entry_size_is_set()
{
  return MEMORY[0x270F97E28]();
}

uint64_t archive_errno()
{
  return MEMORY[0x270F97E50]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x270F97E58]();
}

uint64_t archive_read_data()
{
  return MEMORY[0x270F97E80]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x270F97EE0]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x270F97EF0]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x270F97EF8]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x270F97F20]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x270F97F28]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x270F97F78]();
}

uint64_t archive_read_support_format_zip_seekable()
{
  return MEMORY[0x270F97F80]();
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

at_encoder_t at_encoder_create(at_texel_format_t texelType, at_alpha_t texelAlphaType, at_block_format_t blockType, at_alpha_t blockAlphaType, const float *backgroundColor)
{
  return (at_encoder_t)MEMORY[0x270F98098](texelType, *(void *)&texelAlphaType, blockType, *(void *)&blockAlphaType, backgroundColor);
}

at_error_t at_encoder_decompress_texels(at_encoder_t encoder, const at_block_buffer_t *src, const at_texel_region_t *dest, at_flags_t flags)
{
  return MEMORY[0x270F980A0](encoder, src, dest, flags);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x270ED86F8](a1);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x270F98178](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x270F98180](atoken);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x270ED8718](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x270ED8730](a1, *(void *)&a2);
}

char *__cdecl basename(char *a1)
{
  return (char *)MEMORY[0x270ED8740](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x270ED87B8](__x);
  return result;
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x270F9A400](cls, name, imp, types);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x270F9A448](cls, extraBytes);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x270F9A468](cls);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x270F9A478](cls, name);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x270ED8EF8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x270F98F48](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x270F98F50](*(void *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x270F98F58](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x270F98F60](*(void *)&algorithm);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x270F98F68](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x270F98F78](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x270F98F80](stream, *(void *)&flags);
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x270F9C690](crc, buf, *(void *)&len);
}

int dgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__s, __CLPK_doublereal *__u, __CLPK_integer *__ldu, __CLPK_doublereal *__vt, __CLPK_integer *__ldvt, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x270EDE590](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x270ED9278](flags, block);
}

uint64_t dispatch_data_apply_f()
{
  return MEMORY[0x270ED92C0]();
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x270ED92D0](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_alloc()
{
  return MEMORY[0x270ED92D8]();
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x270ED92E0](data1, data2);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x270ED92F0](data, offset, length);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x270ED9320](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x270ED9468](label, attr, target);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return (void *)MEMORY[0x270ED9480](queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

double drand48(void)
{
  MEMORY[0x270ED9670]();
  return result;
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x270ED9718]();
}

float erff(float a1)
{
  MEMORY[0x270ED9798](a1);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x270ED9868](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int fegetenv(fenv_t *a1)
{
  return MEMORY[0x270ED9900](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x270ED9910](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x270ED9918](a1);
}

int fesetenv(const fenv_t *a1)
{
  return MEMORY[0x270ED9920](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  return MEMORY[0x270ED9960](a1, a2);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99C8](__buf, __size, __mode);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

int ftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int), int a3)
{
  return MEMORY[0x270ED9B70](a1, a2, *(void *)&a3);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

uint64_t geom_closest_point_to_triangle_3f()
{
  return MEMORY[0x270F302B0]();
}

uint64_t geom_collection_data_2f()
{
  return MEMORY[0x270F302C0]();
}

uint64_t geom_collection_data_u()
{
  return MEMORY[0x270F302C8]();
}

uint64_t geom_collection_size_2f()
{
  return MEMORY[0x270F302D0]();
}

uint64_t geom_collection_size_u()
{
  return MEMORY[0x270F302E8]();
}

uint64_t geom_convex_hull_2f()
{
  return MEMORY[0x270F302F0]();
}

uint64_t geom_create_collection_2f()
{
  return MEMORY[0x270F30300]();
}

uint64_t geom_create_collection_u()
{
  return MEMORY[0x270F30310]();
}

uint64_t geom_cubic_bezier_extract_2f()
{
  return MEMORY[0x270F30320]();
}

uint64_t geom_cubic_bezier_find_monotonic_intervals_2f()
{
  return MEMORY[0x270F30328]();
}

uint64_t geom_cubic_bezier_fit_with_quadratic_beziers_2f()
{
  return MEMORY[0x270F30330]();
}

uint64_t geom_intersect_line_segment_quadratic_bezier_2f()
{
  return MEMORY[0x270F30370]();
}

uint64_t geom_oriented_bounding_box_matrix_3f()
{
  return MEMORY[0x270F30378]();
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x270ED9BD0](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

int getpagesize(void)
{
  return MEMORY[0x270ED9CC8]();
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

kern_return_t host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt)
{
  return MEMORY[0x270ED9E48](*(void *)&host_priv, *(void *)&flavor, host_info64_out, host_info64_outCnt);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x270ED9EC0](*(void *)&a1, a2, a3, *(void *)&a4);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x270ED9F48]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x270EDA168](*(void *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x270EDA170]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x270EDA178]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x270EDA210](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x270EDA298](*(void *)&target, address, size);
}

kern_return_t mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, BOOLean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x270EDA2A8](*(void *)&target_task, address, size, mask, *(void *)&flags, *(void *)&object, offset, *(void *)&copy);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x270EDA490]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x270EDA570](a1, *(void *)&a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x270EDA618](__rqtp, __rmtp);
}

float nextafterf(float a1, float a2)
{
  MEMORY[0x270EDA718](a1, a2);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

void nw_connection_cancel(nw_connection_t connection)
{
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x270EF7B80](connection);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x270EF7BA8](endpoint, parameters);
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return MEMORY[0x270EF7BC8]();
}

void nw_connection_force_cancel(nw_connection_t connection)
{
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x270EF7D30]();
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x270EF7D40](context, protocol);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x270EF7D50](context_identifier);
}

void nw_content_context_set_metadata_for_protocol(nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x270EF7E50](endpoint);
}

char *__cdecl nw_endpoint_copy_port_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x270EF7E70](endpoint);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x270EF7EB0](hostname, port);
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  return (nw_protocol_definition_t)MEMORY[0x270EF8120](identifier, *(void *)&flags, start_handler);
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  return (nw_protocol_options_t)MEMORY[0x270EF8130](framer_definition);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  return MEMORY[0x270EF8150](framer, input_length, message, is_complete);
}

BOOL nw_framer_message_access_value(nw_framer_message_t message, const char *key, void *access_value)
{
  return MEMORY[0x270EF8168](message, key, access_value);
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  return (nw_framer_message_t)MEMORY[0x270EF8170](framer);
}

void nw_framer_message_set_value(nw_framer_message_t message, const char *key, void *value, nw_framer_message_dispose_value_t dispose_value)
{
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  return MEMORY[0x270EF8190](framer, minimum_incomplete_length, maximum_length, temp_buffer, parse);
}

nw_framer_message_t nw_framer_protocol_create_message(nw_protocol_definition_t definition)
{
  return (nw_framer_message_t)MEMORY[0x270EF81A0](definition);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  return MEMORY[0x270EF81D8](framer, output_length);
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x270EF8420](port, parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x270EF84F8](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x270EF8518]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x270EF8550](configure_tls, configure_tcp);
}

BOOL nw_protocol_metadata_is_framer_message(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x270EF8F30](metadata);
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

void nw_release(void *obj)
{
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x270EF94A0](obj);
}

nw_protocol_options_t nw_tcp_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x270EF94D8]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x270F9A550](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x270F9A5B8](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x270F9A600](obj);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

uint64_t objc_isUniquelyReferenced()
{
  return MEMORY[0x270F9A698]();
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x270F9AA40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_log_with_args()
{
  return MEMORY[0x270EDA9E0]();
}

void os_release(void *object)
{
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x270EDAA78]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x270EDAA80]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x270EDAAD8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x270EDAB40]();
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x270EDAD68](*(void *)&pid, *(void *)&flavor, buffer);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE50](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE58](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x270EDAE78](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x270EDAE88](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x270EDAEE0](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x270EDAEF0](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x270EDAF10](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x270EDAF18](a1, a2);
}

int pthread_key_delete(pthread_key_t a1)
{
  return MEMORY[0x270EDAF20](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x270EDAF78](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x270EDAF80](a1);
}

int pthread_mutexattr_setprotocol(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x270EDAF90](a1, *(void *)&a2);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x270EDAF98](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFC8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x270EDAFD0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFD8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF0](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF8](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x270EDB038](a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x270EDB040](a1, *(void *)&a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x270EDB1D8](__x, __y);
  return result;
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

int renamex_np(const char *a1, const char *a2, unsigned int a3)
{
  return MEMORY[0x270EDB248](a1, a2, *(void *)&a3);
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x270EDB2D8]();
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

kern_return_t semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value)
{
  return MEMORY[0x270EDB370](*(void *)&task, semaphore, *(void *)&policy, *(void *)&value);
}

kern_return_t semaphore_destroy(task_t task, semaphore_t semaphore)
{
  return MEMORY[0x270EDB378](*(void *)&task, *(void *)&semaphore);
}

kern_return_t semaphore_signal(semaphore_t semaphore)
{
  return MEMORY[0x270EDB380](*(void *)&semaphore);
}

kern_return_t semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time)
{
  return ((uint64_t (*)(void, void))MEMORY[0x270EDB390])(*(void *)&semaphore, wait_time);
}

kern_return_t semaphore_wait(semaphore_t semaphore)
{
  return MEMORY[0x270EDB3A0](*(void *)&semaphore);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x270EDB518](a1, a2, a3, a4);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B490](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x270F9B4A0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x270F9B4A8](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x270F9B4B8](a1, *(void *)&a2);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x270F9B558](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B568](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B570](a1, *(void *)&iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B598](a1, *(void *)&iCol);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x270F9B668](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B690](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x270F9B710](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x270F9B720](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B730](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B800](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x270EDB598](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB668](__s1, __s2);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x270EDB6B8](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x270EDB720](a1, a2, *(void *)&a3, a4);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x270EDB7D8](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

kern_return_t task_create_identity_token(task_t task, task_id_token_t *token)
{
  return MEMORY[0x270EDB830](*(void *)&task, token);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

long double tgamma(long double __x)
{
  MEMORY[0x270EDB8E0](__x);
  return result;
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x270EDBA08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x270EDBA28](uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vtabi(const float *__A, vDSP_Stride __IA, const float *__S1, const float *__S2, const float *__C, vDSP_Length __M, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x270EDEF18](buf, height, width, *(void *)&pixelBits, *(void *)&flags);
}

Boolean vImageCGImageFormat_IsEqual(const vImage_CGImageFormat *f1, const vImage_CGImageFormat *f2)
{
  return MEMORY[0x270EDEF38](f1, f2);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDEFE8](converter, srcs, dests, tempBuffer, *(void *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGColorConversionInfo(CGColorConversionInfoRef colorConversionInfoRef, const vImage_CGImageFormat *sFormat, const vImage_CGImageFormat *dFormat, const CGFloat *bg, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x270EDF150](colorConversionInfoRef, sFormat, dFormat, bg, *(void *)&flags, error);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x270EDF158](srcFormat, destFormat, backgroundColor, *(void *)&flags, error);
}

unint64_t vImageConverter_GetNumberOfDestinationBuffers(const vImageConverterRef converter)
{
  return MEMORY[0x270EDF160](converter);
}

unint64_t vImageConverter_GetNumberOfSourceBuffers(const vImageConverterRef converter)
{
  return MEMORY[0x270EDF168](converter);
}

void vImageConverter_Release(vImageConverterRef converter)
{
}

vImage_Error vImageScale_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF308](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGB16S(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF318](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF320](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF328](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF340](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_CbCr16U(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF348](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_CbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF358](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF360](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16S(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF370](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF378](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF380](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF390](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_XRGB2101010W(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF3A0](src, dest, tempBuffer, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x270EDBAD0]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x270EDBAD8]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

uint64_t xpc_mach_send_copy_right()
{
  return MEMORY[0x270EDC260]();
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x270EDC268]();
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x270EDC3B0](region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x270EDC3C0](xshmem, region);
}