void re::internal::defaultConstruct<re::FilterMapAtlasData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E70E1B0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 115;
  *(void *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultConstructV2<re::FilterMapAtlasData>(uint64_t result)
{
  *(void *)result = &unk_26E70E1B0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 115;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_FilterMapAtlasData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FilterMapAtlasData", (uint64_t (*)(re::internal *))re::allocInfo_FilterMapAtlasData, (re::IntrospectionBase *(*)(void))re::initInfo_FilterMapAtlasData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FilterMapAtlasData>, this);
}

void *re::allocInfo_ShadowMapAtlasData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF942A8, "ShadowMapAtlasData");
    __cxa_guard_release(&qword_26AF93E88);
  }
  return &unk_26AF942A8;
}

void re::initInfo_ShadowMapAtlasData(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0xD3AD1B4260300C72;
  v21[1] = "ShadowMapAtlasData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E90, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF93E90);
    if (v4)
    {
      v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93F00 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "atlasWidth";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF93F08 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "atlasHeight";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xC00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF93F10 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::mtl::introspect_PixelFormat((re::mtl *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "format";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF93F18 = v19;
      __cxa_guard_release(&qword_26AF93E90);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF93F00;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ShadowMapAtlasData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ShadowMapAtlasData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ShadowMapAtlasData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ShadowMapAtlasData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void re::internal::defaultConstruct<re::ShadowMapAtlasData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E70E1F0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 252;
}

uint64_t re::internal::defaultConstructV2<re::ShadowMapAtlasData>(uint64_t result)
{
  *(void *)result = &unk_26E70E1F0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 252;
  return result;
}

uint64_t re::introspect_ShadowMapAtlasData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowMapAtlasData", (uint64_t (*)(re::internal *))re::allocInfo_ShadowMapAtlasData, (re::IntrospectionBase *(*)(void))re::initInfo_ShadowMapAtlasData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShadowMapAtlasData>, this);
}

void *re::allocInfo_CameraData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94320, "CameraData");
    __cxa_guard_release(&qword_26AF93E98);
  }
  return &unk_26AF94320;
}

void re::initInfo_CameraData(re *this, re::IntrospectionBase *a2)
{
  v60[0] = 0xD325DFDB7D11ELL;
  v60[1] = "CameraData";
  re::StringID::destroyString((re::StringID *)v60);
  *((_OWORD *)this + 2) = v61;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93EA0, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF93EA0);
    if (v4)
    {
      v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93F68 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "clearColor";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1A000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF93F70 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "clearDepth";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1B000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF93F78 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "loadDepth";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x1C800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF93F80 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_BOOL((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "saveDepth";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x1C900000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF93F88 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_BOOL((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "loadStencil";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x1CA00000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF93F90 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_BOOL((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "saveStencil";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x1CB00000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF93F98 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_BOOL((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "drawDebug";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x1CC00000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF93FA0 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_BOOL((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "enableUnwarp";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x1CD0000000ALL;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF93FA8 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_uint32_t((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "msaaSamples";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0x1E40000000BLL;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF93FB0 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::mtl::introspect_MultisampleDepthResolveFilter((re::mtl *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "depthResolveFilter";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x1EC0000000CLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF93FB8 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      v49 = re::mtl::introspect_MultisampleStencilResolveFilter((re::mtl *)1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "stencilResolveFilter";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0x1F00000000DLL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF93FC0 = v50;
      v51 = re::introspectionAllocator((re *)v50);
      Action = re::mtl::introspect_LoadAction((re::mtl *)1, v52);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "colorLoadAction";
      *(void *)(v54 + 16) = Action;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0x1F40000000ELL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF93FC8 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v57 = re::introspect_uint32_t((re *)1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "clearStencil";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0x1FC0000000FLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF93FD0 = v58;
      __cxa_guard_release(&qword_26AF93EA0);
    }
  }
  *((void *)this + 2) = 0x21000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((void *)this + 8) = &qword_26AF93F68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CameraData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CameraData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::CameraData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CameraData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v59 = v61;
}

re::CameraData *re::internal::defaultConstruct<re::CameraData>(int a1, int a2, re::CameraData *this)
{
  return re::CameraData::CameraData(this);
}

double re::internal::defaultDestruct<re::CameraData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 272) = 0;
  ++*(_DWORD *)(a3 + 280);
  *(void *)(a3 + 128) = 0;
  ++*(_DWORD *)(a3 + 136);
  *(void *)(a3 + 48) = 0;
  ++*(_DWORD *)(a3 + 56);
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
}

double re::internal::defaultDestructV2<re::CameraData>(uint64_t a1)
{
  *(void *)(a1 + 272) = 0;
  ++*(_DWORD *)(a1 + 280);
  *(void *)(a1 + 128) = 0;
  ++*(_DWORD *)(a1 + 136);
  *(void *)(a1 + 48) = 0;
  ++*(_DWORD *)(a1 + 56);
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
}

uint64_t re::introspect_CameraData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraData", (uint64_t (*)(re::internal *))re::allocInfo_CameraData, (re::IntrospectionBase *(*)(void))re::initInfo_CameraData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CameraData>, this);
}

void *re::allocInfo_CameraMatrices(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93EA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93EA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94398, "CameraMatrices");
    __cxa_guard_release(&qword_26AF93EA8);
  }
  return &unk_26AF94398;
}

void re::initInfo_CameraMatrices(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0xF750B3A91D24CF7ELL;
  v19[1] = "CameraMatrices";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93EB0, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF93EB0);
    if (v4)
    {
      v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93F20 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "worldToView";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF93F28 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      v12 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "viewToProj";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF93F30 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint8_t((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "viewportCount";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x8000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF93F38 = v17;
      __cxa_guard_release(&qword_26AF93EB0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF93F20;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CameraMatrices>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CameraMatrices>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::CameraMatrices>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CameraMatrices>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

double re::internal::defaultConstruct<re::CameraMatrices>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E70E270;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(void *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 128) = 1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::CameraMatrices>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 48);
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::CameraMatrices>(uint64_t a1)
{
  *(void *)a1 = &unk_26E70E270;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CameraMatrices>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 48);
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

uint64_t re::introspect_CameraMatrices(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraMatrices", (uint64_t (*)(re::internal *))re::allocInfo_CameraMatrices, (re::IntrospectionBase *(*)(void))re::initInfo_CameraMatrices, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CameraMatrices>, this);
}

void re::StencilInfoData::~StencilInfoData(re::StencilInfoData *this)
{
}

void re::ViewportData::~ViewportData(re::ViewportData *this)
{
}

void re::VRRData::~VRRData(re::VRRData *this)
{
}

void re::ThreadGroupMemoryData::~ThreadGroupMemoryData(re::ThreadGroupMemoryData *this)
{
}

unint64_t re::ThreadGroupMemoryData::hash(re::ThreadGroupMemoryData *this)
{
  unint64_t v1 = *((void *)this + 2) * *((unsigned __int8 *)this + 8);
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) >> 27));
  return v2 ^ (v2 >> 31);
}

void re::TriangleFillModeData::~TriangleFillModeData(re::TriangleFillModeData *this)
{
}

void re::FilterMapAtlasData::~FilterMapAtlasData(re::FilterMapAtlasData *this)
{
}

void re::ShadowMapAtlasData::~ShadowMapAtlasData(re::ShadowMapAtlasData *this)
{
}

re::CameraData *re::CameraData::CameraData(re::CameraData *this)
{
  *(void *)this = &unk_26E70E230;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  unint64_t v2 = (void *)((char *)this + 8);
  re::DynamicString::setCapacity(v2, 0);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 115) = 65537;
  *((unsigned char *)this + 464) = 0;
  *((_DWORD *)this + 117) = 1065353216;
  *((_WORD *)this + 236) = 1;
  *((unsigned char *)this + 476) = 0;
  *((_DWORD *)this + 121) = 1;
  *((unsigned char *)this + 490) = 1;
  *((_DWORD *)this + 125) = 2;
  *((void *)this + 63) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 512) = 0;
  return this;
}

void re::CameraData::~CameraData(re::CameraData *this)
{
  *((void *)this + 34) = 0;
  ++*((_DWORD *)this + 70);
  *((void *)this + 16) = 0;
  ++*((_DWORD *)this + 34);
  *((void *)this + 6) = 0;
  ++*((_DWORD *)this + 14);
  re::DynamicString::deinit((re::CameraData *)((char *)this + 8));
}

{
  uint64_t vars8;

  *((void *)this + 34) = 0;
  ++*((_DWORD *)this + 70);
  *((void *)this + 16) = 0;
  ++*((_DWORD *)this + 34);
  *((void *)this + 6) = 0;
  ++*((_DWORD *)this + 14);
  re::DynamicString::deinit((re::CameraData *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void re::CameraMatrices::~CameraMatrices(re::CameraMatrices *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::shadowLogObjects(re *this)
{
  {
    re::shadowLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Shadow");
  }
  return &re::shadowLogObjects(void)::logObjects;
}

uint64_t re::DataArray<re::TextureAtlasTile>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    unint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::TextureAtlasTile>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    double result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

unint64_t re::TextureAtlas::requestTile(re::TextureAtlas *this, int a2, int a3, float a4)
{
  int v8 = a3;
  int v9 = a2;
  float v7 = a4;
  v4 = (unsigned int *)((char *)this + 8);
  if (!*((_DWORD *)this + 13))
  {
    *((void *)this + 1) = *((void *)this + 11);
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 1, 0);
    ++*((_DWORD *)this + 8);
    *((_DWORD *)this + 13) = 32;
    re::DataArray<re::TextureAtlasTile>::allocBlock(v4);
    re::DataArray<re::TextureAtlasTile>::clear(v4);
  }
  return re::DataArray<re::TextureAtlasTile>::create<unsigned int &,unsigned int &,float &>((uint64_t)v4, &v9, &v8, (int *)&v7);
}

double re::DataArray<re::TextureAtlasTile>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::TextureAtlasTile>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

unint64_t re::DataArray<re::TextureAtlasTile>::create<unsigned int &,unsigned int &,float &>(uint64_t a1, _DWORD *a2, int *a3, int *a4)
{
  int v8 = *(_DWORD *)(a1 + 56);
  if ((v8 + 1) >> 24) {
    int v9 = 1;
  }
  else {
    int v9 = v8 + 1;
  }
  *(_DWORD *)(a1 + 56) = v9;
  uint64_t v10 = *(unsigned __int16 *)(a1 + 52);
  unint64_t v11 = *(unsigned __int16 *)(a1 + 54);
  if (v10 == 0xFFFF && v11 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44)) {
      re::DataArray<re::TextureAtlasTile>::allocBlock((unsigned int *)a1);
    }
    uint64_t v15 = *(void *)(a1 + 16);
    unint64_t v11 = (unsigned __int16)(v15 - 1);
    if (v15)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 48);
      if (v10 < 0x10000)
      {
        v16 = (void *)(*(void *)(a1 + 32) + 16 * v11);
        *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v10 + 1;
        *(_DWORD *)(v16[1] + 4 * v10) = *(_DWORD *)(a1 + 56);
        uint64_t v14 = *v16 + 24 * v10;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v10, v20, v21);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    uint64_t v20 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(void *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 16) <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = (void *)(*(void *)(a1 + 32) + 16 * v11);
  *(_DWORD *)(v13[1] + 4 * v10) = v9;
  uint64_t v14 = *v13 + 24 * v10;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v14;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  int v17 = *a3;
  int v18 = *a4;
  *(_DWORD *)uint64_t v14 = *a2;
  *(_DWORD *)(v14 + 4) = v17;
  *(_DWORD *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v18;
  *(_DWORD *)(v14 + 12) = 0;
  *(_DWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 20) = -1;
  return (v11 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v10;
}

uint64_t re::DataArray<re::TextureAtlasTile>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 24 * (unsigned __int16)a2;
}

_DWORD *re::DataArray<re::TextureAtlasTile>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  double result = (_DWORD *)re::DataArray<re::TextureAtlasTile>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *double result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::TextureAtlas::allocateTiles(uint64_t this, unsigned int a2)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(this + 48)) {
    return this;
  }
  uint64_t v2 = this;
  uint64_t v3 = this + 8;
  uint64_t v4 = *(void *)(this + 88);
  v95 = 0;
  long long v93 = 0uLL;
  int v94 = 0;
  uint64_t v92 = v4;
  re::DynamicArray<float *>::setCapacity(&v92, 0);
  int v5 = ++v94;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v101, v3, 0);
  if (v3 == v101 && (unsigned __int16)v102 == 0xFFFFLL && (v102 & 0xFFFF0000) == 0xFFFF0000)
  {
    uint64_t v6 = (uint64_t)v95;
    unint64_t v7 = *((void *)&v93 + 1);
  }
  else
  {
    unint64_t v7 = *((void *)&v93 + 1);
    do
    {
      unint64_t v8 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v101);
      if (v7 >= (unint64_t)v93)
      {
        re::DynamicArray<float *>::growCapacity(&v92, v7 + 1);
        unint64_t v7 = *((void *)&v93 + 1);
        int v5 = v94;
      }
      uint64_t v6 = (uint64_t)v95;
      v95[v7++] = v8;
      *((void *)&v93 + 1) = v7;
      int v94 = ++v5;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v101);
    }
    while (v101 != v3 || (unsigned __int16)v102 != 0xFFFF || WORD1(v102) != 0xFFFF);
  }
  uint64_t v101 = v2;
  unint64_t v11 = 126 - 2 * __clz(v7);
  if (v7) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(v6, (uint64_t *)(v6 + 8 * v7), &v101, v12, 1);
  unsigned __int16 v82 = 0;
  uint64_t v80 = v2;
  do
  {
    unsigned int v13 = *(_DWORD *)(v2 + 72);
    unsigned int v86 = *(_DWORD *)(v2 + 76);
    uint64_t v14 = *(void *)(v2 + 88);
    long long v89 = 0uLL;
    int v90 = 0;
    v91 = 0;
    uint64_t v88 = v14;
    re::DynamicArray<float *>::setCapacity(&v88, 0);
    int v87 = ++v90;
    uint64_t v15 = *(uint64_t **)(v2 + 88);
    unint64_t v97 = 0;
    unint64_t v98 = 0;
    int v99 = 0;
    uint64_t v100 = 0;
    v96 = v15;
    int v18 = ++v99;
    if (v98 >= v97)
    {
      unint64_t v19 = v98 + 1;
      if (v97 < v98 + 1)
      {
        if (v96)
        {
          unint64_t v20 = 2 * v97;
          if (!v97) {
            unint64_t v20 = 8;
          }
          if (v20 <= v19) {
            unint64_t v21 = v98 + 1;
          }
          else {
            unint64_t v21 = v20;
          }
          int v18 = v99;
        }
        else
        {
          int v18 = v99 + 1;
        }
      }
    }
    uint64_t v22 = v100;
    unint64_t v23 = v98;
    uint64_t v24 = v100 + 28 * v98;
    *(_OWORD *)uint64_t v24 = xmmword_234378E20;
    unsigned int v25 = v86;
    *(_DWORD *)(v24 + 16) = v13;
    *(_DWORD *)(v24 + 20) = v86;
    *(unsigned char *)(v24 + 24) = 0;
    unint64_t v26 = v23 + 1;
    unint64_t v98 = v23 + 1;
    int v99 = v18 + 1;
    if (!*((void *)&v93 + 1)) {
      goto LABEL_77;
    }
    v27 = v95;
    v28 = &v95[*((void *)&v93 + 1)];
    unsigned int v84 = v13;
    v83 = v28;
    do
    {
      v29 = (unsigned int *)re::DataArray<re::TextureAtlasTile>::get(v3, *v27);
      if (*v29 > v13 || v29[1] > v25) {
        goto LABEL_74;
      }
      if (!v26) {
        goto LABEL_104;
      }
      v31 = v29;
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      int v85 = *(_DWORD *)(v22 + 16);
      unint64_t v34 = v26;
      while (1)
      {
        v35 = (void *)(v22 + 28 * v32);
        unint64_t v36 = *(unsigned int *)v35;
        if (*v35 == -1) {
          break;
        }
        uint64_t v37 = v33;
        if (v33 >= 0x40) {
          goto LABEL_94;
        }
        uint64_t v33 = (v33 + 1);
        *((_DWORD *)&v101 + v37) = v32;
        unint64_t v32 = v36;
LABEL_42:
        if (v34 <= v32)
        {
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v32;
          __int16 v110 = 2048;
          unint64_t v111 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_94:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v37, 64);
          _os_crash();
          __break(1u);
LABEL_95:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v33, 64);
          _os_crash();
          __break(1u);
LABEL_96:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v32;
          __int16 v110 = 2048;
          unint64_t v111 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_97:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v32;
          __int16 v110 = 2048;
          unint64_t v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_98:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v34;
          __int16 v110 = 2048;
          unint64_t v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_99:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v34;
          __int16 v110 = 2048;
          unint64_t v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_100:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v34;
          __int16 v110 = 2048;
          unint64_t v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = v34;
          __int16 v110 = 2048;
          unint64_t v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_102:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v62, 64);
          _os_crash();
          __break(1u);
LABEL_103:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v62, 64);
          _os_crash();
          __break(1u);
LABEL_104:
          uint64_t v103 = 0;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v104 = 136315906;
          v105 = "operator[]";
          __int16 v106 = 1024;
          int v107 = 789;
          __int16 v108 = 2048;
          unint64_t v109 = 0;
          __int16 v110 = 2048;
          unint64_t v111 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_105:
          re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
        }
      }
      uint64_t v38 = v22 + 28 * v32;
      int v40 = *(unsigned __int8 *)(v38 + 24);
      v39 = (unsigned char *)(v38 + 24);
      if (!v40)
      {
        unsigned int v41 = *(_DWORD *)(v22 + 28 * v32 + 16);
        if (v41 == *v31 && *(_DWORD *)(v22 + 28 * v32 + 20) == v31[1])
        {
          unsigned char *v39 = 1;
          *((_WORD *)v31 + 10) = v82;
          uint64_t v74 = v22 + 28 * v32;
          unsigned int v13 = v84;
          v31[3] = *(_DWORD *)(v74 + 8) + v85 * v82;
          v31[4] = *(_DWORD *)(v74 + 12);
          goto LABEL_73;
        }
        if (v41 >= *v31 && *(_DWORD *)(v22 + 28 * v32 + 20) >= v31[1])
        {
          unint64_t v26 = v34 + 2;
          if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            if (v97 < v26)
            {
              unint64_t v34 = v98;
            }
            if (v34 < v26)
            {
              uint64_t v42 = v100 + 28 * v34;
              uint64_t v43 = 28 * v26 - 28 * v34;
              if (v43 >= 1)
              {
                unint64_t v44 = v43 / 0x1CuLL + 1;
                do
                {
                  *(void *)uint64_t v42 = 0;
                  *(void *)(v42 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
                  *(unsigned char *)(v42 + 24) = 0;
                  *(void *)(v42 + 16) = 0;
                  v42 += 28;
                  --v44;
                }
                while (v44 > 1);
              }
            }
          }
          unint64_t v98 = v26;
          ++v99;
          if (v26 <= v32) {
            goto LABEL_97;
          }
          uint64_t v22 = v100;
          v45 = (int32x2_t *)(v100 + 28 * v32);
          int32x2_t v46 = vadd_s32(vdup_n_s32(v26), (int32x2_t)-2);
          int32x2_t *v45 = v46;
          v47 = (int *)&v45[2] + 1;
          unsigned int v48 = v45[2].u32[1];
          unsigned int v49 = *v31;
          unsigned int v50 = v31[1];
          v51 = v45 + 2;
          unsigned int v52 = v45[2].u32[0];
          unint64_t v34 = v46.i32[0];
          if ((v48 - v50) * *v31 >= (v52 - *v31) * v50)
          {
            if (v26 <= v46.i32[0]) {
              goto LABEL_99;
            }
            uint64_t v63 = v22 + 28 * v46.i32[0];
            uint64_t v64 = v22 + 28 * v32;
            uint64_t v66 = *(void *)(v64 + 8);
            v65 = (int *)(v64 + 8);
            *(void *)uint64_t v63 = -1;
            *(void *)(v63 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v66;
            *(_DWORD *)(v63 + 16) = v52;
            *(_DWORD *)(v63 + 20) = v50;
            *(unsigned char *)(v63 + 24) = 0;
            unint64_t v34 = v45->i32[1];
            if (v26 <= v34) {
              goto LABEL_101;
            }
            int v67 = *v65;
            __int32 v68 = v51->i32[0];
            uint64_t v69 = v22 + 28 * (int)v34;
            unsigned int v70 = *(_DWORD *)(v22 + 28 * v32 + 12) + v50;
            unsigned int v71 = *v47 - v50;
            *(void *)uint64_t v69 = -1;
            *(_DWORD *)(v69 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v67;
            *(_DWORD *)(v69 + 12) = v70;
            *(_DWORD *)(v69 + 16) = v68;
            *(_DWORD *)(v69 + 20) = v71;
            *(unsigned char *)(v69 + 24) = 0;
            uint64_t v62 = v33;
            if (v33 >= 0x40) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v26 <= v46.i32[0]) {
              goto LABEL_98;
            }
            uint64_t v53 = v22 + 28 * v46.i32[0];
            uint64_t v54 = v22 + 28 * v32;
            uint64_t v56 = *(void *)(v54 + 8);
            v55 = (_DWORD *)(v54 + 8);
            *(void *)uint64_t v53 = -1;
            *(void *)(v53 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v56;
            *(_DWORD *)(v53 + 16) = v49;
            *(_DWORD *)(v53 + 20) = v48;
            *(unsigned char *)(v53 + 24) = 0;
            unint64_t v34 = v45->i32[1];
            if (v26 <= v34) {
              goto LABEL_100;
            }
            int v57 = *(_DWORD *)(v22 + 28 * v32 + 12);
            int v58 = *v47;
            uint64_t v59 = v22 + 28 * (int)v34;
            unsigned int v60 = *v55 + v49;
            unsigned __int32 v61 = v51->i32[0] - v49;
            *(void *)uint64_t v59 = -1;
            *(_DWORD *)(v59 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v60;
            *(_DWORD *)(v59 + 12) = v57;
            *(_DWORD *)(v59 + 16) = v61;
            *(_DWORD *)(v59 + 20) = v58;
            *(unsigned char *)(v59 + 24) = 0;
            uint64_t v62 = v33;
            if (v33 >= 0x40) {
              goto LABEL_102;
            }
          }
          *((_DWORD *)&v101 + v62) = v32;
          uint64_t v33 = (v33 + 1);
          unint64_t v32 = v45->u32[0];
          unint64_t v34 = v26;
          goto LABEL_42;
        }
      }
      if (v33)
      {
        uint64_t v33 = (v33 - 1);
        if (v33 >= 0x40) {
          goto LABEL_95;
        }
        unint64_t v32 = *((unsigned int *)&v101 + v33);
        if (v34 <= v32) {
          goto LABEL_96;
        }
        unint64_t v32 = *(unsigned int *)(v22 + 28 * v32 + 4);
        goto LABEL_42;
      }
      *((_WORD *)v31 + 10) = -1;
      v31[3] = 0;
      v31[4] = 0;
      uint64_t v72 = *((void *)&v89 + 1);
      unsigned int v13 = v84;
      int v73 = v87;
      if (*((void *)&v89 + 1) >= (unint64_t)v89)
      {
        re::DynamicArray<float *>::growCapacity(&v88, *((void *)&v89 + 1) + 1);
        uint64_t v72 = *((void *)&v89 + 1);
        int v73 = v90;
      }
      v91[v72] = *v27;
      *((void *)&v89 + 1) = v72 + 1;
      int v87 = v73 + 1;
      int v90 = v73 + 1;
LABEL_73:
      unsigned int v25 = v86;
      v28 = v83;
LABEL_74:
      ++v27;
    }
    while (v27 != v28);
LABEL_77:
    if (v96 && v22) {
      (*(void (**)(void))(*v96 + 40))();
    }
    this = v92;
    uint64_t v75 = v88;
    uint64_t v2 = v80;
    if (v92 && v88 && v92 != v88) {
      goto LABEL_105;
    }
    uint64_t v88 = v92;
    uint64_t v76 = *((void *)&v89 + 1);
    long long v77 = v93;
    uint64_t v92 = v75;
    long long v93 = v89;
    long long v89 = v77;
    v78 = v95;
    v79 = v91;
    v95 = v91;
    ++v94;
    if (this && v78) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 40))(this);
    }
    ++v82;
  }
  while (v82 < a2 && v76);
  *(_WORD *)(v80 + 80) = v82;
  if (v82) {
    *(_DWORD *)(v80 + 72) *= v82;
  }
  if (v75)
  {
    if (v79) {
      return (*(uint64_t (**)(uint64_t, void *))(*(void *)v75 + 40))(v75, v79);
    }
  }
  return this;
}

void *re::DynamicArray<anonymous namespace'::PackNode>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x1CuLL))
        {
          uint64_t v2 = 28 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 28 * a2, 4);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 28 * v5[2]);
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 28, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::DataArray<re::TextureAtlasTile>::allocBlock(unsigned int *a1)
{
  uint64_t v2 = 24 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    uint64_t v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(void *)(*(void *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(void *)(*(void *)a1 + 8));
  _os_crash();
  __break(1u);
}

uint64_t re::DataArray<re::TextureAtlasTile>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 24 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    v132 = a2 - 2;
    v134 = a2 - 1;
    v137 = a2;
    v131 = a2 - 3;
    unint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v11;
          uint64_t v12 = v137;
          uint64_t v13 = (char *)v137 - (char *)v11;
          uint64_t v14 = v137 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v68 = *a3 + 8;
                float v69 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v68, *(v137 - 1)) + 8);
                double result = re::DataArray<re::TextureAtlasTile>::get(v68, *v10);
                if (v69 < *(float *)(result + 8))
                {
                  uint64_t v70 = *v10;
                  uint64_t *v10 = *(v137 - 1);
                  *(v137 - 1) = v70;
                }
                break;
              case 3:
                double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10, v10 + 1, v134, a3);
                break;
              case 4:
                double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10, v10 + 1, v10 + 2, v134, a3);
                break;
              case 5:
                double result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(v10, v10 + 1, v10 + 2, v10 + 3, v134, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unsigned int v71 = v10 + 1;
            BOOL v73 = v10 == v137 || v71 == v137;
            if (a5)
            {
              if (!v73)
              {
                uint64_t v74 = 0;
                uint64_t v75 = v10;
                do
                {
                  uint64_t v76 = v75;
                  uint64_t v75 = v71;
                  uint64_t v77 = *a3 + 8;
                  float v78 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v77, v76[1]) + 8);
                  double result = re::DataArray<re::TextureAtlasTile>::get(v77, *v76);
                  if (v78 < *(float *)(result + 8))
                  {
                    uint64_t v79 = *v75;
                    uint64_t v80 = v74;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v80 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(uint64_t *)((char *)v10 + v80);
                      if (!v80) {
                        break;
                      }
                      uint64_t v81 = *a3 + 8;
                      float v82 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v81, v79) + 8);
                      double result = re::DataArray<re::TextureAtlasTile>::get(v81, *(uint64_t *)((char *)v10 + v80 - 8));
                      v80 -= 8;
                      if (v82 >= *(float *)(result + 8))
                      {
                        v83 = (uint64_t *)((char *)v10 + v80 + 8);
                        goto LABEL_81;
                      }
                    }
                    v83 = v10;
LABEL_81:
                    uint64_t *v83 = v79;
                  }
                  unsigned int v71 = v75 + 1;
                  v74 += 8;
                }
                while (v75 + 1 != v137);
              }
            }
            else if (!v73)
            {
              do
              {
                v122 = v10;
                uint64_t v10 = v71;
                uint64_t v123 = *a3 + 8;
                float v124 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v123, v122[1]) + 8);
                double result = re::DataArray<re::TextureAtlasTile>::get(v123, *v122);
                if (v124 < *(float *)(result + 8))
                {
                  uint64_t v125 = *v10;
                  v126 = v10;
                  do
                  {
                    v127 = v126;
                    uint64_t v128 = *--v126;
                    uint64_t *v127 = v128;
                    uint64_t v129 = *a3 + 8;
                    float v130 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v129, v125) + 8);
                    double result = re::DataArray<re::TextureAtlasTile>::get(v129, *(v127 - 2));
                  }
                  while (v130 < *(float *)(result + 8));
                  uint64_t *v126 = v125;
                }
                unsigned int v71 = v10 + 1;
              }
              while (v10 + 1 != v137);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v137)
            {
              int64_t v84 = (unint64_t)(v14 - 2) >> 1;
              int64_t v135 = v84;
              do
              {
                int64_t v85 = v84;
                if (v135 >= v84)
                {
                  uint64_t v86 = (2 * v84) | 1;
                  int v87 = &v10[v86];
                  uint64_t v88 = 2 * v84 + 2;
                  if (v88 < v14)
                  {
                    int64_t v89 = v84;
                    uint64_t v90 = *a3 + 8;
                    float v91 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v90, *v87) + 8);
                    uint64_t v92 = v90;
                    int64_t v85 = v89;
                    if (v91 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v92, v87[1]) + 8))
                    {
                      ++v87;
                      uint64_t v86 = v88;
                    }
                  }
                  long long v93 = &v10[v85];
                  uint64_t v94 = *a3 + 8;
                  float v95 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v94, *v87) + 8);
                  double result = re::DataArray<re::TextureAtlasTile>::get(v94, *v93);
                  if (v95 >= *(float *)(result + 8))
                  {
                    uint64_t v133 = *v93;
                    do
                    {
                      v96 = v93;
                      long long v93 = v87;
                      uint64_t *v96 = *v87;
                      if (v135 < v86) {
                        break;
                      }
                      uint64_t v97 = 2 * v86;
                      uint64_t v86 = (2 * v86) | 1;
                      int v87 = &v10[v86];
                      uint64_t v98 = v97 + 2;
                      if (v97 + 2 < v14)
                      {
                        uint64_t v99 = *a3 + 8;
                        float v100 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v99, *v87) + 8);
                        if (v100 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v99, v87[1]) + 8))
                        {
                          ++v87;
                          uint64_t v86 = v98;
                        }
                      }
                      uint64_t v101 = *a3 + 8;
                      float v102 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v101, *v87) + 8);
                      double result = re::DataArray<re::TextureAtlasTile>::get(v101, v133);
                    }
                    while (v102 >= *(float *)(result + 8));
                    *long long v93 = v133;
                  }
                }
                int64_t v84 = v85 - 1;
              }
              while (v85);
              uint64_t v103 = (unint64_t)v13 >> 3;
              int v104 = v137;
              do
              {
                uint64_t v105 = 0;
                uint64_t v136 = *v10;
                v138 = v104;
                __int16 v106 = v10;
                do
                {
                  int v107 = v106;
                  v106 += v105 + 1;
                  uint64_t v108 = 2 * v105;
                  uint64_t v105 = (2 * v105) | 1;
                  uint64_t v109 = v108 + 2;
                  if (v108 + 2 < v103)
                  {
                    uint64_t v110 = *a3 + 8;
                    float v111 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v110, *v106) + 8);
                    double result = re::DataArray<re::TextureAtlasTile>::get(v110, v106[1]);
                    if (v111 < *(float *)(result + 8))
                    {
                      ++v106;
                      uint64_t v105 = v109;
                    }
                  }
                  *int v107 = *v106;
                }
                while (v105 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
                int v104 = v138 - 1;
                if (v106 == v138 - 1)
                {
                  *__int16 v106 = v136;
                }
                else
                {
                  *__int16 v106 = *v104;
                  *int v104 = v136;
                  uint64_t v112 = (char *)v106 - (char *)v10 + 8;
                  if (v112 >= 9)
                  {
                    unint64_t v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                    long long v114 = &v10[v113];
                    uint64_t v115 = *a3 + 8;
                    float v116 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v115, *v114) + 8);
                    double result = re::DataArray<re::TextureAtlasTile>::get(v115, *v106);
                    if (v116 < *(float *)(result + 8))
                    {
                      uint64_t v117 = *v106;
                      do
                      {
                        v118 = v106;
                        __int16 v106 = v114;
                        uint64_t *v118 = *v114;
                        if (!v113) {
                          break;
                        }
                        unint64_t v113 = (v113 - 1) >> 1;
                        long long v114 = &v10[v113];
                        uint64_t v119 = *a3 + 8;
                        float v120 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v119, *v114) + 8);
                        double result = re::DataArray<re::TextureAtlasTile>::get(v119, v117);
                      }
                      while (v120 < *(float *)(result + 8));
                      *__int16 v106 = v117;
                    }
                  }
                }
              }
              while (v103-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          v16 = &v10[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v16, v10, v134, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10, v16, v134, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10 + 1, v16 - 1, v132, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10 + 2, &v10[v15 + 1], v131, a3);
            uint64_t v12 = v137;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v16 - 1, v16, &v10[v15 + 1], a3);
            uint64_t v17 = *v10;
            uint64_t *v10 = *v16;
            uint64_t *v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v18 = *a3 + 8;
          float v19 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v18, *(v10 - 1)) + 8);
          if (v19 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v18, *v10) + 8)) {
            break;
          }
          uint64_t v43 = *v10;
          uint64_t v44 = *a3 + 8;
          float v45 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v44, *v10) + 8);
          double result = re::DataArray<re::TextureAtlasTile>::get(v44, *v134);
          if (v45 >= *(float *)(result + 8))
          {
            unsigned int v50 = v10 + 1;
            do
            {
              unint64_t v11 = v50;
              if (v50 >= v137) {
                break;
              }
              uint64_t v51 = *a3 + 8;
              float v52 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v51, v43) + 8);
              ++v50;
              double result = re::DataArray<re::TextureAtlasTile>::get(v51, *v11);
            }
            while (v52 >= *(float *)(result + 8));
          }
          else
          {
            unint64_t v11 = v10;
            do
            {
              uint64_t v46 = *a3 + 8;
              uint64_t v47 = re::DataArray<re::TextureAtlasTile>::get(v46, v43);
              uint64_t v48 = v11[1];
              ++v11;
              float v49 = *(float *)(v47 + 8);
              double result = re::DataArray<re::TextureAtlasTile>::get(v46, v48);
            }
            while (v49 >= *(float *)(result + 8));
          }
          uint64_t v53 = v137;
          if (v11 < v137)
          {
            uint64_t v53 = v137;
            do
            {
              uint64_t v54 = *a3 + 8;
              uint64_t v55 = re::DataArray<re::TextureAtlasTile>::get(v54, v43);
              uint64_t v56 = *--v53;
              float v57 = *(float *)(v55 + 8);
              double result = re::DataArray<re::TextureAtlasTile>::get(v54, v56);
            }
            while (v57 < *(float *)(result + 8));
          }
          while (v11 < v53)
          {
            uint64_t v58 = *v11;
            *unint64_t v11 = *v53;
            *uint64_t v53 = v58;
            do
            {
              uint64_t v59 = *a3 + 8;
              uint64_t v60 = re::DataArray<re::TextureAtlasTile>::get(v59, v43);
              uint64_t v61 = v11[1];
              ++v11;
              float v62 = *(float *)(v60 + 8);
            }
            while (v62 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v59, v61) + 8));
            do
            {
              uint64_t v63 = *a3 + 8;
              uint64_t v64 = re::DataArray<re::TextureAtlasTile>::get(v63, v43);
              uint64_t v65 = *--v53;
              float v66 = *(float *)(v64 + 8);
              double result = re::DataArray<re::TextureAtlasTile>::get(v63, v65);
            }
            while (v66 < *(float *)(result + 8));
          }
          int v67 = v11 - 1;
          BOOL v5 = v11 - 1 >= v10;
          BOOL v6 = v11 - 1 == v10;
          if (v11 - 1 != v10) {
            uint64_t *v10 = *v67;
          }
          a5 = 0;
          *int v67 = v43;
        }
        uint64_t v20 = 0;
        uint64_t v21 = *v10;
        do
        {
          uint64_t v22 = *a3 + 8;
          float v23 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v22, v10[++v20]) + 8);
        }
        while (v23 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v22, v21) + 8));
        uint64_t v24 = &v10[v20];
        unsigned int v25 = v12;
        if (v20 == 1)
        {
          unsigned int v25 = v12;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v29 = *--v25;
            uint64_t v30 = *a3 + 8;
            float v31 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v30, v29) + 8);
          }
          while (v31 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v30, v21) + 8));
        }
        else
        {
          do
          {
            uint64_t v26 = *--v25;
            uint64_t v27 = *a3 + 8;
            float v28 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v27, v26) + 8);
          }
          while (v28 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v27, v21) + 8));
        }
        if (v24 >= v25)
        {
          unsigned int v41 = v24 - 1;
        }
        else
        {
          unint64_t v32 = &v10[v20];
          uint64_t v33 = v25;
          do
          {
            uint64_t v34 = *v32;
            uint64_t *v32 = *v33;
            uint64_t *v33 = v34;
            do
            {
              uint64_t v35 = v32[1];
              ++v32;
              uint64_t v36 = *a3 + 8;
              float v37 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v36, v35) + 8);
            }
            while (v37 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v36, v21) + 8));
            do
            {
              uint64_t v38 = *--v33;
              uint64_t v39 = *a3 + 8;
              float v40 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v39, v38) + 8);
            }
            while (v40 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v39, v21) + 8));
          }
          while (v32 < v33);
          unsigned int v41 = v32 - 1;
        }
        if (v41 != v10) {
          uint64_t *v10 = *v41;
        }
        uint64_t *v41 = v21;
        if (v24 >= v25) {
          break;
        }
LABEL_33:
        double result = std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(v10, v41, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v11 = v41 + 1;
      }
      BOOL v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v10, v41, a3);
      unint64_t v11 = v41 + 1;
      double result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v41 + 1, v137, a3);
      if (result) {
        break;
      }
      if (!v42) {
        goto LABEL_33;
      }
    }
    a2 = v41;
    if (!v42) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6 + 8;
  float v13 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v12, *a5) + 8);
  uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v12, *a4);
  if (v13 < *(float *)(result + 8))
  {
    uint64_t v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a6 + 8;
    float v17 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v16, *a4) + 8);
    uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v16, *a3);
    if (v17 < *(float *)(result + 8))
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a6 + 8;
      float v20 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v19, *a3) + 8);
      uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v19, *a2);
      if (v20 < *(float *)(result + 8))
      {
        uint64_t v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a6 + 8;
        float v23 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v22, *a2) + 8);
        uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v22, *a1);
        if (v23 < *(float *)(result + 8))
        {
          uint64_t v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a4 + 8;
  float v9 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a2) + 8);
  float v10 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a1) + 8);
  uint64_t v11 = *a4 + 8;
  float v12 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v11, *a3) + 8);
  uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v11, *a2);
  float v14 = *(float *)(result + 8);
  if (v9 >= v10)
  {
    if (v12 < v14)
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a4 + 8;
      float v18 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v17, *a2) + 8);
      uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v17, *a1);
      if (v18 < *(float *)(result + 8))
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    uint64_t v15 = *a1;
    if (v12 >= v14)
    {
      *a1 = *a2;
      *a2 = v15;
      uint64_t v20 = *a4 + 8;
      float v21 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v20, *a3) + 8);
      uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v20, *a2);
      if (v21 >= *(float *)(result + 8)) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v15;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3 + 8;
      float v9 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *(a2 - 1)) + 8);
      if (v9 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a1) + 8))
      {
        uint64_t v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a1 + 2, a3);
      float v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *a3 + 8;
    float v16 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v15, *v12) + 8);
    if (v16 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v15, *v11) + 8))
    {
      uint64_t v17 = *v12;
      uint64_t v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16) {
          break;
        }
        uint64_t v19 = *a3 + 8;
        float v20 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v19, v17) + 8);
        uint64_t v21 = re::DataArray<re::TextureAtlasTile>::get(v19, *(uint64_t *)((char *)a1 + v18 + 8));
        v18 -= 8;
        if (v20 >= *(float *)(v21 + 8))
        {
          uint64_t v22 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      *uint64_t v22 = v17;
      if (++v14 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a2, a3, a5);
  uint64_t v10 = *a5 + 8;
  float v11 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v10, *a4) + 8);
  uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v10, *a3);
  if (v11 < *(float *)(result + 8))
  {
    uint64_t v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a5 + 8;
    float v15 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v14, *a3) + 8);
    uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v14, *a2);
    if (v15 < *(float *)(result + 8))
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a5 + 8;
      float v18 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v17, *a2) + 8);
      uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v17, *a1);
      if (v18 < *(float *)(result + 8))
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t re::getOrCreateTileRenderPipelineState(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2) {
    unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 40);
  unint64_t v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(void *)(a2 + 104), *(void *)(a2 + 88), 1);
  MurmurHash3_x64_128(a2 + 112, 44, 0, (unint64_t *)info);
  unint64_t v7 = (*(void *)&info[8] + (*(void *)info << 6) + (*(void *)info >> 2) - 0x61C8864680B583E9) ^ *(void *)info;
  unint64_t v8 = (unint64_t)objc_msgSend(*(id *)(a2 + 168), sel_hash);
  unint64_t v9 = ((((unint64_t)*(unsigned __int8 *)(a2 + 176) << 6) | 0x9E3779B97F4A7C17)
      + (((v8 << 6)
        + (v8 >> 2)
        - 0x61C8864680B583E9
        + (((((v6 << 6)
            + (v6 >> 2)
            + (((v5 << 6) + (v5 >> 2) + (((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) - 0x61C8864680B583E9) ^ v5)
            - 0x61C8864680B583E9) ^ v6)
          + (v7 << 6)
          + (v7 >> 2)
          - 0x61C8864680B583E9) ^ v7)) ^ v8)) ^ *(unsigned __int8 *)(a2 + 176);
  uint64_t v10 = *(void *)(a1 + 56);
  if (*(void *)(v10 + 96))
  {
    uint64_t v11 = *(unsigned int *)(*(void *)(v10 + 104) + 4 * (v9 % *(unsigned int *)(v10 + 120)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v19 = *(void *)(v10 + 112);
      if (*(void *)(v19 + 24 * v11 + 8) == v9) {
        return v19 + 24 * v11 + 16;
      }
      while (1)
      {
        LODWORD(v11) = *(_DWORD *)(v19 + 24 * v11) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v19 + 24 * v11 + 8) == v9) {
          return v19 + 24 * v11 + 16;
        }
      }
    }
  }
  if (!*(unsigned char *)(a2 + 177))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94418, memory_order_acquire) & 1) == 0)
    {
      uint64_t v61 = (re::AppleBuild *)__cxa_guard_acquire(&qword_26AF94418);
      if (v61)
      {
        _MergedGlobals_374 = *re::AppleBuild::get(v61) == 1;
        __cxa_guard_release(&qword_26AF94418);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_26AF94420, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(qword_26AF94420))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v62, info);
      if (info[0]) {
        uint64_t v63 = &info[1];
      }
      else {
        uint64_t v63 = &_MergedGlobals_374;
      }
      byte_26AF94411 = *v63;
      __cxa_guard_release(qword_26AF94420);
    }
  }
  uint64_t v64 = mach_absolute_time();
  float v12 = *(void **)(a1 + 56);
  if (*(unsigned char *)a2)
  {
    if (*(void *)(a2 + 16)) {
      uint64_t v13 = *(const char **)(a2 + 24);
    }
    else {
      uint64_t v13 = (const char *)(a2 + 17);
    }
    *(void *)info = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v13);
    uint64_t v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v12 + 33), (uint64_t *)info);
    if (*(void *)(a2 + 16)) {
      float v15 = *(const char **)(a2 + 24);
    }
    else {
      float v15 = (const char *)(a2 + 17);
    }
    unint64_t LibraryHash = re::ShaderManager::getLibraryHash((re::ShaderManager *)v12, v15);
    if (!v14) {
      return 0;
    }
    uint64_t v17 = LibraryHash;
    float v18 = (void *)(v14 + 8);
  }
  else
  {
    float v18 = v12 + 31;
    uint64_t v17 = v12[32];
  }
  uint64_t v65 = a1;
  float v66 = (void *)(v10 + 96);
  id v74 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
  uint64_t v21 = *(void *)(a2 + 88);
  if (v21)
  {
    uint64_t v22 = v21 << 6;
    float v23 = (unsigned __int16 *)(*(void *)(a2 + 104) + 32);
    do
    {
      objc_msgSend(v74, sel_setConstantValue_type_atIndex_, *((void *)v23 + 3), *v23, v23[1]);
      v23 += 32;
      v22 -= 64;
    }
    while (v22);
  }
  if (*(void *)(a2 + 48)) {
    uint64_t v24 = *(void *)(a2 + 56);
  }
  else {
    uint64_t v24 = a2 + 49;
  }
  re::ShaderManager::makeFunctionDescriptor((uint64_t)v12, v24, &v74, v18, v17, &v73);
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v12, v17, &v73, &v72);
  re::ShaderManager::makeTileRenderPipelineDescriptor((re::ShaderManager *)v12, &v71);
  objc_msgSend(v71, sel_setTileFunction_, v72);
  objc_msgSend(v71, sel_setRasterSampleCount_, *(unsigned int *)(a2 + 112));
  objc_msgSend(v71, sel_setLinkedFunctions_, *(void *)(a2 + 168));
  objc_msgSend(v71, sel_setThreadgroupSizeMatchesTileSize_, *(unsigned __int8 *)(a2 + 176));
  uint64_t v25 = 0;
  uint64_t v26 = 32;
  do
  {
    uint64_t v27 = *(int *)(a2 + 116 + 4 * v25);
    if (v27) {
      objc_msgSend(objc_msgSend(objc_msgSend(v71, sel_colorAttachments), sel_objectAtIndexedSubscript_, v25), sel_setPixelFormat_, v27);
    }
    ++v25;
    v26 -= 4;
  }
  while (v26);
  id v70 = 0;
  re::mtl::Device::makeRenderPipelineState((id *)(v65 + 184), (uint64_t)v71, info);
  NS::SharedPtr<MTL::Texture>::operator=(&v70, (void **)info);
  if (*(void *)info) {

  }
  uint64_t v28 = mach_absolute_time();
  uint64_t v29 = v28;
  double v30 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    uint64_t v28 = mach_timebase_info((mach_timebase_info_t)info);
    if (v28)
    {
      double v33 = NAN;
      goto LABEL_41;
    }
    LODWORD(v31) = *(_DWORD *)info;
    LODWORD(v32) = *(_DWORD *)&info[4];
    double v30 = (double)v31 / (double)v32;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v30;
  }
  double v33 = v30 * (double)(v29 - v64);
LABEL_41:
  int v34 = (int)(v33 / 1000000.0);
  uint64_t v35 = *re::graphicsLogObjects((re *)v28);
  uint64_t v36 = (_anonymous_namespace_ *)os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
  if (v36)
  {
    uint64_t v37 = a2 + 49;
    if (*(void *)(a2 + 48)) {
      uint64_t v37 = *(void *)(a2 + 56);
    }
    *(_DWORD *)info = 136446466;
    *(void *)&info[4] = v37;
    *(_WORD *)&info[12] = 1024;
    *(_DWORD *)&info[14] = v34;
    _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for tile pipeline %{public}s in %d", info, 0x12u);
  }
  if (!*v66)
  {
    LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_52;
  }
  unint64_t v38 = v9 % *(unsigned int *)(v10 + 120);
  uint64_t v39 = *(unsigned int *)(*(void *)(v10 + 104) + 4 * v38);
  if (v39 == 0x7FFFFFFF)
  {
LABEL_52:
    uint64_t v42 = *(unsigned int *)(v10 + 132);
    if (v42 == 0x7FFFFFFF)
    {
      uint64_t v42 = *(unsigned int *)(v10 + 128);
      int v43 = v42;
      if (v42 == *(_DWORD *)(v10 + 120))
      {
        re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v66, 2 * *(_DWORD *)(v10 + 124));
        LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9 % *(unsigned int *)(v10 + 120);
        int v43 = *(_DWORD *)(v10 + 128);
      }
      *(_DWORD *)(v10 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v43 + 1;
      uint64_t v44 = *(void *)(v10 + 112);
      int v45 = *(_DWORD *)(v44 + 24 * v42);
    }
    else
    {
      uint64_t v44 = *(void *)(v10 + 112);
      int v45 = *(_DWORD *)(v44 + 24 * v42);
      *(_DWORD *)(v10 + 132) = v45 & 0x7FFFFFFF;
    }
    uint64_t v46 = 24 * v42;
    *(_DWORD *)(v44 + v46) = v45 | 0x80000000;
    *(_DWORD *)(*(void *)(v10 + 112) + v46) = *(_DWORD *)(*(void *)(v10 + 112) + 24 * v42) & 0x80000000 | *(_DWORD *)(*(void *)(v10 + 104) + 4 * v38);
    *(void *)(*(void *)(v10 + 112) + 24 * v42 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
    uint64_t v47 = *(void *)(v10 + 112) + 24 * v42;
    uint64_t v36 = (_anonymous_namespace_ *)v70;
    *(void *)(v47 + 16) = v36;
    *(_DWORD *)(*(void *)(v10 + 104) + 4 * v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v42;
    ++*(_DWORD *)(v10 + 124);
    ++*(_DWORD *)(v10 + 136);
    uint64_t v41 = *(void *)(v10 + 112) + 24 * v42;
    goto LABEL_58;
  }
  uint64_t v40 = *(void *)(v10 + 112);
  while (*(void *)(v40 + 24 * v39 + 8) != v9)
  {
    LODWORD(v39) = *(_DWORD *)(v40 + 24 * v39) & 0x7FFFFFFF;
    if (v39 == 0x7FFFFFFF) {
      goto LABEL_52;
    }
  }
  uint64_t v41 = v40 + 24 * v39;
LABEL_58:
  uint64_t v20 = v41 + 16;
  if (v34 >= 11)
  {
    *(void *)&info[16] = 0;
    uint64_t v80 = 0;
    *(void *)&info[8] = 0;
    re::DynamicString::setCapacity(info, 0x80uLL);
    uint64_t v48 = *(void *)(a2 + 88);
    if (v48)
    {
      uint64_t v49 = *(void *)(a2 + 104);
      uint64_t v50 = v48 << 6;
      do
      {
        if (*(unsigned char *)(v49 + 8)) {
          uint64_t v51 = *(const char **)(v49 + 16);
        }
        else {
          uint64_t v51 = (const char *)(v49 + 9);
        }
        uint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v49);
        re::DynamicString::appendf((re::DynamicString *)info, "%s=%llu ", v51, As64Bits);
        v49 += 64;
        v50 -= 64;
      }
      while (v50);
    }
    uint64_t v53 = *(void *)(a2 + 56);
    if ((*(void *)(a2 + 48) & 1) == 0) {
      uint64_t v53 = a2 + 49;
    }
    if (info[8]) {
      uint64_t v54 = *(unsigned char **)&info[16];
    }
    else {
      uint64_t v54 = &info[9];
    }
    re::DynamicString::format((re::DynamicString *)"name=%s sc=%d tgsmts=%d px=%d %d %d %d %d %d %d %d fc=%s", (re::DynamicString *)&v67, v53, *(unsigned int *)(a2 + 112), *(unsigned __int8 *)(a2 + 176), *(unsigned int *)(a2 + 116), *(unsigned int *)(a2 + 120), *(unsigned int *)(a2 + 124), *(unsigned int *)(a2 + 128), *(unsigned int *)(a2 + 132), *(unsigned int *)(a2 + 136), *(unsigned int *)(a2 + 140), *(unsigned int *)(a2 + 144), v54);
    isFrameCaptureEnabled = (re *)re::mtl::Device::isFrameCaptureEnabled((re::mtl::Device *)(v65 + 184));
    int v56 = (int)isFrameCaptureEnabled;
    float v57 = *re::graphicsLogObjects(isFrameCaptureEnabled);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = *(unsigned char **)&v69[7];
      uint64_t v59 = "";
      if ((v68 & 1) == 0) {
        uint64_t v58 = v69;
      }
      if (v56) {
        uint64_t v59 = "(frame capture enabled)";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v76 = v58;
      __int16 v77 = 2080;
      float v78 = v59;
      _os_log_impl(&dword_233120000, v57, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT %{public}s %s", buf, 0x16u);
    }
    if (v67 && (v68 & 1) != 0) {
      (*(void (**)(void))(*(void *)v67 + 40))();
    }
    if (*(void *)info && (info[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)info + 40))();
    }
  }
  if (v70) {

  }
  if (v71) {
  if (v72)
  }

  if (v73) {
  if (v74)
  }

  return v20;
}

void re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 1);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            uint64_t v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v22) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 16) = *v14;
            void *v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

double re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          long long v9 = *(void **)(v6 + v4 + 16);
          if (v9)
          {

            *(void *)(v8 + 16) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 24;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::TextureHandle::invalidate(re::TextureHandle *this)
{
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2)
  {
    unsigned int add = atomic_fetch_add(v2, 0xFFFFFFFF);
    uint64_t v4 = (const void *)(add - 1);
    if (add - 1048578 <= 0xFFEFFFFE)
    {
      re::internal::refCountCheckFailHandler(0, v2, v4);
      if (v4) {
        goto LABEL_5;
      }
    }
    else if (add != 1)
    {
LABEL_5:
      *((void *)this + 1) = 0;
      goto LABEL_6;
    }
    re::Texture::dispose((id *)v2);
    goto LABEL_5;
  }
LABEL_6:
  *(void *)this = 0;
}

re::TextureHandle *re::TextureHandle::TextureHandle(re::TextureHandle *this, const re::TextureHandle *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = (unsigned int *)*((void *)a2 + 1);
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    *(void *)this = v3;
    *((void *)this + 1) = v4;
    if (!atomic_load(v4))
    {
      long long v9 = (const void *)atomic_load(v4);
      re::internal::refCountCheckFailHandler((re::internal *)1, v4, v9);
    }
    unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)v4, 1u, memory_order_relaxed);
    if (add_explicit - 0x100000 <= 0xFFEFFFFE) {
      re::internal::refCountCheckFailHandler((re::internal *)1, v4, (const void *)(add_explicit + 1));
    }
  }
  return this;
}

re::TextureHandle *re::TextureHandle::operator=(re::TextureHandle *this, re::TextureHandle *a2)
{
  if (this != a2)
  {
    re::TextureHandle::invalidate(this);
    uint64_t v4 = *(void *)a2;
    BOOL v5 = (unsigned int *)*((void *)a2 + 1);
    if (v5 && v4 != 0)
    {
      *(void *)this = v4;
      *((void *)this + 1) = v5;
      if (!atomic_load(v5))
      {
        unsigned int v10 = (const void *)atomic_load(v5);
        re::internal::refCountCheckFailHandler((re::internal *)1, v5, v10);
      }
      unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)v5, 1u, memory_order_relaxed);
      if (add_explicit - 0x100000 <= 0xFFEFFFFE) {
        re::internal::refCountCheckFailHandler((re::internal *)1, v5, (const void *)(add_explicit + 1));
      }
    }
  }
  return this;
}

void re::TextureHandle::metalTexture(os_unfair_lock_s **this@<X0>, void *a2@<X8>)
{
  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    id v4 = *(id *)&this[1][2]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(*this + 78);
  }
  else
  {
    re::TextureHandle::InvalidTexture((re::TextureHandle *)this);
    id v4 = (id)re::TextureHandle::InvalidTexture(void)::invalidTexture;
  }
  *a2 = v4;
}

uint64_t *re::TextureHandle::InvalidTexture(re::TextureHandle *this)
{
  {
    re::TextureHandle::InvalidTexture(void)::invalidTexture = 0;
  }
  return &re::TextureHandle::InvalidTexture(void)::invalidTexture;
}

void re::TextureHandle::unsynchronizedMetalTexture(os_unfair_lock_s **this@<X0>, void *a2@<X8>)
{
  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    id v4 = *(id *)&this[1][4]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(*this + 78);
  }
  else
  {
    re::TextureHandle::InvalidTexture((re::TextureHandle *)this);
    id v4 = (id)re::TextureHandle::InvalidTexture(void)::invalidTexture;
  }
  *a2 = v4;
}

void re::TextureHandle::setMetalTexture(const re::TextureHandle *a1, void **a2)
{
  id v2 = 0;
  re::TextureHandle::setMetalTextureAndHeap(a1, a2, &v2);
  if (v2) {
}
  }

double re::TextureHandle::setMetalTextureAndHeap(const re::TextureHandle *a1, void **a2, void **a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1))
  {
    unsigned int v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v33 = 0x7FFFFFFFLL;
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)a1 + 312));
    uint64_t v6 = *((void *)a1 + 1);
    uint64_t v8 = *(void **)(v6 + 16);
    int v7 = (void **)(v6 + 16);
    if (*a2 == v8 && *a3 == *(void **)(*((void *)a1 + 1) + 32))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)a1 + 312));
    }
    else
    {
      NS::SharedPtr<MTL::Texture>::operator=(v7, a2);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(*((void *)a1 + 1) + 32), a3);
      uint64_t v9 = *((void *)a1 + 1);
      unsigned int v10 = (uint64_t *)(v9 + 40);
      if (&v30 != (long long *)(v9 + 40) && *v10)
      {
        unsigned int v11 = *(_DWORD *)(v9 + 68);
        if (v11 <= 3) {
          signed int v12 = 3;
        }
        else {
          signed int v12 = v11;
        }
        re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::init((uint64_t)&v30, *v10, v12);
        re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::copy((uint64_t)&v30, (uint64_t)v10);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)a1 + 312));
      objc_initWeak(&location, 0);
      *(void *)&long long v29 = 0;
      unsigned int v13 = v32;
      if (v32)
      {
        uint64_t v14 = 0;
        unint64_t v15 = (int *)(v31 + 8);
        while (1)
        {
          int v16 = *v15;
          v15 += 10;
          if (v16 < 0) {
            break;
          }
          if (v32 == ++v14)
          {
            LODWORD(v14) = v32;
            break;
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if (v32 != v14)
      {
        uint64_t v17 = v14;
        uint64_t v18 = v31;
        do
        {
          uint64_t v19 = v18 + 40 * v17;
          uint64_t v20 = (id *)(v19 + 16);
          WeakRetained = (re *)objc_loadWeakRetained((id *)(v19 + 16));
          uint64_t v22 = (const re::WeakStringID *)(v19 + 24);
          if (WeakRetained)
          {
            signed int v23 = WeakRetained;
            re::MaterialParameterBlock::enqueueTextureValueChangedDelta((re *)((char *)WeakRetained - 8), v22, a1);
          }
          else
          {
            if (v20 != &location)
            {
              objc_destroyWeak(&location);
              id location = 0;
              objc_copyWeak(&location, v20);
            }
            long long v29 = *(_OWORD *)v22;
          }
          uint64_t v18 = v31;
          if (v32 <= (int)v14 + 1) {
            unsigned int v24 = v14 + 1;
          }
          else {
            unsigned int v24 = v32;
          }
          while (1)
          {
            uint64_t v17 = (v14 + 1);
            if (v24 - 1 == v14) {
              break;
            }
            LODWORD(v14) = v14 + 1;
            unsigned int v25 = v17;
            if ((*(_DWORD *)(v31 + 40 * v17 + 8) & 0x80000000) != 0) {
              goto LABEL_30;
            }
          }
          unsigned int v25 = v24;
LABEL_30:
          LODWORD(v14) = v25;
        }
        while (v13 != v25);
        if ((void)v29)
        {
          uint64_t v26 = *re::graphicsLogObjects(WeakRetained);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134219010;
            uint64_t v35 = a1;
            __int16 v36 = 1024;
            int v37 = HIDWORD(v31);
            __int16 v38 = 2048;
            uint64_t v39 = *((void *)&v29 + 1);
            __int16 v40 = 2080;
            uint64_t v41 = "<unknown>";
            __int16 v42 = 2048;
            uint64_t v43 = v29;
            _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "TextureHandle (%p) tried to enqueue texture change into %d blocks. It encountered at least one expired MaterialParameterBlock (%p) which texture '%s' (hash: %llu). This suggests a missing call to 'stopTrackingMaterialParameterBlock()' or 'disconnectFromTextureHandles()'.", buf, 0x30u);
          }
        }
      }
      *(void *)&long long v29 = 0;
      objc_destroyWeak(&location);
    }
    return re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)&v30);
  }
  return result;
}

void re::TextureHandle::unsafeReleaseMetalTextures(os_unfair_lock_s **this)
{
  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    re::TextureHandle::InvalidTexture(v2);
    uint64_t v3 = NS::SharedPtr<MTL::Texture>::operator=((void **)&this[1][4], (void **)&re::TextureHandle::InvalidTexture(void)::invalidTexture);
    re::TextureHandle::InvalidTexture((re::TextureHandle *)v3);
    NS::SharedPtr<MTL::Texture>::operator=((void **)&this[1][2], (void **)&re::TextureHandle::InvalidTexture(void)::invalidTexture);
    id v4 = this[1];

    *(void *)&v4[8]._os_unfair_lock_opaque = 0;
    BOOL v5 = this[1];

    *(void *)&v5[6]._os_unfair_lock_opaque = 0;
    uint64_t v6 = *this + 78;
    os_unfair_lock_unlock(v6);
  }
}

void re::TextureHandle::startTrackingMaterialParameterBlock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(a1 + 8))
  {
    if (a2) {
      uint64_t v6 = (void *)(a2 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    objc_initWeak(&location, v6);
    uint64_t v8 = *a3;
    uint64_t v9 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)a1 + 312));
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::add(*(void *)(a1 + 8) + 40, (uint64_t)&location);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)a1 + 312));
    uint64_t v8 = 0;
    objc_destroyWeak(&location);
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_15;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_15:
    unsigned int v14 = re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(a1, v8, v6, a2, (id *)a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 40 * v14;
    return v13 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 40 * v9 + 32) != v4 || *(void *)(v10 + 40 * v9 + 24) != v5)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = v10 + 40 * v9;
  return v13 + 16;
}

void re::TextureHandle::stopTrackingMaterialParameterBlock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(a1 + 8))
  {
    objc_initWeak(&location, 0);
    uint64_t v7 = *a3;
    uint64_t v8 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)a1 + 312));
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::remove(*(void *)(a1 + 8) + 40, (uint64_t)&location);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)a1 + 312));
    uint64_t v7 = 0;
    objc_destroyWeak(&location);
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v6 = ((v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) % v2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(void *)(v10 + 40 * v8 + 32) != v4 || *(void *)(v10 + 40 * v8 + 24) != v5)
  {
    while (1)
    {
      unsigned int v12 = v8;
      int v13 = *(_DWORD *)(v10 + 40 * v8 + 8);
      uint64_t v8 = v13 & 0x7FFFFFFF;
      if ((v13 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v10 + 40 * v8 + 32) == v4
        && *(void *)(v10 + 40 * v8 + 24) == v5)
      {
        *(_DWORD *)(v10 + 40 * v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v10 + 40 * v12 + 8) & 0x80000000 | *(_DWORD *)(v10 + 40 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_16;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 40 * v8 + 8) & 0x7FFFFFFF;
LABEL_16:
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = v15 + 40 * v8;
  int v19 = *(_DWORD *)(v16 + 8);
  uint64_t v18 = (int *)(v16 + 8);
  int v17 = v19;
  if (v19 < 0)
  {
    int *v18 = v17 & 0x7FFFFFFF;
    uint64_t v20 = v15 + 40 * v8;
    *(void *)(v20 + 24) = 0;
    objc_destroyWeak((id *)(v20 + 16));
    *(void *)(v20 + 16) = 0;
    uint64_t v15 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v15 + 40 * v8 + 8);
  }
  int v21 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v15 + 40 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 36) | v17 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v21 + 1;
  return 1;
}

uint64_t *re::TextureHandle::InvalidHandle(re::TextureHandle *this)
{
  {
    re::TextureHandle::InvalidHandle(void)::textureHandle = 0;
    unk_26879FDD0 = 0;
  }
  return &re::TextureHandle::InvalidHandle(void)::textureHandle;
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = (void *)(v8 + v6);
      if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
      {
        unint64_t v12 = *v9;
        uint64_t v10 = (id *)(v9 + 2);
        unint64_t v11 = v12;
        unint64_t v13 = *(unsigned int *)(a1 + 24);
        unint64_t v14 = v12 % v13;
        uint64_t v15 = *(unsigned int *)(a1 + 36);
        if (v15 == 0x7FFFFFFF)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 32);
          int v16 = v15;
          if (v15 == v13)
          {
            re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v14 = v11 % *(unsigned int *)(a1 + 24);
            int v16 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v16 + 1;
          uint64_t v17 = *(void *)(a1 + 16);
          int v18 = *(_DWORD *)(v17 + 40 * v15 + 8);
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 16);
          int v18 = *(_DWORD *)(v17 + 40 * v15 + 8);
          *(_DWORD *)(a1 + 36) = v18 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v17 + 40 * v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v18 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 40 * v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v15 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v14);
        *(void *)(*(void *)(a1 + 16) + 40 * v15) = v11;
        uint64_t v19 = *(void *)(a1 + 16) + 40 * v15;
        *(void *)(v19 + 16) = 0;
        v19 += 16;
        objc_copyWeak((id *)v19, v10);
        *(_OWORD *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(v8 + v6 + 24);
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v14) = v15;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          *(void *)(v6 + 24) = 0;
          objc_destroyWeak((id *)(v6 + 16));
          *(void *)(v6 + 16) = 0;
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 40;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        unint64_t v12 = (id *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0) {
            re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(a1, (unint64_t)*(v12 - 2) % *(unsigned int *)(a1 + 24), (unint64_t)*(v12 - 2), (int)v12, v12);
          }
          ++v11;
          v12 += 5;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, int a4, id *from)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  uint64_t v13 = *(void *)(a1 + 16) + 40 * v9;
  *(void *)(v13 + 16) = 0;
  v13 += 16;
  objc_moveWeak((id *)v13, from);
  *(_OWORD *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(from + 1);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          *(void *)(v6 + 24) = 0;
          objc_destroyWeak((id *)(v6 + 16));
          *(void *)(v6 + 16) = 0;
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 40;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::Texture::dispose(id *this)
{
  this[1] = 0;
  this[2] = 0;

  this[3] = 0;
  this[4] = 0;
  re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear((uint64_t)(this + 5));
}

uint64_t re::isSupportedPixelFormat()
{
  return 0;
}

uint64_t re::getComponentCount()
{
  return 0;
}

uint64_t re::isASTCPixelFormat(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
LABEL_3:
      uint64_t result = 0;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 126:
    case 127:
    case 128:
    case 129:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
      return result;
    default:
      switch(a1)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 550:
        case 551:
        case 552:
        case 553:
        case 554:
        case 555:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 628:
        case 629:
          goto LABEL_3;
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 549:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 576:
        case 577:
        case 578:
        case 579:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
        case 588:
        case 589:
        case 590:
        case 591:
        case 592:
        case 593:
        case 594:
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 605:
        case 606:
        case 614:
        case 615:
        case 616:
        case 617:
        case 618:
        case 619:
        case 620:
        case 621:
        case 622:
        case 623:
        case 624:
        case 625:
        case 626:
        case 627:
          return result;
        default:
          unsigned int v3 = a1 - 240;
          if (v3 <= 0x16 && ((1 << v3) & 0x70B403) != 0) {
            goto LABEL_3;
          }
          break;
      }
      break;
  }
  return result;
}

uint64_t re::translateSRGBPixelFormatToLinear(uint64_t result)
{
  if ((int)result <= 132)
  {
    if ((int)result <= 70)
    {
      if (result == 11)
      {
        return 10;
      }
      else if (result == 31)
      {
        return 30;
      }
    }
    else
    {
      switch(result)
      {
        case 0x47:
          return 70;
        case 0x51:
          return 80;
        case 0x83:
          return 130;
      }
    }
  }
  else
  {
    switch((int)result)
    {
      case 153:
        uint64_t result = 152;
        break;
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 166:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 180:
      case 182:
      case 184:
      case 185:
      case 191:
        return result;
      case 165:
        uint64_t result = 164;
        break;
      case 167:
        uint64_t result = 166;
        break;
      case 179:
        uint64_t result = 178;
        break;
      case 181:
        uint64_t result = 180;
        break;
      case 183:
        uint64_t result = 182;
        break;
      case 186:
        uint64_t result = 204;
        break;
      case 187:
        uint64_t result = 205;
        break;
      case 188:
        uint64_t result = 206;
        break;
      case 189:
        uint64_t result = 207;
        break;
      case 190:
        uint64_t result = 208;
        break;
      case 192:
        uint64_t result = 210;
        break;
      case 193:
        uint64_t result = 211;
        break;
      case 194:
        uint64_t result = 212;
        break;
      case 195:
        uint64_t result = 213;
        break;
      case 196:
        uint64_t result = 214;
        break;
      case 197:
        uint64_t result = 215;
        break;
      case 198:
        uint64_t result = 216;
        break;
      case 199:
        uint64_t result = 217;
        break;
      case 200:
        uint64_t result = 218;
        break;
      default:
        if (result == 133)
        {
          uint64_t result = 132;
        }
        else if (result == 135)
        {
          uint64_t result = 134;
        }
        break;
    }
  }
  return result;
}

uint64_t re::translateLinearPixelFormatToSRGB(uint64_t result)
{
  if ((int)result <= 163)
  {
    if ((int)result > 129)
    {
      if ((int)result > 133)
      {
        if (result == 134)
        {
          return 135;
        }
        else if (result == 152)
        {
          return 153;
        }
      }
      else if (result == 130)
      {
        return 131;
      }
      else if (result == 132)
      {
        return 133;
      }
    }
    else if ((int)result > 69)
    {
      if (result == 70)
      {
        return 71;
      }
      else if (result == 80)
      {
        return 81;
      }
    }
    else if (result == 10)
    {
      return 11;
    }
    else if (result == 30)
    {
      return 31;
    }
  }
  else
  {
    switch((int)result)
    {
      case 178:
        uint64_t result = 179;
        break;
      case 179:
      case 181:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 209:
        return result;
      case 180:
        uint64_t result = 181;
        break;
      case 182:
        uint64_t result = 183;
        break;
      case 204:
        uint64_t result = 186;
        break;
      case 205:
        uint64_t result = 187;
        break;
      case 206:
        uint64_t result = 188;
        break;
      case 207:
        uint64_t result = 189;
        break;
      case 208:
        uint64_t result = 190;
        break;
      case 210:
        uint64_t result = 192;
        break;
      case 211:
        uint64_t result = 193;
        break;
      case 212:
        uint64_t result = 194;
        break;
      case 213:
        uint64_t result = 195;
        break;
      case 214:
        uint64_t result = 196;
        break;
      case 215:
        uint64_t result = 197;
        break;
      case 216:
        uint64_t result = 198;
        break;
      case 217:
        uint64_t result = 199;
        break;
      case 218:
        uint64_t result = 200;
        break;
      default:
        if (result == 164)
        {
          uint64_t result = 165;
        }
        else if (result == 166)
        {
          uint64_t result = 167;
        }
        break;
    }
  }
  return result;
}

uint64_t re::isHDR(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 53:
    case 54:
    case 60:
    case 62:
    case 63:
    case 64:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 94:
    case 103:
    case 104:
    case 110:
    case 112:
    case 113:
    case 114:
    case 123:
    case 124:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
      goto LABEL_4;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
    case 184:
    case 185:
    case 191:
    case 201:
    case 202:
    case 203:
    case 209:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 254:
    case 256:
    case 257:
    case 258:
    case 259:
      return result;
    default:
      if ((a1 - 500) <= 0x3E && ((1 << (a1 + 12)) & 0x400DFF007FF007FFLL) != 0
        || (a1 - 628) < 2)
      {
LABEL_4:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void re::TargetDisplayInfoProvider::TargetDisplayInfoProvider(re::TargetDisplayInfoProvider *this)
{
  uint64_t v2 = re::globalAllocators(this);
  *((void *)this + 3) = v2[2];
  *((void *)this + 4) = 0;
  unsigned int v3 = re::globalAllocators((re *)v2);
  *((void *)this + 9) = v3[2];
  *((void *)this + 10) = 0;
  uint64_t v4 = re::globalAllocators((re *)v3);
  *((void *)this + 15) = v4[2];
  *((void *)this + 16) = 0;
  long long v5 = re::globalAllocators((re *)v4);
  *((void *)this + 21) = v5[2];
  *((void *)this + 22) = 0;
  uint64_t v6 = re::globalAllocators((re *)v5);
  *((void *)this + 27) = v6[2];
  *((void *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  int v7 = re::globalAllocators((re *)v6);
  *((void *)this + 33) = v7[2];
  *((void *)this + 34) = 0;
  unsigned int v8 = re::globalAllocators((re *)v7);
  *((void *)this + 39) = v8[2];
  *((void *)this + 40) = 0;
  uint64_t v9 = re::globalAllocators((re *)v8);
  *((void *)this + 45) = v9[2];
  *((void *)this + 46) = 0;
  int v10 = re::globalAllocators((re *)v9);
  *((void *)this + 51) = v10[2];
  *((void *)this + 52) = 0;
  uint64_t v11 = re::globalAllocators((re *)v10);
  *((void *)this + 57) = v11[2];
  *((void *)this + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  int v12 = re::globalAllocators((re *)v11);
  *((void *)this + 63) = v12[2];
  *((void *)this + 64) = 0;
  uint64_t v13 = re::globalAllocators((re *)v12);
  *((void *)this + 69) = v13[2];
  *((void *)this + 70) = 0;
  unint64_t v14 = re::globalAllocators((re *)v13);
  *((void *)this + 75) = v14[2];
  *((void *)this + 76) = 0;
  uint64_t v15 = re::globalAllocators((re *)v14);
  *((void *)this + 81) = v15[2];
  *((void *)this + 82) = 0;
  int v16 = re::globalAllocators((re *)v15);
  *((void *)this + 87) = v16[2];
  *((void *)this + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v17 = re::globalAllocators((re *)v16);
  *((void *)this + 93) = v17[2];
  *((void *)this + 94) = 0;
  int v18 = re::globalAllocators((re *)v17);
  *((void *)this + 9re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v18[2];
  *((void *)this + 99) = 0;
  uint64_t v19 = re::globalAllocators((re *)v18);
  *((void *)this + 103) = v19[2];
  *((void *)this + 105) = 0;
  *((void *)this + 106) = 0;
  *((void *)this + 104) = 0;
  uint64_t v20 = re::globalAllocators((re *)v19);
  *((void *)this + 110) = v20[2];
  *((void *)this + 111) = 0;
  int v21 = re::globalAllocators((re *)v20);
  *((void *)this + 115) = v21[2];
  *((void *)this + 116) = 0;
  uint64_t v22 = re::globalAllocators((re *)v21);
  *((void *)this + 127) = v22[2];
  *((void *)this + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  signed int v23 = re::globalAllocators((re *)v22);
  *((void *)this + 139) = v23[2];
  *((void *)this + 140) = 0;
  unsigned int v24 = re::globalAllocators((re *)v23);
  *((void *)this + 145) = v24[2];
  *((void *)this + 146) = 0;
  unsigned int v25 = re::globalAllocators((re *)v24);
  *((void *)this + 151) = v25[2];
  *((void *)this + 152) = 0;
  *((void *)this + 163) = re::globalAllocators((re *)v25)[2];
  *((void *)this + 164) = 0;
  *((_DWORD *)this + 10) = 1092616192;
  *((_DWORD *)this + 22) = 100;
  *((_DWORD *)this + 34) = 100;
  *((_DWORD *)this + 46) = 0;
  *((unsigned char *)this + 232) = 1;
  *((_DWORD *)this + 70) = 1176256512;
  *((_DWORD *)this + 82) = 1134367843;
  *((_DWORD *)this + 94) = 0;
  *((_DWORD *)this + 106) = 1120403456;
  *((_DWORD *)this + 11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 100;
  *((_DWORD *)this + 130) = 1065353216;
  *((_DWORD *)this + 142) = 1065353216;
  *((unsigned char *)this + 616) = 3;
  *((_DWORD *)this + 166) = 1065353216;
  *((_DWORD *)this + 17re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1065353216;
  *((void *)this + 105) = 32;
  operator new[]();
}

float re::TargetDisplayInfoProvider::{unnamed type#1}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unsigned int v3 = *(void (**)(void))(*(void *)v2 + 16);
    v3();
  }
  else
  {
    if ((atomic_exchange(re::TargetDisplayInfoProvider::{unnamed type#1}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      long long v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Display min brightness nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

void re::TargetDisplayInfoProvider::~TargetDisplayInfoProvider(re::TargetDisplayInfoProvider *this)
{
  uint64_t v2 = *((void *)this + 106);
  if (v2) {
    MEMORY[0x237DBCBA0](v2, 0x1000C8052888210);
  }
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 1280);
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable((uint64_t)this + 1184);
  re::FunctionBase<24ul,re::LuminanceMap ()(void)>::destroyCallable((uint64_t)this + 1136);
  re::FunctionBase<24ul,re::LuminanceMap ()(void)>::destroyCallable((uint64_t)this + 1088);
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable((uint64_t)this + 992);
  re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable((uint64_t)this + 896);
  re::FunctionBase<24ul,void ()(re::ImageHistogram)>::destroyCallable((uint64_t)this + 856);
  re::FunctionBase<24ul,re::TonemapLUTDomain ()(void)>::destroyCallable((uint64_t)this + 800);
  re::FunctionBase<24ul,void ()(re::TonemapLUT)>::destroyCallable((uint64_t)this + 760);
  re::FunctionBase<24ul,void ()(re::TonemapFloatLUT)>::destroyCallable((uint64_t)this + 720);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 672);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 624);
  re::FunctionBase<24ul,unsigned char ()(void)>::destroyCallable((uint64_t)this + 576);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 528);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 480);
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable((uint64_t)this + 432);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 384);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 336);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 288);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 240);
  re::FunctionBase<24ul,BOOL ()(void)>::destroyCallable((uint64_t)this + 192);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this + 144);
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable((uint64_t)this + 96);
  re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable((uint64_t)this + 48);
  re::FunctionBase<24ul,float ()(void)>::destroyCallable((uint64_t)this);
}

uint64_t (***re::FunctionBase<24ul,float ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,simd_float3x3 ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,re::LuminanceMap ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::ImageHistogram)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,re::TonemapLUTDomain ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::TonemapLUT)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::TonemapFloatLUT)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,unsigned char ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,unsigned int ()(void)>::destroyCallable(uint64_t a1))(void)
{
  float result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    float result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      float result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::MaterialDefinition::deinit(re::MaterialDefinition *this)
{
  re::ShaderParameterTable::deinit((re::MaterialDefinition *)((char *)this + 272));
  re::TextureParameterTable::deinit((re::MaterialDefinition *)((char *)this + 800));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 160);
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    unsigned int v3 = (re::MaterialTechniqueDefinition **)*((void *)this + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      long long v5 = *v3++;
      re::internal::destroyPersistent<re::MaterialTechniqueDefinition>((re *)"deinit", 20, v5);
      v4 -= 8;
    }
    while (v4);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 2);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 14);
  uint64_t v6 = *((unsigned int *)this + 42);
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = (int *)*((void *)this + 19);
    while (1)
    {
      int v9 = *v8;
      v8 += 12;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *((_DWORD *)this + 42);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    do
    {
      re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(*((void *)this + 19) + 48 * v10 + 16));
      if (*((_DWORD *)this + 42) <= (v7 + 1)) {
        int v11 = v7 + 1;
      }
      else {
        int v11 = *((_DWORD *)this + 42);
      }
      int v12 = v7;
      while (1)
      {
        uint64_t v10 = (v12 + 1);
        if (v11 - 1 == v12) {
          break;
        }
        ++v12;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(*((void *)this + 19) + 48 * v10) & 0x80000000) != 0) {
          goto LABEL_20;
        }
      }
      LODWORD(v7) = v11;
LABEL_20:
      ;
    }
    while (v6 != v7);
  }
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 17);
  uint64_t v14 = *((void *)this + 178);
  if (v14)
  {
    uint64_t v15 = re::globalAllocators(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15[2] + 40))(v15[2], v14);
  }
  *((void *)this + 17re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
}

re *re::internal::destroyPersistent<re::MaterialTechniqueDefinition>(re *result, uint64_t a2, re::MaterialTechniqueDefinition *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::MaterialTechniqueDefinition::~MaterialTechniqueDefinition(a3);
    long long v5 = *(uint64_t (**)(uint64_t, re::MaterialTechniqueDefinition *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

double re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v6 + v4 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

re::MaterialInstance *re::MaterialInstance::MaterialInstance(re::MaterialInstance *this, re::MaterialManager *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)uint64_t v4 = &unk_26E70E2B0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 44) = 0u;
  *(void *)(v4 + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_DWORD *)(v4 + 152) = 0;
  *(void *)(v4 + 156) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v4 + 224));
  *((void *)this + 169) = 0;
  *((unsigned char *)this + 1369) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((void *)this + 172) = atomic_fetch_add(re::MaterialInstance::g_lastInstanceId, 1uLL);
  *((void *)this + 173) = a2;
  return this;
}

void re::MaterialInstance::~MaterialInstance(re::MaterialInstance *this)
{
  *(void *)this = &unk_26E70E2B0;
  uint64_t v2 = (_anonymous_namespace_ *)*((void *)this + 173);
  if (v2) {
    re::MaterialManager::destroyMaterial(v2, *((void *)this + 172), (long long *)((char *)this + 72));
  }
  re::ShaderParameterTable::deinit((re::MaterialInstance *)((char *)this + 248));
  re::TextureParameterTable::deinit((re::MaterialInstance *)((char *)this + 776));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 157);
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit((void *)this + 9);
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit((void *)this + 12);
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 3);
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {

    *((void *)this + 2) = 0;
  }
  uint64_t v5 = *((void *)this + 169);
  if (v5)
  {
    uint64_t v6 = re::globalAllocators(v3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6[2] + 40))(v6[2], v5);
  }
  *((void *)this + 169) = 0;
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialInstance *)((char *)this + 224));
  re::FixedArray<re::LinkedFunction>::deinit((void *)this + 24);
  re::FixedArray<re::LinkedFunction>::deinit((void *)this + 21);
  uint64_t v7 = *((void *)this + 15);
  if (v7)
  {
    uint64_t v8 = *((unsigned int *)this + 38);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 24 * v8;
      do
      {
        uint64_t v11 = *((void *)this + 17);
        int v12 = *(_DWORD *)(v11 + v9);
        if (v12 < 0)
        {
          uint64_t v13 = v11 + v9;
          *(_DWORD *)uint64_t v13 = v12 & 0x7FFFFFFF;
          *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        }
        v9 += 24;
      }
      while (v10 != v9);
    }
    (*(void (**)(uint64_t, void))(*(void *)v7 + 40))(v7, *((void *)this + 16));
    *((_DWORD *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(void *)((char *)this + 156) = 0x7FFFFFFFLL;
  }
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit((void *)this + 12);
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit((void *)this + 9);
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 3);
  uint64_t v14 = *((void *)this + 2);
  if (v14)
  {

    *((void *)this + 2) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::MaterialInstance::~MaterialInstance(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(void *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    unint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (uint64_t *)result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        uint64_t v4 = std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::~unique_ptr[abi:nn180100](v4)
           + 5;
        v5 -= 40;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *unint64_t v1 = 0;
  }
  return result;
}

uint64_t re::SharedPersistentObject<re::MaterialInstance>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::MaterialTechniqueDefinition::~MaterialTechniqueDefinition(re::MaterialTechniqueDefinition *this)
{
  *((void *)this + objc_destroyWeak((id *)this + 342) = 0;
  re::FixedArray<re::WeakStringID>::deinit((void *)this + 337);
  re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 331);
  if (*((unsigned char *)this + 2632)) {
    *((void *)this + 330) = 0;
  }
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 323);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 315);
  re::DynamicString::deinit((re::MaterialTechniqueDefinition *)((char *)this + 2472));
  re::DynamicString::deinit((re::MaterialTechniqueDefinition *)((char *)this + 2440));
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialTechniqueDefinition *)((char *)this + 1296));
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialTechniqueDefinition *)((char *)this + 168));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128);
  re::FixedArray<re::TechniqueFunctionConstant>::deinit((void *)this + 6);
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((void *)this + 1);
}

void *re::FixedArray<re::WeakStringID>::deinit(void *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    uint64_t v4 = result + 1;
    uint64_t v3 = result[1];
    if (v3)
    {
      uint64_t v5 = (void *)result[2];
      bzero(v5, 8 * v3);
      double result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v1 + 40))(v1, v5);
      void *v4 = 0;
      v4[1] = 0;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (uint64_t *)result[2];
      uint64_t v5 = 88 * v2;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v4 + 6);
        double v6 = re::DynamicString::deinit((re::DynamicString *)v4);
        v4 += 11;
        v5 -= 88;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      void *v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

uint64_t *std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::MaterialTechnique *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::MaterialTechnique *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::function<void ()(re::MaterialTechnique *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::MaterialTechnique *)>::~__value_func[abi:nn180100](v4);
}

void *std::__function::__value_func<void ()(re::MaterialTechnique *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::DeformationFencePool::init(re::DeformationFencePool *this, const re::mtl::Device *a2)
{
  uint64_t v2 = this;
  *(void *)this = a2;
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = (char *)this + 520;
  uint64_t v5 = (char *)this + 8;
  do
  {
    *(void *)uint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
    v5 += 64;
    uint64_t v3 = v5;
  }
  while (v5 != v4);
  *((void *)v2 + 65) = 0;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DeformationFencePool::deinit(re::DeformationFencePool *this)
{
  *(void *)this = 0;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (char *)this + 520;
  do
  {
    uint64_t v4 = (uint64_t)(v2 + 8);
    *(void *)uint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
    v2 += 64;
    re::BucketArray<unsigned long,8ul>::deinit(v4);
  }
  while (v2 != v3);
  *((void *)this + 65) = 0;
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)this + 528);
  return re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit((uint64_t)this + 584);
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, i);
      if (*v4)
      {

        id *v4 = 0;
      }
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DeformationFencePool::setCurrentFrame(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = (void *)(result + 8);
    double v6 = (void *)(result + 520);
    do
    {
      unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFFLL;
      if (v7 != 0xFFFFFFFFFFFFFFFLL && v7 <= v4)
      {
        uint64_t v9 = v5[6];
        if (v9)
        {
          for (unint64_t i = 0; i != v9; ++i)
          {
            uint64_t v11 = *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)(v5 + 1), i);
            *(void *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v3 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
          }
        }
        void *v5 = 0xFFFFFFFFFFFFFFFLL;
        uint64_t result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear((uint64_t)(v5 + 1));
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  uint64_t v12 = a3;
  uint64_t v13 = a3 & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v14 = v3 + ((unint64_t)(a3 & 7) << 6);
  uint64_t v16 = *(void *)(v14 + 8);
  uint64_t v15 = (void *)(v14 + 8);
  *(void *)(v3 + 520) = v15;
  uint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL) {
    goto LABEL_15;
  }
  if (v17 != 0xFFFFFFFFFFFFFFFLL)
  {
    do
    {
      re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Overlapped frame (%llu) with current frame (%llu) detected! Last completed frame: %llu", "currentFrame == m_currentPerFrameFences->frameCount || !m_currentPerFrameFences->frameCount.isValid()", "setCurrentFrame", 53, v17, v13, v4);
      uint64_t result = _os_crash();
      __break(1u);
LABEL_15:
      ;
    }
    while (v13 != v17 && v17 != 0xFFFFFFFFFFFFFFFLL);
  }
  *uint64_t v15 = v12;
  return result;
}

uint64_t re::DeformationFencePool::allocateFence(re::DeformationFencePool *this)
{
  uint64_t v2 = *((void *)this + 71);
  if (v2)
  {
    uint64_t v3 = *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 528, v2 - 1);
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 528, *((void *)this + 71) - 1);
    --*((void *)this + 71);
    ++*((_DWORD *)this + 144);
LABEL_5:
    *(void *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(*((void *)this + 65) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v3;
    return v3;
  }
  id v4 = objc_msgSend(**(id **)this, sel_newFence);
  *(void *)re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::addUninitialized((uint64_t)this + 584) = v4;
  uint64_t v6 = *((void *)this + 78);
  if (v6)
  {
    uint64_t v3 = re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)this + 584, v6 - 1);
    goto LABEL_5;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      uint64_t result = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v1, i);
  }
  *(void *)(v1 + 40) = 0;
  ++*(_DWORD *)(v1 + 48);
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 64, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

uint64_t re::mesh_traversal::traverseMeshScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t result = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (result)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(long long **)(a2 + 24);
    if (v8) {
      uint64_t v10 = *(void *)(v8 + 96);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(a2 + 544);
    if (!v11) {
      uint64_t v11 = *(void *)(a2 + 416);
    }
    uint64_t v57 = v11;
    uint64_t v58 = *(void *)(a2 + 416);
    char v56 = *(unsigned char *)(a2 + 426);
    long long v66 = *(_OWORD *)(a2 + 352);
    uint64_t v12 = *(long long **)(a2 + 32);
    uint64_t v13 = *(long long **)(a2 + 480);
    char v53 = *(unsigned char *)(a2 + 640);
    long long v69 = *v9;
    if (*(void *)(a2 + 8))
    {
      uint64_t v65 = 0;
      unint64_t v14 = 0;
      uint64_t v62 = a2 + 408;
      uint64_t v49 = (_OWORD *)(a2 + 112);
      uint64_t v51 = a3 + 8;
      uint64_t v52 = a3 + 72;
      uint64_t v50 = (uint64_t)v9 + 40;
      uint64_t v46 = v10;
      uint64_t v47 = v9;
      while (1)
      {
        uint64_t v15 = re::DataArray<re::MeshInstance>::get(v52, *(void *)(*(void *)a2 + 8 * v14));
        uint64_t v16 = re::DataArray<re::MeshModel>::get(v51, *(void *)(v15 + 16));
        unint64_t v17 = *((void *)v9 + 3);
        if (v17 <= v14) {
          goto LABEL_42;
        }
        uint64_t v18 = v16;
        uint64_t v19 = v50;
        if ((v9[2] & 1) == 0) {
          uint64_t v19 = *((void *)v9 + 6);
        }
        uint64_t v20 = *(unsigned int *)(v19 + 4 * v14);
        if (v10)
        {
          unint64_t v17 = *(void *)(v10 + 8);
          if (v17 <= v14) {
            goto LABEL_43;
          }
          uint64_t v55 = *(void *)(*(void *)(v10 + 16) + 24 * v14 + 16);
          unint64_t v61 = *(void *)(*(void *)(v10 + 16) + 24 * v14 + 8);
        }
        else
        {
          uint64_t v55 = 0;
          unint64_t v61 = 0;
        }
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFF7 | (8 * (v20 & 1)))
            + ((16 * v20) & 0xFFFFFFFE0);
        unint64_t v63 = *(void *)(a2 + 400);
        uint64_t v64 = *(void *)(a2 + 392);
        float32x4_t v23 = *(float32x4_t *)(a2 + 48);
        float32x4_t v24 = *(float32x4_t *)(a2 + 64);
        float32x4_t v25 = *(float32x4_t *)(a2 + 80);
        float32x4_t v26 = *(float32x4_t *)(a2 + 96);
        long long v27 = *(_OWORD *)(v15 + 48);
        long long v28 = *(_OWORD *)(v15 + 64);
        long long v29 = *(_OWORD *)(v15 + 80);
        *(_OWORD *)id v70 = *(_OWORD *)(v15 + 32);
        *(_OWORD *)&v70[16] = v27;
        *(_OWORD *)&v70[32] = v28;
        long long v71 = v29;
        do
        {
          *(long long *)((char *)&v78 + v21) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&v70[v21])), v24, *(float32x2_t *)&v70[v21], 1), v25, *(float32x4_t *)&v70[v21], 2), v26, *(float32x4_t *)&v70[v21], 3);
          v21 += 16;
        }
        while (v21 != 64);
        v67[0] = v78;
        v67[1] = v79;
        v67[2] = v80;
        v67[3] = v81;
        *(void *)id v70 = v15;
        *(void *)&v70[8] = v16;
        *(void *)&v70[16] = v67;
        *(void *)&v70[24] = v22;
        *(_OWORD *)&v70[32] = *v49;
        *(void *)&long long v71 = v62;
        *((void *)&v71 + 1) = v64;
        unint64_t v72 = v63;
        char v73 = *(unsigned char *)(a2 + 344);
        long long v74 = v66;
        unint64_t v75 = v14;
        uint64_t v76 = 0;
        char v77 = v53;
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 8))(a1, v70);
        if (result) {
          break;
        }
        unint64_t v31 = *(void *)(v18 + 56);
LABEL_38:
        v65 += v31;
        if (++v14 >= *(void *)(a2 + 8)) {
          return result;
        }
      }
      uint64_t v54 = *(void *)(v15 + 112);
      unint64_t v60 = *(void *)(v15 + 104);
      long long v30 = *v12;
      long long v89 = *v13;
      long long v90 = v30;
      unint64_t v31 = *(void *)(v18 + 56);
      if (!v31) {
        goto LABEL_38;
      }
      unint64_t v48 = v14;
      unint64_t v32 = 0;
      uint64_t v33 = 4 * v65;
      unint64_t v17 = 32 * v65;
      uint64_t v34 = 474;
      while (1)
      {
        uint64_t v35 = a2;
        unint64_t v14 = v65 + v32;
        unint64_t v36 = *((void *)v12 + 3);
        if (v36 <= v65 + v32) {
          break;
        }
        uint64_t v37 = (uint64_t)v12 + 40;
        if ((v12[2] & 1) == 0) {
          uint64_t v37 = *((void *)v12 + 6);
        }
        unint64_t v36 = *((void *)v13 + 3);
        if (v36 <= v14) {
          goto LABEL_41;
        }
        uint64_t v38 = (uint64_t)v13 + 40;
        if ((v13[2] & 1) == 0) {
          uint64_t v38 = *((void *)v13 + 6);
        }
        a2 = v35;
        if (v32 >= v61) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = *(void *)(v55 + 8 * v32);
        }
        uint64_t v40 = *(void *)(v18 + 64);
        if (v32 >= v60) {
          int v41 = *(unsigned __int16 *)(v40 + v34);
        }
        else {
          int v41 = *(_DWORD *)(v54 + 4 * v32);
        }
        uint64_t v42 = v40 + v34 - 474;
        uint64_t v43 = v37 + v33;
        uint64_t v44 = v38 + v33;
        uint64_t v45 = v64 + 18 * v41;
        if (v63 <= v41) {
          uint64_t v45 = 0;
        }
        *(void *)&long long v78 = v58;
        *((void *)&v78 + 1) = v57;
        LODWORD(v79) = a4;
        BYTE4(v79) = v56;
        *((void *)&v79 + 1) = v32;
        *(void *)&long long v80 = v42;
        *((void *)&v80 + 1) = v67;
        *(void *)&long long v81 = v39;
        *((void *)&v81 + 1) = *(void *)((unint64_t)&v90 & 0xFFFFFFFFFFFFFFF7 | (8
                                                                                           * (*(_DWORD *)(v43 + 4 * v32) & 1)))
                              + v17;
        *(void *)&long long v82 = *(void *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFF7 | (8
                                                                                     * (*(_DWORD *)(v44 + 4 * v32) & 1)))
                        + v17;
        DWORD2(v82) = v41;
        uint64_t v83 = v62;
        uint64_t v84 = v45;
        char v85 = *(unsigned char *)(a2 + 344);
        long long v86 = v66;
        char v87 = 0;
        uint64_t v88 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v78);
        ++v32;
        unint64_t v31 = *(void *)(v18 + 56);
        v34 += 560;
        v17 += 32;
        if (v32 >= v31)
        {
          uint64_t v9 = v47;
          unint64_t v14 = v48;
          uint64_t v10 = v46;
          goto LABEL_38;
        }
      }
      uint64_t v68 = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v91 = 136315906;
      uint64_t v92 = "operator[]";
      __int16 v93 = 1024;
      int v94 = 866;
      __int16 v95 = 2048;
      uint64_t v96 = v65 + v32;
      __int16 v97 = 2048;
      unint64_t v98 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      uint64_t v68 = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v91 = 136315906;
      uint64_t v92 = "operator[]";
      __int16 v93 = 1024;
      int v94 = 866;
      __int16 v95 = 2048;
      uint64_t v96 = v65 + v32;
      __int16 v97 = 2048;
      unint64_t v98 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      *(void *)&v67[0] = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v70 = 136315906;
      *(void *)&v70[4] = "operator[]";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 866;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = v14;
      *(_WORD *)&v70[28] = 2048;
      *(void *)&v70[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      *(void *)&v67[0] = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v70 = 136315906;
      *(void *)&v70[4] = "operator[]";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 476;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = v14;
      *(_WORD *)&v70[28] = 2048;
      *(void *)&v70[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::mesh_traversal::traverseVFXScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = a2 + 48;
    v10[3] = a2 + 448;
    v10[4] = 0;
    v10[5] = 0;
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = a2 + 408;
    char v11 = *(unsigned char *)(a2 + 344);
    long long v12 = *(_OWORD *)(a2 + 352);
    uint64_t v9 = *(void *)(a2 + 784);
    uint64_t v13 = 0;
    uint64_t v14 = v9;
    char v15 = *(unsigned char *)(a2 + 640);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v10);
    if (result) {
      return re::addVFXSceneDrawsToTechniqueBuckets(a2, a3, a1, a4);
    }
  }
  return result;
}

re::CustomDeformers *re::CustomDeformers::CustomDeformers(re::CustomDeformers *this, re::Allocator *a2)
{
  *(void *)this = &unk_26E70E310;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *(void *)((char *)this + 60) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v4 = (char *)this + 72;
  *(void *)((char *)this + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 1) = a2;
  uint64_t v5 = (void *)((char *)this + 8);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 1, 0);
  ++*((_DWORD *)this + 8);
  *((_DWORD *)this + 13) = 8;
  re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock(v5);
  re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v4, (uint64_t)a2, 32);
  return this;
}

void re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  long long v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_13, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CustomDeformers::registerCustomDeformer@<X0>(uint64_t a1@<X0>, StringID *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (a5 && a6)
  {
    uint64_t v16 = "Custom deformers only current support either CPU or GPU mode.";
LABEL_8:
    goto LABEL_9;
  }
  if (!(a5 | a6))
  {
    uint64_t v16 = "Custom deformers must specify either CPU or GPU functions.";
    goto LABEL_8;
  }
  var1 = a2->var1;
  if (strlen(var1) >= 0x40)
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Invalid deformer name, exceeded maximum length (%zu): %s.", (re::DynamicString *)&v52, 64, var1);
LABEL_9:
    long long v20 = v52;
    long long v21 = v53;
    *(unsigned char *)a8 = 0;
    *(void *)(a8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1001;
    *(void *)(a8 + 16) = &re::GraphicsErrorCategory(void)::instance;
    *(_OWORD *)(a8 + 24) = v20;
    *(_OWORD *)(a8 + 40) = v21;
    return result;
  }
  uint64_t v50 = a4;
  uint64_t v51 = a7;
  uint64_t v48 = a1 + 72;
  if (*(void *)(a1 + 72))
  {
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 80)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 96)));
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(a1 + 88);
      while (!re::StringID::operator==((void *)(v24 + 32 * v23 + 8), a2))
      {
        uint64_t v23 = *(_DWORD *)(v24 + 32 * v23) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_15;
        }
      }
      uint64_t result = re::DynamicString::format((re::DynamicString *)"Cannot register duplicate custom deformer name: %s.", (re::DynamicString *)&v52, var1);
      goto LABEL_9;
    }
  }
LABEL_15:
  uint64_t v25 = *(void *)(a1 + 144);
  if (v25)
  {
    uint64_t v26 = v25 - 1;
    uint64_t v27 = *(void *)(*(void *)(a1 + 160) + 8 * v26);
    *(void *)(a1 + 144) = v26;
    ++*(_DWORD *)(a1 + 152);
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = v27 + 1;
  }
  int v28 = *(_DWORD *)(a1 + 64);
  if ((v28 + 1) >> 24) {
    int v29 = 1;
  }
  else {
    int v29 = v28 + 1;
  }
  *(_DWORD *)(a1 + 64) = v29;
  uint64_t v30 = *(unsigned __int16 *)(a1 + 60);
  unint64_t v31 = *(unsigned __int16 *)(a1 + 62);
  if (v30 == 0xFFFF && v31 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 56) >= *(_DWORD *)(a1 + 52)) {
      re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock((void *)(a1 + 8));
    }
    uint64_t v32 = *(void *)(a1 + 24);
    unint64_t v31 = (unsigned __int16)(v32 - 1);
    if (v32)
    {
      uint64_t v30 = *(unsigned int *)(a1 + 56);
      if (v30 < 0x10000)
      {
        uint64_t v33 = (void *)(*(void *)(a1 + 40) + 16 * v31);
        *(_DWORD *)(a1 + 56) = v30 + 1;
        *(_DWORD *)(v33[1] + 4 * v30) = *(_DWORD *)(a1 + 64);
        uint64_t v34 = *v33 + 48 * v30;
        goto LABEL_30;
      }
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)5, v18, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v30, v48);
    _os_crash();
    __break(1u);
LABEL_47:
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 24) <= v31) {
    goto LABEL_47;
  }
  uint64_t v35 = (void *)(*(void *)(a1 + 40) + 16 * v31);
  *(_DWORD *)(v35[1] + 4 * v30) = v29;
  uint64_t v34 = *v35 + 48 * v30;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)v34;
LABEL_30:
  ++*(_DWORD *)(a1 + 48);
  uint64_t v49 = v27;
  *(void *)uint64_t v34 = v27;
  *(void *)(v34 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  *(void *)(v34 + 16) = v50;
  *(void *)(v34 + 24) = a5;
  *(void *)(v34 + 32) = a6;
  *(void *)(v34 + 40) = v51;
  int v36 = *(_DWORD *)(a1 + 64);
  unint64_t v37 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v38 = (0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) ^ ((0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) >> 31);
  if (*(void *)(a1 + 72))
  {
    unint64_t v39 = v38 % *(unsigned int *)(a1 + 96);
    uint64_t v40 = *(unsigned int *)(*(void *)(a1 + 80) + 4 * v39);
    if (v40 != 0x7FFFFFFF)
    {
      uint64_t v41 = *(void *)(a1 + 88);
      do
      {
        uint64_t result = re::StringID::operator==((void *)(v41 + 32 * v40 + 8), a2);
        if (result) {
          goto LABEL_43;
        }
        uint64_t v40 = *(_DWORD *)(v41 + 32 * v40) & 0x7FFFFFFF;
      }
      while (v40 != 0x7FFFFFFF);
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  unint64_t v42 = (v31 << 16) | ((unint64_t)(v36 & 0xFFFFFF) << 32) | v30;
  uint64_t v43 = *(unsigned int *)(a1 + 108);
  if (v43 == 0x7FFFFFFF)
  {
    uint64_t v43 = *(unsigned int *)(a1 + 104);
    int v44 = v43;
    if (v43 == *(_DWORD *)(a1 + 96))
    {
      re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(v48, 2 * *(_DWORD *)(a1 + 100));
      LODWORD(v39) = v38 % *(unsigned int *)(a1 + 96);
      int v44 = *(_DWORD *)(a1 + 104);
    }
    *(_DWORD *)(a1 + 104) = v44 + 1;
    uint64_t v45 = *(void *)(a1 + 88);
    int v46 = *(_DWORD *)(v45 + 32 * v43);
  }
  else
  {
    uint64_t v45 = *(void *)(a1 + 88);
    int v46 = *(_DWORD *)(v45 + 32 * v43);
    *(_DWORD *)(a1 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v46 & 0x7FFFFFFF;
  }
  uint64_t v47 = 32 * v43;
  *(_DWORD *)(v45 + v47) = v46 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 88) + v47) = *(_DWORD *)(*(void *)(a1 + 88) + 32 * v43) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 80) + 4 * v39);
  uint64_t result = (uint64_t)re::StringID::StringID((re::StringID *)(*(void *)(a1 + 88) + 32 * v43 + 8), a2);
  *(void *)(*(void *)(a1 + 88) + 32 * v43 + 24) = v42;
  *(_DWORD *)(*(void *)(a1 + 80) + 4 * v39) = v43;
  ++*(_DWORD *)(a1 + 100);
  ++*(_DWORD *)(a1 + 112);
LABEL_43:
  *(unsigned char *)a8 = 1;
  *(void *)(a8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v49;
  return result;
}

uint64_t re::CustomDeformers::unregisterCustomDeformer@<X0>(re::CustomDeformers *this@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (char *)this + 72;
  unint64_t v7 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 72, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    signed int v9 = (void *)((char *)this + 128);
    uint64_t v10 = (char *)this + 8;
    uint64_t v11 = (void *)re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)v10, *v7);
    re::DynamicArray<unsigned long>::add(v9, v11);
    re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy((uint64_t)v10, *v8);
    uint64_t result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v6, a2);
    char v13 = 1;
  }
  else
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Cannot unregister unknown deformer: %s.", (re::DynamicString *)&v17, *((void *)a2 + 1));
    char v13 = 0;
    long long v14 = v17;
    uint64_t v15 = v18;
    uint64_t v16 = v19;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1001;
    *(void *)(a3 + 16) = &re::GraphicsErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v14;
    *(void *)(a3 + 40) = v15;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v16;
  }
  *(unsigned char *)a3 = v13;
  return result;
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 48 * (unsigned __int16)a2;
}

_DWORD *re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t result = (_DWORD *)re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *uint64_t result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::CustomDeformers::customDeformerID(re::CustomDeformers *this, const re::StringID *a2)
{
  unint64_t v3 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 72, a2);
  if (v3) {
    return *(void *)re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)this + 8, *v3);
  }
  else {
    return -1;
  }
}

void re::CustomDeformers::addDeformationInstance(re::CustomDeformers *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (char *)this + 72;
  if (a2)
  {
    uint64_t v6 = (char)*a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v15[0] = 2 * v6;
  v15[1] = a2;
  uint64_t v10 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v15);
  re::StringID::destroyString((re::StringID *)v15);
  if (v10)
  {
    uint64_t v11 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)this + 8, *v10);
    uint64_t v12 = (*(uint64_t (**)(void, void))(v11 + 8))(*(void *)v11, *(void *)(v11 + 40));
    *(void *)a3 = *v10;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    *(void *)(a3 + 16) = v13;
    char v14 = *(void *)(v11 + 24) != 0;
  }
  else
  {
    *(void *)(a3 + 24) = 0;
    *(_DWORD *)a3 = -1;
    *(void *)(a3 + 12) = 0;
    *(void *)(a3 + 4) = 0;
    char v14 = -1;
    *(_DWORD *)(a3 + 20) = 0;
  }
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = -1;
  *(void *)(a3 + 40) = 0;
}

uint64_t re::CustomDeformers::allocateBuffers(unsigned int *a1, uint64_t a2, unsigned int a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v45 = a2;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 64, 8);
  uint64_t v46 = (uint64_t)(a1 + 2);
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  unint64_t v12 = a1[12];
  *(void *)uint64_t v11 = v10;
  re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((void *)v11, v12);
  ++*(_DWORD *)(v11 + 24);
  unint64_t v13 = *(void *)(*a4 + 48);
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  if (!v13) {
    goto LABEL_31;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 1;
  uint64_t v44 = v10;
  do
  {
    unint64_t v16 = v49;
    if (v49 <= v14) {
      goto LABEL_41;
    }
    if (*(unsigned char *)(v50 + v14)) {
      goto LABEL_5;
    }
    uint64_t v17 = re::CustomDeformers::resolveCustomDeformerHandle(a4, v14);
    memset(&v52[8], 0, 20);
    *(void *)&v54[2] = 0;
    *(void *)long long v52 = v10;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v52, v13);
    ++*(_DWORD *)&v52[24];
    unint64_t v16 = v49;
    if (v49 <= v14) {
      goto LABEL_44;
    }
    *(unsigned char *)(v50 + v14) = 1;
    unint64_t v47 = v14;
    unint64_t v18 = v14;
    do
    {
      uint64_t v19 = re::CustomDeformers::resolveCustomDeformerHandle(a4, v18);
      if (v19 == v17 && ((v19 ^ v17) & 0xFFFFFF00000000) == 0)
      {
        unint64_t v16 = v47;
        unint64_t v20 = v49;
        if (v49 <= v47)
        {
          uint64_t v51 = 0;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v62 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v55 = 136315906;
          *(void *)&v55[4] = "operator[]";
          __int16 v56 = 1024;
          int v57 = 468;
          __int16 v58 = 2048;
          unint64_t v59 = v16;
          __int16 v60 = 2048;
          unint64_t v61 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(void *)long long v55 = 0;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v62 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v52 = 136315906;
          *(void *)&v52[4] = "operator[]";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 468;
          *(_WORD *)&v52[18] = 2048;
          *(void *)&v52[20] = v14;
          __int16 v53 = 2048;
          *(void *)long long v54 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_42;
        }
        *(unsigned char *)(v50 + v47) = 1;
        re::DynamicArray<unsigned long>::add(v52, &v47);
      }
      unint64_t v18 = v47 + 1;
      unint64_t v47 = v18;
    }
    while (v18 < v13);
    long long v21 = (_anonymous_namespace_ *)re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(v46, v17);
    if (v21)
    {
      uint64_t v22 = *(void *)v52;
      long long v23 = *(_OWORD *)&v52[8];
      memset(v52, 0, 24);
      uint64_t v24 = *(void *)&v54[2];
      *(void *)&v54[2] = 0;
      ++*(_DWORD *)&v52[24];
      unint64_t v25 = *(void *)(v11 + 8);
      unint64_t v26 = *(void *)(v11 + 16);
      if (v26 >= v25)
      {
        unint64_t v27 = v26 + 1;
        if (v25 < v26 + 1)
        {
          long long v43 = v23;
          if (*(void *)v11)
          {
            uint64_t v28 = 2 * v25;
            BOOL v29 = v25 == 0;
            unint64_t v30 = 8;
            if (!v29) {
              unint64_t v30 = v28;
            }
            if (v30 <= v27) {
              unint64_t v31 = v27;
            }
            else {
              unint64_t v31 = v30;
            }
            re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((void *)v11, v31);
          }
          else
          {
            re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((void *)v11, v27);
            ++*(_DWORD *)(v11 + 24);
          }
          long long v23 = v43;
        }
        unint64_t v26 = *(void *)(v11 + 16);
      }
      uint64_t v32 = *(void *)(v11 + 32) + 48 * v26;
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = 0;
      *(void *)uint64_t v32 = v17;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22;
      *(_OWORD *)(v32 + 16) = v23;
      *(void *)(v32 + 40) = v24;
      *(_DWORD *)(v32 + 32) = 1;
      ++*(void *)(v11 + 16);
      ++*(_DWORD *)(v11 + 24);
      uint64_t v10 = v44;
    }
    if (*(void *)v52 && *(void *)&v54[2]) {
      (*(void (**)(void))(**(void **)v52 + 40))();
    }
LABEL_5:
    ++v14;
  }
  while (v14 != v13);
LABEL_31:
  unint64_t v33 = *(void *)(v11 + 16);
  re::FixedArray<unsigned long>::init<>((uint64_t *)(v11 + 40), v10, v33);
  unint64_t v14 = a5;
  if (v33)
  {
    uint64_t v34 = 0;
    unint64_t v16 = 0;
    while (1)
    {
      unint64_t v15 = *(void *)(v11 + 16);
      if (v15 <= v16) {
        break;
      }
      uint64_t v35 = (void *)(*(void *)(v11 + 32) + v34);
      uint64_t v36 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v46, *v35);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, void, void *, unint64_t, uint64_t, uint64_t, void, void, void, void))(v36 + 16))(v45, a3, a4, a5, a6, a7, v35[5], v35[3], *(void *)v36, *(void *)(v36 + 40));
      unint64_t v15 = *(void *)(v11 + 48);
      if (v15 <= v16) {
        goto LABEL_43;
      }
      *(void *)(*(void *)(v11 + 56) + 8 * v16++) = v37;
      v34 += 48;
      if (v33 == v16) {
        goto LABEL_36;
      }
    }
LABEL_42:
    *(void *)long long v55 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 789;
    *(_WORD *)&v52[18] = 2048;
    *(void *)&v52[20] = v16;
    __int16 v53 = 2048;
    *(void *)long long v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    *(void *)long long v55 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 468;
    *(_WORD *)&v52[18] = 2048;
    *(void *)&v52[20] = v16;
    __int16 v53 = 2048;
    *(void *)long long v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    uint64_t v51 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v55 = 136315906;
    *(void *)&v55[4] = "operator[]";
    __int16 v56 = 1024;
    int v57 = 468;
    __int16 v58 = 2048;
    unint64_t v59 = v14;
    __int16 v60 = 2048;
    unint64_t v61 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_36:
  if (v48 && v49) {
    (*(void (**)(void))(*(void *)v48 + 40))();
  }
  return v11;
}

uint64_t re::CustomDeformers::resolveCustomDeformerHandle(void *a1, unint64_t a2)
{
  uint64_t v3 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*a1 + 8, a2);
  uint64_t v4 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](a1[1], *(void *)(v3 + 8));
  unint64_t v6 = *(unsigned __int8 *)(v3 + 16);
  unint64_t v7 = *(void *)(v4 + 336);
  if (v7 > v6) {
    return *(void *)(*(void *)(v4 + 328) + (v6 << 6));
  }
  re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v3 + 16), v7);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 48 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::CustomDeformers::deformGPU(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = result + 8;
    do
    {
      if (a2[2] <= v9)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = a2[4];
      uint64_t v12 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v10, *(void *)(v11 + v8));
      if (a2[6] <= v9) {
        goto LABEL_8;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, void, void))(v12 + 24))(*(void *)(a2[7] + 8 * v9++), a3, a4, *(void *)(v11 + v8 + 40), *(void *)(v11 + v8 + 24), *(void *)v12, *(void *)(v12 + 40));
      v8 += 48;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t re::CustomDeformers::deformCPU(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[2];
  if (v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = result + 8;
    do
    {
      if (a2[2] <= v7)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = a2[4];
      uint64_t v10 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v8, *(void *)(v9 + v6));
      if (a2[6] <= v7) {
        goto LABEL_8;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void, void, void))(v10 + 32))(*(void *)(a2[7] + 8 * v7++), a3, *(void *)(v9 + v6 + 40), *(void *)(v9 + v6 + 24), *(void *)v10, *(void *)(v10 + 40));
      v6 += 48;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 6) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 6)) + 24 * (a2 & 0x3F);
}

uint64_t re::BucketArray<re::ActiveDeformation,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 400 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 400 * (a2 & 7);
}

void re::CustomDeformers::~CustomDeformers(re::CustomDeformers *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9);
  re::DataArray<re::CustomDeformers::CustomDeformerData>::deinit((uint64_t)this + 8);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::CustomDeformers::CustomDeformerData>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::CustomDeformers::CustomDeformerData>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

_anonymous_namespace_ *re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock(void *a1)
{
  uint64_t v3 = 48 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  unint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *unint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

void re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)unint64_t v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          if ((*(_DWORD *)(*(void *)&v27[16] + v11) & 0x80000000) != 0)
          {
            uint64_t v15 = *(void *)&v27[16] + v11;
            unint64_t v16 = (const StringID *)(*(void *)&v27[16] + v11 + 8);
            unint64_t v17 = 0xBF58476D1CE4E5B9 * ((*(void *)&v16->var0 >> 31) ^ (*(void *)&v16->var0 >> 1));
            unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
            unint64_t v19 = *(unsigned int *)(a1 + 24);
            unint64_t v20 = v18 % v19;
            uint64_t v21 = *(unsigned int *)(a1 + 36);
            if (v21 == 0x7FFFFFFF)
            {
              uint64_t v21 = *(unsigned int *)(a1 + 32);
              int v22 = v21;
              if (v21 == v19)
              {
                re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v14));
                unint64_t v20 = v18 % *(unsigned int *)(a1 + 24);
                int v22 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v22 + 1;
              uint64_t v23 = *(void *)(a1 + 16);
              int v24 = *(_DWORD *)(v23 + 32 * v21);
            }
            else
            {
              uint64_t v23 = *(void *)(a1 + 16);
              int v24 = *(_DWORD *)(v23 + 32 * v21);
              *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
            }
            uint64_t v25 = 32 * v21;
            *(_DWORD *)(v23 + v25) = v24 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v25) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v21) & 0x80000000 | *(_DWORD *)(v13 + 4 * v20);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v21 + 8), v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v21 + 24) = *(void *)(v15 + 24);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v20) = v21;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
            unsigned int v10 = *(_DWORD *)&v27[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void *re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unsigned int v10 = &v8[6 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          v11[5] = 0;
          *uint64_t v11 = v12;
          v11[1] = 0;
          *((_DWORD *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          v11[2] = 0;
          v11[3] = 0;
          uint64_t v13 = v8[1];
          uint64_t v14 = v8[2];
          uint64_t v15 = (uint64_t)(v8 + 1);
          v11[1] = v13;
          v11[2] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v16 = v11[3];
          v11[3] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[5];
          v11[5] = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 8);
          re::DynamicArray<unsigned long>::deinit(v15);
          unsigned int v8 = (uint64_t *)(v15 + 40);
          v11 += 6;
        }
        while (v8 != v10);
        unsigned int v8 = (uint64_t *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::LightContext::createLightConstantBuffer(uint32x2_t *a1, uint64_t *a2, float32x4_t *a3, uint64_t a4, char a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned int *)a2 + 2);
  unsigned int v8 = (int *)(*a2 + v7);
  *((void *)v8 + 6) = 0;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)unsigned int v8 = 0u;
  BOOL isEmpty = re::LightContext::isEmpty((re::LightContext *)a1);
  if (!isEmpty)
  {
    for (uint64_t i = 0; i != 2048; i += 256)
      *(_DWORD *)(v7 + v6 + 240 + i) = 0;
    for (uint64_t j = 0; j != 2048; j += 256)
      *(_DWORD *)(v7 + v6 + 2288 + j) = 0;
    uint64_t v12 = (_DWORD *)(v7 + v6 + 4776);
    uint64_t v13 = 8;
    do
    {
      *((void *)v12 - 5) = 0x3F80000000000000;
      *(v12 - 2) = 1008981770;
      *((unsigned char *)v12 - 4) = 0;
      _DWORD *v12 = 0x40000000;
      v12 += 156;
      --v13;
    }
    while (v13);
    *((void *)v8 + 1216) = 0x3F80000000000000;
    v8[2440] = 1008981770;
    *((unsigned char *)v8 + 9764) = 0;
    v8[2442] = 0x40000000;
    uint64_t v14 = (_DWORD *)(v7 + v6 + 10056);
    uint64_t v15 = 8;
    do
    {
      *((void *)v14 - 5) = 0x3F80000000000000;
      *(v14 - 2) = 1008981770;
      *((unsigned char *)v14 - 4) = 0;
      _DWORD *v14 = 0x40000000;
      v14 += 72;
      --v15;
    }
    while (v15);
    uint64_t v16 = (_DWORD *)(v7 + v6 + 12360);
    uint64_t v17 = 8;
    do
    {
      *((void *)v16 - 5) = 0x3F80000000000000;
      *(v16 - 2) = 1008981770;
      *((unsigned char *)v16 - 4) = 0;
      _DWORD *v16 = 0x40000000;
      v16 += 72;
      --v17;
    }
    while (v17);
    for (uint64_t k = 0; k != 768; k += 96)
      *(unsigned char *)(v7 + v6 + 14592 + k) = 0;
    v8[3864] = 0;
    unint64_t v19 = (_DWORD *)(v7 + v6 + 15816);
    uint64_t v20 = 8;
    do
    {
      *((void *)v19 - 5) = 0x3F80000000000000;
      *(v19 - 2) = 1008981770;
      *((unsigned char *)v19 - 4) = 0;
      *unint64_t v19 = 0x40000000;
      v19 += 72;
      --v20;
    }
    while (v20);
    uint64_t v21 = (_DWORD *)(v7 + v6 + 18120);
    uint64_t v22 = 8;
    do
    {
      *((void *)v21 - 5) = 0x3F80000000000000;
      *(v21 - 2) = 1008981770;
      *((unsigned char *)v21 - 4) = 0;
      _DWORD *v21 = 0x40000000;
      v21 += 72;
      --v22;
    }
    while (v22);
    uint64_t v23 = (_DWORD *)(v7 + v6 + 4776);
    uint64_t v24 = 8;
    do
    {
      *((void *)v23 - 5) = 0x3F80000000000000;
      *(v23 - 2) = 1008981770;
      *((unsigned char *)v23 - 4) = 0;
      _DWORD *v23 = 0x40000000;
      v23 += 156;
      --v24;
    }
    while (v24);
    *((void *)v8 + 1216) = 0x3F80000000000000;
    v8[2440] = 1008981770;
    *((unsigned char *)v8 + 9764) = 0;
    v8[2442] = 0x40000000;
    v237 = v8 + 6504;
    uint64_t v25 = v8 + 6505;
    *((void *)v8 + 3252) = 0;
    signed int v26 = a3;
    float32x4_t v27 = vnegq_f32(*a3);
    v27.i32[3] = 1.0;
    float32x4_t v251 = v27;
    PointLightFaceLookatOrientations = re::getPointLightFaceLookatOrientations((re *)isEmpty);
    uint64_t v31 = v28;
    uint32x2_t v32 = a1[1];
    char v33 = a5;
    if (v32)
    {
      uint32x2_t v34 = a1[2];
      uint64_t v35 = *(void *)&v34 + 208 * *(void *)&v32;
      float32x4_t v30 = (float32x4_t)xmmword_23435FD50;
      float32x4_t v36 = (float32x4_t)xmmword_23435FD60;
      float32x4_t v37 = (float32x4_t)xmmword_23435FD80;
      float32x4_t v241 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      do
      {
        float32x4_t v38 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v34 + 128), *(float *)(*(void *)&v34 + 144));
        if (fmaxf(fmaxf(v38.f32[0], v38.f32[2]), v38.f32[1]) > 0.0)
        {
          if (!*(unsigned char *)(*(void *)&v34 + 204) || (v33 & 1) != 0)
          {
            uint64_t v41 = *v8;
            if ((int)v41 < 8)
            {
              int *v8 = v41 + 1;
              uint64_t v40 = (uint64_t)&v8[64 * v41 + 16];
              goto LABEL_34;
            }
            ++*v237;
          }
          else if (*(unsigned char *)(*(void *)&v34 + 205))
          {
            int v39 = v8[13];
            if (v39 <= 0)
            {
              v8[13] = v39 + 1;
              uint64_t v40 = (uint64_t)(v8 + 6440);
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v42 = v8[1];
            if ((int)v42 < 8)
            {
              v8[1] = v42 + 1;
              uint64_t v40 = (uint64_t)&v8[64 * v42 + 528];
LABEL_34:
              uint64_t v43 = 0;
              float32x4_t v44 = *(float32x4_t *)(*(void *)&v34 + 32);
              simd_float4 v45 = *(simd_float4 *)(*(void *)&v34 + 48);
              int32x4_t v46 = (int32x4_t)vmulq_f32(v44, v44);
              v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
              float32x2_t v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
              float32x2_t v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
              LODWORD(v4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).u32[0];
              simd_float4 v50 = *(simd_float4 *)(*(void *)&v34 + 16);
              v252.columns[0] = *(simd_float4 *)*(void *)&v34;
              v252.columns[1] = v50;
              v252.columns[2] = (simd_float4)v44;
              v252.columns[3] = v45;
              do
              {
                v253.columns[v43] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)&v252.columns[v43])), v36, *(float32x2_t *)v252.columns[v43].f32, 1), v37, (float32x4_t)v252.columns[v43], 2), v251, (float32x4_t)v252.columns[v43], 3);
                ++v43;
              }
              while (v43 != 4);
              float32x4_t v246 = vmulq_n_f32(v44, v49);
              simd_float4x4 v254 = __invert_f4(v253);
              *(float32x4_t *)uint64_t v40 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v34 + 128), *(float *)(*(void *)&v34 + 144)), v241);
              *(float32x4_t *)(v40 + 16) = v246;
              *(simd_float4x4 *)(v40 + 32) = v254;
              int8x16_t v51 = 0uLL;
              int v52 = 0;
              if (*(unsigned char *)(*(void *)&v34 + 204))
              {
                char v33 = a5;
                if ((a5 & 1) == 0)
                {
                  int v52 = *(_DWORD *)(*(void *)&v34 + 148);
                  if (*(__int16 *)(*(void *)&v34 + 176) == -1)
                  {
                    ++*v25;
                  }
                  else
                  {
                    *(float32x2_t *)v53.f32 = vcvt_f32_u32(a1[19]);
                    v53.i64[1] = v53.i64[0];
                    v54.i32[0] = *(_DWORD *)(*(void *)&v34 + 168);
                    v54.i32[1] = *(_DWORD *)(*(void *)&v34 + 152);
                    v55.i32[0] = v54.i32[1];
                    v55.i32[1] = *(_DWORD *)(*(void *)&v34 + 172);
                    int32x2_t v56 = (int32x2_t)vdupq_n_s32(2 * v54.i32[1]).u64[0];
                    *(int32x2_t *)v57.i8 = vadd_s32(v54, v55);
                    v57.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(void *)&v34 + 156), v56);
                    int8x16_t v51 = (int8x16_t)vdivq_f32(vcvtq_f32_u32(v57), v53);
                  }
                }
              }
              else
              {
                char v33 = a5;
              }
              uint64_t v58 = 0;
              float32x4_t v59 = *(float32x4_t *)(*(void *)&v34 + 64);
              float32x4_t v60 = *(float32x4_t *)(*(void *)&v34 + 80);
              float32x4_t v61 = *(float32x4_t *)(*(void *)&v34 + 96);
              float32x4_t v62 = *(float32x4_t *)(*(void *)&v34 + 112);
              float32x2_t v63 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vcvt_f32_u32(a1[19]));
              *(float32x4_t *)(v40 + 96) = v59;
              *(float32x4_t *)(v40 + 112) = v60;
              *(float32x4_t *)(v40 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v61;
              *(float32x4_t *)(v40 + 144) = v62;
              simd_float4x4 v252 = v254;
              do
              {
                v253.columns[v58] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)&v252.columns[v58])), v60, *(float32x2_t *)v252.columns[v58].f32, 1), v61, (float32x4_t)v252.columns[v58], 2), v62, (float32x4_t)v252.columns[v58], 3);
                ++v58;
              }
              while (v58 != 4);
              uint64_t v64 = 0;
              simd_float4x4 v252 = v253;
              float v65 = 2.0 / v59.f32[0];
              float32x4_t v37 = (float32x4_t)xmmword_23435FD80;
              do
              {
                v253.columns[v64] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_234385420, COERCE_FLOAT(*(_OWORD *)&v252.columns[v64])), (float32x4_t)xmmword_2343ACD40, *(float32x2_t *)v252.columns[v64].f32, 1), (float32x4_t)xmmword_23435FD80, (float32x4_t)v252.columns[v64], 2), (float32x4_t)xmmword_2343ACD50, (float32x4_t)v252.columns[v64], 3);
                ++v64;
              }
              while (v64 != 4);
              if (v63.f32[0] >= v63.f32[1]) {
                float v66 = v63.f32[0];
              }
              else {
                float v66 = v63.f32[1];
              }
              simd_float4 v67 = v253.columns[1];
              simd_float4 v68 = v253.columns[2];
              simd_float4 v69 = v253.columns[3];
              *(simd_float4 *)(v40 + 192) = v253.columns[0];
              *(simd_float4 *)(v40 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v67;
              *(simd_float4 *)(v40 + 224) = v68;
              *(simd_float4 *)(v40 + 240) = v69;
              *(int8x16_t *)(v40 + 160) = v51;
              *(_DWORD *)(v40 + 176) = v52;
              *(float *)(v40 + 180) = v65 * (float)(1.0 / v66);
              signed int v26 = a3;
              float32x4_t v36 = (float32x4_t)xmmword_23435FD60;
              float32x4_t v30 = (float32x4_t)xmmword_23435FD50;
              goto LABEL_50;
            }
            ++*v25;
          }
        }
LABEL_50:
        *(void *)&v34 += 208;
      }
      while (*(void *)&v34 != v35);
    }
    uint32x2_t v70 = a1[4];
    if (v70)
    {
      uint32x2_t v71 = a1[5];
      uint64_t v72 = *(void *)&v71 + 352 * *(void *)&v70;
      float32x4_t v73 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      __asm { FMOV            V1.4S, #0.25 }
      float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x3EA2F983u);
      do
      {
        float v80 = *(float *)(*(void *)&v71 + 144);
        float32x4_t v81 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v71 + 128), v80);
        if (fmaxf(fmaxf(v81.f32[0], v81.f32[2]), v81.f32[1]) > 0.0)
        {
          if (!*(unsigned char *)(*(void *)&v71 + 341) || (v33 & 1) != 0)
          {
            if (*(unsigned char *)(*(void *)&v71 + 342))
            {
              int v84 = v8[11];
              if (v84 < 8)
              {
                v8[11] = v84 + 1;
                uint64_t v83 = (uint64_t)&v8[156 * v84 + 5036];
                goto LABEL_68;
              }
            }
            else
            {
              int v86 = v8[2];
              if (v86 < 8)
              {
                v8[2] = v86 + 1;
                uint64_t v83 = (uint64_t)&v8[156 * v86 + 1040];
                goto LABEL_68;
              }
            }
            ++*v237;
          }
          else
          {
            if (*(unsigned char *)(*(void *)&v71 + 342))
            {
              int v82 = v8[12];
              if (v82 < 1)
              {
                v8[12] = v82 + 1;
                uint64_t v83 = (uint64_t)&v8[156 * v82 + 6284];
                goto LABEL_68;
              }
            }
            else
            {
              int v85 = v8[3];
              if (v85 < 1)
              {
                v8[3] = v85 + 1;
                uint64_t v83 = (uint64_t)&v8[156 * v85 + 2288];
LABEL_68:
                uint64_t v87 = 0;
                float32x4_t v88 = vsubq_f32(*(float32x4_t *)(*(void *)&v71 + 48), *v26);
                *(float32x4_t *)uint64_t v83 = vmulq_f32(vmulq_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v71 + 128), v80), v73), _Q1), v79);
                *(_DWORD *)(v83 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)&v71 + 148);
                *(unsigned char *)(v83 + 612) = *(unsigned char *)(*(void *)&v71 + 340);
                *(float32x4_t *)(v83 + 16) = v88;
                *(float *)(v83 + 580) = 1.0
                                      / (float)(*(float *)(*(void *)&v71 + 152) * *(float *)(*(void *)&v71 + 152));
                float v89 = *(float *)(*(void *)&v71 + 156) * 0.5;
                if (v89 < 0.0) {
                  float v89 = 0.0;
                }
                *(float *)(v83 + 616) = v89;
                float32x4_t v90 = vnegq_f32(v88);
                float32x4_t v91 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
                uint64_t v92 = (_OWORD *)(v83 + 48);
                do
                {
                  if (v31 == v87)
                  {
                    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v31);
                    _os_crash();
                    __break(1u);
                    return;
                  }
                  float32x4_t v93 = (float32x4_t)PointLightFaceLookatOrientations[v87];
                  float32x4_t v94 = vnegq_f32(v93);
                  float32x4_t v95 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL);
                  float32x4_t v96 = vmlaq_f32(vmulq_f32(v91, v93), v90, v95);
                  int8x16_t v97 = (int8x16_t)vaddq_f32(v96, v96);
                  float32x4_t v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL);
                  int8x16_t v99 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), v93), v98, v95);
                  float32x4_t v100 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v98, v93, 3), v88), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), v99, 0xCuLL));
                  v98.f32[0] = v94.f32[0] + v94.f32[0];
                  float v101 = (float)(v94.f32[0] + v94.f32[0]) * v94.f32[0];
                  float v102 = vmuls_lane_f32(v94.f32[1] + v94.f32[1], *(float32x2_t *)v94.f32, 1);
                  float v103 = vmuls_lane_f32(v94.f32[2] + v94.f32[2], v94, 2);
                  float v104 = vmuls_lane_f32(v94.f32[0] + v94.f32[0], *(float32x2_t *)v94.f32, 1);
                  float v105 = vmuls_lane_f32(v94.f32[0] + v94.f32[0], v94, 2);
                  v94.f32[0] = vmuls_lane_f32(v94.f32[1] + v94.f32[1], v94, 2);
                  v98.f32[0] = vmuls_lane_f32(v98.f32[0], v93, 3);
                  float v106 = vmuls_lane_f32(v94.f32[1] + v94.f32[1], v93, 3);
                  v93.f32[0] = vmuls_lane_f32(v94.f32[2] + v94.f32[2], v93, 3);
                  HIDWORD(v107) = 0;
                  *(float *)&long long v107 = 1.0 - (float)(v102 + v103);
                  *((float *)&v107 + 1) = v104 + v93.f32[0];
                  *((float *)&v107 + 2) = v105 - v106;
                  HIDWORD(v10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
                  *(float *)&long long v108 = v104 - v93.f32[0];
                  *((float *)&v108 + 1) = 1.0 - (float)(v101 + v103);
                  *((float *)&v108 + 2) = v94.f32[0] + v98.f32[0];
                  HIDWORD(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
                  *(float *)&long long v109 = v105 + v106;
                  *((float *)&v109 + 1) = v94.f32[0] - v98.f32[0];
                  *((float *)&v109 + 2) = 1.0 - (float)(v101 + v102);
                  v100.i32[3] = 1.0;
                  *(v92 - 1) = v107;
                  *uint64_t v92 = v108;
                  v92[1] = v109;
                  v92[2] = v100;
                  ++v87;
                  v92 += 4;
                }
                while (v87 != 6);
                int32x4_t v110 = *(int32x4_t *)(*(void *)&v71 + 80);
                long long v111 = *(_OWORD *)(*(void *)&v71 + 96);
                long long v112 = *(_OWORD *)(*(void *)&v71 + 112);
                *(_OWORD *)(v83 + 416) = *(_OWORD *)(*(void *)&v71 + 64);
                *(int32x4_t *)(v83 + 432) = v110;
                *(_OWORD *)(v83 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v111;
                *(_OWORD *)(v83 + 464) = v112;
                if (!*(unsigned char *)(*(void *)&v71 + 341) || (v33 & 1) != 0)
                {
                  *(_DWORD *)(v83 + 576) = 0;
                  *(_OWORD *)(v83 + 544) = 0uLL;
                  *(_OWORD *)(v83 + 560) = 0uLL;
                  *(_OWORD *)(v83 + 512) = 0uLL;
                  *(_OWORD *)(v83 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
                  *(_OWORD *)(v83 + 480) = 0uLL;
                  *(_OWORD *)(v83 + 496) = 0uLL;
                }
                else
                {
                  uint64_t v113 = 0;
                  *(_DWORD *)(v83 + 576) = *(_DWORD *)(*(void *)&v71 + 160);
                  long long v114 = (float32x4_t *)(v83 + 480);
                  do
                  {
                    uint64_t v115 = *(void *)&v71 + v113;
                    uint64_t v28 = *(__int16 *)(*(void *)&v71 + v113 + 192);
                    if (v28 == -1)
                    {
                      ++*v25;
                      float32x4_t v119 = 0uLL;
                    }
                    else
                    {
                      uint64_t v28 = *(unsigned int *)(*(void *)&v71 + 164);
                      v116.i64[0] = *(void *)(v115 + 184);
                      *(float32x2_t *)v117.f32 = vcvt_f32_u32(a1[19]);
                      v117.i64[1] = v117.i64[0];
                      v116.i64[1] = *(void *)(v115 + 172);
                      v110.i32[0] = *(_DWORD *)(*(void *)&v71 + 164);
                      v110.i32[1] = 2 * v28;
                      int32x4_t v110 = vzip1q_s32(v110, v110);
                      v118.i64[0] = vaddq_s32(v116, v110).u64[0];
                      v118.i64[1] = vsubq_s32(v116, v110).i64[1];
                      float32x4_t v119 = vdivq_f32(vcvtq_f32_u32(v118), v117);
                    }
                    *v114++ = v119;
                    v113 += 24;
                  }
                  while (v113 != 144);
                }
                if (*(unsigned char *)(*(void *)&v71 + 342))
                {
                  if (*(__int16 *)(*(void *)&v71 + 336) == -1)
                  {
                    ++*v25;
                    float32x4_t v124 = 0uLL;
                  }
                  else
                  {
                    v120.i64[0] = *(void *)(*(void *)&v71 + 328);
                    *(float32x2_t *)v121.f32 = vcvt_f32_u32(a1[18]);
                    v121.i64[1] = v121.i64[0];
                    v120.i64[1] = *(void *)(*(void *)&v71 + 316);
                    v110.i32[0] = *(_DWORD *)(*(void *)&v71 + 168);
                    v110.i32[1] = 2 * v110.i32[0];
                    int32x4_t v122 = vzip1q_s32(v110, v110);
                    v123.i64[0] = vaddq_s32(v120, v122).u64[0];
                    v123.i64[1] = vsubq_s32(v120, v122).i64[1];
                    float32x4_t v124 = vdivq_f32(vcvtq_f32_u32(v123), v121);
                  }
                  *(float32x4_t *)(v83 + 592) = v124;
                }
                else
                {
                  *(_OWORD *)(v83 + 592) = 0uLL;
                }
                goto LABEL_88;
              }
            }
            ++*v25;
          }
        }
LABEL_88:
        *(void *)&v71 += 352;
      }
      while (*(void *)&v71 != v72);
    }
    uint32x2_t v125 = a1[7];
    if (!*(void *)&v125)
    {
LABEL_129:
      uint32x2_t v169 = a1[10];
      if (v169)
      {
        uint64_t v170 = 32 * *(void *)&v169;
        v171 = (float *)(*(void *)&a1[11] + 16);
        float32x4_t v172 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
        do
        {
          float32x4_t v173 = vmulq_n_f32(*(float32x4_t *)(v171 - 4), *v171);
          if (fmaxf(fmaxf(v173.f32[0], v173.f32[2]), v173.f32[1]) > 0.0)
          {
            uint64_t v174 = v8[6];
            if ((int)v174 <= 7)
            {
              v8[6] = v174 + 1;
              *(float32x4_t *)&v8[4 * v174 + 3596] = vmulq_f32(v173, v172);
            }
          }
          v171 += 8;
          v170 -= 32;
        }
        while (v170);
      }
      uint32x2_t v175 = a1[13];
      if (v175)
      {
        uint64_t v176 = 0;
        uint32x2_t v177 = a1[14];
        uint64_t v178 = 112 * *(void *)&v175;
        float32x4_t v179 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
        do
        {
          float32x4_t v180 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v177 + v176 + 64), *(float *)(*(void *)&v177 + v176 + 80));
          if (fmaxf(fmaxf(v180.f32[0], v180.f32[2]), v180.f32[1]) > 0.0)
          {
            int v181 = v8[7];
            if (v181 > 7) {
              break;
            }
            float32x4_t v182 = *v26;
            float32x4_t v183 = vsubq_f32(*(float32x4_t *)(*(void *)&v177 + v176 + 48), *v26);
            v182.i64[0] = *(void *)(*(void *)&v177 + v176);
            v182.i32[2] = *(_DWORD *)(*(void *)&v177 + v176 + 8);
            v30.i64[0] = *(void *)(*(void *)&v177 + v176 + 16);
            v30.i32[2] = *(_DWORD *)(*(void *)&v177 + v176 + 24);
            float32x4_t v184 = vmulq_n_f32(vnegq_f32(v182), *(float *)(*(void *)&v177 + v176 + 88) * 0.5);
            float32x4_t v185 = vmulq_n_f32(v30, *(float *)(*(void *)&v177 + v176 + 92) * 0.5);
            float32x4_t v186 = vsubq_f32(v183, v184);
            float32x4_t v187 = vsubq_f32(v186, v185);
            float32x4_t v188 = vaddq_f32(v183, v184);
            float32x4_t v189 = vsubq_f32(v188, v185);
            float32x4_t v190 = vaddq_f32(v185, v188);
            float32x4_t v30 = vaddq_f32(v185, v186);
            v8[7] = v181 + 1;
            v191 = (float32x4_t *)&v8[24 * v181];
            v191[907] = vmulq_f32(v180, v179);
            v191[908] = v187;
            v191[909] = v189;
            v191[910] = v190;
            v191[911] = v30;
            v191[912].i8[0] = *(unsigned char *)(*(void *)&v177 + v176 + 96);
          }
          v176 += 112;
        }
        while (v178 != v176);
      }
      uint32x2_t v192 = a1[16];
      if (!*(void *)&v192) {
        return;
      }
      uint32x2_t v193 = a1[17];
      uint64_t v194 = *(void *)&v193 + 192 * *(void *)&v192;
      float32x4_t v195 = (float32x4_t)xmmword_23435FD50;
      float32x4_t v196 = (float32x4_t)xmmword_23435FD60;
      float32x4_t v197 = (float32x4_t)xmmword_23435FD80;
      float32x4_t v242 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      while (1)
      {
        float32x4_t v198 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v193 + 128), *(float *)(*(void *)&v193 + 144));
        if (fmaxf(fmaxf(v198.f32[0], v198.f32[2]), v198.f32[1]) > 0.0)
        {
          uint64_t v199 = v8[8];
          if ((int)v199 > 0)
          {
            ++*v25;
            return;
          }
          uint64_t v200 = 0;
          v8[8] = v199 + 1;
          float32x4_t v201 = *(float32x4_t *)(*(void *)&v193 + 32);
          simd_float4 v202 = *(simd_float4 *)(*(void *)&v193 + 48);
          int32x4_t v203 = (int32x4_t)vmulq_f32(v201, v201);
          v203.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v203, 2), vadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v203.i8, 1))).u32[0];
          float32x2_t v204 = vrsqrte_f32((float32x2_t)v203.u32[0]);
          float32x2_t v205 = vmul_f32(v204, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v204, v204)));
          LODWORD(v206) = vmul_f32(v205, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v205, v205))).u32[0];
          simd_float4 v207 = *(simd_float4 *)(*(void *)&v193 + 16);
          v252.columns[0] = *(simd_float4 *)*(void *)&v193;
          v252.columns[1] = v207;
          v252.columns[2] = (simd_float4)v201;
          v252.columns[3] = v202;
          do
          {
            v253.columns[v200] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v195, COERCE_FLOAT(*(_OWORD *)&v252.columns[v200])), v196, *(float32x2_t *)v252.columns[v200].f32, 1), v197, (float32x4_t)v252.columns[v200], 2), v251, (float32x4_t)v252.columns[v200], 3);
            ++v200;
          }
          while (v200 != 4);
          float32x4_t v249 = vmulq_n_f32(v201, v206);
          v208 = &v8[64 * v199];
          simd_float4x4 v256 = __invert_f4(v253);
          *((float32x4_t *)v208 + 955) = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v193 + 128), *(float *)(*(void *)&v193 + 144)), v242);
          *((float32x4_t *)v208 + 956) = v249;
          *(simd_float4x4 *)(v208 + 382re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v256;
          float32x4_t v209 = *(float32x4_t *)(*(void *)&v193 + 64);
          float32x4_t v210 = *(float32x4_t *)(*(void *)&v193 + 80);
          float32x4_t v211 = *(float32x4_t *)(*(void *)&v193 + 96);
          float32x4_t v212 = *(float32x4_t *)(*(void *)&v193 + 112);
          if (*(__int16 *)(*(void *)&v193 + 176) == -1)
          {
            ++*v25;
            float32x2_t v213 = vcvt_f32_u32(a1[19]);
            int8x16_t v219 = 0uLL;
          }
          else
          {
            float32x2_t v213 = vcvt_f32_u32(a1[19]);
            *(float32x2_t *)v214.f32 = v213;
            *(float32x2_t *)&v214.u32[2] = v213;
            v215.i32[0] = *(_DWORD *)(*(void *)&v193 + 168);
            v215.i32[1] = *(_DWORD *)(*(void *)&v193 + 152);
            v216.i32[0] = v215.i32[1];
            v216.i32[1] = *(_DWORD *)(*(void *)&v193 + 172);
            int32x2_t v217 = (int32x2_t)vdupq_n_s32(2 * v215.i32[1]).u64[0];
            *(int32x2_t *)v218.i8 = vadd_s32(v215, v216);
            v218.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(void *)&v193 + 156), v217);
            int8x16_t v219 = (int8x16_t)vdivq_f32(vcvtq_f32_u32(v218), v214);
          }
          uint64_t v220 = 0;
          float32x2_t v221 = vmul_f32(v213, (float32x2_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
          if (v221.f32[0] < v221.f32[1]) {
            v221.f32[0] = v221.f32[1];
          }
          v222 = &v8[64 * v199];
          *((float32x4_t *)v222 + 961) = v209;
          *((float32x4_t *)v222 + 962) = v210;
          *((float32x4_t *)v222 + 963) = v211;
          *((float32x4_t *)v222 + 964) = v212;
          *((int8x16_t *)v222 + 965) = v219;
          v222[3864] = *(_DWORD *)(*(void *)&v193 + 148);
          *((float *)v222 + 3865) = (float)(2.0 / v209.f32[0]) * (float)(1.0 / v221.f32[0]);
          simd_float4x4 v252 = v256;
          do
          {
            v253.columns[v220] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v209, COERCE_FLOAT(*(_OWORD *)&v252.columns[v220])), v210, *(float32x2_t *)v252.columns[v220].f32, 1), v211, (float32x4_t)v252.columns[v220], 2), v212, (float32x4_t)v252.columns[v220], 3);
            ++v220;
          }
          while (v220 != 4);
          simd_float4 v223 = v253.columns[0];
          simd_float4 v224 = v253.columns[1];
          simd_float4 v225 = v253.columns[2];
          simd_float4 v226 = v253.columns[3];
          if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_375, memory_order_acquire) & 1) == 0)
          {
            simd_float4 v250 = v223;
            simd_float4 v239 = v225;
            simd_float4 v240 = v224;
            simd_float4 v238 = v226;
            int v236 = __cxa_guard_acquire(_MergedGlobals_375);
            simd_float4 v226 = v238;
            simd_float4 v225 = v239;
            simd_float4 v224 = v240;
            simd_float4 v223 = v250;
            if (v236)
            {
              xmmword_26AF94440 = xmmword_234385420;
              unk_26AF94450 = xmmword_2343ACD40;
              xmmword_26AF94460 = xmmword_23435FD80;
              unk_26AF94470 = xmmword_2343ACD50;
              __cxa_guard_release(_MergedGlobals_375);
              simd_float4 v226 = v238;
              simd_float4 v225 = v239;
              simd_float4 v224 = v240;
              simd_float4 v223 = v250;
            }
          }
          uint64_t v227 = 0;
          float32x4_t v228 = (float32x4_t)xmmword_26AF94440;
          float32x4_t v229 = (float32x4_t)unk_26AF94450;
          float32x4_t v230 = (float32x4_t)xmmword_26AF94460;
          float32x4_t v231 = (float32x4_t)unk_26AF94470;
          v252.columns[0] = v223;
          v252.columns[1] = v224;
          v252.columns[2] = v225;
          v252.columns[3] = v226;
          float32x4_t v196 = (float32x4_t)xmmword_23435FD60;
          float32x4_t v197 = (float32x4_t)xmmword_23435FD80;
          do
          {
            v253.columns[v227] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v228, COERCE_FLOAT(*(_OWORD *)&v252.columns[v227])), v229, *(float32x2_t *)v252.columns[v227].f32, 1), v230, (float32x4_t)v252.columns[v227], 2), v231, (float32x4_t)v252.columns[v227], 3);
            ++v227;
          }
          while (v227 != 4);
          simd_float4 v232 = v253.columns[1];
          simd_float4 v233 = v253.columns[2];
          simd_float4 v234 = v253.columns[3];
          v235 = (simd_float4 *)&v8[64 * v199];
          v235[967] = v253.columns[0];
          v235[968] = v232;
          v235[969] = v233;
          v235[970] = v234;
          float32x4_t v195 = (float32x4_t)xmmword_23435FD50;
        }
        *(void *)&v193 += 192;
        if (*(void *)&v193 == v194) {
          return;
        }
      }
    }
    uint32x2_t v126 = a1[8];
    uint64_t v127 = *(void *)&v126 + 240 * *(void *)&v125;
    float32x4_t v30 = (float32x4_t)xmmword_23435FD50;
    float32x4_t v128 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v129 = (float32x4_t)xmmword_23435FD80;
    float32x4_t v243 = (float32x4_t)vdupq_n_s32(0x3EA2F983u);
    float32x4_t v245 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
    while (1)
    {
      float32x4_t v130 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v126 + 128), *(float *)(*(void *)&v126 + 144));
      if (fmaxf(fmaxf(v130.f32[0], v130.f32[2]), v130.f32[1]) > 0.0)
      {
        if (!*(unsigned char *)(*(void *)&v126 + 229) || (v33 & 1) != 0)
        {
          if (*(unsigned char *)(*(void *)&v126 + 230))
          {
            int v134 = v8[9];
            if (v134 < 8)
            {
              v8[9] = v134 + 1;
              v132 = &v8[72 * v134];
              uint64_t v133 = 3884;
              goto LABEL_106;
            }
          }
          else
          {
            int v136 = v8[4];
            if (v136 < 8)
            {
              v8[4] = v136 + 1;
              v132 = &v8[72 * v136];
              uint64_t v133 = 2444;
LABEL_106:
              v137 = &v132[v133];
              uint64_t v138 = 0;
              float32x4_t v139 = *v26;
              simd_float4 v140 = *(simd_float4 *)(*(void *)&v126 + 16);
              simd_float4 v142 = *(simd_float4 *)(*(void *)&v126 + 32);
              float32x4_t v141 = *(float32x4_t *)(*(void *)&v126 + 48);
              v252.columns[0] = *(simd_float4 *)*(void *)&v126;
              v252.columns[1] = v140;
              v252.columns[2] = v142;
              v252.columns[3] = (simd_float4)v141;
              do
              {
                v253.columns[v138] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)&v252.columns[v138])), v128, *(float32x2_t *)v252.columns[v138].f32, 1), v129, (float32x4_t)v252.columns[v138], 2), v251, (float32x4_t)v252.columns[v138], 3);
                ++v138;
              }
              while (v138 != 4);
              float32x4_t v247 = vsubq_f32(v141, v139);
              simd_float4x4 v255 = __invert_f4(v253);
              uint64_t v143 = 0;
              *(float32x4_t *)v137 = vmulq_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v126 + 128), *(float *)(*(void *)&v126 + 144)), v245), v243);
              v137[68] = *(_DWORD *)(*(void *)&v126 + 148);
              *((unsigned char *)v137 + 276) = *(unsigned char *)(*(void *)&v126 + 228);
              *((float32x4_t *)v137 + 1) = v247;
              *(simd_float4x4 *)(v137 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v255;
              long long v144 = *(_OWORD *)(*(void *)&v126 + 80);
              long long v145 = *(_OWORD *)(*(void *)&v126 + 96);
              long long v146 = *(_OWORD *)(*(void *)&v126 + 112);
              *((_OWORD *)v137 + 6) = *(_OWORD *)(*(void *)&v126 + 64);
              *((_OWORD *)v137 + 7) = v144;
              *((_OWORD *)v137 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v145;
              *((_OWORD *)v137 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v146;
              float32x4_t v147 = *(float32x4_t *)(*(void *)&v126 + 64);
              float32x4_t v148 = *(float32x4_t *)(*(void *)&v126 + 80);
              float32x4_t v149 = *(float32x4_t *)(*(void *)&v126 + 96);
              float32x4_t v150 = *(float32x4_t *)(*(void *)&v126 + 112);
              simd_float4x4 v252 = v255;
              do
              {
                v253.columns[v143] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, COERCE_FLOAT(*(_OWORD *)&v252.columns[v143])), v148, *(float32x2_t *)v252.columns[v143].f32, 1), v149, (float32x4_t)v252.columns[v143], 2), v150, (float32x4_t)v252.columns[v143], 3);
                ++v143;
              }
              while (v143 != 4);
              simd_float4 v151 = v253.columns[1];
              simd_float4 v152 = v253.columns[2];
              simd_float4 v153 = v253.columns[3];
              *((_OWORD *)v137 + 10) = v253.columns[0];
              *((simd_float4 *)v137 + 11) = v151;
              *((simd_float4 *)v137 + 12) = v152;
              *((simd_float4 *)v137 + 13) = v153;
              *((float *)v137 + 61) = 1.0
                                    / (float)(*(float *)(*(void *)&v126 + 152) * *(float *)(*(void *)&v126 + 152));
              float v154 = *(float *)(*(void *)&v126 + 156) * 0.5;
              if (v154 < 0.0) {
                float v154 = 0.0;
              }
              *((float *)v137 + 70) = v154;
              float v155 = cosf(*(float *)(*(void *)&v126 + 160) * 0.5);
              float v156 = cosf(*(float *)(*(void *)&v126 + 164) * 0.5) - v155;
              if (v156 <= 0.00000011921) {
                float v158 = 8388600.0;
              }
              else {
                float v158 = 1.0 / v156;
              }
              *((float *)v137 + 62) = v158;
              *((float *)v137 + 63) = -(float)(v155 * v158);
              char v33 = a5;
              if (!*(unsigned char *)(*(void *)&v126 + 229) || (a5 & 1) != 0)
              {
                *((void *)v137 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
                *((void *)v137 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
                v137[60] = 0;
                float32x4_t v128 = (float32x4_t)xmmword_23435FD60;
                float32x4_t v30 = (float32x4_t)xmmword_23435FD50;
                float32x4_t v129 = (float32x4_t)xmmword_23435FD80;
              }
              else
              {
                v137[60] = *(_DWORD *)(*(void *)&v126 + 168);
                float32x4_t v128 = (float32x4_t)xmmword_23435FD60;
                float32x4_t v30 = (float32x4_t)xmmword_23435FD50;
                float32x4_t v129 = (float32x4_t)xmmword_23435FD80;
                if (*(__int16 *)(*(void *)&v126 + 200) == -1)
                {
                  ++*v25;
                  float32x4_t v163 = 0uLL;
                }
                else
                {
                  *(float32x2_t *)v157.f32 = vcvt_f32_u32(a1[19]);
                  v157.i64[1] = v157.i64[0];
                  v159.i32[0] = *(_DWORD *)(*(void *)&v126 + 192);
                  v159.i32[1] = *(_DWORD *)(*(void *)&v126 + 172);
                  v160.i32[0] = v159.i32[1];
                  v160.i32[1] = *(_DWORD *)(*(void *)&v126 + 196);
                  int32x2_t v161 = (int32x2_t)vdupq_n_s32(2 * v159.i32[1]).u64[0];
                  *(int32x2_t *)v162.i8 = vadd_s32(v159, v160);
                  v162.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(void *)&v126 + 180), v161);
                  float32x4_t v163 = vdivq_f32(vcvtq_f32_u32(v162), v157);
                }
                *((float32x4_t *)v137 + 14) = v163;
              }
              if (*(unsigned char *)(*(void *)&v126 + 230))
              {
                if (*(__int16 *)(*(void *)&v126 + 224) == -1)
                {
                  ++*v25;
                  float32x4_t v168 = 0uLL;
                }
                else
                {
                  v164.i64[0] = *(void *)(*(void *)&v126 + 216);
                  *(float32x2_t *)v165.f32 = vcvt_f32_u32(a1[18]);
                  v165.i64[1] = v165.i64[0];
                  v164.i64[1] = *(void *)(*(void *)&v126 + 204);
                  v157.i32[0] = *(_DWORD *)(*(void *)&v126 + 176);
                  v157.i32[1] = 2 * v157.i32[0];
                  int32x4_t v166 = vzip1q_s32((int32x4_t)v157, (int32x4_t)v157);
                  v167.i64[0] = vaddq_s32(v164, v166).u64[0];
                  v167.i64[1] = vsubq_s32(v164, v166).i64[1];
                  float32x4_t v168 = vdivq_f32(vcvtq_f32_u32(v167), v165);
                }
                *((float32x4_t *)v137 + 16) = v168;
              }
              else
              {
                *((void *)v137 + 32) = 0;
                *((void *)v137 + 33) = 0;
              }
              goto LABEL_128;
            }
          }
          ++*v237;
        }
        else
        {
          if (*(unsigned char *)(*(void *)&v126 + 230))
          {
            int v131 = v8[10];
            if (v131 < 8)
            {
              v8[10] = v131 + 1;
              v132 = &v8[72 * v131];
              uint64_t v133 = 4460;
              goto LABEL_106;
            }
          }
          else
          {
            int v135 = v8[5];
            if (v135 < 8)
            {
              v8[5] = v135 + 1;
              v132 = &v8[72 * v135];
              uint64_t v133 = 3020;
              goto LABEL_106;
            }
          }
          ++*v25;
        }
      }
LABEL_128:
      *(void *)&v126 += 240;
      if (*(void *)&v126 == v127) {
        goto LABEL_129;
      }
    }
  }
}

BOOL re::LightContext::isEmpty(re::LightContext *this)
{
  return !*((void *)this + 1)
      && !*((void *)this + 4)
      && !*((void *)this + 7)
      && !*((void *)this + 10)
      && !*((void *)this + 13)
      && *((void *)this + 16) == 0;
}

long long *re::getPointLightFaceLookatOrientations(re *this)
{
  {
    float32x4_t v24 = 0uLL;
    float32x4_t v23 = (float32x4_t)0x3F800000uLL;
    float32x4_t v22 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v24, &v23, &v22, 1, v25);
    re::getPointLightFaceLookatOrientations(void)::orientations = (__int128)v25[1];
    float32x4_t v20 = 0uLL;
    float32x4_t v19 = (float32x4_t)0xBF800000uLL;
    float32x4_t v18 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v20, &v19, &v18, 1, v21);
    xmmword_2687756B0 = (__int128)v21[1];
    float32x4_t v16 = 0uLL;
    float32x4_t v15 = (float32x4_t)0x3F80000000000000uLL;
    v14.i64[0] = 0;
    v14.i64[1] = 3212836864;
    re::makeLookAtPose<float>(&v16, &v15, &v14, 1, v17);
    xmmword_2687756C0 = (__int128)v17[1];
    float32x4_t v12 = 0uLL;
    float32x4_t v11 = (float32x4_t)0xBF80000000000000;
    v10.i64[0] = 0;
    v10.i64[1] = 3212836864;
    re::makeLookAtPose<float>(&v12, &v11, &v10, 1, v13);
    xmmword_2687756D0 = (__int128)v13[1];
    float32x4_t v8 = 0uLL;
    v7.i64[0] = 0;
    v7.i64[1] = 1065353216;
    float32x4_t v6 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v8, &v7, &v6, 1, v9);
    xmmword_2687756E0 = (__int128)v9[1];
    float32x4_t v4 = 0uLL;
    v3.i64[0] = 0;
    v3.i64[1] = 3212836864;
    float32x4_t v2 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v4, &v3, &v2, 1, v5);
    xmmword_2687756F0 = (__int128)v5[1];
  }
  return &re::getPointLightFaceLookatOrientations(void)::orientations;
}

void re::LightContext::createConstantBuffer(uint32x2_t *a1, re::FrameContext *this, float32x4_t *a3, re::BufferTable *a4)
{
  re::FrameContext::perFrameAlloc(this, 0x65C0uLL, 0x10uLL, (uint64_t)&v14);
  uint64_t v7 = v14;
  float32x4_t v12 = v15;
  uint64_t v13 = v16;
  uint64_t v14 = 0x28957AC9A6219ECLL;
  float32x4_t v15 = "lightBuffer";
  uint64_t v10 = 0x144ABD64D310CF6;
  uint64_t v11 = v7;
  v9[0] = v16;
  v9[1] = v12;
  re::BufferTable::setBuffer(a4, (const re::WeakStringID *)&v10, (const BufferView *)v9);
  uint64_t v10 = 0;
  re::StringID::destroyString((re::StringID *)&v14);
  re::LightContext::createLightConstantBuffer(a1, &v11, a3, v8, 0);
}

uint64_t re::BufferTable::setBuffer(re::BufferTable *this, const re::WeakStringID *a2, const BufferView *a3)
{
  uint64_t v5 = re::BufferTable::getOrAddKey(this, a2);
  id v7 = 0;
  re::BufferTable::setBufferRef((void **)this, v5, &v7);
  if (v7) {

  }
  re::BufferTable::setBufferView(this, v5, *(void *)a3, *((void *)a3 + 1));
  return re::BufferTable::setBufferIndirectResources(this, v5, 0, 0);
}

void re::LightContexts::createConstantBuffer(uint64_t a1, re::FrameContext *this, float32x4_t *a3, re::BufferTable *a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    re::FrameContext::perFrameAlloc(this, 26048 * v7, 0x10uLL, (uint64_t)&v17);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    uint64_t v10 = v19;
    uint64_t v17 = 0x28957AC9A6219ECLL;
    float32x4_t v18 = "lightBuffer";
    v15[1] = v9;
    uint64_t v16 = 0x144ABD64D310CF6;
    v15[0] = v19;
    re::BufferTable::setBufferViewArray(a4, (const re::WeakStringID *)&v16, (const BufferView *)v15, 26048);
    uint64_t v16 = 0;
    re::StringID::destroyString((re::StringID *)&v17);
    if ((int)v7 >= 1)
    {
      unint64_t v11 = 0;
      do
      {
        float32x4_t v12 = (uint32x2_t *)re::BucketArray<re::LightContext,16ul>::operator[](a1, v11);
        uint64_t v17 = v8;
        float32x4_t v18 = (const char *)(v9 | 0x65C000000000);
        uint64_t v19 = v10;
        re::LightContext::createLightConstantBuffer(v12, &v17, a3, v13, 0);
        ++v11;
        LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v9 + 26048;
      }
      while (v7 != v11);
    }
  }
  else
  {
    uint64_t v14 = (uint32x2_t *)(a1 + 104);
    re::LightContext::createConstantBuffer(v14, this, a3, a4);
  }
}

void re::BufferTable::setBufferViewArray(re::BufferTable *this, const re::WeakStringID *a2, const BufferView *a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v7 = re::BufferTable::getOrAddKey(this, a2);
  v9[0] = 0;
  re::BufferTable::setBufferRef((void **)this, v7, v9);
  if (v9[0]) {

  }
  re::BufferTable::setBufferView(this, v7, *(void *)a3, *((void *)a3 + 1));
  re::BufferTable::setBufferIndirectResources(this, v7, 0, 0);
  unint64_t v8 = *((void *)this + 15);
  if (v8 <= v7)
  {
    re::DynamicArray<float>::resize((uint64_t)this + 104, (v7 + 1));
    unint64_t v8 = *((void *)this + 15);
  }
  if (v8 <= v7)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*((void *)this + 17) + 4 * v7) = a4;
}

uint64_t re::BucketArray<re::LightContext,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 4) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 4)) + 168 * (a2 & 0xF);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 4) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 4)) + 168 * (a2 & 0xF);
}

BOOL re::LightContexts::isEmpty(re::LightContexts *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = v1 - 1;
  do
  {
    uint64_t v5 = (re::LightContext *)re::BucketArray<re::LightContext,16ul>::operator[]((uint64_t)this, v3);
    BOOL result = re::LightContext::isEmpty(v5);
    if (!result) {
      break;
    }
  }
  while (v4 != v3++);
  return result;
}

float32x4_t *re::makeLookAtPose<float>@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, float32x4_t *a5@<X8>)
{
  if (a4) {
    float32x4_t v5 = vsubq_f32(*result, *a2);
  }
  else {
    float32x4_t v5 = vsubq_f32(*a2, *result);
  }
  int32x4_t v6 = (int32x4_t)vmulq_f32(v5, v5);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  float32x4_t v9 = vmulq_n_f32(v5, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  float32x4_t v11 = vmlaq_f32(vmulq_f32(v10, vnegq_f32(*a3)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
  float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
  int32x4_t v13 = (int32x4_t)vmulq_f32(v11, v11);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  float32x4_t v16 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  float v17 = v16.f32[1];
  float32x4_t v18 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v9)), v16, v10);
  float v19 = v9.f32[2] + vaddq_f32(v16, v18).f32[0];
  if (v19 >= 0.0)
  {
    v18.f32[0] = sqrtf(v19 + 1.0);
    v16.f32[0] = v18.f32[0] + v18.f32[0];
    float32x2_t v22 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]));
    float32x2_t v23 = vmul_f32(v22, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]), v22));
    float v24 = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]), v23)).f32[0];
    v18.f32[0] = (float)(v18.f32[1] - v9.f32[1]) * v24;
    float v20 = (float)(v9.f32[0] - v16.f32[2]) * v24;
    v9.f32[0] = (float)(v16.f32[1] - v18.f32[2]) * v24;
    float v21 = v16.f32[0] * 0.25;
  }
  else if (v16.f32[0] < v9.f32[2] || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v16, v18))).u8[0] & 1) != 0)
  {
    v16.f32[0] = 1.0 - v16.f32[0];
    BOOL v25 = v18.f32[0] < v9.f32[2];
    float v26 = sqrtf(v9.f32[2] + (float)(v16.f32[0] - v18.f32[0]));
    *(float *)&unsigned int v27 = v26 + v26;
    float32x2_t v28 = vrecpe_f32((float32x2_t)v27);
    float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    float v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    float v31 = (float)(v9.f32[0] + v16.f32[2]) * v30;
    float v32 = (float)(v9.f32[1] + v18.f32[1]) * v30;
    float v33 = *(float *)&v27 * 0.25;
    float v34 = (float)(v16.f32[1] - v18.f32[2]) * v30;
    v18.f32[0] = sqrtf((float)(v16.f32[0] - v9.f32[2]) + v18.f32[0]);
    v18.f32[0] = v18.f32[0] + v18.f32[0];
    float32x2_t v35 = vrecpe_f32((float32x2_t)v18.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrecps_f32((float32x2_t)v18.u32[0], v35));
    float v37 = vmul_f32(v36, vrecps_f32((float32x2_t)v18.u32[0], v36)).f32[0];
    float v38 = v18.f32[0] * 0.25;
    float v39 = (float)(v9.f32[1] + v18.f32[1]) * v37;
    float v21 = (float)(v9.f32[0] - v16.f32[2]) * v37;
    if (v25) {
      v18.f32[0] = v31;
    }
    else {
      v18.f32[0] = (float)(v16.f32[1] + v18.f32[2]) * v37;
    }
    if (v25) {
      float v20 = v32;
    }
    else {
      float v20 = v38;
    }
    if (v25) {
      v9.f32[0] = v33;
    }
    else {
      v9.f32[0] = v39;
    }
    if (v25) {
      float v21 = v34;
    }
  }
  else
  {
    v18.f32[0] = sqrtf(v16.f32[0] + (float)((float)(1.0 - v18.f32[0]) - v9.f32[2]));
    v18.f32[0] = v18.f32[0] + v18.f32[0];
    *(float32x2_t *)v16.f32 = vrecpe_f32((float32x2_t)v18.u32[0]);
    *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrecps_f32((float32x2_t)v18.u32[0], *(float32x2_t *)v16.f32));
    v16.f32[0] = vmul_f32(*(float32x2_t *)v16.f32, vrecps_f32((float32x2_t)v18.u32[0], *(float32x2_t *)v16.f32)).f32[0];
    v18.f32[0] = v18.f32[0] * 0.25;
    float v20 = (float)(v17 + v18.f32[2]) * v16.f32[0];
    v9.f32[0] = (float)(v9.f32[0] + v16.f32[2]) * v16.f32[0];
    float v21 = (float)(v18.f32[1] - v9.f32[1]) * v16.f32[0];
  }
  v18.f32[1] = v20;
  v18.i64[1] = __PAIR64__(LODWORD(v21), v9.u32[0]);
  *a5 = *result;
  a5[1] = v18;
  return result;
}

IMP re::mtl::RenderEncoderImpCache::build(re::mtl::RenderEncoderImpCache *this, id a2)
{
  *(void *)this = a2;
  Class = object_getClass(a2);
  *((void *)this + 1) = class_getMethodImplementation(Class, sel_setVertexBytes_length_atIndex_);
  *((void *)this + 2) = class_getMethodImplementation(Class, sel_setVertexBuffer_offset_atIndex_);
  *((void *)this + 3) = class_getMethodImplementation(Class, sel_setVertexBufferOffset_atIndex_);
  *((void *)this + 4) = class_getMethodImplementation(Class, sel_setVertexBuffer_offset_attributeStride_atIndex_);
  *((void *)this + 5) = class_getMethodImplementation(Class, sel_setVertexBufferOffset_attributeStride_atIndex_);
  *((void *)this + 6) = class_getMethodImplementation(Class, sel_setVertexTexture_atIndex_);
  *((void *)this + 7) = class_getMethodImplementation(Class, sel_setRenderPipelineState_);
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = class_getMethodImplementation(Class, sel_setCullMode_);
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = class_getMethodImplementation(Class, sel_setDepthBias_slopeScale_clamp_);
  *((void *)this + 10) = class_getMethodImplementation(Class, sel_setFragmentBytes_length_atIndex_);
  *((void *)this + 11) = class_getMethodImplementation(Class, sel_setFragmentBuffer_offset_atIndex_);
  *((void *)this + 12) = class_getMethodImplementation(Class, sel_setFragmentBufferOffset_atIndex_);
  *((void *)this + 13) = class_getMethodImplementation(Class, sel_setFragmentTexture_atIndex_);
  *((void *)this + 14) = class_getMethodImplementation(Class, sel_setDepthStencilState_);
  *((void *)this + 15) = class_getMethodImplementation(Class, sel_setStencilReferenceValue_);
  *((void *)this + 16) = class_getMethodImplementation(Class, sel_setStencilFrontReferenceValue_backReferenceValue_);
  *((void *)this + 17) = class_getMethodImplementation(Class, sel_setFrontFacingWinding_);
  *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = class_getMethodImplementation(Class, sel_setVertexAmplificationCount_viewMappings_);
  *((void *)this + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = class_getMethodImplementation(Class, sel_pushDebugGroup_);
  *((void *)this + 20) = class_getMethodImplementation(Class, sel_popDebugGroup);
  *((void *)this + 21) = class_getMethodImplementation(Class, sel_setTriangleFillMode_);
  *((void *)this + 22) = class_getMethodImplementation(Class, sel_setTessellationFactorBuffer_offset_instanceStride_);
  *((void *)this + 23) = class_getMethodImplementation(Class, sel_setVisibilityResultMode_offset_);
  *((void *)this + 24) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_);
  *((void *)this + 25) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_);
  *((void *)this + 26) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_);
  *((void *)this + 27) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_);
  *((void *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_);
  *((void *)this + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_);
  *((void *)this + 30) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_);
  *((void *)this + 31) = class_getMethodImplementation(Class, sel_setLabel_);
  IMP result = class_getMethodImplementation(Class, sel_endEncoding);
  *((void *)this + 32) = result;
  return result;
}

uint64_t re::RenderStat::activatePerfSampling(uint64_t a1, id *a2, int a3)
{
  float32x4_t v5 = re::ObjCObject::operator=((id *)(a1 + 32), a2);
  if (a3 == 1 && !*(void *)(a1 + 520))
  {
    re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity((void *)(a1 + 520), 2uLL);
    ++*(_DWORD *)(a1 + 544);
    char v6 = 1;
    do
    {
      char v7 = v6;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 3;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      int v12 = 5;
      memset(v18, 0, sizeof(v18));
      DWORD2(v20) = 0;
      LODWORD(v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      re::mtl::CommandQueue::device(a2, &v11);
      re::PerfMTLCounterSampler::init((uint64_t)&v12, &v11);

      re::DynamicArray<re::PerfMTLCounterSampler>::add((_anonymous_namespace_ *)(a1 + 520), (uint64_t)&v12);
      re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)&v18[40]);
      re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::deinit((uint64_t)v18);

      char v6 = 0;
    }
    while ((v7 & 1) != 0);
  }
  float32x2_t v8 = (re::RenderStat *)a1;
  atomic_store(1u, (unsigned __int8 *)(a1 + 40));
  return re::RenderStat::setPerfSamplingMode(v8, a3);
}

id re::DynamicArray<re::PerfMTLCounterSampler>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PerfMTLCounterSampler>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 200 * v4;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(id *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(v5 + 44) = v7;
  re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray(v5 + 48, (uint64_t *)(a2 + 48));
  re::DynamicArray<char const*>::DynamicArray(v5 + 88, (uint64_t *)(a2 + 88));
  re::DynamicArray<char const*>::DynamicArray(v5 + 128, (uint64_t *)(a2 + 128));
  uint64_t v8 = *(void *)(a2 + 168);
  *(_DWORD *)(v5 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(v5 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
  *(void *)(v5 + 184) = *(id *)(a2 + 184);
  id result = *(id *)(a2 + 192);
  *(void *)(v5 + 192) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderStat::setPerfSamplingMode(re::RenderStat *this, int a2)
{
  if (*((_DWORD *)this + 6) != a2)
  {
    if (*((unsigned char *)this + 40))
    {
      re::RenderStat::deinitializeCurrentMode(this);
      *((_DWORD *)this + 6) = a2;
      if (a2 == 1)
      {
        uint64_t v4 = *((void *)this + 67);
        if (v4)
        {
          uint64_t v5 = 200 * v4;
          long long v6 = (unsigned char *)(*((void *)this + 69) + 44);
          do
          {
            *long long v6 = 1;
            v6 += 200;
            v5 -= 200;
          }
          while (v5);
        }
      }
      ++*((void *)this + 13);
    }
    else
    {
      *((_DWORD *)this + 6) = a2;
    }
  }
  return 1;
}

void re::RenderStat::deinitializeCurrentMode(re::RenderStat *this)
{
  if (*((_DWORD *)this + 6) == 1 && *((void *)this + 67))
  {
    uint64_t v2 = *((void *)this + 69);
    do
    {
      *(unsigned char *)(v2 + 44) = 0;
      re::SampleBufferObjectPool::release(v2 + 88, *(void *)(v2 + 24));
      *(_DWORD *)(v2 + 40) = 0;
      v2 += 200;
    }
    while (v2 != *((void *)this + 69) + 200 * *((void *)this + 67));
  }
  *((_DWORD *)this + 6) = 2;
}

uint64_t re::RenderStat::samplerIndexForType(re *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 3) {
    return qword_2343ACE70[a2];
  }
  uint64_t v4 = *re::graphicsLogObjects(a1);
  uint64_t v3 = 2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    uint64_t v3 = 2;
    _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Unexpected CommandBufferSampleType for RenderStat: %u", (uint8_t *)v6, 8u);
  }
  return v3;
}

unint64_t re::RenderStat::addMTLCounterHandler(unint64_t result, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(result + 24) == 1)
  {
    unint64_t v4 = result;
    id result = re::RenderStat::samplerIndexForType((re *)result, a3);
    if (result < *(void *)(v4 + 536))
    {
      uint64_t v5 = (_anonymous_namespace_ *)(*(void *)(v4 + 552) + 200 * result + 48);
      return re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::add(v5, a2);
    }
  }
  return result;
}

uint64_t (***re::RenderStat::clearMTLCounterHandlers(uint64_t (***this)(void)))(void)
{
  if (*((_DWORD *)this + 6) == 1)
  {
    uint64_t v1 = this;
    if (this[67])
    {
      uint64_t v2 = this[69];
      do
      {
        this = re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::clear((uint64_t (***)(void))v2 + 6);
        v2 += 25;
      }
      while (v2 != &v1[69][25 * (void)v1[67]]);
    }
  }
  return this;
}

void re::RenderStat::sampleRenderEncoderMTLCounterBegin(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v5 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v5 >= *(void *)(a1 + 536))
    {
      long long v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7[0] = 67109120;
        v7[1] = a3;
        _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "sampleRenderEncoderMTLCounterBegin skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v7, 8u);
      }
    }
  }
}

void re::RenderStat::sampleRenderEncoderMTLCounterEnd(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v5 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v5 >= *(void *)(a1 + 536))
    {
      long long v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7[0] = 67109120;
        v7[1] = a3;
        _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "sampleRenderEncoderMTLCounterEnd skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v7, 8u);
      }
    }
  }
}

void re::RenderStat::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    long long v6 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v6 >= *(void *)(a1 + 536))
    {
      uint64_t v8 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9[0] = 67109120;
        v9[1] = a3;
        _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "sampleComputeEncoderMTLCounterBegin skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v9, 8u);
      }
    }
    else
    {
      id v7 = *a2;
    }
  }
}

void re::RenderStat::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    long long v6 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v6 >= *(void *)(a1 + 536))
    {
      uint64_t v8 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9[0] = 67109120;
        v9[1] = a3;
        _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "sampleComputeEncoderMTLCounterEnd skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v9, 8u);
      }
    }
    else
    {
      id v7 = *a2;
    }
  }
}

void re::RenderStat::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    unint64_t v6 = re::RenderStat::samplerIndexForType((re *)a1, a3);
    if (v6 >= *(void *)(a1 + 536))
    {
      float32x4_t v9 = *re::graphicsLogObjects((re *)v6);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v12 = a3;
        _os_log_debug_impl(&dword_233120000, v9, OS_LOG_TYPE_DEBUG, "enableMTLCounterSamplingOnRenderPassDescriptor skipped, no PerfMTLCounterSampler for sample type %u", buf, 8u);
      }
    }
    else
    {
      id v7 = (_DWORD *)(*(void *)(a1 + 552) + 200 * v6);
      id v8 = *a2;
      id v10 = v8;
      re::PerfMTLCounterSampler::enableSamplingOnRenderPassDescriptor(v7, &v10);
      if (v8)
      {
      }
    }
  }
}

void re::RenderStat::makeComputeCommandEncoderWithMTLCounterSampling(id *this@<X1>, uint64_t a2@<X0>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 24) == 1)
  {
    unint64_t v8 = re::RenderStat::samplerIndexForType((re *)a2, a3);
    if (v8 < *(void *)(a2 + 536))
    {
      uint64_t v9 = *(void *)(a2 + 552) + 200 * v8;
      id v11 = *this;
      re::PerfMTLCounterSampler::makeComputeCommandEncoderWithSampling(v9, &v11, a4);

      return;
    }
    id v10 = *re::graphicsLogObjects((re *)v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v13 = a3;
      _os_log_debug_impl(&dword_233120000, v10, OS_LOG_TYPE_DEBUG, "makeComputeCommandEncoderWithMTLCounterSampling skipped, no PerfMTLCounterSampler for sample type %u", buf, 8u);
    }
  }
  re::mtl::CommandBuffer::makeComputeCommandEncoder(this, a4);
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int16)*a2;
  unint64_t v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(unsigned __int16 *)(v11 + 56 * v10 + 12) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 56 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(uint64_t a1, unsigned __int16 *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  unint64_t v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(unsigned __int16 *)(v9 + 56 * v7 + 12) != v3)
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 56 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(unsigned __int16 *)(v9 + 56 * v7 + 12) == v3)
      {
        *(_DWORD *)(v9 + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 56 * v7;
  int v16 = *(_DWORD *)(v13 + 8);
  int v15 = (int *)(v13 + 8);
  int v14 = v16;
  if (v16 < 0)
  {
    *int v15 = v14 & 0x7FFFFFFF;
    re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable(v12 + 56 * v7 + 16);
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 56 * v7 + 8);
  }
  int v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 56 * v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::RenderStat::beginRecordPassStat(uint64_t a1, void **a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24) <= 1u)
  {
    int v6 = *(_DWORD *)(a1 + 116);
    uint64_t v7 = *(void *)(a1 + 104);
    uint64_t v8 = re::globalAllocators((re *)a1)[2];
    uint64_t v18 = v8;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v8 + 32))(v8, 32, 0);
    *(void *)uint64_t v9 = &unk_26E70E3A0;
    *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a1;
    *(_DWORD *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v7;
    uint64_t v19 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = 0;
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v14, (uint64_t)v17);
    re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v14);
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v14);
    unsigned int v10 = (re *)re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v17);
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      unint64_t v11 = re::RenderStat::samplerIndexForType(v10, a3);
      __int16 v12 = v11;
      if (v11 < *(void *)(a1 + 536)) {
        re::PerfMTLCounterSampler::createSampleBuffer((re::PerfMTLCounterSampler *)(*(void *)(a1 + 552) + 200 * v11));
      }
      *(_WORD *)(a1 + 560) = v12;
    }
  }
  return 0;
}

uint64_t (***re::RenderStat::finishMTLCounterSampling(uint64_t (***result)(void), uint64_t a2, id *a3))(void)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)result + 6) == 1)
  {
    if (a2 >= 0x20)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a2, 32);
      _os_crash();
      __break(1u);
    }
    else
    {
      unint64_t v5 = result;
      unint64_t v4 = *((unsigned __int16 *)result + a2 + 280);
      if ((unint64_t)result[67] <= v4) {
        return result;
      }
      uint64_t v7 = (uint64_t)&result[69][25 * *((unsigned __int16 *)result + a2 + 280)];
      v8[0] = *a3;
      re::PerfMTLCounterSampler::freezeAndReadSamples(v7, v8);

      uint64_t v3 = v5[67];
      if ((unint64_t)v3 > v4) {
        return re::PerfMTLCounterSampler::finishSampling((uint64_t (***)(void))&v5[69][25 * v4], a3);
      }
    }
    v8[1] = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    unsigned int v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 789;
    __int16 v13 = 2048;
    unint64_t v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void re::RenderStat::finishFrame(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = a1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a1 + 116);
  unsigned int v6 = (v5 + 1) & 3;
  if (v6 == atomic_load_explicit((atomic_uint *volatile)(a1 + 112), memory_order_acquire))
  {
    uint64_t v7 = *re::graphicsLogObjects((re *)a1);
    a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      *(_DWORD *)buf = 67109120;
      int v15 = 4;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "There is a significant delay between requesting perf counters and receiving samples (at least %u frames)", buf, 8u);
    }
  }
  if (*(_DWORD *)(v4 + 24) <= 1u)
  {
    if (v5 >= 4)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v5, 4);
      _os_crash();
      __break(1u);
    }
    *(_OWORD *)(v4 + 16 * v5 + 192) = xmmword_2343ACD60;
    uint64_t v8 = *(void *)(v4 + 104);
    uint64_t v9 = re::globalAllocators((re *)a1)[2];
    uint64_t v16 = v9;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v9 + 32))(v9, 32, 0);
    *(void *)uint64_t v10 = &unk_26E70E3F8;
    *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4;
    *(_DWORD *)(v10 + 16) = v5;
    *(void *)(v10 + 24) = v8;
    uint64_t v17 = v10;
    uint64_t v12 = v9;
    uint64_t v13 = 0;
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v11, (uint64_t)buf);
    re::mtl::CommandBuffer::addCompletionHandler(a3, (uint64_t)v11);
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v11);
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)buf);
  }
  atomic_store(v6, (unsigned int *)(v4 + 116));
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 32) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 40 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          *(void *)(v11 + 24) = *(void *)(v8 + 24);
          *(void *)(v11 + 32) = 0;
          re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>(v11, v8);
          re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      uint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 32) = v4;
        *(void *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      unint64_t v8 = v6;
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 32) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(a2);
  }
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      unint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        uint64_t v7 = v5;
        unint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          unint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          unint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::clear(uint64_t (***result)(void)))(void)
{
  uint64_t v1 = result;
  uint64_t v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    uint64_t v3 = (uint64_t)result[4];
    uint64_t v4 = 40 * (void)v2;
    do
    {
      uint64_t result = re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(void *)(v5 + 104) == *(void *)(a1 + 24))
  {
    id v17 = v4;
    [v4 GPUEndTime];
    id v4 = v17;
    if (v7 > 0.0)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 16);
      if (v8 >= 4)
      {
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned int *)(a1 + 16), 4);
        _os_crash();
        __break(1u);
      }
      else
      {
        [v17 GPUStartTime];
        uint64_t v2 = *(unsigned int *)(a1 + 16);
        if (v2 < 4)
        {
          uint64_t v11 = v5 + 192;
          double v12 = v10 * 1000.0;
          if (*(double *)(v11 + 16 * v8) <= v12) {
            double v12 = *(double *)(v11 + 16 * v8);
          }
          *(double *)(v11 + 16 * v2) = v12;
          [v17 GPUEndTime];
          uint64_t v15 = *(unsigned int *)(a1 + 16);
          if (v15 < 4)
          {
            double v16 = v14 * 1000.0;
            if (*(double *)(v11 + 16 * v2 + 8) >= v16) {
              double v16 = *(double *)(v11 + 16 * v2 + 8);
            }
            *(double *)(v11 + 16 * v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
            id v4 = v17;
            goto LABEL_11;
          }
LABEL_16:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v15, 4);
          _os_crash();
          __break(1u);
          return;
        }
      }
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v2, 4);
      _os_crash();
      __break(1u);
      goto LABEL_16;
    }
  }
LABEL_11:
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E3A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E3A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)(v5 + 40), memory_order_acquire) & 1) == 0
    || *(void *)(v5 + 104) != *(void *)(a1 + 24))
  {
LABEL_27:

    return;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6 < 4)
  {
    double v7 = (double *)(v5 + 192 + 16 * v6);
    double v8 = *(double *)(v5 + 192 + 16 * (((_BYTE)v6 - 1) & 3) + 8);
    double v9 = v7[1];
    if (v8 < *v7 || v8 > v9) {
      double v8 = *v7;
    }
    double v19 = v9 - v8;
    uint64_t v11 = *(unsigned int *)(v5 + 80);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (int *)(*(void *)(v5 + 64) + 8);
      while (1)
      {
        int v14 = *v13;
        v13 += 14;
        if (v14 < 0) {
          break;
        }
        if (v11 == ++v12)
        {
          LODWORD(v12) = *(_DWORD *)(v5 + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if (v11 != v12)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(v5 + 64) + 56 * v15 + 48);
        (*(void (**)(uint64_t, double *))(*(void *)v16 + 16))(v16, &v19);
        if (*(_DWORD *)(v5 + 80) <= (v12 + 1)) {
          int v17 = v12 + 1;
        }
        else {
          int v17 = *(_DWORD *)(v5 + 80);
        }
        int v18 = v12;
        while (1)
        {
          uint64_t v15 = (v18 + 1);
          if (v17 - 1 == v18) {
            break;
          }
          ++v18;
          LODWORD(v12) = v15;
          if ((*(_DWORD *)(*(void *)(v5 + 64) + 56 * v15 + 8) & 0x80000000) != 0) {
            goto LABEL_25;
          }
        }
        LODWORD(v12) = v17;
LABEL_25:
        ;
      }
      while (v11 != v12);
    }
    atomic_store((atomic_load_explicit((atomic_uint *volatile)(v5 + 112), memory_order_acquire) + 1) & 3, (unsigned int *)(v5 + 112));
    goto LABEL_27;
  }
  re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned int *)(a1 + 16), 4);
  _os_crash();
  __break(1u);
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E3F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E3F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void *re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC8uLL))
        {
          uint64_t v2 = 200 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 200 * a2, 8);
          if (result)
          {
            double v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      double v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 200 * v9;
        do
        {
          uint64_t v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          long long v14 = *(_OWORD *)(v8 + v10 + 16);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)(v8 + v10);
          *((_OWORD *)v12 + 1) = v14;
          v12[4] = *(id *)(v8 + v10 + 32);
          char v15 = *(unsigned char *)(v8 + v10 + 44);
          *((_DWORD *)v12 + 10) = *(_DWORD *)(v8 + v10 + 40);
          *((unsigned char *)v12 + 44) = v15;
          re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray((uint64_t)&v7[v10 / 8 + 6], (uint64_t *)(v8 + v10 + 48));
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v7[v10 / 8 + 11], (uint64_t *)(v8 + v10 + 88));
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v7[v10 / 8 + 16], (uint64_t *)(v8 + v10 + 128));
          uint64_t v16 = *(void *)(v8 + v10 + 168);
          *((_DWORD *)v12 + 44) = *(_DWORD *)(v8 + v10 + 176);
          v12[21] = v16;
          v12[23] = *(id *)(v8 + v10 + 184);
          v12[24] = *(id *)(v8 + v10 + 192);
          re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)(v8 + v10 + 88));
          re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::deinit(v8 + v10 + 48);

          v10 += 200;
        }
        while (v13 + 200 != v11);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 40 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 5 * v9;
      uint64_t v11 = *(void *)(a2 + 32) + 8 * v10;
      uint64_t v12 = a1[4] + 8 * v10;
      uint64_t v13 = 40 * v4 - 8 * v10;
      do
      {
        *(void *)(v12 + 24) = *(void *)(v11 + 24);
        *(void *)(v12 + 32) = 0;
        uint64_t result = re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>(v12, v11);
        v11 += 40;
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 40 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 40 * v4;
      uint64_t v8 = 40 * v6 - 40 * v4;
      do
      {
        uint64_t result = (uint64_t)re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t result = re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>(a3, v5);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

void *re::DynamicArray<re::PerfMTLCounterSampler>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 56 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  uint64_t v13 = a2;
  *(_WORD *)(*(void *)(a1 + 16) + 56 * v9 + 12) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 56 * v9;
  uint64_t v15 = v14 + 16;
  *(void *)(v14 + 40) = *(void *)(a5 + 24);
  *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  if (v14 + 16 != a5)
  {
    re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable(v14 + 16);
    uint64_t v16 = *(void *)(a5 + 32);
    if (v16)
    {
      unint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
      uint64_t v18 = v15;
      if (v17 >= 0x19)
      {
        unint64_t v19 = v17;
        uint64_t v20 = *(void *)(v15 + 24);
        if (v20) {
          uint64_t v18 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v20 + 32))(v20, v19, 0);
        }
        else {
          uint64_t v18 = 0;
        }
      }
      *(void *)(v15 + 32) = v18;
      (*(void (**)(void))(**(void **)(a5 + 32) + 24))(*(void *)(a5 + 32));
    }
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v34, 0, 36);
      *(void *)&v34[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init((uint64_t)v34, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v34;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v34[8];
      *(_OWORD *)float v34 = v5;
      *(void *)&v34[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v34[24];
      *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v34[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 48);
        while ((*(_DWORD *)(v14 - 5) & 0x80000000) == 0)
        {
LABEL_25:
          ++v11;
          v14 += 7;
          if (v11 >= v10) {
            goto LABEL_26;
          }
        }
        unint64_t v15 = *(v14 - 6);
        unint64_t v16 = *(unsigned int *)(a1 + 24);
        unint64_t v17 = v15 % v16;
        uint64_t v18 = *(unsigned int *)(a1 + 36);
        if (v18 == 0x7FFFFFFF)
        {
          uint64_t v18 = *(unsigned int *)(a1 + 32);
          int v19 = v18;
          if (v18 == v16)
          {
            re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, (2 * v12));
            unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
            int v19 = *(_DWORD *)(a1 + 32);
            uint64_t v13 = *(void *)(a1 + 8);
          }
          *(_DWORD *)(a1 + 32) = v19 + 1;
          uint64_t v20 = *(void *)(a1 + 16);
          int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
        }
        else
        {
          uint64_t v20 = *(void *)(a1 + 16);
          int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
          *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v20 + 56 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v21 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
        *(void *)(*(void *)(a1 + 16) + 56 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
        *(_WORD *)(*(void *)(a1 + 16) + 56 * v18 + 12) = *((_WORD *)v14 - 18);
        uint64_t v22 = *(void *)(a1 + 16) + 56 * v18;
        uint64_t v23 = v22 + 16;
        *(void *)(v22 + 40) = *(v14 - 1);
        *(void *)(v22 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        if (v14 - 4 != (void *)(v22 + 16))
        {
          re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable(v22 + 16);
          float v24 = (void *)*v14;
          if (*(void *)(v23 + 24) != *(v14 - 1))
          {
            BOOL v25 = (void *)*v14;
            if (!v24) {
              goto LABEL_24;
            }
LABEL_19:
            unint64_t v26 = (*(uint64_t (**)(void *))(*v25 + 40))(v25);
            uint64_t v30 = v23;
            if (v26 >= 0x19)
            {
              unint64_t v31 = v26;
              uint64_t v32 = *(void *)(v23 + 24);
              if (v32) {
                uint64_t v30 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v32 + 32))(v32, v31, 0);
              }
              else {
                uint64_t v30 = 0;
              }
            }
            *(void *)(v23 + 32) = v30;
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v14 + 32))(*v14, v30, v27, v28, v29);
            re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable((uint64_t)(v14 - 4));
            goto LABEL_24;
          }
          BOOL v25 = v14 - 4;
          if (v14 - 4 == v24) {
            goto LABEL_19;
          }
          *(void *)(v23 + 32) = v24;
          void *v14 = 0;
        }
LABEL_24:
        uint64_t v13 = *(void *)(a1 + 8);
        *(_DWORD *)(v13 + 4 * v17) = v18;
        int v12 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
        goto LABEL_25;
      }
LABEL_26:
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v34);
    }
  }
  else
  {
    if (a2) {
      signed int v33 = a2;
    }
    else {
      signed int v33 = 3;
    }
  }
}

void re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_23, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable(v6 + v5 + 8);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::PerfMTLCounterSampler::init(uint64_t a1, id *a2)
{
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    uint64_t v2 = (void *)a1;
    unint64_t v3 = re::ObjCObject::operator=((id *)(a1 + 32), a2);
    v2[3] = 0;
    v2 += 6;
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v2, 1uLL);
    ++*((_DWORD *)v2 + 6);
    *((_DWORD *)v2 - 2) = 0;
  }
  else
  {
    unint64_t v4 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler already initialized", v5, 2u);
    }
  }
}

void re::PerfMTLCounterSampler::createSampleBuffer(re::PerfMTLCounterSampler *this)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 44)) {
    return;
  }
  uint64_t v1 = this;
  if (*((_DWORD *)this + 10))
  {
    uint64_t v2 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = *((_DWORD *)v1 + 10);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Could not create sample buffer, wrong state: %i", buf, 8u);
    }
    return;
  }
  unsigned int v4 = 4 * *((_DWORD *)this + 2);
  unsigned int v5 = 2 * *((_DWORD *)this + 3);
  if (*((unsigned char *)this + 168))
  {
    unsigned int v6 = *((_DWORD *)this + 44);
    if (v4 > *((_DWORD *)this + 43))
    {
      *((_DWORD *)this + 43) = v4;
      uint64_t v7 = *((void *)this + 13);
      if (v7)
      {
        unsigned int v8 = (uint64_t *)*((void *)this + 15);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8++;
          re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v4, v10, 1);
          v9 -= 8;
        }
        while (v9);
      }
      uint64_t v11 = *re::graphicsLogObjects(this);
      this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      if (this)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v4;
        _os_log_debug_impl(&dword_233120000, v11, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler: Re-init sample buffer to size %d", buf, 8u);
      }
    }
    if (v5 <= v6) {
      goto LABEL_34;
    }
    *((_DWORD *)v1 + 44) = v5;
    uint64_t v12 = *((void *)v1 + 13);
    if (v12)
    {
      uint64_t v13 = (uint64_t *)*((void *)v1 + 15);
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *v13++;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v5, v15, 2);
        v14 -= 8;
      }
      while (v14);
    }
    unint64_t v16 = *re::graphicsLogObjects(this);
    this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!this) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    unint64_t v17 = "PerfMTLCounterSampler: Re-init compute sample buffer to size %d";
  }
  else
  {
    if (*((_DWORD *)this + 1) < *(_DWORD *)this) {
      goto LABEL_34;
    }
    id v18 = *((id *)this + 4);
    id v38 = v18;
    if (!*((unsigned char *)v1 + 168))
    {
      int v19 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v1 + 11, 2uLL);
      ++*((_DWORD *)v1 + 28);
      re::DynamicArray<float *>::setCapacity((void *)v1 + 16, 2uLL);
      ++*((_DWORD *)v1 + 38);
      uint64_t v20 = re::ObjCObject::operator=((id *)v1 + 23, &v38);
      *((_DWORD *)v1 + 43) = v4;
      re::mtl::Device::getCounterSet(v20, 1, buf);
      int v21 = (_anonymous_namespace_ *)*((void *)v1 + 24);
      uint64_t v22 = *(void *)buf;
      if (v21 == *(_anonymous_namespace_ **)buf)
      {
      }
      else
      {
        if (v21) {

        }
        *((void *)v1 + 24) = v22;
      }
      uint64_t v23 = 2;
      do
      {
        float v24 = re::globalAllocators(v21);
        BOOL v25 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 32, 8);
        _OWORD *v25 = 0u;
        v25[1] = 0u;
        *(void *)buf = v25;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v4, (uint64_t)v25, 1);
        int v21 = re::DynamicArray<re::RigDataValue *>::add((re::PerfMTLCounterSampler *)((char *)v1 + 88), buf);
        --v23;
      }
      while (v23);
      *((unsigned char *)v1 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
      id v18 = v38;
    }

    uint64_t v27 = *re::graphicsLogObjects(v26);
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (v28)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_debug_impl(&dword_233120000, v27, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler: Init sample buffer to size %d", buf, 8u);
    }
    *((_DWORD *)v1 + 44) = v5;
    uint64_t v29 = *((void *)v1 + 13);
    if (v29)
    {
      uint64_t v30 = (uint64_t *)*((void *)v1 + 15);
      uint64_t v31 = 8 * v29;
      do
      {
        uint64_t v32 = *v30++;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v5, v32, 2);
        v31 -= 8;
      }
      while (v31);
    }
    unint64_t v16 = *re::graphicsLogObjects((re *)v28);
    this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!this) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    unint64_t v17 = "PerfMTLCounterSampler: Init compute sample buffer to size %d";
  }
  _os_log_debug_impl(&dword_233120000, v16, OS_LOG_TYPE_DEBUG, v17, buf, 8u);
LABEL_34:
  *((void *)v1 + 1) = 0;
  int v33 = *((_DWORD *)v1 + 1);
  if (v33 < *(_DWORD *)v1) {
    *((_DWORD *)v1 + 1) = v33 + 1;
  }
  uint64_t v34 = *((void *)v1 + 13);
  if (v34)
  {
    uint64_t v35 = v34 - 1;
    uint64_t v36 = *(void *)(*((void *)v1 + 15) + 8 * v35);
    *(void *)buf = v36;
    *((void *)v1 + 13) = v35;
    ++*((_DWORD *)v1 + 28);
    re::DynamicArray<re::RigDataValue *>::add((re::PerfMTLCounterSampler *)((char *)v1 + 128), buf);
  }
  else
  {
    float v37 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Error could not acquire SampleBufferObject", buf, 2u);
    }
    uint64_t v36 = 0;
  }
  *((void *)v1 + 2) = 0;
  *((void *)v1 + 3) = v36;
  *((_DWORD *)v1 + 10) = 1;
}

void re::PerfMTLCounterSampler::freezeAndReadSamples(uint64_t a1, void **a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 44))
  {
    *(_DWORD *)(a1 + 40) = 2;
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v10 = re::globalAllocators((re *)a1)[2];
      unsigned int v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 32, 0);
      *unsigned int v6 = &unk_26E70E450;
      v6[1] = a1;
      _DWORD v6[2] = v3;
      v6[3] = v5;
      uint64_t v11 = v6;
      re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v9);
      re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v9);
    }
    else
    {
      uint64_t v7 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned int v8 = 0;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Could not read samples, currentSampleBufferObject null", v8, 2u);
      }
    }
  }
}

_DWORD *re::PerfMTLCounterSampler::enableSamplingOnRenderPassDescriptor(_DWORD *result, id *a2)
{
  if (*((unsigned char *)result + 44))
  {
    uint64_t v2 = result;
    ++result[2];
    if (result[10] == 1 && (result[4] + 4) <= result[43] && *((void *)result + 3))
    {
      id v3 = objc_msgSend(objc_msgSend(*a2, sel_sampleBufferAttachments), sel_objectAtIndexedSubscript_, 0);
      objc_msgSend(v3, sel_setSampleBuffer_, **((void **)v2 + 3));
      ++v2[4];
      objc_msgSend(v3, sel_setStartOfVertexSampleIndex_);
      ++v2[4];
      objc_msgSend(v3, sel_setEndOfVertexSampleIndex_);
      ++v2[4];
      objc_msgSend(v3, sel_setStartOfFragmentSampleIndex_);
      ++v2[4];
      return objc_msgSend(v3, sel_setEndOfFragmentSampleIndex_);
    }
  }
  return result;
}

void re::PerfMTLCounterSampler::makeComputeCommandEncoderWithSampling(uint64_t a1@<X0>, id *a2@<X1>, void *a3@<X8>)
{
  ++*(_DWORD *)(a1 + 12);
  if (*(unsigned char *)(a1 + 44)
    && *(_DWORD *)(a1 + 40) == 1
    && (*(_DWORD *)(a1 + 20) + 2) <= *(_DWORD *)(a1 + 176)
    && *(void *)(a1 + 24))
  {
    id v6 = objc_msgSend(objc_msgSend(MEMORY[0x263F12848], sel_alloc), sel_init);
    id v7 = objc_msgSend(objc_msgSend(v6, sel_sampleBufferAttachments), sel_objectAtIndexedSubscript_, 0);
    objc_msgSend(v7, sel_setSampleBuffer_, *(void *)(*(void *)(a1 + 24) + 8));
    ++*(_DWORD *)(a1 + 20);
    objc_msgSend(v7, sel_setStartOfEncoderSampleIndex_);
    ++*(_DWORD *)(a1 + 20);
    objc_msgSend(v7, sel_setEndOfEncoderSampleIndex_);
    re::mtl::CommandBuffer::makeComputeCommandEncoder(a2, (uint64_t)v6, a3);
    if (v6)
    {
    }
  }
  else
  {
    re::mtl::CommandBuffer::makeComputeCommandEncoder(a2, a3);
  }
}

uint64_t (***re::PerfMTLCounterSampler::finishSampling(uint64_t (***this)(void), void **a2))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 44))
  {
    id v3 = this;
    unsigned int v4 = this[3];
    uint64_t v5 = re::globalAllocators((re *)this)[2];
    _DWORD v6[2] = v4;
    v6[3] = v5;
    v6[0] = &unk_26E70E4A8;
    v6[1] = v3;
    v6[4] = v6;
    re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v6);
    this = re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v6);
    v3[3] = 0;
    *((_DWORD *)v3 + 10) = 0;
  }
  return this;
}

void re::SampleBufferObjectPool::initializeCounterSampleBuffer(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  if (a2 && *(void *)(a1 + 104))
  {
    id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F12880], sel_alloc), sel_init);
    objc_msgSend(v8, sel_setStorageMode_, 0);
    objc_msgSend(v8, sel_setSampleCount_, a2);
    objc_msgSend(v8, sel_setCounterSet_, *(void *)(a1 + 104));
    if (a4)
    {
      *(_DWORD *)(a3 + 20) = a2;
      objc_msgSend(v8, sel_setLabel_, @"RenderTimestamp");
      id v10 = v8;
      re::mtl::Device::newCounterSampleBufferWithDescriptor((void **)(a1 + 96), &v10, &v11);
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, &v11);
      if (v11)
      {

        id v11 = 0;
      }
      if (v10)
      {

        id v10 = 0;
      }
    }
    if ((a4 & 2) != 0)
    {
      *(_DWORD *)(a3 + 24) = a2;
      objc_msgSend(v8, sel_setLabel_, @"ComputeTimestamp");
      id v9 = v8;
      re::mtl::Device::newCounterSampleBufferWithDescriptor((void **)(a1 + 96), &v9, &v11);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), &v11);
      if (v11)
      {

        id v11 = 0;
      }
      if (v9)
      {

        id v9 = 0;
      }
    }
    *(_DWORD *)(a3 + 16) |= 1u;
    if (v8) {
  }
    }
}

void re::SampleBufferObjectPool::~SampleBufferObjectPool(re::SampleBufferObjectPool *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    id v3 = (uint64_t *)*((void *)this + 4);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      re::internal::destroyPersistent<re::SampleBufferObject>((re *)"~SampleBufferObjectPool", 363, v5);
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    id v7 = (uint64_t *)*((void *)this + 9);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      re::internal::destroyPersistent<re::SampleBufferObject>((re *)"~SampleBufferObjectPool", 366, v9);
      v8 -= 8;
    }
    while (v8);
  }
  id v10 = (void *)*((void *)this + 13);
  if (v10)
  {

    *((void *)this + 13) = 0;
  }

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this);
}

re *re::internal::destroyPersistent<re::SampleBufferObject>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    uint64_t v5 = *(void **)(a3 + 8);
    if (v5)
    {

      *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    }
    if (*(void *)a3)
    {

      *(void *)a3 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v6(v4, a3);
  }
  return result;
}

void re::SampleBufferObjectPool::release(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v13[0] = a2;
  uint64_t v4 = *(void **)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = v4;
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    uint64_t v6 = *(void **)(a1 + 72);
    while (*v6 != a2)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v6 = &v4[v5];
        break;
      }
    }
  }
  unint64_t v8 = v6 - v4;
  if (v8 == v5)
  {
    uint64_t v9 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Error could not release SampleBufferObject", buf, 2u);
    }
  }
  else
  {
    if (v5 <= v8)
    {
      v13[1] = 0;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      uint64_t v15 = "removeAt";
      __int16 v16 = 1024;
      int v17 = 931;
      __int16 v18 = 2048;
      unint64_t v19 = v8;
      __int16 v20 = 2048;
      unint64_t v21 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 - 1 > v8) {
      v4[v8] = v4[v5 - 1];
    }
    *(void *)(a1 + 56) = v5 - 1;
    ++*(_DWORD *)(a1 + 64);
    int v10 = *(_DWORD *)(a2 + 20);
    unsigned int v11 = *(_DWORD *)(a1 + 84);
    if (v10 != v11) {
      re::SampleBufferObjectPool::initializeCounterSampleBuffer(a1, v11, a2, 1);
    }
    unsigned int v12 = *(_DWORD *)(a1 + 88);
    if (*(_DWORD *)(a2 + 24) != v12) {
      re::SampleBufferObjectPool::initializeCounterSampleBuffer(a1, v12, a2, 2);
    }
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)a1, v13);
  }
}

void re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = **(void ***)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (char *)objc_msgSend(objc_msgSend(v5, sel_resolveCounterRange_, 0, *(int *)(a1 + 24)), sel_mutableBytes);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(int *)(a1 + 24);
    if ((int)v10 >= 4)
    {
      unint64_t v11 = 0;
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      unint64_t v12 = *(unsigned int *)(a1 + 24);
      uint64_t v13 = (uint64_t *)(v6 + 16);
      while (v11 < v12)
      {
        if (v11 + 1 >= v12) {
          goto LABEL_26;
        }
        if (v11 + 2 >= v12) {
          goto LABEL_27;
        }
        unint64_t v14 = v11 + 3;
        if (v11 + 3 >= v12) {
          goto LABEL_28;
        }
        uint64_t v9 = v9 - *(v13 - 2) + *(v13 - 1);
        uint64_t v15 = *v13;
        uint64_t v16 = v13[1];
        v13 += 4;
        uint64_t v8 = v8 - v15 + v16;
        v11 += 4;
        if ((int)v10 - 3 <= (int)v11) {
          goto LABEL_11;
        }
      }
LABEL_25:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 3) & 0x1FFFFFFFCLL, v10);
      _os_crash();
      __break(1u);
LABEL_26:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 2) & 0x1FFFFFFFCLL | 1, v10);
      _os_crash();
      __break(1u);
LABEL_27:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 1) & 0x1FFFFFFFCLL | 2, v10);
      _os_crash();
      __break(1u);
LABEL_28:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v10);
      _os_crash();
      __break(1u);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
LABEL_11:
  int v17 = *(void **)(*(void *)(a1 + 16) + 8);
  if (v17)
  {
    __int16 v18 = objc_msgSend(objc_msgSend(v17, sel_resolveCounterRange_, 0, *(int *)(a1 + 28)), sel_mutableBytes);
    uint64_t v20 = *(int *)(a1 + 28);
    if ((int)v20 >= 1)
    {
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = *(unsigned int *)(a1 + 28);
      while (v21 < v23)
      {
        int v24 = v21 + 1;
        if (v21 + 1 >= v23) {
          goto LABEL_24;
        }
        uint64_t v22 = v22 - v18[v21] + v18[v21 + 1];
        v21 += 2;
        if ((int)v20 <= v24 + 1) {
          goto LABEL_19;
        }
      }
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v23 + 1) & 0x1FFFFFFFELL, v20);
      _os_crash();
      __break(1u);
LABEL_24:
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v23 | 1, v20);
      _os_crash();
      __break(1u);
      goto LABEL_25;
    }
  }
  uint64_t v22 = 0;
LABEL_19:
  uint64_t v25 = *(void *)(v4 + 64);
  if (v25)
  {
    uint64_t v26 = *(void *)(v4 + 80);
    uint64_t v27 = 40 * v25;
    do
    {
      uint64_t v30 = *(void *)(v26 + 24);
      uint64_t v31 = 0;
      re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::operator=<24ul>((uint64_t)v29, v26);
      v28[0] = v9;
      v28[1] = v8;
      v28[2] = v22;
      (*(void (**)(uint64_t, void *))(*(void *)v31 + 16))(v31, v28);
      re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable((uint64_t)v29);
      v26 += 40;
      v27 -= 40;
    }
    while (v27);
  }
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E450;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E450;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3 = *a2;
  re::SampleBufferObjectPool::release(*(void *)(a1 + 8) + 88, *(void *)(a1 + 16));
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E4A8;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E4A8;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

BOOL re::ColorHelpers::isGrayScaleCGColorSpaceName(re::ColorHelpers *this, const __CFString *a2)
{
  return CFEqual(this, (CFTypeRef)*MEMORY[0x263F00248])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x263F00208])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x263F002B8])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x263F00220]) != 0;
}

uint64_t re::ColorHelpers::getColorGamutFromCGColorSpaceName(const void *a1, char *a2)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F002C8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00230])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00238])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F002D8]))
  {
    char v4 = 0;
LABEL_6:
    *a2 = v4;
    return 1;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F001E8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F002B0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00200])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00218])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F001F8]))
  {
    char v4 = 1;
    goto LABEL_6;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F001D0]))
  {
    char v4 = 2;
    goto LABEL_6;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00278])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00210])
    || (uint64_t result = CFEqual(a1, (CFTypeRef)*MEMORY[0x263F00228]), result))
  {
    char v4 = 3;
    goto LABEL_6;
  }
  return result;
}

uint64_t re::ColorHelpers::getColorGamutFromCGStandardLinearColorSpace(CGColorSpace *a1, char *a2)
{
  CFStringRef Name = CGColorSpaceGetName(a1);
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F002C8]) || CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00230]))
  {
    char v4 = 0;
LABEL_4:
    *a2 = v4;
    return 1;
  }
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00218]))
  {
    char v4 = 1;
    goto LABEL_4;
  }
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F001D0]))
  {
    char v4 = 2;
    goto LABEL_4;
  }
  uint64_t result = CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00228]);
  if (result)
  {
    char v4 = 3;
    goto LABEL_4;
  }
  return result;
}

uint64_t re::ColorHelpers::getCGColorSpaceNameForGamut(unint64_t a1, int a2, int a3, int a4)
{
  if (a1 > 2)
  {
    if (a4 == 3)
    {
      if (a3)
      {
        uint64_t v4 = MEMORY[0x263F00228];
      }
      else if (a2)
      {
        uint64_t v4 = MEMORY[0x263F00280];
      }
      else
      {
        uint64_t v4 = MEMORY[0x263F002C0];
      }
      return *(void *)v4;
    }
    if (a4 == 2)
    {
      uint64_t v4 = MEMORY[0x263F001D0];
      return *(void *)v4;
    }
    if (a4 != 1)
    {
      if (a2)
      {
        uint64_t v4 = MEMORY[0x263F002D8];
      }
      else if (a3)
      {
        uint64_t v4 = MEMORY[0x263F00230];
      }
      else
      {
        uint64_t v4 = MEMORY[0x263F002C8];
      }
      return *(void *)v4;
    }
    if ((a2 & 1) == 0 && (a3 & 1) == 0)
    {
      uint64_t v4 = MEMORY[0x263F002B0];
      return *(void *)v4;
    }
    uint64_t v4 = MEMORY[0x263F00200];
    if (!a3) {
      uint64_t v4 = MEMORY[0x263F001E8];
    }
    uint64_t v5 = MEMORY[0x263F00218];
    BOOL v6 = a2 == 0;
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = MEMORY[0x263F00208];
      uint64_t v5 = MEMORY[0x263F00250];
    }
    else
    {
      uint64_t v4 = MEMORY[0x263F00220];
      uint64_t v5 = MEMORY[0x263F002B8];
    }
    BOOL v6 = a3 == 0;
  }
  if (v6) {
    uint64_t v4 = v5;
  }
  return *(void *)v4;
}

uint64_t re::ColorHelpers::getCGColorSpaceNameForPixelFormat(int a1, int a2)
{
  MTLPixelFormatGetInfoForDevice();
  int isHDR = re::isHDR(a1);
  return re::ColorHelpers::getCGColorSpaceNameForGamut(0, 0, isHDR, a2);
}

uint64_t re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(int a1)
{
  {
    int v3 = a1;
    a1 = v3;
    if (v2)
    {
      re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(re::ColorGamut)::g_supportedColorSpaces[0] = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00230]);
      qword_26879FDF8 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00218]);
      qword_26879FE00 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F001D0]);
      qword_26879FE08 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00228]);
      a1 = v3;
    }
  }
  return re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(re::ColorGamut)::g_supportedColorSpaces[a1];
}

uint64_t re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(int a1, int a2)
{
  if (!a2)
  {
    {
      int v2 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
      return v2[a1];
    }
    int v10 = a1;
    int v2 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    uint64_t v9 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    if (v7)
    {
      re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00230]);
      CGColorSpaceRef v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002B0]);
      qword_26879FE50 = 0;
      unk_26879FE58 = 0;
      qword_26879FE48 = (uint64_t)v8;
      goto LABEL_11;
    }
LABEL_12:
    a1 = v10;
    return v2[a1];
  }
  {
    int v10 = a1;
    int v2 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    uint64_t v9 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    if (v4)
    {
      re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
      CGColorSpaceRef v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F001E8]);
      qword_26879FE28 = 0;
      unk_26879FE30 = 0;
      qword_26879FE20 = (uint64_t)v5;
LABEL_11:
      __cxa_guard_release(v6);
      a1 = v10;
      int v2 = v9;
      return v2[a1];
    }
    goto LABEL_12;
  }
  int v2 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
  return v2[a1];
}

uint64_t ___ZN2re12ColorHelpers26getCGColorTransformToGamutENS_10ColorGamutE_block_invoke()
{
  uint64_t CGColorSpaceFromWorkingColorGamut = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(0);
  re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::transforms = MEMORY[0x237DB8E80](CGColorSpaceFromWorkingColorGamut, 0);
  uint64_t v1 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(3);
  qword_26879FE80 = MEMORY[0x237DB8E80](v1, 0);
  uint64_t v2 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(1);
  qword_26879FE70 = MEMORY[0x237DB8E80](v2, 0);
  uint64_t v3 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(2);
  uint64_t result = MEMORY[0x237DB8E80](v3, 0);
  qword_26879FE78 = result;
  return result;
}

__n128 re::ColorHelpers::computeGamutTransformMatrix@<Q0>(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  {
    bzero(re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms, 0x300uLL);
  }
  if (re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::onceToken != -1) {
    dispatch_once(&re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::onceToken, &__block_literal_global_27);
  }
  BOOL v6 = &re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms[12 * a1 + 3 * a2];
  long long v7 = v6[1];
  *(_OWORD *)a3 = *v6;
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v6[2];
  *(__n128 *)(a3 + 32) = result;
  return result;
}

double ___ZN2re12ColorHelpers27computeGamutTransformMatrixENS_10ColorGamutES1__block_invoke()
{
  *(void *)&double result = 1065353216;
  re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms = xmmword_23435FD50;
  unk_26879FEA0 = xmmword_23435FD60;
  xmmword_26879FEB0 = xmmword_23435FD80;
  unk_26879FEC0 = xmmword_2343ACF70;
  xmmword_26879FED0 = xmmword_2343ACF80;
  unk_26879FEE0 = xmmword_2343ACF90;
  xmmword_26879FEF0 = xmmword_2343ACFA0;
  unk_26879FF00 = xmmword_2343ACFB0;
  xmmword_26879FF10 = xmmword_2343ACFC0;
  unk_26879FF20 = xmmword_2343ACFD0;
  xmmword_26879FF30 = xmmword_2343ACFE0;
  unk_26879FF40 = xmmword_2343ACFF0;
  xmmword_26879FF50 = xmmword_2343AD000;
  unk_26879FF60 = xmmword_2343AD010;
  xmmword_26879FF70 = xmmword_2343AD020;
  unk_26879FF80 = xmmword_23435FD50;
  xmmword_26879FF90 = xmmword_23435FD60;
  unk_26879FFA0 = xmmword_23435FD80;
  xmmword_26879FFB0 = xmmword_2343AD030;
  unk_26879FFC0 = xmmword_2343AD040;
  xmmword_26879FFD0 = xmmword_2343AD050;
  unk_26879FFE0 = xmmword_2343AD060;
  xmmword_26879FFF0 = xmmword_2343AD070;
  unk_2687A0000 = xmmword_2343AD080;
  xmmword_2687A0010 = xmmword_2343AD090;
  unk_2687A0020 = xmmword_2343AD0A0;
  xmmword_2687A0030 = xmmword_2343AD0B0;
  unk_2687A0040 = xmmword_2343AD0C0;
  xmmword_2687A0050 = xmmword_2343AD0D0;
  unk_2687A0060 = xmmword_2343AD0E0;
  xmmword_2687A0070 = xmmword_23435FD50;
  unk_2687A0080 = xmmword_23435FD60;
  xmmword_2687A0090 = xmmword_23435FD80;
  unk_2687A00A0 = xmmword_2343AD0F0;
  xmmword_2687A00B0 = xmmword_2343AD100;
  unk_2687A00C0 = xmmword_2343AD110;
  xmmword_2687A00D0 = xmmword_2343AD120;
  unk_2687A00E0 = xmmword_2343AD130;
  xmmword_2687A00F0 = xmmword_2343AD140;
  unk_2687A0100 = xmmword_2343AD150;
  xmmword_2687A0110 = xmmword_2343AD160;
  unk_2687A0120 = xmmword_2343AD170;
  xmmword_2687A0130 = xmmword_2343AD180;
  unk_2687A0140 = xmmword_2343AD190;
  xmmword_2687A0150 = xmmword_2343AD1A0;
  unk_2687A0160 = xmmword_23435FD50;
  xmmword_2687A0170 = xmmword_23435FD60;
  unk_2687A0180 = xmmword_23435FD80;
  return result;
}

uint64_t re::ColorHelpers::getColorGamutFromSerializationLiteral@<X0>(re::ColorHelpers *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = strcmp((const char *)this, "srgb");
  if (result)
  {
    uint64_t result = strcmp((const char *)this, "displayp3");
    if (result)
    {
      uint64_t result = strcmp((const char *)this, "acescg");
      if (result)
      {
        uint64_t result = strcmp((const char *)this, "itur2020");
        if (result)
        {
          *a2 = 0;
          return result;
        }
        __int16 v6 = 769;
      }
      else
      {
        __int16 v6 = 513;
      }
    }
    else
    {
      __int16 v6 = 257;
    }
  }
  else
  {
    __int16 v6 = 1;
  }
  *(_WORD *)a2 = v6;
  return result;
}

void re::introspect_BlendShapeStorageMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94488, memory_order_acquire) & 1) == 0)
  {
    int v24 = (re *)__cxa_guard_acquire(&qword_26AF94488);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Invalid";
      qword_26AF944C8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      BOOL v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)BOOL v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Sparse";
      qword_26AF944D0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v30 + 16) = "Complete";
      qword_26AF944D8 = v30;
      __cxa_guard_release(&qword_26AF94488);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94490, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94490))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF94570, "BlendShapeStorageMode", 1, 1, 1, 1);
    qword_26AF94570 = (uint64_t)&unk_26E715E00;
    qword_26AF945B0 = (uint64_t)&re::introspect_BlendShapeStorageMode(BOOL)::enumTable;
    dword_26AF94580 = 9;
    __cxa_guard_release(&qword_26AF94490);
  }
  if ((_MergedGlobals_376 & 1) == 0)
  {
    _MergedGlobals_376 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF94570, a2);
    uint64_t v32 = 0xB693A90FE7D74D5CLL;
    int v33 = "BlendShapeStorageMode";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      int v4 = (unsigned int *)qword_26AF945B0;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              int v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF94590 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BlendShapeStorageMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_BlendShapeDefinition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94498))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF945B8, "BlendShapeDefinition");
    __cxa_guard_release(&qword_26AF94498);
  }
  return &unk_26AF945B8;
}

void re::initInfo_BlendShapeDefinition(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0xE22E282D2A316C6;
  v30[1] = "BlendShapeDefinition";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF944A0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF944A0);
    if (v4)
    {
      CGColorSpaceRef v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF94500 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "indices";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF94508 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "positionData";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF94510 = v16;
      int v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "normalData";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF94518 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "tangentData";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x5800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF94520 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "bitangentData";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x7000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF94528 = v28;
      __cxa_guard_release(&qword_26AF944A0);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF94500;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::BlendShapeDefinition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeDefinition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeDefinition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

double re::internal::defaultConstruct<re::BlendShapeDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeDefinition>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 14);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 5);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::BlendShapeDefinition>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeDefinition>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 14);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 5);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_BlendShapeGroupDefinition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF944B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF944B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94630, "BlendShapeGroupDefinition");
    __cxa_guard_release(&qword_26AF944B0);
  }
  return &unk_26AF94630;
}

void re::initInfo_BlendShapeGroupDefinition(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x6979C06139805244;
  v19[1] = "BlendShapeGroupDefinition";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF944B8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF944B8);
    if (v4)
    {
      CGColorSpaceRef v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "blendShapeGroupName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF944E0 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::FixedArray<re::BlendShapeDefinition>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "blendShapeDefinitions";
      *(void *)(v10 + 16) = qword_26AF94530;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF944E8 = v10;
      char v11 = (re *)re::introspectionAllocator((re *)v10);
      re::introspect_BlendShapeStorageMode(v11, v12);
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "storageMode";
      *(void *)(v13 + 16) = &qword_26AF94570;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x2800000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF944F0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::introspect_uint32_t((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "verticesPerBlendShape";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x2C00000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF944F8 = v17;
      __cxa_guard_release(&qword_26AF944B8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF944E0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::BlendShapeGroupDefinition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeGroupDefinition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeGroupDefinition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeGroupDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::IntrospectionInfo<re::FixedArray<re::BlendShapeDefinition>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF944C0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF944C0);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)qword_26AF94530);
      qword_26AF94530[0] = (uint64_t)&unk_26E70E540;
      __cxa_guard_release(&qword_26AF944C0);
    }
  }
  if ((byte_26AF94481 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF944A8;
    if (qword_26AF944A8
      || (uint64_t v1 = re::allocInfo_BlendShapeDefinition(a1),
          qword_26AF944A8 = (uint64_t)v1,
          re::initInfo_BlendShapeDefinition((re *)v1, v2),
          (byte_26AF94481 & 1) == 0))
    {
      byte_26AF94481 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF94530, 0);
      unk_26AF94540 = 0x1800000004;
      unk_26AF94548 = v3;
      unk_26AF9454C = 0;
      *(void *)&xmmword_26AF94550 = 0;
      *((void *)&xmmword_26AF94550 + 1) = 0xFFFFFFFFLL;
      unk_26AF94560 = v1;
      unk_26AF94568 = 0;
      qword_26AF94530[0] = (uint64_t)&unk_26E70E540;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)qword_26AF94530, (const re::IntrospectionBase *)&v14);
      if (v15) {
        unint64_t v6 = *(const char **)&v16[7];
      }
      else {
        unint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF94550 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::BlendShapeGroupDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(a3 + 44) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BlendShapeGroupDefinition>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::BlendShapeGroupDefinition>(uint64_t result)
{
  *(void *)double result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeGroupDefinition>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t re::introspect_BlendShapeGroupDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeGroupDefinition", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeGroupDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeGroupDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BlendShapeGroupDefinition>, this);
}

void *re::IntrospectionFixedArray<re::BlendShapeDefinition>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::BlendShapeDefinition>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::BlendShapeDefinition>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::BlendShapeDefinition>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::init(uint64_t a1, uint64_t a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result = re::FixedArray<re::BlendShapeDefinition>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(a2 + 8) <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t result = (uint64_t)re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(*(void *)(a2 + 16) + v11));
      ++v12;
      v11 += 136;
    }
    while (a5 != v12);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::BlendShapeDefinition>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::BlendShapeDefinition>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 136 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 136 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(void *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
  uint64_t v8 = (_anonymous_namespace_ *)re::FixedArray<re::BlendShapeDefinition>::init<>((uint64_t)a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      long long v10 = (char *)a1[2];
      uint64_t v11 = 136 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 136;
        v11 -= 136;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 136 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::fetchAllTextures(re *this, const re::MetalTypeInfo *a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v26 = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  uint64_t v22 = a2;
  v23[0] = 0;
  int v25 = 0;
  unint64_t v3 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v23, &v22);
  uint64_t v4 = v24;
  if (v24)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 - 1;
      uint64_t v9 = *(unsigned int **)(v26 + 8 * (v4 - 1));
      uint64_t v24 = v8;
      ++v25;
      int v10 = *((unsigned __int16 *)v9 + 18);
      if (v10 == 58)
      {
        unsigned int v14 = v9[16];
        uint64_t v15 = *v9;
        unint64_t v16 = *((void *)this + 1);
        if (v7 >= v16)
        {
          if (v16 < v7 + 1)
          {
            if (*(void *)this)
            {
              if (v16) {
                unint64_t v17 = 2 * v16;
              }
              else {
                unint64_t v17 = 8;
              }
              if (v17 <= v7 + 1) {
                unint64_t v18 = v7 + 1;
              }
              else {
                unint64_t v18 = v17;
              }
              unint64_t v3 = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, v18);
              int v5 = *((_DWORD *)this + 6);
            }
            else
            {
              unint64_t v3 = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, v7 + 1);
              int v5 = *((_DWORD *)this + 6) + 1;
            }
          }
          unint64_t v7 = *((void *)this + 2);
          uint64_t v6 = *((void *)this + 4);
        }
        uint64_t v19 = v6 + 16 * v7;
        *(_DWORD *)uint64_t v19 = v14;
        *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
        unint64_t v7 = *((void *)this + 2) + 1;
        *((void *)this + 2) = v7;
        *((_DWORD *)this + 6) = ++v5;
      }
      else if (v10 == 1)
      {
        uint64_t v11 = *((void *)v9 + 6);
        if (v11)
        {
          unint64_t v12 = (const re::MetalTypeInfo *)*((void *)v9 + 7);
          uint64_t v13 = 80 * v11;
          do
          {
            uint64_t v22 = v12;
            unint64_t v3 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v23, &v22);
            unint64_t v12 = (const re::MetalTypeInfo *)((char *)v12 + 80);
            v13 -= 80;
          }
          while (v13);
        }
      }
      uint64_t v4 = v24;
    }
    while (v24);
  }
  uint64_t result = v23[0];
  if (v23[0] && v26)
  {
    int v21 = *(uint64_t (**)(void))(*(void *)v23[0] + 40);
    return v21();
  }
  return result;
}

_anonymous_namespace_ *re::fillLinkedArgumentsWithReflection@<X0>(_anonymous_namespace_ *result@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)result + 1);
  if (!v4) {
    goto LABEL_38;
  }
  uint64_t v5 = *((void *)result + 2);
  uint64_t v64 = v5 + 144 * v4;
  while (1)
  {
    simd_float4 v69 = 0;
    v66[1] = 0;
    unint64_t v67 = 0;
    v66[0] = 0;
    int v68 = 0;
    if (*(void *)(v5 + 48))
    {
      long long v6 = 0uLL;
      *(void *)&v71.char var0 = 0;
      long long v72 = 0u;
      v73[0] = 0u;
      memset(&v74[16], 0, 32);
      v71.var1 = "";
      DWORD2(v72) = 0;
      LODWORD(v73[0]) = 1;
      v73[1] = (unint64_t)"";
      *(_WORD *)&v74[36] = 256;
      memset(v74, 0, 29);
      if (!*(void *)(v5 + 104)) {
        goto LABEL_46;
      }
      uint64_t v7 = *(void *)(v5 + 112);
      *(void *)&v71.char var0 = 0;
      v71.var1 = "";
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = *(void *)v7 & 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
      *(void *)&v80[0] = v9;
      *((void *)&v80[0] + 1) = v8;
      *(void *)uint64_t v7 = 0;
      re::StringID::destroyString((re::StringID *)v80);
      *(_WORD *)(v7 + 16) = v72;
      uint64_t v10 = *((void *)&v72 + 1);
      *(_DWORD *)(v7 + 32) = v73[0];
      *(void *)(v7 + 24) = v10;
      uint64_t v11 = *((void *)&v73[0] + 1);
      uint64_t v12 = *(void *)&v73[1];
      *((void *)&v73[0] + 1) = 0;
      *(void *)&v73[1] = "";
      uint64_t v13 = *(void *)(v7 + 40);
      uint64_t v14 = *(void *)(v7 + 48);
      *(void *)(v7 + 40) = v11;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v12;
      *(void *)&v80[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
      *((void *)&v80[0] + 1) = v14;
      re::StringID::destroyString((re::StringID *)v80);
      int v15 = DWORD2(v73[1]);
      *(_WORD *)(v7 + 60) = WORD6(v73[1]);
      *(_DWORD *)(v7 + 56) = v15;
      re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(v7 + 64), (uint64_t *)v74);
      uint64_t v16 = *(void *)&v74[24];
      *(void *)(v7 + 94) = *(void *)&v74[30];
      *(void *)(v7 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
      *(unsigned char *)(v7 + 104) = v74[40];
      re::FixedArray<re::MetalTypeInfo>::deinit(v74);
      re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
      re::StringID::destroyString((re::StringID *)&v71);
      re::sg::CachedCompilationMaterial::getCustomUniformsArgument(*(re::sg::CachedCompilationMaterial **)(v5 + 48), (uint64_t)&v71);
      unint64_t v3 = *(void *)(v5 + 104);
      if (v3 > 1)
      {
        uint64_t v17 = *(void *)(v5 + 112);
        uint64_t v18 = *(void *)&v71.var0;
        var1 = v71.var1;
        *(void *)&v71.char var0 = 0;
        v71.var1 = "";
        uint64_t v20 = *(void *)(v17 + 112);
        uint64_t v21 = *(void *)(v17 + 120);
        *(void *)(v17 + 112) = v18;
        *(void *)(v17 + 120) = var1;
        *(void *)&v80[0] = v18 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
        *((void *)&v80[0] + 1) = v21;
        re::StringID::destroyString((re::StringID *)v80);
        *(_WORD *)(v17 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v72;
        *(void *)(v17 + 136) = *((void *)&v72 + 1);
        *(_DWORD *)(v17 + 144) = v73[0];
        uint64_t v22 = *((void *)&v73[0] + 1);
        uint64_t v23 = *(void *)&v73[1];
        *((void *)&v73[0] + 1) = 0;
        *(void *)&v73[1] = "";
        uint64_t v24 = *(void *)(v17 + 152);
        uint64_t v25 = *(void *)(v17 + 160);
        *(void *)(v17 + 152) = v22;
        *(void *)(v17 + 160) = v23;
        *(void *)&v80[0] = v22 & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
        *((void *)&v80[0] + 1) = v25;
        re::StringID::destroyString((re::StringID *)v80);
        *(_DWORD *)(v17 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = DWORD2(v73[1]);
        *(_WORD *)(v17 + 172) = WORD6(v73[1]);
        re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(v17 + 176), (uint64_t *)v74);
        *(void *)(v17 + 200) = *(void *)&v74[24];
        *(void *)(v17 + 206) = *(void *)&v74[30];
        *(unsigned char *)(v17 + 216) = v74[40];
        re::FixedArray<re::MetalTypeInfo>::deinit(v74);
        re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
        re::StringID::destroyString((re::StringID *)&v71);
        goto LABEL_37;
      }
      goto LABEL_47;
    }
    CachedFunction = (id *)re::FunctionReflectionCache::tryGetCachedFunction(a2, (((*(void *)(v5 + 40) << 6)- 0x61C8864680B583E9+ (*(void *)(v5 + 40) >> 2)+ (*(void *)(v5 + 24) >> 1)) ^ *(void *)(v5 + 40))- 0x61C8864680B583E9);
    if (!CachedFunction)
    {
      re::DynamicString::format((re::DynamicString *)"Unable to build provided material function (%s)", (re::DynamicString *)&v71, *(void *)(v5 + 32));
      uint64_t v60 = 80;
      goto LABEL_41;
    }
    uint64_t v27 = CachedFunction;
    uint64_t v28 = (_anonymous_namespace_ *)objc_msgSend(*CachedFunction, sel_functionType);
    if (v28 != (_anonymous_namespace_ *)5) {
      break;
    }
    if (v27[3])
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v30 = (id *)v27[5];
        *(void *)&v71.char var0 = 0;
        v71.var1 = "";
        LOWORD(v72) = 0;
        *((void *)&v72 + 1) = 0;
        LODWORD(v73[0]) = 1;
        *((void *)&v73[0] + 1) = 0;
        *(void *)&v73[1] = "";
        DWORD2(v73[1]) = 0;
        WORD6(v73[1]) = 0;
        *(_DWORD *)&v74[32] = 0;
        *(_WORD *)&v74[36] = 256;
        memset(v74, 0, 29);
        v74[40] = 0;
        long long v31 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v30[v3], sel_name), sel_UTF8String);
        *(void *)unint64_t v75 = 0;
        *(void *)&v75[8] = "";
        uint64_t v32 = *(void *)v75;
        int v33 = *(char **)&v75[8];
        *(void *)unint64_t v75 = 0;
        *(void *)&v75[8] = "";
        char var0 = (char)v71.var0;
        uint64_t v35 = v71.var1;
        *(void *)&v71.char var0 = v32;
        v71.var1 = v33;
        *(void *)&v80[0] = v32 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *((void *)&v80[0] + 1) = v35;
        re::StringID::destroyString((re::StringID *)v80);
        re::StringID::destroyString((re::StringID *)v75);
        LOWORD(v72) = v3;
        if (objc_msgSend(v30[v3], sel_type) == (id)28)
        {
          id v36 = v30[v3];
          id v65 = v36;
          re::makeMetalTypeInfoForPointer(&v65, (uint64_t)v80);
          *((void *)&v72 + 1) = *(void *)&v80[0];
          LODWORD(v73[0]) = DWORD2(v80[0]);
          long long v37 = v80[1];
          *(void *)&v80[1] = 0;
          *((void *)&v80[1] + 1) = "";
          char v38 = BYTE8(v73[0]);
          uint64_t v39 = *(void *)&v73[1];
          *(_OWORD *)((char *)v73 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v37;
          *(void *)unint64_t v75 = v37 & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
          *(void *)&v75[8] = v39;
          re::StringID::destroyString((re::StringID *)v75);
          DWORD2(v73[1]) = v80[2];
          WORD6(v73[1]) = WORD2(v80[2]);
          re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)v74, (uint64_t *)&v80[2] + 1);
          *(void *)&v74[24] = *(void *)&v80[4];
          *(void *)&v74[30] = *(void *)((char *)&v80[4] + 6);
          re::FixedArray<re::MetalTypeInfo>::deinit((void *)&v80[2] + 1);
          re::StringID::destroyString((re::StringID *)&v80[1]);
          if (v36)
          {

            id v65 = 0;
          }
          v74[40] = 1;
        }
        else if (objc_msgSend(v30[v3], sel_type) == (id)29)
        {
          uint64_t v40 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(objc_msgSend(v30[v3], sel_dataTypeDescription), sel_typeName), sel_cStringUsingEncoding_, 4);
          *(void *)&v80[0] = 0;
          DWORD2(v80[0]) = 1;
          *(void *)&v80[1] = 0;
          *((void *)&v80[1] + 1) = "";
          LODWORD(v80[2]) = 0;
          WORD2(v80[2]) = 0;
          DWORD2(v80[4]) = 0;
          WORD6(v80[4]) = 256;
          memset(&v80[3], 0, 21);
          *((void *)&v80[2] + 1) = 0;
          *((void *)&v72 + 1) = *(void *)&v80[0];
          LODWORD(v73[0]) = DWORD2(v80[0]);
          long long v41 = v80[1];
          *(void *)&v80[1] = 0;
          *((void *)&v80[1] + 1) = "";
          char v42 = BYTE8(v73[0]);
          uint64_t v43 = *(void *)&v73[1];
          *(_OWORD *)((char *)v73 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v41;
          *(void *)unint64_t v75 = v41 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
          *(void *)&v75[8] = v43;
          re::StringID::destroyString((re::StringID *)v75);
          DWORD2(v73[1]) = v80[2];
          WORD6(v73[1]) = WORD2(v80[2]);
          re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)v74, (uint64_t *)&v80[2] + 1);
          *(void *)&v74[24] = *(void *)&v80[4];
          *(void *)&v74[30] = *(void *)((char *)&v80[4] + 6);
          re::FixedArray<re::MetalTypeInfo>::deinit((void *)&v80[2] + 1);
          re::StringID::destroyString((re::StringID *)&v80[1]);
          WORD6(v73[1]) = 1;
        }
        re::DynamicArray<re::TypedArgument>::add((_anonymous_namespace_ *)v66, &v71);
        re::FixedArray<re::MetalTypeInfo>::deinit(v74);
        re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
        re::StringID::destroyString((re::StringID *)&v71);
        ++v3;
      }
      while (v3 < (unint64_t)v27[3]);
    }
    unint64_t v44 = v67;
    if (!v67)
    {
      if (!*(void *)(v5 + 96)) {
        goto LABEL_37;
      }
      unint64_t v58 = 0;
      float32x4_t v59 = v69;
LABEL_35:
      if (*(void *)(v5 + 104) == v58)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v59, &v59[14 * v58], *(void *)(v5 + 112));
        goto LABEL_37;
      }
LABEL_48:
      re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
    }
    unint64_t v3 = 0;
    do
    {
      unint64_t v45 = v67;
      if (v67 <= v3)
      {
        *(void *)unint64_t v75 = 0;
        *(_OWORD *)long long v74 = 0u;
        long long v72 = 0u;
        memset(v73, 0, sizeof(v73));
        StringID v71 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v80[0]) = 136315906;
        *(void *)((char *)v80 + 4) = "operator[]";
        WORD6(v80[0]) = 1024;
        *(_DWORD *)((char *)v80 + 14) = 789;
        WORD1(v80[1]) = 2048;
        *(void *)((char *)&v80[1] + 4) = v3;
        WORD6(v80[1]) = 2048;
        *(void *)((char *)&v80[1] + 14) = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        uint64_t v70 = 0;
        v80[3] = v6;
        v80[4] = v6;
        v80[1] = v6;
        v80[2] = v6;
        v80[0] = v6;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = 468;
        __int16 v76 = 2048;
        uint64_t v77 = 0;
        __int16 v78 = 2048;
        unint64_t v79 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_47:
        uint64_t v70 = 0;
        memset(v80, 0, sizeof(v80));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = 468;
        __int16 v76 = 2048;
        uint64_t v77 = 1;
        __int16 v78 = 2048;
        unint64_t v79 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_48;
      }
      int32x4_t v46 = v69;
      float32x2_t v47 = &v69[14 * v3];
      if (*((unsigned char *)v47 + 100))
      {
        float32x2_t v48 = &v69[14 * v3];
        uint64_t v49 = v48[9];
        if (v49)
        {
          int v50 = 0;
          uint64_t v51 = v48[10];
          uint64_t v52 = 80 * v49;
          float32x4_t v53 = (_DWORD *)(v51 + 72);
          do
          {
            *float32x4_t v53 = v50;
            v53 += 20;
            ++v50;
            v52 -= 80;
          }
          while (v52);
        }
      }
      if (!*(unsigned char *)v47[1])
      {
        re::DynamicString::format((re::DynamicString *)"$%hu", (re::DynamicString *)&v71, LOWORD(v46[14 * v3 + 2]));
        re::StringID::StringID((re::StringID *)v75, (const re::DynamicString *)&v71);
        uint64_t v54 = *(void *)v75;
        uint64_t v55 = *(void *)&v75[8];
        *(void *)unint64_t v75 = 0;
        *(void *)&v75[8] = "";
        uint64_t v56 = v47[1];
        unint64_t v57 = v54 & 0xFFFFFFFFFFFFFFFELL | *v47 & 1;
        v47[1] = v55;
        *(void *)&v80[0] = v57;
        *((void *)&v80[0] + 1) = v56;
        void *v47 = v54;
        re::StringID::destroyString((re::StringID *)v80);
        re::StringID::destroyString((re::StringID *)v75);
        uint64_t v28 = *(_anonymous_namespace_ **)&v71.var0;
        if (*(void *)&v71.var0)
        {
          if ((uint64_t)v71.var1) {
            uint64_t v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v71.var0 + 40))();
          }
        }
      }
      ++v3;
    }
    while (v3 != v44);
    unint64_t v58 = v67;
    float32x4_t v59 = v69;
    if (*(void *)(v5 + 96)) {
      goto LABEL_35;
    }
    if (v67)
    {
      goto LABEL_35;
    }
LABEL_37:
    uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v66);
    v5 += 144;
    if (v5 == v64)
    {
LABEL_38:
      *(unsigned char *)a3 = 0;
      return result;
    }
  }
  re::DynamicString::format((re::DynamicString *)"Provided material function (%s) is NOT a visible or stitchable function", (re::DynamicString *)&v71, *(void *)(v5 + 32));
  uint64_t v60 = 60;
LABEL_41:
  re::makeMaterialBuilderErr((__CFString *)v60, (uint64_t)&v71, v80);
  *(unsigned char *)a3 = 1;
  uint64_t v61 = *(void *)&v80[0];
  *(void *)&v80[0] = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v61;
  if (*(void *)&v71.var0 && ((uint64_t)v71.var1 & 1) != 0) {
    (*(void (**)(void))(**(void **)&v71.var0 + 40))();
  }
  return (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v66);
}

void *re::DynamicArray<re::TypedArgument>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TypedArgument>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 112 * v4;
  re::StringID::StringID((re::StringID *)v5, a2);
  *(_WORD *)(v5 + 16) = a2[1].var0;
  var1 = a2[1].var1;
  *($19119DE20B7F3CFCAA17A8FA4D266B5D *)(v5 + 32) = a2[2].var0;
  *(void *)(v5 + 24) = var1;
  re::StringID::StringID((re::StringID *)(v5 + 40), (StringID *)((char *)a2 + 40));
  int v7 = (int)a2[3].var1;
  *(_WORD *)(v5 + 60) = WORD2(a2[3].var1);
  *(_DWORD *)(v5 + 56) = v7;
  uint64_t result = re::FixedArray<re::MetalTypeInfo>::FixedArray((void *)(v5 + 64), (uint64_t)&a2[4]);
  uint64_t v9 = a2[5].var1;
  *(void *)(v5 + 94) = *(char **)((char *)&a2[5].var1 + 6);
  *(void *)(v5 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
  *(unsigned char *)(v5 + 104) = a2[6].var1;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_anonymous_namespace_ *re::collectLinkedArgumentReflection(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)result + 1);
  if (v4)
  {
    uint64_t v5 = (void *)*((void *)result + 2);
    float32x4_t v53 = &v5[18 * v4];
    do
    {
      unint64_t v6 = v5[13];
      int v7 = (void *)v5[14];
      v60[1] = 0;
      unint64_t v61 = 0;
      int v62 = 0;
      uint64_t v63 = 0;
      if (v6)
      {
        re::DynamicArray<re::TypedArgument>::setCapacity(v60, v6);
        ++v62;
        if (v61 == -1)
        {
          uint64_t v64 = 0;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          *(_OWORD *)__s2 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v72 = 136315906;
          *(void *)&v72[4] = "copy";
          __int16 v73 = 1024;
          *(_DWORD *)long long v74 = 643;
          *(_WORD *)&v74[4] = 2048;
          *(void *)&v74[6] = 0;
          *(_WORD *)&v74[14] = 2048;
          *(void *)&v74[16] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v61 >= v6)
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v7, &v7[14 * v6], v63);
        }
        else
        {
          re::DynamicArray<re::TypedArgument>::growCapacity(v60, v6);
          unint64_t v8 = v61;
          uint64_t v9 = &v7[14 * v61];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v7, v9, v63);
          if (v8 != v6)
          {
            unint64_t v10 = 0;
            uint64_t v11 = v63 + 112 * v61;
            do
            {
              uint64_t v12 = v11 + v10;
              re::StringID::StringID((re::StringID *)(v11 + v10), (const StringID *)&v9[v10 / 8]);
              *(_WORD *)(v12 + 16) = v9[v10 / 8 + 2];
              uint64_t v13 = v9[v10 / 8 + 3];
              *(_DWORD *)(v12 + 32) = v9[v10 / 8 + 4];
              *(void *)(v12 + 24) = v13;
              re::StringID::StringID((re::StringID *)(v11 + v10 + 40), (const StringID *)&v9[v10 / 8 + 5]);
              int v14 = v9[v10 / 8 + 7];
              *(_WORD *)(v12 + 60) = WORD2(v9[v10 / 8 + 7]);
              *(_DWORD *)(v12 + 56) = v14;
              re::FixedArray<re::MetalTypeInfo>::FixedArray((void *)(v11 + v10 + 64), (uint64_t)&v9[v10 / 8 + 8]);
              uint64_t v15 = v9[v10 / 8 + 11];
              *(void *)(v12 + 94) = *(void *)((char *)&v9[v10 / 8 + 11] + 6);
              *(void *)(v12 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
              *(unsigned char *)(v12 + 104) = v9[v10 / 8 + 13];
              v10 += 112;
            }
            while (-112 * v8 + 112 * v6 != v10);
          }
          unint64_t v61 = v6;
        }
      }
      else
      {
        re::DynamicArray<re::TypedArgument>::setCapacity(v60, 0);
      }
      ++v62;
      uint64_t v16 = a4;
      if (v5[5] == a3 && re::StringID::operator==(v5 + 3, v5 + 1))
      {
        uint64_t v17 = *(void *)(a2 + 16);
        if (v17)
        {
          uint64_t v18 = *(uint64_t **)(a2 + 32);
          uint64_t v19 = 32 * v17;
          do
          {
            if (re::StringID::operator==(v18, v5 + 1))
            {
              *(void *)long long v72 = 0;
              *(void *)&v74[2] = 0;
              *(void *)&v74[10] = "";
              *(_DWORD *)&v74[18] = 0;
              *(_DWORD *)&v76[16] = 0;
              *(_WORD *)&v76[20] = 256;
              v75[1] = 0;
              *(void *)__int16 v76 = 0;
              v75[0] = 0;
              *(void *)&v76[5] = 0;
              *(_DWORD *)&v72[8] = 16;
              *(_WORD *)&v74[22] = 1;
              __s2[0] = 0;
              __s2[1] = "";
              LOWORD(v66) = 0;
              *((void *)&v66 + 1) = 0;
              LODWORD(v67) = 1;
              *((void *)&v67 + 1) = 0;
              *(void *)&long long v68 = "";
              DWORD2(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
              WORD6(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
              *(_DWORD *)&v70[16] = 0;
              *(_WORD *)&v70[20] = 256;
              *(void *)uint64_t v70 = 0;
              long long v69 = 0uLL;
              *(void *)&v70[5] = 0;
              char v71 = 0;
              re::StringID::operator=((unint64_t *)__s2, v18);
              LOWORD(v66) = v18[2];
              *((void *)&v66 + 1) = *(void *)v72;
              LODWORD(v67) = *(_DWORD *)&v72[8];
              re::StringID::operator=((unint64_t *)&v67 + 1, (uint64_t *)&v74[2]);
              DWORD2(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)&v74[18];
              WORD6(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_WORD *)&v74[22];
              re::FixedArray<re::MetalTypeInfo>::operator=(&v69, (uint64_t)v75);
              *(void *)&v70[8] = *(void *)&v76[8];
              *(void *)&v70[14] = *(void *)&v76[14];
              re::DynamicArray<re::TypedArgument>::add((_anonymous_namespace_ *)v60, (StringID *)__s2);
              re::FixedArray<re::MetalTypeInfo>::deinit(&v69);
              re::StringID::destroyString((re::StringID *)((char *)&v67 + 8));
              re::StringID::destroyString((re::StringID *)__s2);
              re::FixedArray<re::MetalTypeInfo>::deinit(v75);
              re::StringID::destroyString((re::StringID *)&v74[2]);
            }
            v18 += 4;
            v19 -= 32;
          }
          while (v19);
        }
      }
      re::StringID::StringID((re::StringID *)__s2, (const StringID *)(v5 + 1));
      unint64_t v20 = (unint64_t)__s2[0];
      unint64_t v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (((unint64_t)__s2[0] >> 31) ^ ((unint64_t)__s2[0] >> 1))) ^ ((0xBF58476D1CE4E5B9 * (((unint64_t)__s2[0] >> 31) ^ ((unint64_t)__s2[0] >> 1))) >> 27));
      unint64_t v22 = v21 ^ (v21 >> 31);
      if (*(void *)a4)
      {
        unint64_t v23 = *(unsigned int *)(a4 + 24);
        unint64_t v24 = v22 % v23;
        uint64_t v25 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * (v22 % v23));
        if (v25 != 0x7FFFFFFF)
        {
          unint64_t v56 = v22 % v23;
          uint64_t v26 = *(void *)(a4 + 16);
          uint64_t v27 = __s2[1];
          while (1)
          {
            uint64_t v28 = v26 + (v25 << 6);
            if ((*(void *)(v28 + 8) ^ v20) <= 1)
            {
              uint64_t v29 = *(const char **)(v28 + 16);
              if (v29 == v27 || !strcmp(v29, v27)) {
                goto LABEL_45;
              }
            }
            uint64_t v25 = *(_DWORD *)(v26 + (v25 << 6)) & 0x7FFFFFFF;
            if (v25 == 0x7FFFFFFF)
            {
              float32x4_t v59 = v5;
              unint64_t v24 = v56;
              goto LABEL_29;
            }
          }
        }
        float32x4_t v59 = v5;
      }
      else
      {
        float32x4_t v59 = v5;
        unint64_t v24 = 0;
      }
LABEL_29:
      uint64_t v30 = *(unsigned int *)(a4 + 36);
      if (v30 == 0x7FFFFFFF)
      {
        uint64_t v30 = *(unsigned int *)(a4 + 32);
        int v31 = v30;
        if (v30 == *(_DWORD *)(a4 + 24))
        {
          re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a4, 2 * *(_DWORD *)(a4 + 28));
          unint64_t v24 = v22 % *(unsigned int *)(a4 + 24);
          int v31 = *(_DWORD *)(a4 + 32);
        }
        *(_DWORD *)(a4 + 32) = v31 + 1;
        uint64_t v32 = *(void *)(a4 + 16);
        int v33 = *(_DWORD *)(v32 + (v30 << 6));
      }
      else
      {
        uint64_t v32 = *(void *)(a4 + 16);
        int v33 = *(_DWORD *)(v32 + (v30 << 6));
        *(_DWORD *)(a4 + 36) = v33 & 0x7FFFFFFF;
      }
      uint64_t v34 = v30 << 6;
      *(_DWORD *)(v32 + v34) = v33 | 0x80000000;
      *(_DWORD *)(*(void *)(a4 + 16) + v34) = *(_DWORD *)(*(void *)(a4 + 16) + (v30 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 8) + 4 * v24);
      re::StringID::StringID((re::StringID *)(*(void *)(a4 + 16) + (v30 << 6) + 8), (const StringID *)__s2);
      uint64_t v35 = *(void *)(a4 + 16) + (v30 << 6);
      *(void *)(v35 + 24) = 0;
      id v36 = (void *)(v35 + 24);
      *(void *)(v35 + 56) = 0;
      long long v37 = (uint64_t *)(v35 + 56);
      *(void *)(v35 + 32) = 0;
      *(void *)(v35 + 40) = 0;
      *(_DWORD *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      if (v60[0])
      {
        unint64_t v57 = v24;
        unint64_t v38 = v61;
        void *v36 = v60[0];
        re::DynamicArray<re::TypedArgument>::setCapacity(v36, v38);
        unint64_t v40 = *(void *)(v35 + 40);
        uint64_t v39 = v35 + 40;
        ++*(_DWORD *)(v39 + 8);
        unint64_t v41 = v61;
        unint64_t v55 = v61;
        if (v61 >= v40)
        {
          re::DynamicArray<re::TypedArgument>::setCapacity(v36, v61);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)v72, v63, v63 + 112 * *(void *)v39, *v37);
          if (*(void *)v39 != v41)
          {
            uint64_t v44 = v63;
            uint64_t v45 = *v37;
            uint64_t v46 = 112 * *(void *)v39;
            uint64_t v47 = 112 * v55;
            do
            {
              uint64_t v48 = v45 + v46;
              re::StringID::StringID((re::StringID *)(v45 + v46), (const StringID *)(v44 + v46));
              *(_WORD *)(v48 + 16) = *(_WORD *)(v44 + v46 + 16);
              uint64_t v49 = *(void *)(v44 + v46 + 24);
              *(_DWORD *)(v48 + 32) = *(_DWORD *)(v44 + v46 + 32);
              *(void *)(v48 + 24) = v49;
              re::StringID::StringID((re::StringID *)(v45 + v46 + 40), (const StringID *)(v44 + v46 + 40));
              int v50 = *(_DWORD *)(v44 + v46 + 56);
              *(_WORD *)(v48 + 60) = *(_WORD *)(v44 + v46 + 60);
              *(_DWORD *)(v48 + 56) = v50;
              re::FixedArray<re::MetalTypeInfo>::FixedArray((void *)(v45 + v46 + 64), v44 + v46 + 64);
              uint64_t v51 = *(void *)(v44 + v46 + 88);
              *(void *)(v48 + 94) = *(void *)(v44 + v46 + 94);
              *(void *)(v48 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v51;
              *(unsigned char *)(v48 + 104) = *(unsigned char *)(v44 + v46 + 104);
              v47 -= 112;
              v44 += 112;
              v45 += 112;
            }
            while (v46 != v47);
          }
        }
        else
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)v72, v63, v63 + 112 * v61, *v37);
          if (v41 != *(void *)v39)
          {
            char v42 = (void *)(*v37 + 112 * v55);
            uint64_t v43 = -112 * v55 + 112 * *(void *)v39;
            do
            {
              re::FixedArray<re::MetalTypeInfo>::deinit(v42 + 8);
              re::StringID::destroyString((re::StringID *)(v42 + 5));
              re::StringID::destroyString((re::StringID *)v42);
              v42 += 14;
              v43 -= 112;
            }
            while (v43);
          }
        }
        unint64_t v24 = v57;
        *(void *)uint64_t v39 = v55;
        uint64_t v16 = a4;
      }
      *(_DWORD *)(*(void *)(v16 + 8) + 4 * v24) = v30;
      ++*(_DWORD *)(v16 + 28);
      ++*(_DWORD *)(v16 + 40);
      uint64_t v5 = v59;
LABEL_45:
      re::StringID::destroyString((re::StringID *)__s2);
      uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v60);
      v5 += 18;
    }
    while (v5 != v53);
  }
  return result;
}

uint64_t re::validateMaterialFunctionReflection@<X0>(re::mtl::Device *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, const char *a4@<X3>, const char *a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result = re::mtl::Device::needsArgumentBufferTextureEmulation(this);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    int v14 = result;
    uint64_t v15 = *(void **)(a2 + 16);
    uint64_t v16 = 144 * v13;
    while (1)
    {
      if (*(unsigned __int8 *)v15 == a3)
      {
        unint64_t v17 = v15[13];
        if (!v17) {
          goto LABEL_22;
        }
        if (v17 >= 3)
        {
          re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has too many arguments", (re::DynamicString *)&v24, v15[4]);
          goto LABEL_28;
        }
        uint64_t v18 = v15[14];
        uint64_t v19 = *(const char **)(v18 + 48);
        if (*(_WORD *)(v18 + 60) != 1
          || (uint64_t result = strcmp(*(const char **)(v18 + 48), a4), result)
          && (uint64_t result = strcmp(v19, a5), result)
          && (uint64_t result = strcmp(v19, a6), result))
        {
          re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has invalid first argument type: %s. Should be %s.", (re::DynamicString *)&v24, v15[4], v19, a4);
          goto LABEL_28;
        }
        if (v17 >= 2)
        {
          if (!*(unsigned char *)(v18 + 216) || *(_WORD *)(v18 + 172) != 1)
          {
            re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has invalid second argument type: %s. The custom uniforms argument should be a pointer to a user defined constant or argument buffer structure.", (re::DynamicString *)&v24, v15[4], v19);
            goto LABEL_28;
          }
          int v20 = v15[6] ? 0 : v14;
          if (v20 == 1)
          {
            re::fetchAllTextures((re *)&v24, (const re::MetalTypeInfo *)(v18 + 136));
            uint64_t v21 = v26;
            uint64_t result = v24;
            if (v24 && v27) {
              uint64_t result = (*(uint64_t (**)(void))(*(void *)v24 + 40))();
            }
            if (v21) {
              break;
            }
          }
        }
      }
      v15 += 18;
      v16 -= 144;
      if (!v16) {
        goto LABEL_22;
      }
    }
    re::DynamicString::format((re::DynamicString *)"Provided material function (%s) contains textures in its second argument. This feature requires support for tier 2 argument buffers, which the current device does not have.", (re::DynamicString *)&v24, v15[4]);
LABEL_28:
    re::makeMaterialBuilderErr((__CFString *)0x50, (uint64_t)&v24, &v28);
    uint64_t result = v24;
    *(unsigned char *)a7 = 1;
    uint64_t v22 = v28;
    uint64_t v28 = 0;
    *(void *)(a7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22;
    if (result)
    {
      if (v25) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v26);
      }
    }
  }
  else
  {
LABEL_22:
    *(unsigned char *)a7 = 0;
  }
  return result;
}

void re::forwardLinkedArguments(re::mtl::Device *this@<X6>, uint64_t a2@<X0>, uint64_t a3@<X1>, _anonymous_namespace_ *a4@<X2>, _anonymous_namespace_ *a5@<X3>, void *a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X8>)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  BOOL v10 = re::mtl::Device::needsArgumentBufferTextureEmulation(this);
  if (!*(void *)(a3 + 16))
  {
LABEL_58:
    *(unsigned char *)a8 = 0;
    return;
  }
  BOOL v11 = v10;
  unint64_t v12 = 0;
  uint64_t v57 = *(void *)(a3 + 16);
  uint64_t v58 = a3;
LABEL_3:
  unint64_t v13 = *(void *)(a3 + 16);
  if (v13 <= v12)
  {
    v78[0] = 0;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    StringID v84 = (StringID)0;
    unint64_t v56 = v12;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v92 = 136315906;
    *(void *)&v92[4] = "operator[]";
    __int16 v93 = 1024;
    int v94 = 789;
    __int16 v95 = 2048;
    unint64_t v96 = v56;
    __int16 v97 = 2048;
    unint64_t v98 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v59 = v12;
  uint64_t v14 = *(void *)(a3 + 32) + 32 * v12;
  re::StringID::StringID((re::StringID *)&v80, (const StringID *)v14);
  uint64_t v15 = *(void *)(v14 + 16);
  unsigned __int16 v83 = *(_WORD *)(v14 + 24);
  uint64_t v82 = v15;
  if (*(void *)a2)
  {
    unint64_t v16 = v80;
    unint64_t v17 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((v80 >> 31) ^ (v80 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v80 >> 31) ^ (v80 >> 1))) >> 27));
    uint64_t v18 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a2 + 24)));
    if (v18 != 0x7FFFFFFF)
    {
      uint64_t v19 = *(void *)(a2 + 16);
      int v20 = __s2;
      while (1)
      {
        uint64_t v21 = v19 + (v18 << 6);
        if ((*(void *)(v21 + 8) ^ v16) <= 1)
        {
          uint64_t v22 = *(const char **)(v21 + 16);
          if (v22 == v20 || !strcmp(v22, v20)) {
            break;
          }
        }
        uint64_t v18 = *(_DWORD *)(v19 + (v18 << 6)) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF) {
          goto LABEL_60;
        }
      }
      uint64_t v23 = v19 + (v18 << 6);
      uint64_t v24 = *(void *)(v23 + 40);
      if (!v24) {
        goto LABEL_66;
      }
      char v66 = 0;
      uint64_t v25 = *(void *)(v23 + 56);
      uint64_t v26 = v25 + 112 * v24;
      uint64_t v67 = v26;
      while (v82 != *(unsigned __int16 *)(v25 + 16))
      {
LABEL_55:
        v25 += 112;
        if (v25 == v26)
        {
          if ((v66 & 1) == 0)
          {
            int v20 = __s2;
LABEL_66:
            re::DynamicString::format((re::DynamicString *)"Failed to resolve forwarded buffer at binding index %u. Unable to find argument at index %zu of type source function \"%s\"", (re::DynamicString *)&v84, v83, v82, v20);
            uint64_t v54 = 30;
            goto LABEL_61;
          }
          re::StringID::destroyString((re::StringID *)&v80);
          a3 = v58;
          unint64_t v12 = v59 + 1;
          if (v59 + 1 == v57) {
            goto LABEL_58;
          }
          goto LABEL_3;
        }
      }
      re::StringID::StringID((re::StringID *)&v84, (const StringID *)v25);
      LOWORD(v85) = *(_WORD *)(v25 + 16);
      int v27 = *(_DWORD *)(v25 + 32);
      *((void *)&v85 + 1) = *(void *)(v25 + 24);
      LODWORD(v86) = v27;
      re::StringID::StringID((re::StringID *)((char *)&v86 + 8), (const StringID *)(v25 + 40));
      int v28 = *(_DWORD *)(v25 + 56);
      WORD6(v87) = *(_WORD *)(v25 + 60);
      DWORD2(v87) = v28;
      re::FixedArray<re::MetalTypeInfo>::FixedArray(&v88, v25 + 64);
      uint64_t v29 = *(void *)(v25 + 88);
      *(void *)&v90[6] = *(void *)(v25 + 94);
      *(void *)float32x4_t v90 = v29;
      char v91 = *(unsigned char *)(v25 + 104);
      LOWORD(v85) = v83;
      if (*((void *)&v88 + 1))
      {
        uint64_t v30 = (int *)(v89 + 32);
        uint64_t v31 = 80 * *((void *)&v88 + 1);
        do
        {
          uint64_t v32 = (_anonymous_namespace_ *)strlen(v84.var1);
          v73[0] = v84.var1;
          v73[1] = v32;
          unint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          if (v32) {
            size_t v33 = (size_t)v32 + 1;
          }
          else {
            size_t v33 = 0;
          }
          re::DynamicString::setCapacity(&v74, v33);
          re::DynamicString::operator=((re::DynamicString *)&v74, (uint64_t)v73);
          re::DynamicString::operator+((re::DynamicString *)&v74, ".", (re::DynamicString *)v78);
          uint64_t v34 = (_anonymous_namespace_ *)strlen(*((const char **)v30 - 1));
          v68[0] = *((void *)v30 - 1);
          v68[1] = v34;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          if (v34) {
            size_t v35 = (size_t)v34 + 1;
          }
          else {
            size_t v35 = 0;
          }
          re::DynamicString::setCapacity(&v69, v35);
          re::DynamicString::operator=((re::DynamicString *)&v69, (uint64_t)v68);
          re::DynamicString::operator+((re::DynamicString *)v78, (uint64_t)&v69, (re::DynamicString *)v92);
          if (v69 && (v70 & 1) != 0) {
            (*(void (**)(void))(*v69 + 40))();
          }
          if (v78[0])
          {
            if ((uint64_t)v78[1]) {
              (*(void (**)(void))(*(void *)v78[0] + 40))();
            }
            *(_OWORD *)__int16 v78 = 0u;
            long long v79 = 0u;
          }
          if (v74 && (v75 & 1) != 0) {
            (*(void (**)(void))(*v74 + 40))();
          }
          re::StringID::StringID((re::StringID *)&v74, (const re::DynamicString *)v92);
          id v36 = v74;
          long long v37 = v75;
          long long v74 = 0;
          unint64_t v75 = "";
          unint64_t v38 = (void *)*((void *)v30 - 1);
          uint64_t v39 = (void *)((unint64_t)v36 & 0xFFFFFFFFFFFFFFFELL | *((void *)v30 - 2) & 1);
          *((void *)v30 - 1) = v37;
          v78[0] = v39;
          v78[1] = v38;
          *((void *)v30 - 2) = v36;
          re::StringID::destroyString((re::StringID *)v78);
          re::StringID::destroyString((re::StringID *)&v74);
          if (v11 && *((_WORD *)v30 + 2) == 58)
          {
            unint64_t v40 = *(void *)(a7 + 16);
            if (v40 >= *(void *)(a7 + 8))
            {
              re::DynamicArray<re::MetalTypeInfo>::growCapacity((void *)a7, v40 + 1);
              unint64_t v40 = *(void *)(a7 + 16);
            }
            uint64_t v41 = *(void *)(a7 + 32) + 80 * v40;
            uint64_t v42 = *((void *)v30 - 4);
            *(_DWORD *)(v41 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(v30 - 6);
            *(void *)uint64_t v41 = v42;
            re::StringID::StringID((re::StringID *)(v41 + 16), (const StringID *)v30 - 1);
            int v43 = *v30;
            *(_WORD *)(v41 + 36) = *((_WORD *)v30 + 2);
            *(_DWORD *)(v41 + 32) = v43;
            re::FixedArray<re::MetalTypeInfo>::FixedArray((void *)(v41 + 40), (uint64_t)(v30 + 2));
            uint64_t v44 = *((void *)v30 + 4);
            *(void *)(v41 + 70) = *(void *)((char *)v30 + 38);
            *(void *)(v41 + 64) = v44;
            ++*(void *)(a7 + 16);
            ++*(_DWORD *)(a7 + 24);
          }
          if (*(void *)v92 && (v92[8] & 1) != 0) {
            (*(void (**)(void))(**(void **)v92 + 40))();
          }
          v30 += 20;
          v31 -= 80;
        }
        while (v31);
      }
      if (v90[12])
      {
        re::DynamicArray<re::TypedArgument>::add(a5, &v84);
        ArgumentEncoderForBindlessArgument = (_anonymous_namespace_ *)re::createArgumentEncoderForBindlessArgument((re *)&v84, (id *)this, v45, (uint64_t)v78);
        if (!LOBYTE(v78[0]))
        {
          re::makeMaterialBuilderErr((__CFString *)0xA, (uint64_t)v92, &v74);
          *(unsigned char *)a8 = 1;
          float32x4_t v53 = v74;
          long long v74 = 0;
          *(void *)(a8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v53;
          if (*(void *)v92 && (v92[8] & 1) != 0) {
            (*(void (**)(void))(**(void **)v92 + 40))();
          }
          int v52 = 0;
LABEL_54:
          re::FixedArray<re::MetalTypeInfo>::deinit(&v88);
          re::StringID::destroyString((re::StringID *)((char *)&v86 + 8));
          re::StringID::destroyString((re::StringID *)&v84);
          uint64_t v26 = v67;
          if (!v52) {
            goto LABEL_64;
          }
          goto LABEL_55;
        }
        uint64_t v47 = a6;
        unint64_t v48 = a6[2];
        if (v48 >= a6[1])
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(a6, v48 + 1);
          uint64_t v47 = a6;
          unint64_t v48 = a6[2];
        }
        uint64_t v49 = v47[4];
        id v50 = v78[1];
        uint64_t v51 = v47;
        *(void *)(v49 + 8 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v78[1];
        ++v51[2];
        ++*((_DWORD *)v51 + 6);
        if (v50) {
      }
        }
      else
      {
        re::DynamicArray<re::TypedArgument>::add(a4, &v84);
      }
      char v66 = 1;
      int v52 = 1;
      goto LABEL_54;
    }
  }
  int v20 = __s2;
LABEL_60:
  re::DynamicString::format((re::DynamicString *)"Failed to resolve forwarded buffer at binding index %u. Unable to find type source function \"%s\"", (re::DynamicString *)&v84, v83, v20);
  uint64_t v54 = 20;
LABEL_61:
  re::makeMaterialBuilderErr((__CFString *)v54, (uint64_t)&v84, v92);
  *(unsigned char *)a8 = 1;
  uint64_t v55 = *(void *)v92;
  *(void *)uint64_t v92 = 0;
  *(void *)(a8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v55;
  if (*(void *)&v84.var0)
  {
    if ((uint64_t)v84.var1) {
      (*(void (**)(void))(**(void **)&v84.var0 + 40))();
    }
  }
LABEL_64:
  re::StringID::destroyString((re::StringID *)&v80);
}

void re::completeLinkedFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v27 = a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 16);
    unint64_t v5 = 144 * v2;
    do
    {
      if (*(unsigned char *)(v4 + v3) == 3)
      {
        unint64_t v6 = (void *)(v4 + v3);
        if ((*(unsigned char *)(v4 + v3 + 56) & 0x10) != 0)
        {
          re::StringID::destroyString((re::StringID *)(v6 + 1));
          a1 = re::internal::compileTimeHornerHash<35ul>(0, 0, 34);
          v6[1] = 2 * a1;
          _DWORD v6[2] = "geometryModifierUIWithCustomParams";
        }
        else
        {
          uint64_t v7 = v6[13];
          long long v29 = 0u;
          long long v30 = 0u;
          re::DynamicString::setCapacity(&v29, 0);
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          *(void *)&long long v41 = "EnableGeometryModifierWithCustomParams";
          *((void *)&v41 + 1) = 38;
          unint64_t v8 = re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v41);
          uint64_t v9 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v29, v7 == 2);
          int v31 = 5177397;
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v41, (uint64_t)&v29);
          if (void)v41 && (BYTE8(v41)) {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
          uint64_t v10 = v4 + v3;
          BOOL v11 = (re::StringID *)(v4 + v3 + 8);
          re::StringID::destroyString(v11);
          if (v7 == 2)
          {
            *(void *)BOOL v11 = 2 * re::internal::compileTimeHornerHash<33ul>(0, 0, 32);
            *(void *)(v10 + 16) = "geometryModifierWithCustomParams";
            unint64_t v12 = v6[13];
            if (v12 <= 1)
            {
              uint64_t v35 = 0;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v42 = 0u;
              long long v43 = 0u;
              long long v41 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)id v36 = 136315906;
              *(void *)&v36[4] = "operator[]";
              *(_WORD *)&v36[12] = 1024;
              *(_DWORD *)&v36[14] = 468;
              __int16 v37 = 2048;
              uint64_t v38 = 1;
              __int16 v39 = 2048;
              unint64_t v40 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_62:
              uint64_t v35 = 0;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v42 = 0u;
              long long v43 = 0u;
              long long v41 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)id v36 = 136315906;
              *(void *)&v36[4] = "operator[]";
              *(_WORD *)&v36[12] = 1024;
              *(_DWORD *)&v36[14] = 468;
              __int16 v37 = 2048;
              uint64_t v38 = 1;
              __int16 v39 = 2048;
              unint64_t v40 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::fetchAllTextures((re *)&v41, (const re::MetalTypeInfo *)(*(void *)(v4 + v3 + 112) + 136));
            *(void *)id v36 = v43;
            *(void *)&v36[8] = v42;
            re::FixedArray<re::TextureRecord>::operator=(v4 + v3 + 120, (uint64_t)v36);
            if ((void)v41 && (void)v43) {
              (*(void (**)(void))(*(void *)v41 + 40))();
            }
          }
          else
          {
            *(void *)BOOL v11 = 2
                           * re::internal::compileTimeHornerHash<17ul>(31, (uint64_t)"geometryModifier", 0, 0, 16);
            *(void *)(v10 + 16) = "geometryModifier";
          }
          if (v32)
          {
            if (v33)
            {
              (*(void (**)(void))(*(void *)v32 + 40))();
              uint64_t v33 = 0;
              uint64_t v34 = 0;
            }
            uint64_t v32 = 0;
          }
          a1 = v29;
          if (void)v29 && (BYTE8(v29)) {
            a1 = (*(uint64_t (**)(void))(*(void *)v29 + 40))();
          }
        }
      }
      v3 += 144;
    }
    while (v5 != v3);
  }
  uint64_t v13 = *(void *)(v27 + 32);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v27 + 40);
    uint64_t v16 = 144 * v13;
    do
    {
      int v17 = *(unsigned __int8 *)(v15 + v14);
      if (v17 == 2)
      {
        a1 = *(void *)(v15 + v14 + 48);
        if (a1)
        {
          re::sg::CachedCompilationMaterial::getMaterial((re::sg::CachedCompilationMaterial *)a1, &v41);
          int v18 = [(id)v41 hasConnectedLightSpillNodes];

          if (v18)
          {
            long long v41 = 0u;
            long long v42 = 0u;
            re::DynamicString::setCapacity(&v41, 0);
            *((void *)&v43 + 1) = 0;
            long long v44 = 0uLL;
            *(void *)&long long v29 = "EnableSurfaceShaderVideo";
            *((void *)&v29 + 1) = 24;
            uint64_t v19 = re::DynamicString::operator=((re::DynamicString *)&v41, (uint64_t)&v29);
            LODWORD(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 1;
            LODWORD(v43) = 7667765;
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v29, (uint64_t)&v41);
            if (void)v29 && (BYTE8(v29)) {
              (*(void (**)(void))(*(void *)v29 + 40))();
            }
            if (*((void *)&v43 + 1))
            {
              if ((void)v44)
              {
                (*(void (**)(void))(**((void **)&v43 + 1) + 40))();
                long long v44 = 0uLL;
              }
              *((void *)&v43 + 1) = 0;
            }
            a1 = v41;
            if (void)v41 && (BYTE8(v41)) {
              a1 = (*(uint64_t (**)(void))(*(void *)v41 + 40))();
            }
          }
        }
        int v17 = *(unsigned __int8 *)(v15 + v14);
      }
      if (v17 == 4)
      {
        uint64_t v21 = (void *)(v15 + v14);
        if ((*(unsigned char *)(v15 + v14 + 56) & 0x20) != 0)
        {
          re::StringID::destroyString((re::StringID *)(v21 + 1));
          a1 = re::internal::compileTimeHornerHash<32ul>(0, 0, 31);
          v21[1] = 2 * a1;
          float32x4_t v21[2] = "surfaceShaderUIWithCustomParams";
        }
        else
        {
          uint64_t v22 = v21[13];
          long long v29 = 0u;
          long long v30 = 0u;
          re::DynamicString::setCapacity(&v29, 0);
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          *(void *)&long long v41 = "EnableSurfaceShaderWithCustomParams";
          *((void *)&v41 + 1) = 35;
          uint64_t v23 = re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v41);
          uint64_t v24 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v29, v22 == 2);
          int v31 = 5111861;
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v41, (uint64_t)&v29);
          if (void)v41 && (BYTE8(v41)) {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
          uint64_t v25 = v15 + v14;
          uint64_t v26 = (re::StringID *)(v15 + v14 + 8);
          re::StringID::destroyString(v26);
          if (v22 == 2)
          {
            *(void *)uint64_t v26 = 2 * re::internal::compileTimeHornerHash<30ul>(0, 0, 29);
            *(void *)(v25 + 16) = "surfaceShaderWithCustomParams";
            unint64_t v5 = v21[13];
            if (v5 <= 1) {
              goto LABEL_62;
            }
            re::fetchAllTextures((re *)&v41, (const re::MetalTypeInfo *)(*(void *)(v15 + v14 + 112) + 136));
            *(void *)id v36 = v43;
            *(void *)&v36[8] = v42;
            re::FixedArray<re::TextureRecord>::operator=(v15 + v14 + 120, (uint64_t)v36);
            if ((void)v41 && (void)v43) {
              (*(void (**)(void))(*(void *)v41 + 40))();
            }
          }
          else
          {
            *(void *)uint64_t v26 = 2
                           * re::internal::compileTimeHornerHash<14ul>(31, (uint64_t)"surfaceShader", 0, 0, 13);
            *(void *)(v25 + 16) = "surfaceShader";
          }
          if (v32)
          {
            if (v33)
            {
              (*(void (**)(void))(*(void *)v32 + 40))();
              uint64_t v33 = 0;
              uint64_t v34 = 0;
            }
            uint64_t v32 = 0;
          }
          a1 = v29;
          if ((void)v29)
          {
            if (BYTE8(v29)) {
              a1 = (*(uint64_t (**)(void))(*(void *)v29 + 40))();
            }
          }
        }
      }
      v14 += 144;
    }
    while (v16 != v14);
  }
}

void *re::TechniqueFunctionConstant::setAs64Bits(re::TechniqueFunctionConstant *this, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __src[0] = a2;
  size_t v2 = *((void *)this + 6);
  if (!v2 || (bzero(*((void **)this + 7), v2), (unint64_t v4 = *((void *)this + 6)) == 0))
  {
    __src[1] = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v8 = 136315906;
    uint64_t v9 = "operator[]";
    __int16 v10 = 1024;
    int v11 = 468;
    __int16 v12 = 2048;
    uint64_t v13 = 0;
    __int16 v14 = 2048;
    uint64_t v15 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= 8) {
    size_t v5 = 8;
  }
  else {
    size_t v5 = *((void *)this + 6);
  }
  return memcpy(*((void **)this + 7), __src, v5);
}

uint64_t re::FixedArray<re::TextureRecord>::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      return a1;
    }
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == v5)
  {
    if (v5) {
      memmove(*(void **)(a1 + 16), *(const void **)a2, 16 * v5);
    }
    return a1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::fillTablesWithLinkedFunctionParameterDefaults(uint64_t result, void *a2, _anonymous_namespace_ *a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    unint64_t v6 = *(unsigned __int8 **)(result + 16);
    uint64_t v7 = &v6[144 * v3];
    long long v44 = a2 + 16;
    long long v43 = v7;
    do
    {
      if (*v6 - 3 <= 1 && *((void *)v6 + 13) >= 2uLL)
      {
        int v8 = (void *)*((void *)v6 + 14);
        uint64_t v9 = v8[23];
        if (v9)
        {
          uint64_t v10 = v8[24];
          uint64_t v11 = v10 + 80 * v9;
          do
          {
            if (*(unsigned char *)(v10 + 77))
            {
              re::DynamicString::format((re::DynamicString *)"%s.%s", (re::DynamicString *)&v70, v8[15], *(void *)(v10 + 24));
              if (v71) {
                __int16 v12 = v73;
              }
              else {
                __int16 v12 = v72;
              }
              if (v12)
              {
                uint64_t v13 = *v12;
                if (v13)
                {
                  if (v71) {
                    __int16 v14 = v73 + 1;
                  }
                  else {
                    __int16 v14 = &v72[1];
                  }
                  char v15 = *v14;
                  if (*v14)
                  {
                    long long v16 = v14 + 1;
                    do
                    {
                      uint64_t v13 = 31 * v13 + v15;
                      int v17 = *v16++;
                      char v15 = v17;
                    }
                    while (v17);
                  }
                  v13 &= ~0x8000000000000000;
                }
              }
              else
              {
                uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
              }
              uint64_t v69 = v13;
              unsigned int v18 = *(unsigned __int16 *)(v10 + 36);
              if (v18 > 0x34)
              {
                switch(v18)
                {
                  case '5':
                    uint64_t v53 = v13;
                    LOBYTE(v74) = 0;
                    *(void *)buf = v13;
                    BOOL v40 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v40)
                    {
                      *(void *)&long long v64 = &v74;
                      *((void *)&v64 + 1) = 1;
                      re::ConstantTable::setConstant(v44, &v53, (uint64_t)&v64, 2);
                    }
                    uint64_t v53 = 0;
                    break;
                  case '<':
                    uint64_t v63 = v13;
                    BOOL v41 = re::ShaderParameterTable::containsBufferKey((uint64_t)a2, &v63);
                    uint64_t v63 = 0;
                    if (!v41)
                    {
                      re::StringID::invalid((re::StringID *)&v64);
                      re::StringID::destroyString((re::StringID *)&v64);
                      re::StringID::invalid((re::StringID *)&v64);
                      re::StringID::destroyString((re::StringID *)&v64);
                    }
                    break;
                  case ':':
                    uint64_t v68 = v13;
                    BOOL v20 = re::TextureParameterTable::containsTextureKey(a3, &v68);
                    uint64_t v68 = 0;
                    if (!v20)
                    {
                      uint64_t v21 = a3;
                      unsigned int v22 = *(_DWORD *)(v10 + 64);
                      uint64_t v23 = v69;
                      re::StringID::invalid((re::StringID *)buf);
                      re::StringID::destroyString((re::StringID *)buf);
                      re::StringID::invalid((re::StringID *)buf);
                      re::StringID::destroyString((re::StringID *)buf);
                      if (v22 < 0xA && ((0x2EFu >> v22) & 1) != 0)
                      {
                        uint64_t v42 = qword_2343AD1F0[v22];
                        LOBYTE(v64) = 1;
                        DWORD2(v64) = 1;
                        uint64_t v65 = v23;
                        char v66 = 0;
                        uint64_t v67 = v42;
                        if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v21, &v69) == -1)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(v21, &v69, (int *)&v64 + 2); {
                      }
                        }
                      else
                      {
                        uint64_t v25 = *re::graphicsLogObjects(v24);
                        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = v22;
                          _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "Texture type %u not supported", buf, 8u);
                        }
                      }
                      a3 = v21;
                      uint64_t v7 = v43;
                    }
                    break;
                }
              }
              else
              {
                switch(*(_WORD *)(v10 + 36))
                {
                  case 3:
                    uint64_t v62 = v13;
                    LODWORD(v74) = 0;
                    *(void *)buf = v13;
                    BOOL v19 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v19)
                    {
                      *(void *)&long long v64 = &v74;
                      *((void *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v62, (uint64_t)&v64, 1);
                    }
                    uint64_t v62 = 0;
                    break;
                  case 4:
                    uint64_t v61 = v13;
                    uint64_t v74 = v13;
                    *(void *)buf = 0;
                    BOOL v26 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v26)
                    {
                      *(void *)&long long v64 = buf;
                      *((void *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v61, (uint64_t)&v64, 32);
                    }
                    uint64_t v61 = 0;
                    break;
                  case 5:
                    uint64_t v60 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v27 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v27)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v60, (uint64_t)buf, 33);
                    }
                    uint64_t v60 = 0;
                    break;
                  case 6:
                    uint64_t v59 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v28 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v28)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v59, (uint64_t)buf, 34);
                    }
                    uint64_t v59 = 0;
                    break;
                  case 7:
                    uint64_t v58 = v13;
                    long long v64 = xmmword_234376D50;
                    uint64_t v74 = v13;
                    BOOL v29 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v29)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v58, (uint64_t)buf, 48);
                    }
                    uint64_t v58 = 0;
                    break;
                  case 0xB:
                    uint64_t v57 = v13;
                    v56[0] = xmmword_23435FD50;
                    v56[1] = xmmword_23435FD60;
                    v56[2] = xmmword_23435FD80;
                    *(void *)buf = v13;
                    BOOL v30 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v30)
                    {
                      *(void *)&long long v64 = v56;
                      *((void *)&v64 + 1) = 48;
                      re::ConstantTable::setConstant(v44, &v57, (uint64_t)&v64, 49);
                    }
                    uint64_t v57 = 0;
                    break;
                  case 0xF:
                    uint64_t v55 = v13;
                    v54[0] = xmmword_23435FD50;
                    v54[1] = xmmword_23435FD60;
                    v54[2] = xmmword_23435FD80;
                    v54[3] = xmmword_23435FBB0;
                    *(void *)buf = v13;
                    BOOL v31 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v31)
                    {
                      *(void *)&long long v64 = v54;
                      *((void *)&v64 + 1) = 64;
                      re::ConstantTable::setConstant(v44, &v55, (uint64_t)&v64, 50);
                    }
                    uint64_t v55 = 0;
                    break;
                  case 0x1D:
                    uint64_t v52 = v13;
                    LODWORD(v74) = 0;
                    *(void *)buf = v13;
                    BOOL v32 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v32)
                    {
                      *(void *)&long long v64 = &v74;
                      *((void *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v52, (uint64_t)&v64, 3);
                    }
                    uint64_t v52 = 0;
                    break;
                  case 0x1E:
                    uint64_t v51 = v13;
                    uint64_t v74 = v13;
                    *(void *)buf = 0;
                    BOOL v33 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v33)
                    {
                      *(void *)&long long v64 = buf;
                      *((void *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v51, (uint64_t)&v64, 4);
                    }
                    uint64_t v51 = 0;
                    break;
                  case 0x1F:
                    uint64_t v50 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v34 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v34)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v50, (uint64_t)buf, 5);
                    }
                    uint64_t v50 = 0;
                    break;
                  case 0x20:
                    uint64_t v49 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v35 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v35)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v49, (uint64_t)buf, 6);
                    }
                    uint64_t v49 = 0;
                    break;
                  case 0x21:
                    uint64_t v48 = v13;
                    LODWORD(v74) = 0;
                    *(void *)buf = v13;
                    BOOL v36 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(void *)buf = 0;
                    if (!v36)
                    {
                      *(void *)&long long v64 = &v74;
                      *((void *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v48, (uint64_t)&v64, 7);
                    }
                    uint64_t v48 = 0;
                    break;
                  case 0x22:
                    uint64_t v47 = v13;
                    uint64_t v74 = v13;
                    *(void *)buf = 0;
                    BOOL v37 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v37)
                    {
                      *(void *)&long long v64 = buf;
                      *((void *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v47, (uint64_t)&v64, 8);
                    }
                    uint64_t v47 = 0;
                    break;
                  case 0x23:
                    uint64_t v46 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v38 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v38)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v46, (uint64_t)buf, 9);
                    }
                    uint64_t v46 = 0;
                    break;
                  case 0x24:
                    uint64_t v45 = v13;
                    long long v64 = 0uLL;
                    uint64_t v74 = v13;
                    BOOL v39 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    uint64_t v74 = 0;
                    if (!v39)
                    {
                      *(void *)buf = &v64;
                      uint64_t v76 = 16;
                      re::ConstantTable::setConstant(v44, &v45, (uint64_t)buf, 10);
                    }
                    uint64_t v45 = 0;
                    break;
                  default:
                    break;
                }
              }
              uint64_t result = v70;
              if (v70)
              {
                if (v71) {
                  uint64_t result = (*(uint64_t (**)(void))(*(void *)v70 + 40))();
                }
              }
            }
            v10 += 80;
          }
          while (v10 != v11);
        }
      }
      v6 += 144;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t *re::FixedArray<re::MetalTypeInfo>::operator=(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = *a2;
    if (*result) {
      BOOL v4 = v2 == v3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      *uint64_t result = v3;
      *a2 = v2;
      uint64_t v5 = result[1];
      uint64_t v6 = result[2];
      uint64_t v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      uint64_t result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::FixedArray<re::MetalTypeInfo>::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*a1)
    {
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::MetalTypeInfo>::init<>((uint64_t)a1, v4, *(void *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::MetalTypeInfo>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::MetalTypeInfo>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x333333333333334)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 80, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 80 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)uint64_t result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
      *(void *)(result + 24) = "";
      *(_WORD *)(result + 36) = 0;
      *(_WORD *)(result + 76) = 256;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(result + 56) = 0;
      *(void *)(result + 40) = 0;
      *(void *)(result + 61) = 0;
      result += 80;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(void *)(result + 24) = "";
  *(_WORD *)(result + 36) = 0;
  *(_WORD *)(result + 76) = 256;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 61) = 0;
  return result;
}

uint64_t re::FixedArray<re::MetalTypeInfo>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MetalTypeInfo *,re::MetalTypeInfo *,re::MetalTypeInfo *>((uint64_t)&v4, *(void *)(a2 + 16), *(void *)(a2 + 16) + 80 * v2, *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MetalTypeInfo *,re::MetalTypeInfo *,re::MetalTypeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 16;
  do
  {
    uint64_t v7 = *(void *)(v6 - 16);
    *(_DWORD *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v6 - 8);
    *(void *)a4 = v7;
    re::StringID::operator=((unint64_t *)(a4 + 16), (uint64_t *)v6);
    int v8 = *(_DWORD *)(v6 + 16);
    *(_WORD *)(a4 + 36) = *(_WORD *)(v6 + 20);
    *(_DWORD *)(a4 + 32) = v8;
    re::FixedArray<re::MetalTypeInfo>::operator=((void *)(a4 + 40), v6 + 24);
    uint64_t v9 = *(void *)(v6 + 54);
    *(void *)(a4 + 64) = *(void *)(v6 + 48);
    *(void *)(a4 + 70) = v9;
    a4 += 80;
    uint64_t v10 = v6 + 64;
    v6 += 80;
  }
  while (v10 != v5);
  return v5;
}

void *re::FixedArray<re::MetalTypeInfo>::FixedArray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<re::MetalTypeInfo>::init<>((uint64_t)a1, v4, *(void *)(a2 + 8));
    re::FixedArray<re::MetalTypeInfo>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::TypedArgument>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::FixedArray<re::MetalTypeInfo>::deinit(v3 + 8);
          re::StringID::destroyString((re::StringID *)(v3 + 5));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 14;
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::FixedArray<re::TypedArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x24924924924924ALL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 112 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
      *(_WORD *)(result + 16) = 0;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
      *(_OWORD *)(result + 72) = 0uLL;
      *(_DWORD *)(result + 32) = 1;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = "";
      *(_WORD *)(result + 60) = 0;
      *(_WORD *)(result + 100) = 256;
      *(void *)(result + 64) = 0;
      *(void *)(result + 72) = 0;
      *(void *)(result + 80) = 0;
      *(void *)(result + 85) = 0;
      *(unsigned char *)(result + 104) = 0;
      result += 112;
      --v6;
    }
    while (v6);
  }
  *(void *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(_WORD *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_DWORD *)(result + 32) = 1;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = "";
  *(_WORD *)(result + 60) = 0;
  *(_WORD *)(result + 100) = 256;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 85) = 0;
  *(unsigned char *)(result + 104) = 0;
  return result;
}

void *re::DynamicArray<re::TypedArgument>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TypedArgument>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TypedArgument>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TypedArgument>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TypedArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      int v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[14 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          uint64_t *v8 = 0;
          v8[1] = (uint64_t)"";
          *((_WORD *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_WORD *)v8 + 8);
          LODWORD(v12) = *((_DWORD *)v8 + 8);
          v11[3] = v8[3];
          *((_DWORD *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          LOBYTE(v12) = v8[5];
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v8[5] & 1;
          v11[5] = v8[5] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[6] = v8[6];
          v8[6] = (uint64_t)"";
          v8[5] = 0;
          LODWORD(v12) = *((_DWORD *)v8 + 14);
          *((_WORD *)v11 + 30) = *((_WORD *)v8 + 30);
          *((_DWORD *)v11 + 14) = v12;
          v11[9] = 0;
          v11[10] = 0;
          v11[8] = 0;
          v11[8] = v8[8];
          v8[8] = 0;
          uint64_t v13 = v11[10];
          uint64_t v14 = v8[10];
          v11[9] = v8[9];
          v11[10] = v14;
          v8[9] = 0;
          v8[10] = v13;
          uint64_t v15 = v8[11];
          *(unint64_t *)((char *)v11 + 94) = *(uint64_t *)((char *)v8 + 94);
          v11[11] = v15;
          *((unsigned char *)v11 + 104) = *((unsigned char *)v8 + 104);
          re::FixedArray<re::MetalTypeInfo>::deinit(v8 + 8);
          re::StringID::destroyString((re::StringID *)(v8 + 5));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 14;
          v11 += 14;
        }
        while (v8 != v10);
        int v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(void *result, void *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6 * 8;
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8), &v5[v6]);
      *(_WORD *)(v7 + 16) = v5[v6 + 2];
      uint64_t v8 = v5[v6 + 3];
      *(_DWORD *)(v7 + 32) = v5[v6 + 4];
      *(void *)(v7 + 24) = v8;
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 40), &v5[v6 + 5]);
      int v9 = v5[v6 + 7];
      *(_WORD *)(v7 + 60) = WORD2(v5[v6 + 7]);
      *(_DWORD *)(v7 + 56) = v9;
      uint64_t result = re::FixedArray<re::MetalTypeInfo>::operator=((void *)(a3 + v6 * 8 + 64), (uint64_t)&v5[v6 + 8]);
      uint64_t v10 = v5[v6 + 11];
      *(void *)(v7 + 94) = *(void *)((char *)&v5[v6 + 11] + 6);
      *(void *)(v7 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
      *(unsigned char *)(v7 + 104) = v5[v6 + 13];
      v6 += 14;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    *(_WORD *)(v8 + 16) = *(_WORD *)(a2 + v7 + 16);
    uint64_t v9 = *(void *)(a2 + v7 + 24);
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + v7 + 32);
    *(void *)(v8 + 24) = v9;
    re::StringID::operator=((unint64_t *)(a4 + v7 + 40), (uint64_t *)(a2 + v7 + 40));
    int v10 = *(_DWORD *)(a2 + v7 + 56);
    *(_WORD *)(v8 + 60) = *(_WORD *)(a2 + v7 + 60);
    *(_DWORD *)(v8 + 56) = v10;
    re::FixedArray<re::MetalTypeInfo>::operator=((void *)(a4 + v7 + 64), a2 + v7 + 64);
    uint64_t v11 = *(void *)(a2 + v7 + 88);
    *(void *)(v8 + 94) = *(void *)(a2 + v7 + 94);
    *(void *)(v8 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
    *(unsigned char *)(v8 + 104) = *(unsigned char *)(a2 + v7 + 104);
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

void re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(void *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v28;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)BOOL v28 = v5;
      *(void *)&v28[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v14 - 32) & 0x80000000) != 0)
          {
            unint64_t v15 = 0xBF58476D1CE4E5B9 * ((*(void *)(v14 - 24) >> 31) ^ (*(void *)(v14 - 24) >> 1));
            unint64_t v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = v16 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + (v19 << 6));
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + (v19 << 6));
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            uint64_t v23 = v19 << 6;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v23) = *(_DWORD *)(*(void *)(a1 + 16) + (v19 << 6)) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v19 << 6) + 8), (const StringID *)(v14 - 24));
            uint64_t v24 = *(void *)(a1 + 16) + (v19 << 6);
            *(void *)(v24 + 56) = 0;
            *(_DWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
            *(void *)(v24 + 32) = 0;
            *(void *)(v24 + 40) = 0;
            *(void *)(v24 + 24) = 0;
            *(void *)(v24 + 24) = *(void *)(v14 - 8);
            *(void *)(v14 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
            *(void *)(v24 + 32) = *(void *)v14;
            *(void *)uint64_t v14 = 0;
            uint64_t v25 = *(void *)(v24 + 40);
            *(void *)(v24 + 40) = *(void *)(v14 + 8);
            *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v25;
            uint64_t v26 = *(void *)(v24 + 56);
            *(void *)(v24 + 56) = *(void *)(v14 + 24);
            *(void *)(v14 + 24) = v26;
            ++*(_DWORD *)(v14 + 16);
            ++*(_DWORD *)(v24 + 48);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          }
          v14 += 64;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2) {
      signed int v27 = a2;
    }
    else {
      signed int v27 = 3;
    }
  }
}

double re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *result)
{
  if ((*result & 0x80000000) != 0)
  {
    int v1 = result;
    *result &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(result + 2));
    return (_DWORD *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)(v1 + 6));
  }
  return result;
}

void *re::DynamicArray<re::MetalTypeInfo>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MetalTypeInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MetalTypeInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::MetalTypeInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MetalTypeInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[10 * v9];
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v8 + 2);
          *unint64_t v11 = v12;
          uint64_t v13 = (re::StringID *)(v8 + 2);
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = "";
          v8[2] = 0;
          LODWORD(v12) = *((_DWORD *)v8 + 8);
          *((_WORD *)v11 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_WORD *)v8 + 18);
          *((_DWORD *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          v11[6] = 0;
          v11[7] = 0;
          v11[5] = 0;
          uint64_t v15 = v8[5];
          uint64_t v14 = v8 + 5;
          v11[5] = v15;
          void *v14 = 0;
          uint64_t v16 = v11[7];
          uint64_t v17 = v14[2];
          v11[6] = v14[1];
          v11[7] = v17;
          v14[1] = 0;
          v14[2] = v16;
          uint64_t v18 = v14[3];
          *(void *)((char *)v11 + 70) = *(void *)((char *)v14 + 30);
          v11[8] = v18;
          re::FixedArray<re::MetalTypeInfo>::deinit(v14);
          re::StringID::destroyString(v13);
          unsigned int v8 = v14 + 5;
          v11 += 10;
        }
        while (v8 != v10);
        unsigned int v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::internal::compileTimeHornerHash<35ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aGeometrymodifi[a2] + 32 * aGeometrymodifi[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aGeometrymodifi[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aGeometrymodifi[a2] - aGeometrymodifi[a2 + 1] + 32 * aGeometrymodifi[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aGeometrymodifi[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aGeometrymodifi[a2]
         + 961 * aGeometrymodifi[a2 + 1]
         - aGeometrymodifi[a2 + 2]
         + 32 * aGeometrymodifi[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aGeometrymodifi[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aGeometrymodifi[a2]
         + 29791 * aGeometrymodifi[a2 + 1]
         + 961 * aGeometrymodifi[a2 + 2]
         - aGeometrymodifi[a2 + 3]
         + 32 * aGeometrymodifi[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aGeometrymodifi[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aGeometrymodifi[a2]
         + 923521 * aGeometrymodifi[a2 + 1]
         + 29791 * aGeometrymodifi[a2 + 2]
         + 961 * aGeometrymodifi[a2 + 3]
         - aGeometrymodifi[a2 + 4]
         + 32 * aGeometrymodifi[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aGeometrymodifi[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aGeometrymodifi[a2]
         + 28629151 * aGeometrymodifi[a2 + 1]
         + 923521 * aGeometrymodifi[a2 + 2]
         + 29791 * aGeometrymodifi[a2 + 3]
         + 961 * aGeometrymodifi[a2 + 4]
         - aGeometrymodifi[a2 + 5]
         + 32 * aGeometrymodifi[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aGeometrymodifi[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aGeometrymodifi[a2]
         + 887503681 * aGeometrymodifi[a2 + 1]
         + 28629151 * aGeometrymodifi[a2 + 2]
         + 923521 * aGeometrymodifi[a2 + 3]
         + 29791 * aGeometrymodifi[a2 + 4]
         + 961 * aGeometrymodifi[a2 + 5]
         - aGeometrymodifi[a2 + 6]
         + 32 * aGeometrymodifi[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aGeometrymodifi[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aGeometrymodifi[a2]
         + 0x667E12CDFLL * aGeometrymodifi[a2 + 1]
         + 887503681 * aGeometrymodifi[a2 + 2]
         + 28629151 * aGeometrymodifi[a2 + 3]
         + 923521 * aGeometrymodifi[a2 + 4]
         + 29791 * aGeometrymodifi[a2 + 5]
         + 961 * aGeometrymodifi[a2 + 6]
         - aGeometrymodifi[a2 + 7]
         + 32 * aGeometrymodifi[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aGeometrymodifi[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aGeometrymodifi[a2]
         + 0xC694446F01 * aGeometrymodifi[a2 + 1]
         + 0x667E12CDFLL * aGeometrymodifi[a2 + 2]
         + 887503681 * aGeometrymodifi[a2 + 3]
         + 28629151 * aGeometrymodifi[a2 + 4]
         + 923521 * aGeometrymodifi[a2 + 5]
         + 29791 * aGeometrymodifi[a2 + 6]
         + 961 * aGeometrymodifi[a2 + 7]
         - aGeometrymodifi[a2 + 8]
         + 32 * aGeometrymodifi[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aGeometrymodifi[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<35ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<35ul>(aGeometrymodifi[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aGeometrymodifi[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<33ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aGeometrymodifi_0[a2] + 32 * aGeometrymodifi_0[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aGeometrymodifi_0[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aGeometrymodifi_0[a2] - aGeometrymodifi_0[a2 + 1] + 32 * aGeometrymodifi_0[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aGeometrymodifi_0[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aGeometrymodifi_0[a2]
         + 961 * aGeometrymodifi_0[a2 + 1]
         - aGeometrymodifi_0[a2 + 2]
         + 32 * aGeometrymodifi_0[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aGeometrymodifi_0[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aGeometrymodifi_0[a2]
         + 29791 * aGeometrymodifi_0[a2 + 1]
         + 961 * aGeometrymodifi_0[a2 + 2]
         - aGeometrymodifi_0[a2 + 3]
         + 32 * aGeometrymodifi_0[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aGeometrymodifi_0[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aGeometrymodifi_0[a2]
         + 923521 * aGeometrymodifi_0[a2 + 1]
         + 29791 * aGeometrymodifi_0[a2 + 2]
         + 961 * aGeometrymodifi_0[a2 + 3]
         - aGeometrymodifi_0[a2 + 4]
         + 32 * aGeometrymodifi_0[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aGeometrymodifi_0[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aGeometrymodifi_0[a2]
         + 28629151 * aGeometrymodifi_0[a2 + 1]
         + 923521 * aGeometrymodifi_0[a2 + 2]
         + 29791 * aGeometrymodifi_0[a2 + 3]
         + 961 * aGeometrymodifi_0[a2 + 4]
         - aGeometrymodifi_0[a2 + 5]
         + 32 * aGeometrymodifi_0[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aGeometrymodifi_0[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aGeometrymodifi_0[a2]
         + 887503681 * aGeometrymodifi_0[a2 + 1]
         + 28629151 * aGeometrymodifi_0[a2 + 2]
         + 923521 * aGeometrymodifi_0[a2 + 3]
         + 29791 * aGeometrymodifi_0[a2 + 4]
         + 961 * aGeometrymodifi_0[a2 + 5]
         - aGeometrymodifi_0[a2 + 6]
         + 32 * aGeometrymodifi_0[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aGeometrymodifi_0[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aGeometrymodifi_0[a2]
         + 0x667E12CDFLL * aGeometrymodifi_0[a2 + 1]
         + 887503681 * aGeometrymodifi_0[a2 + 2]
         + 28629151 * aGeometrymodifi_0[a2 + 3]
         + 923521 * aGeometrymodifi_0[a2 + 4]
         + 29791 * aGeometrymodifi_0[a2 + 5]
         + 961 * aGeometrymodifi_0[a2 + 6]
         - aGeometrymodifi_0[a2 + 7]
         + 32 * aGeometrymodifi_0[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aGeometrymodifi_0[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aGeometrymodifi_0[a2]
         + 0xC694446F01 * aGeometrymodifi_0[a2 + 1]
         + 0x667E12CDFLL * aGeometrymodifi_0[a2 + 2]
         + 887503681 * aGeometrymodifi_0[a2 + 3]
         + 28629151 * aGeometrymodifi_0[a2 + 4]
         + 923521 * aGeometrymodifi_0[a2 + 5]
         + 29791 * aGeometrymodifi_0[a2 + 6]
         + 961 * aGeometrymodifi_0[a2 + 7]
         - aGeometrymodifi_0[a2 + 8]
         + 32 * aGeometrymodifi_0[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aGeometrymodifi_0[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<33ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<33ul>(aGeometrymodifi_0[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aGeometrymodifi_0[v3];
  }
}

void *re::FixedArray<re::TextureRecord>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = result;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)double result = 0;
      result[1] = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)double result = 0;
  result[1] = 0;
  return result;
}

unint64_t re::internal::compileTimeHornerHash<17ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  unint64_t result = a5 - a4;
  switch(a5 - a4)
  {
    case 0:
      return result;
    case 1:
      uint64_t v9 = 31 * a3;
      return v9 + *(char *)(a2 + v5);
    case 2:
      uint64_t v9 = 961 * a3 - *(char *)(a2 + a4) + 32 * *(char *)(a2 + a4);
      uint64_t v5 = a4 + 1;
      return v9 + *(char *)(a2 + v5);
    case 3:
      uint64_t v9 = 29791 * a3 + 961 * *(char *)(a2 + a4) - *(char *)(a2 + a4 + 1) + 32 * *(char *)(a2 + a4 + 1);
      uint64_t v5 = a4 + 2;
      return v9 + *(char *)(a2 + v5);
    case 4:
      uint64_t v9 = 923521 * a3
         + 29791 * *(char *)(a2 + a4)
         + 961 * *(char *)(a2 + a4 + 1)
         - *(char *)(a2 + a4 + 2)
         + 32 * *(char *)(a2 + a4 + 2);
      uint64_t v5 = a4 + 3;
      return v9 + *(char *)(a2 + v5);
    case 5:
      uint64_t v9 = 28629151 * a3
         + 923521 * *(char *)(a2 + a4)
         + 29791 * *(char *)(a2 + a4 + 1)
         + 961 * *(char *)(a2 + a4 + 2)
         - *(char *)(a2 + a4 + 3)
         + 32 * *(char *)(a2 + a4 + 3);
      uint64_t v5 = a4 + 4;
      return v9 + *(char *)(a2 + v5);
    case 6:
      uint64_t v9 = 887503681 * a3
         + 28629151 * *(char *)(a2 + a4)
         + 923521 * *(char *)(a2 + a4 + 1)
         + 29791 * *(char *)(a2 + a4 + 2)
         + 961 * *(char *)(a2 + a4 + 3)
         - *(char *)(a2 + a4 + 4)
         + 32 * *(char *)(a2 + a4 + 4);
      uint64_t v5 = a4 + 5;
      return v9 + *(char *)(a2 + v5);
    case 7:
      uint64_t v9 = 0x667E12CDFLL * a3
         + 887503681 * *(char *)(a2 + a4)
         + 28629151 * *(char *)(a2 + a4 + 1)
         + 923521 * *(char *)(a2 + a4 + 2)
         + 29791 * *(char *)(a2 + a4 + 3)
         + 961 * *(char *)(a2 + a4 + 4)
         - *(char *)(a2 + a4 + 5)
         + 32 * *(char *)(a2 + a4 + 5);
      uint64_t v5 = a4 + 6;
      return v9 + *(char *)(a2 + v5);
    case 8:
      uint64_t v9 = 0xC694446F01 * a3
         + 0x667E12CDFLL * *(char *)(a2 + a4)
         + 887503681 * *(char *)(a2 + a4 + 1)
         + 28629151 * *(char *)(a2 + a4 + 2)
         + 923521 * *(char *)(a2 + a4 + 3)
         + 29791 * *(char *)(a2 + a4 + 4)
         + 961 * *(char *)(a2 + a4 + 5)
         - *(char *)(a2 + a4 + 6)
         + 32 * *(char *)(a2 + a4 + 6);
      uint64_t v5 = a4 + 7;
      return v9 + *(char *)(a2 + v5);
    case 9:
      uint64_t v9 = 0x180BF449711FLL * a3
         + 0xC694446F01 * *(char *)(a2 + a4)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 1)
         + 887503681 * *(char *)(a2 + a4 + 2)
         + 28629151 * *(char *)(a2 + a4 + 3)
         + 923521 * *(char *)(a2 + a4 + 4)
         + 29791 * *(char *)(a2 + a4 + 5)
         + 961 * *(char *)(a2 + a4 + 6)
         - *(char *)(a2 + a4 + 7)
         + 32 * *(char *)(a2 + a4 + 7);
      uint64_t v5 = a4 + 8;
      return v9 + *(char *)(a2 + v5);
    case 10:
      uint64_t v9 = 0x2E97294E4B2C1 * a3
         + 0x180BF449711FLL * *(char *)(a2 + a4)
         + 0xC694446F01 * *(char *)(a2 + a4 + 1)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 2)
         + 887503681 * *(char *)(a2 + a4 + 3)
         + 28629151 * *(char *)(a2 + a4 + 4)
         + 923521 * *(char *)(a2 + a4 + 5)
         + 29791 * *(char *)(a2 + a4 + 6)
         + 961 * *(char *)(a2 + a4 + 7)
         - *(char *)(a2 + a4 + 8)
         + 32 * *(char *)(a2 + a4 + 8);
      uint64_t v5 = a4 + 9;
      return v9 + *(char *)(a2 + v5);
    default:
      uint64_t v11 = a4 + (result >> 1);
      uint64_t v12 = re::internal::compileTimeHornerHash<17ul>(a1, a2, a3, a4, v11 - 1);
      uint64_t v5 = a5 - 1;
      uint64_t v9 = re::internal::compileTimeHornerHash<17ul>(a1, a2, *(char *)(a2 + v11 - 1) + v12 * a1, v11, a5 - 1) * a1;
      return v9 + *(char *)(a2 + v5);
  }
}

void *re::FixedArray<unsigned char>::init<int>(void *result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *unint64_t result = a2;
  result[1] = a3;
  if (a3)
  {
    unint64_t v6 = result;
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, 1);
    _DWORD v6[2] = result;
    if (result)
    {
      uint64_t v8 = a3 - 1;
      if (a3 != 1)
      {
        do
        {
          *(unsigned char *)unint64_t result = *a4;
          unint64_t result = (void *)((char *)result + 1);
          --v8;
        }
        while (v8);
      }
      *(unsigned char *)unint64_t result = *a4;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      unint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::compileTimeHornerHash<32ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aSurfaceshaderu[a2] + 32 * aSurfaceshaderu[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aSurfaceshaderu[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aSurfaceshaderu[a2] - aSurfaceshaderu[a2 + 1] + 32 * aSurfaceshaderu[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aSurfaceshaderu[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aSurfaceshaderu[a2]
         + 961 * aSurfaceshaderu[a2 + 1]
         - aSurfaceshaderu[a2 + 2]
         + 32 * aSurfaceshaderu[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aSurfaceshaderu[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aSurfaceshaderu[a2]
         + 29791 * aSurfaceshaderu[a2 + 1]
         + 961 * aSurfaceshaderu[a2 + 2]
         - aSurfaceshaderu[a2 + 3]
         + 32 * aSurfaceshaderu[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aSurfaceshaderu[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aSurfaceshaderu[a2]
         + 923521 * aSurfaceshaderu[a2 + 1]
         + 29791 * aSurfaceshaderu[a2 + 2]
         + 961 * aSurfaceshaderu[a2 + 3]
         - aSurfaceshaderu[a2 + 4]
         + 32 * aSurfaceshaderu[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aSurfaceshaderu[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aSurfaceshaderu[a2]
         + 28629151 * aSurfaceshaderu[a2 + 1]
         + 923521 * aSurfaceshaderu[a2 + 2]
         + 29791 * aSurfaceshaderu[a2 + 3]
         + 961 * aSurfaceshaderu[a2 + 4]
         - aSurfaceshaderu[a2 + 5]
         + 32 * aSurfaceshaderu[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aSurfaceshaderu[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSurfaceshaderu[a2]
         + 887503681 * aSurfaceshaderu[a2 + 1]
         + 28629151 * aSurfaceshaderu[a2 + 2]
         + 923521 * aSurfaceshaderu[a2 + 3]
         + 29791 * aSurfaceshaderu[a2 + 4]
         + 961 * aSurfaceshaderu[a2 + 5]
         - aSurfaceshaderu[a2 + 6]
         + 32 * aSurfaceshaderu[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aSurfaceshaderu[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSurfaceshaderu[a2]
         + 0x667E12CDFLL * aSurfaceshaderu[a2 + 1]
         + 887503681 * aSurfaceshaderu[a2 + 2]
         + 28629151 * aSurfaceshaderu[a2 + 3]
         + 923521 * aSurfaceshaderu[a2 + 4]
         + 29791 * aSurfaceshaderu[a2 + 5]
         + 961 * aSurfaceshaderu[a2 + 6]
         - aSurfaceshaderu[a2 + 7]
         + 32 * aSurfaceshaderu[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aSurfaceshaderu[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSurfaceshaderu[a2]
         + 0xC694446F01 * aSurfaceshaderu[a2 + 1]
         + 0x667E12CDFLL * aSurfaceshaderu[a2 + 2]
         + 887503681 * aSurfaceshaderu[a2 + 3]
         + 28629151 * aSurfaceshaderu[a2 + 4]
         + 923521 * aSurfaceshaderu[a2 + 5]
         + 29791 * aSurfaceshaderu[a2 + 6]
         + 961 * aSurfaceshaderu[a2 + 7]
         - aSurfaceshaderu[a2 + 8]
         + 32 * aSurfaceshaderu[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aSurfaceshaderu[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<32ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<32ul>(aSurfaceshaderu[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aSurfaceshaderu[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<30ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aSurfaceshaderw[a2] + 32 * aSurfaceshaderw[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aSurfaceshaderw[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aSurfaceshaderw[a2] - aSurfaceshaderw[a2 + 1] + 32 * aSurfaceshaderw[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aSurfaceshaderw[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aSurfaceshaderw[a2]
         + 961 * aSurfaceshaderw[a2 + 1]
         - aSurfaceshaderw[a2 + 2]
         + 32 * aSurfaceshaderw[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aSurfaceshaderw[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aSurfaceshaderw[a2]
         + 29791 * aSurfaceshaderw[a2 + 1]
         + 961 * aSurfaceshaderw[a2 + 2]
         - aSurfaceshaderw[a2 + 3]
         + 32 * aSurfaceshaderw[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aSurfaceshaderw[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aSurfaceshaderw[a2]
         + 923521 * aSurfaceshaderw[a2 + 1]
         + 29791 * aSurfaceshaderw[a2 + 2]
         + 961 * aSurfaceshaderw[a2 + 3]
         - aSurfaceshaderw[a2 + 4]
         + 32 * aSurfaceshaderw[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aSurfaceshaderw[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aSurfaceshaderw[a2]
         + 28629151 * aSurfaceshaderw[a2 + 1]
         + 923521 * aSurfaceshaderw[a2 + 2]
         + 29791 * aSurfaceshaderw[a2 + 3]
         + 961 * aSurfaceshaderw[a2 + 4]
         - aSurfaceshaderw[a2 + 5]
         + 32 * aSurfaceshaderw[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aSurfaceshaderw[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSurfaceshaderw[a2]
         + 887503681 * aSurfaceshaderw[a2 + 1]
         + 28629151 * aSurfaceshaderw[a2 + 2]
         + 923521 * aSurfaceshaderw[a2 + 3]
         + 29791 * aSurfaceshaderw[a2 + 4]
         + 961 * aSurfaceshaderw[a2 + 5]
         - aSurfaceshaderw[a2 + 6]
         + 32 * aSurfaceshaderw[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aSurfaceshaderw[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSurfaceshaderw[a2]
         + 0x667E12CDFLL * aSurfaceshaderw[a2 + 1]
         + 887503681 * aSurfaceshaderw[a2 + 2]
         + 28629151 * aSurfaceshaderw[a2 + 3]
         + 923521 * aSurfaceshaderw[a2 + 4]
         + 29791 * aSurfaceshaderw[a2 + 5]
         + 961 * aSurfaceshaderw[a2 + 6]
         - aSurfaceshaderw[a2 + 7]
         + 32 * aSurfaceshaderw[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aSurfaceshaderw[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSurfaceshaderw[a2]
         + 0xC694446F01 * aSurfaceshaderw[a2 + 1]
         + 0x667E12CDFLL * aSurfaceshaderw[a2 + 2]
         + 887503681 * aSurfaceshaderw[a2 + 3]
         + 28629151 * aSurfaceshaderw[a2 + 4]
         + 923521 * aSurfaceshaderw[a2 + 5]
         + 29791 * aSurfaceshaderw[a2 + 6]
         + 961 * aSurfaceshaderw[a2 + 7]
         - aSurfaceshaderw[a2 + 8]
         + 32 * aSurfaceshaderw[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aSurfaceshaderw[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<30ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<30ul>(aSurfaceshaderw[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aSurfaceshaderw[v3];
  }
}

unint64_t re::internal::compileTimeHornerHash<14ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  unint64_t result = a5 - a4;
  switch(a5 - a4)
  {
    case 0:
      return result;
    case 1:
      uint64_t v9 = 31 * a3;
      return v9 + *(char *)(a2 + v5);
    case 2:
      uint64_t v9 = 961 * a3 - *(char *)(a2 + a4) + 32 * *(char *)(a2 + a4);
      uint64_t v5 = a4 + 1;
      return v9 + *(char *)(a2 + v5);
    case 3:
      uint64_t v9 = 29791 * a3 + 961 * *(char *)(a2 + a4) - *(char *)(a2 + a4 + 1) + 32 * *(char *)(a2 + a4 + 1);
      uint64_t v5 = a4 + 2;
      return v9 + *(char *)(a2 + v5);
    case 4:
      uint64_t v9 = 923521 * a3
         + 29791 * *(char *)(a2 + a4)
         + 961 * *(char *)(a2 + a4 + 1)
         - *(char *)(a2 + a4 + 2)
         + 32 * *(char *)(a2 + a4 + 2);
      uint64_t v5 = a4 + 3;
      return v9 + *(char *)(a2 + v5);
    case 5:
      uint64_t v9 = 28629151 * a3
         + 923521 * *(char *)(a2 + a4)
         + 29791 * *(char *)(a2 + a4 + 1)
         + 961 * *(char *)(a2 + a4 + 2)
         - *(char *)(a2 + a4 + 3)
         + 32 * *(char *)(a2 + a4 + 3);
      uint64_t v5 = a4 + 4;
      return v9 + *(char *)(a2 + v5);
    case 6:
      uint64_t v9 = 887503681 * a3
         + 28629151 * *(char *)(a2 + a4)
         + 923521 * *(char *)(a2 + a4 + 1)
         + 29791 * *(char *)(a2 + a4 + 2)
         + 961 * *(char *)(a2 + a4 + 3)
         - *(char *)(a2 + a4 + 4)
         + 32 * *(char *)(a2 + a4 + 4);
      uint64_t v5 = a4 + 5;
      return v9 + *(char *)(a2 + v5);
    case 7:
      uint64_t v9 = 0x667E12CDFLL * a3
         + 887503681 * *(char *)(a2 + a4)
         + 28629151 * *(char *)(a2 + a4 + 1)
         + 923521 * *(char *)(a2 + a4 + 2)
         + 29791 * *(char *)(a2 + a4 + 3)
         + 961 * *(char *)(a2 + a4 + 4)
         - *(char *)(a2 + a4 + 5)
         + 32 * *(char *)(a2 + a4 + 5);
      uint64_t v5 = a4 + 6;
      return v9 + *(char *)(a2 + v5);
    case 8:
      uint64_t v9 = 0xC694446F01 * a3
         + 0x667E12CDFLL * *(char *)(a2 + a4)
         + 887503681 * *(char *)(a2 + a4 + 1)
         + 28629151 * *(char *)(a2 + a4 + 2)
         + 923521 * *(char *)(a2 + a4 + 3)
         + 29791 * *(char *)(a2 + a4 + 4)
         + 961 * *(char *)(a2 + a4 + 5)
         - *(char *)(a2 + a4 + 6)
         + 32 * *(char *)(a2 + a4 + 6);
      uint64_t v5 = a4 + 7;
      return v9 + *(char *)(a2 + v5);
    case 9:
      uint64_t v9 = 0x180BF449711FLL * a3
         + 0xC694446F01 * *(char *)(a2 + a4)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 1)
         + 887503681 * *(char *)(a2 + a4 + 2)
         + 28629151 * *(char *)(a2 + a4 + 3)
         + 923521 * *(char *)(a2 + a4 + 4)
         + 29791 * *(char *)(a2 + a4 + 5)
         + 961 * *(char *)(a2 + a4 + 6)
         - *(char *)(a2 + a4 + 7)
         + 32 * *(char *)(a2 + a4 + 7);
      uint64_t v5 = a4 + 8;
      return v9 + *(char *)(a2 + v5);
    case 10:
      uint64_t v9 = 0x2E97294E4B2C1 * a3
         + 0x180BF449711FLL * *(char *)(a2 + a4)
         + 0xC694446F01 * *(char *)(a2 + a4 + 1)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 2)
         + 887503681 * *(char *)(a2 + a4 + 3)
         + 28629151 * *(char *)(a2 + a4 + 4)
         + 923521 * *(char *)(a2 + a4 + 5)
         + 29791 * *(char *)(a2 + a4 + 6)
         + 961 * *(char *)(a2 + a4 + 7)
         - *(char *)(a2 + a4 + 8)
         + 32 * *(char *)(a2 + a4 + 8);
      uint64_t v5 = a4 + 9;
      return v9 + *(char *)(a2 + v5);
    default:
      uint64_t v11 = a4 + (result >> 1);
      uint64_t v12 = re::internal::compileTimeHornerHash<14ul>(a1, a2, a3, a4, v11 - 1);
      uint64_t v5 = a5 - 1;
      uint64_t v9 = re::internal::compileTimeHornerHash<14ul>(a1, a2, *(char *)(a2 + v11 - 1) + v12 * a1, v11, a5 - 1) * a1;
      return v9 + *(char *)(a2 + v5);
  }
}

uint64_t re::ProtectionOptionsManager::setAllowedProtectionOptions(uint64_t this, uint64_t a2)
{
  *(void *)(this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
  return this;
}

uint64_t re::ProtectionOptionsManager::allowedProtectionOptions(re::ProtectionOptionsManager *this)
{
  return *((void *)this + 1);
}

uint64_t re::ProtectionOptionsManager::addDesiredProtectionOptions(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) |= a2;
  return this;
}

uint64_t re::ProtectionOptionsManager::desiredProtectionOptions(re::ProtectionOptionsManager *this)
{
  return *((void *)this + 2);
}

uint64_t re::ProtectionOptionsManager::resetDesiredProtectionOptions(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

void re::ProtectionOptionsManager::~ProtectionOptionsManager(re::ProtectionOptionsManager *this)
{
}

unint64_t makeValidInternal(uint64_t a1, id *a2, uint64_t a3, double a4)
{
  unint64_t result = (unint64_t)*a2;
  if (!*a2 || (*(_DWORD *)a1 | 2) != 2) {
    return result;
  }
  if (!*(_DWORD *)(a1 + 4)) {
    *(_DWORD *)(a1 + 4) = objc_msgSend((id)result, sel_pixelFormat);
  }
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    *(float *)&a4 = fmaxf(*(float *)(a1 + 40) * (float)(unint64_t)objc_msgSend(*a2, sel_width), 0.0);
    int v8 = *(_DWORD *)(a1 + 48);
    if (v8 == 2)
    {
      *(float *)&a4 = ceilf(*(float *)&a4);
    }
    else if (v8 == 1)
    {
      *(float *)&a4 = roundf(*(float *)&a4);
    }
    else
    {
      if (v8) {
        goto LABEL_13;
      }
      *(float *)&a4 = floorf(*(float *)&a4);
    }
    *(_DWORD *)(a1 + 12) = *(float *)&a4;
  }
LABEL_13:
  if (*(_DWORD *)(a1 + 16) != -1) {
    goto LABEL_21;
  }
  *(float *)&a4 = fmaxf(*(float *)(a1 + 44) * (float)(unint64_t)objc_msgSend(*a2, sel_height, a4), 0.0);
  int v9 = *(_DWORD *)(a1 + 52);
  if (v9 == 2)
  {
    *(float *)&a4 = ceilf(*(float *)&a4);
  }
  else if (v9 == 1)
  {
    *(float *)&a4 = roundf(*(float *)&a4);
  }
  else
  {
    if (v9) {
      goto LABEL_21;
    }
    *(float *)&a4 = floorf(*(float *)&a4);
  }
  *(_DWORD *)(a1 + 16) = *(float *)&a4;
LABEL_21:
  unsigned int v10 = *(_DWORD *)(a1 + 20);
  if (v10 == -1)
  {
    unsigned int v10 = objc_msgSend(*a2, sel_sampleCount, a4);
    *(_DWORD *)(a1 + 20) = v10;
  }
  unint64_t result = *(unsigned int *)(a1 + 24);
  if (result == -1)
  {
    unint64_t result = (unint64_t)objc_msgSend(*a2, sel_arrayLength);
    *(_DWORD *)(a1 + 24) = result;
    unsigned int v10 = *(_DWORD *)(a1 + 20);
  }
  if (v10 < 2)
  {
    if (*(_DWORD *)(a1 + 12) != -1 && *(_DWORD *)(a1 + 16) != -1 && result != -1)
    {
      unint64_t result = (unint64_t)objc_msgSend(*a2, sel_textureType);
      *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
    }
    int v12 = *(_DWORD *)(a1 + 28);
    if (v12 == -2)
    {
      unsigned int v11 = 32 - __clz(*(_DWORD *)(a1 + 12));
      unsigned int v14 = 32 - __clz(*(_DWORD *)(a1 + 16));
      if (v11 <= v14) {
        unsigned int v11 = v14;
      }
    }
    else
    {
      if (v12 != -1) {
        goto LABEL_40;
      }
      unint64_t result = (unint64_t)objc_msgSend(*a2, sel_mipmapLevelCount);
      *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
      unsigned int v11 = 32 - __clz(*(_DWORD *)(a1 + 12));
      unsigned int v13 = 32 - __clz(*(_DWORD *)(a1 + 16));
      if (v11 <= v13) {
        unsigned int v11 = v13;
      }
      if (v11 >= result) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    unsigned int v11 = 1;
  }
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
LABEL_40:
  if (*(_DWORD *)(a1 + 32) == -1) {
    *(_DWORD *)(a1 + 32) = 0;
  }
  if (*(void *)(a1 + 88) == -1)
  {
    unint64_t result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
    *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result & a3;
  }
  return result;
}

void re::RenderGraphTargetDescription::makeValid(uint64_t a1, id *a2, uint64_t a3)
{
  id v5 = *a2;
  id v7 = v5;
  makeValidInternal(a1, &v7, a3, v6);
  if (v5)
  {
  }
}

uint64_t re::RenderGraphTargetDescription::copySetProperties(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(result + 4)) {
    *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
  }
  unsigned int v2 = *(_DWORD *)(result + 12);
  if (v2 == -1)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 12) = v2;
  }
  unsigned int v3 = *(_DWORD *)(result + 16);
  if (v3 == -1)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(result + 16) = v3;
  }
  unsigned int v4 = *(_DWORD *)(result + 20);
  if (v4 == -1)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 20) = v4;
  }
  unsigned int v5 = *(_DWORD *)(result + 24);
  if (v5 == -1)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(result + 24) = v5;
  }
  if (v2 != -1 && v3 != -1 && v4 != -1 && v5 != -1)
  {
    if (v4 >= 2 && v5 > 1)
    {
      int v6 = 8;
LABEL_29:
      *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
      goto LABEL_30;
    }
    if (v5 < 2)
    {
      if (v5 == 1)
      {
        if (v4 > 1)
        {
          int v6 = 4;
          goto LABEL_29;
        }
        if (v3 >= 2 && v2 >= 2 && v4 == 1)
        {
          int v6 = 2;
          goto LABEL_29;
        }
      }
    }
    else if (v4 == 1)
    {
      int v6 = 3;
      goto LABEL_29;
    }
    int v6 = *(_DWORD *)(a2 + 8);
    goto LABEL_29;
  }
LABEL_30:
  int v7 = *(_DWORD *)(result + 28);
  if (v7 == -1)
  {
    int v7 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(result + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
  }
  if (*(_DWORD *)(result + 32) == -1) {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  }
  if (*(void *)(result + 88) == -1) {
    *(void *)(result + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a2 + 88);
  }
  if (v2 != -1 && v7 == -2 && v3 != -1)
  {
    unsigned int v8 = 32 - __clz(v2);
    unsigned int v9 = 32 - __clz(v3);
    if (v8 <= v9) {
      unsigned int v8 = v9;
    }
    *(_DWORD *)(result + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
  }
  return result;
}

void *re::RenderGraphTargetDescription::valuesToString@<X0>(re::RenderGraphTargetDescription *this@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  re::DynamicString::setCapacity(a2, 0);
  uint64_t v4 = a2[1];
  if (v4)
  {
    a2[1] = 1;
    unsigned int v5 = (unsigned char *)a2[2];
  }
  else
  {
    *((unsigned char *)a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4 & 1;
    unsigned int v5 = (char *)a2 + 9;
  }
  unsigned char *v5 = 0;
  re::DynamicString::setCapacity(a2, 0x400uLL);
  re::DynamicString::format((re::DynamicString *)"type: %d format: %d textureType: %d width: %u height: %u sampleCount: %u arrayLength: %u mipLevelCount: %u                                     tonemapInPlace: %u widthMultiplier: %f heightMultiplier: %f widthRoundingMode: %d heightRoundingMode: %d                                     initialUsageFlags: %d initialOptions: %d protectionOptions: %llu isMemoryless: %d", (re::DynamicString *)&v7, *(unsigned int *)this, *((unsigned int *)this + 1), *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4), *((unsigned int *)this + 5), *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), *((float *)this + 10), *((float *)this + 11), *((unsigned int *)this + 12), *((unsigned int *)this + 13), *((unsigned int *)this + 16),
    *((unsigned int *)this + 17),
    *((void *)this + 11),
    (*((_DWORD *)this + 17) & 0x70) == 48);
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  if (v7 && (v8 & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  return re::DynamicString::trimExcess(a2);
}

uint64_t re::RenderGraphTargetHandle::introspectionSerialize(uint64_t a1, uint64_t a2, void *a3, re::DynamicString *a4)
{
  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v6, *a3);
  re::DynamicString::operator=(a4, (re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return 1;
}

uint64_t re::RenderGraphTargetHandle::introspectionDeserialize(int a1, int a2, int a3, void *a4, char *__str)
{
  unsigned int v5 = __str;
  do
  {
    unsigned int v7 = *v5++;
    uint64_t v6 = v7;
    if (!v7)
    {
      __endptr = 0;
      *a4 = strtoull(__str, &__endptr, 10);
      return 1;
    }
  }
  while ((v6 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v6 + 60) & 0x400) != 0);
  uint64_t v8 = *__str;
  if (*__str)
  {
    char v9 = __str[1];
    if (v9)
    {
      unsigned int v10 = __str + 2;
      do
      {
        uint64_t v8 = 31 * v8 + v9;
        int v11 = *v10++;
        char v9 = v11;
      }
      while (v11);
    }
    v8 &= ~0x8000000000000000;
  }
  *a4 = v8;
  return 1;
}

uint64_t re::RenderGraphTargetHandle::introspectionDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  *a5 = *a4;
  return 1;
}

void *re::introspect_RenderGraphTargetDimensionRoundingMode(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      unsigned int v10 = re::introspectionAllocator(v9);
      int v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)int v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Floor";
      re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::enumAttributes = (uint64_t)v11;
      int v12 = re::introspectionAllocator(v11);
      unsigned int v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)unsigned int v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "Round";
      qword_2687A01A8 = (uint64_t)v13;
      unsigned int v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v15 + 16) = "Ceil";
      qword_2687A01B0 = v15;
    }
  }
  {
    uint64_t v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info, "RenderGraphTargetDimensionRoundingMode", 4, 4, 1, 1);
    *(void *)uint64_t v16 = &unk_26E715E00;
    *((void *)v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized) {
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
    }
    unsigned int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized)
    {
LABEL_9:
      unsigned int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
    }
  }
  re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info, a2);
  v17[0] = 0xE1B9E1AD2F7284E8;
  v17[1] = (uint64_t)"RenderGraphTargetDimensionRoundingMode";
  xmmword_2687A01E0 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
}

uint64_t *re::introspect_RenderGraphTargetHandle(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF946B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF946B0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF946B8, "RenderGraphTargetHandle", 16, 8, 0, 0);
    qword_26AF946B8 = (uint64_t)&unk_26E715E40;
    qword_26AF946F8 = (uint64_t)re::internal::defaultConstruct<re::RenderGraphTargetHandle>;
    qword_26AF94700 = (uint64_t)re::RenderGraphTargetHandle::introspectionSerialize;
    qword_26AF94708 = (uint64_t)re::RenderGraphTargetHandle::introspectionDeserialize;
    qword_26AF94718 = 0;
    unk_26AF94720 = 0;
    qword_26AF94710 = (uint64_t)re::RenderGraphTargetHandle::introspectionDeepCopy;
    dword_26AF946C8 = 11;
    __cxa_guard_release(&qword_26AF946B0);
  }
  if (v2)
  {
    if (_MergedGlobals_377) {
      return &qword_26AF946B8;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    char v3 = _MergedGlobals_377;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    if (v3) {
      return &qword_26AF946B8;
    }
    unsigned int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_377)
    {
LABEL_8:
      unsigned int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &qword_26AF946B8;
    }
  }
  _MergedGlobals_377 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF946B8, a2);
  v9[0] = 0xAF79EE31A5FB40E2;
  v9[1] = "RenderGraphTargetHandle";
  xmmword_26AF946D8 = v10;
  re::StringID::destroyString((re::StringID *)v9);
  if ((v2 & 1) == 0) {
    goto LABEL_8;
  }
  return &qword_26AF946B8;
}

double re::internal::defaultConstruct<re::RenderGraphTargetHandle>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  double result = NAN;
  a3[1] = -1;
  return result;
}

double re::internal::defaultConstructV2<re::RenderGraphTargetHandle>(void *a1)
{
  *a1 = 0;
  double result = NAN;
  a1[1] = -1;
  return result;
}

void textureDescFromTargetDesc(uint64_t a1@<X0>, void *a2@<X8>)
{
  re::mtl::makeDefaultDevice(&v12);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  uint64_t v5 = *(int *)(a1 + 4);
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v9 = 0;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(&v12, &v9, &v10, &v11);
  id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  *a2 = v7;
  if ((objc_msgSend(v7, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v7, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v7, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v7, sel_setPixelFormat_, v5);
  objc_msgSend(v7, sel_setWidth_, *(unsigned int *)(a1 + 12));
  objc_msgSend(v7, sel_setHeight_, *(unsigned int *)(a1 + 16));
  objc_msgSend(v7, sel_setTextureType_, *(int *)(a1 + 8));
  if (*(_DWORD *)(a1 + 20) >= 2u) {
    objc_msgSend(v7, sel_setSampleCount_);
  }
  if (*(_DWORD *)(a1 + 24) >= 2u) {
    objc_msgSend(v7, sel_setArrayLength_);
  }
  if (*(_DWORD *)(a1 + 28) != -1) {
    objc_msgSend(v7, sel_setMipmapLevelCount_);
  }
  objc_msgSend(v7, sel_setUsage_, v4);
  int v8 = *(_DWORD *)(a1 + 68);
  if (v8 == 0xFFFF) {
    int v8 = 0;
  }
  objc_msgSend(v7, sel_setResourceOptions_, v8);
  objc_msgSend(v7, sel_setProtectionOptions_, *(void *)(a1 + 88));
}

void re::RenderGraphCachingErrorCategoryImpl::~RenderGraphCachingErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x237DBCBD0);
}

const char *re::RenderGraphCachingErrorCategoryImpl::name(re::RenderGraphCachingErrorCategoryImpl *this)
{
  return "RERenderGraph caching error";
}

void *re::RenderGraphCachingErrorCategoryImpl::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 2999)
  {
    switch(a1)
    {
      case 3000:
        char v3 = "Used an incompatible buffer feature";
        break;
      case 3001:
        char v3 = "Created a buffer outside of a provide() callback";
        break;
      case 3002:
        char v3 = "Registered an external buffer inside of a provide() callback";
        break;
      case 3003:
        char v3 = "Accessed an input buffer outside of a provide() callback";
        break;
      default:
        if (a1 == 4000)
        {
          char v3 = "Created an unsupported node";
        }
        else if (a1 == 4001)
        {
          char v3 = "Called an unsupported node function";
        }
        else
        {
LABEL_21:
          char v3 = "Unknown RERenderGraph error";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 2000:
        char v3 = "Used an incompatible target feature";
        break;
      case 2001:
        char v3 = "Created a target outside of a provide() callback";
        break;
      case 2002:
        char v3 = "Registered an external texture inside of a provide() callback";
        break;
      case 2003:
        char v3 = "Accessed an input target outside of a provide() callback";
        break;
      default:
        if (a1 == 1000)
        {
          char v3 = "Used an incompatible graph feature";
        }
        else
        {
          if (a1 != 1001) {
            goto LABEL_21;
          }
          char v3 = "Created a graph outside of a provide() callback";
        }
        break;
    }
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

Class re::getVFXRESceneClass(re *this)
{
  Class Class = (Class)qword_26AF94730;
  if (!qword_26AF94730)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      Class Class = objc_getClass("VFXREScene");
      if (!Class)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXREScene", v5, 2u);
        }
      }
      qword_26AF94730 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXSceneClass(re *this)
{
  Class Class = (Class)qword_26AF94738;
  if (!qword_26AF94738)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      Class Class = objc_getClass("VFX.VFXScene");
      if (!Class)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFX.VFXScene", v5, 2u);
        }
      }
      qword_26AF94738 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXREDrawCallClass(re *this)
{
  Class Class = (Class)qword_26AF94740;
  if (!qword_26AF94740)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      Class Class = objc_getClass("VFXREDrawCall");
      if (!Class)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXREDrawCall", v5, 2u);
        }
      }
      qword_26AF94740 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXMemorySerializationClass(re *this)
{
  Class Class = (Class)qword_26AF94748;
  if (!qword_26AF94748)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      Class Class = objc_getClass("VFXMemorySerialization");
      if (!Class)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXMemorySerialization", v5, 2u);
        }
      }
      qword_26AF94748 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXSceneLoadOptionsClass(re *this)
{
  Class Class = (Class)qword_26AF94750;
  if (!qword_26AF94750)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      Class Class = objc_getClass("VFXSceneLoadOptions");
      if (!Class)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXSceneLoadOptions", v5, 2u);
        }
      }
      qword_26AF94750 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

void *re::getVFXREForEachDrawCallFct(re *this)
{
  int v1 = (void *)qword_26AF94758;
  if (!qword_26AF94758)
  {
    if (qword_26AF94778 != -1) {
      dispatch_once(&qword_26AF94778, &__block_literal_global_533);
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if (v2)
    {
      int v1 = dlsym((void *)qword_26AF94760, "VFXREForEachDrawCall");
      if (!v1)
      {
        char v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to find function VFXREForEachDrawCall", v5, 2u);
        }
      }
      qword_26AF94758 = (uint64_t)v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t re::loadVFXAssetsFramework(re *this)
{
  if (qword_26AF94780 != -1) {
    dispatch_once(&qword_26AF94780, &__block_literal_global_537);
  }
  unsigned __int8 v1 = atomic_load(byte_26AF94729);
  return v1 & 1;
}

uint64_t re::BufferTableReference::getBuffer(re::BufferTableReference *this, uint64_t a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2 > a2) {
    return *(void *)(*(void *)this + 16 * a2);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::EncoderState::setCullMode(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v3 = a2;
  uint64_t v4 = result;
  if ((*(_WORD *)result & 1) == 0 || *(unsigned __int8 *)(result + 2) != a2)
  {
    uint64_t result = (*(uint64_t (**)(void, char *, void))(*(void *)(a3 + 8) + 64))(**(void **)(a3 + 8), sel_setCullMode_, a2);
    *(unsigned char *)(v4 + 2) = v3;
    *(_WORD *)v4 |= 1u;
  }
  return result;
}

uint64_t re::EncoderState::setTriangleFillMode(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v3 = a2;
  uint64_t v4 = result;
  if ((*(_WORD *)result & 2) == 0 || *(unsigned __int8 *)(result + 3) != a2)
  {
    uint64_t result = (*(uint64_t (**)(void, char *, void))(*(void *)(a3 + 8) + 168))(**(void **)(a3 + 8), sel_setTriangleFillMode_, a2);
    *(unsigned char *)(v4 + 3) = v3;
    *(_WORD *)v4 |= 2u;
  }
  return result;
}

uint64_t re::EncoderState::setStencilReferenceValues(uint64_t this, uint64_t a2, uint64_t a3, RenderCommandEncoder *a4)
{
  char v4 = a3;
  char v5 = a2;
  uint64_t v6 = this;
  if ((*(_WORD *)this & 4) == 0
    || *(unsigned __int8 *)(this + 4) != a2
    || *(unsigned __int8 *)(this + 5) != a3)
  {
    this = (*((uint64_t (**)(void, char *, uint64_t, uint64_t))a4->var0 + 16))(*(void *)a4->var0, sel_setStencilFrontReferenceValue_backReferenceValue_, a2, a3);
    *(unsigned char *)(v6 + 4) = v5;
    *(unsigned char *)(v6 + 5) = v4;
    *(_WORD *)v6 |= 4u;
  }
  return this;
}

void **re::EncoderState::setDepthStencilState(void **result, void **a2, uint64_t a3)
{
  char v5 = result;
  uint64_t v6 = *a2;
  if ((*(_WORD *)result & 0x80) == 0 || result[3] != v6)
  {
    (*(void (**)(void, char *, void *))(*(void *)(a3 + 8) + 112))(**(void **)(a3 + 8), sel_setDepthStencilState_, v6);
    uint64_t result = NS::SharedPtr<MTL::Texture>::operator=(v5 + 3, a2);
    *(_WORD *)v5 |= 0x80u;
  }
  return result;
}

void **re::EncoderState::setRenderPipelineState(void **result, void **a2, uint64_t a3)
{
  char v5 = result;
  uint64_t v6 = *a2;
  if ((*(_WORD *)result & 0x100) == 0 || result[4] != v6)
  {
    (*(void (**)(void, char *, void *))(*(void *)(a3 + 8) + 56))(**(void **)(a3 + 8), sel_setRenderPipelineState_, v6);
    uint64_t result = NS::SharedPtr<MTL::Texture>::operator=(v5 + 4, a2);
    *(_WORD *)v5 |= 0x100u;
  }
  return result;
}

void ___ZL13VFXLoadBridgev_block_invoke()
{
  if (dlsym((void *)0xFFFFFFFFFFFFFFFELL, "VFXREVersionCheckBridgeVersion"))
  {
    qword_26AF94760 = -2;
  }
  else if (!qword_26AF94760)
  {
    qword_26AF94760 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VFX.framework/VFX", 1);
    if (!qword_26AF94760)
    {
      v0 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v0, OS_LOG_TYPE_ERROR, "[VFX] VFX.framework failed loading", buf, 2u);
      }
    }
  }
  if (qword_26AF94780 != -1) {
    dispatch_once(&qword_26AF94780, &__block_literal_global_537);
  }
  atomic_load(byte_26AF94729);
  if (qword_26AF94760)
  {
    unsigned __int8 v1 = (uint64_t (*)(uint64_t, uint64_t))dlsym((void *)qword_26AF94760, "VFXREVersionCheckBridgeVersion");
    if (v1) {
      unsigned __int8 v1 = (uint64_t (*)(uint64_t, uint64_t))v1(0x2540BE40BLL, 0xFFFFLL);
    }
    atomic_store(v1, (unsigned __int8 *)&_MergedGlobals_378);
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
    if ((v2 & 1) == 0)
    {
      char v3 = *re::graphicsLogObjects((re *)v1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)char v4 = 0;
        _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "[VFX] Version missmatch between RE bridge and VFX framework", v4, 2u);
      }
    }
  }
}

void ___ZL14_loadVFXAssetsv_block_invoke()
{
  uint64_t v0 = -2;
  if (dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__vfx_get_effect_class_comAppleVfxConfetti"))
  {
    qword_26AF94788 = -2;
  }
  else
  {
    uint64_t v0 = qword_26AF94788;
    if (!qword_26AF94788)
    {
      uint64_t v0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VFXAssets.framework/VFXAssets", 1);
      qword_26AF94788 = v0;
      if (!v0)
      {
        unsigned __int8 v1 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)unsigned __int8 v2 = 0;
          _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "[VFX] VFXAssets.framework failed loading", v2, 2u);
        }
        uint64_t v0 = qword_26AF94788;
      }
    }
  }
  atomic_store(v0 != 0, byte_26AF94729);
}

void re::makeMaterialBuilderErr(__CFString *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 8)) {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v3 = a2 + 9;
  }
  re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", a1, v3, a3);
}

uint64_t re::ShaderParameterTableBuilder::addConstant(uint64_t a1, const re::DynamicString *a2, uint64_t a3, char a4)
{
  int v8 = (void *)(a1 + 96);
  for (uint64_t i = *(void *)(a1 + 112); (i & 3) != 0; uint64_t i = *(void *)(a1 + 112))
  {
    char v16 = 0;
    re::DynamicArray<unsigned char>::add(v8, &v16);
  }
  LOWORD(v15) = i;
  BYTE2(v15) = *(void *)(a3 + 8);
  HIBYTE(v15) = a4;
  uint64_t result = re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1 + 176, a2, &v15);
  uint64_t v11 = *(void *)(a3 + 8);
  if (v11)
  {
    id v12 = *(char **)a3;
    do
    {
      char v13 = *v12++;
      char v14 = v13;
      uint64_t result = (uint64_t)re::DynamicArray<unsigned char>::add(v8, &v14);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, const re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 56 * v9;
  return v12 + 48;
}

uint64_t re::ShaderParameterTableBuilder::addOriginalColorConstant(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a2 + 8)) {
    char v4 = *(char **)(a2 + 16);
  }
  else {
    char v4 = (char *)(a2 + 9);
  }
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      char v6 = v4[1];
      if (v6)
      {
        unint64_t v7 = (unsigned __int8 *)(v4 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v13 = v5;
  long long v10 = *(_OWORD *)a3;
  char v11 = *(unsigned char *)(a3 + 16);
  char v12 = a4;
  return re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(a1 + 272, &v13, &v10);
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>(uint64_t a1, re::DynamicString *a2, unsigned __int8 *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<unsigned char>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 56 * v9;
  return v12 + 48;
}

id re::DynamicArray<re::BufferSlice>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::BufferSlice>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (void *)(*((void *)this + 4) + 16 * v4);
  id result = *(id *)a2;
  void *v5 = result;
  v5[1] = *(void *)(a2 + 8);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::TextureParameterTableBuilder::bindTextureToSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1 + 224;
  uint64_t v9 = (unsigned int *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 224, a3);
  if (v9)
  {
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v39, a4);
    uint64_t v10 = v41;
    if (v40) {
      uint64_t v10 = v42;
    }
    if (v10)
    {
      uint64_t v11 = *v10;
      if (v11)
      {
        if (v40) {
          uint64_t v12 = v42 + 1;
        }
        else {
          uint64_t v12 = &v41[1];
        }
        char v13 = *v12;
        if (*v12)
        {
          char v14 = v12 + 1;
          do
          {
            uint64_t v11 = 31 * v11 + v13;
            int v15 = *v14++;
            char v13 = v15;
          }
          while (v15);
        }
        uint64_t v16 = v11 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    BOOL v19 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v8, (uint64_t)&v39);
    unint64_t v20 = re::Hash<re::DynamicString>::operator()((uint64_t)v52, a2);
    unint64_t v21 = v20;
    if (*(void *)(a1 + 272))
    {
      unint64_t v22 = v20 % *(unsigned int *)(a1 + 296);
      uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 280) + 4 * v22);
      if (v23 != 0x7FFFFFFF)
      {
        BOOL v38 = v19;
        uint64_t v24 = *(void *)(a1 + 288);
        while (!re::DynamicString::operator==(v24 + 56 * v23 + 16, a2))
        {
          uint64_t v23 = *(_DWORD *)(v24 + 56 * v23 + 8) & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF)
          {
            BOOL v19 = v38;
            goto LABEL_25;
          }
        }
        *(void *)(v24 + 56 * v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        *(void *)(*(void *)(a1 + 288) + 56 * v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v16;
        BOOL v19 = v38;
LABEL_31:
        ++*(_DWORD *)(a1 + 312);
        if (v19)
        {
LABEL_43:
          if (v39 && (v40 & 1) != 0) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          return v9 != 0;
        }
        unint64_t v29 = *v9;
        LODWORD(v52[0]) = *(void *)(a1 + 152);
        unint64_t v30 = re::Hash<re::DynamicString>::operator()((uint64_t)&v44, (uint64_t)&v39);
        unint64_t v31 = v30;
        if (*(void *)(a1 + 224))
        {
          unint64_t v32 = v30 % *(unsigned int *)(a1 + 248);
          uint64_t v33 = *(unsigned int *)(*(void *)(a1 + 232) + 4 * v32);
          if (v33 != 0x7FFFFFFF)
          {
            uint64_t v34 = *(void *)(a1 + 240);
            while (!re::DynamicString::operator==(v34 + 56 * v33 + 16, (uint64_t)&v39))
            {
              uint64_t v33 = *(_DWORD *)(v34 + 56 * v33 + 8) & 0x7FFFFFFF;
              if (v33 == 0x7FFFFFFF) {
                goto LABEL_39;
              }
            }
            goto LABEL_40;
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
LABEL_39:
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(v8, v32, v31, (re::DynamicString *)&v39, v52);
        ++*(_DWORD *)(a1 + 264);
LABEL_40:
        unint64_t v35 = *(void *)(a1 + 152);
        if (v35 <= v29)
        {
          uint64_t v43 = 0;
          memset(v52, 0, sizeof(v52));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v44 = 136315906;
          uint64_t v45 = "operator[]";
          __int16 v46 = 1024;
          int v47 = 789;
          __int16 v48 = 2048;
          unint64_t v49 = v29;
          __int16 v50 = 2048;
          unint64_t v51 = v35;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(void *)&v52[0] = *(id *)(*(void *)(a1 + 168) + 8 * v29);
        re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 136), (id *)v52);
        if (*(void *)&v52[0]) {

        }
        goto LABEL_43;
      }
    }
    else
    {
      LODWORD(v22) = 0;
    }
LABEL_25:
    uint64_t v25 = *(unsigned int *)(a1 + 308);
    if (v25 == 0x7FFFFFFF)
    {
      uint64_t v25 = *(unsigned int *)(a1 + 304);
      int v26 = v25;
      if (v25 == *(_DWORD *)(a1 + 296))
      {
        re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1 + 272, 2 * *(_DWORD *)(a1 + 300));
        LODWORD(v22) = v21 % *(unsigned int *)(a1 + 296);
        int v26 = *(_DWORD *)(a1 + 304);
      }
      *(_DWORD *)(a1 + 304) = v26 + 1;
      uint64_t v27 = *(void *)(a1 + 288);
      int v28 = *(_DWORD *)(v27 + 56 * v25 + 8);
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 288);
      int v28 = *(_DWORD *)(v27 + 56 * v25 + 8);
      *(_DWORD *)(a1 + 30re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v27 + 56 * v25 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 288) + 56 * v25 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 288) + 56 * v25 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 280) + 4 * v22);
    *(void *)(*(void *)(a1 + 288) + 56 * v25) = v21;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 288) + 56 * v25 + 16), (const re::DynamicString *)a2);
    *(void *)(*(void *)(a1 + 288) + 56 * v25 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v16;
    *(_DWORD *)(*(void *)(a1 + 280) + 4 * v22) = v25;
    ++*(_DWORD *)(a1 + 300);
    goto LABEL_31;
  }
  uint64_t v17 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a2 + 8)) {
      uint64_t v18 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v18 = a2 + 9;
    }
    if (*(unsigned char *)(a3 + 8)) {
      uint64_t v36 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v36 = a3 + 9;
    }
    LODWORD(v52[0]) = 136315394;
    *(void *)((char *)v52 + 4) = v18;
    WORD6(v52[0]) = 2080;
    *(void *)((char *)v52 + 14) = v36;
    _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Attempting to bind texture \"%s\" to non-existent sampler \"%s\", skipping binding.", (uint8_t *)v52, 0x16u);
  }
  return v9 != 0;
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<unsigned int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(v10 + 56 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::MaterialParameterTableBuilder::buildFromParameterBlockArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  float v102 = (re::Allocator *)a1;
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v98 = a3;
  uint64_t v99 = a2;
  if (a3)
  {
    uint64_t v4 = a3;
    a3 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v4;
    uint64_t v16 = a2;
    do
    {
      uint64_t v17 = (void *)*v16++;
      a3 += v17[58];
      v5 += v17[66];
      v6 += v17[74];
      v7 += v17[82];
      v8 += v17[5];
      v9 += v17[26];
      v10 += v17[15];
      v11 += v17[10];
      v12 += v17[20];
      v13 += v17[90];
      v14 += v17[98];
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    unint64_t v12 = 0;
    unint64_t v11 = 0;
    unint64_t v10 = 0;
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    unint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  float32x4_t v100 = (_anonymous_namespace_ *)(a4 + 24);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)(a4 + 24), a1, a3);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)(a4 + 88), (uint64_t)v102, v5);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)(a4 + 552), (uint64_t)v102, v6);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)(a4 + 616), (uint64_t)v102, v7);
  re::ConstantTable::init((re::ConstantTable *)(a4 + 152), v102, v8, v9);
  uint64_t v18 = (_anonymous_namespace_ *)(a4 + 264);
  re::BufferTable::init((re::BufferTable *)(a4 + 264), v102, v10);
  *(void *)(a4 + 752) = v102;
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((void *)(a4 + 752), v11);
  ++*(_DWORD *)(a4 + 776);
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((void *)(a4 + 688), (uint64_t)v102, v11);
  *(void *)(a4 + 856) = v102;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a4 + 856), v12);
  ++*(_DWORD *)(a4 + 880);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init((void *)(a4 + 792), (uint64_t)v102, v12);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init((void *)(a4 + 904), (uint64_t)v102, v13);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((void *)(a4 + 968), (uint64_t)v102, v14);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    goto LABEL_117;
  }
  while (1)
  {
    re::MaterialParameterTable::initPassTechniqueMappings((re::MaterialParameterTable *)a4, v102, 1, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    BOOL v19 = v99;
    if (!v98) {
      break;
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a4 + 200);
    __int16 v97 = (void *)(a4 + 1096);
    float v102 = (re::Allocator *)0x8040201008040201;
    uint64_t v98 = (uint64_t)&v99[v98];
    while (1)
    {
      uint64_t v99 = v19;
      uint64_t v21 = *v19;
      if (*(void *)(*v19 + 464))
      {
        long long v119 = (unint64_t)(v21 + 440);
        unint64_t v22 = *(void *)(v21 + 456);
        if (v22 >= 0x10)
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(void *)(v21 + 440);
          unint64_t v25 = v22 >> 4;
          while (1)
          {
            unsigned __int16 v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v26;
            if (v26 != 0xFFFF) {
              break;
            }
            v23 += 16;
            if (!--v25) {
              goto LABEL_17;
            }
          }
          uint64_t v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
          *(void *)&long long v120 = v27;
          if (v27 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v100, (uint64_t *)(*(void *)(v119 + 8) + 40 * v27), *(void *)(v119 + 8) + 40 * v27 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v27 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_17:
      if (*(void *)(v21 + 528))
      {
        long long v119 = (unint64_t)(v21 + 504);
        unint64_t v28 = *(void *)(v21 + 520);
        if (v28 >= 0x10)
        {
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(v21 + 504);
          unint64_t v31 = v28 >> 4;
          while (1)
          {
            unsigned __int16 v32 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v30 + v29)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v32;
            if (v32 != 0xFFFF) {
              break;
            }
            v29 += 16;
            if (!--v31) {
              goto LABEL_25;
            }
          }
          uint64_t v33 = __clz(__rbit64((unsigned __int16)~v32)) + v29;
          *(void *)&long long v120 = v33;
          if (v33 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 88), (uint64_t *)(*(void *)(v119 + 8) + 40 * v33), *(void *)(v119 + 8) + 40 * v33 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v33 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_25:
      if (*(void *)(v21 + 592))
      {
        long long v119 = (unint64_t)(v21 + 568);
        unint64_t v34 = *(void *)(v21 + 584);
        if (v34 >= 0x10)
        {
          uint64_t v35 = 0;
          uint64_t v36 = *(void *)(v21 + 568);
          unint64_t v37 = v34 >> 4;
          while (1)
          {
            unsigned __int16 v38 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v36 + v35)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v38;
            if (v38 != 0xFFFF) {
              break;
            }
            v35 += 16;
            if (!--v37) {
              goto LABEL_33;
            }
          }
          uint64_t v39 = __clz(__rbit64((unsigned __int16)~v38)) + v35;
          *(void *)&long long v120 = v39;
          if (v39 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 552), (uint64_t *)(*(void *)(v119 + 8) + 40 * v39), *(void *)(v119 + 8) + 40 * v39 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v39 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_33:
      if (*(void *)(v21 + 656))
      {
        long long v119 = (unint64_t)(v21 + 632);
        unint64_t v40 = *(void *)(v21 + 648);
        if (v40 >= 0x10)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(v21 + 632);
          unint64_t v43 = v40 >> 4;
          while (1)
          {
            unsigned __int16 v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + v41)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v44;
            if (v44 != 0xFFFF) {
              break;
            }
            v41 += 16;
            if (!--v43) {
              goto LABEL_41;
            }
          }
          uint64_t v45 = __clz(__rbit64((unsigned __int16)~v44)) + v41;
          *(void *)&long long v120 = v45;
          if (v45 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 616), (uint64_t *)(*(void *)(v119 + 8) + 40 * v45), *(void *)(v119 + 8) + 40 * v45 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v45 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_41:
      size_t v46 = *(void *)(v21 + 40);
      if (v46)
      {
        memcpy(*(void **)(a4 + 192), *(const void **)(v21 + 56), v46);
        long long v119 = (unint64_t)(v21 + 184);
        unint64_t v47 = *(void *)(v21 + 200);
        if (v47 >= 0x10)
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(void *)(v21 + 184);
          unint64_t v50 = v47 >> 4;
          while (1)
          {
            unsigned __int16 v51 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v49 + v48)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v51;
            if (v51 != 0xFFFF) {
              break;
            }
            v48 += 16;
            if (!--v50) {
              goto LABEL_52;
            }
          }
          uint64_t v52 = __clz(__rbit64((unsigned __int16)~v51)) + v48;
          *(void *)&long long v120 = v52;
          if (v52 != -1)
          {
            do
            {
              uint64_t v53 = *(void *)(v119 + 8) + 16 * v52;
              uint64_t v54 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v20, (void *)v53);
              if (v54 == -1)
              {
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(v20, (void *)v53, (_DWORD *)(v53 + 8));
              }
              else
              {
                uint64_t v55 = v54;
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)v20, *(void *)(a4 + 208) + 16 * v54);
                *(_DWORD *)(*(void *)(a4 + 208) + 16 * v55 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v53 + 8);
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)v20, *(void *)(a4 + 208) + 16 * v55);
              }
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v52 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_52:
      if (*(void *)(v21 + 120))
      {
        uint64_t v107 = v21 + 248;
        uint64_t v108 = 0;
        unint64_t v56 = *(void *)(v21 + 264);
        if (v56 >= 0x10)
        {
          uint64_t v57 = 0;
          uint64_t v58 = *(void *)(v21 + 248);
          unint64_t v59 = v56 >> 4;
          while (1)
          {
            unsigned __int16 v60 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v58 + v57)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            uint64_t v108 = (unsigned __int16)~v60;
            if (v60 != 0xFFFF) {
              break;
            }
            v57 += 16;
            if (!--v59) {
              goto LABEL_63;
            }
          }
          uint64_t v61 = __clz(__rbit64((unsigned __int16)~v60)) + v57;
          uint64_t v109 = v61;
          if (v61 != -1)
          {
            while (1)
            {
              uint64_t v62 = *(void *)(v107 + 8) + 16 * v61;
              uint64_t v63 = (unsigned int *)(v62 + 8);
              unsigned int v64 = *(_DWORD *)(v62 + 8);
              LOBYTE(v11re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v64;
              re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v18, (void *)v62, (char *)&v119);
              if (*(_DWORD *)(a4 + 544) <= v64) {
                *(_DWORD *)(a4 + 544) = v64 + 1;
              }
              unint64_t v65 = *v63;
              unint64_t v66 = *(void *)(v21 + 120);
              if (v66 <= v65) {
                break;
              }
              re::BufferTable::setBuffer((uint64_t)v18, v65, *(void *)(v21 + 136) + 16 * v65);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
              uint64_t v61 = v109;
              if (v109 == -1) {
                goto LABEL_63;
              }
            }
            uint64_t v110 = 0;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v119 = 0u;
            unint64_t v74 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v111 = 136315906;
            long long v112 = "operator[]";
            __int16 v113 = 1024;
            int v114 = 789;
            __int16 v115 = 2048;
            unint64_t v116 = v65;
            __int16 v117 = 2048;
            unint64_t v118 = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_115;
          }
        }
      }
LABEL_63:
      if (*(void *)(v21 + 80))
      {
        uint64_t v107 = v21 + 312;
        uint64_t v108 = 0;
        unint64_t v67 = *(void *)(v21 + 328);
        if (v67 >= 0x10)
        {
          uint64_t v68 = 0;
          uint64_t v69 = *(void *)(v21 + 312);
          unint64_t v70 = v67 >> 4;
          while (1)
          {
            unsigned __int16 v71 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v69 + v68)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            uint64_t v108 = (unsigned __int16)~v71;
            if (v71 != 0xFFFF) {
              break;
            }
            v68 += 16;
            if (!--v70) {
              goto LABEL_75;
            }
          }
          uint64_t v72 = __clz(__rbit64((unsigned __int16)~v71)) + v68;
          uint64_t v109 = v72;
          if (v72 != -1)
          {
            while (1)
            {
              uint64_t v73 = *(void *)(v107 + 8) + 16 * v72;
              unint64_t v74 = *(unsigned int *)(v73 + 8);
              unint64_t v66 = *(void *)(v21 + 80);
              if (v66 <= v74) {
                break;
              }
              unint64_t v75 = (const re::TextureHandle *)(*(void *)(v21 + 96) + 16 * v74);
              if (*((void *)v75 + 1) && *(void *)v75)
              {
                uint64_t v106 = *(void *)v73;
                re::TextureHandle::TextureHandle((re::TextureHandle *)v105, v75);
                re::TextureHandleTable::setTexture((void *)(a4 + 680), &v106, v105);
                re::TextureHandle::invalidate((re::TextureHandle *)v105);
                uint64_t v106 = 0;
              }
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
              uint64_t v72 = v109;
              if (v109 == -1) {
                goto LABEL_75;
              }
            }
LABEL_115:
            uint64_t v110 = 0;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v119 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v111 = 136315906;
            long long v112 = "operator[]";
            __int16 v113 = 1024;
            int v114 = 789;
            __int16 v115 = 2048;
            unint64_t v116 = v74;
            __int16 v117 = 2048;
            unint64_t v118 = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_116;
          }
        }
      }
LABEL_75:
      if (*(void *)(v21 + 160))
      {
        uint64_t v107 = v21 + 376;
        uint64_t v108 = 0;
        unint64_t v76 = *(void *)(v21 + 392);
        if (v76 >= 0x10)
        {
          uint64_t v77 = 0;
          uint64_t v78 = *(void *)(v21 + 376);
          unint64_t v79 = v76 >> 4;
          while (1)
          {
            unsigned __int16 v80 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v78 + v77)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            uint64_t v108 = (unsigned __int16)~v80;
            if (v80 != 0xFFFF) {
              break;
            }
            v77 += 16;
            if (!--v79) {
              goto LABEL_86;
            }
          }
          uint64_t v81 = __clz(__rbit64((unsigned __int16)~v80)) + v77;
          uint64_t v109 = v81;
          if (v81 != -1) {
            break;
          }
        }
      }
LABEL_86:
      if (*(void *)(v21 + 720))
      {
        long long v119 = (unint64_t)(v21 + 696);
        unint64_t v83 = *(void *)(v21 + 712);
        if (v83 >= 0x10)
        {
          uint64_t v84 = 0;
          uint64_t v85 = *(void *)(v21 + 696);
          unint64_t v86 = v83 >> 4;
          while (1)
          {
            unsigned __int16 v87 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v85 + v84)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v87;
            if (v87 != 0xFFFF) {
              break;
            }
            v84 += 16;
            if (!--v86) {
              goto LABEL_94;
            }
          }
          uint64_t v88 = __clz(__rbit64((unsigned __int16)~v87)) + v84;
          *(void *)&long long v120 = v88;
          if (v88 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew((_anonymous_namespace_ *)(a4 + 904), (void *)(*(void *)(v119 + 8) + 16 * v88), (uint64_t *)(*(void *)(v119 + 8) + 16 * v88 + 8));
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v88 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_94:
      if (*(void *)(v21 + 784))
      {
        long long v119 = (unint64_t)(v21 + 760);
        unint64_t v89 = *(void *)(v21 + 776);
        if (v89 >= 0x10)
        {
          uint64_t v90 = 0;
          uint64_t v91 = *(void *)(v21 + 760);
          unint64_t v92 = v89 >> 4;
          while (1)
          {
            unsigned __int16 v93 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v91 + v90)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v119 + 1) = (unsigned __int16)~v93;
            if (v93 != 0xFFFF) {
              break;
            }
            v90 += 16;
            if (!--v92) {
              goto LABEL_102;
            }
          }
          uint64_t v94 = __clz(__rbit64((unsigned __int16)~v93)) + v90;
          *(void *)&long long v120 = v94;
          if (v94 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)(a4 + 968), (void *)(*(void *)(v119 + 8) + 16 * v94), (_DWORD *)(*(void *)(v119 + 8) + 16 * v94 + 8));
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              uint64_t v94 = v120;
            }
            while ((void)v120 != -1);
          }
        }
      }
LABEL_102:
      if (*(_DWORD *)(v21 + 916)) {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a4 + 1032, v21 + 888);
      }
      if (*(unsigned char *)(v21 + 936))
      {
        uint64_t v95 = *(void *)(v21 + 937);
        if (!*(unsigned char *)(a4 + 1080)) {
          *(unsigned char *)(a4 + 1080) = 1;
        }
        *(void *)(a4 + 1081) = v95;
      }
      if (*(unsigned char *)(v21 + 948))
      {
        *(void *)((char *)&v119 + 3) = *(void *)(v21 + 952);
        *(_DWORD *)((char *)&v119 + 11) = *(_DWORD *)(v21 + 960);
        if (*(unsigned char *)(a4 + 1092))
        {
          uint64_t v96 = *(void *)(v21 + 952);
          *(_DWORD *)(a4 + 1104) = *(_DWORD *)(v21 + 960);
          *__int16 v97 = v96;
        }
        else
        {
          *(unsigned char *)(a4 + 1092) = 1;
          *__int16 v97 = *(void *)((char *)&v119 + 3);
          *(_DWORD *)(a4 + 1104) = *(_DWORD *)((char *)&v119 + 11);
        }
      }
      BOOL v19 = v99 + 1;
      if (v99 + 1 == (void *)v98) {
        return;
      }
    }
    while (1)
    {
      uint64_t v82 = *(void *)(v107 + 8) + 16 * v81;
      uint64_t v104 = *(void *)v82;
      unint64_t v74 = *(unsigned int *)(v82 + 8);
      unint64_t v66 = *(void *)(v21 + 160);
      if (v66 <= v74) {
        break;
      }
      id v103 = *(id *)(*(void *)(v21 + 176) + 8 * v74);
      re::SamplerTable::setSampler((void *)(a4 + 792), &v104, &v103);
      if (v103)
      {

        id v103 = 0;
      }
      uint64_t v104 = 0;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
      uint64_t v81 = v109;
      if (v109 == -1) {
        goto LABEL_86;
      }
    }
LABEL_116:
    uint64_t v110 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v119 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v111 = 136315906;
    long long v112 = "operator[]";
    __int16 v113 = 1024;
    int v114 = 789;
    __int16 v115 = 2048;
    unint64_t v116 = v74;
    __int16 v117 = 2048;
    unint64_t v118 = v66;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
}

void *re::ConstantTable::init(re::ConstantTable *this, re::Allocator *a2, unint64_t a3, unsigned int a4)
{
  *((void *)this + 1) = a2;
  uint64_t v7 = (char *)this + 8;
  re::DynamicArray<BOOL>::setCapacity((void *)this + 1, a3);
  ++*((_DWORD *)v7 + 6);
  re::DynamicArray<unsigned char>::resizeUninitialized(v7, a3);
  return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init((void *)v7 + 5, (uint64_t)a2, a4);
}

void re::BufferTable::init(re::BufferTable *this, re::Allocator *a2, unint64_t a3)
{
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
  uint64_t v6 = (char *)this + 64;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 8, a3);
  ++*((_DWORD *)this + 22);
  re::DynamicArray<re::RenderGraphNodeDataPointer>::resize((uint64_t)v6, a3);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init((uint64_t)this + 144, (uint64_t)a2, a3);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize((uint64_t)this + 144, a3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(this, (uint64_t)a2, a3);
  *((void *)this + 25) = a2;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)this + 25, a3);
  ++*((_DWORD *)this + 56);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)this + 25, a3);
  *((void *)this + 30) = a2;
  uint64_t v7 = (char *)this + 240;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v7, a3);
  ++*((_DWORD *)v7 + 6);
  re::DynamicArray<unsigned long>::resize((uint64_t)v7, a3);
}

uint64_t re::BufferTable::setBuffer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 280) <= a2) {
    *(_DWORD *)(a1 + 280) = a2 + 1;
  }
  re::BufferTable::setBufferRef((void **)a1, a2, (void **)a3);
  uint64_t v6 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, a2);
  re::BufferTable::setBufferView((re::BufferTable *)a1, a2, *v6, *(void *)(a3 + 8));
  return re::BufferTable::setBufferIndirectResources((re::BufferTable *)a1, a2, 0, 0);
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
  {
    return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, a2, a3);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
  {
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::MaterialParameterTableBuilder::build(re::MaterialParameterTableBuilder *this, re::Allocator *a2, const re::MaterialParameterBlock *a3, re::MaterialParameterTable *a4)
{
  uint64_t v4 = a3;
  uint64_t v6 = this;
  uint64_t v88 = *MEMORY[0x263EF8340];
  *(_WORD *)((char *)a3 + 1121) = 0;
  uint64_t v7 = (const re::MaterialParameterBlock *)((char *)a3 + 24);
  unsigned int v64 = (uint64_t *)((char *)a2 + 440);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)a3 + 3, (uint64_t)this, *((unsigned int *)a2 + 116));
  unint64_t v8 = (const re::MaterialParameterBlock *)((char *)v4 + 88);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)v4 + 11, (uint64_t)v6, *((unsigned int *)a2 + 132));
  uint64_t v9 = (const re::MaterialParameterBlock *)((char *)v4 + 552);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)v4 + 69, (uint64_t)v6, *((unsigned int *)a2 + 148));
  unint64_t v10 = (const re::MaterialParameterBlock *)((char *)v4 + 616);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((void *)v4 + 77, (uint64_t)v6, *((unsigned int *)a2 + 164));
  re::ConstantTable::init((const re::MaterialParameterBlock *)((char *)v4 + 152), v6, *((void *)a2 + 5), *((void *)a2 + 26));
  unint64_t v11 = (const re::MaterialParameterBlock *)((char *)v4 + 264);
  re::BufferTable::init((const re::MaterialParameterBlock *)((char *)v4 + 264), v6, *((void *)a2 + 15));
  unint64_t v12 = *((void *)a2 + 10);
  *((void *)v4 + 94) = v6;
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((void *)v4 + 94, v12);
  ++*((_DWORD *)v4 + 194);
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((void *)v4 + 86, (uint64_t)v6, v12);
  unint64_t v13 = *((void *)a2 + 20);
  *((void *)v4 + 107) = v6;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v4 + 107, v13);
  ++*((_DWORD *)v4 + 220);
  unint64_t v65 = (const re::MaterialParameterBlock *)((char *)v4 + 792);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init((void *)v4 + 99, (uint64_t)v6, v13);
  unint64_t v66 = (const re::MaterialParameterBlock *)((char *)v4 + 904);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init((void *)v4 + 113, (uint64_t)v6, *((void *)a2 + 90));
  unint64_t v67 = (const re::MaterialParameterBlock *)((char *)v4 + 968);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((void *)v4 + 121, (uint64_t)v6, *((void *)a2 + 98));
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    goto LABEL_86;
  }
  while (1)
  {
    re::MaterialParameterTable::initPassTechniqueMappings(v4, v6, 1, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    if (v7 != (_anonymous_namespace_ *)v64 && *((void *)a2 + 58)) {
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v7, v64);
    }
    if (v8 != (re::Allocator *)((char *)a2 + 504) && *((void *)a2 + 66)) {
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v8, (uint64_t *)a2 + 63);
    }
    if (v9 != (re::Allocator *)((char *)a2 + 568) && *((void *)a2 + 74)) {
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v9, (uint64_t *)a2 + 71);
    }
    unint64_t v8 = v65;
    if (v10 != (re::Allocator *)((char *)a2 + 632) && *((void *)a2 + 82)) {
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v10, (uint64_t *)a2 + 79);
    }
    size_t v14 = *((void *)a2 + 5);
    uint64_t v9 = v66;
    unint64_t v10 = v67;
    if (v14)
    {
      memcpy(*((void **)v4 + 24), *((const void **)a2 + 7), v14);
      long long v83 = (unint64_t)a2 + 184;
      unint64_t v15 = *((void *)a2 + 25);
      if (v15 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *((void *)a2 + 23);
        unint64_t v18 = v15 >> 4;
        while (1)
        {
          unsigned __int16 v19 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v17 + v16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          *((void *)&v83 + 1) = (unsigned __int16)~v19;
          if (v19 != 0xFFFF) {
            break;
          }
          v16 += 16;
          if (!--v18) {
            goto LABEL_22;
          }
        }
        uint64_t v20 = __clz(__rbit64((unsigned __int16)~v19)) + v16;
        *(void *)&long long v84 = v20;
        if (v20 != -1)
        {
          do
          {
            uint64_t v21 = *(void *)(v83 + 8) + 16 * v20;
            *(void *)uint64_t v78 = *(void *)v21;
            *(_DWORD *)&v78[8] = *(_DWORD *)(v21 + 8);
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((const re::MaterialParameterBlock *)((char *)v4 + 200), v78, &v78[8]);
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
            uint64_t v20 = v84;
          }
          while ((void)v84 != -1);
        }
      }
    }
LABEL_22:
    uint64_t v6 = (re::Allocator *)&v83;
    if (*((void *)a2 + 15))
    {
      unint64_t v74 = (char *)a2 + 248;
      uint64_t v75 = 0;
      unint64_t v22 = *((void *)a2 + 33);
      if (v22 >= 0x10)
      {
        uint64_t v23 = 0;
        uint64_t v24 = *((void *)a2 + 31);
        unint64_t v25 = v22 >> 4;
        while (1)
        {
          unsigned __int16 v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v75 = (unsigned __int16)~v26;
          if (v26 != 0xFFFF) {
            break;
          }
          v23 += 16;
          if (!--v25) {
            goto LABEL_33;
          }
        }
        uint64_t v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
        uint64_t i = v27;
        if (v27 != -1)
        {
          while (1)
          {
            uint64_t v28 = *((void *)v74 + 1) + 16 * v27;
            uint64_t v72 = *(void *)v28;
            unsigned int v29 = *(_DWORD *)(v28 + 8);
            unsigned int v73 = v29;
            LOBYTE(v83) = v29;
            re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v11, &v72, (char *)&v83);
            if (*((_DWORD *)v4 + 136) <= v29) {
              *((_DWORD *)v4 + 136) = v29 + 1;
            }
            unint64_t v30 = v73;
            unint64_t v31 = *((void *)a2 + 15);
            if (v31 <= v73) {
              break;
            }
            re::BufferTable::setBuffer((uint64_t)v11, v73, *((void *)a2 + 17) + 16 * v73);
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
            uint64_t v27 = i;
            if (i == -1) {
              goto LABEL_33;
            }
          }
          uint64_t v77 = 0;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v83 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v78 = 136315906;
          *(void *)&v78[4] = "operator[]";
          *(_WORD *)&v78[12] = 1024;
          *(_DWORD *)&v78[14] = 797;
          __int16 v79 = 2048;
          unint64_t v80 = v30;
          __int16 v81 = 2048;
          unint64_t v82 = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_84;
        }
      }
    }
LABEL_33:
    if (!*((void *)a2 + 10)) {
      break;
    }
    unint64_t v74 = (char *)a2 + 312;
    uint64_t v75 = 0;
    unint64_t v32 = *((void *)a2 + 41);
    if (v32 < 0x10) {
      break;
    }
    uint64_t v33 = 0;
    unint64_t v30 = (unint64_t)v4 + 680;
    uint64_t v34 = *((void *)a2 + 39);
    unint64_t v35 = v32 >> 4;
    while (1)
    {
      unsigned __int16 v36 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v34 + v33)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      uint64_t v75 = (unsigned __int16)~v36;
      if (v36 != 0xFFFF) {
        break;
      }
      v33 += 16;
      if (!--v35) {
        goto LABEL_45;
      }
    }
    uint64_t v37 = __clz(__rbit64((unsigned __int16)~v36)) + v33;
    uint64_t i = v37;
    if (v37 == -1) {
      break;
    }
    while (1)
    {
      uint64_t v38 = *((void *)v74 + 1) + 16 * v37;
      unint64_t v31 = *(unsigned int *)(v38 + 8);
      unint64_t v11 = (_anonymous_namespace_ *)*((void *)a2 + 10);
      if ((unint64_t)v11 <= v31) {
        break;
      }
      uint64_t v39 = (const re::TextureHandle *)(*((void *)a2 + 12) + 16 * v31);
      if (*((void *)v39 + 1) && *(void *)v39)
      {
        uint64_t v71 = *(void *)v38;
        re::TextureHandle::TextureHandle((re::TextureHandle *)v70, v39);
        re::TextureHandleTable::setTexture((void *)v4 + 85, &v71, v70);
        re::TextureHandle::invalidate((re::TextureHandle *)v70);
        uint64_t v71 = 0;
      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
      uint64_t v37 = i;
      if (i == -1) {
        goto LABEL_45;
      }
    }
LABEL_84:
    uint64_t v72 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136315906;
    *(void *)&v78[4] = "operator[]";
    *(_WORD *)&v78[12] = 1024;
    *(_DWORD *)&v78[14] = 797;
    __int16 v79 = 2048;
    unint64_t v80 = v31;
    __int16 v81 = 2048;
    unint64_t v82 = (unint64_t)v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    uint64_t v72 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    uint64_t v4 = (const re::MaterialParameterBlock *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136315906;
    *(void *)&v78[4] = "operator[]";
    *(_WORD *)&v78[12] = 1024;
    *(_DWORD *)&v78[14] = 797;
    __int16 v79 = 2048;
    unint64_t v80 = v30;
    __int16 v81 = 2048;
    unint64_t v82 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
LABEL_45:
  if (*((void *)a2 + 20))
  {
    unint64_t v74 = (char *)a2 + 376;
    uint64_t v75 = 0;
    unint64_t v40 = *((void *)a2 + 49);
    if (v40 >= 0x10)
    {
      uint64_t v41 = 0;
      uint64_t v42 = *((void *)a2 + 47);
      unint64_t v43 = v40 >> 4;
      while (1)
      {
        unsigned __int16 v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + v41)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        uint64_t v75 = (unsigned __int16)~v44;
        if (v44 != 0xFFFF) {
          break;
        }
        v41 += 16;
        if (!--v43) {
          goto LABEL_56;
        }
      }
      uint64_t v45 = __clz(__rbit64((unsigned __int16)~v44)) + v41;
      for (i = v45; i != -1; uint64_t v45 = i)
      {
        uint64_t v46 = *((void *)v74 + 1) + 16 * v45;
        unint64_t v30 = *(unsigned int *)(v46 + 8);
        uint64_t v69 = *(void *)v46;
        unint64_t v31 = *((void *)a2 + 20);
        if (v31 <= v30) {
          goto LABEL_85;
        }
        id v68 = *(id *)(*((void *)a2 + 22) + 8 * v30);
        re::SamplerTable::setSampler(v65, &v69, &v68);
        if (v68)
        {

          id v68 = 0;
        }
        uint64_t v69 = 0;
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
      }
    }
  }
LABEL_56:
  if (*((void *)a2 + 90))
  {
    *(void *)&long long v83 = (char *)a2 + 696;
    unint64_t v47 = *((void *)a2 + 89);
    if (v47 >= 0x10)
    {
      uint64_t v48 = 0;
      uint64_t v49 = *((void *)a2 + 87);
      unint64_t v50 = v47 >> 4;
      while (1)
      {
        unsigned __int16 v51 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v49 + v48)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        *((void *)&v83 + 1) = (unsigned __int16)~v51;
        if (v51 != 0xFFFF) {
          break;
        }
        v48 += 16;
        if (!--v50) {
          goto LABEL_64;
        }
      }
      uint64_t v52 = __clz(__rbit64((unsigned __int16)~v51)) + v48;
      *(void *)&long long v84 = v52;
      if (v52 != -1)
      {
        do
        {
          uint64_t v53 = (void *)(*(void *)(v83 + 8) + 16 * v52);
          *(void *)uint64_t v78 = *v53;
          *(void *)&v78[8] = v53[1];
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew(v66, v78, (uint64_t *)&v78[8]);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
          uint64_t v52 = v84;
        }
        while ((void)v84 != -1);
      }
    }
  }
LABEL_64:
  if (*((void *)a2 + 98))
  {
    *(void *)&long long v83 = (char *)a2 + 760;
    unint64_t v54 = *((void *)a2 + 97);
    if (v54 >= 0x10)
    {
      uint64_t v55 = 0;
      uint64_t v56 = *((void *)a2 + 95);
      unint64_t v57 = v54 >> 4;
      while (1)
      {
        unsigned __int16 v58 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v56 + v55)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        *((void *)&v83 + 1) = (unsigned __int16)~v58;
        if (v58 != 0xFFFF) {
          break;
        }
        v55 += 16;
        if (!--v57) {
          goto LABEL_72;
        }
      }
      uint64_t v59 = __clz(__rbit64((unsigned __int16)~v58)) + v55;
      *(void *)&long long v84 = v59;
      if (v59 != -1)
      {
        do
        {
          uint64_t v60 = *(void *)(v83 + 8) + 16 * v59;
          *(void *)uint64_t v78 = *(void *)v60;
          *(_DWORD *)&v78[8] = *(_DWORD *)(v60 + 8);
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v67, v78, &v78[8]);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
          uint64_t v59 = v84;
        }
        while ((void)v84 != -1);
      }
    }
  }
LABEL_72:
  if (*((_DWORD *)a2 + 229)) {
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=((uint64_t)v4 + 1032, (uint64_t)a2 + 888);
  }
  if (*((unsigned char *)a2 + 936))
  {
    uint64_t v61 = *(void *)((char *)a2 + 937);
    if (!*((unsigned char *)v4 + 1080)) {
      *((unsigned char *)v4 + 1080) = 1;
    }
    *(void *)((char *)v4 + 1081) = v61;
  }
  if (*((unsigned char *)a2 + 948))
  {
    *(void *)((char *)&v83 + 3) = *((void *)a2 + 119);
    *(_DWORD *)((char *)&v83 + 11) = *((_DWORD *)a2 + 240);
    uint64_t v62 = (void *)((char *)v4 + 1096);
    if (*((unsigned char *)v4 + 1092))
    {
      uint64_t v63 = *((void *)a2 + 119);
      *((_DWORD *)v4 + 276) = *((_DWORD *)a2 + 240);
      *uint64_t v62 = v63;
    }
    else
    {
      *((unsigned char *)v4 + 1092) = 1;
      *uint64_t v62 = *(void *)((char *)&v83 + 3);
      *((_DWORD *)v4 + 276) = *(_DWORD *)((char *)&v83 + 11);
    }
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
  {
    return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, a2, a3);
  }
  return result;
}

void re::ShaderParameterTableBuilder::build(re::ShaderParameterTableBuilder *this, void **a2)
{
  uint64_t v3 = this;
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 22;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *((void *)v3 + 2);
      uint64_t v10 = v9 + 88 * v8;
      unint64_t v11 = *(void *)(v10 + 24);
      if (v11)
      {
        unint64_t v13 = *(unsigned char **)(v9 + 88 * v8 + 32);
        if (!v13)
        {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        LOBYTE(v12) = *v13;
      }
      else
      {
        uint64_t v12 = v11 >> 8;
        unint64_t v13 = (unsigned char *)(v9 + 88 * v8 + 25);
      }
      if ((_BYTE)v12)
      {
        uint64_t v12 = (char)v12;
        char v14 = v13[1];
        if (v14)
        {
          unint64_t v15 = v13 + 2;
          do
          {
            uint64_t v12 = 31 * v12 + v14;
            int v16 = *v15++;
            char v14 = v16;
          }
          while (v16);
        }
        uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v17 = 0;
      }
LABEL_20:
      *(void *)uint64_t v75 = v17;
      LODWORD(v82) = *(_DWORD *)(v10 + 48);
      uint64_t v18 = v9 + 88 * v8;
      *((void *)&v82 + 1) = *(void *)(v18 + 56);
      LOBYTE(v83) = *(unsigned char *)(v18 + 64);
      *((void *)&v83 + 1) = *(void *)(v18 + 72) >> 1;
      this = (re::ShaderParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((_anonymous_namespace_ *)a2, (uint64_t *)v75, (int *)&v82);
      if (*((_DWORD *)v3 + 8) <= (v5 + 1)) {
        int v19 = v5 + 1;
      }
      else {
        int v19 = *((_DWORD *)v3 + 8);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v19 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v20 = v8;
        if ((*(_DWORD *)(*((void *)v3 + 2) + 88 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_27;
        }
      }
      int v20 = v19;
LABEL_27:
      LODWORD(v5) = v20;
    }
    while (v4 != v20);
  }
  uint64_t v21 = *((unsigned int *)v3 + 20);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (int *)(*((void *)v3 + 8) + 8);
    while (1)
    {
      int v24 = *v23;
      v23 += 22;
      if (v24 < 0) {
        break;
      }
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)v3 + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if (v21 != v22)
  {
    uint64_t v25 = v22;
    do
    {
      uint64_t v26 = *((void *)v3 + 8);
      uint64_t v27 = v26 + 88 * v25;
      unint64_t v28 = *(void *)(v27 + 24);
      if (v28)
      {
        unint64_t v30 = *(unsigned char **)(v26 + 88 * v25 + 32);
        if (!v30)
        {
          uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
        LOBYTE(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *v30;
      }
      else
      {
        uint64_t v29 = v28 >> 8;
        unint64_t v30 = (unsigned char *)(v26 + 88 * v25 + 25);
      }
      if ((_BYTE)v29)
      {
        uint64_t v29 = (char)v29;
        char v31 = v30[1];
        if (v31)
        {
          unint64_t v32 = v30 + 2;
          do
          {
            uint64_t v29 = 31 * v29 + v31;
            int v33 = *v32++;
            char v31 = v33;
          }
          while (v33);
        }
        uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v34 = 0;
      }
LABEL_47:
      *(void *)uint64_t v75 = v34;
      LODWORD(v82) = *(_DWORD *)(v27 + 48);
      uint64_t v35 = v26 + 88 * v25;
      *((void *)&v82 + 1) = *(void *)(v35 + 56);
      LOBYTE(v83) = *(unsigned char *)(v35 + 64);
      *((void *)&v83 + 1) = *(void *)(v35 + 72) >> 1;
      this = (re::ShaderParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((_anonymous_namespace_ *)(a2 + 8), (uint64_t *)v75, (int *)&v82);
      if (*((_DWORD *)v3 + 20) <= (v22 + 1)) {
        int v36 = v22 + 1;
      }
      else {
        int v36 = *((_DWORD *)v3 + 20);
      }
      while (1)
      {
        uint64_t v25 = (v22 + 1);
        if (v36 - 1 == v22) {
          break;
        }
        LODWORD(v22) = v22 + 1;
        int v37 = v25;
        if ((*(_DWORD *)(*((void *)v3 + 8) + 88 * v25 + 8) & 0x80000000) != 0) {
          goto LABEL_54;
        }
      }
      int v37 = v36;
LABEL_54:
      LODWORD(v22) = v37;
    }
    while (v21 != v37);
  }
  uint64_t v38 = (_anonymous_namespace_ *)memcpy(a2[21], *((const void **)v3 + 16), *((void *)v3 + 14));
  uint64_t v39 = *((unsigned int *)v3 + 52);
  if (v39)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (int *)(*((void *)v3 + 24) + 8);
    while (1)
    {
      int v42 = *v41;
      v41 += 14;
      if (v42 < 0) {
        break;
      }
      if (v39 == ++v40)
      {
        LODWORD(v40) = *((_DWORD *)v3 + 52);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if (v39 != v40)
  {
    uint64_t v43 = v40;
    do
    {
      uint64_t v44 = *((void *)v3 + 24);
      uint64_t v45 = v44 + 56 * v43;
      unint64_t v46 = *(void *)(v45 + 24);
      if (v46)
      {
        unint64_t v47 = *(unsigned char **)(v44 + 56 * v43 + 32);
        if (!v47)
        {
          uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_74;
        }
        LOBYTE(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *v47;
      }
      else
      {
        unint64_t v47 = (unsigned char *)(v44 + 56 * v43 + 25);
        uint64_t v48 = v46 >> 8;
      }
      if ((_BYTE)v48)
      {
        uint64_t v48 = (char)v48;
        char v49 = v47[1];
        if (v49)
        {
          unint64_t v50 = v47 + 2;
          do
          {
            uint64_t v48 = 31 * v48 + v49;
            int v51 = *v50++;
            char v49 = v51;
          }
          while (v51);
        }
        uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v52 = 0;
      }
LABEL_74:
      *(void *)&long long v82 = v52;
      uint64_t v38 = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)(a2 + 22), &v82, (_DWORD *)(v45 + 48));
      unsigned int v53 = *((_DWORD *)v3 + 52);
      if (v53 <= (int)v40 + 1) {
        unsigned int v53 = v40 + 1;
      }
      while (1)
      {
        uint64_t v43 = (v40 + 1);
        if (v53 - 1 == v40) {
          break;
        }
        LODWORD(v40) = v40 + 1;
        unsigned int v54 = v43;
        if ((*(_DWORD *)(*((void *)v3 + 24) + 56 * v43 + 8) & 0x80000000) != 0) {
          goto LABEL_80;
        }
      }
      unsigned int v54 = v53;
LABEL_80:
      LODWORD(v40) = v54;
    }
    while (v39 != v54);
  }
  uint64_t v55 = *((unsigned int *)v3 + 64);
  if (v55)
  {
    uint64_t v56 = 0;
    unint64_t v57 = (int *)(*((void *)v3 + 30) + 8);
    while (1)
    {
      int v58 = *v57;
      v57 += 14;
      if (v58 < 0) {
        break;
      }
      if (v55 == ++v56)
      {
        LODWORD(v56) = *((_DWORD *)v3 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
  }
  if (v55 != v56)
  {
    uint64_t v59 = v56;
    do
    {
      uint64_t v60 = *((void *)v3 + 30);
      uint64_t v61 = v60 + 56 * v59;
      unint64_t v62 = *(void *)(v61 + 24);
      if (v62)
      {
        uint64_t v63 = *(unsigned char **)(v60 + 56 * v59 + 32);
        if (!v63)
        {
          uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_100;
        }
        LOBYTE(v64) = *v63;
      }
      else
      {
        uint64_t v63 = (unsigned char *)(v60 + 56 * v59 + 25);
        uint64_t v64 = v62 >> 8;
      }
      if ((_BYTE)v64)
      {
        uint64_t v64 = (char)v64;
        char v65 = v63[1];
        if (v65)
        {
          unint64_t v66 = v63 + 2;
          do
          {
            uint64_t v64 = 31 * v64 + v65;
            int v67 = *v66++;
            char v65 = v67;
          }
          while (v67);
        }
        uint64_t v68 = v64 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v68 = 0;
      }
LABEL_100:
      uint64_t v69 = (unsigned int *)(v61 + 48);
      *(void *)&long long v82 = v68;
      unsigned int v70 = *(_DWORD *)(v61 + 48);
      v75[0] = v70;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew((_anonymous_namespace_ *)(a2 + 30), &v82, v75);
      if (*((_DWORD *)a2 + 130) <= v70) {
        *((_DWORD *)a2 + 130) = v70 + 1;
      }
      unint64_t v71 = *v69;
      unint64_t v72 = *((void *)v3 + 19);
      if (v72 <= v71)
      {
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        __int16 v76 = 1024;
        int v77 = 797;
        __int16 v78 = 2048;
        unint64_t v79 = v71;
        __int16 v80 = 2048;
        unint64_t v81 = v72;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::BufferTable::setBuffer((uint64_t)(a2 + 30), v71, *((void *)v3 + 21) + 16 * v71);
      unsigned int v73 = *((_DWORD *)v3 + 64);
      if (v73 <= (int)v56 + 1) {
        unsigned int v73 = v56 + 1;
      }
      while (1)
      {
        uint64_t v59 = (v56 + 1);
        if (v73 - 1 == v56) {
          break;
        }
        LODWORD(v56) = v56 + 1;
        unsigned int v74 = v59;
        if ((*(_DWORD *)(*((void *)v3 + 30) + 56 * v59 + 8) & 0x80000000) != 0) {
          goto LABEL_109;
        }
      }
      unsigned int v74 = v73;
LABEL_109:
      LODWORD(v56) = v74;
    }
    while (v55 != v74);
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(_anonymous_namespace_ *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 40 * v6 + 8;
  }
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, a3);
}

void re::TextureParameterTableBuilder::build(re::TextureParameterTableBuilder *this, re::TextureParameterTable *a2)
{
  uint64_t v3 = this;
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 22;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *((void *)v3 + 2);
      uint64_t v10 = v9 + 88 * v8;
      unint64_t v11 = *(void *)(v10 + 24);
      if (v11)
      {
        unint64_t v13 = *(unsigned char **)(v9 + 88 * v8 + 32);
        if (!v13)
        {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        LOBYTE(v12) = *v13;
      }
      else
      {
        uint64_t v12 = v11 >> 8;
        unint64_t v13 = (unsigned char *)(v9 + 88 * v8 + 25);
      }
      if ((_BYTE)v12)
      {
        uint64_t v12 = (char)v12;
        char v14 = v13[1];
        if (v14)
        {
          unint64_t v15 = v13 + 2;
          do
          {
            uint64_t v12 = 31 * v12 + v14;
            int v16 = *v15++;
            char v14 = v16;
          }
          while (v16);
        }
        uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v17 = 0;
      }
LABEL_20:
      *(void *)uint64_t v106 = v17;
      LODWORD(v113) = *(_DWORD *)(v10 + 48);
      uint64_t v18 = v9 + 88 * v8;
      *((void *)&v113 + 1) = *(void *)(v18 + 56);
      LOBYTE(v114) = *(unsigned char *)(v18 + 64);
      *((void *)&v114 + 1) = *(void *)(v18 + 72) >> 1;
      this = (re::TextureParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(a2, (uint64_t *)v106, (int *)&v113);
      if (*((_DWORD *)v3 + 8) <= (v5 + 1)) {
        int v19 = v5 + 1;
      }
      else {
        int v19 = *((_DWORD *)v3 + 8);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v19 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v20 = v8;
        if ((*(_DWORD *)(*((void *)v3 + 2) + 88 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_27;
        }
      }
      int v20 = v19;
LABEL_27:
      LODWORD(v5) = v20;
    }
    while (v4 != v20);
  }
  uint64_t v21 = *((unsigned int *)v3 + 20);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (int *)(*((void *)v3 + 8) + 8);
    while (1)
    {
      int v24 = *v23;
      v23 += 22;
      if (v24 < 0) {
        break;
      }
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)v3 + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if (v21 != v22)
  {
    uint64_t v25 = v22;
    do
    {
      uint64_t v26 = *((void *)v3 + 8);
      uint64_t v27 = v26 + 88 * v25;
      unint64_t v28 = *(void *)(v27 + 24);
      if (v28)
      {
        unint64_t v30 = *(unsigned char **)(v26 + 88 * v25 + 32);
        if (!v30)
        {
          uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
        LOBYTE(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *v30;
      }
      else
      {
        uint64_t v29 = v28 >> 8;
        unint64_t v30 = (unsigned char *)(v26 + 88 * v25 + 25);
      }
      if ((_BYTE)v29)
      {
        uint64_t v29 = (char)v29;
        char v31 = v30[1];
        if (v31)
        {
          unint64_t v32 = v30 + 2;
          do
          {
            uint64_t v29 = 31 * v29 + v31;
            int v33 = *v32++;
            char v31 = v33;
          }
          while (v33);
        }
        uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v34 = 0;
      }
LABEL_47:
      *(void *)uint64_t v106 = v34;
      LODWORD(v113) = *(_DWORD *)(v27 + 48);
      uint64_t v35 = v26 + 88 * v25;
      *((void *)&v113 + 1) = *(void *)(v35 + 56);
      LOBYTE(v114) = *(unsigned char *)(v35 + 64);
      *((void *)&v114 + 1) = *(void *)(v35 + 72) >> 1;
      this = (re::TextureParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((re::TextureParameterTable *)((char *)a2 + 64), (uint64_t *)v106, (int *)&v113);
      if (*((_DWORD *)v3 + 20) <= (v22 + 1)) {
        int v36 = v22 + 1;
      }
      else {
        int v36 = *((_DWORD *)v3 + 20);
      }
      while (1)
      {
        uint64_t v25 = (v22 + 1);
        if (v36 - 1 == v22) {
          break;
        }
        LODWORD(v22) = v22 + 1;
        int v37 = v25;
        if ((*(_DWORD *)(*((void *)v3 + 8) + 88 * v25 + 8) & 0x80000000) != 0) {
          goto LABEL_54;
        }
      }
      int v37 = v36;
LABEL_54:
      LODWORD(v22) = v37;
    }
    while (v21 != v37);
  }
  unint64_t v38 = *((void *)v3 + 14);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((void *)a2 + 25, v38);
  ++*((_DWORD *)a2 + 56);
  unint64_t v39 = *((unsigned int *)v3 + 52);
  if (v39)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (int *)(*((void *)v3 + 24) + 8);
    while (1)
    {
      int v42 = *v41;
      v41 += 14;
      if (v42 < 0) {
        break;
      }
      if (v39 == ++v40)
      {
        LODWORD(v40) = *((_DWORD *)v3 + 52);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if (v39 != v40)
  {
    uint64_t v43 = v40;
    while (1)
    {
      uint64_t v44 = *((void *)v3 + 24);
      uint64_t v45 = v44 + 56 * v43;
      unint64_t v46 = (*(unsigned char *)(v45 + 24) & 1) != 0 ? *(char **)(v44 + 56 * v43 + 32) : (char *)(v44 + 56 * v43 + 25);
      unint64_t v47 = *(unsigned int *)(v45 + 48);
      unint64_t v48 = *((void *)v3 + 14);
      if (v48 <= v47) {
        break;
      }
      re::TextureHandle::TextureHandle((re::TextureHandle *)v104, (const re::TextureHandle *)(*((void *)v3 + 16) + 16 * v47));
      if (v46)
      {
        uint64_t v49 = *v46;
        if (*v46)
        {
          char v50 = v46[1];
          if (v50)
          {
            int v51 = (unsigned __int8 *)(v46 + 2);
            do
            {
              uint64_t v49 = 31 * v49 + v50;
              int v52 = *v51++;
              char v50 = v52;
            }
            while (v52);
          }
          v49 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(void *)uint64_t v106 = v49;
      re::TextureHandle::TextureHandle((re::TextureHandle *)&v113, (const re::TextureHandle *)v104);
      re::TextureHandleTable::setTexture((void *)a2 + 16, (uint64_t *)v106, (os_unfair_lock_s **)&v113);
      re::TextureHandle::invalidate((re::TextureHandle *)&v113);
      re::TextureHandle::invalidate((re::TextureHandle *)v104);
      if (*((_DWORD *)v3 + 52) <= (v40 + 1)) {
        int v53 = v40 + 1;
      }
      else {
        int v53 = *((_DWORD *)v3 + 52);
      }
      while (1)
      {
        uint64_t v43 = (v40 + 1);
        if (v53 - 1 == v40) {
          break;
        }
        LODWORD(v40) = v40 + 1;
        int v54 = v43;
        if ((*(_DWORD *)(*((void *)v3 + 24) + 56 * v43 + 8) & 0x80000000) != 0) {
          goto LABEL_81;
        }
      }
      int v54 = v53;
LABEL_81:
      LODWORD(v40) = v54;
      if (v39 == v54) {
        goto LABEL_82;
      }
    }
    uint64_t v105 = 0;
    long long v117 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    __int16 v107 = 1024;
    int v108 = 797;
    __int16 v109 = 2048;
    unint64_t v110 = v47;
    __int16 v111 = 2048;
    unint64_t v112 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    uint64_t v105 = 0;
    long long v117 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    __int16 v107 = 1024;
    int v108 = 797;
    __int16 v109 = 2048;
    unint64_t v110 = v39;
    __int16 v111 = 2048;
    unint64_t v112 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_82:
  re::SamplerTable::init((re::TextureParameterTable *)((char *)a2 + 240), *((void *)v3 + 19));
  uint64_t v55 = *((unsigned int *)v3 + 64);
  if (v55)
  {
    uint64_t v56 = 0;
    unint64_t v57 = (int *)(*((void *)v3 + 30) + 8);
    while (1)
    {
      int v58 = *v57;
      v57 += 14;
      if (v58 < 0) {
        break;
      }
      if (v55 == ++v56)
      {
        LODWORD(v56) = *((_DWORD *)v3 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
  }
  if (v55 != v56)
  {
    uint64_t v59 = v56;
    do
    {
      uint64_t v60 = *((void *)v3 + 30);
      uint64_t v61 = v60 + 56 * v59;
      unint64_t v62 = (*(unsigned char *)(v61 + 24) & 1) != 0 ? *(char **)(v60 + 56 * v59 + 32) : (char *)(v60 + 56 * v59 + 25);
      unint64_t v39 = *(unsigned int *)(v61 + 48);
      unint64_t v48 = *((void *)v3 + 19);
      if (v48 <= v39) {
        goto LABEL_167;
      }
      id v63 = *(id *)(*((void *)v3 + 21) + 8 * v39);
      uint64_t v64 = v63;
      if (v62)
      {
        uint64_t v65 = *v62;
        if (*v62)
        {
          char v66 = v62[1];
          if (v66)
          {
            int v67 = (unsigned __int8 *)(v62 + 2);
            do
            {
              uint64_t v65 = 31 * v65 + v66;
              int v68 = *v67++;
              char v66 = v68;
            }
            while (v68);
          }
          v65 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(void *)&long long v113 = v65;
      *(void *)uint64_t v106 = v63;
      re::SamplerTable::setSampler((void *)a2 + 30, &v113, (id *)v106);
      if (*(void *)v106) {

      }
      if (v64) {
      if (*((_DWORD *)v3 + 64) <= (v56 + 1))
      }
        int v69 = v56 + 1;
      else {
        int v69 = *((_DWORD *)v3 + 64);
      }
      while (1)
      {
        uint64_t v59 = (v56 + 1);
        if (v69 - 1 == v56) {
          break;
        }
        LODWORD(v56) = v56 + 1;
        int v70 = v59;
        if ((*(_DWORD *)(*((void *)v3 + 30) + 56 * v59 + 8) & 0x80000000) != 0) {
          goto LABEL_112;
        }
      }
      int v70 = v69;
LABEL_112:
      LODWORD(v56) = v70;
    }
    while (v55 != v70);
  }
  uint64_t v71 = *((unsigned int *)v3 + 76);
  if (v71)
  {
    uint64_t v72 = 0;
    unsigned int v73 = (int *)(*((void *)v3 + 36) + 8);
    while (1)
    {
      int v74 = *v73;
      v73 += 14;
      if (v74 < 0) {
        break;
      }
      if (v71 == ++v72)
      {
        LODWORD(v72) = *((_DWORD *)v3 + 76);
        break;
      }
    }
  }
  else
  {
    LODWORD(v72) = 0;
  }
  if (v71 != v72)
  {
    uint64_t v75 = v72;
    do
    {
      uint64_t v76 = *((void *)v3 + 36);
      uint64_t v77 = v76 + 56 * v75;
      unint64_t v78 = *(void *)(v77 + 24);
      if (v78)
      {
        unint64_t v79 = *(unsigned char **)(v76 + 56 * v75 + 32);
        if (!v79)
        {
          uint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_132;
        }
        LOBYTE(v80) = *v79;
      }
      else
      {
        unint64_t v79 = (unsigned char *)(v76 + 56 * v75 + 25);
        uint64_t v80 = v78 >> 8;
      }
      if ((_BYTE)v80)
      {
        uint64_t v80 = (char)v80;
        char v81 = v79[1];
        if (v81)
        {
          long long v82 = v79 + 2;
          do
          {
            uint64_t v80 = 31 * v80 + v81;
            int v83 = *v82++;
            char v81 = v83;
          }
          while (v83);
        }
        uint64_t v84 = v80 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v84 = 0;
      }
LABEL_132:
      *(void *)&long long v113 = v84;
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew((re::TextureParameterTable *)((char *)a2 + 352), &v113, (uint64_t *)(v77 + 48));
      unsigned int v85 = *((_DWORD *)v3 + 76);
      if (v85 <= (int)v72 + 1) {
        unsigned int v85 = v72 + 1;
      }
      while (1)
      {
        uint64_t v75 = (v72 + 1);
        if (v85 - 1 == v72) {
          break;
        }
        LODWORD(v72) = v72 + 1;
        unsigned int v86 = v75;
        if ((*(_DWORD *)(*((void *)v3 + 36) + 56 * v75 + 8) & 0x80000000) != 0) {
          goto LABEL_138;
        }
      }
      unsigned int v86 = v85;
LABEL_138:
      LODWORD(v72) = v86;
    }
    while (v71 != v86);
  }
  uint64_t v87 = *((unsigned int *)v3 + 88);
  if (v87)
  {
    uint64_t v88 = 0;
    unint64_t v89 = (int *)(*((void *)v3 + 42) + 8);
    while (1)
    {
      int v90 = *v89;
      v89 += 14;
      if (v90 < 0) {
        break;
      }
      if (v87 == ++v88)
      {
        LODWORD(v8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)v3 + 88);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  if (v87 != v88)
  {
    uint64_t v91 = v88;
    unint64_t v92 = (re::TextureParameterTable *)((char *)a2 + 416);
    do
    {
      uint64_t v93 = *((void *)v3 + 42);
      uint64_t v94 = v93 + 56 * v91;
      unint64_t v95 = *(void *)(v94 + 24);
      if (v95)
      {
        uint64_t v96 = *(unsigned char **)(v93 + 56 * v91 + 32);
        if (!v96)
        {
          uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_158;
        }
        LOBYTE(v97) = *v96;
      }
      else
      {
        uint64_t v96 = (unsigned char *)(v93 + 56 * v91 + 25);
        uint64_t v97 = v95 >> 8;
      }
      if ((_BYTE)v97)
      {
        uint64_t v97 = (char)v97;
        char v98 = v96[1];
        if (v98)
        {
          uint64_t v99 = v96 + 2;
          do
          {
            uint64_t v97 = 31 * v97 + v98;
            int v100 = *v99++;
            char v98 = v100;
          }
          while (v100);
        }
        uint64_t v101 = v97 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v101 = 0;
      }
LABEL_158:
      *(void *)&long long v113 = v101;
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v92, &v113, (_DWORD *)(v94 + 48));
      unsigned int v102 = *((_DWORD *)v3 + 88);
      if (v102 <= (int)v88 + 1) {
        unsigned int v102 = v88 + 1;
      }
      while (1)
      {
        uint64_t v91 = (v88 + 1);
        if (v102 - 1 == v88) {
          break;
        }
        LODWORD(v8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v88 + 1;
        unsigned int v103 = v91;
        if ((*(_DWORD *)(*((void *)v3 + 42) + 56 * v91 + 8) & 0x80000000) != 0) {
          goto LABEL_164;
        }
      }
      unsigned int v103 = v102;
LABEL_164:
      LODWORD(v8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v103;
    }
    while (v87 != v103);
  }
}

uint64_t re::makeStage@<X0>(re *a1@<X0>, id *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, id *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v18 = (int)a1;
  uint64_t v258 = *MEMORY[0x263EF8340];
  int v20 = re::globalAllocators(a1);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 336, 8);
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 272) = 0u;
  *(_OWORD *)(v21 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v21 + 304) = 0u;
  *(_OWORD *)(v21 + 320) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_DWORD *)(v21 + 180) = 0x7FFFFFFF;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 272) = 0u;
  *(_OWORD *)(v21 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v21 + 304) = 0u;
  *(_OWORD *)(v21 + 317) = 0u;
  *(_DWORD *)uint64_t v21 = v18;
  *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = makeString(a3);
  float32x4_t v245 = 0;
  v242[1] = 0;
  unint64_t v243 = 0;
  float32x4_t v241 = 0;
  v242[0] = 0;
  int v244 = 0;
  v238[1] = 0;
  unint64_t v239 = 0;
  v237 = 0;
  v238[0] = 0;
  int v240 = 0;
  v234[1] = 0;
  unint64_t v235 = 0;
  simd_float4 v233 = 0;
  v234[0] = 0;
  int v236 = 0;
  v230[1] = 0;
  unint64_t v231 = 0;
  float32x4_t v229 = 0;
  v230[0] = 0;
  int v232 = 0;
  v226[1] = 0;
  unint64_t v227 = 0;
  simd_float4 v225 = 0;
  v226[0] = 0;
  int v228 = 0;
  v222[1] = 0;
  uint64_t v223 = 0;
  float32x2_t v221 = 0;
  v222[0] = 0;
  int v224 = 0;
  unint64_t v218 = 0;
  unint64_t v219 = 0;
  uint64_t v216 = 0;
  uint64_t v217 = 0;
  int v220 = 0;
  v213[1] = 0;
  uint64_t v214 = 0;
  v213[0] = 0;
  if (a8[1]) {
    uint64_t v22 = v222;
  }
  else {
    uint64_t v22 = 0;
  }
  int v215 = 0;
  uint64_t v190 = 0;
  re::collectArguments((_anonymous_namespace_ *)v242, (uint64_t)v238, (uint64_t)v234, (uint64_t)v230, (_anonymous_namespace_ *)v226, (uint64_t)v22, a5, a7, (uint64_t)v211);
  if (v211[0])
  {
    uint64_t v24 = re::globalAllocators(v23)[2];
    re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v21);
    id v25 = v212;
    *(unsigned char *)a9 = 0;
    *(void *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v25;
    goto LABEL_6;
  }
  uint64_t v197 = a9;
  uint64_t v41 = (re *)re::validateArgumentsCount((_anonymous_namespace_ *)v242, (uint64_t)v238, (uint64_t)v230, (uint64_t)v226, a6, (uint64_t)v207);
  if (v207[0])
  {
    uint64_t v42 = re::globalAllocators(v41)[2];
    re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 40))(v42, v21);
    if (v209) {
      uint64_t v43 = *(unsigned char **)&v210[7];
    }
    else {
      uint64_t v43 = v210;
    }
    re::DynamicString::format((re::DynamicString *)"Program \"%s\" failed due to invalid argument numbers. %s", (re::DynamicString *)&v253, a3, v43);
    if (BYTE8(v253)) {
      uint64_t v44 = (char *)v254;
    }
    else {
      uint64_t v44 = (char *)&v253 + 9;
    }
    re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", (const __CFString *)0x32, (uint64_t)v44, v247);
    uint64_t v45 = *(void *)v247;
    *(void *)float32x4_t v247 = 0;
    *(unsigned char *)a9 = 0;
    *(void *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;

    if (void)v253 && (BYTE8(v253)) {
      (*(void (**)(void))(*(void *)v253 + 40))();
    }
    goto LABEL_184;
  }
  uint64_t v200 = a4;
  uint64_t v195 = a7;
  if (*(void *)(v21 + 64))
  {

    if (*(void *)(v21 + 64))
    {
      unint64_t v47 = 0;
      uint64_t v48 = 2;
      while (1)
      {
        unint64_t v49 = v235;
        if (v235 <= v47) {
          break;
        }
        id v50 = objc_msgSend(*a2, sel_newArgumentEncoderWithBufferIndex_, LOWORD(v237[v48]));
        unint64_t v51 = v219;
        if (v219 >= v218)
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(&v217, v219 + 1);
          unint64_t v51 = v219;
        }
        v221[v51] = v50;
        unint64_t v219 = v51 + 1;
        ++v220;
        ++v47;
        v48 += 14;
        if (*(void *)(v21 + 64) <= v47) {
          goto LABEL_65;
        }
      }
      *(void *)&long long v203 = 0;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v253 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v247 = 136315906;
      *(void *)&v247[4] = "operator[]";
      *(_WORD *)&v247[12] = 1024;
      *(_DWORD *)&v247[14] = 789;
      *(_WORD *)&v247[18] = 2048;
      *(void *)&v247[20] = v47;
      *(_WORD *)&v247[28] = 2048;
      *(void *)&v247[30] = v49;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      uint64_t v246 = 0;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v253 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v248 = 136315906;
      *(void *)&v248[4] = "operator[]";
      *(_WORD *)&v248[12] = 1024;
      *(_DWORD *)&v248[14] = 789;
      __int16 v249 = 2048;
      simd_float4 v250 = a8;
      __int16 v251 = 2048;
      simd_float4x4 v252 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_199:
      uint64_t v246 = 0;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v253 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v248 = 136315906;
      *(void *)&v248[4] = "operator[]";
      *(_WORD *)&v248[12] = 1024;
      *(_DWORD *)&v248[14] = 468;
      __int16 v249 = 2048;
      simd_float4 v250 = a8;
      __int16 v251 = 2048;
      simd_float4x4 v252 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      uint64_t v246 = 0;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v253 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v248 = 136315906;
      *(void *)&v248[4] = "operator[]";
      *(_WORD *)&v248[12] = 1024;
      *(_DWORD *)&v248[14] = 468;
      __int16 v249 = 2048;
      simd_float4 v250 = a8;
      __int16 v251 = 2048;
      simd_float4x4 v252 = a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_65:
  memset(v247, 0, 36);
  *(void *)&v247[36] = 0x7FFFFFFFLL;
  uint64_t v52 = v200;
  re::collectLinkedArgumentReflection((_anonymous_namespace_ *)a8, (uint64_t)v222, v200, (uint64_t)v247);
  if (*(_DWORD *)&v247[28])
  {
    *(void *)&long long v203 = objc_msgSend(*a2, sel_device);
    re::forwardLinkedArguments((re::mtl::Device *)&v203, (uint64_t)v247, (uint64_t)v222, (_anonymous_namespace_ *)v238, (_anonymous_namespace_ *)v234, &v217, (uint64_t)v213, (uint64_t)&v253);
    if (v211[0] || (_BYTE)v253)
    {
      if (!v211[0] || (_BYTE)v253)
      {
        if (v211[0] || !(_BYTE)v253)
        {
          int v54 = (void *)*((void *)&v253 + 1);
          *((void *)&v253 + 1) = 0;
          id v55 = v212;
          id v212 = v54;
        }
        else
        {
          v211[0] = 1;
          int v53 = (void *)*((void *)&v253 + 1);
          *((void *)&v253 + 1) = 0;
          id v212 = v53;
        }
      }
      else
      {

        v211[0] = 0;
      }
      if ((_BYTE)v253) {
    }
      }
    if (v211[0])
    {
      uint64_t v57 = re::globalAllocators(v56)[2];
      re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 40))(v57, v21);
      id v58 = v212;
      *(unsigned char *)a9 = 0;
      *(void *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v58;
      goto LABEL_183;
    }
  }
  int v205 = 0;
  long long v203 = 0u;
  long long v204 = 0u;
  uint64_t v206 = 0x7FFFFFFFLL;
  *(void *)&long long v253 = objc_msgSend(*a2, sel_device, v190);
  BOOL v59 = re::mtl::Device::needsArgumentBufferTextureEmulation((re::mtl::Device *)&v253);

  if (!v59 || !v214)
  {
LABEL_98:
    *(void *)(v21 + 16) = v52;
    unint64_t v71 = v243;
    unint64_t v73 = v239;
    unint64_t v75 = v235;
    unint64_t v77 = v235;
    unint64_t v78 = v231;
    unint64_t v81 = v227;
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v21 + 144, (uint64_t)&v203);
    if (v243)
    {
      int v83 = v245;
      uint64_t v84 = (re::StringID *)((char *)v245 + 24 * v243);
      unsigned int v85 = *(unint64_t **)(v21 + 248);
      do
      {
        uint64_t v86 = *(void *)v83;
        *unsigned int v85 = *v85 & 0xFFFFFFFFFFFFFFFELL | *(void *)v83 & 1;
        *unsigned int v85 = *(void *)v83 & 0xFFFFFFFFFFFFFFFELL | v86 & 1;
        v85[1] = *((void *)v83 + 1);
        *(void *)int v83 = 0;
        *((void *)v83 + 1) = "";
        v85[2] = *((void *)v83 + 2);
        re::StringID::destroyString(v83);
        int v83 = (re::StringID *)((char *)v83 + 24);
        v85 += 3;
      }
      while (v83 != v84);
    }
    if (v239)
    {
      uint64_t v87 = v241;
      uint64_t v88 = &v241[14 * v239];
      uint64_t v89 = *(void *)(v21 + 40);
      do
      {
        uint64_t v90 = *v87;
        *(void *)uint64_t v89 = *(void *)v89 & 0xFFFFFFFFFFFFFFFELL | *v87 & 1;
        *(void *)uint64_t v89 = *v87 & 0xFFFFFFFFFFFFFFFELL | v90 & 1;
        *(void *)(v89 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v87[1];
        *uint64_t v87 = 0;
        v87[1] = (uint64_t)"";
        *(_WORD *)(v89 + 16) = *((_WORD *)v87 + 8);
        LODWORD(v90) = *((_DWORD *)v87 + 8);
        *(void *)(v89 + 24) = v87[3];
        *(_DWORD *)(v89 + 32) = v90;
        LOBYTE(v90) = v87[5];
        *(void *)(v89 + 40) = *(void *)(v89 + 40) & 0xFFFFFFFFFFFFFFFELL | v87[5] & 1;
        *(void *)(v89 + 40) = v87[5] & 0xFFFFFFFFFFFFFFFELL | v90 & 1;
        *(void *)(v89 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v87[6];
        v87[6] = (uint64_t)"";
        v87[5] = 0;
        LODWORD(v90) = *((_DWORD *)v87 + 14);
        *(_WORD *)(v89 + 60) = *((_WORD *)v87 + 30);
        *(_DWORD *)(v89 + 56) = v90;
        *(void *)(v89 + 72) = 0;
        *(void *)(v89 + 80) = 0;
        *(void *)(v89 + 64) = 0;
        *(void *)(v89 + 64) = v87[8];
        v87[8] = 0;
        *(void *)(v89 + 72) = v87[9];
        v87[9] = 0;
        uint64_t v91 = *(void *)(v89 + 80);
        *(void *)(v89 + 80) = v87[10];
        v87[10] = v91;
        uint64_t v92 = v87[11];
        *(void *)(v89 + 94) = *(uint64_t *)((char *)v87 + 94);
        *(void *)(v89 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v92;
        *(unsigned char *)(v89 + 104) = *((unsigned char *)v87 + 104);
        re::FixedArray<re::MetalTypeInfo>::deinit(v87 + 8);
        re::StringID::destroyString((re::StringID *)(v87 + 5));
        re::StringID::destroyString((re::StringID *)v87);
        v87 += 14;
        v89 += 112;
      }
      while (v87 != v88);
    }
    if (v235)
    {
      uint64_t v93 = v237;
      uint64_t v94 = &v237[14 * v235];
      uint64_t v95 = *(void *)(v21 + 72);
      do
      {
        uint64_t v96 = *v93;
        *(void *)uint64_t v95 = *(void *)v95 & 0xFFFFFFFFFFFFFFFELL | *v93 & 1;
        *(void *)uint64_t v95 = *v93 & 0xFFFFFFFFFFFFFFFELL | v96 & 1;
        *(void *)(v95 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v93[1];
        *uint64_t v93 = 0;
        v93[1] = (uint64_t)"";
        *(_WORD *)(v95 + 16) = *((_WORD *)v93 + 8);
        LODWORD(v96) = *((_DWORD *)v93 + 8);
        *(void *)(v95 + 24) = v93[3];
        *(_DWORD *)(v95 + 32) = v96;
        LOBYTE(v96) = v93[5];
        *(void *)(v95 + 40) = *(void *)(v95 + 40) & 0xFFFFFFFFFFFFFFFELL | v93[5] & 1;
        *(void *)(v95 + 40) = v93[5] & 0xFFFFFFFFFFFFFFFELL | v96 & 1;
        *(void *)(v95 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v93[6];
        v93[6] = (uint64_t)"";
        v93[5] = 0;
        LODWORD(v96) = *((_DWORD *)v93 + 14);
        *(_WORD *)(v95 + 60) = *((_WORD *)v93 + 30);
        *(_DWORD *)(v95 + 56) = v96;
        *(void *)(v95 + 72) = 0;
        *(void *)(v95 + 80) = 0;
        *(void *)(v95 + 64) = 0;
        *(void *)(v95 + 64) = v93[8];
        v93[8] = 0;
        *(void *)(v95 + 72) = v93[9];
        v93[9] = 0;
        uint64_t v97 = *(void *)(v95 + 80);
        *(void *)(v95 + 80) = v93[10];
        v93[10] = v97;
        uint64_t v98 = v93[11];
        *(void *)(v95 + 94) = *(uint64_t *)((char *)v93 + 94);
        *(void *)(v95 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v98;
        *(unsigned char *)(v95 + 104) = *((unsigned char *)v93 + 104);
        re::FixedArray<re::MetalTypeInfo>::deinit(v93 + 8);
        re::StringID::destroyString((re::StringID *)(v93 + 5));
        re::StringID::destroyString((re::StringID *)v93);
        v93 += 14;
        v95 += 112;
      }
      while (v93 != v94);
    }
    if (v231)
    {
      uint64_t v99 = v233;
      int v100 = (re::StringID *)((char *)v233 + 32 * v231);
      uint64_t v101 = *(void *)(v21 + 128);
      do
      {
        uint64_t v102 = *(void *)v99;
        *(void *)uint64_t v101 = *(void *)v101 & 0xFFFFFFFFFFFFFFFELL | *(void *)v99 & 1;
        *(void *)uint64_t v101 = *(void *)v99 & 0xFFFFFFFFFFFFFFFELL | v102 & 1;
        *(void *)(v101 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)v99 + 1);
        *(void *)uint64_t v99 = 0;
        *((void *)v99 + 1) = "";
        *(_OWORD *)(v101 + 16) = *((_OWORD *)v99 + 1);
        re::StringID::destroyString(v99);
        uint64_t v99 = (re::StringID *)((char *)v99 + 32);
        v101 += 32;
      }
      while (v99 != v100);
    }
    if (v227)
    {
      unsigned int v103 = v229;
      uint64_t v104 = (re::StringID *)((char *)v229 + 24 * v227);
      uint64_t v105 = *(void *)(v21 + 216);
      do
      {
        uint64_t v106 = *(void *)v103;
        *(void *)uint64_t v105 = *(void *)v105 & 0xFFFFFFFFFFFFFFFELL | *(void *)v103 & 1;
        *(void *)uint64_t v105 = *(void *)v103 & 0xFFFFFFFFFFFFFFFELL | v106 & 1;
        *(void *)(v105 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)v103 + 1);
        *(void *)unsigned int v103 = 0;
        *((void *)v103 + 1) = "";
        LOWORD(v106) = *((_WORD *)v103 + 8);
        *(unsigned char *)(v105 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((unsigned char *)v103 + 18);
        *(_WORD *)(v105 + 16) = v106;
        re::StringID::destroyString(v103);
        unsigned int v103 = (re::StringID *)((char *)v103 + 24);
        v105 += 24;
      }
      while (v103 != v104);
    }
    if (v219)
    {
      __int16 v107 = v221;
      int v108 = *(void **)(v21 + 96);
      uint64_t v109 = 8 * v219;
      do
      {
        *v108++ = *v107;
        *v107++ = 0;
        v109 -= 8;
      }
      while (v109);
    }
    long long v201 = 0u;
    long long v202 = 0u;
    uint64_t v110 = *(void *)(v21 + 240);
    if (v110)
    {
      unint64_t v111 = 0;
      unint64_t v112 = (unsigned __int16 *)(*(void *)(v21 + 248) + 16);
      uint64_t v113 = 24 * v110;
      do
      {
        unint64_t v114 = *v112;
        uint64_t v115 = 1 << v114;
        unsigned int v116 = re::Bitset<256>::toWordIndex(v114, v82);
        *((void *)&v201 + v116) |= v115;
        unint64_t v117 = *((void *)v112 - 2);
        unsigned int v118 = *v112;
        v112 += 12;
        unint64_t v119 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((v117 >> 31) ^ (v117 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                        * ((v117 >> 31) ^ (v117 >> 1))) >> 27));
        unint64_t v120 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v118) ^ ((0xBF58476D1CE4E5B9 * v118) >> 27));
        v111 ^= (v111 << 6)
              - 0x61C8864680B583E9
              + (v111 >> 2)
              + (((v120 ^ (v120 >> 31))
                - 0x61C8864680B583E9
                + ((v119 ^ (v119 >> 31)) << 6)
                + ((v119 ^ (v119 >> 31)) >> 2)) ^ v119 ^ (v119 >> 31));
        v113 -= 24;
      }
      while (v113);
    }
    else
    {
      unint64_t v111 = 0;
    }
    uint64_t v121 = *(void *)(v21 + 120);
    if (v121)
    {
      unint64_t v122 = 0;
      unsigned __int16 v123 = 0;
      uint64_t v124 = (unsigned __int16 *)(*(void *)(v21 + 128) + 16);
      uint64_t v125 = 32 * v121;
      do
      {
        uint64_t v126 = *v124;
        if (v123 <= v126) {
          unsigned __int16 v123 = *v124;
        }
        unint64_t v127 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((*((void *)v124 - 2) >> 31) ^ (*((void *)v124 - 2) >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((*((void *)v124 - 2) >> 31) ^ (*((void *)v124 - 2) >> 1))) >> 27));
        unint64_t v128 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v126) ^ ((0xBF58476D1CE4E5B9 * v126) >> 27));
        v122 ^= (v122 << 6)
              - 0x61C8864680B583E9
              + (v122 >> 2)
              + (((v128 ^ (v128 >> 31))
                - 0x61C8864680B583E9
                + ((v127 ^ (v127 >> 31)) << 6)
                + ((v127 ^ (v127 >> 31)) >> 2)) ^ v127 ^ (v127 >> 31));
        v124 += 16;
        v125 -= 32;
      }
      while (v125);
    }
    else
    {
      unsigned __int16 v123 = 0;
      unint64_t v122 = 0;
    }
    uint64_t v129 = *(unsigned int *)(v21 + 176);
    if (v129)
    {
      uint64_t v130 = 0;
      int v131 = *(int **)(v21 + 160);
      while (1)
      {
        int v132 = *v131;
        v131 += 10;
        if (v132 < 0) {
          break;
        }
        if (v129 == ++v130)
        {
          LODWORD(v130) = *(_DWORD *)(v21 + 176);
          break;
        }
      }
    }
    else
    {
      LODWORD(v130) = 0;
    }
    if (v129 == v130)
    {
      unint64_t v133 = 0;
    }
    else
    {
      unint64_t v133 = 0;
      uint64_t v134 = v130;
      uint64_t v135 = *(void *)(v21 + 160);
      do
      {
        v133 ^= (v133 << 6)
              - 0x61C8864680B583E9
              + (v133 >> 2)
              + (((*(void *)(v135 + 40 * v134 + 8) >> 3)
                - 0x61C8864680B583E9
                + (*(void *)(v135 + 40 * v134 + 24) >> 1)
                + (*(void *)(v135 + 40 * v134 + 8) >> 1 << 6)) ^ (*(void *)(v135 + 40 * v134 + 8) >> 1));
        if (v129 <= (int)v130 + 1) {
          int v136 = v130 + 1;
        }
        else {
          int v136 = *(_DWORD *)(v21 + 176);
        }
        int v137 = v130;
        while (1)
        {
          uint64_t v134 = (v137 + 1);
          if (v136 - 1 == v137) {
            break;
          }
          ++v137;
          LODWORD(v130) = v134;
          if ((*(_DWORD *)(v135 + 40 * v134) & 0x80000000) != 0) {
            goto LABEL_145;
          }
        }
        LODWORD(v130) = v136;
LABEL_145:
        ;
      }
      while (v129 != v130);
    }
    unint64_t v192 = v133;
    unsigned __int16 v193 = v123;
    unint64_t v194 = v111;
    uint64_t v138 = *(void *)(v21 + 208);
    if (v138)
    {
      unint64_t v139 = 0;
      simd_float4 v140 = (unsigned __int16 *)(*(void *)(v21 + 216) + 16);
      uint64_t v141 = 24 * v138;
      do
      {
        unint64_t v142 = *v140;
        uint64_t v143 = 1 << v142;
        unsigned int v144 = re::Bitset<256>::toWordIndex(v142, v82);
        *((void *)&v201 + v144) |= v143;
        unint64_t v145 = *((void *)v140 - 2);
        unsigned int v146 = *v140;
        v140 += 12;
        unint64_t v147 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((v145 >> 31) ^ (v145 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                        * ((v145 >> 31) ^ (v145 >> 1))) >> 27));
        unint64_t v148 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v146) ^ ((0xBF58476D1CE4E5B9 * v146) >> 27));
        v139 ^= (v139 << 6)
              - 0x61C8864680B583E9
              + (v139 >> 2)
              + (((v148 ^ (v148 >> 31))
                - 0x61C8864680B583E9
                + ((v147 ^ (v147 >> 31)) << 6)
                + ((v147 ^ (v147 >> 31)) >> 2)) ^ v147 ^ (v147 >> 31));
        v141 -= 24;
      }
      while (v141);
    }
    else
    {
      unint64_t v139 = 0;
    }
    uint64_t v149 = *(void *)(v195 + 16);
    if (v149)
    {
      float32x4_t v150 = *(id **)(v195 + 32);
      uint64_t v151 = 8 * v149;
      while (1)
      {
        id v152 = *v150;
        if (objc_msgSend(*v150, sel_type) == (id)3
          && (unint64_t)objc_msgSend(v152, sel_arrayLength) >= 2
          && !strcmp("dynamicSamplers", (const char *)objc_msgSend(objc_msgSend(v152, sel_name), sel_UTF8String)))
        {
          break;
        }
        ++v150;
        v151 -= 8;
        if (!v151) {
          goto LABEL_157;
        }
      }
      unsigned __int8 v196 = objc_msgSend(v152, sel_arrayLength);
      unsigned __int16 v191 = (unsigned __int16)objc_msgSend(v152, sel_index);
    }
    else
    {
LABEL_157:
      unsigned __int8 v196 = 0;
      unsigned __int16 v191 = 0;
    }
    uint64_t v153 = *(void *)(v21 + 32);
    if (v153)
    {
      unint64_t v154 = 0;
      float v155 = *(unsigned __int16 **)(v21 + 40);
      uint64_t v156 = 112 * v153;
      do
      {
        unint64_t v157 = v155[8];
        uint64_t v158 = 1 << v157;
        unsigned int v159 = re::Bitset<256>::toWordIndex(v157, v82);
        *((void *)&v201 + v159) |= v158;
        v154 ^= (v154 << 6)
              - 0x61C8864680B583E9
              + (v154 >> 2)
              + re::TypedArgument::resolutionHash((re::TypedArgument *)v155);
        v155 += 56;
        v156 -= 112;
      }
      while (v156);
    }
    else
    {
      unint64_t v154 = 0;
    }
    uint64_t v160 = *(void *)(v21 + 64);
    if (v160)
    {
      unint64_t v161 = 0;
      uint32x4_t v162 = *(unsigned __int16 **)(v21 + 72);
      uint64_t v163 = 112 * v160;
      do
      {
        unint64_t v164 = v162[8];
        uint64_t v165 = 1 << v164;
        unsigned int v166 = re::Bitset<256>::toWordIndex(v164, v82);
        *((void *)&v201 + v166) |= v165;
        v161 ^= (v161 << 6)
              - 0x61C8864680B583E9
              + (v161 >> 2)
              + re::TypedArgument::resolutionHash((re::TypedArgument *)v162);
        v162 += 56;
        v163 -= 112;
      }
      while (v163);
    }
    else
    {
      unint64_t v161 = 0;
    }
    uint32x4_t v167 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)&v201, 32, 0, (unint64_t *)&v253);
    unint64_t v168 = (*((void *)&v253 + 1) - 0x61C8864680B583E9 + ((void)v253 << 6) + ((unint64_t)v253 >> 2)) ^ v253;
    uint64_t v169 = a11;
    if (*(void *)(a11 + 16))
    {
      unint64_t v170 = *(void *)(a11 + 16);
      unint64_t v199 = v170;
      if (v170)
      {
        a8 = 0;
        uint64_t v171 = 8;
        do
        {
          a2 = *(id **)(v169 + 16);
          if (a2 <= a8) {
            goto LABEL_198;
          }
          a2 = *(id **)(v21 + 272);
          if (a2 <= a8) {
            goto LABEL_199;
          }
          uint64_t v172 = *(void *)(v169 + 32) + v171;
          uint64_t v173 = *(void *)(v21 + 280) + v171;
          uint64_t v174 = *(void *)(v172 - 8);
          uint64_t v175 = *(void *)v172;
          *(void *)(v172 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          *(void *)uint64_t v172 = "";
          unint64_t v176 = v174 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v173 - 8) & 1;
          uint64_t v177 = *(void *)v173;
          *(void *)uint64_t v173 = v175;
          *(void *)&long long v253 = v176;
          *((void *)&v253 + 1) = v177;
          *(void *)(v173 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v174;
          re::StringID::destroyString((re::StringID *)&v253);
          *(_DWORD *)(v173 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v172 + 8);
          uint64_t v169 = a11;
          a8 = (id *)((char *)a8 + 1);
          v171 += 24;
        }
        while ((id *)v199 != a8);
        uint64_t v178 = 0;
        a8 = *(id **)(v21 + 272);
        while ((unint64_t)a8 > v199 - 1)
        {
          uint64_t v179 = *(void *)(v21 + 280) + v178;
          unint64_t v180 = 0xBF58476D1CE4E5B9 * ((*(void *)v179 >> 31) ^ (*(void *)v179 >> 1));
          unint64_t v181 = (0x94D049BB133111EBLL * (v180 ^ (v180 >> 27))) ^ ((0x94D049BB133111EBLL * (v180 ^ (v180 >> 27))) >> 31);
          unint64_t v182 = 0xBF58476D1CE4E5B9
               * ((*(unsigned __int16 *)(v179 + 18) | ((unint64_t)*(unsigned __int16 *)(v179 + 16) << 32)) ^ (4 * *(unsigned __int16 *)(v179 + 16)));
          v168 ^= (v168 << 6)
                - 0x61C8864680B583E9
                + (v168 >> 2)
                + (((v181 << 6)
                  - 0x61C8864680B583E9
                  + (v181 >> 2)
                  + ((0x94D049BB133111EBLL * (v182 ^ (v182 >> 27))) ^ ((0x94D049BB133111EBLL * (v182 ^ (v182 >> 27))) >> 31))) ^ v181);
          v178 += 24;
          if (24 * v199 == v178) {
            goto LABEL_177;
          }
        }
        goto LABEL_200;
      }
LABEL_177:
      uint64_t v183 = *(void *)(v169 + 16);
      *(void *)(v169 + 16) = 0;
      if (v183)
      {
        float32x4_t v184 = *(re::StringID **)(v169 + 32);
        uint64_t v185 = 24 * v183;
        do
        {
          re::StringID::destroyString(v184);
          float32x4_t v184 = (re::StringID *)((char *)v184 + 24);
          v185 -= 24;
        }
        while (v185);
      }
      ++*(_DWORD *)(v169 + 24);
    }
    long long v186 = v202;
    *(_OWORD *)(v21 + 296) = v201;
    *(_OWORD *)(v21 + 312) = v186;
    *(_WORD *)(v21 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v193;
    *(_WORD *)(v21 + 330) = v191;
    *(unsigned char *)(v21 + 332) = v196;
    *(void *)(v21 + 256) = v194;
    *(void *)(v21 + 136) = v122;
    *(void *)(v21 + 192) = v192;
    *(void *)(v21 + 224) = v139;
    *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v154;
    *(void *)(v21 + 104) = v161;
    *(void *)(v21 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v168;
    *(unsigned char *)uint64_t v197 = 1;
    *(void *)(v197 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v21;
    goto LABEL_182;
  }
  uint64_t v61 = 0;
  uint64_t v62 = v216;
  uint64_t v198 = v216 + 80 * v214;
  while (1)
  {
    if (*(_DWORD *)(v62 + 64) != 2)
    {
      float32x4_t v187 = "Attempting to load a shader graph with non-2D textures, which is not supported on devices with tier 1 argum"
             "ent buffer support.";
      goto LABEL_190;
    }
    if (v61 == 16) {
      break;
    }
    re::DynamicString::format((re::DynamicString *)"textureCustomArray[%d]", (re::DynamicString *)&v253, v61);
    re::StringID::StringID((re::StringID *)v248, (const re::DynamicString *)&v253);
    if (void)v253 && (BYTE8(v253)) {
      (*(void (**)(void))(*(void *)v253 + 40))();
    }
    unint64_t v63 = *(void *)v248;
    unint64_t v64 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((v63 >> 31) ^ (v63 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v63 >> 31) ^ (v63 >> 1))) >> 27));
    unint64_t v65 = v64 ^ (v64 >> 31);
    if ((void)v203)
    {
      unint64_t v66 = v65 % DWORD2(v204);
      uint64_t v67 = *(unsigned int *)(*((void *)&v203 + 1) + 4 * v66);
      if (v67 != 0x7FFFFFFF)
      {
        uint64_t v68 = v204;
        int v69 = *(const char **)&v248[8];
        do
        {
          if ((*(void *)(v68 + 40 * v67 + 8) ^ v63) <= 1)
          {
            int v70 = *(const char **)(v68 + 40 * v67 + 16);
            if (v70 == v69 || !strcmp(v70, v69)) {
              goto LABEL_97;
            }
          }
          uint64_t v67 = *(_DWORD *)(v68 + 40 * v67) & 0x7FFFFFFF;
        }
        while (v67 != 0x7FFFFFFF);
      }
    }
    else
    {
      LODWORD(v66) = 0;
    }
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy((uint64_t)&v203, v66, v65, (StringID *)v248, (const StringID *)(v62 + 16));
    ++HIDWORD(v206);
LABEL_97:
    uint64_t v61 = (v61 + 1);
    re::StringID::destroyString((re::StringID *)v248);
    v62 += 80;
    uint64_t v52 = v200;
    if (v62 == v198) {
      goto LABEL_98;
    }
  }
  float32x4_t v187 = "Attempting to load a shader graph with more than 16 textures, which is not supported on devices with tier 1 arg"
         "ument buffer support.";
LABEL_190:
  if (BYTE8(v253)) {
    float32x4_t v188 = (char *)v254;
  }
  else {
    float32x4_t v188 = (char *)&v253 + 9;
  }
  re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", (const __CFString *)0x5A, (uint64_t)v188, v248);
  uint64_t v189 = *(void *)v248;
  *(void *)v248 = 0;
  *(unsigned char *)uint64_t v197 = 0;
  *(void *)(v197 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v189;

  if (void)v253 && (BYTE8(v253)) {
    (*(void (**)(void))(*(void *)v253 + 40))();
  }
LABEL_182:
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v203);
LABEL_183:
  v46.n128_f64[0] = re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v247);
LABEL_184:
  if (v207[0] && v208 && (v209 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v208 + 40))(v46);
  }
LABEL_6:
  if (v211[0]) {

  }
  re::DynamicArray<re::MetalTypeInfo>::deinit((uint64_t)v213);
  uint64_t v26 = v217;
  if (v217)
  {
    uint64_t v27 = (id *)v221;
    if (v221)
    {
      if (v219)
      {
        uint64_t v28 = 8 * v219;
        do
        {
          if (*v27)
          {

            id *v27 = 0;
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
        uint64_t v26 = v217;
        uint64_t v27 = (id *)v221;
      }
      (*(void (**)(uint64_t, id *))(*(void *)v26 + 40))(v26, v27);
    }
  }
  uint64_t v29 = v222[0];
  if (v222[0])
  {
    unint64_t v30 = v225;
    if (v225)
    {
      if (v223)
      {
        uint64_t v31 = 32 * v223;
        do
        {
          re::StringID::destroyString(v30);
          unint64_t v30 = (re::StringID *)((char *)v30 + 32);
          v31 -= 32;
        }
        while (v31);
        uint64_t v29 = v222[0];
        unint64_t v30 = v225;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(void *)v29 + 40))(v29, v30);
    }
  }
  uint64_t v32 = v226[0];
  if (v226[0])
  {
    int v33 = v229;
    if (v229)
    {
      if (v227)
      {
        uint64_t v34 = 24 * v227;
        do
        {
          re::StringID::destroyString(v33);
          int v33 = (re::StringID *)((char *)v33 + 24);
          v34 -= 24;
        }
        while (v34);
        uint64_t v32 = v226[0];
        int v33 = v229;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(void *)v32 + 40))(v32, v33);
    }
    float32x4_t v229 = 0;
  }
  uint64_t v35 = v230[0];
  if (v230[0])
  {
    int v36 = v233;
    if (v233)
    {
      if (v231)
      {
        uint64_t v37 = 32 * v231;
        do
        {
          re::StringID::destroyString(v36);
          int v36 = (re::StringID *)((char *)v36 + 32);
          v37 -= 32;
        }
        while (v37);
        uint64_t v35 = v230[0];
        int v36 = v233;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(void *)v35 + 40))(v35, v36);
    }
    simd_float4 v233 = 0;
  }
  re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v234);
  re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v238);
  uint64_t result = v242[0];
  if (v242[0])
  {
    unint64_t v39 = v245;
    if (v245)
    {
      if (v243)
      {
        uint64_t v40 = 24 * v243;
        do
        {
          re::StringID::destroyString(v39);
          unint64_t v39 = (re::StringID *)((char *)v39 + 24);
          v40 -= 24;
        }
        while (v40);
        uint64_t result = v242[0];
        unint64_t v39 = v245;
      }
      return (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v39);
    }
  }
  return result;
}

void *makeString(const char *a1)
{
  unsigned __int8 v2 = (re *)strlen(a1);
  size_t v3 = (size_t)v2 + 1;
  uint64_t v4 = re::globalAllocators(v2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(*(void *)v4[2] + 32))(v4[2], v3, 0);
  return memcpy(v5, a1, v3);
}

re *re::internal::destroyPersistent<re::TechniqueStage>(re *result, uint64_t a2, re::TechniqueStage *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::TechniqueStage::~TechniqueStage(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::TechniqueStage *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

unint64_t re::TypedArgument::resolutionHash(re::TypedArgument *this)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * ((*(void *)this >> 31) ^ (*(void *)this >> 1));
  unint64_t v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int16 *)this + 8)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int16 *)this + 8)) >> 27));
  return ((v2 << 6)
        + (v2 >> 2)
        + ((re::MetalTypeInfo::resolutionHash((re::TypedArgument *)((char *)this + 24))
          + ((v3 ^ (v3 >> 31)) << 6)
          + ((v3 ^ (v3 >> 31)) >> 2)
          - 0x61C8864680B583E9) ^ v3 ^ (v3 >> 31))
        - 0x61C8864680B583E9) ^ v2;
}

void re::makeAttributeArguments(id *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = (char *)objc_msgSend(objc_msgSend(*a1, sel_vertexAttributes), sel_count);
  if (v4)
  {
    uint64_t v5 = v4;
    re::DynamicArray<re::BlendParameterInputNode>::setCapacity((void *)a2, (unint64_t)v4);
    for (uint64_t i = 0; i != v5; ++i)
    {
      id v7 = objc_msgSend(objc_msgSend(*a1, sel_vertexAttributes), sel_objectAtIndex_, i);
      if (objc_msgSend(v7, sel_isActive))
      {
        uint64_t v8 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v7, sel_name), sel_UTF8String);
        *(void *)&v10.char var0 = 0;
        v10.var1 = "";
        LOWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = (unsigned __int16)objc_msgSend(v7, sel_attributeIndex);
        unsigned __int16 v9 = (unsigned __int16)objc_msgSend(v7, sel_attributeType);
        re::StringID::StringID((re::StringID *)v11, &v10);
        __int16 v12 = (__int16)v8;
        unsigned __int16 v13 = v9;
        re::StringID::destroyString((re::StringID *)&v10);
        re::DynamicArray<re::AttributeArgument>::add((void *)a2, v11);
        re::StringID::destroyString((re::StringID *)v11);
      }
    }
  }
}

void *re::DynamicArray<re::AttributeArgument>::add(void *this, uint64_t *a2)
{
  unint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AttributeArgument>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 24 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(_DWORD *)(v5 + 16) = *((_DWORD *)a2 + 4);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::TechniqueDefinitionBuilder::hashFunctionConstants(uint64_t a1, uint64_t a2, int a3)
{
  v18[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 << 6;
  do
  {
    if (*(unsigned char *)(a1 + 8)) {
      id v7 = *(const char **)(a1 + 16);
    }
    else {
      id v7 = (const char *)(a1 + 9);
    }
    size_t v8 = strlen(v7);
    if (v8)
    {
      MurmurHash3_x64_128((uint64_t)v7, v8, 0, v18);
      unint64_t v9 = (v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0];
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v10 = v9 - 0x61C8864680B583E9;
    unint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)a1);
    unint64_t v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (As64Bits ^ (As64Bits >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                    * (As64Bits ^ (As64Bits >> 30))) >> 27));
    unint64_t v13 = ((v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + (v12 ^ (v12 >> 31))) ^ v10;
    unint64_t v14 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 32)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *(unsigned __int16 *)(a1 + 32)) >> 27));
    unint64_t v15 = ((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
    if (a3)
    {
      unint64_t v16 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 34)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int16 *)(a1 + 34)) >> 27));
      v15 ^= (v15 << 6) - 0x61C8864680B583E9 + (v15 >> 2) + (v16 ^ (v16 >> 31));
    }
    v5 ^= v15;
    a1 += 64;
    v6 -= 64;
  }
  while (v6);
  return v5;
}

uint64_t re::TechniqueDefinitionBuilder::hashFunctionConstants(uint64_t a1, uint64_t a2, re::FunctionConstantUsageMask *this)
{
  v18[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 << 6;
  do
  {
    if (re::FunctionConstantUsageMask::getIndexUsage(this, *(unsigned __int16 *)(a1 + 34)))
    {
      if (*(unsigned char *)(a1 + 8)) {
        id v7 = *(const char **)(a1 + 16);
      }
      else {
        id v7 = (const char *)(a1 + 9);
      }
      size_t v8 = strlen(v7);
      if (v8)
      {
        MurmurHash3_x64_128((uint64_t)v7, v8, 0, v18);
        unint64_t v9 = (v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0];
      }
      else
      {
        unint64_t v9 = 0;
      }
      unint64_t v10 = v9 - 0x61C8864680B583E9;
      unint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)a1);
      unint64_t v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (As64Bits ^ (As64Bits >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                      * (As64Bits ^ (As64Bits >> 30))) >> 27));
      unint64_t v13 = ((v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + (v12 ^ (v12 >> 31))) ^ v10;
      unint64_t v14 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 32)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int16 *)(a1 + 32)) >> 27));
      unint64_t v15 = ((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
      unint64_t v16 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 34)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int16 *)(a1 + 34)) >> 27));
      v5 ^= v15 ^ ((v16 ^ (v16 >> 31)) - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2));
    }
    a1 += 64;
    v6 -= 64;
  }
  while (v6);
  return v5;
}

BOOL re::FunctionConstantUsageMask::getIndexUsage(re::FunctionConstantUsageMask *this, unsigned int a2)
{
  unsigned __int16 v3 = a2;
  if (a2 > 0x7F) {
    return re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains((uint64_t)this + 16, &v3);
  }
  else {
    return (*((void *)this + re::Bitset<128>::toWordIndex((uint64_t)this, a2)) >> a2) & 1;
  }
}

void re::TechniqueDefinitionBuilder::buildPipelineData(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v19[0] = a1;
  v19[1] = a2;
  uint64_t v17 = 0;
  uint64_t v18 = a3;
  if (v21) {
    unint64_t v11 = *(unsigned char **)&v22[7];
  }
  else {
    unint64_t v11 = v22;
  }
  re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", 0, (uint64_t)v11, &v16);
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  unint64_t v12 = operator new(0x40uLL);
  void *v12 = &unk_26E70E6E8;
  v12[1] = v19;
  uint64_t v12[2] = a4;
  v12[3] = &v18;
  v12[4] = a6;
  _OWORD v12[5] = &v16;
  v12[6] = a5;
  v12[7] = &v17;
  uint64_t v23 = v12;
  re::runInLocalAutoreleasePool((uint64_t)&v20);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&v20);
  id v13 = (id)v17;
  if (v17)
  {
    id v14 = (id)(v17 + 8);
    char v15 = 1;
  }
  else
  {
    id v13 = v16;
    char v15 = 0;
  }
  *(unsigned char *)a7 = v15;
  *(void *)(a7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;

  if (v17) {
}
  }

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::TechniqueFunctionConstant>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (!*(void *)a1)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      return (uint64_t)a1;
    }
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (*((void *)a1 + 1) == v5)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v7, *(uint64_t **)a2, (uint64_t *)(*(void *)a2 + (v5 << 6)), *((void *)a1 + 2));
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::MaterialDefinitionBuilder::result(re::MaterialDefinitionBuilder *this@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v305 = *MEMORY[0x263EF8340];
  unint64_t v4 = re::globalAllocators(this);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 1440, 8);
  bzero(v5, 0x5A0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  void *v5 = &unk_26E70E768;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_DWORD *)v5 + 12) = 0;
  int8x8_t v6 = (int8x8_t)0x7FFFFFFFLL;
  *((_OWORD *)v5 + 4) = 0u;
  uint64_t v277 = (uint64_t)(v5 + 8);
  *(void *)((char *)v5 + 52) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 5) = 0u;
  *((_DWORD *)v5 + 24) = 0;
  *((_OWORD *)v5 + 7) = 0u;
  v266 = v5 + 14;
  *(void *)((char *)v5 + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v5 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *(_OWORD *)((char *)v5 + 156) = 0u;
  *(void *)((char *)v5 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(v5 + 23) = 0u;
  *(_OWORD *)(v5 + 25) = 0u;
  *(_OWORD *)(v5 + 27) = 0u;
  *(_OWORD *)(v5 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v5 + 31));
  v281 = v5;
  *((_DWORD *)v5 + 352) = 0;
  *((_OWORD *)v5 + 87) = 0u;
  *((_OWORD *)v5 + 86) = 0u;
  *(void *)((char *)v5 + 1412) = 0x7FFFFFFFLL;
  v5[178] = 0;
  *((_WORD *)v5 + 716) = 0;
  if (*(unsigned char *)(v3 + 8)) {
    char v7 = *(const char **)(v3 + 16);
  }
  else {
    char v7 = (const char *)(v3 + 9);
  }
  v5[178] = makeString(v7);
  re::DynamicString::DynamicString((re::DynamicString *)v294, (const re::DynamicString *)(v3 + 32));
  *((unsigned char *)v5 + 1432) = 0;
  size_t v8 = *(_anonymous_namespace_ **)&v294[0];
  if (*(void *)&v294[0])
  {
    if (BYTE8(v294[0])) {
      size_t v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v294[0] + 40))();
    }
    memset(v294, 0, sizeof(v294));
  }
  v267 = v5 + 23;
  v263 = v5 + 2;
  uint64_t v291 = 0;
  unint64_t v292 = 0;
  v293 = 0;
  unint64_t v9 = *(unsigned int *)(v3 + 1148);
  unsigned int v290 = 0;
  int v288 = 0;
  memset(v287, 0, sizeof(v287));
  uint64_t v289 = 0x7FFFFFFFLL;
  uint64_t v270 = *(unsigned int *)(v3 + 1152);
  uint64_t v264 = (uint64_t)(v5 + 31);
  uint64_t v12 = 0;
  if (v270)
  {
    id v13 = (int *)(*(void *)(v3 + 1136) + 8);
    id v14 = v5;
    while (1)
    {
      int v15 = *v13;
      v13 += 14;
      if (v15 < 0) {
        break;
      }
      if (v270 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(v3 + 1152);
        break;
      }
    }
  }
  else
  {
    id v14 = v5;
  }
  v265 = v5 + 172;
  uint64_t v16 = 0x9E3779B97F4A7C17;
  uint64_t v276 = v3;
  if (v270 != v12)
  {
    uint64_t v29 = v12;
    unint64_t v30 = v14 + 1;
    if (!v14) {
      unint64_t v30 = 0;
    }
    obunint64_t j = v30;
    do
    {
      uint64_t v31 = *(void *)(*(void *)(v3 + 1136) + 56 * v29 + 48);
      uint64_t v32 = re::globalAllocators(v10);
      int v33 = (void **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32[2] + 32))(v32[2], 2856, 8);
      bzero(v33, 0xB28uLL);
      v33[6] = 0;
      v33[5] = (void *)1;
      *(_OWORD *)(v33 + 7) = 0u;
      *((_WORD *)v33 + 36) = 0;
      *((unsigned char *)v33 + 74) = 1;
      *((unsigned char *)v33 + 76) = 1;
      *((_WORD *)v33 + 3re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = -1;
      *(_WORD *)((char *)v33 + 81) = 1031;
      *(void **)((char *)v33 + 84) = (void *)0x500000001;
      v33[12] = (void *)0x500000001;
      v33[16] = 0;
      *((_DWORD *)v33 + 27) = 15;
      *(_OWORD *)(v33 + 17) = 0u;
      *((_DWORD *)v33 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      v33[14] = 0;
      *(void **)((char *)v33 + 117) = 0;
      re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v33 + 21));
      re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v33 + 162));
      unint64_t v9 = (unint64_t)(v33 + 305);
      *(_OWORD *)(v33 + 305) = 0u;
      *(_OWORD *)(v33 + 307) = 0u;
      uint64_t v35 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v33 + 305, 0);
      *(_OWORD *)(v33 + 30re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
      *(_OWORD *)(v33 + 311) = 0u;
      re::DynamicString::setCapacity(v33 + 309, 0);
      *(_OWORD *)(v33 + 315) = 0u;
      *(_OWORD *)(v33 + 317) = 0u;
      *(_OWORD *)(v33 + 313) = 0u;
      v33[319] = (void *)0x7FFFFFFF00000000;
      *((_DWORD *)v33 + 640) = 0;
      *(_OWORD *)(v33 + 321) = 0u;
      *(_OWORD *)(v33 + 323) = 0u;
      *(_OWORD *)(v33 + 325) = 0u;
      *((_DWORD *)v33 + 654) = 0;
      *(void **)((char *)v33 + 2620) = (void *)0x7FFFFFFF;
      *((unsigned char *)v33 + 2632) = 0;
      *(_OWORD *)(v33 + 331) = 0u;
      *(_OWORD *)(v33 + 333) = 0u;
      *((_DWORD *)v33 + 670) = 0;
      v273 = v33 + 331;
      *(void **)((char *)v33 + 2684) = (void *)0x7FFFFFFF;
      v33[339] = 0;
      *(_OWORD *)(v33 + 337) = 0u;
      objc_initWeak(v33 + 342, 0);
      *(_OWORD *)(v33 + re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 343) = 0u;
      *(_OWORD *)(v33 + 345) = 0u;
      *((_DWORD *)v33 + 694) = 0;
      *(void **)((char *)v33 + 2780) = (void *)0x7FFFFFFF;
      *(_OWORD *)(v33 + re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 349) = 0u;
      *(_OWORD *)(v33 + 351) = 0u;
      *((_DWORD *)v33 + 706) = 0;
      *(void **)((char *)v33 + 282re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = (void *)0x7FFFFFFF;
      *((_DWORD *)v33 + 710) = 0;
      *((_DWORD *)v33 + 711) = 0x10000;
      *((unsigned char *)v33 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      if (*(unsigned char *)(v31 + 8)) {
        int v36 = *(const char **)(v31 + 16);
      }
      else {
        int v36 = (const char *)(v31 + 9);
      }
      re::StringID *v33 = makeString(v36);
      long long v37 = *(_OWORD *)(v31 + 240);
      long long v38 = *(_OWORD *)(v31 + 256);
      long long v39 = *(_OWORD *)(v31 + 272);
      *((_DWORD *)v33 + 30) = *(_DWORD *)(v31 + 288);
      *(_OWORD *)(v33 + 13) = v39;
      *(_OWORD *)(v33 + 11) = v38;
      *(_OWORD *)(v33 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v37;
      if (*((unsigned char *)v33 + 124) || *(unsigned char *)(v31 + 292))
      {
        if (!*((unsigned char *)v33 + 124) || *(unsigned char *)(v31 + 292))
        {
          if (!*((unsigned char *)v33 + 124) && *(unsigned char *)(v31 + 292)) {
            *((unsigned char *)v33 + 124) = 1;
          }
          *((unsigned char *)v33 + 125) = *(unsigned char *)(v31 + 293);
        }
        else
        {
          *((unsigned char *)v33 + 124) = 0;
        }
      }
      re::DynamicArray<re::RenderAttachmentState>::operator=((uint64_t)(v33 + 16), (uint64_t *)(v31 + 296));
      v33[303] = *(void **)(v31 + 32);
      re::DynamicString::operator=((re::DynamicString *)(v33 + 305), (re::DynamicString *)(v31 + 40));
      *(_OWORD *)(v33 + 313) = *(_OWORD *)(v31 + 72);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=((uint64_t)(v33 + 315), v31 + 88);
      v33[304] = *(void **)(v31 + 136);
      re::DynamicString::operator=((re::DynamicString *)(v33 + 309), (re::DynamicString *)(v31 + 144));
      *(_OWORD *)(v33 + 321) = *(_OWORD *)(v31 + 176);
      uint64_t v40 = (_anonymous_namespace_ *)re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=((uint64_t)(v33 + 323), v31 + 192);
      uint64_t v42 = *(void **)(v31 + 528);
      if (*((unsigned char *)v33 + 2632) || *(unsigned char *)(v31 + 520))
      {
        if (!*((unsigned char *)v33 + 2632) || *(unsigned char *)(v31 + 520))
        {
          if (!*((unsigned char *)v33 + 2632) && *(unsigned char *)(v31 + 520)) {
            *((unsigned char *)v33 + 2632) = 1;
          }
          v33[330] = v42;
        }
        else
        {
          v33[330] = 0;
          *((unsigned char *)v33 + 2632) = 0;
        }
      }
      if (v273 != (void *)(v31 + 536))
      {
        uint64_t v41 = *(void *)(v31 + 536);
        if (*v273)
        {
          if (v41)
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v273, v31 + 536);
            ++*((_DWORD *)v33 + 672);
          }
          else
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear((uint64_t)v273);
          }
        }
        else if (v41)
        {
          if (*(_DWORD *)(v31 + 564) <= 3u) {
            signed int v43 = 3;
          }
          else {
            signed int v43 = *(_DWORD *)(v31 + 564);
          }
          re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v273, v41, v43);
          re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v273, v31 + 536);
        }
      }
      uint64_t v44 = *(uint64_t **)(v31 + 512);
      unint64_t v45 = *(void *)(v31 + 496);
      if (!v33[337])
      {
        if (!v45) {
          goto LABEL_76;
        }
        v33[338] = (void *)v45;
        if (v45 >> 61) {
          goto LABEL_471;
        }
        v33[339] = v47;
        if (!v47) {
          goto LABEL_472;
        }
        unint64_t v9 = (unint64_t)v47;
        if (v45 != 1)
        {
          bzero(v47, 8 * v45 - 8);
          v9 += 8 * v45 - 8;
        }
        *(void *)unint64_t v9 = 0;
      }
      if (v33[338] != (void *)v45) {
        goto LABEL_470;
      }
      if (v45)
      {
        uint64_t v48 = v33[339];
        uint64_t v49 = 8 * v45;
        do
        {
          uint64_t v50 = *v44++;
          *v48++ = v50;
          v49 -= 8;
        }
        while (v49);
      }
      uint64_t v51 = *(void *)(v31 + 496);
      if (!v51)
      {
LABEL_76:
        unint64_t v52 = 0;
        id v55 = (_anonymous_namespace_ *)(v33 + 6);
        goto LABEL_77;
      }
      unint64_t v52 = 0;
      int v53 = *(uint64_t **)(v31 + 512);
      uint64_t v54 = 8 * v51;
      id v55 = (_anonymous_namespace_ *)(v33 + 6);
      do
      {
        uint64_t v56 = *v53++;
        v52 ^= v56;
        v54 -= 8;
      }
      while (v54);
LABEL_77:
      v33[340] = (void *)v52;
      *((unsigned char *)v33 + 2845) = *(unsigned char *)(v31 + 685);
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v33 + 343), v31 + 584);
      *((_DWORD *)v33 + 710) = *(_DWORD *)(v31 + 680);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v33 + 349), v31 + 632);
      *((unsigned char *)v33 + 2844) = 0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94798, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF94798))
      {
        _MergedGlobals_379 = [a2[23] supportsDynamicAttributeStride];
        __cxa_guard_release(&qword_26AF94798);
      }
      if (_MergedGlobals_379)
      {
        if (*(void *)(v31 + 48)) {
          uint64_t v57 = *(const char **)(v31 + 56);
        }
        else {
          uint64_t v57 = (const char *)(v31 + 49);
        }
        int v58 = strcmp(v57, "vsRealityPbrOpenSubdiv");
        if (*(unsigned char *)(v31 + 684)) {
          BOOL v59 = v58 == 0;
        }
        else {
          BOOL v59 = 1;
        }
        char v60 = !v59;
        *((unsigned char *)v33 + 2844) = v60;
      }
      if (*((unsigned char *)v33 + 2846) || *(unsigned char *)(v31 + 686))
      {
        if (!*((unsigned char *)v33 + 2846) || *(unsigned char *)(v31 + 686))
        {
          if (!*((unsigned char *)v33 + 2846) && *(unsigned char *)(v31 + 686)) {
            *((unsigned char *)v33 + 2846) = 1;
          }
          *((unsigned char *)v33 + 2847) = *(unsigned char *)(v31 + 687);
        }
        else
        {
          *((unsigned char *)v33 + 2846) = 0;
        }
      }
      uint64_t v61 = (uint64_t)a2[3];
      re::StringID::StringID((re::StringID *)v296, (const re::DynamicString *)(v31 + 40));
      re::MaterialManager::getEngineShaderMetadata(v61, v296, v297);
      re::StringID::destroyString((re::StringID *)v296);
      if (v297[0]) {
        char v62 = v297[1];
      }
      else {
        char v62 = 0;
      }
      *((unsigned char *)v33 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v62;
      v278 = a2[3];
      re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)(v31 + 376), *(uint64_t **)(v31 + 472), *(void *)(v31 + 456), v31 + 336, v278 + 121, (uint64_t)v299);
      re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)v33 + 1, (uint64_t *)v299);
      *((_OWORD *)v33 + 2) = *(_OWORD *)&v299[24];
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v299);
      re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)(v33 + 1), 0, *(void *)(v31 + 368), *(void *)(v31 + 352), (uint64_t)v299);
      *(void *)v302 = *(void *)&v299[32];
      *(void *)&v302[8] = *(void *)&v299[16];
      re::FixedArray<re::TechniqueFunctionConstant>::operator=(v55, (uint64_t)v302);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v299);
      if (*((unsigned char *)v33 + 2845))
      {
        *(void *)v299 = v31 + 376;
        unint64_t v63 = *(void *)(v31 + 392);
        if (v63 >= 0x10)
        {
          uint64_t v64 = 0;
          uint64_t v65 = *(void *)(v31 + 376);
          unint64_t v66 = v63 >> 4;
          while (1)
          {
            unsigned __int16 v67 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v65 + v64)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *(void *)&v299[8] = (unsigned __int16)~v67;
            if (v67 != 0xFFFF) {
              break;
            }
            v64 += 16;
            if (!--v66) {
              goto LABEL_108;
            }
          }
          uint64_t v68 = __clz(__rbit64((unsigned __int16)~v67)) + v64;
          for (*(void *)&v299[16] = v68; *(void *)&v299[16] != -1; uint64_t v68 = *(void *)&v299[16])
          {
            uint64_t v81 = *(void *)(*(void *)v299 + 8) + 96 * v68;
            BOOL v82 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v33 + 343), v81);
            if (!v82)
            {
              int v83 = *re::graphicsLogObjects((re *)v82);
              if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
              {
                if (*(unsigned char *)(v81 + 8)) {
                  uint64_t v84 = *(void *)(v81 + 16);
                }
                else {
                  uint64_t v84 = v81 + 9;
                }
                *(_DWORD *)v302 = 136315138;
                *(void *)&v302[4] = v84;
                _os_log_error_impl(&dword_233120000, v83, OS_LOG_TYPE_ERROR, "Missing runtime function constant fallback value for varying function constant %s. Please add fallback values to the material definition.", v302, 0xCu);
              }
            }
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v299);
          }
        }
LABEL_108:
        uint64_t v69 = *(void *)(v31 + 456);
        if (v69)
        {
          int v70 = *(uint64_t **)(v31 + 472);
          unint64_t v71 = &v70[v69];
          do
          {
            unint64_t v295 = *v70;
            uint64_t v72 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v278 + 121, (uint64_t *)&v295);
            re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)v299, (uint64_t *)(v278[122] + 72 * v72 + 8));
            *(void *)v302 = v299;
            *(void *)&v302[8] = 0;
            if (*(void *)&v299[16] >= 0x10uLL)
            {
              uint64_t v73 = 0;
              uint64_t v74 = *(void *)&v299[16] >> 4;
              while (1)
              {
                unsigned __int16 v75 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)v299 + v73)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
                *(void *)&v302[8] = (unsigned __int16)~v75;
                if (v75 != 0xFFFF) {
                  break;
                }
                v73 += 16;
                if (!--v74) {
                  goto LABEL_116;
                }
              }
              uint64_t v76 = __clz(__rbit64((unsigned __int16)~v75)) + v73;
              for (*(void *)&v302[16] = v76; *(void *)&v302[16] != -1; uint64_t v76 = *(void *)&v302[16])
              {
                uint64_t v77 = *(void *)(*(void *)v302 + 8) + 96 * v76;
                BOOL v78 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v33 + 343), v77);
                if (!v78)
                {
                  unint64_t v79 = *re::graphicsLogObjects((re *)v78);
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                  {
                    if (*(unsigned char *)(v77 + 8)) {
                      uint64_t v80 = *(void *)(v77 + 16);
                    }
                    else {
                      uint64_t v80 = v77 + 9;
                    }
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = v80;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v295;
                    _os_log_error_impl(&dword_233120000, v79, OS_LOG_TYPE_ERROR, "Missing runtime function constant fallback value for varying function constant %s in default variation %lu. This is an RE bug.", buf, 0x16u);
                  }
                }
                re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v302);
              }
            }
LABEL_116:
            re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v299);
            ++v70;
          }
          while (v70 != v71);
        }
      }
      unint64_t v9 = v290;
      unint64_t v45 = v292;
      if (v292 <= v290) {
        goto LABEL_468;
      }
      unsigned int v85 = v293;
      v293[v290] = v33;
      objc_storeWeak(v33 + 342, obj);
      size_t v86 = strlen((const char *)*v33);
      if (v86)
      {
        MurmurHash3_x64_128((uint64_t)*v33, v86, 0, (unint64_t *)v299);
        uint64_t v16 = 0x9E3779B97F4A7C17;
        unint64_t v87 = (*(void *)&v299[8] - 0x61C8864680B583E9 + (*(void *)v299 << 6) + (*(void *)v299 >> 2)) ^ *(void *)v299;
        uint64_t v3 = v276;
      }
      else
      {
        unint64_t v87 = 0;
        uint64_t v3 = v276;
        uint64_t v16 = 0x9E3779B97F4A7C17;
      }
      uint64_t v88 = (_anonymous_namespace_ *)strlen((const char *)v281[178]);
      if (v88)
      {
        uint64_t v88 = (_anonymous_namespace_ *)MurmurHash3_x64_128(v281[178], (int)v88, 0, (unint64_t *)v299);
        uint64_t v89 = (*(void *)&v299[8] - 0x61C8864680B583E9 + (*(void *)v299 << 6) + (*(void *)v299 >> 2)) ^ *(void *)v299;
      }
      else
      {
        uint64_t v89 = 0;
      }
      unint64_t v9 = v290;
      if (v45 <= v290)
      {
LABEL_469:
        *(void *)buf = 0;
        long long v300 = 0u;
        long long v301 = 0u;
        memset(v299, 0, sizeof(v299));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v302 = 136315906;
        *(void *)&v302[4] = "operator[]";
        *(_WORD *)&v302[12] = 1024;
        *(_DWORD *)&v302[14] = 468;
        *(_WORD *)&v302[18] = 2048;
        *(void *)&v302[20] = v9;
        __int16 v303 = 2048;
        unint64_t v304 = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_470:
        re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
LABEL_471:
        re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v45);
        _os_crash();
        __break(1u);
LABEL_472:
        re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
LABEL_473:
        *(void *)buf = 0;
        long long v300 = 0u;
        long long v301 = 0u;
        memset(v299, 0, sizeof(v299));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v302 = 136315906;
        *(void *)&v302[4] = "slice";
        *(_WORD *)&v302[12] = 1024;
        *(_DWORD *)&v302[14] = 502;
        *(_WORD *)&v302[18] = 2048;
        *(void *)&v302[20] = 0;
        __int16 v303 = 2048;
        unint64_t v304 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_474:
        re::internal::assertLog((re::internal *)7, v11, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, 0, v9, v93);
        _os_crash();
        __break(1u);
LABEL_475:
        re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
LABEL_476:
        v296[0] = 0;
        long long v300 = 0u;
        long long v301 = 0u;
        memset(v299, 0, sizeof(v299));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v302 = 136315906;
        *(void *)&v302[4] = "operator[]";
        *(_WORD *)&v302[12] = 1024;
        *(_DWORD *)&v302[14] = 789;
        *(_WORD *)&v302[18] = 2048;
        *(void *)&v302[20] = 0;
        __int16 v303 = 2048;
        unint64_t v304 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(v85[v290] + 272re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = ((v87 << 6) - 0x61C8864680B583E9 + (v87 >> 2) + v89) ^ v87;
      unint64_t v9 = (unint64_t)*v33;
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned int &>((uint64_t)v287, (re::DynamicString *)v299, &v290);
      unint64_t v10 = *(re **)v299;
      if (*(void *)v299 && (v299[8] & 1) != 0) {
        unint64_t v10 = (re *)(*(uint64_t (**)(void))(**(void **)v299 + 40))();
      }
      ++v290;
      if (*(_DWORD *)(v3 + 1152) <= (v12 + 1)) {
        int v90 = v12 + 1;
      }
      else {
        int v90 = *(_DWORD *)(v3 + 1152);
      }
      id v14 = v281;
      while (1)
      {
        uint64_t v29 = (v12 + 1);
        if (v90 - 1 == v12) {
          break;
        }
        LODWORD(v12) = v12 + 1;
        int v91 = v29;
        if ((*(_DWORD *)(*(void *)(v3 + 1136) + 56 * v29 + 8) & 0x80000000) != 0) {
          goto LABEL_153;
        }
      }
      int v91 = v90;
LABEL_153:
      LODWORD(v12) = v91;
    }
    while (v270 != v91);
  }
  uint64_t v17 = v3 + 1312;
  unint64_t v18 = (unint64_t)v267;
  if (v267 != (void *)(v3 + 1312))
  {
    v14[28] = 0;
    v14[29] = 0;
    unint64_t v19 = v14[25];
    v14[26] = 0;
    v14[27] = v19;
    if (v19 >= 0x10)
    {
      unint64_t v20 = 0;
      *(void *)&long long v21 = -1;
      *((void *)&v21 + 1) = -1;
      do
      {
        *(_OWORD *)(v14[23] + 16 * v20++) = v21;
        unint64_t v19 = v14[25];
      }
      while (v20 < v19 >> 4);
    }
    if (v19)
    {
      uint64_t v22 = 72 * v19;
      unint64_t v9 = v281[24] + 8;
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v9);
        v9 += 72;
        v22 -= 72;
      }
      while (v22);
    }
    unint64_t v23 = *(void *)(v3 + 1328);
    if (v23 >= 0x10)
    {
      uint64_t v24 = 0;
      unint64_t v25 = v23 >> 4;
      long long v26 = xmmword_2343680E0;
      int8x8_t v6 = (int8x8_t)0x3830282018100800;
      while (1)
      {
        unsigned __int16 v27 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)v17 + v24)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        unint64_t v28 = (unsigned __int16)~v27;
        if (v27 != 0xFFFF) {
          break;
        }
        v24 += 16;
        if (!--v25) {
          goto LABEL_158;
        }
      }
      unint64_t v92 = __clz(__rbit64(v28)) + v24;
      if (v92 != -1) {
        goto LABEL_451;
      }
    }
  }
LABEL_158:
  unint64_t v93 = v292;
  if (v292 == -1) {
    goto LABEL_473;
  }
  unint64_t v9 = v290;
  if (v292 < v290) {
    goto LABEL_474;
  }
  uint64_t v94 = v293;
  re::MaterialParameterTable::MaterialParameterTable((uint64_t)v299, (uint64_t *)(v3 + 64), (uint64_t *)(v3 + 592));
  re::MaterialParameterTable::operator=(v264, (uint64_t)v299);
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v299);
  if (v265 != (void *)(v3 + 1072))
  {
    uint64_t v96 = *(void *)(v3 + 1072);
    if (*v265)
    {
      if (v96)
      {
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v265, v3 + 1072);
        ++*((_DWORD *)v281 + 354);
      }
      else
      {
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear((uint64_t)v265);
      }
    }
    else if (v96)
    {
      if (*(_DWORD *)(v3 + 1100) <= 3u) {
        signed int v97 = 3;
      }
      else {
        signed int v97 = *(_DWORD *)(v3 + 1100);
      }
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v265, v96, v97);
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v265, v3 + 1072);
    }
  }
  unint64_t v98 = v290;
  if (!*v266)
  {
    uint64_t v101 = v281;
    if (!v9) {
      goto LABEL_176;
    }
  }
  uint64_t v101 = v281;
  if (v281[15] != v9) {
    goto LABEL_475;
  }
  if (v9)
  {
    uint64_t v99 = (uint64_t)memmove((void *)v281[16], v94, 8 * v9);
    uint64_t v101 = v281;
  }
LABEL_176:
  if (v101[15])
  {
    unint64_t v102 = 0;
    unsigned int v103 = v101 + 17;
    do
    {
      uint64_t v104 = *(const char ***)(v101[16] + 8 * v102);
      memset(v302, 0, 24);
      *(_DWORD *)v299 = v102;
      size_t v105 = strlen(*v104);
      if (v105)
      {
        MurmurHash3_x64_128((uint64_t)*v104, v105, 0, (unint64_t *)v299);
        unint64_t v106 = (*(void *)&v299[8] + v16 + (*(void *)v299 << 6) + (*(void *)v299 >> 2)) ^ *(void *)v299;
      }
      else
      {
        unint64_t v106 = 0;
      }
      *(void *)buf = v106;
      *(_OWORD *)v299 = *(_OWORD *)v302;
      uint64_t v107 = *(void *)&v302[16];
      memset(v302, 0, 24);
      *(void *)&v299[16] = v107;
      v299[24] = -1;
      if (*v103)
      {
        unint64_t v108 = v106 % *((unsigned int *)v281 + 40);
        uint64_t v109 = *(unsigned int *)(v281[18] + 4 * v108);
        if (v109 != 0x7FFFFFFF)
        {
          uint64_t v110 = v281[19];
          while (*(void *)(v110 + 48 * v109 + 8) != v106)
          {
            LODWORD(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v110 + 48 * v109) & 0x7FFFFFFF;
            if (v109 == 0x7FFFFFFF) {
              goto LABEL_188;
            }
          }
          uint64_t v111 = v110 + 48 * v109;
          re::FixedArray<float>::operator=((uint64_t *)(v111 + 16), (uint64_t *)v299);
          *(unsigned char *)(v111 + 40) = v299[24];
          goto LABEL_190;
        }
      }
      else
      {
        LODWORD(v10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      }
LABEL_188:
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove((uint64_t)v103, v108, v106, buf, (uint64_t)v299);
LABEL_190:
      uint64_t v101 = v281;
      ++*((_DWORD *)v281 + 44);
      if (*(void *)v299) {
        BOOL v112 = *(void *)&v299[8] == 0;
      }
      else {
        BOOL v112 = 1;
      }
      if (!v112)
      {
        (*(void (**)(void, void))(**(void **)v299 + 40))(*(void *)v299, *(void *)&v299[16]);
        uint64_t v101 = v281;
      }
      uint64_t v99 = *(void *)v302;
      if (*(void *)v302 && *(void *)&v302[8])
      {
        uint64_t v99 = (*(uint64_t (**)(void, void))(**(void **)v302 + 40))(*(void *)v302, *(void *)&v302[16]);
        uint64_t v101 = v281;
      }
      ++v102;
    }
    while (v102 < v101[15]);
  }
  uint64_t v113 = v276;
  uint64_t v114 = *(unsigned int *)(v276 + 1296);
  if (v114)
  {
    uint64_t v115 = 0;
    unsigned int v116 = (int *)(*(void *)(v276 + 1280) + 8);
    while (1)
    {
      int v117 = *v116;
      v116 += 22;
      if (v117 < 0) {
        break;
      }
      if (v114 == ++v115)
      {
        LODWORD(v115) = *(_DWORD *)(v276 + 1296);
        break;
      }
    }
  }
  else
  {
    LODWORD(v115) = 0;
  }
  if (v114 != v115)
  {
    unint64_t v45 = v115;
    uint64_t v279 = (uint64_t)(v101 + 17);
    int v282 = *(_DWORD *)(v276 + 1296);
    while (1)
    {
      uint64_t v122 = *(void *)(v113 + 1280);
      BOOL v123 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v287, v122 + 88 * v45 + 16);
      if (!v123) {
        break;
      }
      uint64_t v124 = *re::graphicsLogObjects((re *)v123);
      uint64_t v99 = os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT);
      uint64_t v101 = v281;
      if (v99)
      {
        if (*(unsigned char *)(v122 + 88 * v45 + 24)) {
          uint64_t v125 = *(void *)(v122 + 88 * v45 + 32);
        }
        else {
          uint64_t v125 = v122 + 88 * v45 + 25;
        }
        *(_DWORD *)v299 = 136315138;
        *(void *)&v299[4] = v125;
        _os_log_impl(&dword_233120000, v124, OS_LOG_TYPE_DEFAULT, "Technique group \"%s\" has the same name as an existing technique.  Skipping the group", v299, 0xCu);
LABEL_233:
        uint64_t v101 = v281;
      }
      unsigned int v137 = *(_DWORD *)(v113 + 1296);
      if (v137 <= (int)v115 + 1) {
        unsigned int v137 = v115 + 1;
      }
      while (1)
      {
        unint64_t v45 = (v115 + 1);
        if (v137 - 1 == v115) {
          break;
        }
        LODWORD(v115) = v115 + 1;
        int v138 = v45;
        if ((*(_DWORD *)(*(void *)(v113 + 1280) + 88 * v45 + 8) & 0x80000000) != 0) {
          goto LABEL_240;
        }
      }
      int v138 = v137;
LABEL_240:
      LODWORD(v115) = v138;
      if (v114 == v138) {
        goto LABEL_206;
      }
    }
    memset(buf, 0, 24);
    uint64_t v126 = v122 + 88 * v45;
    unint64_t v128 = *(void *)(v126 + 64);
    unint64_t v127 = (unint64_t *)(v126 + 64);
    if (*v127)
    {
      unint64_t v129 = 0;
      unint64_t v130 = 0;
      int v131 = (uint64_t *)(v122 + 88 * v45 + 80);
      while (1)
      {
        uint64_t v132 = *v131;
        unint64_t v133 = (_DWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v287, *v131 + v129);
        if (!v133) {
          break;
        }
        unint64_t v9 = *(void *)&buf[8];
        if (*(void *)&buf[8] <= v130)
        {
          v296[0] = 0;
          long long v300 = 0u;
          long long v301 = 0u;
          memset(v299, 0, sizeof(v299));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v302 = 136315906;
          *(void *)&v302[4] = "operator[]";
          *(_WORD *)&v302[12] = 1024;
          *(_DWORD *)&v302[14] = 468;
          *(_WORD *)&v302[18] = 2048;
          *(void *)&v302[20] = v130;
          __int16 v303 = 2048;
          unint64_t v304 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_467:
          v296[0] = 0;
          long long v300 = 0u;
          long long v301 = 0u;
          memset(v299, 0, sizeof(v299));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v302 = 136315906;
          *(void *)&v302[4] = "operator[]";
          *(_WORD *)&v302[12] = 1024;
          *(_DWORD *)&v302[14] = 468;
          *(_WORD *)&v302[18] = 2048;
          *(void *)&v302[20] = v9;
          __int16 v303 = 2048;
          unint64_t v304 = v129;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_468:
          *(void *)buf = 0;
          long long v300 = 0u;
          long long v301 = 0u;
          memset(v299, 0, sizeof(v299));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v302 = 136315906;
          *(void *)&v302[4] = "operator[]";
          *(_WORD *)&v302[12] = 1024;
          *(_DWORD *)&v302[14] = 468;
          *(_WORD *)&v302[18] = 2048;
          *(void *)&v302[20] = v9;
          __int16 v303 = 2048;
          unint64_t v304 = v45;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_469;
        }
        *(_DWORD *)(*(void *)&buf[16] + 4 * v130++) = *v133;
        v129 += 32;
        if (v130 >= *v127) {
          goto LABEL_221;
        }
      }
      uint64_t v135 = *re::graphicsLogObjects(0);
      uint64_t v113 = v276;
      LODWORD(v114) = v282;
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v122 + 88 * v45 + 24)) {
          uint64_t v136 = *(void *)(v122 + 88 * v45 + 32);
        }
        else {
          uint64_t v136 = v122 + 88 * v45 + 25;
        }
        uint64_t v139 = v132 + v129;
        if (*(unsigned char *)(v132 + v129 + 8)) {
          uint64_t v140 = *(void *)(v139 + 16);
        }
        else {
          uint64_t v140 = v139 + 9;
        }
        *(_DWORD *)v299 = 136315394;
        *(void *)&v299[4] = v136;
        *(_WORD *)&v299[12] = 2080;
        *(void *)&v299[14] = v140;
        _os_log_impl(&dword_233120000, v135, OS_LOG_TYPE_DEFAULT, "In technique group \"%s\", technique \"%s\" does not exist. Skipping the group.", v299, 0x16u);
      }
    }
    else
    {
LABEL_221:
      *(void *)v302 = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v122 + 88 * v45 + 16);
      *(_OWORD *)v299 = *(_OWORD *)buf;
      uint64_t v134 = *(void *)&buf[16];
      memset(buf, 0, 24);
      *(void *)&v299[16] = v134;
      v299[24] = -1;
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v279, (unint64_t *)v302, (uint64_t)v299);
      if (*(void *)v299 && *(void *)&v299[8]) {
        (*(void (**)(void, void))(**(void **)v299 + 40))(*(void *)v299, *(void *)&v299[16]);
      }
      uint64_t v113 = v276;
      LODWORD(v114) = v282;
    }
    uint64_t v99 = *(void *)buf;
    if (*(void *)buf && *(void *)&buf[8]) {
      uint64_t v99 = (*(uint64_t (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
    }
    goto LABEL_233;
  }
LABEL_206:
  uint64_t v118 = *(unsigned int *)(v113 + 1408);
  if (v118)
  {
    uint64_t v119 = 0;
    unint64_t v120 = (int *)(*(void *)(v113 + 1392) + 8);
    uint64_t v16 = 0x9E3779B97F4A7C17;
    while (1)
    {
      int v121 = *v120;
      v120 += 30;
      if (v121 < 0) {
        break;
      }
      if (v118 == ++v119)
      {
        LODWORD(v11re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v113 + 1408);
        break;
      }
    }
  }
  else
  {
    LODWORD(v11re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    uint64_t v16 = 0x9E3779B97F4A7C17;
  }
  if (v118 != v119)
  {
    uint64_t v146 = v119;
    uint64_t v147 = (uint64_t)(v101 + 17);
    uint64_t v271 = (uint64_t)(v101 + 17);
    int v272 = *(_DWORD *)(v113 + 1408);
    do
    {
      uint64_t v283 = *(void *)(v113 + 1392);
      uint64_t v148 = v283 + 120 * v146;
      uint64_t v149 = v148 + 16;
      BOOL v150 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v287, v148 + 16);
      if (v150)
      {
        uint64_t v151 = v148 + 16;
        id v152 = *re::graphicsLogObjects((re *)v150);
        uint64_t v99 = os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT);
        uint64_t v101 = v281;
        if (v99)
        {
          if (*(unsigned char *)(v283 + 120 * v146 + 24)) {
            uint64_t v153 = *(void *)(v283 + 120 * v146 + 32);
          }
          else {
            uint64_t v153 = v151 + 9;
          }
          *(_DWORD *)v299 = 136315138;
          *(void *)&v299[4] = v153;
          uint32x4_t v167 = v152;
          unint64_t v168 = "Technique quality set \"%s\" has the same name as an existing technique.  Skipping the quality set";
LABEL_290:
          _os_log_impl(&dword_233120000, v167, OS_LOG_TYPE_DEFAULT, v168, v299, 0xCu);
          uint64_t v101 = v281;
        }
      }
      else
      {
        unint64_t v295 = 0;
        unint64_t v295 = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v148 + 16);
        BOOL v154 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v147, (uint64_t *)&v295);
        if (v154)
        {
          uint64_t v155 = v148 + 16;
          uint64_t v156 = *re::graphicsLogObjects((re *)v154);
          uint64_t v99 = os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT);
          uint64_t v101 = v281;
          if (v99)
          {
            if (*(unsigned char *)(v283 + 120 * v146 + 24)) {
              uint64_t v157 = *(void *)(v283 + 120 * v146 + 32);
            }
            else {
              uint64_t v157 = v155 + 9;
            }
            *(_DWORD *)v299 = 136315138;
            *(void *)&v299[4] = v157;
            uint32x4_t v167 = v156;
            unint64_t v168 = "Technique quality set \"%s\" has the same name as an existing technique group.  Skipping the quality set";
            goto LABEL_290;
          }
        }
        else
        {
          uint64_t v158 = v148 + 48;
          if (*(void *)(v158 + 16))
          {
            unint64_t v159 = *(void *)(v158 + 16);
            memset(buf, 0, 24);
            uint64_t v274 = v149;
            if (!*(void *)(v158 + 16))
            {
              unsigned int v166 = (re *)re::Hash<re::DynamicString>::operator()((uint64_t)v299, v149);
              unint64_t v295 = (unint64_t)v166;
              goto LABEL_282;
            }
            unint64_t v45 = 0;
            unint64_t v9 = 0;
            LOBYTE(v160) = -1;
            do
            {
              uint64_t v161 = *(void *)(v158 + 32);
              uint64_t v162 = v161 + v45;
              uint64_t v163 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v287, v161 + v45);
              if (!v163)
              {
                uint64_t v174 = *re::graphicsLogObjects(0);
                uint64_t v113 = v276;
                uint64_t v16 = 0x9E3779B97F4A7C17;
                uint64_t v147 = v271;
                LODWORD(v11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v272;
                if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
                {
                  if (*(unsigned char *)(v283 + 120 * v146 + 24)) {
                    uint64_t v175 = *(void *)(v283 + 120 * v146 + 32);
                  }
                  else {
                    uint64_t v175 = v274 + 9;
                  }
                  uint64_t v181 = v161 + v45;
                  if (*(unsigned char *)(v161 + v45 + 8)) {
                    uint64_t v182 = *(void *)(v181 + 16);
                  }
                  else {
                    uint64_t v182 = v181 + 9;
                  }
                  *(_DWORD *)v299 = 136315394;
                  *(void *)&v299[4] = v175;
                  *(_WORD *)&v299[12] = 2080;
                  *(void *)&v299[14] = v182;
                  _os_log_impl(&dword_233120000, v174, OS_LOG_TYPE_DEFAULT, "In technique quality level set \"%s\", technique \"%s\" does not exist. Skipping the set.", v299, 0x16u);
                }
                goto LABEL_301;
              }
              unint64_t v129 = *(void *)&buf[8];
              if (*(void *)&buf[8] <= v9) {
                goto LABEL_467;
              }
              unint64_t v164 = (_DWORD *)v163;
              if (re::DynamicString::operator==(v162, v283 + 120 * v146 + 88)) {
                char v165 = v9;
              }
              else {
                char v165 = v160;
              }
              int v160 = v165;
              *(_DWORD *)(*(void *)&buf[16] + 4 * v9++) = *v164;
              v45 += 32;
            }
            while (v9 < *(void *)(v158 + 16));
            unsigned int v166 = (re *)re::Hash<re::DynamicString>::operator()((uint64_t)v299, v149);
            unint64_t v295 = (unint64_t)v166;
            uint64_t v113 = v276;
            uint64_t v147 = v271;
            LODWORD(v11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v272;
            if ((v160 & 0x80000000) == 0) {
              goto LABEL_297;
            }
LABEL_282:
            uint64_t v172 = *re::graphicsLogObjects(v166);
            LOBYTE(v160) = 0;
            if (!os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_297;
            }
            if (*(unsigned char *)(v283 + 120 * v146 + 24)) {
              uint64_t v173 = *(void *)(v283 + 120 * v146 + 32);
            }
            else {
              uint64_t v173 = v274 + 9;
            }
            if (!*(void *)(v158 + 16)) {
              goto LABEL_476;
            }
            uint64_t v176 = *(void *)(v158 + 32);
            if (*(unsigned char *)(v176 + 8)) {
              uint64_t v177 = *(void *)(v176 + 16);
            }
            else {
              uint64_t v177 = v176 + 9;
            }
            *(_DWORD *)v299 = 136315394;
            *(void *)&v299[4] = v173;
            *(_WORD *)&v299[12] = 2080;
            *(void *)&v299[14] = v177;
            _os_log_impl(&dword_233120000, v172, OS_LOG_TYPE_DEFAULT, "In technique quality level set \"%s\", techniqueSetBaseline does not exist. It will be set to technique \"%s\" by default.", v299, 0x16u);
            LOBYTE(v160) = 0;
LABEL_297:
            *(_OWORD *)v299 = *(_OWORD *)buf;
            uint64_t v178 = *(void *)&buf[16];
            memset(buf, 0, 24);
            *(void *)&v299[16] = v178;
            v299[24] = v160;
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v147, &v295, (uint64_t)v299);
            if (*(void *)v299 && *(void *)&v299[8]) {
              (*(void (**)(void, void))(**(void **)v299 + 40))(*(void *)v299, *(void *)&v299[16]);
            }
            uint64_t v16 = 0x9E3779B97F4A7C17;
LABEL_301:
            uint64_t v99 = *(void *)buf;
            if (*(void *)buf && *(void *)&buf[8]) {
              uint64_t v99 = (*(uint64_t (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
            }
            uint64_t v101 = v281;
          }
          else
          {
            uint64_t v169 = v149;
            unint64_t v170 = *re::graphicsLogObjects((re *)v154);
            uint64_t v99 = os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT);
            uint64_t v101 = v281;
            if (v99)
            {
              if (*(unsigned char *)(v283 + 120 * v146 + 24)) {
                uint64_t v171 = *(void *)(v283 + 120 * v146 + 32);
              }
              else {
                uint64_t v171 = v169 + 9;
              }
              *(_DWORD *)v299 = 136315138;
              *(void *)&v299[4] = v171;
              uint32x4_t v167 = v170;
              unint64_t v168 = "In technique quality level set \"%s\" ,techniques array is empty. Skipping the set.";
              goto LABEL_290;
            }
          }
        }
      }
      unsigned int v179 = *(_DWORD *)(v113 + 1408);
      if (v179 <= (int)v119 + 1) {
        unsigned int v179 = v119 + 1;
      }
      while (1)
      {
        uint64_t v146 = (v119 + 1);
        if (v179 - 1 == v119) {
          break;
        }
        LODWORD(v11re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v119 + 1;
        unsigned int v180 = v146;
        if ((*(_DWORD *)(*(void *)(v113 + 1392) + 120 * v146 + 8) & 0x80000000) != 0) {
          goto LABEL_311;
        }
      }
      unsigned int v180 = v179;
LABEL_311:
      LODWORD(v11re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v180;
    }
    while (v118 != v180);
  }
  uint64_t v141 = *(unsigned int *)(v113 + 1200);
  if (v141)
  {
    uint64_t v142 = 0;
    uint64_t v143 = (int *)(*(void *)(v113 + 1184) + 8);
    uint64_t v144 = (uint64_t)v263;
    while (1)
    {
      int v145 = *v143;
      v143 += 20;
      if (v145 < 0) {
        break;
      }
      if (v141 == ++v142)
      {
        LODWORD(v142) = *(_DWORD *)(v113 + 1200);
        break;
      }
    }
  }
  else
  {
    LODWORD(v142) = 0;
    uint64_t v144 = (uint64_t)v263;
  }
  if (v141 != v142)
  {
    uint64_t v183 = v142;
    uint64_t v184 = (uint64_t)(v101 + 17);
    do
    {
      uint64_t v185 = *(void *)(v113 + 1184);
      *(void *)v302 = 0;
      *(void *)v302 = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v185 + 80 * v183 + 48);
      uint64_t v99 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v184, (uint64_t *)v302);
      if (v99)
      {
        *(void *)buf = 0;
        *(void *)buf = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v185 + 80 * v183 + 16);
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(v144, (unint64_t *)buf, v302);
        MurmurHash3_x64_128((uint64_t)"Default", 7, 0, (unint64_t *)v299);
        v296[0] = (*(void *)&v299[8] - 0x61C8864680B583E9 + (*(void *)v299 << 6) + (*(void *)v299 >> 2)) ^ *(void *)v299;
        memset(v299, 0, sizeof(v299));
        *(_DWORD *)&v299[36] = 0x7FFFFFFF;
        uint64_t v186 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v277, v296, (uint64_t *)v299);
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v299);
        uint64_t v99 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(v186, (unint64_t *)buf, v302);
      }
      uint64_t v113 = v276;
      unsigned int v187 = *(_DWORD *)(v276 + 1200);
      if (v187 <= (int)v142 + 1) {
        unsigned int v187 = v142 + 1;
      }
      uint64_t v101 = v281;
      while (1)
      {
        uint64_t v183 = (v142 + 1);
        if (v187 - 1 == v142) {
          break;
        }
        LODWORD(v142) = v142 + 1;
        unsigned int v188 = v183;
        if ((*(_DWORD *)(*(void *)(v276 + 1184) + 80 * v183 + 8) & 0x80000000) != 0) {
          goto LABEL_330;
        }
      }
      unsigned int v188 = v187;
LABEL_330:
      LODWORD(v142) = v188;
    }
    while (v141 != v188);
  }
  uint64_t v189 = *(unsigned int *)(v113 + 1248);
  if (v189)
  {
    uint64_t v190 = 0;
    unsigned __int16 v191 = (int *)(*(void *)(v113 + 1232) + 8);
    while (1)
    {
      int v192 = *v191;
      v191 += 24;
      if (v192 < 0) {
        break;
      }
      if (v189 == ++v190)
      {
        LODWORD(v190) = *(_DWORD *)(v113 + 1248);
        break;
      }
    }
  }
  else
  {
    LODWORD(v190) = 0;
  }
  if (v189 != v190)
  {
    uint64_t v193 = v190;
    uint64_t v284 = (uint64_t)(v101 + 17);
    uint64_t v16 = 0x7FFFFFFFLL;
    unsigned int v194 = *(_DWORD *)(v113 + 1248);
    unsigned int v275 = v194;
    while (1)
    {
      uint64_t v195 = *(void *)(v113 + 1232);
      uint64_t v196 = v195 + 96 * v193;
      unsigned int v199 = *(_DWORD *)(v196 + 80);
      uint64_t v197 = (int *)(v196 + 80);
      uint64_t v198 = v199;
      if (v199)
      {
        uint64_t v200 = 0;
        long long v201 = (int *)(*(void *)(v195 + 96 * v193 + 64) + 8);
        while (1)
        {
          int v202 = *v201;
          v201 += 20;
          if (v202 < 0) {
            break;
          }
          if (v198 == ++v200)
          {
            LODWORD(v200) = v198;
            break;
          }
        }
      }
      else
      {
        LODWORD(v200) = 0;
      }
      if (v198 != v200) {
        break;
      }
LABEL_364:
      if (v194 <= (int)v190 + 1) {
        unsigned int v213 = v190 + 1;
      }
      else {
        unsigned int v213 = v194;
      }
      uint64_t v113 = v276;
      while (1)
      {
        uint64_t v193 = (v190 + 1);
        if (v213 - 1 == v190) {
          break;
        }
        LODWORD(v190) = v190 + 1;
        unsigned int v214 = v193;
        if ((*(_DWORD *)(*(void *)(v276 + 1232) + 96 * v193 + 8) & 0x80000000) != 0) {
          goto LABEL_372;
        }
      }
      unsigned int v214 = v213;
LABEL_372:
      LODWORD(v190) = v214;
      if (v189 == v214) {
        goto LABEL_373;
      }
    }
    uint64_t v203 = v200;
    long long v204 = (uint64_t *)(v195 + 96 * v193 + 64);
    while (1)
    {
      uint64_t v205 = *v204;
      uint64_t v206 = *v204 + 80 * v203 + 48;
      *(void *)v302 = 0;
      *(void *)v302 = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v206);
      uint64_t v99 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v284, (uint64_t *)v302);
      if (v99)
      {
        *(void *)buf = 0;
        *(void *)buf = re::Hash<re::DynamicString>::operator()((uint64_t)v299, v205 + 80 * v203 + 16);
        v296[0] = re::Hash<re::DynamicString>::operator()((uint64_t)v299, (uint64_t)(v197 - 16));
        memset(v299, 0, sizeof(v299));
        *(_DWORD *)&v299[36] = 0x7FFFFFFF;
        uint64_t v207 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v277, v296, (uint64_t *)v299);
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v299);
        if (*(void *)v207)
        {
          unint64_t v208 = *(void *)buf % (unint64_t)*(unsigned int *)(v207 + 24);
          uint64_t v209 = *(unsigned int *)(*(void *)(v207 + 8) + 4 * v208);
          if (v209 != 0x7FFFFFFF)
          {
            uint64_t v210 = *(void *)(v207 + 16);
            while (*(void *)(v210 + 24 * v209 + 8) != *(void *)buf)
            {
              LODWORD(v20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v210 + 24 * v209) & 0x7FFFFFFF;
              if (v209 == 0x7FFFFFFF) {
                goto LABEL_355;
              }
            }
            goto LABEL_356;
          }
        }
        else
        {
          LODWORD(v20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        }
LABEL_355:
        uint64_t v99 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(v207, v208, *(unint64_t *)buf, buf, v302);
        ++*(_DWORD *)(v207 + 40);
      }
LABEL_356:
      int v211 = *v197;
      if (*v197 <= (v200 + 1)) {
        int v211 = v200 + 1;
      }
      while (1)
      {
        uint64_t v203 = (v200 + 1);
        if (v211 - 1 == v200) {
          break;
        }
        LODWORD(v200) = v200 + 1;
        int v212 = v203;
        if ((*(_DWORD *)(*v204 + 80 * v203 + 8) & 0x80000000) != 0) {
          goto LABEL_362;
        }
      }
      int v212 = v211;
LABEL_362:
      LODWORD(v200) = v212;
      if (v198 == v212)
      {
        unsigned int v194 = *(_DWORD *)(v276 + 1248);
        LODWORD(v18re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v275;
        goto LABEL_364;
      }
    }
  }
LABEL_373:
  int v215 = v281;
  uint64_t v216 = *((unsigned int *)v281 + 12);
  if (v216)
  {
    uint64_t v217 = 0;
    unint64_t v218 = (int *)v281[4];
    while (1)
    {
      int v219 = *v218;
      v218 += 6;
      if (v219 < 0) {
        break;
      }
      if (v216 == ++v217)
      {
        LODWORD(v217) = *((_DWORD *)v281 + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v217) = 0;
  }
  if (v216 != v217)
  {
    uint64_t v220 = v217;
    uint64_t v17 = 24;
    unint64_t v28 = 1;
    unsigned int v221 = *((_DWORD *)v281 + 12);
    do
    {
      uint64_t v222 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(v281 + 17), *(void *)(v215[4] + 24 * v220 + 16));
      int v215 = v281;
      uint64_t v223 = *(void *)(v222 + 8);
      if (v223)
      {
        unint64_t v92 = *(void *)(v222 + 16);
        uint64_t v3 = 4 * v223;
        do
        {
          unint64_t v18 = *(unsigned int *)v92;
          unint64_t v224 = v215[15];
          if (v224 <= v18) {
            goto LABEL_450;
          }
          uint64_t v225 = *(void *)(v215[16] + 8 * v18);
          if (*(unsigned char *)(v225 + 2845))
          {
            BOOL v226 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v225 + 2744, (uint64_t)buf);
            int v215 = v281;
            if (v226) {
              *((unsigned char *)v281 + 1433) = 1;
            }
          }
          v92 += 4;
          v3 -= 4;
        }
        while (v3);
        unsigned int v221 = *((_DWORD *)v215 + 12);
      }
      if (v221 <= (int)v217 + 1) {
        unsigned int v227 = v217 + 1;
      }
      else {
        unsigned int v227 = v221;
      }
      while (1)
      {
        uint64_t v220 = (v217 + 1);
        if (v227 - 1 == v217) {
          break;
        }
        LODWORD(v217) = v217 + 1;
        unsigned int v228 = v220;
        if ((*(_DWORD *)(v215[4] + 24 * v220) & 0x80000000) != 0) {
          goto LABEL_396;
        }
      }
      unsigned int v228 = v227;
LABEL_396:
      LODWORD(v217) = v228;
    }
    while (v216 != v228);
  }
  uint64_t v229 = *((unsigned int *)v215 + 24);
  if (v229)
  {
    uint64_t v17 = 0;
    float32x4_t v230 = (int *)(v215[10] + 8);
    while (1)
    {
      int v231 = *v230;
      v230 += 18;
      if (v231 < 0) {
        break;
      }
      if (v229 == ++v17)
      {
        uint64_t v17 = *((unsigned int *)v215 + 24);
        break;
      }
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (v229 == v17) {
    goto LABEL_404;
  }
  uint64_t v234 = v17;
  uint64_t v285 = (uint64_t)(v215 + 17);
  unint64_t v92 = 24;
  unint64_t v18 = 1;
  unsigned int v235 = *((_DWORD *)v215 + 24);
  uint64_t v277 = v235;
  do
  {
    uint64_t v236 = v215[10];
    uint64_t v237 = v236 + 72 * v234;
    uint64_t v3 = *(unsigned int *)(v237 + 56);
    v280 = (unsigned int *)(v237 + 56);
    unint64_t v224 = 0;
    if (*(_DWORD *)(v237 + 56))
    {
      simd_float4 v238 = *(int **)(v236 + 72 * v234 + 40);
      while (1)
      {
        int v239 = *v238;
        v238 += 6;
        if (v239 < 0) {
          break;
        }
        if (v3 == ++v224)
        {
          unint64_t v224 = v3;
          break;
        }
      }
    }
    if (v3 == v224) {
      goto LABEL_440;
    }
    unint64_t v240 = v224;
    uint64_t v16 = v236 + 72 * v234 + 40;
    unsigned int v241 = v3;
    do
    {
      uint64_t v242 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v285, *(void *)(*(void *)v16 + 24 * v240 + 16));
      unint64_t v243 = v281;
      uint64_t v244 = *(void *)(v242 + 8);
      if (!v244) {
        goto LABEL_431;
      }
      float32x4_t v245 = *(unsigned int **)(v242 + 16);
      uint64_t v246 = 4 * v244;
      while (2)
      {
        unint64_t v28 = *v245;
        unint64_t v247 = v243[15];
        if (v247 <= v28)
        {
          v296[0] = 0;
          long long v300 = 0u;
          long long v301 = 0u;
          memset(v299, 0, sizeof(v299));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v302 = 136315906;
          *(void *)&v302[4] = "operator[]";
          *(_WORD *)&v302[12] = 1024;
          *(_DWORD *)&v302[14] = 468;
          *(_WORD *)&v302[18] = 2048;
          *(void *)&v302[20] = v28;
          __int16 v303 = 2048;
          unint64_t v304 = v247;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_450:
          v296[0] = 0;
          long long v300 = 0u;
          long long v301 = 0u;
          memset(v299, 0, sizeof(v299));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v302 = 136315906;
          *(void *)&v302[4] = "operator[]";
          *(_WORD *)&v302[12] = 1024;
          *(_DWORD *)&v302[14] = 468;
          *(_WORD *)&v302[18] = 2048;
          *(void *)&v302[20] = v18;
          __int16 v303 = 2048;
          unint64_t v304 = v224;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_451:
          unint64_t v9 = (unint64_t)&v299[8];
          int8x16_t v286 = (int8x16_t)v26;
          while (1)
          {
            long long v254 = (void *)(*(void *)(v3 + 1320) + 72 * v92);
            *(void *)v299 = *v254;
            re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown((uint64_t)&v299[8], v254 + 1);
            re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v18, (uint64_t *)v299, (uint64_t *)&v299[8]);
            if ((void)v301)
            {
              if (*(void *)&v299[16]) {
                *(void *)&v299[16] = 0;
              }
              uint64_t v11 = *(void *)&v299[8];
              if (*(void *)&v299[8]) {
                (*(void (**)(void, void))(*(void *)v301 + 40))(v301, *(void *)&v299[8]);
              }
            }
            unint64_t v255 = v92 >> 4;
            unint64_t v256 = *(void *)(v3 + 1328);
            if (v92 >> 4 >= v256 >> 4) {
              goto LABEL_158;
            }
            unint64_t v257 = __clz(__rbit64((-2 << (v92 & 0xF)) & v28));
            if (v257 >= 0x40)
            {
              unint64_t v258 = v256 >> 4;
              uint64_t v259 = 16 * v255;
              unint64_t v260 = ~v255 + v258;
              while (v260)
              {
                unint64_t v28 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)v17 + 16 + v259)), v286)))), v6);
                unint64_t v261 = __clz(__rbit64(v28));
                v259 += 16;
                --v260;
                if (v261 <= 0x3F)
                {
                  unint64_t v92 = v261 + v259;
                  goto LABEL_464;
                }
              }
              goto LABEL_158;
            }
            unint64_t v92 = v257 + (v92 & 0xFFFFFFFFFFFFFFF0);
LABEL_464:
            if (v92 == -1) {
              goto LABEL_158;
            }
          }
        }
        uint64_t v248 = *(void *)(v243[16] + 8 * v28);
        if (*(unsigned char *)(v248 + 2845))
        {
          BOOL v249 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v248 + 2744, (uint64_t)buf);
          unint64_t v243 = v281;
          if (v249) {
            *((unsigned char *)v281 + 1433) = 1;
          }
        }
        ++v245;
        v246 -= 4;
        if (v246) {
          continue;
        }
        break;
      }
      unsigned int v241 = *v280;
LABEL_431:
      if (v241 <= (int)v224 + 1) {
        unint64_t v250 = (v224 + 1);
      }
      else {
        unint64_t v250 = v241;
      }
      while (1)
      {
        unint64_t v240 = (v224 + 1);
        if (v250 - 1 == v224) {
          break;
        }
        LODWORD(v224) = v224 + 1;
        unint64_t v251 = v240;
        if ((*(_DWORD *)(*(void *)v16 + 24 * v240) & 0x80000000) != 0) {
          goto LABEL_438;
        }
      }
      unint64_t v251 = v250;
LABEL_438:
      unint64_t v224 = v251;
    }
    while (v3 != v251);
    unsigned int v235 = *((_DWORD *)v243 + 24);
    LODWORD(v22re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v277;
LABEL_440:
    if (v235 <= (int)v17 + 1) {
      uint64_t v252 = (v17 + 1);
    }
    else {
      uint64_t v252 = v235;
    }
    while (1)
    {
      uint64_t v234 = (v17 + 1);
      if (v252 - 1 == v17) {
        break;
      }
      LODWORD(v17) = v17 + 1;
      uint64_t v253 = v234;
      if ((*(_DWORD *)(v281[10] + 72 * v234 + 8) & 0x80000000) != 0) {
        goto LABEL_447;
      }
    }
    uint64_t v253 = v252;
LABEL_447:
    uint64_t v17 = v253;
    int v215 = v281;
  }
  while (v229 != v253);
LABEL_404:
  if (v215)
  {
    int v232 = v215 + 1;
    int v215 = v281;
  }
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v215;
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
  }
  double v233 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v287);
  if (v291 && v292) {
    (*(void (**)(double))(*(void *)v291 + 40))(v233);
  }
  if (v281) {
}
  }

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 56 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *a2;
  if (*(void *)result)
  {
    unint64_t v7 = v6 % *(unsigned int *)(result + 24);
    uint64_t v8 = *(unsigned int *)(*(void *)(result + 8) + 4 * v7);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(result + 16);
      if (*(void *)(v9 + 48 * v8 + 8) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 48 * v8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v9 + 48 * v8 + 8) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  uint64_t result = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

BOOL re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 48 * v3 + 8) == v2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 48 * v3) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 48 * v3 + 8) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(uint64_t result, unint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *a2;
  if (*(void *)result)
  {
    unint64_t v7 = v6 % *(unsigned int *)(result + 24);
    uint64_t v8 = *(unsigned int *)(*(void *)(result + 8) + 4 * v7);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(result + 16);
      if (*(void *)(v9 + 24 * v8 + 8) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v9 + 24 * v8 + 8) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  BOOL result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 48 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 48 * v2) & 0x7FFFFFFF;
      if (v2 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 48 * v2 + 8) == a2) {
        return v4 + 48 * v2 + 16;
      }
    }
    return 0;
  }
  return v4 + 48 * v2 + 16;
}

uint64_t re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(uint64_t a1, const re::DynamicString *a2, const re::DynamicString *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v17 = re::DynamicString::DynamicString((re::DynamicString *)a1, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v17 + 32), a3);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 192) = &unk_26E6D3970;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 56re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 64), a4);
  *(void *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 80re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 68re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(void *)(a1 + 720) = &unk_26E6D78A0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 90re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 100re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 92re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 110re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1072), a5);
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1152) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1160) = 0;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 1168, a6);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 1216, a7);
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1296) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1304) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1264), a8);
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 132re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 1312), a9);
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 140re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1416) = 0;
  unint64_t v18 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1376), a10);
  *(_OWORD *)(a1 + 1424) = 0u;
  re::make::shared::object<re::FunctionReflectionCache>((re *)v18, &v23);
  uint64_t v19 = *(void *)(a1 + 1432);
  *(void *)(a1 + 1432) = v23;
  uint64_t v23 = v19;
  if (v19) {

  }
  unint64_t v20 = dispatch_group_create();
  long long v21 = *(void **)(a1 + 1424);
  *(void *)(a1 + 1424) = v20;

  return a1;
}

uint64_t re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a1, 0);
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 32), 0);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 192) = &unk_26E6D3970;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 56re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 80re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 68re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 720) = &unk_26E6D78A0;
  *(_OWORD *)(a1 + 90re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 100re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 92re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 110re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1156) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 1204) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1252) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1300) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 140re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 132re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1412) = 0x7FFFFFFFLL;
  uint64_t v9 = (uint64_t *)(a1 + 1432);
  *(_OWORD *)(a1 + 1424) = 0u;
  re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (re::DynamicString *)(a2 + 4));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 64), a2 + 8);
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 592), a2 + 74);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a1 + 1072, a2 + 134);
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1120, a2 + 140);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1168, a2 + 146);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1216, a2 + 152);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1264, a2 + 158);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1376, a2 + 172);
  if ((uint64_t *)a1 == a2)
  {
    uint64_t v5 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, a2[179]);
  }
  else
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 1312), a2 + 164);
    uint64_t v5 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, a2[179]);
    uint64_t v6 = a2[178];
    a2[178] = 0;
    unint64_t v7 = *(void **)(a1 + 1424);
    *(void *)(a1 + 1424) = v6;
  }
  if (*v5)
  {

    uint64_t *v5 = 0;
  }
  return a1;
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t *re::MaterialDefinitionBuilder::operator=(uint64_t *a1, uint64_t *a2)
{
  re::MaterialDefinitionBuilder::destroy((re::MaterialDefinitionBuilder *)a1);
  re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 4), (re::DynamicString *)(a2 + 4));
  re::ShaderParameterTable::operator=(a1 + 8, a2 + 8);
  re::TextureParameterTable::operator=(a1 + 74, a2 + 74);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=((uint64_t)(a1 + 134), a2 + 134);
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 140), a2 + 140);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 146), a2 + 146);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 152), a2 + 152);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 158), a2 + 158);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 172), a2 + 172);
  if (a1 == a2)
  {
    uint64_t v4 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 179, a2[179]);
  }
  else
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 164, a2 + 164);
    uint64_t v4 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 179, a2[179]);
    uint64_t v5 = a2[178];
    a2[178] = 0;
    uint64_t v6 = (void *)a1[178];
    a1[178] = v5;
  }
  if (*v4)
  {

    uint64_t *v4 = 0;
  }
  return a1;
}

void re::MaterialDefinitionBuilder::destroy(re::MaterialDefinitionBuilder *this)
{
  uint64_t v2 = *((void *)this + 178);
  if (v2) {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v3 = *((void *)this + 179);
  if (v3)
  {

    *((void *)this + 17re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  }
  uint64_t v4 = *((unsigned int *)this + 288);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 142) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 14;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 288);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      re::internal::destroyPersistent<re::TechniqueDefinitionBuilder>((re *)"destroy", 1343, *(re::TechniqueDefinitionBuilder **)(*((void *)this + 142) + 56 * v8 + 48));
      if (*((_DWORD *)this + 288) <= (v5 + 1)) {
        int v9 = v5 + 1;
      }
      else {
        int v9 = *((_DWORD *)this + 288);
      }
      int v10 = v5;
      while (1)
      {
        uint64_t v8 = (v10 + 1);
        if (v9 - 1 == v10) {
          break;
        }
        ++v10;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((void *)this + 142) + 56 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_21;
        }
      }
      LODWORD(v5) = v9;
LABEL_21:
      ;
    }
    while (v4 != v5);
  }
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)this + 1120);
}

void re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder(re::MaterialDefinitionBuilder *this)
{
  re::MaterialDefinitionBuilder::destroy(this);
  uint64_t v2 = *((void *)this + 179);
  if (v2)
  {

    *((void *)this + 17re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  }

  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 172);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this + 1312);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 158);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 152);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 146);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 140);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 134);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialDefinitionBuilder *)((char *)this + 592));
  re::ShaderParameterTable::~ShaderParameterTable((re::MaterialDefinitionBuilder *)((char *)this + 64));
  re::DynamicString::deinit((re::MaterialDefinitionBuilder *)((char *)this + 32));
  re::DynamicString::deinit(this);
}

re *re::internal::destroyPersistent<re::TechniqueDefinitionBuilder>(re *result, uint64_t a2, re::TechniqueDefinitionBuilder *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::TechniqueDefinitionBuilder::~TechniqueDefinitionBuilder(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::TechniqueDefinitionBuilder *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_198, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

unint64_t re::MaterialDefinitionBuilder::addTechnique@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
  if (!*(void *)(a1 + 1120)
    || (uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 1128) + 4 * (v6 % *(unsigned int *)(a1 + 1144))),
        v7 == 0x7FFFFFFF))
  {
LABEL_6:
    uint64_t v32 = a3;
    int v9 = re::globalAllocators((re *)v6);
    int v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 688, 8);
    bzero(v10, 0x2B0uLL);
    uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10, 0);
    *(_OWORD *)(v10 + 7) = 0u;
    *(_OWORD *)(v10 + 5) = 0u;
    id v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10 + 5, 0);
    *((_DWORD *)v10 + 30) = 0;
    *(_OWORD *)(v10 + 13) = 0u;
    *(_OWORD *)(v10 + 11) = 0u;
    *(_OWORD *)(v10 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
    *(void *)((char *)v10 + 124) = 0x7FFFFFFFLL;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
    re::DynamicString::setCapacity(v10 + 18, 0);
    v10[30] = 0xFFFF000100010000;
    *((_DWORD *)v10 + 56) = 0;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *(void *)((char *)v10 + 22re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
    *((_WORD *)v10 + 124) = 1792;
    *((unsigned char *)v10 + 250) = 4;
    *(_OWORD *)((char *)v10 + 252) = xmmword_2343AD2D0;
    *((_DWORD *)v10 + 67) = 5;
    v10[34] = 0xF00000000;
    v10[38] = 0;
    v10[39] = 0;
    v10[37] = 0;
    *((_DWORD *)v10 + 80) = 0;
    v10[35] = 0;
    *(void *)((char *)v10 + 285) = 0;
    v10[64] = 0;
    *((unsigned char *)v10 + 520) = 0;
    *((_DWORD *)v10 + 142) = 0;
    *(_OWORD *)(v10 + 67) = 0u;
    *(_OWORD *)(v10 + 6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
    *((_DWORD *)v10 + 90) = 0;
    *(_OWORD *)(v10 + 43) = 0u;
    *(_OWORD *)(v10 + 41) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_OWORD *)v10 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *((_DWORD *)v10 + 116) = 0;
    *(_OWORD *)(v10 + 5re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
    *(_OWORD *)(v10 + 61) = 0u;
    *((_DWORD *)v10 + 126) = 0;
    *(void *)((char *)v10 + 572) = 0x7FFFFFFFLL;
    *(_OWORD *)(v10 + 73) = 0u;
    *(_OWORD *)(v10 + 75) = 0u;
    *((_DWORD *)v10 + 154) = 0;
    *(void *)((char *)v10 + 620) = 0x7FFFFFFFLL;
    *(_OWORD *)(v10 + 7re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
    *(_OWORD *)(v10 + 81) = 0u;
    *((_DWORD *)v10 + 166) = 0;
    *(void *)((char *)v10 + 66re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
    *((_DWORD *)v10 + 170) = 0;
    *((_DWORD *)v10 + 171) = 0x10000;
    re::DynamicString::operator=((re::DynamicString *)v10, (re::DynamicString *)a2);
    unint64_t v14 = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
    unint64_t v15 = v14;
    int v33 = (void *)(a1 + 1120);
    if (*(void *)(a1 + 1120))
    {
      unint64_t v16 = v14 % *(unsigned int *)(a1 + 1144);
      uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 1128) + 4 * v16);
      if (v17 != 0x7FFFFFFF)
      {
        uint64_t v18 = *(void *)(a1 + 1136);
        while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, a2))
        {
          uint64_t v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
          if (v17 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        goto LABEL_19;
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
LABEL_13:
    uint64_t v19 = *(unsigned int *)(a1 + 1156);
    if (v19 == 0x7FFFFFFF)
    {
      uint64_t v19 = *(unsigned int *)(a1 + 1152);
      int v20 = v19;
      if (v19 == *(_DWORD *)(a1 + 1144))
      {
        re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v33, 2 * *(_DWORD *)(a1 + 1148));
        LODWORD(v16) = v15 % *(unsigned int *)(a1 + 1144);
        int v20 = *(_DWORD *)(a1 + 1152);
      }
      *(_DWORD *)(a1 + 1152) = v20 + 1;
      uint64_t v21 = *(void *)(a1 + 1136);
      int v22 = *(_DWORD *)(v21 + 56 * v19 + 8);
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 1136);
      int v22 = *(_DWORD *)(v21 + 56 * v19 + 8);
      *(_DWORD *)(a1 + 1156) = v22 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v21 + 56 * v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 1136) + 56 * v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 1136) + 56 * v19 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 1128) + 4 * v16);
    *(void *)(*(void *)(a1 + 1136) + 56 * v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v15;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 1136) + 56 * v19 + 16), (const re::DynamicString *)a2);
    *(void *)(*(void *)(a1 + 1136) + 56 * v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v10;
    *(_DWORD *)(*(void *)(a1 + 1128) + 4 * v16) = v19;
    ++*(_DWORD *)(a1 + 1148);
    ++*(_DWORD *)(a1 + 1160);
LABEL_19:
    unint64_t result = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
    uint64_t v24 = 0x7FFFFFFFLL;
    if (*v33)
    {
      uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 1128) + 4 * (result % *(unsigned int *)(a1 + 1144)));
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *(void *)(a1 + 1136);
        uint64_t v24 = 0x7FFFFFFFLL;
        while (1)
        {
          unint64_t result = re::DynamicString::operator==(v26 + 56 * v25 + 16, a2);
          if (result) {
            break;
          }
          uint64_t v25 = *(_DWORD *)(v26 + 56 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF) {
            goto LABEL_28;
          }
        }
        uint64_t v24 = v25;
      }
    }
LABEL_28:
    uint64_t v28 = *(void *)(*(void *)(a1 + 1136) + 56 * v24 + 48);
    *(unsigned char *)uint64_t v32 = 1;
    *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28;
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 1136);
  while (1)
  {
    unint64_t v6 = re::DynamicString::operator==(v8 + 56 * v7 + 16, a2);
    if (v6) {
      break;
    }
    uint64_t v7 = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF) {
      goto LABEL_6;
    }
  }
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v27 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v27 = a2 + 9;
  }
  unint64_t result = re::DynamicString::format((re::DynamicString *)"Duplicate technique added to MaterialBuilder %s", (re::DynamicString *)&v34, v27);
  long long v29 = v34;
  uint64_t v30 = v35;
  uint64_t v31 = v36;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v29;
  *(void *)(a3 + 24) = v30;
  *(void *)(a3 + 32) = v31;
  return result;
}

uint64_t re::MaterialBuilder::MaterialBuilder(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v15 = *a5;
  *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
  if (v15) {
    *(unsigned char *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a5[1];
  }
  int v16 = a5[2];
  *(unsigned char *)(a1 + 10) = v16;
  if (v16) {
    *(unsigned char *)(a1 + 11) = a5[3];
  }
  int v17 = a5[4];
  *(unsigned char *)(a1 + 12) = v17;
  if (v17) {
    *(unsigned char *)(a1 + 13) = a5[5];
  }
  int v18 = a5[6];
  *(unsigned char *)(a1 + 14) = v18;
  if (v18) {
    *(unsigned char *)(a1 + 15) = a5[7];
  }
  int v19 = a5[8];
  *(unsigned char *)(a1 + 16) = v19;
  if (v19) {
    *(unsigned char *)(a1 + 17) = a5[9];
  }
  int v20 = a5[10];
  *(unsigned char *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20;
  if (v20) {
    *(unsigned char *)(a1 + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a5[11];
  }
  int v21 = a5[12];
  *(unsigned char *)(a1 + 20) = v21;
  if (v21) {
    *(unsigned char *)(a1 + 21) = a5[13];
  }
  int v22 = a5[14];
  *(unsigned char *)(a1 + 22) = v22;
  if (v22) {
    *(unsigned char *)(a1 + 23) = a5[15];
  }
  int v23 = a5[16];
  *(unsigned char *)(a1 + 24) = v23;
  if (v23) {
    *(unsigned char *)(a1 + 25) = a5[17];
  }
  uint64_t v24 = *a2;
  *(void *)(a1 + 32) = *a2;
  if (v24) {
    id v25 = (id)(v24 + 8);
  }
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 76) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 40), a4);
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 216) = &unk_26E6D3970;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 36re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  uint64_t v26 = re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), a3);
  v26[95] = 0;
  *(_OWORD *)(v26 + 93) = 0u;
  *(_OWORD *)(v26 + 91) = 0u;
  *(_OWORD *)(v26 + 8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *(_OWORD *)(v26 + 87) = 0u;
  *(_OWORD *)(v26 + 85) = 0u;
  *(_OWORD *)(v26 + 83) = 0u;
  *((_OWORD *)v26 + 33) = 0u;
  *((_OWORD *)v26 + 34) = 0u;
  *((_OWORD *)v26 + 35) = 0u;
  *((_OWORD *)v26 + 36) = 0u;
  *((_OWORD *)v26 + 37) = 0u;
  *((_OWORD *)v26 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v26 + 3re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)v26 + 40) = 0u;
  v26[82] = (uint64_t)&unk_26E6D78A0;
  *((_OWORD *)v26 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)v26 + 50) = 0u;
  *((_OWORD *)v26 + 51) = 0u;
  *((_OWORD *)v26 + 52) = 0u;
  *((_OWORD *)v26 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)((char *)v26 + 844) = 0u;
  v26[128] = 0;
  *((_OWORD *)v26 + 62) = 0u;
  *((_OWORD *)v26 + 63) = 0u;
  *((_OWORD *)v26 + 60) = 0u;
  *((_OWORD *)v26 + 61) = 0u;
  *((_OWORD *)v26 + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v26 + 5re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)v26 + 56) = 0u;
  *((_OWORD *)v26 + 57) = 0u;
  *((_OWORD *)v26 + 54) = 0u;
  *((_OWORD *)v26 + 55) = 0u;
  uint64_t v27 = a6[1];
  v26[126] = *a6;
  v26[127] = v27;
  *a6 = 0;
  a6[1] = 0;
  uint64_t v28 = v26[128];
  v26[128] = a6[2];
  a6[2] = v28;
  v26[130] = 0;
  v26[129] = 0;
  v26[131] = 0;
  uint64_t v29 = a6[4];
  v26[129] = a6[3];
  v26[130] = v29;
  a6[3] = 0;
  a6[4] = 0;
  uint64_t v30 = v26[131];
  v26[131] = a6[5];
  a6[5] = v30;
  *((_DWORD *)v26 + 264) = 0;
  *(_OWORD *)(v26 + 133) = 0u;
  *(_OWORD *)(v26 + 135) = 0u;
  *(_OWORD *)(v26 + 137) = 0u;
  *(_OWORD *)(v26 + 13re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  v26[141] = 0;
  v26[142] = a8;
  *((unsigned char *)v26 + 1144) = 0;
  if (*(v26 - 7))
  {
    unint64_t v31 = *(void *)(a7 + 8);
    if (v31) {
      unint64_t v32 = v31 >> 1;
    }
    else {
      unint64_t v32 = v31 >> 1;
    }
    if (v32)
    {
      unint64_t v33 = v32 + 1;
      long long v34 = re::globalAllocators((re *)v26);
      uint64_t v35 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v34[2] + 32))(v34[2], v33, 0);
      *(void *)a1 = v35;
      if (*(void *)(a7 + 8)) {
        uint64_t v36 = *(const char **)(a7 + 16);
      }
      else {
        uint64_t v36 = (const char *)(a7 + 9);
      }
    }
    else
    {
      long long v37 = (re *)strlen(*(const char **)(*a2 + 1424));
      long long v38 = (char *)v37 + 1;
      long long v39 = re::globalAllocators(v37);
      uint64_t v35 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v39[2] + 32))(v39[2], v38, 0);
      *(void *)a1 = v35;
      uint64_t v36 = *(const char **)(*a2 + 1424);
    }
    uint64_t v40 = strcpy(v35, v36);
    re::make::shared::object<re::FunctionReflectionCache>((re *)v40, &v47);
    uint64_t v41 = *(void *)(a1 + 1168);
    *(void *)(a1 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v47;
    uint64_t v47 = v41;
    if (v41) {

    }
    uint64_t v42 = dispatch_group_create();
    signed int v43 = *(void **)(a1 + 1152);
    *(void *)(a1 + 1152) = v42;

    uint64_t v44 = dispatch_group_create();
    unint64_t v45 = *(void **)(a1 + 1160);
    *(void *)(a1 + 1160) = v44;
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 1144) = 8;
  }
  return a1;
}

re::MaterialBuilder *re::MaterialBuilder::MaterialBuilder(re::MaterialBuilder *this)
{
  uint64_t v42 = 0;
  bzero(v11, 0x210uLL);
  v11[16] = (uint64_t)&unk_26E6D3970;
  memset(&v11[17], 0, 24);
  long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  int v12 = 0;
  int v23 = 0;
  int v30 = 1;
  uint64_t v33 = 0;
  int v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  int v41 = 0;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  __int16 v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  memset(v6, 0, sizeof(v6));
  re::MaterialBuilder::MaterialBuilder((uint64_t)this, &v42, v11, (uint64_t *)v9, (unsigned __int8 *)v7, (uint64_t *)v6, (uint64_t)&v4, 0);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  re::FixedArray<re::LinkedFunction>::deinit((void *)&v6[1] + 1);
  re::FixedArray<re::LinkedFunction>::deinit(v6);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v11);
  *((_DWORD *)this + 286) = 8;
  return this;
}

uint64_t re::MaterialBuilder::MaterialBuilder(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 22) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)(a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a1 + 216) = &unk_26E6D3970;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 36re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 744) = &unk_26E6D78A0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 88re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 112re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 96re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 1232) = 0;
  re::MaterialRenderFlags::operator=((unsigned char *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 1144) = *(_DWORD *)(a2 + 1144);
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a2 + 1152);
    *(void *)(a2 + 1152) = 0;
    unint64_t v6 = *(void **)(a1 + 1152);
    *(void *)(a1 + 1152) = v5;

    uint64_t v7 = *(void *)(a2 + 1160);
    *(void *)(a2 + 1160) = 0;
    __int16 v8 = *(void **)(a1 + 1160);
    *(void *)(a1 + 1160) = v7;
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 1168), *(void *)(a2 + 1168));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1120), (uint64_t *)(a2 + 1120));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1176), (uint64_t *)(a2 + 1176));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1200), (uint64_t *)(a2 + 1200));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(unsigned char *)(a1 + 1232) = *(unsigned char *)(a2 + 1232);
  uint64_t v9 = *(void *)(a2 + 32);
  if (v9)
  {

    *(void *)(a2 + 32) = 0;
  }
  *(void *)a2 = 0;
  uint64_t v10 = *(void *)(a2 + 1168);
  if (v10)
  {

    *(void *)(a2 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t *re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = *a2;
    if (*result) {
      BOOL v4 = v2 == v3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      *unint64_t result = v3;
      *a2 = v2;
      uint64_t v5 = result[1];
      uint64_t v6 = result[2];
      uint64_t v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      unint64_t result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::MaterialBuilder::operator=(uint64_t a1, uint64_t a2)
{
  re::MaterialBuilder::destroy((re::MaterialBuilder *)a1);
  *(void *)a1 = *(void *)a2;
  re::MaterialRenderFlags::operator=((unsigned char *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 1144) = *(_DWORD *)(a2 + 1144);
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a2 + 1152);
    *(void *)(a2 + 1152) = 0;
    uint64_t v6 = *(void **)(a1 + 1152);
    *(void *)(a1 + 1152) = v5;

    uint64_t v7 = *(void *)(a2 + 1160);
    *(void *)(a2 + 1160) = 0;
    __int16 v8 = *(void **)(a1 + 1160);
    *(void *)(a1 + 1160) = v7;
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 1168), *(void *)(a2 + 1168));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1120), (uint64_t *)(a2 + 1120));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1176), (uint64_t *)(a2 + 1176));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1200), (uint64_t *)(a2 + 1200));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(unsigned char *)(a1 + 1232) = *(unsigned char *)(a2 + 1232);
  uint64_t v9 = *(void *)(a2 + 32);
  if (v9)
  {

    *(void *)(a2 + 32) = 0;
  }
  *(void *)a2 = 0;
  uint64_t v10 = *(void *)(a2 + 1168);
  if (v10)
  {

    *(void *)(a2 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  return a1;
}

void re::MaterialBuilder::destroy(re::MaterialBuilder *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v4 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4[2] + 40))(v4[2], v3);
    *(void *)this = 0;
  }
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 147);
  uint64_t v5 = *((void *)this + 146);
  if (v5)
  {

    *((void *)this + 146) = 0;
  }
  *((_DWORD *)this + 286) = 8;
}

void re::MaterialBuilder::~MaterialBuilder(re::MaterialBuilder *this)
{
  re::MaterialBuilder::destroy(this);
  re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::deinit((void *)this + 150);
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 147);
  uint64_t v2 = *((void *)this + 146);
  if (v2)
  {

    *((void *)this + 146) = 0;
  }

  re::FixedArray<re::LinkedFunction>::deinit((void *)this + 140);
  re::FixedArray<re::LinkedFunction>::deinit((void *)this + 137);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialBuilder *)((char *)this + 616));
  re::ShaderParameterTable::~ShaderParameterTable((re::MaterialBuilder *)((char *)this + 88));
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 5);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {

    *((void *)this + 4) = 0;
  }
}

double re::MaterialBuilder::addOrReplaceFunctionConstants(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 24);
  if (a3)
  {
    unsigned int v9 = 0;
    uint64_t v10 = a2 + (a3 << 6);
    uint64_t v11 = a2;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)v11);
      int v35 = *(_DWORD *)(v11 + 32);
      int v12 = (_anonymous_namespace_ *)re::FixedArray<unsigned char>::FixedArray(&v36, (uint64_t *)(v11 + 40));
      if (v32) {
        long long v13 = v34;
      }
      else {
        long long v13 = v33;
      }
      long long v14 = (re::DynamicString *)re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v27);
      if (void)v27 && (BYTE8(v27)) {
        (*(void (**)(void))(*(void *)v27 + 40))();
      }
      if (v14)
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, v14);
        ++v9;
      }
      else
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, (re::DynamicString *)&v31);
      }
      if (v36)
      {
        if (v37)
        {
          (*(void (**)(void))(*(void *)v36 + 40))();
          uint64_t v37 = 0;
          uint64_t v38 = 0;
        }
        uint64_t v36 = 0;
      }
      if (v31 && (v32 & 1) != 0) {
        (*(void (**)(void))(*(void *)v31 + 40))();
      }
      v11 += 64;
    }
    while (v11 != v10);
    if (v9 >= *(_DWORD *)(a4 + 28)) {
      return result;
    }
    int v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v30 = 0x7FFFFFFFLL;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)a2);
      int v35 = *(_DWORD *)(a2 + 32);
      re::FixedArray<unsigned char>::FixedArray(&v36, (uint64_t *)(a2 + 40));
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v27, (re::DynamicString *)&v31);
      if (v36)
      {
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v36 + 40))(v36, v38, v15, v16, v17, v18);
          uint64_t v37 = 0;
          uint64_t v38 = 0;
        }
        uint64_t v36 = 0;
      }
      if (v31 && (v32 & 1) != 0) {
        (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 40))(v31, v34, v15, v16, v17, v18);
      }
      a2 += 64;
    }
    while (a2 != v10);
  }
  else
  {
    if (!*(_DWORD *)(a4 + 28)) {
      return result;
    }
    int v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v30 = 0x7FFFFFFFLL;
  }
  uint64_t v19 = *(unsigned int *)(a4 + 32);
  if (v19)
  {
    uint64_t v20 = 0;
    long long v21 = (int *)(*(void *)(a4 + 16) + 8);
    while (1)
    {
      int v22 = *v21;
      v21 += 28;
      if (v22 < 0) {
        break;
      }
      if (v19 == ++v20)
      {
        LODWORD(v20) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if (v19 != v20)
  {
    uint64_t v23 = v20;
    uint64_t v24 = *(void *)(a4 + 16);
    do
    {
      if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v27, v24 + 112 * v23 + 16))re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, (re::DynamicString *)(v24 + 112 * v23 + 48)); {
      unsigned int v25 = *(_DWORD *)(a4 + 32);
      }
      uint64_t v24 = *(void *)(a4 + 16);
      if (v25 <= (int)v20 + 1) {
        unsigned int v25 = v20 + 1;
      }
      while (1)
      {
        uint64_t v23 = (v20 + 1);
        if (v25 - 1 == v20) {
          break;
        }
        LODWORD(v20) = v20 + 1;
        unsigned int v26 = v23;
        if ((*(_DWORD *)(v24 + 112 * v23 + 8) & 0x80000000) != 0) {
          goto LABEL_49;
        }
      }
      unsigned int v26 = v25;
LABEL_49:
      LODWORD(v20) = v26;
    }
    while (v19 != v26);
  }
  return re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v27);
}

void re::MaterialBuilder::tickBuilder(re::MaterialBuilder *this@<X0>, re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  uint64_t v271 = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)this + 286);
  unsigned int v194 = this;
  switch(v6)
  {
    case 0:
      uint64_t v7 = *((void *)this + 146);
      unint64_t v8 = *((void *)this + 138);
      if (v8)
      {
        uint64_t v9 = 0;
        unsigned int v10 = 1;
        do
        {
          uint64_t v11 = *((void *)v4 + 139);
          if (!*(void *)(v11 + 144 * v9 + 48))
          {
            memset(info, 0, 28);
            memset(v256, 0, 40);
            re::DynamicString::setCapacity(&v256[1], 0);
            uint64_t v12 = v11 + 144 * v9;
            *(void *)&v244[8] = 0;
            *(void *)uint64_t v244 = 0;
            uint64_t v13 = *(void *)(v12 + 72);
            *(void *)uint64_t v244 = *(void *)(v12 + 80);
            *(void *)&v244[8] = v13;
            re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)info, (uint64_t)v244);
            size_t v14 = strlen(*(const char **)(v12 + 32));
            *(void *)uint64_t v244 = *(void *)(v12 + 32);
            *(void *)&v244[8] = v14;
            re::DynamicString::operator=((re::DynamicString *)&v256[1], (uint64_t)v244);
            v256[5] = *(void *)(v12 + 40);
            uint64_t v257 = (((v256[5] << 6) - 0x61C8864680B583E9 + (v256[5] >> 2) + (*(void *)(v12 + 24) >> 1)) ^ v256[5])
                 - 0x61C8864680B583E9;
            re::FunctionReflectionCache::addTask(v7, (uint64_t)info);
            if (v256[1])
            {
              if (v256[2]) {
                (*(void (**)(void))(*(void *)v256[1] + 40))();
              }
              memset(&v256[1], 0, 32);
            }
            this = (re::MaterialBuilder *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)info);
            uint64_t v4 = v194;
            unint64_t v8 = *((void *)v194 + 138);
          }
          uint64_t v9 = v10;
          BOOL v15 = v8 > v10++;
        }
        while (v15);
      }
      unint64_t v16 = *((void *)v4 + 141);
      if (v16)
      {
        uint64_t v17 = 0;
        unsigned int v18 = 1;
        do
        {
          uint64_t v19 = *((void *)v4 + 142);
          if (!*(void *)(v19 + 144 * v17 + 48))
          {
            memset(info, 0, 28);
            memset(v256, 0, 40);
            re::DynamicString::setCapacity(&v256[1], 0);
            uint64_t v20 = v19 + 144 * v17;
            *(void *)&v244[8] = 0;
            *(void *)uint64_t v244 = 0;
            uint64_t v21 = *(void *)(v20 + 72);
            *(void *)uint64_t v244 = *(void *)(v20 + 80);
            *(void *)&v244[8] = v21;
            re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)info, (uint64_t)v244);
            size_t v22 = strlen(*(const char **)(v20 + 32));
            *(void *)uint64_t v244 = *(void *)(v20 + 32);
            *(void *)&v244[8] = v22;
            re::DynamicString::operator=((re::DynamicString *)&v256[1], (uint64_t)v244);
            v256[5] = *(void *)(v20 + 40);
            uint64_t v257 = (((v256[5] << 6) - 0x61C8864680B583E9 + (v256[5] >> 2) + (*(void *)(v20 + 24) >> 1)) ^ v256[5])
                 - 0x61C8864680B583E9;
            re::FunctionReflectionCache::addTask(v7, (uint64_t)info);
            if (v256[1])
            {
              if (v256[2]) {
                (*(void (**)(void))(*(void *)v256[1] + 40))();
              }
              memset(&v256[1], 0, 32);
            }
            this = (re::MaterialBuilder *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)info);
            uint64_t v4 = v194;
            unint64_t v16 = *((void *)v194 + 141);
          }
          uint64_t v17 = v18;
          BOOL v15 = v16 > v18++;
        }
        while (v15);
      }
      uint64_t v3 = a2;
      if (*(void *)(*((void *)v4 + 146) + 88))
      {
        *((_DWORD *)v4 + 286) = 1;
        uint64_t v23 = (uint64_t *)((char *)v4 + 1176);
        unint64_t v24 = *(void *)(*((void *)v4 + 4) + 120);
        unint64_t v25 = *(void *)(*((void *)v194 + 4) + 120);
        uint64_t v27 = mach_absolute_time();
        uint64_t v28 = *((void *)v194 + 146);
        *(void *)(v28 + 16) = v27;
        id v242 = *((id *)v194 + 144);
        re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v28, (uint64_t)a2, &v242, 1, *((void *)v194 + 153));

        uint64_t v4 = v194;
      }
      if (*((_DWORD *)v4 + 286) == 1) {
        goto LABEL_23;
      }
      goto LABEL_26;
    case 1:
LABEL_23:
      int v29 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 144), 0)) {
        goto LABEL_28;
      }
      uint64_t v30 = *((void *)v29 + 146);
      if (*(void *)(v30 + 88)) {
        goto LABEL_28;
      }
      id v241 = *((id *)v29 + 145);
      re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v30, (uint64_t)v3, (dispatch_group_t *)&v241, 1, *((void **)v29 + 153));

      uint64_t v4 = v29;
LABEL_26:
      *((_DWORD *)v4 + 286) = 2;
LABEL_27:
      uint64_t v31 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 145), 0)) {
        goto LABEL_28;
      }
      uint64_t v32 = (uint64_t)v31 + 1096;
      re::fillLinkedArgumentsWithReflection((re::MaterialBuilder *)((char *)v31 + 1096), *((os_unfair_lock_s **)v31 + 146), (uint64_t)v239);
      if (v239[0]) {

      }
      re::fillLinkedArgumentsWithReflection((re::MaterialBuilder *)((char *)v194 + 1120), *((os_unfair_lock_s **)v194 + 146), (uint64_t)v237);
      if (v237[0]) {

      }
      re::validateMaterialFunctionReflection((re::RenderManager *)((char *)v3 + 184), v32, 3, "realitykit::geometry_parameters", "realitykit::geometry_parameters_private", "realitykit::ui_geometry_parameters_private", (uint64_t)v244);
      if (v244[0])
      {
        uint64_t v33 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v244[8]);
        long long v34 = *(_OWORD *)&info[0].numer;
        mach_timebase_info v35 = info[2];
        mach_timebase_info v36 = info[3];
        *(unsigned char *)a3 = 0;
        *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v34;
        *(mach_timebase_info *)(a3 + 24) = v35;
        *(mach_timebase_info *)(a3 + 32) = v36;
        int v37 = 1;
      }
      else
      {
        re::validateMaterialFunctionReflection((re::RenderManager *)((char *)v3 + 184), (uint64_t)v194 + 1120, 4, "realitykit::surface_parameters", "realitykit::surface_parameters_private", "realitykit::ui_surface_parameters_private", (uint64_t)&v266);
        if ((_BYTE)v266)
        {
          uint64_t v38 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v266 + 1);
          long long v39 = *(_OWORD *)&info[0].numer;
          mach_timebase_info v40 = info[2];
          mach_timebase_info v41 = info[3];
          *(unsigned char *)a3 = 0;
          *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v39;
          *(mach_timebase_info *)(a3 + 24) = v40;
          *(mach_timebase_info *)(a3 + 32) = v41;
          int v37 = 1;
        }
        else
        {
          unsigned int v180 = v194;
          re::completeLinkedFunctions(v32, (uint64_t)v194 + 40);
          if (*((void *)v3 + 13))
          {
            re::MaterialBuilder::createFunctionBuildTasks(v194);
            uint64_t v182 = *((void *)v194 + 146);
            if (*(void *)(v182 + 88))
            {
              *((_DWORD *)v194 + 286) = 3;
              if (!*((void *)v194 + 147))
              {
                unint64_t v183 = *(void *)(*((void *)v194 + 4) + 120);
                unint64_t v184 = *(void *)(*((void *)v194 + 4) + 120);
                uint64_t v186 = mach_absolute_time();
                unsigned int v180 = v194;
                uint64_t v182 = *((void *)v194 + 146);
                *(void *)(v182 + 16) = v186;
              }
              id v236 = *((id *)v180 + 144);
              re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v182, (uint64_t)v3, &v236, 1, *((void *)v194 + 153));

              unsigned int v180 = v194;
            }
            int v37 = 0;
            if (*((_DWORD *)v180 + 286) != 3) {
              *((_DWORD *)v180 + 286) = 6;
            }
          }
          else
          {
            *((_DWORD *)v194 + 286) = 7;
            int v37 = 1;
            *(unsigned char *)a3 = 1;
            *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
          }
        }
        if ((_BYTE)v266) {
      }
        }
      if (v244[0]) {

      }
      if (v37) {
        return;
      }
      uint64_t v4 = v194;
      int v6 = *((_DWORD *)v194 + 286);
LABEL_44:
      if (v6 == 5)
      {
        uint64_t v153 = *((void *)v4 + 151);
        if (v153)
        {
          uint64_t v154 = *((void *)v4 + 152);
          uint64_t v155 = v154 + 40 * v153;
          do
          {
            info[1] = 0;
            info[0] = 0;
            info[2].char numer = 1;
            info[3] = 0;
            v256[0] = 0;
            if (*(void *)v154)
            {
              unint64_t v156 = *(void *)(v154 + 8);
              info[0] = *(mach_timebase_info *)v154;
              re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)info, v156);
              char numer = info[2].numer;
              info[2].numer += 2;
              mach_timebase_info v158 = *(mach_timebase_info *)(v154 + 8);
              if (*(unint64_t *)&v158 >= *(void *)&info[1])
              {
                re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)info, *(void *)(v154 + 8));
                if (*(_DWORD *)(v154 + 16)) {
                  char v165 = (uint64_t *)(v154 + 24);
                }
                else {
                  char v165 = *(uint64_t **)(v154 + 32);
                }
                if (info[2].numer) {
                  unsigned int v166 = (uint64_t *)&info[3];
                }
                else {
                  unsigned int v166 = (uint64_t *)v256[0];
                }
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(v165, &v165[*(void *)&info[1]], v166);
                uint64_t v167 = *(void *)(v154 + 32);
                if (*(unsigned char *)(v154 + 16)) {
                  uint64_t v167 = v154 + 24;
                }
                if (*(void *)&info[1] != v158)
                {
                  unint64_t v168 = (mach_timebase_info *)v256[0];
                  if (info[2].numer) {
                    unint64_t v168 = &info[3];
                  }
                  uint64_t v169 = (mach_timebase_info *)(v167 + 8 * *(void *)&info[1]);
                  unint64_t v170 = &v168[*(void *)&info[1]];
                  uint64_t v171 = 8 * *(void *)&v158 - 8 * *(void *)&info[1];
                  do
                  {
                    mach_timebase_info v172 = *v169;
                    *unint64_t v170 = *v169;
                    if (v172) {
                      id v173 = (id)(*(void *)&v172 + 8);
                    }
                    ++v169;
                    ++v170;
                    v171 -= 8;
                  }
                  while (v171);
                }
              }
              else
              {
                int v159 = numer & 1;
                if (*(_DWORD *)(v154 + 16)) {
                  int v160 = (uint64_t *)(v154 + 24);
                }
                else {
                  int v160 = *(uint64_t **)(v154 + 32);
                }
                if (v159) {
                  uint64_t v161 = (uint64_t *)&info[3];
                }
                else {
                  uint64_t v161 = (uint64_t *)v256[0];
                }
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(v160, &v160[*(void *)&v158], v161);
                if (info[2].numer) {
                  uint64_t v162 = &info[3];
                }
                else {
                  uint64_t v162 = (mach_timebase_info *)v256[0];
                }
                if (v158 != *(void *)&info[1])
                {
                  uint64_t v163 = &v162[*(void *)&v158];
                  uint64_t v164 = 8 * *(void *)&info[1] - 8 * *(void *)&v158;
                  do
                  {
                    if (*v163)
                    {

                      *uint64_t v163 = 0;
                    }
                    ++v163;
                    v164 -= 8;
                  }
                  while (v164);
                }
              }
              info[1] = v158;
              uint64_t v174 = (info[2].numer & 1) != 0 ? &info[3] : (mach_timebase_info *)v256[0];
              if (v158)
              {
                for (uint64_t i = 8 * *(void *)&v158; i; i -= 8)
                {
                  mach_timebase_info v176 = *v174;
                  if (*v174)
                  {
                    uint64_t v177 = (void *)(*(void *)&v176 + 8);
                    id v178 = (id)(*(void *)&v176 + 8);
                    int v179 = atomic_load((unsigned __int8 *)(*(void *)&v176 + 240));
                    if (v179 == 1)
                    {
                      *(unsigned char *)a3 = 1;
                      *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;

                      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(info);
                      return;
                    }
                  }
                  ++v174;
                }
              }
            }
            re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(info);
            uint64_t v4 = v194;
            v154 += 40;
          }
          while (v154 != v155);
        }
        *((_DWORD *)v4 + 286) = 6;
        goto LABEL_315;
      }
      if (v6 == 4) {
        goto LABEL_50;
      }
      if (v6 != 3)
      {
LABEL_315:
        *(unsigned char *)a3 = 1;
        *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
        return;
      }
      uint64_t v42 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 144), 0)) {
        goto LABEL_28;
      }
      uint64_t v43 = *((void *)v42 + 146);
      if (*(void *)(v43 + 88)) {
        goto LABEL_28;
      }
      id v235 = *((id *)v42 + 145);
      re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v43, (uint64_t)v3, (dispatch_group_t *)&v235, 1, *((void **)v42 + 153));

      *((_DWORD *)v42 + 286) = 4;
      uint64_t v4 = v42;
LABEL_50:
      uint64_t v44 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 145), 0))
      {
LABEL_28:
        *(unsigned char *)a3 = 1;
        *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        return;
      }
      uint64_t v45 = *((void *)v44 + 4);
      uint64_t v46 = v44;
      if (*(void *)(v45 + 120))
      {
        unint64_t v47 = 0;
        unsigned int v48 = 0;
        uint64_t v188 = (uint64_t)v46 + 40;
        uint64_t v187 = (uint64_t)v46 + 1096;
        unsigned __int16 v191 = v3;
        while (1)
        {
          uint64_t v49 = *(void *)(*(void *)(v45 + 128) + 8 * v47);
          if (*(unsigned char *)(v49 + 2845))
          {
            if (re::MaterialBuilder::shouldCompileFallbackShaderForTechnique((_anonymous_namespace_ *)v49, v48))break; {
          }
            }
LABEL_253:
          uint64_t v46 = v194;
          uint64_t v45 = *((void *)v194 + 4);
          unint64_t v47 = ++v48;
          if (*(void *)(v45 + 120) <= (unint64_t)v48) {
            goto LABEL_317;
          }
        }
        unsigned int v189 = v48;
        re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v232, *(void *)(v49 + 64), *(void *)(v49 + 56), v188);
        int v230 = 0;
        memset(v229, 0, sizeof(v229));
        uint64_t v231 = 0x7FFFFFFFLL;
        uint64_t v228 = 0;
        memset(v226, 0, sizeof(v226));
        int v227 = 0;
        uint64_t v50 = *(unsigned int *)(v49 + 2776);
        if (v50)
        {
          uint64_t v51 = 0;
          unint64_t v52 = (int *)(*(void *)(v49 + 2760) + 8);
          while (1)
          {
            int v53 = *v52;
            v52 += 28;
            if (v53 < 0) {
              break;
            }
            if (v50 == ++v51)
            {
              LODWORD(v51) = *(_DWORD *)(v49 + 2776);
              break;
            }
          }
        }
        else
        {
          LODWORD(v51) = 0;
        }
        if (v50 != v51)
        {
          uint64_t v54 = v51;
          do
          {
            uint64_t v55 = *(void *)(v49 + 2760) + 112 * v54;
            re::DynamicString::DynamicString((re::DynamicString *)info, (const re::DynamicString *)(v55 + 48));
            LODWORD(v256[0]) = *(_DWORD *)(v55 + 80);
            re::FixedArray<unsigned char>::FixedArray(&v256[1], (uint64_t *)(v55 + 88));
            if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v229, (uint64_t)info))
            {
              re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v229, (re::DynamicString *)info);
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v226, (re::DynamicString *)info);
            }
            if (v256[1])
            {
              if (v256[2])
              {
                (*(void (**)(void, void))(*(void *)v256[1] + 40))(v256[1], v256[3]);
                v256[2] = 0;
                v256[3] = 0;
              }
              v256[1] = 0;
            }
            if (*(void *)info && (info[1].numer & 1) != 0) {
              (*(void (**)(void, void))(**(void **)info + 40))(*(void *)info, *(void *)&info[2]);
            }
            if (*(_DWORD *)(v49 + 2776) <= (v51 + 1)) {
              int v56 = v51 + 1;
            }
            else {
              int v56 = *(_DWORD *)(v49 + 2776);
            }
            while (1)
            {
              uint64_t v54 = (v51 + 1);
              if (v56 - 1 == v51) {
                break;
              }
              LODWORD(v51) = v51 + 1;
              int v57 = v54;
              if ((*(_DWORD *)(*(void *)(v49 + 2760) + 112 * v54 + 8) & 0x80000000) != 0) {
                goto LABEL_79;
              }
            }
            int v57 = v56;
LABEL_79:
            LODWORD(v51) = v57;
          }
          while (v50 != v57);
        }
        if (v233)
        {
          int v58 = v234;
          BOOL v59 = (re::DynamicString *)((char *)v234 + 64 * v233);
          do
          {
            re::DynamicString::DynamicString((re::DynamicString *)info, v58);
            LODWORD(v256[0]) = *((_DWORD *)v58 + 8);
            re::FixedArray<unsigned char>::FixedArray(&v256[1], (uint64_t *)v58 + 5);
            if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v229, (uint64_t)info))
            {
              re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v229, (re::DynamicString *)info);
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v226, (re::DynamicString *)info);
            }
            if (v256[1])
            {
              if (v256[2])
              {
                (*(void (**)(void, void))(*(void *)v256[1] + 40))(v256[1], v256[3]);
                v256[2] = 0;
                v256[3] = 0;
              }
              v256[1] = 0;
            }
            if (*(void *)info && (info[1].numer & 1) != 0) {
              (*(void (**)(void, void))(**(void **)info + 40))(*(void *)info, *(void *)&info[2]);
            }
            int v58 = (re::DynamicString *)((char *)v58 + 64);
          }
          while (v58 != v59);
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v223, v226);
        re::TechniqueDefinitionBuilder::buildPipelineData(v225, v224, v49, v187, (uint64_t)v3, *((void *)v194 + 146), (uint64_t)v221);
        if (!v221[0])
        {
          if ([v222 code] == 10 || objc_msgSend(v222, "code") == 90)
          {
            unsigned __int16 v67 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v222);
            long long v68 = *(_OWORD *)&info[0].numer;
            mach_timebase_info v69 = info[2];
            mach_timebase_info v70 = info[3];
            *(unsigned char *)a3 = 0;
            *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v68;
            *(mach_timebase_info *)(a3 + 24) = v69;
            *(mach_timebase_info *)(a3 + 32) = v70;
            int v71 = 1;
          }
          else
          {
            int v71 = 4;
          }
          goto LABEL_252;
        }
        uint64_t v60 = mach_absolute_time();
        uint64_t v61 = *(void *)(*((void *)v194 + 146) + 16);
        double v62 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
        unint64_t v63 = v194;
        if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
        {
          if (mach_timebase_info(info))
          {
            double v66 = NAN;
            unint64_t v63 = v194;
LABEL_101:
            uint64_t v72 = v222;
            if (v222)
            {
              uint64_t v73 = v222 + 8;
              unint64_t v63 = v194;
            }
            unint64_t v74 = *((void *)v63 + 148);
            if (v74 <= v47) {
              goto LABEL_330;
            }
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*((void *)v63 + 149) + 8 * v47), (uint64_t)v72);
            uint64_t v76 = v72[2];
            if (v76)
            {
              uint64_t v77 = *(void **)(v76 + 8);
              if (v77) {
                BOOL v78 = v77;
              }
              else {
                BOOL v78 = &str_2_74;
              }
            }
            else
            {
              BOOL v78 = &str_2_74;
            }
            uint64_t v79 = v72[3];
            if (v79)
            {
              uint64_t v80 = *(void **)(v79 + 8);
              if (v80) {
                uint64_t v81 = v80;
              }
              else {
                uint64_t v81 = &str_2_74;
              }
            }
            else
            {
              uint64_t v81 = &str_2_74;
            }
            BOOL v82 = *re::graphicsLogObjects(v75);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
            {
              int v83 = *(const char **)v49;
              info[0].char numer = 136446978;
              *(void *)&info[0].denom = v83;
              LOWORD(info[1].denom) = 2082;
              *(void *)((char *)&info[1].denom + 2) = v78;
              HIWORD(info[2].denom) = 2082;
              info[3] = (mach_timebase_info)v81;
              LOWORD(v256[0]) = 1024;
              *(_DWORD *)((char *)v256 + 2) = (int)(v66 / 1000000.0);
              _os_log_impl(&dword_233120000, v82, OS_LOG_TYPE_DEFAULT, "Function specialization completed for fallback technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", (uint8_t *)info, 0x26u);
            }

            unint64_t v74 = *((void *)v194 + 148);
            if (*((unsigned char *)v194 + 1232))
            {
              BOOL v84 = 1;
            }
            else
            {
              if (v74 <= v47) {
                goto LABEL_334;
              }
              BOOL v84 = *(void *)(*(void *)(*(void *)(*((void *)v194 + 149) + 8 * v47) + 16) + 64) != 0;
            }
            *((unsigned char *)v194 + 1232) = v84;
            if (v74 <= v47) {
              goto LABEL_331;
            }
            uint64_t v85 = *(void *)(*(void *)(*((void *)v194 + 149) + 8 * v47) + 24);
            if (v85)
            {
              BOOL v86 = v84 || *(void *)(v85 + 64) != 0;
              *((unsigned char *)v194 + 1232) = v86;
            }
            uint64_t v87 = *((void *)v3 + 7);
            re::makeRenderTargetInfoPrediction(*(const char **)v49, v87 + 424, v87 + 472, v87 + 520, v87 + 568, v87 + 616, v87 + 664, *((unsigned __int8 *)v3 + 308), (uint64_t)v219);
            unint64_t v74 = *((void *)v194 + 148);
            if (v74 <= v47)
            {
LABEL_332:
              *(void *)&long long v266 = 0;
              memset(v256, 0, sizeof(v256));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v244 = 136315906;
              *(void *)&v244[4] = "operator[]";
              *(_WORD *)&v244[12] = 1024;
              *(_DWORD *)&v244[14] = 468;
              *(_WORD *)&v244[18] = 2048;
              *(void *)&v244[20] = v47;
              *(_WORD *)&v244[28] = 2048;
              *(void *)&v244[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_333:
              *(void *)&long long v266 = 0;
              memset(v256, 0, sizeof(v256));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v244 = 136315906;
              *(void *)&v244[4] = "operator[]";
              *(_WORD *)&v244[12] = 1024;
              *(_DWORD *)&v244[14] = 468;
              *(_WORD *)&v244[18] = 2048;
              *(void *)&v244[20] = v47;
              *(_WORD *)&v244[28] = 2048;
              *(void *)&v244[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_334:
              *(void *)&long long v266 = 0;
              memset(v256, 0, sizeof(v256));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v244 = 136315906;
              *(void *)&v244[4] = "operator[]";
              *(_WORD *)&v244[12] = 1024;
              *(_DWORD *)&v244[14] = 468;
              *(_WORD *)&v244[18] = 2048;
              *(void *)&v244[20] = v47;
              *(_WORD *)&v244[28] = 2048;
              *(void *)&v244[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::FixedArray<re::AttributeArgument>::FixedArray(v218, *(void *)(*(void *)(*((void *)v194 + 149) + 8 * v47) + 16) + 264);
            re::FixedArray<re::AttributeArgument>::FixedArray(v214, (uint64_t)v218);
            unint64_t v74 = *((void *)v194 + 148);
            if (v74 <= v47) {
              goto LABEL_333;
            }
            long long v88 = *(_OWORD *)(*(void *)(*(void *)(*((void *)v194 + 149) + 8 * v47) + 16) + 312);
            v213[0] = *(_OWORD *)(*(void *)(*(void *)(*((void *)v194 + 149) + 8 * v47) + 16) + 296);
            v213[1] = v88;
            re::makeAttributeResolutionsPrediction((_anonymous_namespace_ *)v214, (uint64_t)v213, *(unsigned __int8 *)(v49 + 2844), &v215);
            re::FixedArray<re::AttributeArgument>::deinit(v214);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947A0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947A0))
            {
              re::Defaults::BOOLValue((re::Defaults *)"loadMultipleFallbacks", v146, &byte_26AF94792);
              __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, &byte_26AF94792, &dword_233120000);
              __cxa_guard_release(&qword_26AF947A0);
            }
            if (byte_26AF94792) {
              BOOL v89 = byte_26AF94793 == 0;
            }
            else {
              BOOL v89 = 1;
            }
            int v90 = !v89;
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947B0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947B0))
            {
              qword_26AF947A8 = re::hashString((re *)"PixelFormat", v147);
              __cxa_guard_release(&qword_26AF947B0);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947C0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947C0))
            {
              qword_26AF947B8 = re::hashString((re *)"SampleCount", v148);
              __cxa_guard_release(&qword_26AF947C0);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947D0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947D0))
            {
              qword_26AF947C8 = re::hashString((re *)"OverrideFlags", v149);
              __cxa_guard_release(&qword_26AF947D0);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947E0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947E0))
            {
              qword_26AF947D8 = re::hashString((re *)"TexcoordFormatOverride", v150);
              __cxa_guard_release(&qword_26AF947E0);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF947F0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF947F0))
            {
              qword_26AF947E8 = re::hashString((re *)"StepFormatOverride", v151);
              __cxa_guard_release(&qword_26AF947F0);
            }
            unint64_t v193 = v47;
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94800, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26AF94800))
            {
              qword_26AF947F8 = re::hashString((re *)"PositionFormatOverride", v152);
              __cxa_guard_release(&qword_26AF94800);
            }
            memset(v212, 0, sizeof(v212));
            if (v90)
            {
              uint64_t v192 = *(unsigned int *)(v49 + 2824);
              uint64_t v91 = 0;
              if (v192)
              {
                unint64_t v92 = (int *)(*(void *)(v49 + 2808) + 8);
                while (1)
                {
                  int v93 = *v92;
                  v92 += 22;
                  if (v93 < 0) {
                    break;
                  }
                  if (v192 == ++v91)
                  {
                    LODWORD(v91) = *(_DWORD *)(v49 + 2824);
                    break;
                  }
                }
              }
              if (v192 != v91)
              {
                uint64_t v94 = v91;
                do
                {
                  uint64_t v95 = *(void *)(v49 + 2808);
                  uint64_t v96 = (void *)(v95 + 88 * v94);
                  memset(&info[1], 0, 24);
                  LODWORD(v256[0]) = 0;
                  memset(&v256[1], 0, 18);
                  LOWORD(info[0].numer) = 29;
                  if (v96[3]) {
                    signed int v97 = (const char *)v96[4];
                  }
                  else {
                    signed int v97 = (char *)v96 + 25;
                  }
                  unint64_t v98 = (_anonymous_namespace_ *)strlen(v97);
                  if (v98)
                  {
                    unint64_t v98 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)v97, (int)v98, 0, (unint64_t *)v244);
                    uint64_t v99 = (*(void *)&v244[8] - 0x61C8864680B583E9 + (*(void *)v244 << 6) + (*(void *)v244 >> 2)) ^ *(void *)v244;
                  }
                  else
                  {
                    uint64_t v99 = 0;
                  }
                  if (v99 == qword_26AF947A8) {
                    int v100 = 0;
                  }
                  else {
                    int v100 = -1;
                  }
                  if (v99 == qword_26AF947B8) {
                    int v100 = 1;
                  }
                  if (v99 == qword_26AF947C8) {
                    int v100 = 2;
                  }
                  if (v99 == qword_26AF947D8) {
                    int v100 = 3;
                  }
                  if (v99 == qword_26AF947E8) {
                    int v100 = 6;
                  }
                  if (v99 == qword_26AF947F8) {
                    int v101 = 7;
                  }
                  else {
                    int v101 = v100;
                  }
                  if (v101 != -1)
                  {
                    HIWORD(info[0].numer) = v101;
                    LOBYTE(v256[3]) = 1;
                    uint64_t v102 = v95 + 88 * v94;
                    unint64_t v103 = *(void *)(v102 + 64);
                    re::DynamicArray<float *>::setCapacity(&info[1], v103);
                    ++LODWORD(v256[0]);
                    uint64_t v104 = *(void *)(v102 + 64);
                    if (v104)
                    {
                      uint64_t v105 = 32 * v104;
                      unint64_t v106 = (const char **)(*(void *)(v102 + 80) + 16);
                      do
                      {
                        *(void *)uint64_t v244 = 0;
                        if (*(unsigned char *)(v106 - 1)) {
                          uint64_t v107 = *v106;
                        }
                        else {
                          uint64_t v107 = (char *)v106 - 7;
                        }
                        uint64_t v108 = atoll(v107);
                        *(void *)uint64_t v244 = v108;
                        if ((_WORD)v101 || v108 != 71) {
                          re::DynamicArray<re::TransitionCondition *>::add(&info[1], v244);
                        }
                        v106 += 4;
                        v105 -= 32;
                      }
                      while (v105);
                    }
                    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(v212, (const re::DynamicString *)(v96 + 2), (uint64_t *)info);
                  }
                  uint64_t v3 = v191;
                  if (*(void *)&info[1] && v256[1]) {
                    (*(void (**)(void, void))(**(void **)&info[1] + 40))(*(void *)&info[1], v256[1]);
                  }
                  unsigned int v109 = *(_DWORD *)(v49 + 2824);
                  if (v109 <= (int)v91 + 1) {
                    unsigned int v109 = v91 + 1;
                  }
                  while (1)
                  {
                    uint64_t v94 = (v91 + 1);
                    if (v109 - 1 == v91) {
                      break;
                    }
                    LODWORD(v91) = v91 + 1;
                    unsigned int v110 = v94;
                    if ((*(_DWORD *)(*(void *)(v49 + 2808) + 88 * v94 + 8) & 0x80000000) != 0) {
                      goto LABEL_189;
                    }
                  }
                  unsigned int v110 = v109;
LABEL_189:
                  LODWORD(v91) = v110;
                }
                while (v192 != v110);
              }
            }
            *(void *)&v244[32] = 0;
            memset(v244, 0, 28);
            memset(v256, 0, 32);
            memset(info, 0, sizeof(info));
            re::FunctionConstantsEnumerator::createEnumerator(v212, 0, 0, (uint64_t)v244, info, (uint64_t)v210);
            re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)info);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v244);
            if (v211)
            {
              for (unint64_t j = 0; v211 > j; ++j)
              {
                v208[0] = v219[0];
                v208[1] = v219[1];
                v208[2] = v219[2];
                int v209 = v220;
                int v206 = 0;
                memset(v205, 0, sizeof(v205));
                uint64_t v207 = 0x7FFFFFFFLL;
                int v203 = 0;
                memset(v202, 0, sizeof(v202));
                uint64_t v204 = 0x7FFFFFFFLL;
                re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v210, j, 0, 0, (uint64_t)v199);
                if (v200)
                {
                  unsigned __int8 As64Bits = 0;
                  uint64_t v113 = v201;
                  uint64_t v114 = (re::DynamicString *)((char *)v201 + 64 * v200);
                  do
                  {
                    re::DynamicString::DynamicString((re::DynamicString *)info, v113);
                    LODWORD(v256[0]) = *((_DWORD *)v113 + 8);
                    re::FixedArray<unsigned char>::FixedArray(&v256[1], (uint64_t *)v113 + 5);
                    int v115 = WORD1(v256[0]);
                    if (!WORD1(v256[0]))
                    {
                      DWORD1(v208[0]) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      int v115 = WORD1(v256[0]);
                    }
                    if (v115 == 1)
                    {
                      LODWORD(v208[0]) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      int v115 = WORD1(v256[0]);
                    }
                    if (v115 == 2)
                    {
                      unsigned __int8 As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      int v115 = WORD1(v256[0]);
                    }
                    if (v115 == 3)
                    {
                      unsigned int v116 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      if (v116)
                      {
                        *(void *)uint64_t v244 = 0;
                        *(void *)&v244[8] = "";
                        LOWORD(v266) = 5;
                        re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v205, (StringID *)v244, &v266);
                        re::StringID::destroyString((re::StringID *)v244);
                      }
                    }
                    int v117 = WORD1(v256[0]);
                    if (WORD1(v256[0]) == 6)
                    {
                      uint64_t v118 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      if (v118)
                      {
                        *(void *)uint64_t v244 = 0;
                        *(void *)&v244[8] = "";
                        LOBYTE(v266) = 0;
                        re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v202, (StringID *)v244, &v266);
                        re::StringID::destroyString((re::StringID *)v244);
                      }
                      int v117 = WORD1(v256[0]);
                    }
                    if (v117 == 7)
                    {
                      uint64_t v119 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      *(void *)uint64_t v244 = 0;
                      *(void *)&v244[8] = "";
                      if (v119)
                      {
                        LOWORD(v266) = 6;
                      }
                      else
                      {
                        LOWORD(v266) = 5;
                      }
                      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v205, (StringID *)v244, &v266);
                      re::StringID::destroyString((re::StringID *)v244);
                    }
                    if (v256[1])
                    {
                      if (v256[2])
                      {
                        (*(void (**)(void, void))(*(void *)v256[1] + 40))(v256[1], v256[3]);
                        v256[2] = 0;
                        v256[3] = 0;
                      }
                      v256[1] = 0;
                    }
                    if (*(void *)info && (info[1].numer & 1) != 0) {
                      (*(void (**)(void, void))(**(void **)info + 40))(*(void *)info, *(void *)&info[2]);
                    }
                    uint64_t v113 = (re::DynamicString *)((char *)v113 + 64);
                  }
                  while (v113 != v114);
                }
                else
                {
                  unsigned __int8 As64Bits = 0;
                }
                unint64_t v47 = v193;
                if (LODWORD(v219[0]) == 1 || *(void *)&v208[0] != 0x7300000001)
                {
                  re::FixedArray<re::AttributeArgument>::FixedArray(v198, (uint64_t)v218);
                  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v197, (uint64_t)v205);
                  re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v196, (uint64_t)v202);
                  re::makeAttributeTablePrediction((_anonymous_namespace_ *)v198, (uint64_t)v197, (uint64_t)v196, (uint64_t)info);
                  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v196);
                  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v197);
                  re::FixedArray<re::AttributeArgument>::deinit(v198);
                  uint64_t v120 = *((void *)v3 + 13);
                  *(void *)uint64_t v244 = v120 + 48;
                  *(void *)&v244[8] = v3;
                  *(void *)&v244[16] = v120;
                  *(void *)&v244[24] = v208;
                  int v121 = v194;
                  unint64_t v74 = *((void *)v194 + 148);
                  if (v74 <= v193)
                  {
                    uint64_t v243 = 0;
                    long long v269 = 0u;
                    long long v270 = 0u;
                    long long v267 = 0u;
                    long long v268 = 0u;
                    long long v266 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v258 = 136315906;
                    uint64_t v259 = "operator[]";
                    __int16 v260 = 1024;
                    int v261 = 468;
                    __int16 v262 = 2048;
                    unint64_t v263 = v193;
                    __int16 v264 = 2048;
                    unint64_t v265 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_328:
                    uint64_t v243 = 0;
                    long long v269 = 0u;
                    long long v270 = 0u;
                    long long v267 = 0u;
                    long long v268 = 0u;
                    long long v266 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v258 = 136315906;
                    uint64_t v259 = "operator[]";
                    __int16 v260 = 1024;
                    int v261 = 468;
                    __int16 v262 = 2048;
                    unint64_t v263 = v193;
                    __int16 v264 = 2048;
                    unint64_t v265 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_329:
                    uint64_t v243 = 0;
                    long long v269 = 0u;
                    long long v270 = 0u;
                    long long v267 = 0u;
                    long long v268 = 0u;
                    long long v266 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v258 = 136315906;
                    uint64_t v259 = "operator[]";
                    __int16 v260 = 1024;
                    int v261 = 468;
                    __int16 v262 = 2048;
                    unint64_t v263 = v193;
                    __int16 v264 = 2048;
                    unint64_t v265 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_330:
                    *(void *)&long long v266 = 0;
                    memset(v256, 0, sizeof(v256));
                    memset(info, 0, sizeof(info));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v244 = 136315906;
                    *(void *)&v244[4] = "operator[]";
                    *(_WORD *)&v244[12] = 1024;
                    *(_DWORD *)&v244[14] = 468;
                    *(_WORD *)&v244[18] = 2048;
                    *(void *)&v244[20] = v47;
                    *(_WORD *)&v244[28] = 2048;
                    *(void *)&v244[30] = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_331:
                    *(void *)&long long v266 = 0;
                    memset(v256, 0, sizeof(v256));
                    memset(info, 0, sizeof(info));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v244 = 136315906;
                    *(void *)&v244[4] = "operator[]";
                    *(_WORD *)&v244[12] = 1024;
                    *(_DWORD *)&v244[14] = 468;
                    *(_WORD *)&v244[18] = 2048;
                    *(void *)&v244[20] = v47;
                    *(_WORD *)&v244[28] = 2048;
                    *(void *)&v244[30] = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_332;
                  }
                  uint64_t v122 = *(void *)(*((void *)v194 + 149) + 8 * v193);
                  *(void *)&v244[32] = v122;
                  if (v122)
                  {
                    id v123 = (id)(v122 + 8);
                    int v121 = v194;
                  }
                  uint64_t v124 = *((void *)v121 + 4);
                  unint64_t v74 = *(void *)(v124 + 120);
                  if (v74 <= v193) {
                    goto LABEL_328;
                  }
                  uint64_t v125 = *(void *)v121;
                  uint64_t v245 = *(void *)(*(void *)(v124 + 128) + 8 * v193);
                  uint64_t v246 = v125;
                  __int16 v247 = 257;
                  uint64_t v248 = info;
                  uint64_t v249 = v217;
                  uint64_t v250 = v216;
                  char v251 = 3;
                  uint64_t v252 = *((void *)v121 + 153);
                  long long v253 = 0u;
                  long long v254 = 0u;
                  uint64_t v126 = (_anonymous_namespace_ *)re::getOrCreatePipelineState((re *)v244, As64Bits, &v195);
                  unint64_t v74 = *((void *)v194 + 151);
                  if (v74 <= v193) {
                    goto LABEL_329;
                  }
                  uint64_t v127 = *((void *)v194 + 152);
                  unint64_t v128 = (void *)(v127 + 40 * v193);
                  if (*v128)
                  {
                    uint64_t v129 = v127 + 40 * v193;
                    int v132 = *(_DWORD *)(v129 + 16);
                    int v131 = (_DWORD *)(v129 + 16);
                    LOBYTE(v130) = v132;
                    if (v132) {
                      unint64_t v133 = 1;
                    }
                    else {
                      unint64_t v133 = *(void *)(v127 + 40 * v193 + 24);
                    }
                    unint64_t v136 = *((void *)v131 - 1);
                    if (v136 >= v133)
                    {
                      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(v127 + 40 * v193, v136 + 1);
                      int v130 = *v131;
                    }
                  }
                  else
                  {
                    uint64_t v134 = v127 + 40 * v193;
                    unint64_t v135 = *(void *)(v134 + 8) + 1;
                    re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)v134, v135);
                    int v130 = *(_DWORD *)(v134 + 16) + 2;
                    *(_DWORD *)(v134 + 16) = v130;
                  }
                  if (v130) {
                    uint64_t v137 = v127 + 40 * v193 + 24;
                  }
                  else {
                    uint64_t v137 = *(void *)(v127 + 40 * v193 + 32);
                  }
                  uint64_t v138 = v127 + 40 * v193;
                  uint64_t v141 = *(void *)(v138 + 8);
                  uint64_t v140 = (uint64_t *)(v138 + 8);
                  uint64_t v139 = v141;
                  uint64_t v142 = v195;
                  *(void *)(v137 + 8 * v141) = v195;
                  if (v142)
                  {
                    id v143 = (id)(v142 + 8);
                    uint64_t v139 = *v140;
                  }
                  *uint64_t v140 = v139 + 1;
                  *(_DWORD *)(v127 + 40 * v193 + 16) += 2;
                  if (v195) {

                  }
                  if (*(void *)&v244[32]) {
                  re::AttributeTable::~AttributeTable((re::AttributeTable *)info);
                  }
                }
                re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v199);
                re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v202);
                re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v205);
              }
            }
            re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v210);
            double v144 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v212);
            if (v215)
            {
              if (v216) {
                (*(void (**)(double))(*(void *)v215 + 40))(v144);
              }
            }
            re::FixedArray<re::AttributeArgument>::deinit(v218);
            int v71 = 0;
LABEL_252:
            re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v221);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v223);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v226);
            re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v229);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v232);
            int v145 = v71 | 4;
            unsigned int v48 = v189;
            if (v145 != 4) {
              return;
            }
            goto LABEL_253;
          }
          LODWORD(v64) = info[0].numer;
          LODWORD(v65) = info[0].denom;
          double v62 = (double)v64 / (double)v65;
          re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v62;
          unint64_t v63 = v194;
        }
        double v66 = v62 * (double)(v60 - v61);
        goto LABEL_101;
      }
LABEL_317:
      *((_DWORD *)v46 + 286) = 5;
      *(unsigned char *)a3 = 1;
      *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      return;
    case 2:
      goto LABEL_27;
    case 8:
      goto LABEL_28;
    default:
      goto LABEL_44;
  }
}

void re::MaterialBuilder::createFunctionBuildTasks(re::MaterialBuilder *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94810))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v19, buf);
    if (buf[0]) {
      char v20 = buf[1];
    }
    else {
      char v20 = 0;
    }
    byte_26AF94791 = v20;
    __cxa_guard_release(&qword_26AF94810);
  }
  uint64_t v2 = *((void *)this + 4);
  if (*(void *)(v2 + 120))
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 128) + 8 * v3);
      if (*(unsigned char *)(v5 + 2845))
      {
        uint64_t shouldCompileFallbackShaderForTechnique = re::MaterialBuilder::shouldCompileFallbackShaderForTechnique((_anonymous_namespace_ *)v5, v4);
        if (shouldCompileFallbackShaderForTechnique)
        {
          re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v28, *(void *)(v5 + 64), *(void *)(v5 + 56), (uint64_t)this + 40);
          int v26 = 0;
          memset(v25, 0, sizeof(v25));
          uint64_t v27 = 0x7FFFFFFFLL;
          uint64_t v24 = 0;
          memset(v22, 0, sizeof(v22));
          int v23 = 0;
          uint64_t v7 = *(unsigned int *)(v5 + 2776);
          if (v7)
          {
            uint64_t v8 = 0;
            uint64_t v9 = (int *)(*(void *)(v5 + 2760) + 8);
            while (1)
            {
              int v10 = *v9;
              v9 += 28;
              if (v10 < 0) {
                break;
              }
              if (v7 == ++v8)
              {
                LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v5 + 2776);
                break;
              }
            }
          }
          else
          {
            LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          }
          if (v7 != v8)
          {
            uint64_t v13 = v8;
            do
            {
              uint64_t v14 = *(void *)(v5 + 2760) + 112 * v13;
              re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)(v14 + 48));
              LODWORD(v33) = *(_DWORD *)(v14 + 80);
              re::FixedArray<unsigned char>::FixedArray(&v34, (uint64_t *)(v14 + 88));
              if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v25, (uint64_t)buf))
              {
                re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v25, (re::DynamicString *)buf);
                re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v22, (re::DynamicString *)buf);
              }
              if (v34)
              {
                if (v35)
                {
                  (*(void (**)(void))(*(void *)v34 + 40))();
                  uint64_t v35 = 0;
                  uint64_t v36 = 0;
                }
                uint64_t v34 = 0;
              }
              if (*(void *)buf && (buf[8] & 1) != 0) {
                (*(void (**)(void))(**(void **)buf + 40))();
              }
              if (*(_DWORD *)(v5 + 2776) <= (v8 + 1)) {
                int v15 = v8 + 1;
              }
              else {
                int v15 = *(_DWORD *)(v5 + 2776);
              }
              while (1)
              {
                uint64_t v13 = (v8 + 1);
                if (v15 - 1 == v8) {
                  break;
                }
                LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8 + 1;
                int v16 = v13;
                if ((*(_DWORD *)(*(void *)(v5 + 2760) + 112 * v13 + 8) & 0x80000000) != 0) {
                  goto LABEL_33;
                }
              }
              int v16 = v15;
LABEL_33:
              LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
            }
            while (v7 != v16);
          }
          if (v29)
          {
            uint64_t v17 = v30;
            unsigned int v18 = (re::DynamicString *)((char *)v30 + 64 * v29);
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)buf, v17);
              LODWORD(v33) = *((_DWORD *)v17 + 8);
              re::FixedArray<unsigned char>::FixedArray(&v34, (uint64_t *)v17 + 5);
              if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v25, (uint64_t)buf))
              {
                re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v25, (re::DynamicString *)buf);
                re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v22, (re::DynamicString *)buf);
              }
              if (v34)
              {
                if (v35)
                {
                  (*(void (**)(void))(*(void *)v34 + 40))();
                  uint64_t v35 = 0;
                  uint64_t v36 = 0;
                }
                uint64_t v34 = 0;
              }
              if (*(void *)buf)
              {
                if (buf[8]) {
                  (*(void (**)(void))(**(void **)buf + 40))();
                }
              }
              uint64_t v17 = (re::DynamicString *)((char *)v17 + 64);
            }
            while (v17 != v18);
          }
          re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)buf, v22);
          v21[0] = v33;
          v21[1] = v32;
          re::MaterialBuilder::addFunctionsToReflectionCache(v5, v21, *((void *)this + 146));
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)buf);
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v22);
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v25);
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v28);
        }
        else if (byte_26AF94791)
        {
          uint64_t v11 = *re::graphicsLogObjects((re *)shouldCompileFallbackShaderForTechnique);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)v5;
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v12;
            _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Skipping fallback shader compilation for technique %s", buf, 0xCu);
          }
        }
      }
      uint64_t v2 = *((void *)this + 4);
      uint64_t v3 = ++v4;
    }
    while (*(void *)(v2 + 120) > (unint64_t)v4);
  }
}

uint64_t re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(_anonymous_namespace_ *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94808, memory_order_acquire) & 1) == 0)
  {
    a1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF94808);
    if (a1)
    {
      re::Defaults::intValue((re::Defaults *)"shaderCompilationMode", v32, (uint64_t)&v37);
      if ((_BYTE)v37) {
        int v33 = HIDWORD(v37);
      }
      else {
        int v33 = 0;
      }
      dword_26AF94794 = v33;
      __cxa_guard_release(&qword_26AF94808);
    }
  }
  if (dword_26AF94794 == 2) {
    return 0;
  }
  if (dword_26AF94794 == 1) {
    return 1;
  }
  int v4 = *((_DWORD *)v3 + 710);
  if (v4 == 2) {
    return 0;
  }
  if (v4 == 1) {
    return 1;
  }
  uint64_t v7 = *(const char **)v3;
  re::DynamicString::find((re::DynamicString *)&v37, "_BackCompat", 11, 0, (uint64_t)&v39);
  if (!(_BYTE)v39)
  {
    size_t v8 = strlen(*(const char **)v3);
    if (v8)
    {
      MurmurHash3_x64_128(*(void *)v3, v8, 0, &v39);
      unint64_t v9 = (v40 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39;
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v36 = v9;
    WeakRetained = (char *)objc_loadWeakRetained((id *)v3 + 342);
    uint64_t v11 = WeakRetained - 8;
    if (!WeakRetained) {
      uint64_t v11 = 0;
    }
    uint64_t v35 = v11;
    if (*((void *)v11 + 2))
    {
      uint64_t v12 = *(unsigned int *)(*((void *)v11 + 3) + 4 * (v9 % *((unsigned int *)v11 + 10)));
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v14 = *((void *)v11 + 4);
        uint64_t v15 = *(void *)(v14 + 24 * v12 + 8);
        if (v15 == v9)
        {
LABEL_20:
          unint64_t v13 = *(void *)(v14 + 24 * v12 + 16);
LABEL_21:
          uint64_t v16 = (uint64_t)(v11 + 136);
          uint64_t v17 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(v11 + 136), v13);
          if (v17)
          {
            uint64_t v18 = *(void *)(v17 + 8);
            if (v18)
            {
              char v19 = 0;
              char v20 = *(int **)(v17 + 16);
              uint64_t v21 = 4 * v18;
              do
              {
                int v22 = *v20++;
                if (v22 == a2) {
                  char v19 = 1;
                }
                v21 -= 4;
              }
              while (v21);
LABEL_34:
              uint64_t v5 = v19 & 1;
LABEL_43:
              v34[0] = (uint64_t *)&v36;
              v34[1] = (uint64_t *)&v35;
              MurmurHash3_x64_128((uint64_t)"OpaqueLite", 10, 0, &v39);
              if (v9 == ((v40 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39)
                && (uint64_t v29 = (uint64_t)(v35 + 136),
                    MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, &v39),
                    re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v29, (v40 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39))|| (unint64_t v30 = v36, MurmurHash3_x64_128((uint64_t)"TransparentLite", 15, 0, &v39), v30 == ((v40 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39))&& (v31 = (uint64_t)(v35 + 136), MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, &v39), re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v31, (v40 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39))|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v34, "SurfaceShaderOpaqueLite", "SurfaceShaderOpaque")|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v34, "SurfaceShaderTransparentLite", "SurfaceShaderTransparent")|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(
                     v34,
                     "FadeOpaqueLite",
                     "FadeOpaque")
                || re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v34, "SurfaceShaderFadeOpaqueLite", "SurfaceShaderFadeOpaque"))
              {
                uint64_t v5 = 0;
              }
              if (v35) {

              }
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v23 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v16, v9);
            if (!v23)
            {
              uint64_t v5 = 1;
              goto LABEL_43;
            }
            uint64_t v24 = *(void *)(v23 + 8);
            if (v24)
            {
              char v19 = 0;
              unint64_t v25 = *(int **)(v23 + 16);
              uint64_t v26 = 4 * v24;
              do
              {
                int v27 = *v25++;
                if (v27 == a2) {
                  char v19 = 1;
                }
                v26 -= 4;
              }
              while (v26);
              goto LABEL_34;
            }
          }
          uint64_t v5 = 0;
          goto LABEL_43;
        }
        while (1)
        {
          unsigned int v28 = *(_DWORD *)(v14 + 24
                                * *(unsigned int *)(*((void *)v11 + 3) + 4 * (v9 % *((unsigned int *)v11 + 10)))) & 0x7FFFFFFF;
          if (v28 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v14 + 24 * v28 + 8) == v9)
          {
            if (v15 != v9)
            {
              while (1)
              {
                LODWORD(v12) = *(_DWORD *)(v14 + 24 * v12) & 0x7FFFFFFF;
                if (v12 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v14 + 24 * v12 + 8) == v9) {
                  goto LABEL_20;
                }
              }
              LODWORD(v12) = 0x7FFFFFFF;
            }
            goto LABEL_20;
          }
        }
      }
    }
    unint64_t v13 = -1;
    goto LABEL_21;
  }
  uint64_t v5 = 0;
LABEL_54:
  if (v37 && (v38 & 1) != 0) {
    (*(void (**)(void))(*(void *)v37 + 40))();
  }
  return v5;
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _WORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, unsigned char *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

BOOL re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(uint64_t **a1, char *__s, const char *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = **a1;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v12);
    unint64_t v8 = (v13 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9) ^ v12;
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v6 != v8) {
    return 0;
  }
  uint64_t v9 = *a1[1] + 136;
  size_t v10 = strlen(a3);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a3, v10, 0, &v12);
    size_t v10 = (v13 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9) ^ v12;
  }
  return re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v9, v10) != 0;
}

_anonymous_namespace_ *re::DynamicArray<re::TechniqueFunctionConstant>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::copy((uint64_t *)this, 0, *(uint64_t **)a2, v4);
      re::DynamicArray<re::TechniqueFunctionConstant>::resize(this, *(void *)(a2 + 8));
    }
    else
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::clear((uint64_t)this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::TechniqueFunctionConstant>::copy((uint64_t *)this, 0, *(uint64_t **)a2, *(void *)(a2 + 8));
  }
  return this;
}

uint64_t re::MaterialBuilder::addFunctionsToReflectionCache(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*(unsigned char *)(a1 + 2448)) {
    unint64_t v8 = *(const char **)(a1 + 2456);
  }
  else {
    unint64_t v8 = (const char *)(a1 + 2449);
  }
  uint64_t v9 = (_anonymous_namespace_ *)re::FunctionReflectionCache::hashFunction(v6, v7, (re::FunctionConstantUsageMask *)(a1 + 2504), v8, *(void *)(a1 + 2424));
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  *(void *)char v19 = 0;
  memset(&v19[16], 0, 24);
  re::DynamicString::setCapacity(&v19[8], 0);
  re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)&v15, (uint64_t)a2);
  re::DynamicString::operator=((re::DynamicString *)&v19[8], (re::DynamicString *)(a1 + 2440));
  uint64_t v20 = *(void *)(a1 + 2424);
  uint64_t v21 = v9;
  re::FunctionReflectionCache::addTask(a3, (uint64_t)&v15);
  if (*(void *)&v19[8])
  {
    if (v19[16]) {
      (*(void (**)(void))(**(void **)&v19[8] + 40))();
    }
    memset(&v19[8], 0, 32);
  }
  uint64_t result = re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v15);
  unint64_t v11 = *(void *)(a1 + 2480);
  unint64_t v12 = v11 >> 1;
  if ((v11 & 1) == 0) {
    unint64_t v12 = v11 >> 1;
  }
  if (v12)
  {
    if (v11) {
      uint64_t v13 = *(const char **)(a1 + 2488);
    }
    else {
      uint64_t v13 = (const char *)(a1 + 2481);
    }
    uint64_t v14 = (_anonymous_namespace_ *)re::FunctionReflectionCache::hashFunction(*a2, a2[1], (re::FunctionConstantUsageMask *)(a1 + 2568), v13, *(void *)(a1 + 2432));
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v18 = 0;
    uint64_t v17 = 0;
    memset(v19, 0, sizeof(v19));
    re::DynamicString::setCapacity(&v19[8], 0);
    re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)&v15, (uint64_t)a2);
    re::DynamicString::operator=((re::DynamicString *)&v19[8], (re::DynamicString *)(a1 + 2472));
    uint64_t v20 = *(void *)(a1 + 2432);
    uint64_t v21 = v14;
    re::FunctionReflectionCache::addTask(a3, (uint64_t)&v15);
    if (*(void *)&v19[8])
    {
      if (v19[16]) {
        (*(void (**)(void))(**(void **)&v19[8] + 40))();
      }
      memset(&v19[8], 0, 32);
    }
    return re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v15);
  }
  return result;
}

void re::MaterialBuilder::overlayBlurTechniquesAndTextures(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94820))
  {
    qword_26AF94818 = re::hashString((re *)"SFBPassthroughDownsample2D", v24);
    __cxa_guard_release(&qword_26AF94820);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94830))
  {
    qword_26AF94828 = re::hashString((re *)"SFBCopyTextureBilinear", v25);
    __cxa_guard_release(&qword_26AF94830);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94840))
  {
    qword_26AF94838 = re::hashString((re *)"PlattersOnly", v26);
    __cxa_guard_release(&qword_26AF94840);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94850))
  {
    qword_26AF94848 = re::hashString((re *)"OnlyPlattersVS", v27);
    __cxa_guard_release(&qword_26AF94850);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94860))
  {
    qword_26AF94858 = re::hashString((re *)"OnlyPlattersBreakthrough", v28);
    __cxa_guard_release(&qword_26AF94860);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94870))
  {
    qword_26AF94868 = re::hashString((re *)"PlatterContentsOnly", v29);
    __cxa_guard_release(&qword_26AF94870);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94880))
  {
    qword_26AF94878 = re::hashString((re *)"StenciledRenderNoPlatter", v30);
    __cxa_guard_release(&qword_26AF94880);
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  *(void *)&long long v39 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  uint64_t v6 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a2 + 1032, (uint64_t *)&v39);
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
  }
  *(void *)&long long v39 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
  uint64_t v7 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a2 + 1032, (uint64_t *)&v39);
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = *a3;
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
  }
  if (*(void *)(v9 + 64)
    && (unint64_t v10 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9
              * (re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash ^ ((unint64_t)re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash >> 30))) ^ ((0xBF58476D1CE4E5B9 * (re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash ^ ((unint64_t)re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash >> 30))) >> 27)),
        uint64_t v11 = *(unsigned int *)(*(void *)(v9 + 72) + 4 * ((v10 ^ (v10 >> 31)) % *(unsigned int *)(v9 + 88))),
        v11 != 0x7FFFFFFF))
  {
    uint64_t v23 = *(void *)(v9 + 80);
    if (*(void *)(v23 + 72 * v11 + 16) == re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash)
    {
      BOOL v12 = 1;
    }
    else
    {
      do
      {
        LODWORD(v11) = *(_DWORD *)(v23 + 72 * v11 + 8) & 0x7FFFFFFF;
        BOOL v12 = v11 != 0x7FFFFFFF;
      }
      while (v11 != 0x7FFFFFFF
           && *(void *)(v23 + 72 * v11 + 16) != re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  if (*(unsigned char *)(a1 + 22) && *(unsigned char *)(a1 + 23) || *(unsigned char *)(a1 + 24) && *(unsigned char *)(a1 + 25))
  {
    if (!v6)
    {
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      uint64_t v35 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 64);
      long long v39 = 0u;
      long long v40 = 0u;
      int v41 = 0;
      *(void *)uint64_t v42 = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&v39, v13, 3);
      uint64_t v6 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a2 + 1032, &v35, (uint64_t *)&v39);
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v39);
    }
    char v14 = !v12;
    if (v8) {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
      }
      uint64_t v35 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 64);
      long long v39 = 0u;
      long long v40 = 0u;
      int v41 = 0;
      *(void *)uint64_t v42 = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&v39, v15, 2);
      uint64_t v8 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a2 + 1032, &v35, (uint64_t *)&v39);
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v39);
    }
  }
  if (*(unsigned char *)(a1 + 22) && *(unsigned char *)(a1 + 23))
  {
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v16 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v39, 0);
    *(void *)&v42[4] = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v17 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v39, 1);
    int v41 = 2949173;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(a1 + 40, (re::DynamicString *)&v35, 2, (uint64_t)&v39);
    if (v35 && (v36 & 1) != 0) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    LODWORD(v35) = 0;
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(v6, (unint64_t *)&qword_26AF94818, (int *)&v35);
    if (!*(void *)(a2 + 608))
    {
    }
    re::StringID::invalid((re::StringID *)&v35);
    re::StringID::destroyString((re::StringID *)&v35);
    re::StringID::invalid((re::StringID *)&v35);
    re::StringID::destroyString((re::StringID *)&v35);
    LODWORD(v35) = 1;
    LOBYTE(v37) = 9;
    uint64_t v38 = 0x23D59F1355F7D636;
    uint64_t v36 = 0x7F03C6932F573C08;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a2 + 552), &v36, (uint64_t)&v35);
    if (*(void *)&v42[4])
    {
      if (v43)
      {
        (*(void (**)(void))(**(void **)&v42[4] + 40))();
        uint64_t v43 = 0;
        uint64_t v44 = 0;
      }
      *(void *)&v42[4] = 0;
    }
    uint64_t v7 = (_anonymous_namespace_ *)v39;
    if (void)v39 && (BYTE8(v39)) {
      uint64_t v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v39 + 40))();
    }
  }
  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a1 + 25))
  {
    *((void *)&v39 + 1) = 0;
    long long v40 = 0uLL;
    char v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v39, 0);
    *(void *)&v42[4] = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v20 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v39, 1);
    int v41 = 4390965;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(a1 + 40, (re::DynamicString *)&v35, 2, (uint64_t)&v39);
    if (v35 && (v36 & 1) != 0) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    LODWORD(v35) = 0;
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(v6, (unint64_t *)&qword_26AF94828, (int *)&v35);
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v6, (unint64_t *)&qword_26AF94838, &qword_26AF94848);
    uint64_t v21 = (_anonymous_namespace_ *)re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v6, (unint64_t *)&qword_26AF94868, &qword_26AF94878);
    if (v8)
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v8, (unint64_t *)&qword_26AF94838, &qword_26AF94858);
      uint64_t v21 = (_anonymous_namespace_ *)re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v8, (unint64_t *)&qword_26AF94868, &qword_26AF94878);
    }
    int v22 = (_anonymous_namespace_ *)(a2 + 552);
    if (!*(void *)(a2 + 608))
    {
    }
    re::StringID::invalid((re::StringID *)&v35);
    re::StringID::destroyString((re::StringID *)&v35);
    re::StringID::invalid((re::StringID *)&v35);
    re::StringID::destroyString((re::StringID *)&v35);
    LODWORD(v35) = 1;
    LOBYTE(v37) = 9;
    uint64_t v38 = 0x60DF09E0AF8AD07;
    uint64_t v36 = 0x2AC55919B0708E48;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v22, &v36, (uint64_t)&v35);
    re::StringID::invalid((re::StringID *)&v31);
    re::StringID::destroyString((re::StringID *)&v31);
    re::StringID::invalid((re::StringID *)&v31);
    re::StringID::destroyString((re::StringID *)&v31);
    int v31 = 1;
    char v33 = 9;
    uint64_t v34 = 0x2B6EE9216B5DB7CCLL;
    uint64_t v32 = 0x165DA6A7F4273B43;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v22, &v32, (uint64_t)&v31);
    if (*(void *)&v42[4])
    {
      if (v43)
      {
        (*(void (**)(void))(**(void **)&v42[4] + 40))();
        uint64_t v43 = 0;
        uint64_t v44 = 0;
      }
      *(void *)&v42[4] = 0;
    }
    if ((void)v39)
    {
      if (BYTE8(v39)) {
        (*(void (**)(void))(*(void *)v39 + 40))();
      }
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(uint64_t a1, unint64_t *a2, int *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      if (*(void *)(v13 + 24 * v8 + 8) == v6)
      {
LABEL_10:
        *(void *)(v13 + 24 * v8 + 16) = *a3;
        goto LABEL_14;
      }
      while (1)
      {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 24 * v8 + 8) == v6) {
          goto LABEL_10;
        }
      }
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
      unint64_t v6 = *a2;
    }
    else
    {
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(v15 + 4 * v7);
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(v15 + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
LABEL_14:
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(uint64_t result, unint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *a2;
  if (!*(void *)result)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(result + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(result + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(result + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v9 + 24 * v8 + 16) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::MaterialBuilder::result(re::MaterialBuilder *this@<X0>, re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (int *)this;
  uint64_t v91 = *MEMORY[0x263EF8340];
  unint64_t v4 = (re::MaterialManager *)*((void *)a2 + 3);
  uint64_t v5 = re::globalAllocators(this);
  unint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 1392, 8);
  unint64_t v7 = re::MaterialInstance::MaterialInstance((re::MaterialInstance *)v6, v4);
  uint64_t v8 = *((void *)v3 + 4);
  uint64_t v9 = *((void *)v7 + 2);
  if (v9 != v8)
  {
    if (v8)
    {
      id v10 = (id)(v8 + 8);
      uint64_t v9 = v6[2];
    }
    if (v9) {

    }
    _DWORD v6[2] = v8;
  }
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(v6 + 21, (uint64_t *)v3 + 137);
  int v58 = v6;
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(v6 + 24, (uint64_t *)v3 + 140);
  unint64_t v11 = (unint64_t)(v3 + 22);
  re::fillTablesWithLinkedFunctionParameterDefaults((uint64_t)(v6 + 21), (void *)v3 + 11, (_anonymous_namespace_ *)(v3 + 154));
  int v12 = v6;
  re::fillTablesWithLinkedFunctionParameterDefaults((uint64_t)(v6 + 24), (void *)v3 + 11, (_anonymous_namespace_ *)(v3 + 154));
  v6[169] = *(void *)v3;
  *(void *)uint64_t v3 = 0;
  re::MaterialParameterTable::MaterialParameterTable((uint64_t)v64, (uint64_t *)v3 + 11, (uint64_t *)v3 + 77);
  uint64_t v13 = *((void *)v3 + 4);
  uint64_t v63 = v13;
  if (v13)
  {
    uint64_t v14 = (void *)(v13 + 8);
    id v15 = (id)(v13 + 8);
    re::MaterialBuilder::overlayBlurTechniquesAndTextures((uint64_t)v3, (uint64_t)v64, &v63);

    uint64_t v63 = 0;
  }
  else
  {
    re::MaterialBuilder::overlayBlurTechniquesAndTextures((uint64_t)v3, (uint64_t)v64, &v63);
  }
  uint64_t v54 = v6 + 28;
  re::MaterialParameterTable::operator=((uint64_t)(v6 + 28), (uint64_t)v64);
  unint64_t v16 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(v3 + 2));
  v6[27] = v16;
  unint64_t v17 = *(void *)(*((void *)v3 + 4) + 120);
  if (v17 >= 0xFFFFFFFF)
  {
    int v18 = *re::graphicsLogObjects((re *)v16);
    unint64_t v16 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v17;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reached max supported material definitions (%zu)", (uint8_t *)&buf, 0xCu);
    }
    unint64_t v17 = 4294967294;
  }
  v6[10] = v17;
  if (v17)
  {
    v6[11] = (uint64_t)v19;
    if (!v19)
    {
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v21 = v17 - 1;
    if (v17 == 1)
    {
      *char v19 = 0;
      int v22 = v19 + 4;
    }
    else
    {
      int v22 = v19 + 4;
      do
      {
        *(v22 - 4) = 0;
        *int v22 = 0;
        v22 += 5;
        --v21;
      }
      while (v21);
      *(v22 - 4) = 0;
    }
    unint64_t v23 = 0;
    *int v22 = 0;
    if (v17 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v17;
    }
    uint64_t v56 = v24;
    uint64_t v57 = (uint64_t)(v3 + 10);
    uint64_t v25 = 16;
    while (1)
    {
      uint64_t v26 = *((void *)v3 + 4);
      unint64_t v27 = *(void *)(v26 + 120);
      if (v27 <= v23)
      {
        uint64_t v66 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v70 = 136315906;
        int v71 = "operator[]";
        __int16 v72 = 1024;
        int v73 = 468;
        __int16 v74 = 2048;
        unint64_t v75 = v23;
        __int16 v76 = 2048;
        unint64_t v77 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        uint64_t v65 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v78 = 136315906;
        uint64_t v79 = "operator[]";
        __int16 v80 = 1024;
        int v81 = 468;
        __int16 v82 = 2048;
        unint64_t v83 = v23;
        __int16 v84 = 2048;
        uint64_t v85 = (void *)v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        uint64_t v65 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v78 = 136315906;
        uint64_t v79 = "operator[]";
        __int16 v80 = 1024;
        int v81 = 468;
        __int16 v82 = 2048;
        unint64_t v83 = v23;
        __int16 v84 = 2048;
        uint64_t v85 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        uint64_t v65 = 0;
        uint64_t v3 = &v70;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v78 = 136315906;
        uint64_t v79 = "operator[]";
        __int16 v80 = 1024;
        int v81 = 468;
        __int16 v82 = 2048;
        unint64_t v83 = v23;
        __int16 v84 = 2048;
        uint64_t v85 = (void *)v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_89;
      }
      unsigned int v28 = *(void **)(*(void *)(v26 + 128) + 8 * v23);
      re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v60, v28[8], v28[7], v57);
      uint64_t v29 = (re *)re::FunctionConstantsEnumerator::overrideEnumerator(v28 + 1, v57, &v70);
      unint64_t v30 = (_BYTE)v70 ? (const char **)((char *)&v71 + 4) : (const char **)(v28 + 1);
      unint64_t v31 = v62;
      unint64_t v27 = v61;
      if (*((void *)v3 + 147))
      {
        unint64_t v11 = *((void *)v3 + 148);
        if (v11 <= v23) {
          goto LABEL_86;
        }
        unint64_t v11 = *(void *)(*((void *)v3 + 149) + 8 * v23);
        unint64_t v59 = v11;
        if (v11) {
          uint64_t v29 = (re *)(id)(v11 + 8);
        }
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v59 = 0;
      }
      uint64_t v32 = *((void *)v3 + 150);
      if (v32)
      {
        int v12 = (uint64_t *)*((void *)v3 + 151);
        if ((unint64_t)v12 <= v23) {
          goto LABEL_87;
        }
        uint64_t v33 = *((void *)v3 + 152);
        uint64_t v34 = (*(unsigned char *)(v33 + v25) & 1) != 0 ? (uint64_t *)(v33 + v25 + 8) : *(uint64_t **)(v33 + v25 + 16);
        int v12 = v58;
        uint64_t v32 = *(void *)(v33 + v25 - 8);
      }
      else
      {
        uint64_t v34 = 0;
        int v12 = v58;
      }
      re::MaterialBuilder::generateTechnique(v29, (uint64_t)v28, (uint64_t)v12, v31, v27, (uint64_t)v30, (uint64_t)&v66, (uint64_t *)&v59, v34, v32);
      if (v11)
      {

        unint64_t v59 = 0;
      }
      int v35 = v66;
      if ((_BYTE)v66)
      {
        unint64_t v27 = v12[10];
        if (v27 <= v23) {
          goto LABEL_88;
        }
        std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::operator=[abi:nn180100]((uint64_t *)(v12[11] + v25 - 16), &v67);
      }
      else
      {
        uint64_t v36 = v69;
        if (v68) {
          uint64_t v36 = *(unsigned char **)&v69[7];
        }
        re::DynamicString::format((re::DynamicString *)"[%s] %s", (re::DynamicString *)&buf, *v28, v36);
        long long v37 = buf;
        long long v38 = v87;
        *(unsigned char *)a3 = 0;
        *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v37;
        *(_OWORD *)(a3 + 24) = v38;
      }
      re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result((unsigned __int8 *)&v66);
      if ((_BYTE)v70) {
        re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((const char **)((char *)&v71 + 4));
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v60);
      if (!v35) {
        break;
      }
      ++v23;
      v25 += 40;
      if (v56 == v23) {
        goto LABEL_53;
      }
    }
    re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v64);
    if (v12) {
      goto LABEL_84;
    }
  }
  else
  {
LABEL_53:
    uint64_t v39 = *((void *)v3 + 4);
    long long v40 = (uint64_t *)(v39 + 136);
    int v41 = v12 + 3;
    unint64_t v11 = (unint64_t)v54;
    if (v41 != (void *)(v39 + 136))
    {
      uint64_t v42 = *v40;
      if (*v41)
      {
        if (v42)
        {
          re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy((uint64_t)v41, v39 + 136);
          ++*((_DWORD *)v58 + 16);
        }
        else
        {
          re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)v41);
        }
      }
      else if (v42)
      {
        unsigned int v43 = *(_DWORD *)(v39 + 164);
        if (v43 <= 3) {
          signed int v44 = 3;
        }
        else {
          signed int v44 = v43;
        }
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v41, v42, v44);
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy((uint64_t)v41, (uint64_t)v40);
      }
    }
    unint64_t v27 = *((void *)v3 + 4) + 16;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
LABEL_89:
    }
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    re::MaterialParameterTable::appendPassTechniqueMappingsFrom((_anonymous_namespace_ *)v11, v27, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    uint64_t v45 = *((void *)v3 + 4);
    uint64_t v46 = *(unsigned int *)(v45 + 96);
    if (v46)
    {
      uint64_t v47 = 0;
      unsigned int v48 = (int *)(*(void *)(v45 + 80) + 8);
      while (1)
      {
        int v49 = *v48;
        v48 += 18;
        if (v49 < 0) {
          break;
        }
        if (v46 == ++v47)
        {
          LODWORD(v47) = *(_DWORD *)(v45 + 96);
          break;
        }
      }
    }
    else
    {
      LODWORD(v47) = 0;
    }
    if (v46 != v47)
    {
      uint64_t v50 = v47;
      do
      {
        re::MaterialParameterTable::appendPassTechniqueMappingsFrom((_anonymous_namespace_ *)v11, *(void *)(v45 + 80) + 72 * v50 + 24, *(void *)(*(void *)(v45 + 80) + 72 * v50 + 16));
        if (*(_DWORD *)(v45 + 96) <= (v47 + 1)) {
          int v51 = v47 + 1;
        }
        else {
          int v51 = *(_DWORD *)(v45 + 96);
        }
        int v52 = v47;
        while (1)
        {
          uint64_t v50 = (v52 + 1);
          if (v51 - 1 == v52) {
            break;
          }
          ++v52;
          LODWORD(v47) = v50;
          if ((*(_DWORD *)(*(void *)(v45 + 80) + 72 * v50 + 8) & 0x80000000) != 0) {
            goto LABEL_82;
          }
        }
        LODWORD(v47) = v51;
LABEL_82:
        ;
      }
      while (v46 != v47);
    }
    int v12 = v58;
    v58[170] = *((void *)v3 + 153);
    *((unsigned char *)v58 + 136re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((unsigned char *)v3 + 1232);
    int v53 = v58 + 1;
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v58;
    re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v64);
LABEL_84:
  }
}

unint64_t re::MaterialRenderFlags::flattenToOverrideFlags(re::MaterialRenderFlags *this)
{
  uint64_t v1 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    unsigned int v2 = *((unsigned __int8 *)this + 1);
    uint64_t v1 = 1;
  }
  else
  {
    unsigned int v2 = 0;
  }
  if (*((unsigned char *)this + 6))
  {
    v2 |= *((unsigned __int8 *)this + 7) << 11;
    uint64_t v1 = v1 | 0x800;
  }
  if (*((unsigned char *)this + 8))
  {
    unsigned int v2 = v2 & 0xFFFFEFFF | (*((unsigned __int8 *)this + 9) << 12);
    uint64_t v1 = v1 | 0x1000;
  }
  if (*((unsigned char *)this + 2))
  {
    unsigned int v2 = v2 & 0xFFFFFF9F | (32 * (*((unsigned char *)this + 3) == 1)) | ((*((unsigned char *)this + 3) == 0) << 6);
    uint64_t v1 = v1 | 0x60;
  }
  if (*((unsigned char *)this + 4))
  {
    unsigned int v2 = v2 & 0xFFCFFFFF | ((*((unsigned char *)this + 5) == 0) << 20) | ((*((unsigned char *)this + 5) == 1) << 21);
    uint64_t v1 = v1 | 0x300000;
  }
  if (*((unsigned char *)this + 10))
  {
    unsigned int v2 = v2 & 0xFF7FFFFF | (*((unsigned __int8 *)this + 11) << 23);
    uint64_t v1 = v1 | 0x800000;
  }
  if (*((unsigned char *)this + 12))
  {
    unsigned int v2 = v2 & 0xFEFFFFFF | (*((unsigned __int8 *)this + 13) << 24);
    uint64_t v1 = v1 | 0x1000000;
  }
  if (*((unsigned char *)this + 14))
  {
    unsigned int v2 = v2 & 0xFDFFFFFF | (*((unsigned __int8 *)this + 15) << 25);
    uint64_t v1 = v1 | 0x2000000;
  }
  if (*((unsigned char *)this + 16))
  {
    unsigned int v2 = v2 & 0xFBFFFFFF | (*((unsigned __int8 *)this + 17) << 26);
    uint64_t v1 = v1 | 0x4000000;
  }
  return v2 | (unint64_t)(v1 << 32);
}

uint64_t *re::MaterialBuilder::generateTechnique@<X0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v16 = re::globalAllocators(a1);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 136, 8);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(void *)(v17 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v17 + 124) = 0x7FFFFFFF;
  uint64_t v36 = (re::MaterialTechnique *)&unk_26E70E7C8;
  long long v38 = (void **)&v36;
  uint64_t v42 = (long long *)v41;
  long long v40 = (re::MaterialTechnique *)v17;
  v41[0] = &unk_26E70E7C8;
  std::__function::__value_func<void ()(re::MaterialTechnique *)>::~__value_func[abi:nn180100](&v36);
  int v18 = v40;
  *(void *)long long v40 = a2;
  *((void *)v18 + 1) = a3;
  re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)a6, 0, a4, a5, (uint64_t)&v36);
  v35[0] = v39;
  v35[1] = *((void *)&v37 + 1);
  re::FixedArray<re::TechniqueFunctionConstant>::operator=((re::MaterialTechnique *)((char *)v40 + 16), (uint64_t)v35);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v36);
  LOBYTE(v36) = 1;
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(&v37, a6);
  long long v39 = *(_OWORD *)(a6 + 24);
  char v19 = v40;
  if (*((unsigned char *)v40 + 40) || (_BYTE)v36)
  {
    if (!*((unsigned char *)v40 + 40) || (_BYTE)v36)
    {
      if (*((unsigned char *)v40 + 40) || !(_BYTE)v36)
      {
        re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)v40 + 6, (uint64_t *)&v37);
      }
      else
      {
        *((unsigned char *)v40 + 40) = 1;
        *((_OWORD *)v19 + 3) = v37;
        uint64_t v20 = v38;
        long long v38 = 0;
        long long v37 = 0uLL;
        *((void *)v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20;
      }
      *(_OWORD *)((char *)v19 + 72) = v39;
    }
    else
    {
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((void *)v40 + 6);
      *((unsigned char *)v19 + 40) = 0;
    }
    if ((_BYTE)v36) {
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(&v37);
    }
  }
  if (*(unsigned char *)(a2 + 2845))
  {
    uint64_t TechniqueVariant = re::MaterialTechnique::getOrCreateTechniqueVariant(v40, *(void *)(a6 + 32), 1);
    if (*a8)
    {
      uint64_t v22 = TechniqueVariant;
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(TechniqueVariant + 8), *a8);
      atomic_store(1u, (unsigned __int8 *)(v22 + 17));
      if (a10)
      {
        uint64_t v25 = v22 + 24;
        uint64_t v26 = 8 * a10;
        do
        {
          uint64_t v27 = *a9;
          if (*a9)
          {
            id v28 = (id)(v27 + 8);
            uint64_t v34 = v27;
            id v29 = (id)(v27 + 8);
            re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(v25, (void *)(v27 + 24), &v34);
            if (v34)
            {

              uint64_t v34 = 0;
            }
          }
          ++a9;
          v26 -= 8;
        }
        while (v26);
      }
    }
  }
  unint64_t v30 = v40;
  unint64_t v31 = v42;
  long long v40 = 0;
  uint64_t v36 = v30;
  if (!v42)
  {
    *(unsigned char *)a7 = 1;
    *(void *)&long long v39 = 0;
    uint64_t v36 = 0;
    *(void *)(a7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v30;
    goto LABEL_26;
  }
  if (v42 != (long long *)v41)
  {
    uint64_t v42 = 0;
    *(unsigned char *)a7 = 1;
    *(void *)&long long v39 = v31;
    uint64_t v36 = 0;
    *(void *)(a7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v30;
    goto LABEL_28;
  }
  *(void *)&long long v39 = &v37;
  (*(void (**)(void *, long long *))(v41[0] + 24))(v41, &v37);
  uint64_t v32 = v36;
  unint64_t v31 = (long long *)v39;
  *(unsigned char *)a7 = 1;
  uint64_t v36 = 0;
  *(void *)(a7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v32;
  if (!v31)
  {
LABEL_26:
    *(void *)(a7 + 40) = 0;
    goto LABEL_31;
  }
LABEL_28:
  if (v31 == &v37)
  {
    *(void *)(a7 + 40) = a7 + 16;
    (*(void (**)(long long *))(v37 + 24))(&v37);
  }
  else
  {
    *(void *)(a7 + 40) = v31;
    *(void *)&long long v39 = 0;
  }
LABEL_31:
  std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v36);
  return std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v40);
}

uint64_t *std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::MaterialTechnique *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(re::MaterialTechnique *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t re::MaterialTechnique::getOrCreateTechniqueVariant(re::MaterialTechnique *this, unint64_t a2, char a3)
{
  unint64_t v6 = (void *)((char *)this + 88);
  unint64_t v14 = a2;
  if (!re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 88, (uint64_t *)&v14))
  {
    re::MaterialTechnique::createNewTechniqueVariant(this, a2, a3);
    unint64_t v13 = a2;
    unint64_t v14 = v7;
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::MaterialTechniqueVariant *&>((uint64_t)v6, (uint64_t *)&v13, &v14);
  }
  LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFF;
  if (*v6)
  {
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v10 = *(unsigned int *)(*((void *)this + 12) + 4 * ((v9 ^ (v9 >> 31)) % *((unsigned int *)this + 28)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *((void *)this + 13);
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
      if (*(void *)(v11 + 32 * v10 + 16) != a2)
      {
        uint64_t v8 = v10;
        while (1)
        {
          uint64_t v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
          if (v8 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v11 + 32 * v8 + 16) == a2) {
            return *(void *)(*((void *)this + 13) + 32 * v8 + 24);
          }
        }
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(*((void *)this + 13) + 32 * v8 + 24);
}

void *re::DynamicArray<unsigned char>::resizeUninitialized(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else if (result[1] < a2)
  {
    uint64_t result = re::DynamicArray<BOOL>::setCapacity(result, a2);
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(_anonymous_namespace_ *a1, void *a2, char *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, a2, a3);
}

unint64_t re::MetalTypeInfo::resolutionHash(re::MetalTypeInfo *this)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * ((*((void *)this + 2) >> 31) ^ (*((void *)this + 2) >> 1));
  unint64_t v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  unint64_t v3 = (*((unsigned int *)this + 1) | ((unint64_t)*(unsigned int *)this << 32)) ^ ((*((unsigned int *)this + 1) | ((unint64_t)*(unsigned int *)this << 32)) >> 30);
  unint64_t v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  unint64_t v5 = ((v2 << 6) + (v2 >> 2) + (v4 ^ (v4 >> 31)) - 0x61C8864680B583E9) ^ v2;
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = (re::MetalTypeInfo *)*((void *)this + 7);
    uint64_t v8 = 80 * v6;
    do
    {
      v5 ^= (v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + re::MetalTypeInfo::resolutionHash(v7);
      uint64_t v7 = (re::MetalTypeInfo *)((char *)v7 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  return v5;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::AttributeTable::~AttributeTable(re::AttributeTable *this)
{
  unint64_t v2 = (re::AttributeTable *)((char *)this + 48);
  re::BufferTable::deinit((re::AttributeTable *)((char *)this + 48));
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  re::BufferTable::~BufferTable(v2);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3);
  if (*(void *)this)
  {

    *(void *)this = 0;
  }
}

void *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::init<>(a1, v4, *(void *)(a2 + 8));
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::copy((uint64_t)a1, a2);
  }
  return a1;
}

void *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x2E8BA2E8BA2E8BBLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  signed int v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 88 * a3, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v7 = v5;
  for (unint64_t i = a3 - 1; i; --i)
  {
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    signed int v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((void *)v7 + 4) = 0;
    *((_DWORD *)v7 + 10) = 0;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((unsigned char *)v7 + 80) = 0;
    uint64_t v7 = (_anonymous_namespace_ *)((char *)v7 + 88);
  }
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t result = re::DynamicString::setCapacity(v7, 0);
  *((void *)v7 + 4) = 0;
  *((_DWORD *)v7 + 10) = 0;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((unsigned char *)v7 + 80) = 0;
  return result;
}

uint64_t re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *>((uint64_t)&v4, *(void *)(a2 + 16), *(void *)(a2 + 16) + 88 * v2, *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  uint64_t v5 = a4 + 48;
  uint64_t v6 = a2 + 48;
  do
  {
    re::DynamicString::operator=((re::DynamicString *)(v5 - 48), (re::DynamicString *)(v6 - 48));
    uint64_t v7 = *(void *)(v6 - 16);
    *(_DWORD *)(v5 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v6 - 8);
    *(void *)(v5 - 16) = v7;
    re::FixedArray<re::Optional<unsigned long long>>::operator=((void *)v5, v6);
    char v8 = *(unsigned char *)(v6 + 32);
    *(void *)(v5 + 24) = *(void *)(v6 + 24);
    *(unsigned char *)(v5 + 32) = v8;
    v5 += 88;
    uint64_t v9 = v6 + 40;
    v6 += 88;
  }
  while (v9 != v4);
  return v4;
}

void *re::FixedArray<re::Optional<unsigned long long>>::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*a1)
    {
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::Optional<unsigned long long>>::init<>(a1, v4, *(void *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::Optional<unsigned long long>>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

void *re::FixedArray<re::Optional<unsigned long long>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(unsigned char *)uint64_t result = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)uint64_t result = 0;
  return result;
}

unsigned __int8 *re::FixedArray<re::Optional<unsigned long long>>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Optional<unsigned long long> *,re::Optional<unsigned long long> *,re::Optional<unsigned long long> *>((uint64_t)&v4, *(unsigned __int8 **)(a2 + 16), (unsigned __int8 *)(*(void *)(a2 + 16) + 16 * v2), *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = (unsigned __int8 *)_os_crash();
  __break(1u);
  return result;
}

unsigned __int8 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Optional<unsigned long long> *,re::Optional<unsigned long long> *,re::Optional<unsigned long long> *>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result = a2;
  if (a2 != a3)
  {
    do
    {
      int v5 = *result;
      if (*(unsigned char *)a4) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = v5 == 0;
      }
      if (!v6)
      {
        if (*(unsigned char *)a4) {
          BOOL v7 = v5 == 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          *(unsigned char *)a4 = 0;
        }
        else
        {
          if (*(unsigned char *)a4) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v5 == 0;
          }
          if (!v8) {
            *(unsigned char *)a4 = 1;
          }
          *(void *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)result + 1);
        }
      }
      result += 16;
      a4 += 16;
    }
    while (result != a3);
    return a3;
  }
  return result;
}

double re::MaterialTechnique::createNewTechniqueVariant(re::MaterialTechnique *this, unint64_t a2, char a3)
{
  int v5 = re::globalAllocators(this);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 408, 8);
  double result = 0.0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(unsigned char *)(v6 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(void *)(v6 + 56) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(v6 + 104) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(void *)(v6 + 152) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(void *)(v6 + 200) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(void *)(v6 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v6 + 296) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_DWORD *)(v6 + 300) = 0x7FFFFFFF;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(v6 + 344) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(void *)(v6 + 392) = 0x7FFFFFFF00000000;
  *(void *)uint64_t v6 = this;
  *(unsigned char *)(v6 + 16) = a3;
  return result;
}

uint64_t re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::MaterialTechniqueVariant *&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unsigned int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_200, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::FixedArray<re::AttributeArgument>::deinit(void *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    unint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      unint64_t v4 = (re::StringID *)result[2];
      uint64_t v5 = 24 * v2;
      do
      {
        re::StringID::destroyString(v4);
        unint64_t v4 = (re::StringID *)((char *)v4 + 24);
        v5 -= 24;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *unint64_t v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)id v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&unsigned char v28[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v23 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v23 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 48), v23 - 32, v23);
              }
              ++v22;
              v23 += 56;
            }
            while (v22 < v21);
          }
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_200, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<unsigned char>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_175, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicArray<re::BufferSlice>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BufferSlice>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BufferSlice>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::BufferSlice>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::BufferSlice>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 16 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = *(id *)v8;
          v11[1] = *(void *)(v8 + 8);
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 16;
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(unint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)unint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v14 = *v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v6 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v6[6];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = *(unsigned __int8 *)(a2 + 11);
  unint64_t v5 = *(unsigned __int16 *)(a2 + 8) | (v4 << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16);
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v4 >> 6))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v4 >> 6))) >> 27));
  *(void *)(result + 48) ^= v3 ^ ((v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9 + (v6 ^ (v6 >> 31)));
  return result;
}

uint64_t re::DynamicArray<re::MetalTypeInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        unint64_t v6 = (void *)(v3 + 40);
        do
        {
          re::FixedArray<re::MetalTypeInfo>::deinit(v6);
          re::StringID::destroyString((re::StringID *)(v6 - 3));
          v6 += 10;
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::TechniqueStage::~TechniqueStage(re::TechniqueStage *this)
{
}

void *re::FixedArray<re::TextureArgument>::deinit(void *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (re::StringID *)result[2];
      uint64_t v5 = 32 * v2;
      do
      {
        re::StringID::destroyString(v4);
        uint64_t v4 = (re::StringID *)((char *)v4 + 32);
        v5 -= 32;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *unint64_t v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::BufferArgument>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *uint64_t result = 0;
      result[1] = "";
      result[2] = 0;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *uint64_t result = 0;
  result[1] = "";
  result[2] = 0;
  return result;
}

void re::FixedArray<NS::SharedPtr<MTL::ArgumentEncoder>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unsigned int v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    unsigned int v8 = (void *)((char *)v8 + v5 - 8);
  }
  void *v8 = 0;
}

uint64_t re::FixedArray<re::TextureArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
      *(void *)(result + 24) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(void *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  return result;
}

uint64_t re::FixedArray<re::SamplerArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
      *(_WORD *)(result + 16) = 0;
      *(unsigned char *)(result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      result += 24;
      --v6;
    }
    while (v6);
  }
  *(void *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::Bitset<256>::toWordIndex(unint64_t a1, uint64_t a2)
{
  if (a1 < 0x100) {
    return a1 >> 6;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a1, 256, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::AttributeArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
      *(_DWORD *)(result + 16) = 0;
      result += 24;
      --v6;
    }
    while (v6);
  }
  *(void *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *re::DynamicArray<re::AttributeArgument>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BlendParameterInputNode>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendParameterInputNode>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26E70E6E8;
  *(_OWORD *)(v2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E6E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  unint64_t v2 = re::globalAllocators((re *)a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 192, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v4 = &unk_26E713508;
  *(_OWORD *)(v4 + 16) = 0u;
  uint64_t v5 = (void *)(v4 + 16);
  *(unsigned char *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(_OWORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  BOOL v6 = (uint64_t *)(v4 + 32);
  *(void *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  uint64_t v75 = v3;
  re::FixedArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)(v4 + 128), *(void *)(a1 + 8));
  *(void *)(v3 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(void *)(v3 + 144), *(void *)(v3 + 136), 1);
  unint64_t v7 = *(uint64_t **)(a1 + 16);
  re::FixedArray<re::LinkedFunction>::operator=(v6, v7);
  re::FixedArray<re::LinkedFunction>::operator=((uint64_t *)(v3 + 56), v7 + 3);
  id v73 = 0;
  id v74 = 0;
  uint64_t v8 = **(void **)(a1 + 24);
  if (*(unsigned char *)(v8 + 2448)) {
    long long v9 = *(const char **)(v8 + 2456);
  }
  else {
    long long v9 = (const char *)(v8 + 2449);
  }
  uint64_t v10 = re::FunctionReflectionCache::hashFunction(*(void *)(v3 + 144), *(void *)(v3 + 136), (re::FunctionConstantUsageMask *)(v8 + 2504), v9, *(void *)(v8 + 2424));
  CachedFunction = (void **)re::FunctionReflectionCache::tryGetCachedFunction(*(os_unfair_lock_s **)(a1 + 32), v10);
  if (CachedFunction)
  {
    int v12 = CachedFunction;
    NS::SharedPtr<MTL::Texture>::operator=(&v74, CachedFunction);
    uint64_t v13 = **(unint64_t ***)(a1 + 24);
    unint64_t v14 = v13[310];
    unint64_t v15 = v14 >> 1;
    if ((v14 & 1) == 0) {
      unint64_t v15 = v14 >> 1;
    }
    if (!v15)
    {
      uint64_t v19 = 0;
      goto LABEL_16;
    }
    if (v14) {
      unint64_t v16 = (const char *)v13[311];
    }
    else {
      unint64_t v16 = (char *)v13 + 2481;
    }
    uint64_t v20 = re::FunctionReflectionCache::hashFunction(*(void *)(v3 + 144), *(void *)(v3 + 136), (re::FunctionConstantUsageMask *)(v13 + 321), v16, v13[304]);
    signed int v21 = (void **)re::FunctionReflectionCache::tryGetCachedFunction(*(os_unfair_lock_s **)(a1 + 32), v20);
    if (v21)
    {
      unint64_t v22 = v21;
      NS::SharedPtr<MTL::Texture>::operator=(&v73, v21);
      uint64_t v19 = (uint64_t)(v22 + 1);
LABEL_16:
      uint64_t v23 = (uint64_t)(v12 + 1);
      re::makeAttributeArguments(&v74, (uint64_t)v72);
      uint64_t v24 = **(void **)(a1 + 24);
      if (*(unsigned char *)(v24 + 2448)) {
        int v25 = *(const char **)(v24 + 2456);
      }
      else {
        int v25 = (const char *)(v24 + 2449);
      }
      re::makeStage((re *)1, &v74, v25, *(void *)(v24 + 2424), *(unsigned __int8 *)(v24 + 2848), *(unsigned __int8 *)(*(void *)(a1 + 48) + 309), v23, *(id **)(a1 + 16), (uint64_t)v70, v66, (uint64_t)v72);
      if (v70[0])
      {
        signed int v26 = v71;
        void *v5 = v71;
        uint64_t v27 = **(void **)(a1 + 24);
        unint64_t v28 = *(void *)(v27 + 2480);
        unint64_t v29 = v28 >> 1;
        if ((v28 & 1) == 0) {
          unint64_t v29 = v28 >> 1;
        }
        if (!v29) {
          goto LABEL_34;
        }
        if (v28) {
          unint64_t v30 = *(const char **)(v27 + 2488);
        }
        else {
          unint64_t v30 = (const char *)(v27 + 2481);
        }
        uint64_t v34 = *(void *)(v27 + 2432);
        int v35 = *(unsigned __int8 *)(v27 + 2848);
        int v36 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 309);
        long long v37 = (id *)(*(void *)(a1 + 16) + 24);
        uint64_t v80 = 0;
        uint64_t v77 = 0;
        int v78 = 0;
        uint64_t v76 = 0;
        int v79 = 0;
        re::makeStage((re *)2, &v73, v30, v34, v35, v36, v19, v37, (uint64_t)&v68, v67, (uint64_t)&v76);
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v76);
        if ((_BYTE)v68)
        {
          *(void *)(v3 + 24) = v69;
          signed int v26 = *(void **)(v3 + 16);
LABEL_34:
          if (*((unsigned char *)v26 + 332)
            && (uint64_t v38 = *(void *)(v3 + 24)) != 0
            && *(unsigned char *)(v38 + 332)
            && (*((unsigned __int8 *)v26 + 332) != *(unsigned __int8 *)(v38 + 332)
             || *((unsigned __int16 *)v26 + 165) != *(unsigned __int16 *)(v38 + 330)))
          {
            uint64_t v59 = **(void **)(a1 + 24);
            if (*(unsigned char *)(v59 + 2448)) {
              uint64_t v60 = *(void *)(v59 + 2456);
            }
            else {
              uint64_t v60 = v59 + 2449;
            }
            if (*(unsigned char *)(v59 + 2480)) {
              uint64_t v61 = *(void *)(v59 + 2488);
            }
            else {
              uint64_t v61 = v59 + 2481;
            }
            re::DynamicString::format((re::DynamicString *)"Vertex shader function %s and fragment shader function %s do not have matching \"dynamicSamplers\" arrays.", (re::DynamicString *)&v76, v60, v61);
            if (v77) {
              unint64_t v62 = v78;
            }
            else {
              unint64_t v62 = (char *)&v77 + 1;
            }
            re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", (const __CFString *)0x46, (uint64_t)v62, &v68);
            uint64_t v63 = *(id **)(a1 + 40);
            if (v63 != &v68)
            {
              id v64 = v68;
              id v68 = 0;
              id v65 = *v63;
              *uint64_t v63 = v64;
            }
            if (v76 && (v77 & 1) != 0) {
              (*(void (**)(void))(*(void *)v76 + 40))();
            }
          }
          else
          {
            unint64_t v39 = *(void *)(**(void **)(a1 + 24) + 2480);
            if (v39) {
              unint64_t v40 = v39 >> 1;
            }
            else {
              unint64_t v40 = v39 >> 1;
            }
            unint64_t v41 = v26[6];
            uint64_t v42 = (v41 << 6) + (v41 >> 2) - 0x61C8864680B583E9;
            if (v40)
            {
              uint64_t v43 = *(void **)(v3 + 24);
              unint64_t v44 = v43[6];
              uint64_t v45 = (v44 + v42) ^ v41;
              uint64_t v46 = ((((v26[32] + v42) ^ v41) << 6)
                   - 0x61C8864680B583E9
                   + (((v26[32] + v42) ^ v41) >> 2)
                   + (((v44 << 6) - 0x61C8864680B583E9 + (v44 >> 2) + v43[32]) ^ v44)) ^ (v26[32] + v42) ^ v41;
              uint64_t v47 = (v43[17] - 0x61C8864680B583E9 + (v26[17] << 6) + (v26[17] >> 2)) ^ v26[17];
              uint64_t v48 = (v43[24] - 0x61C8864680B583E9 + (v26[24] << 6) + (v26[24] >> 2)) ^ v26[24];
              uint64_t v49 = (v43[28] - 0x61C8864680B583E9 + (v26[28] << 6) + (v26[28] >> 2)) ^ v26[28];
              uint64_t v50 = (v43[13] - 0x61C8864680B583E9 + (v26[13] << 6) + (v26[13] >> 2)) ^ v26[13];
            }
            else
            {
              uint64_t v46 = (v26[32] + v42) ^ v41;
              uint64_t v47 = v26[17];
              uint64_t v48 = v26[24];
              uint64_t v49 = v26[28];
              uint64_t v50 = v26[13];
              uint64_t v45 = v41;
            }
            *(void *)(v3 + 80) = v45;
            *(void *)(v3 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v47;
            *(void *)(v3 + 96) = v48;
            *(void *)(v3 + 104) = v46;
            *(void *)(v3 + 112) = v49;
            *(void *)(v3 + 120) = v50;
            *(void *)(v3 + 184) = objc_msgSend(v74, sel_patchType);
            if (objc_msgSend(v74, sel_patchControlPointCount) == (id)-1) {
              unsigned __int8 v55 = 0;
            }
            else {
              unsigned __int8 v55 = objc_msgSend(v74, sel_patchControlPointCount);
            }
            *(unsigned char *)(v3 + 176) = v55;
            re::MaterialPipelineData::generatePipelineStateKey((re::MaterialPipelineData *)v3);
            re::MaterialManager::tryGetMaterialPipelineData(*(os_unfair_lock_s **)(*(void *)(a1 + 48) + 24), *(void *)(v3 + 152), &v76);
            uint64_t v56 = *(uint64_t **)(a1 + 56);
            uint64_t v57 = *v56;
            uint64_t *v56 = v76;
            if (v57) {

            }
            int v58 = *(uint64_t **)(a1 + 56);
            if (!*v58)
            {
              re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v58, v3);
              re::MaterialManager::installMaterialPipelineData(*(os_unfair_lock_s **)(*(void *)(a1 + 48) + 24), &v75);
            }
          }
          goto LABEL_65;
        }
        re::ObjCObject::operator=(*(id **)(a1 + 40), &v69);
        if (!(_BYTE)v68)
        {
          id v31 = v69;
          goto LABEL_56;
        }
      }
      else
      {
        re::ObjCObject::operator=(*(id **)(a1 + 40), (id *)&v71);
        if (!v70[0])
        {
          id v31 = v71;
LABEL_56:
        }
      }
LABEL_65:
      re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v72);
      goto LABEL_66;
    }
    uint64_t v32 = **(void **)(a1 + 24);
    if (*(unsigned char *)(v32 + 2480)) {
      uint64_t v33 = *(void *)(v32 + 2488);
    }
    else {
      uint64_t v33 = v32 + 2481;
    }
    re::DynamicString::format((re::DynamicString *)"makeFunction failed for fragment shader function %s.", (re::DynamicString *)&v76, v33);
  }
  else
  {
    uint64_t v17 = **(void **)(a1 + 24);
    if (*(unsigned char *)(v17 + 2448)) {
      uint64_t v18 = *(void *)(v17 + 2456);
    }
    else {
      uint64_t v18 = v17 + 2449;
    }
    re::DynamicString::format((re::DynamicString *)"makeFunction failed for vertex shader function %s.", (re::DynamicString *)&v76, v18);
  }
  if (v77) {
    int v51 = v78;
  }
  else {
    int v51 = (char *)&v77 + 1;
  }
  re::WrappedError::make((re::WrappedError *)@"REMaterialBuilderErrorDomain", (const __CFString *)0x3C, (uint64_t)v51, v72);
  int v52 = *(id **)(a1 + 40);
  if (v52 != v72)
  {
    id v53 = v72[0];
    v72[0] = 0;
    id v54 = *v52;
    id *v52 = v53;
  }
  if (v76 && (v77 & 1) != 0) {
    (*(void (**)(void))(*(void *)v76 + 40))();
  }
LABEL_66:
  if (v73) {

  }
  if (v74) {
  if (v75)
  }
}

uint64_t std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::FixedArray<re::LinkedFunction>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return (uint64_t)a1;
  }
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (!v4) {
      return (uint64_t)a1;
    }
  }
  else
  {
    if (!v4) {
      return (uint64_t)a1;
    }
    re::FixedArray<re::LinkedFunction>::init<>((uint64_t)a1, v4, a2[1]);
  }
  uint64_t v5 = a2[1];
  if (a1[1] != v5) {
    goto LABEL_34;
  }
  if (!v5) {
    return (uint64_t)a1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2[2];
  uint64_t v8 = v7 + 144 * v5;
  uint64_t v9 = a1[2];
  while (1)
  {
    uint64_t v10 = v7 + v6;
    uint64_t v11 = v9 + v6;
    *(unsigned char *)(v9 + v6) = *(unsigned char *)(v7 + v6);
    re::StringID::operator=((unint64_t *)(v9 + v6 + 8), (uint64_t *)(v7 + v6 + 8));
    re::StringID::operator=((unint64_t *)(v9 + v6 + 24), (uint64_t *)(v7 + v6 + 24));
    uint64_t v12 = *(void *)(v7 + v6 + 48);
    *(void *)(v9 + v6 + 40) = *(void *)(v7 + v6 + 40);
    uint64_t v13 = *(void *)(v9 + v6 + 48);
    if (v13 != v12)
    {
      if (v12)
      {
        id v14 = (id)(v12 + 8);
        uint64_t v13 = *(void *)(v11 + 48);
      }
      if (v13) {

      }
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v12;
    }
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v10 + 56);
    if (v11 == v10) {
      goto LABEL_31;
    }
    uint64_t v16 = *(void *)(v11 + 64);
    unint64_t v15 = (void *)(v11 + 64);
    uint64_t v17 = *(void *)(v10 + 64);
    if (!v16)
    {
      if (!v17) {
        goto LABEL_23;
      }
      re::FixedArray<re::TechniqueFunctionConstant>::init<>(v15, v17, *(void *)(v7 + v6 + 72));
LABEL_22:
      re::FixedArray<re::TechniqueFunctionConstant>::copy((uint64_t)v15, v10 + 64);
      goto LABEL_23;
    }
    if (v17) {
      goto LABEL_22;
    }
LABEL_23:
    *(void *)(v9 + v6 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(v7 + v6 + 88);
    re::FixedArray<re::TypedArgument>::operator=((void *)(v9 + v6 + 96), v7 + v6 + 96);
    uint64_t v18 = *(void *)(v7 + v6 + 120);
    if (!*(void *)(v9 + v6 + 120)) {
      break;
    }
    if (v18) {
      goto LABEL_28;
    }
LABEL_31:
    v6 += 144;
    if (v10 + 144 == v8) {
      return (uint64_t)a1;
    }
  }
  if (!v18) {
    goto LABEL_31;
  }
  re::FixedArray<re::TextureRecord>::init<>((void *)(v9 + v6 + 120), v18, *(void *)(v7 + v6 + 128));
LABEL_28:
  uint64_t v19 = *(void *)(v7 + v6 + 128);
  if (*(void *)(v9 + v6 + 128) == v19)
  {
    if (v19) {
      memmove(*(void **)(v9 + v6 + 136), *(const void **)(v7 + v6 + 136), 16 * v19);
    }
    goto LABEL_31;
  }
  re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  _os_crash();
  __break(1u);
LABEL_34:
  re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *re::FixedArray<re::TypedArgument>::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*a1)
    {
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::TypedArgument>::init<>((uint64_t)a1, v4, *(void *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::TypedArgument>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

uint64_t *re::FixedArray<re::TechniqueFunctionConstant>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v4, *(uint64_t **)(a2 + 16), (uint64_t *)(*(void *)(a2 + 16) + (v2 << 6)), *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::TypedArgument>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)&v4, *(void *)(a2 + 16), *(void *)(a2 + 16) + 112 * v2, *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        uint64_t v9 = v8 + v6;
        unint64_t v10 = *(void *)(v8 + v6 + 8);
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
        unint64_t v12 = v11 ^ (v11 >> 31);
        unint64_t v13 = *(unsigned int *)(a1 + 24);
        unint64_t v14 = v12 % v13;
        uint64_t v15 = *(unsigned int *)(a1 + 36);
        if (v15 == 0x7FFFFFFF)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 32);
          int v16 = v15;
          if (v15 == v13)
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v14 = v12 % *(unsigned int *)(a1 + 24);
            int v16 = *(_DWORD *)(a1 + 32);
            unint64_t v10 = *(void *)(v9 + 8);
          }
          *(_DWORD *)(a1 + 32) = v16 + 1;
          uint64_t v17 = *(void *)(a1 + 16);
          int v18 = *(_DWORD *)(v17 + 24 * v15);
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 16);
          int v18 = *(_DWORD *)(v17 + 24 * v15);
          *(_DWORD *)(a1 + 36) = v18 & 0x7FFFFFFF;
        }
        uint64_t v19 = 24 * v15;
        *(_DWORD *)(v17 + v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v18 | 0x80000000;
        uint64_t v20 = *(void *)(a1 + 8);
        *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v15) & 0x80000000 | *(_DWORD *)(v20 + 4 * v14);
        *(void *)(*(void *)(a1 + 16) + 24 * v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
        *(void *)(*(void *)(a1 + 16) + 24 * v15 + 16) = *(void *)(v9 + 16);
        *(_DWORD *)(v20 + 4 * vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v15;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_200, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          *(void *)(v8 + 16) = 0;
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::MaterialDefinition::~MaterialDefinition(re::MaterialDefinition *this)
{
  re::MaterialDefinition::~MaterialDefinition(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t *v2;

  *(void *)this = &unk_26E70E768;
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  re::MaterialDefinition::deinit(this);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 172);
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialDefinition *)((char *)this + 248));
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this + 184);
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 17);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 14);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::SharedPersistentObject<re::MaterialDefinition>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * (*(void *)(v8 + v6 + 8) ^ (*(void *)(v8 + v6 + 8) >> 30));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (void *)(v8 + v6 + 8), (re::DynamicString *)(v8 + v6 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 48;
    }
  }
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_200, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          re::DynamicString::deinit((re::DynamicString *)(v8 + 16));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 48;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, re::DynamicString *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 48 * v9 + 16), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 48 * v8;
  *(_DWORD *)(v11 + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 48 * v8;
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  uint64_t v15 = *(void *)(a5 + 8);
  *(void *)(v14 + 16) = *(void *)a5;
  *(void *)(v14 + 24) = v15;
  *(void *)a5 = 0;
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v16 = *(void *)(v14 + 32);
  *(void *)(v14 + 32) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v16;
  *(unsigned char *)(v14 + 40) = *(unsigned char *)(a5 + 24);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&unsigned char v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = (unint64_t *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0) {
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v12 % *(unsigned int *)(a1 + 24), *v12, v12, (uint64_t)(v12 + 1));
          }
          ++v11;
          v12 += 6;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_200, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 96;
    }
  }
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_197, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 96 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 96 * v10 + 16), a4);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(*(void *)(a1 + 16) + 96 * v10 + 48, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

double re::make::shared::object<re::FunctionReflectionCache>@<D0>(re *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(void *)(v4 + 176) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v5 = &unk_26E70DF18;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 44) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v5 + 60) = 0x7FFFFFFFLL;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *a2 = v5;
  return result;
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), (void *)(v8 + 48));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(unint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)unint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v14 = *v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v6 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v6[6];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  *(void *)(*(void *)(a1 + 16) + 56 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_200, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), (uint64_t *)(v8 + 48));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 120;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 120 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 120 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 120 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 120 * v10;
  re::DynamicArray<re::DynamicString>::DynamicArray(v14 + 48, a5);
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 88), (const re::DynamicString *)(a5 + 5));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::TechniqueDefinitionBuilder::~TechniqueDefinitionBuilder(re::TechniqueDefinitionBuilder *this)
{
  if (*((unsigned char *)this + 520)) {
    *((void *)this + 66) = 0;
  }
  re::DynamicArray<re::WeakStringID>::deinit((uint64_t)this + 480);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 440);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)this + 376);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)this + 336);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 296);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 24);
  re::DynamicString::deinit((re::TechniqueDefinitionBuilder *)((char *)this + 144));
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 11);
  re::DynamicString::deinit((re::TechniqueDefinitionBuilder *)((char *)this + 40));
  re::DynamicString::deinit(this);
}

uint64_t re::DynamicArray<re::WeakStringID>::deinit(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4) {
        bzero(*(void **)(result + 32), 8 * v4);
      }
      double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 40))(v1, v3);
    }
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)uint64_t v2 = 0;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

void *re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (void *)result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(v4);
        v4 += 5;
        v5 -= 40;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

void re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::init<decltype(nullptr)>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  v8[1] = *MEMORY[0x263EF8340];
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  unint64_t v3 = a3;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40 * a3, 8);
  a1[2] = v5;
  if (!v5) {
    goto LABEL_13;
  }
  for (uint64_t i = v5; --v3; i += 40)
  {
    v8[0] = 0;
    re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(i, v8, 1uLL);
    if (v8[0]) {
  }
    }
  v8[0] = 0;
  re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(i, v8, 1uLL);
  if (v8[0]) {
}
  }

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 32) = 0;
  if (a3)
  {
    re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)a1, a3);
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v7 + 2;
    unint64_t v8 = *(void *)(a1 + 8);
    if (v8 == -1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v8 >= a3)
    {
      if ((v7 & 1) == 0) {
        uint64_t v4 = *(uint64_t **)(a1 + 32);
      }
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(a2, &a2[a3], v4);
    }
    else
    {
      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(a1, a3);
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = &a2[v9];
      int v11 = v4;
      if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
        int v11 = *(uint64_t **)(a1 + 32);
      }
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(a2, &a2[v9], v11);
      if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
        uint64_t v4 = *(uint64_t **)(a1 + 32);
      }
      if (v9 != a3)
      {
        uint64_t v12 = &v4[*(void *)(a1 + 8)];
        uint64_t v13 = 8 * a3 - 8 * v9;
        do
        {
          uint64_t v14 = *v10;
          uint64_t *v12 = *v10;
          if (v14) {
            id v15 = (id)(v14 + 8);
          }
          ++v10;
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
    }
    *(_DWORD *)(a1 + 16) += 2;
  }
  return a1;
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    double result = re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)v3, v2);
    *(_DWORD *)(v3 + 16) += 2;
    return result;
  }
  if (*(unsigned char *)(result + 16))
  {
    if (a2 <= 1) {
      return result;
    }
    unint64_t v5 = 2;
  }
  else
  {
    unint64_t v4 = *(void *)(result + 24);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)result, a2);
}

void *re::FixedArray<re::AttributeArgument>::FixedArray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<re::AttributeArgument>::init<>((uint64_t)a1, v4, *(void *)(a2 + 8));
    re::FixedArray<re::AttributeArgument>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::FixedArray<re::AttributeArgument>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8))
  {
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = *(void *)(a1 + 16);
    return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AttributeArgument *,re::AttributeArgument *,re::AttributeArgument *,0>(v3, v3 + 24 * v2, v4);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AttributeArgument *,re::AttributeArgument *,re::AttributeArgument *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

double re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 72 * v3;
        uint64_t v5 = v2 + 8;
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(v5);
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _WORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(_WORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned char *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(unsigned char *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
    re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (_WORD *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_200, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
    re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (unsigned char *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      if (a1[2]) {
        unint64_t v3 = a1 + 3;
      }
      else {
        unint64_t v3 = (void *)a1[4];
      }
      uint64_t v4 = 8 * v2;
      do
      {
        if (*v3)
        {

          void *v3 = 0;
        }
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    int v5 = *((_DWORD *)a1 + 4);
    if ((v5 & 1) == 0)
    {
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, a1[4]);
      int v5 = *((_DWORD *)a1 + 4);
    }
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = (v5 | 1) + 2;
  }
}

void re::DynamicArray<re::TechniqueFunctionConstant>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = v2 << 6;
    do
    {
      re::FixedArray<CoreIKTransform>::deinit(v3 + 5);
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 8;
      v4 -= 64;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::TechniqueFunctionConstant>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    unint64_t v8 = a2 << 6;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (uint64_t *)(*((void *)v3 + 4) + v8);
      re::FixedArray<CoreIKTransform>::deinit(v10 + 5);
      re::DynamicString::deinit((re::DynamicString *)v10);
      ++v9;
      v8 += 64;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      unint64_t v6 = v4 << 6;
      do
      {
        unint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)unint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_DWORD *)(v7 + 32) = 0;
        *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        *(void *)(v7 + 56) = 0;
        v6 += 64;
        *(void *)(v7 + 40) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

uint64_t *re::DynamicArray<re::TechniqueFunctionConstant>::copy(uint64_t *this, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a4) {
    return this;
  }
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v16 = 0;
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 136315906;
    *(void *)((char *)&v17 + 4) = "copy";
    WORD6(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 1024;
    HIWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v16, v17);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_13;
  }
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)v18, a3, &a3[8 * a4], this[4] + (a2 << 6));
  }
  else
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(this, a2 + a4);
    uint64_t v10 = v6[2];
    unint64_t v11 = &a3[8 * (v10 - a2)];
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)v18, a3, v11, v6[4] + (a2 << 6));
    if (v10 - a2 != v4)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[4] + (v6[2] << 6);
      unint64_t v14 = (v4 << 6) + (a2 << 6) - (v10 << 6);
      do
      {
        uint64_t v15 = re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        *((_DWORD *)v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11[v12 / 8 + 4];
        this = re::FixedArray<unsigned char>::FixedArray((void *)v15 + 5, &v11[v12 / 8 + 5]);
        v12 += 64;
      }
      while (v14 != v12);
    }
    _DWORD v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

unsigned __int8 *re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (v3) {
    std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::~unique_ptr[abi:nn180100](v2);
  }
  else {
    re::DynamicString::deinit((re::DynamicString *)v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::MaterialTechnique *)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(re::MaterialTechnique *)>::operator=[abi:nn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::MaterialTechnique *)>::operator=[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        uint64_t v9 = v8 + v6;
        unint64_t v10 = *(void *)(v8 + v6 + 8);
        unint64_t v11 = *(unsigned int *)(a1 + 24);
        unint64_t v12 = v10 % v11;
        uint64_t v13 = *(unsigned int *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 32);
          int v14 = v13;
          if (v13 == v11)
          {
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v12 = v10 % *(unsigned int *)(a1 + 24);
            int v14 = *(_DWORD *)(a1 + 32);
            unint64_t v10 = *(void *)(v9 + 8);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 48 * v13);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 48 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        uint64_t v17 = v9 + 16;
        uint64_t v18 = 48 * v13;
        *(_DWORD *)(v15 + v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12);
        *(void *)(*(void *)(a1 + 16) + 48 * v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
        uint64_t v19 = *(void *)(a1 + 16) + 48 * v13;
        re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v19 + 16), v17);
        *(unsigned char *)(v19 + 40) = *(unsigned char *)(v8 + v6 + 40);
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 48;
    }
  }
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_200, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v6 + v4 + 16));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 48;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E70E7C8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70E7C8;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    unint64_t v3 = re::globalAllocators(result);
    uint64_t v4 = *(unsigned int *)(v2 + 120);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (int *)(*(void *)(v2 + 104) + 8);
      while (1)
      {
        int v7 = *v6;
        v6 += 8;
        if (v7 < 0) {
          break;
        }
        if (v4 == ++v5)
        {
          LODWORD(v5) = *(_DWORD *)(v2 + 120);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    uint64_t v8 = v3[2];
    if (v4 != v5)
    {
      uint64_t v9 = v5;
      do
      {
        uint64_t v10 = *(void *)(v2 + 104) + 32 * v9;
        uint64_t v13 = *(uint64_t **)(v10 + 24);
        unint64_t v12 = (uint64_t **)(v10 + 24);
        unint64_t v11 = v13;
        uint64_t v14 = v13[1];
        if (!v14 || ((id)(v14 + 8), v11[1] = 0, (unint64_t v11 = *v12) != 0))
        {
          uint64_t v15 = re::globalAllocators((re *)v3)[2];
          uint64_t v16 = v11[1];
          if (v16)
          {

            v11[1] = 0;
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 45);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 39);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 33);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 27);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 21);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 15);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 9);
          v17.n128_f64[0] = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit(v11 + 3);
          uint64_t v18 = v11[1];
          if (v18)
          {

            v11[1] = 0;
          }
          unint64_t v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(void *)v15 + 40))(v15, v11, v17);
        }
        if (*(_DWORD *)(v2 + 120) <= (v5 + 1)) {
          int v19 = v5 + 1;
        }
        else {
          int v19 = *(_DWORD *)(v2 + 120);
        }
        while (1)
        {
          uint64_t v9 = (v5 + 1);
          if (v19 - 1 == v5) {
            break;
          }
          LODWORD(v5) = v5 + 1;
          int v20 = v9;
          if ((*(_DWORD *)(*(void *)(v2 + 104) + 32 * v9 + 8) & 0x80000000) != 0) {
            goto LABEL_25;
          }
        }
        int v20 = v19;
LABEL_25:
        LODWORD(v5) = v20;
      }
      while (v4 != v20);
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v2 + 88));
    if (*(unsigned char *)(v2 + 40)) {
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((void *)(v2 + 48));
    }
    re::FixedArray<re::TechniqueFunctionConstant>::deinit((void *)(v2 + 16));
    signed int v21 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 40);
    return (re *)v21(v8, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

double re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 88);
          if (v8)
          {

            *(void *)(v6 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 96;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::PrimitiveRenderingContext::addShape<unsigned long>(uint64_t a1, unint64_t a2, _OWORD *a3, _OWORD *a4)
{
  unint64_t v7 = a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(a1, a2);
  unint64_t v9 = 0;
  int v21 = 50462976;
  long long v23 = 0u;
  long long v24 = 0u;
  do
  {
    unsigned int v10 = *((unsigned __int8 *)&v21 + v9);
    *((void *)&v23 + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(v7, a2, v10);
    v20[v9++] = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(v7, a2, v10);
  }
  while (v9 != 4);
  re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(v7, a2, 0);
  unint64_t v11 = *(void *)(v7 + 1032);
  if (v11 <= a2)
  {
    uint64_t v22 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    signed int v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>((uint64_t)&v21, (uint64_t)&v23, (uint64_t)v20, *(void *)(*(void *)(v7 + 1048) + 8 * a2), *(re **)(v7 + 1192));
  unint64_t v9 = *(void *)(v7 + 1032);
  if (v9 <= a2)
  {
LABEL_13:
    uint64_t v22 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    signed int v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    uint64_t v22 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    signed int v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = v12;
  *(void *)(*(void *)(v7 + 1048) + 8 * a2) = v12;
  unint64_t v7 = *(void *)(v7 + 1032);
  if (v7 <= a2) {
    goto LABEL_14;
  }
  if (v12 == 1)
  {
    if (v20[2]) {
      double v13 = re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(*(void *)(v24 + 32) + 32 * *(void *)(v24 + 16) - 32, 2);
    }
    if (v20[3]) {
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(*(void *)(*((void *)&v24 + 1) + 32) + 32 * *(void *)(*((void *)&v24 + 1) + 16) - 32, 3);
    }
  }
  uint64_t v15 = *(void *)(v23 + 32) + 32 * *(void *)(v23 + 16);
  uint64_t v16 = (char *)objc_msgSend(**(id **)(v15 - 8), sel_contents, v13) + *(void *)(v15 - 24);
  uint64_t v17 = 16 * v14 - 16;
  *(_OWORD *)&v16[v17] = *a3;
  uint64_t v18 = *(void *)(*((void *)&v23 + 1) + 32) + 32 * *(void *)(*((void *)&v23 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v18 - 8), sel_contents) + *(void *)(v18 - 24) + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *a4;
  return v8;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, 0) + 16);
  if (!v4) {
    return 0;
  }
  if (*(void *)(a1 + 1032) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 1048) + 8 * a2) + (v4 << 7) - 128;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 552) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 568) + 40 * a2;
}

{
  if (*(void *)(a1 + 40 * a3 + 552) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 568) + 40 * a2;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 872) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 40 * a3 + 888) + a2);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, re *a5)
{
  uint64_t v9 = 0;
  uint64_t v10 = a4 & 0x7F;
  do
  {
    if (!v10 && *(unsigned char *)(a3 + v9))
    {
      unint64_t v11 = *(_anonymous_namespace_ **)(a2 + 8 * v9);
      re::attributeInfo(*(unsigned __int8 *)(a1 + v9), a2);
      re::allocate(a5, (const re::RenderManager *)0x10, 0x10uLL, v13);
      re::DynamicArray<re::EvaluationRegister>::add(v11, (uint64_t)v13);
    }
    ++v9;
  }
  while (v9 != 4);
  return v10 + 1;
}

double re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue((uint64_t)&v7, a2);
  if (v8 != 2) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  unint64_t v3 = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  uint64_t v4 = 0;
  uint64_t v5 = &v3[*(void *)(a1 + 8)];
  do
  {
    double result = *(double *)&v7;
    *(_OWORD *)&v5[v4] = v7;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

char *re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue((uint64_t)&v7, a2);
  if (v8 != 3) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  long long v6 = v7;
  double result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  uint64_t v4 = 0;
  uint64_t v5 = &result[*(void *)(a1 + 8)];
  do
  {
    *(_OWORD *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

uint64_t re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, _OWORD *a3, _OWORD *a4)
{
  unint64_t v7 = a1;
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, 0) + 16);
  if (v8)
  {
    uint64_t v9 = a2;
    unint64_t v10 = *(void *)(v7 + 1032);
    if (v10 <= a2) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(*(void *)(v7 + 1048) + 8 * a2) + (v8 << 7) - 128;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = 0;
  int v23 = 50462976;
  long long v25 = 0u;
  long long v26 = 0u;
  do
  {
    unsigned int v12 = *((unsigned __int8 *)&v23 + v11);
    *((void *)&v25 + v11) = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(v7, a2, v12);
    v22[v11++] = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<re::PrimitiveRenderingShape>(v7, a2, v12);
  }
  while (v11 != 4);
  re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(v7, a2, 0);
  unint64_t v10 = a2;
  unint64_t v13 = *(void *)(v7 + 1032);
  if (v13 <= a2)
  {
    uint64_t v24 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v27 = 136315906;
    int v28 = "operator[]";
    __int16 v29 = 1024;
    int v30 = 789;
    __int16 v31 = 2048;
    unint64_t v32 = a2;
    __int16 v33 = 2048;
    unint64_t v34 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v14 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>((uint64_t)&v23, (uint64_t)&v25, (uint64_t)v22, *(void *)(*(void *)(v7 + 1048) + 8 * a2), *(re **)(v7 + 1192));
  unint64_t v13 = *(void *)(v7 + 1032);
  if (v13 <= a2)
  {
LABEL_17:
    uint64_t v24 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v27 = 136315906;
    int v28 = "operator[]";
    __int16 v29 = 1024;
    int v30 = 789;
    __int16 v31 = 2048;
    unint64_t v32 = a2;
    __int16 v33 = 2048;
    unint64_t v34 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = v14;
  *(void *)(*(void *)(v7 + 1048) + 8 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = v14;
  unint64_t v7 = *(void *)(v7 + 1032);
  if (v7 <= v10)
  {
LABEL_18:
    uint64_t v24 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v27 = 136315906;
    int v28 = "operator[]";
    __int16 v29 = 1024;
    int v30 = 789;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    __int16 v33 = 2048;
    unint64_t v34 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    *(void *)&long long v25 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v27 = 136315906;
    int v28 = "operator[]";
    __int16 v29 = 1024;
    int v30 = 797;
    __int16 v31 = 2048;
    unint64_t v32 = v9;
    __int16 v33 = 2048;
    unint64_t v34 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v14 == 1)
  {
    if (v22[2]) {
      double v15 = re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(*(void *)(v26 + 32) + 32 * *(void *)(v26 + 16) - 32, 2);
    }
    if (v22[3]) {
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(*(void *)(*((void *)&v26 + 1) + 32) + 32 * *(void *)(*((void *)&v26 + 1) + 16) - 32, 3);
    }
  }
  uint64_t v17 = *(void *)(v25 + 32) + 32 * *(void *)(v25 + 16);
  uint64_t v18 = (char *)objc_msgSend(**(id **)(v17 - 8), sel_contents, v15) + *(void *)(v17 - 24);
  uint64_t v19 = 16 * v16 - 16;
  *(_OWORD *)&v18[v19] = *a3;
  uint64_t v20 = *(void *)(*((void *)&v25 + 1) + 32) + 32 * *(void *)(*((void *)&v25 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v20 - 8), sel_contents) + *(void *)(v20 - 24) + v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *a4;
  return v9;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 552) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 568) + 40 * a2;
}

{
  if (*(void *)(a1 + 40 * a3 + 552) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 568) + 40 * a2;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 40 * a3 + 888) + a2);
}

float re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(uint64_t a1, unint64_t a2, float *a3, _anonymous_namespace_ *a4, unsigned char *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*a5)
  {
    uint64_t v15 = re::attributeInfo(a1, a2);
    if (a6)
    {
      uint64_t v17 = (const re::RenderManager *)v15;
      unint64_t v18 = v16;
      do
      {
        re::allocate(a8, v17, v18, v22);
        re::fill<float,re::PrimitiveRenderingAttribute>((uint64_t)v22, a1);
        re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v22);
        --a6;
      }
      while (a6);
    }
    *a5 = 1;
  }
  if (*((void *)a4 + 2) <= a2 >> 7)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v19 = *((void *)a4 + 4) + 32 * (a2 >> 7);
  uint64_t v20 = (char *)objc_msgSend(**(id **)(v19 + 24), sel_contents);
  float result = *a3;
  *(float *)&v20[4 * (a2 & 0x7F) + *(void *)(v19 + 8)] = *a3;
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, unsigned char *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*a5)
  {
    uint64_t v15 = re::attributeInfo(a1, a2);
    if (a6)
    {
      uint64_t v17 = (const re::RenderManager *)v15;
      unint64_t v18 = v16;
      do
      {
        re::allocate(a8, v17, v18, v22);
        re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>((uint64_t)v22, a1);
        re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v22);
        --a6;
      }
      while (a6);
    }
    *a5 = 1;
  }
  if (*((void *)a4 + 2) <= a2 >> 7)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v19 = *((void *)a4 + 4) + 32 * (a2 >> 7);
  uint64_t v20 = (char *)objc_msgSend(**(id **)(v19 + 24), sel_contents);
  __n128 result = *a3;
  *(__n128 *)&v20[16 * (a2 & 0x7F) + *(void *)(v19 + 8)] = *a3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, 0);
  if (*(void *)(a1 + 1032) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v4 + 16);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 888) + a2;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  unint64_t v10 = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a3, a4);
  uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(a1, a3);
  uint64_t v13 = v12;
  uint64_t v14 = (unsigned char *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(a1, a3, a4);
  uint64_t v15 = *(re **)(a1 + 1192);
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, v10, v14, v11, v13, v15).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, unsigned char *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!*a5)
  {
    re::attributeInfo(a1, a2);
    for (; a6; --a6)
    {
      re::allocate(a8, (const re::RenderManager *)0x10, 0x10uLL, v18);
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>((uint64_t)v18, a1);
      re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v18);
    }
    *a5 = 1;
  }
  if (*((void *)a4 + 2) <= a2 >> 7)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a4 + 4) + 32 * (a2 >> 7);
  unint64_t v16 = (char *)objc_msgSend(**(id **)(v15 + 24), sel_contents);
  __n128 result = *a3;
  *(__n128 *)&v16[16 * (a2 & 0x7F) + *(void *)(v15 + 8)] = *a3;
  return result;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  unint64_t v10 = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a3, a4);
  uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(a1, a3);
  uint64_t v13 = v12;
  uint64_t v14 = (unsigned char *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(a1, a3, a4);
  uint64_t v15 = *(re **)(a1 + 1192);
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, v10, v14, v11, v13, v15).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, unsigned char *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!*a5)
  {
    re::attributeInfo(a1, a2);
    for (; a6; --a6)
    {
      re::allocate(a8, (const re::RenderManager *)0x10, 0x10uLL, v18);
      re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>((uint64_t)v18, a1);
      re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v18);
    }
    *a5 = 1;
  }
  if (*((void *)a4 + 2) <= a2 >> 7)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a4 + 4) + 32 * (a2 >> 7);
  unint64_t v16 = (char *)objc_msgSend(**(id **)(v15 + 24), sel_contents);
  __n128 result = *a3;
  *(__n128 *)&v16[16 * (a2 & 0x7F) + *(void *)(v15 + 8)] = *a3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(uint64_t a1, unint64_t a2)
{
  uint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, 0);
  if (*(void *)(a1 + 1032) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(Attribute + 16);
}

unint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40 * a3 + 872) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40 * a3 + 888) + a2;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 *a5)
{
  uint64_t Attribute = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a3, a4);
  uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(a1, a3);
  uint64_t v13 = v12;
  uint64_t v14 = (unsigned char *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(a1, a3, a4);
  uint64_t v15 = *(re **)(a1 + 1192);
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, Attribute, v14, v11, v13, v15).n128_u64[0];
  return result;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 *a5)
{
  uint64_t Attribute = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a3, a4);
  uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(a1, a3);
  uint64_t v13 = v12;
  uint64_t v14 = (unsigned char *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(a1, a3, a4);
  uint64_t v15 = *(re **)(a1 + 1192);
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, Attribute, v14, v11, v13, v15).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3, __n128 *a4)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1 + 40 * a3;
  if (*(void *)(v5 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = a1 + 40 * a3;
  if (*(unsigned char *)(*(void *)(v9 + 888) + a2))
  {
    unint64_t v10 = (unint64_t *)(v5 + 872);
    uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, a3);
    *(void *)(v11 + 16) = 0;
    ++*(_DWORD *)(v11 + 24);
    if (*v10 <= v4) {
      goto LABEL_12;
    }
    *(unsigned char *)(*(void *)(v9 + 888) + v4) = 0;
  }
  if (*(void *)(a1 + 40 * a3 + 712) <= v4)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *(void *)(a1 + 40 * a3 + 728) + 32 * v4;
  if (*(_DWORD *)(v12 + 16) == 3)
  {
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
    *(_DWORD *)(v12 + 16) = 3;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3, __n128 *a4)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1 + 40 * a3;
  if (*(void *)(v5 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = a1 + 40 * a3;
  if (*(unsigned char *)(*(void *)(v9 + 888) + a2))
  {
    unint64_t v10 = (unint64_t *)(v5 + 872);
    uint64_t v11 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, a3);
    *(void *)(v11 + 16) = 0;
    ++*(_DWORD *)(v11 + 24);
    if (*v10 <= v4) {
      goto LABEL_12;
    }
    *(unsigned char *)(*(void *)(v9 + 888) + v4) = 0;
  }
  if (*(void *)(a1 + 40 * a3 + 712) <= v4)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *(void *)(a1 + 40 * a3 + 728) + 32 * v4;
  if (*(_DWORD *)(v12 + 16) == 2)
  {
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
    *(_DWORD *)(v12 + 16) = 2;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4)
{
  uint64_t v5 = a1 + 40 * a3;
  if (*(void *)(v5 + 872) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = a1 + 40 * a3;
  if (*(unsigned char *)(*(void *)(v9 + 888) + a2))
  {
    unint64_t v10 = (unint64_t *)(v5 + 872);
    uint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, a3);
    *(void *)(Attribute + 16) = 0;
    ++*(_DWORD *)(Attribute + 24);
    if (*v10 <= a2) {
      goto LABEL_12;
    }
    *(unsigned char *)(*(void *)(v9 + 888) + a2) = 0;
  }
  if (*(void *)(a1 + 40 * a3 + 712) <= a2)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *(void *)(a1 + 40 * a3 + 728) + 32 * a2;
  if (*(_DWORD *)(v12 + 16) == 3)
  {
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
    *(_DWORD *)(v12 + 16) = 3;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4)
{
  uint64_t v5 = a1 + 40 * a3;
  if (*(void *)(v5 + 872) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = a1 + 40 * a3;
  if (*(unsigned char *)(*(void *)(v9 + 888) + a2))
  {
    unint64_t v10 = (unint64_t *)(v5 + 872);
    uint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, a3);
    *(void *)(Attribute + 16) = 0;
    ++*(_DWORD *)(Attribute + 24);
    if (*v10 <= a2) {
      goto LABEL_12;
    }
    *(unsigned char *)(*(void *)(v9 + 888) + a2) = 0;
  }
  if (*(void *)(a1 + 40 * a3 + 712) <= a2)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *(void *)(a1 + 40 * a3 + 728) + 32 * a2;
  if (*(_DWORD *)(v12 + 16) == 2)
  {
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    __n128 result = *a4;
    *(__n128 *)uint64_t v12 = *a4;
    *(_DWORD *)(v12 + 16) = 2;
  }
  return result;
}

void re::PrimitiveRenderingContext::buildMeshScene(uint64_t a1, uint64_t a2, re::MaterialParameterTableBuilder *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, re::Allocator *a8, uint64_t a9, uint64_t a10)
{
  *(void *)&long long v63 = a6;
  *(void *)&long long v64 = a5;
  uint64_t v11 = 0;
  *(void *)&long long v62 = a10;
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v78 = 0;
  int v79 = "";
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  do
  {
    uint64_t v12 = (char *)&v78 + v11;
    *((void *)v12 + 12) = 0;
    *((void *)v12 + 16) = 0;
    v11 += 40;
  }
  while (v11 != 720);
  int32x4_t v61 = vdupq_n_s32(0x7F800000u);
  float32x4_t v80 = (float32x4_t)v61;
  v13.i64[0] = 0x7F0000007FLL;
  v13.i64[1] = 0x7F0000007FLL;
  float32x4_t v81 = v13;
  re::StringID::destroyString((re::StringID *)&v78);
  uint64_t v78 = 0xD2E811B7E678E9E0;
  int v79 = "PrimitiveRendering Instance";
  uint64_t v14 = (re::DynamicString *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 24, 8);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = 0;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v14, (uint64_t)a3, v64);
  uint64_t v15 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 24, 8);
  *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)uint64_t v15 = 0;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v15, (uint64_t)a3, v64);
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v17 = (_anonymous_namespace_ *)re::FixedArray<re::AABB>::init<>((uint64_t)&v75, (uint64_t)a3, v64);
  if (!(void)v64)
  {
LABEL_43:
    unint64_t v41 = re::DataArray<re::MeshModel>::create<re::MeshModel>(*(void *)(*(void *)(a2 + 1192) + 32) + 8, &v78);
    re::MeshManager::destroyModel(*(void *)(*(void *)(a2 + 1192) + 32), v41);
    *(void *)&long long v88 = 0;
    *((void *)&v88 + 1) = "";
    BYTE8(v8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    HIDWORD(v8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 1065353216;
    long long v94 = 0u;
    memset(v95, 0, 32);
    *(void *)&long long v89 = v41;
    long long v67 = xmmword_23435FD50;
    long long v90 = xmmword_23435FD50;
    long long v91 = xmmword_23435FD60;
    long long v64 = xmmword_23435FD60;
    long long v62 = xmmword_23435FBB0;
    long long v63 = xmmword_23435FD80;
    long long v92 = xmmword_23435FD80;
    long long v93 = xmmword_23435FBB0;
    *(void *)BOOL v86 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(*(void *)(*(void *)(a2 + 1192) + 32) + 72, (uint64_t)&v88);
    re::MeshManager::destroyInstance(*(void *)(*(void *)(a2 + 1192) + 32), *(uint64_t *)v86);
    uint64_t v42 = a1;
    *(_OWORD *)(a1 + 200) = 0u;
    *(unsigned char *)(a1 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(a1 + 344) = 0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(unsigned char *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 30re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
      goto LABEL_60;
    }
    goto LABEL_44;
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  *(void *)&long long v67 = &v105[5];
  uint64_t v20 = 536;
  int v58 = v14;
  while (1)
  {
    uint64_t v21 = v15;
    if ((void)v64 - 1 == v19) {
      uint64_t v15 = v63;
    }
    else {
      uint64_t v15 = 128;
    }
    uint64_t v22 = 1;
    if (*(void *)(a7 + 16)) {
      uint64_t v22 = 2;
    }
    uint64_t v23 = *(void ***)(a7 + 80);
    unint64_t v73 = 0;
    id v74 = 0;
    unint64_t v24 = v23 ? v22 + 1 : v22;
    uint64_t v72 = 0;
    LOWORD(v105[4]) = 287;
    v105[5] = *(id *)(a7 + 64);
    LODWORD(v106) = 0;
    DWORD1(v106) = objc_msgSend(*(id *)(a7 + 64), sel_length);
    *((void *)&v106 + 1) = 0xFFFFFFFF00000000;
    unint64_t v27 = v73;
    if (!v73) {
      break;
    }
    uint64_t v14 = v74;
    re::DynamicString::operator=(v74, (re::DynamicString *)v105);
    *((_WORD *)v14 + 16) = v105[4];
    NS::SharedPtr<MTL::Texture>::operator=((void **)v14 + 5, (void **)&v105[5]);
    int v28 = (void *)v105[5];
    *((_OWORD *)v14 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v106;
    if (v28)
    {

      v105[5] = 0;
    }
    __int16 v29 = (_anonymous_namespace_ *)v105[0];
    if (v105[0] && ((uint64_t)v105[1] & 1) != 0) {
      __int16 v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(const void *, const void *))(*(void *)v105[0] + 40))(v105[0], v105[2]);
    }
    if (!*(void *)(a7 + 16))
    {
      unint64_t v30 = 1;
      if (!v23) {
        goto LABEL_35;
      }
LABEL_29:
      LOWORD(v105[4]) = 287;
      v105[5] = *(id *)(a7 + 80);
      LODWORD(v106) = 0;
      DWORD1(v106) = objc_msgSend(*(id *)(a7 + 80), sel_length);
      *((void *)&v106 + 1) = 0xFFFFFFFF00000000;
      if (v27 <= v30) {
        goto LABEL_59;
      }
      uint64_t v23 = (void **)((char *)v14 + 64 * v30);
      re::DynamicString::operator=((re::DynamicString *)v23, (re::DynamicString *)v105);
      *((_WORD *)v23 + 16) = v105[4];
      NS::SharedPtr<MTL::Texture>::operator=(v23 + 5, (void **)&v105[5]);
      *((_OWORD *)v23 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v106;
      if (v105[5])
      {

        v105[5] = 0;
      }
      if (v105[0] && ((uint64_t)v105[1] & 1) != 0) {
        (*(void (**)(const void *, const void *))(*(void *)v105[0] + 40))(v105[0], v105[2]);
      }
      goto LABEL_35;
    }
    strcpy((char *)&v105[4], "1");
    v105[5] = *(id *)(a7 + 72);
    LODWORD(v106) = 0;
    DWORD1(v106) = objc_msgSend(*(id *)(a7 + 72), sel_length);
    *((void *)&v106 + 1) = 0xFFFFFFFF00000000;
    if (v27 <= 1) {
      goto LABEL_58;
    }
    re::DynamicString::operator=((re::DynamicString *)((char *)v14 + 64), (re::DynamicString *)v105);
    *((_WORD *)v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v105[4];
    NS::SharedPtr<MTL::Texture>::operator=((void **)v14 + 13, (void **)&v105[5]);
    *((_OWORD *)v14 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v106;
    if (v105[5])
    {

      v105[5] = 0;
    }
    __int16 v29 = (_anonymous_namespace_ *)v105[0];
    if (v105[0] && ((uint64_t)v105[1] & 1) != 0) {
      __int16 v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(const void *, const void *))(*(void *)v105[0] + 40))(v105[0], v105[2]);
    }
    unint64_t v30 = 2;
    if (v23) {
      goto LABEL_29;
    }
LABEL_35:
    *(void *)&long long v31 = 0x7F0000007FLL;
    *((void *)&v31 + 1) = 0x7F0000007FLL;
    v71[0] = v61;
    v71[1] = v31;
    *(void *)&long long v88 = v19;
    v105[0] = (const void *)v15;
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a10 + 32) + 16))(v86);
    long long v25 = v76;
    if ((unint64_t)v76 <= v19) {
      goto LABEL_53;
    }
    unint64_t v32 = (float32x4_t *)&v77[v18];
    uint64_t v23 = (void **)v86;
    float32x4_t v33 = *(float32x4_t *)&v86[16];
    float32x4_t *v32 = *(float32x4_t *)v86;
    v32[1] = v33;
    if (*(unsigned char *)(a2 + 1184))
    {
      float32x4_t v34 = v80;
      float32x4_t v35 = *v32;
      v34.i32[3] = 0;
      v35.i32[3] = 0;
      float32x4_t v80 = vminnmq_f32(v34, v35);
      float32x4_t v36 = v81;
      float32x4_t v37 = v32[1];
      v36.i32[3] = 0;
      v37.i32[3] = 0;
      float32x4_t v81 = vmaxnmq_f32(v36, v37);
    }
    v70[0] = 0xD2E811B7E678E9E0;
    v70[1] = (uint64_t)"PrimitiveRendering Instance";
    int v38 = *(_DWORD *)(a7 + 16);
    int v39 = *(_DWORD *)(a7 + 8);
    *(_OWORD *)BOOL v86 = xmmword_23435FD50;
    *(_OWORD *)&v86[16] = xmmword_23435FD60;
    *(_OWORD *)&v86[32] = xmmword_23435FD80;
    long long v87 = xmmword_23435FBB0;
    __int16 v69 = 0;
    int v68 = 0;
    re::MeshPart::MeshPart((uint64_t)&v88, v70, v19, (uint64_t)v14, v27, v38, v39, v15, v71, v19, (long long *)v86, (re::MeshPartFlags *)&v68, -1, 0);
    long long v25 = (uint64_t *)*((void *)&v82 + 1);
    if (*((void *)&v82 + 1) <= v19) {
      goto LABEL_54;
    }
    re::MeshPart::operator=((uint64_t *)(v83 + v20 - 536), (uint64_t *)&v88);
    re::StringID::destroyString((re::StringID *)&v97);
    re::FixedArray<re::StringID>::deinit(v96);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)&v88);
    re::StringID::destroyString((re::StringID *)v70);
    long long v25 = (uint64_t *)*((void *)&v82 + 1);
    if (*((void *)&v82 + 1) <= v19) {
      goto LABEL_55;
    }
    *(unsigned char *)(v83 + v20) = *(unsigned char *)a7;
    *(void *)&long long v88 = v19;
    (*(void (**)(void, long long *))(**(void **)(a9 + 32) + 16))(*(void *)(a9 + 32), &v88);
    uint64_t v40 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(a8, a3);
    uint64_t v14 = v58;
    long long v25 = (uint64_t *)*((void *)v58 + 1);
    if ((unint64_t)v25 <= v19) {
      goto LABEL_56;
    }
    *(void *)(*((void *)v58 + 2) + 8 * v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v40;
    long long v25 = *(uint64_t **)(v21 + 8);
    if ((unint64_t)v25 <= v19) {
      goto LABEL_57;
    }
    uint64_t v15 = v21;
    *(void *)(*(void *)(v21 + 16) + 8 * v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a4;
    uint64_t v17 = (_anonymous_namespace_ *)re::FixedArray<re::NamedVertexBuffer>::deinit(&v72);
    v20 += 560;
    v18 += 32;
    if ((void)v64 == ++v19) {
      goto LABEL_43;
    }
  }
  *(void *)unint64_t v98 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)BOOL v86 = 136315906;
  *(void *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(void *)&v86[20] = 0;
  *(_WORD *)&v86[28] = 2048;
  *(void *)&v86[30] = 0;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_53:
  *(void *)unint64_t v98 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  LODWORD(v105[0]) = 136315906;
  *(const void **)((char *)v105 + 4) = "operator[]";
  WORD2(v105[1]) = 1024;
  *(_DWORD *)((char *)&v105[1] + 6) = 468;
  WORD1(v105[2]) = 2048;
  *(const void **)((char *)&v105[2] + 4) = (const void *)v19;
  WORD2(v105[3]) = 2048;
  *(const void **)((char *)&v105[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_54:
  uint64_t v85 = 0;
  long long v106 = 0u;
  long long v107 = 0u;
  memset(v105, 0, sizeof(v105));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)unint64_t v98 = 136315906;
  *(void *)&v98[4] = "operator[]";
  __int16 v99 = 1024;
  int v100 = 468;
  __int16 v101 = 2048;
  unint64_t v102 = v19;
  __int16 v103 = 2048;
  uint64_t v104 = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_55:
  *(void *)BOOL v86 = 0;
  *((_OWORD *)v23 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
  *((_OWORD *)v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  LODWORD(v105[0]) = 136315906;
  *(const void **)((char *)v105 + 4) = "operator[]";
  WORD2(v105[1]) = 1024;
  *(_DWORD *)((char *)&v105[1] + 6) = 468;
  WORD1(v105[2]) = 2048;
  *(const void **)((char *)&v105[2] + 4) = (const void *)v19;
  WORD2(v105[3]) = 2048;
  *(const void **)((char *)&v105[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_56:
  *(void *)BOOL v86 = 0;
  *((_OWORD *)v23 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
  *((_OWORD *)v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  LODWORD(v105[0]) = 136315906;
  *(const void **)((char *)v105 + 4) = "operator[]";
  WORD2(v105[1]) = 1024;
  *(_DWORD *)((char *)&v105[1] + 6) = 468;
  WORD1(v105[2]) = 2048;
  *(const void **)((char *)&v105[2] + 4) = (const void *)v19;
  WORD2(v105[3]) = 2048;
  *(const void **)((char *)&v105[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_57:
  *(void *)BOOL v86 = 0;
  *((_OWORD *)v23 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
  *((_OWORD *)v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  unint64_t v27 = &_os_log_internal;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  LODWORD(v105[0]) = 136315906;
  *(const void **)((char *)v105 + 4) = "operator[]";
  WORD2(v105[1]) = 1024;
  *(_DWORD *)((char *)&v105[1] + 6) = 468;
  WORD1(v105[2]) = 2048;
  *(const void **)((char *)&v105[2] + 4) = (const void *)v19;
  WORD2(v105[3]) = 2048;
  *(const void **)((char *)&v105[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_58:
  *(void *)unint64_t v98 = 0;
  unint64_t v30 = (unint64_t)v86;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)BOOL v86 = 136315906;
  *(void *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(void *)&v86[20] = 1;
  *(_WORD *)&v86[28] = 2048;
  *(void *)&v86[30] = v27;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_59:
  *(void *)unint64_t v98 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  uint64_t v42 = &_os_log_internal;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)BOOL v86 = 136315906;
  *(void *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(void *)&v86[20] = v30;
  *(_WORD *)&v86[28] = 2048;
  *(void *)&v86[30] = v27;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_60:
  dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
LABEL_44:
  *(void *)(v42 + 36re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v42 + 376) = _D0;
  *(_DWORD *)(v42 + 384) = 1065353216;
  *(_OWORD *)(v42 + 392) = 0u;
  *(_OWORD *)(v42 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(v42 + 42re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *(void *)(v42 + 42re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0xFFFFFFFF00000001;
  *(unsigned char *)(v42 + 496) = 0;
  *(void *)(v42 + 544) = 0;
  *(unsigned char *)(v42 + 560) = 0;
  *(void *)(v42 + 640) = 0x10100010001;
  uint64_t v48 = a3;
  uint64_t v49 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 24, 8);
  v49[1] = 0;
  v49[2] = 0;
  void *v49 = 0;
  re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(v49, (uint64_t)a3, v86);
  uint64_t v50 = v49[1];
  *(void *)uint64_t v42 = v49[2];
  *(void *)(v42 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v50;
  v105[0] = &v80;
  v105[1] = (const void *)1;
  uint64_t v51 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
  *(void *)(v42 + 24) = re::MeshBoundingBoxes::MeshBoundingBoxes(v51, (uint64_t)a3, v105, 1);
  v105[0] = v77;
  v105[1] = v76;
  uint64_t v52 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
  uint64_t v53 = re::MeshBoundingBoxes::MeshBoundingBoxes(v52, (uint64_t)a3, v105, 1);
  *(void *)(v42 + 32) = v53;
  float32x4_t v54 = v81;
  *(float32x4_t *)(v42 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v80;
  *(float32x4_t *)(v42 + 464) = v54;
  *(void *)(v42 + 480) = v53;
  *(_OWORD *)(v42 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v67;
  *(_OWORD *)(v42 + 64) = v64;
  *(_OWORD *)(v42 + 80) = v63;
  *(_OWORD *)(v42 + 96) = v62;
  uint64_t v55 = *((void *)v14 + 1);
  *(void *)(v42 + 184) = *((void *)v14 + 2);
  *(void *)(v42 + 192) = v55;
  uint64_t v56 = *(void *)(v15 + 8);
  *(void *)(v42 + 112) = *(void *)(v15 + 16);
  *(void *)(v42 + 120) = v56;
  *(_DWORD *)(v42 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v42 + 408) & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(a2 + 1184));
  *(_DWORD *)(v42 + 412) |= 8u;
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit(&v95[1]);
  if ((void)v94)
  {
    if (*((void *)&v94 + 1))
    {
      (*(void (**)(void, void))(*(void *)v94 + 40))(v94, v95[0]);
      *((void *)&v94 + 1) = 0;
      v95[0] = 0;
    }
    *(void *)&long long v94 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v88);
  if (v75 && v76) {
    (*(void (**)(uint64_t, char *))(*(void *)v75 + 40))(v75, v77);
  }
  re::MeshModel::~MeshModel((re::MeshModel *)&v78);
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<float>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  __n128 result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 256;
  *((unsigned char *)result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 28;
  int v5 = *a2;
  if (*((_DWORD *)result + 12)) {
    *((_DWORD *)result + 12) = 0;
  }
  *((_DWORD *)result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector2<float>>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  __n128 result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 256;
  *((unsigned char *)result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 29;
  unint64_t v5 = *a2;
  if (*((_DWORD *)result + 12) != 1) {
    *((_DWORD *)result + 12) = 1;
  }
  result[4] = v5;
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  __n128 result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 256;
  *((unsigned char *)result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 30;
  int v5 = *((_DWORD *)result + 12);
  *((_OWORD *)result + 2) = *a2;
  if (v5 != 2) {
    *((_DWORD *)result + 12) = 2;
  }
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "";
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  __n128 result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 256;
  *((unsigned char *)result + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 31;
  int v5 = *((_DWORD *)result + 12);
  *((_OWORD *)result + 2) = *a2;
  if (v5 != 3) {
    *((_DWORD *)result + 12) = 3;
  }
  return result;
}

void re::PrimitiveRenderer::~PrimitiveRenderer(re::PrimitiveRenderer *this)
{
  *(unsigned char *)this = 0;
  re::DynamicArray<re::PrimitiveRenderingContext>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::PrimitiveShapeGeometry>::deinit((uint64_t)this + 208);
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {

    *((void *)this + 24) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {

    *((void *)this + 2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {

    *((void *)this + 22) = 0;
  }
  int v5 = (void *)*((void *)this + 12);
  if (v5)
  {

    *((void *)this + 12) = 0;
  }
  long long v6 = (void *)*((void *)this + 11);
  if (v6)
  {

    *((void *)this + 11) = 0;
  }
  unint64_t v7 = (void *)*((void *)this + 10);
  if (v7)
  {

    *((void *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
  }
}

uint64_t re::PrimitiveRenderer::init(re::PrimitiveRenderer *this, id *a2)
{
  *((void *)this + 31) = a2;
  re::createRectangle((uint64_t)this + 16, a2 + 23);
  re::createCylinder(4uLL, (uint64_t)this + 112, (id *)(*((void *)this + 31) + 184));
  re::PrimitiveRenderer::createUnitBox(this);
  re::PrimitiveRenderer::createRectangle(this);
  re::PrimitiveRenderer::createCylinder(this, 0x10uLL);
  re::PrimitiveRenderer::createUVSphere(this, 0x10uLL);
  re::PrimitiveRenderer::createCone(this, 0x10uLL);
  re::PrimitiveRenderer::createCapsule(this, 0x10uLL);
  re::PrimitiveRenderer::createBoneBipyramid(this);
  uint64_t result = re::PrimitiveRenderer::createHemisphere(this, 0x10uLL);
  *(unsigned char *)this = 1;
  return result;
}

void re::PrimitiveRenderer::createUnitBox(re::PrimitiveRenderer *this)
{
  v41[72] = *MEMORY[0x263EF8340];
  uint64_t v2 = v39;
  bzero(v39, 0x240uLL);
  bzero(v38, 0x240uLL);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  int v5 = &v40;
  long long v6 = v41;
  uint64_t v7 = 1;
  uint64_t v8 = 2;
  uint64_t v9 = v38;
  do
  {
    int v10 = -1;
    unint64_t v11 = v8;
    uint64_t v12 = v6;
    unint64_t v13 = v7;
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = 0;
      int v16 = v10;
      float v17 = (float)v10;
      uint64_t v18 = &v9[v4];
      uint64_t v19 = (uint64_t)v14 + 16 * v4 - 12 * (v13 / 3);
      uint64_t v20 = (uint64_t)v12 + 16 * v4 - 12 * (v11 / 3);
      uint64_t v21 = &v2[16 * v4];
      uint64_t v22 = 5u;
      do
      {
        *(float *)&v21[1 * v15] = v17;
        *(_DWORD *)(v20 + 1 * v15) = dword_2343AD6F0[v15];
        *(_DWORD *)(v19 + 1 * v15) = dword_2343AD6F0[v22];
        uint64_t v23 = &v38[v4];
        void *v23 = 0;
        v23[1] = 0;
        *(float *)&v18[v15] = v17;
        ++v4;
        ++v15;
        --v22;
      }
      while (v15 != 6);
      int v10 = v16 + 2;
      v14 += 4;
      v13 += 4;
      ++v12;
      v11 += 2;
    }
    while (v16 < 0);
    ++v3;
    uint64_t v9 = (_OWORD *)((char *)v9 + 4);
    ++v5;
    ++v7;
    long long v6 = (void *)((char *)v6 + 4);
    ++v8;
    v2 += 4;
  }
  while (v3 != 3);
  unint64_t v24 = (id *)(*((void *)this + 31) + 184);
  *(void *)&long long v25 = 0x7F0000007FLL;
  *((void *)&v25 + 1) = 0x7F0000007FLL;
  int32x4_t v33 = vdupq_n_s32(0x7F800000u);
  long long v34 = v25;
  id v36 = 0;
  id v37 = 0;
  id v35 = 0;
  v29.i64[0] = 0xBF800000BF800000;
  v29.i64[1] = 3212836864;
  uint64_t v30 = 0x3F8000003F800000;
  uint64_t v31 = 1065353216;
  v28[0] = (float32x4_t *)v39;
  v28[1] = (float32x4_t *)36;
  v27[0] = 0;
  v27[1] = 0;
  v26[0] = v38;
  v26[1] = 36;
  re::setShape(v28, v27, v26, (uint64_t)v32, v24, &v29);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v32);
  if (v37)
  {

    id v37 = 0;
  }
  if (v36)
  {

    id v36 = 0;
  }
  if (v35) {
}
  }

void re::PrimitiveRenderer::createRectangle(re::PrimitiveRenderer *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (id *)(*((void *)this + 31) + 184);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  int32x4_t v5 = vdupq_n_s32(0x7F800000u);
  long long v6 = v3;
  id v8 = 0;
  id v9 = 0;
  id v7 = 0;
  re::createRectangle((uint64_t)v4, v2);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v4);
  if (v9)
  {

    id v9 = 0;
  }
  if (v8)
  {

    id v8 = 0;
  }
  if (v7) {
}
  }

void re::PrimitiveRenderer::createCylinder(re::PrimitiveRenderer *this, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v3 = (id *)(*((void *)this + 31) + 184);
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  int32x4_t v6 = vdupq_n_s32(0x7F800000u);
  long long v7 = v4;
  id v9 = 0;
  id v10 = 0;
  id v8 = 0;
  re::createCylinder(a2, (uint64_t)v5, v3);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    id v10 = 0;
  }
  if (v9)
  {

    id v9 = 0;
  }
  if (v8) {
}
  }

void re::PrimitiveRenderer::createUVSphere(re::PrimitiveRenderer *this, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v3 = (id *)(*((void *)this + 31) + 184);
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  int32x4_t v6 = vdupq_n_s32(0x7F800000u);
  long long v7 = v4;
  id v9 = 0;
  id v10 = 0;
  id v8 = 0;
  re::createUVSphere(a2, (uint64_t)v5, v3, 0.0);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    id v10 = 0;
  }
  if (v9)
  {

    id v9 = 0;
  }
  if (v8) {
}
  }

uint64_t re::PrimitiveRenderer::createCone(re::PrimitiveRenderer *this, unint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v37 = 0;
  v34[1] = 0;
  unint64_t v35 = 0;
  uint64_t v33 = 0;
  v34[0] = 0;
  int v36 = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  int v32 = 0;
  long long v29 = xmmword_23435FD70;
  if (a2)
  {
    unint64_t v4 = 0;
    float v5 = 6.2832 / (float)a2;
    do
    {
      __float2 v6 = __sincosf_stret(v5 * (float)v4++);
      __float2 v7 = __sincosf_stret(v5 * (float)v4);
      v8.n128_u32[0] = 0;
      v8.n128_u32[1] = LODWORD(v6.__cosval);
      v8.n128_u64[1] = LODWORD(v6.__sinval);
      v38[0] = v8;
      v8.n128_u32[0] = 0;
      v8.n128_u32[1] = LODWORD(v7.__cosval);
      v8.n128_u64[1] = LODWORD(v7.__sinval);
      float32x4_t v24 = (float32x4_t)v8;
      float32x4_t v28 = (float32x4_t)xmmword_23435FD50;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, v38);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v24);
      float32x4_t v9 = vaddq_f32((float32x4_t)v38[0], (float32x4_t)xmmword_23437C0A0);
      float32x4_t v10 = vaddq_f32(v24, (float32x4_t)xmmword_23437C0A0);
      float32x4_t v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v9)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
      float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
      int32x4_t v13 = (int32x4_t)vmulq_f32(v11, v11);
      v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
      float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
      float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
      float32x4_t v28 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      __n128 v27 = 0uLL;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, &v27);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, v38);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
    }
    while (a2 != v4);
    unint64_t v16 = v37;
    unint64_t v17 = v35;
    uint64_t v18 = v33;
    uint64_t v19 = v31;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    unint64_t v17 = 0;
    unint64_t v16 = 0;
  }
  uint64_t v20 = (id *)(*((void *)this + 31) + 184);
  v21.n128_u64[0] = 0x7F0000007FLL;
  v21.n128_u64[1] = 0x7F0000007FLL;
  v38[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v38[3] = v21;
  id v40 = 0;
  id v41 = 0;
  id v39 = 0;
  float32x4_t v24 = (float32x4_t)xmmword_2343AD6C0;
  uint64_t v25 = 0x3F8000003F800000;
  uint64_t v26 = 1065353216;
  v28.i64[0] = v16;
  v28.i64[1] = v17;
  __n128 v27 = 0uLL;
  v23[0] = v18;
  v23[1] = v19;
  re::setShape((float32x4_t **)&v28, &v27, v23, (uint64_t)v38, v20, &v24);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v38);
  if (v41)
  {

    id v41 = 0;
  }
  if (v40)
  {

    id v40 = 0;
  }
  if (v39) {

  }
  if (v30[0] && v33) {
    (*(void (**)(void))(*(void *)v30[0] + 40))();
  }
  uint64_t result = v34[0];
  if (v34[0])
  {
    if (v37) {
      return (*(uint64_t (**)(void))(*(void *)v34[0] + 40))();
    }
  }
  return result;
}

void re::PrimitiveRenderer::createCapsule(re::PrimitiveRenderer *this, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v3 = (id *)(*((void *)this + 31) + 184);
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  int32x4_t v6 = vdupq_n_s32(0x7F800000u);
  long long v7 = v4;
  id v9 = 0;
  id v10 = 0;
  id v8 = 0;
  re::createUVSphere(a2, (uint64_t)v5, v3, 2.0);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    id v10 = 0;
  }
  if (v9)
  {

    id v9 = 0;
  }
  if (v8) {
}
  }

uint64_t re::PrimitiveRenderer::createBoneBipyramid(re::PrimitiveRenderer *this)
{
  uint64_t v2 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v33 = 0;
  v30[1] = 0;
  unint64_t v31 = 0;
  unint64_t v29 = 0;
  v30[0] = 0;
  int v32 = 0;
  v26[1] = 0;
  unint64_t v27 = 0;
  v26[0] = 0;
  long long v3 = xmmword_23435FD50;
  float32x4_t v25 = (float32x4_t)xmmword_23435FD50;
  LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1036831949;
  long long v18 = v3;
  int v28 = 0;
  do
  {
    uint64_t v4 = v2 + 1;
    float32x4_t v5 = (float32x4_t)v18;
    float32x4_t v6 = (float32x4_t)v18;
    v6.f32[1] = flt_2343AD6E0[v2] * *(float *)&v18;
    v6.f32[2] = flt_2343AD6E0[(v2 + 1) & 3] * *(float *)&v18;
    v34[0] = (__n128)v6;
    v5.i32[1] = v6.i32[2];
    v5.f32[2] = flt_2343AD6E0[((_BYTE)v2 + 2) & 3] * *(float *)&v18;
    __n128 v19 = (__n128)v5;
    float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(v5)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
    int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
    v8.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), *(float32x2_t *)v8.i8)).u32[0];
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
    *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v8.u32[0]);
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
    float32x4_t v24 = vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
    float32x4_t v10 = vsubq_f32(v6, v25);
    float32x4_t v11 = vsubq_f32(v5, v25);
    float32x4_t v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v10)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
    int32x4_t v13 = (int32x4_t)vmulq_f32(v12, v12);
    v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
    float32x4_t v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
    *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
    float32x4_t v23 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
    __n128 v22 = 0uLL;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v19);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, v34);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v25);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, v34);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v19);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    uint64_t v2 = v4;
  }
  while (v4 != 4);
  float32x2_t v15 = (id *)(*((void *)this + 31) + 184);
  v16.n128_u64[0] = 0x7F0000007FLL;
  v16.n128_u64[1] = 0x7F0000007FLL;
  void v34[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v34[3] = v16;
  id v36 = 0;
  id v37 = 0;
  id v35 = 0;
  v19.n128_u64[0] = 0xBF800000BF800000;
  v19.n128_u64[1] = 3212836864;
  uint64_t v20 = 0x3F8000003F800000;
  uint64_t v21 = 1065353216;
  v24.i64[0] = v33;
  v24.i64[1] = v31;
  float32x4_t v23 = 0uLL;
  v22.n128_u64[0] = v29;
  v22.n128_u64[1] = v27;
  re::setShape((float32x4_t **)&v24, &v23, &v22, (uint64_t)v34, v15, (float32x4_t *)&v19);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v34);
  if (v37)
  {

    id v37 = 0;
  }
  if (v36)
  {

    id v36 = 0;
  }
  if (v35) {

  }
  if (v26[0] && v29) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  uint64_t result = v30[0];
  if (v30[0])
  {
    if (v33) {
      return (*(uint64_t (**)(void))(*(void *)v30[0] + 40))();
    }
  }
  return result;
}

uint64_t re::PrimitiveRenderer::createHemisphere(re::PrimitiveRenderer *this, unint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unint64_t v50 = 0;
  v47[1] = 0;
  unint64_t v48 = 0;
  v47[0] = 0;
  int v49 = 0;
  unint64_t v46 = 0;
  v43[1] = 0;
  unint64_t v44 = 0;
  v43[0] = 0;
  int v45 = 0;
  float32x4_t v42 = (float32x4_t)xmmword_23435FD50;
  if (a2)
  {
    float v4 = 6.2832 / (float)a2;
    float v5 = 3.1416 / (float)(a2 >> 1);
    __float2 v7 = __sincosf_stret(v5);
    *(float *)&uint64_t v6 = v7.__cosval;
    *(void *)&long long v31 = v6;
    unint64_t v8 = 0;
    if (a2 >> 2 <= 2) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = a2 >> 2;
    }
    do
    {
      __float2 v10 = __sincosf_stret(v4 * (float)v8);
      float cosval = v10.__cosval;
      LODWORD(vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = *(void *)&v10;
      __float2 v11 = __sincosf_stret(v4 * (float)++v8);
      long long v12 = v31;
      __n128 v13 = (__n128)v31;
      v13.n128_f32[1] = v7.__sinval * cosval;
      v13.n128_f32[2] = v7.__sinval * v33;
      v51[0] = v13;
      *((float *)&v12 + 1) = v7.__sinval * v11.__cosval;
      *((float *)&v12 + 2) = v7.__sinval * v11.__sinval;
      long long v35 = v12;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, v51);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v35);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, v51);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v35);
      if (a2 >= 8)
      {
        unint64_t v14 = 1;
        do
        {
          __float2 v16 = __sincosf_stret(v5 * (float)v14);
          *(float *)&uint64_t v15 = v16.__cosval;
          v34.i64[0] = v15;
          __float2 v18 = __sincosf_stret(v5 * (float)++v14);
          v17.n128_f32[0] = v18.__cosval;
          float32x4_t v19 = v34;
          v19.f32[1] = cosval * v16.__sinval;
          v19.f32[2] = v33 * v16.__sinval;
          __n128 v20 = v17;
          v20.n128_f32[1] = cosval * v18.__sinval;
          v20.n128_f32[2] = v33 * v18.__sinval;
          __n128 v40 = v20;
          float32x4_t v41 = v19;
          v17.n128_f32[1] = v11.__cosval * v18.__sinval;
          v17.n128_f32[2] = v11.__sinval * v18.__sinval;
          __n128 v39 = v17;
          __n128 v21 = (__n128)v34;
          v21.n128_f32[1] = v11.__cosval * v16.__sinval;
          v21.n128_f32[2] = v11.__sinval * v16.__sinval;
          __n128 v38 = v21;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v40);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v40);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v38);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v38);
        }
        while (v9 != v14);
      }
      v22.n128_u32[0] = 0;
      v22.n128_f32[1] = cosval;
      v22.n128_u64[1] = LODWORD(v33);
      LODWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
      DWORD1(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = LODWORD(v11.__cosval);
      v51[0] = v22;
      *((void *)&v23 + 1) = LODWORD(v11.__sinval);
      long long v35 = v23;
      float32x4_t v41 = 0uLL;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v35);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, v51);
      float32x4_t v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
      float32x4_t v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
      float32x4_t v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
    }
    while (v8 != a2);
    unint64_t v24 = v50;
    unint64_t v25 = v48;
    unint64_t v26 = v46;
    unint64_t v27 = v44;
  }
  else
  {
    unint64_t v27 = 0;
    unint64_t v26 = 0;
    unint64_t v25 = 0;
    unint64_t v24 = 0;
  }
  int v28 = (id *)(*((void *)this + 31) + 184);
  v29.n128_u64[0] = 0x7F0000007FLL;
  v29.n128_u64[1] = 0x7F0000007FLL;
  v51[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v51[3] = v29;
  id v53 = 0;
  id v54 = 0;
  id v52 = 0;
  long long v35 = xmmword_2343AD6C0;
  uint64_t v36 = 0x3F8000003F800000;
  uint64_t v37 = 1065353216;
  v41.i64[0] = v24;
  v41.i64[1] = v25;
  __n128 v40 = 0uLL;
  v39.n128_u64[0] = v26;
  v39.n128_u64[1] = v27;
  re::setShape((float32x4_t **)&v41, &v40, &v39, (uint64_t)v51, v28, (float32x4_t *)&v35);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v51);
  if (v54)
  {

    id v54 = 0;
  }
  if (v53)
  {

    id v53 = 0;
  }
  if (v52) {

  }
  if (v43[0] && v46) {
    (*(void (**)(void))(*(void *)v43[0] + 40))();
  }
  uint64_t result = v47[0];
  if (v47[0])
  {
    if (v50) {
      return (*(uint64_t (**)(void))(*(void *)v47[0] + 40))(v47[0]);
    }
  }
  return result;
}

uint64_t re::createCylinder(unint64_t a1, uint64_t a2, id *a3)
{
  unint64_t v34 = 0;
  v31[1] = 0;
  unint64_t v32 = 0;
  v31[0] = 0;
  int v33 = 0;
  uint64_t v30 = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  v27[0] = 0;
  int v29 = 0;
  __n128 v26 = 0uLL;
  float32x4_t v25 = (float32x4_t)xmmword_23435FD50;
  if (a1)
  {
    float v6 = 6.2832 / (float)a1;
    for (unint64_t i = 1; i <= a1; ++i)
    {
      __float2 v8 = __sincosf_stret(v6 * (float)(i - 1));
      __float2 v9 = __sincosf_stret(v6 * (float)i);
      v10.n128_u32[0] = 0;
      v10.n128_u32[1] = LODWORD(v8.__cosval);
      v10.n128_u64[1] = LODWORD(v8.__sinval);
      v22[0] = v10;
      v10.n128_u32[0] = 0;
      v10.n128_u32[1] = LODWORD(v9.__cosval);
      v10.n128_u64[1] = LODWORD(v9.__sinval);
      float32x4_t v24 = (float32x4_t)v10;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, &v26);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, v22);
      float32x4_t v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      float32x4_t v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      float32x4_t v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v25);
      float32x4_t v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      float32x4_t v23 = vaddq_f32(v24, v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      float32x4_t v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      float32x4_t v23 = vaddq_f32(v24, v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      float32x4_t v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
    }
    unint64_t v11 = v34;
    unint64_t v12 = v32;
    uint64_t v13 = v30;
    uint64_t v14 = v28;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    unint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  __asm { FMOV            V1.4S, #1.0 }
  v22[0] = (__n128)xmmword_2343AD6C0;
  v22[1] = _Q1;
  v24.i64[0] = v11;
  v24.i64[1] = v12;
  float32x4_t v23 = 0uLL;
  v21[0] = v13;
  v21[1] = v14;
  re::setShape((float32x4_t **)&v24, &v23, v21, a2, a3, (float32x4_t *)v22);
  if (v27[0] && v30) {
    (*(void (**)(void))(*(void *)v27[0] + 40))();
  }
  uint64_t result = v31[0];
  if (v31[0])
  {
    if (v34) {
      return (*(uint64_t (**)(void))(*(void *)v31[0] + 40))(v31[0]);
    }
  }
  return result;
}

id re::DynamicArray<re::PrimitiveShapeGeometry>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PrimitiveShapeGeometry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 96 * v4;
  long long v6 = *(_OWORD *)a2;
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v8;
  *(_OWORD *)uint64_t v5 = v6;
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 64) = a2[8];
  *(void *)(v5 + 72) = a2[9];
  id result = a2[10];
  *(void *)(v5 + 80) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::createRectangle(uint64_t a1, id *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v9[0] = constinit;
  v9[1] = unk_2343AD770;
  _OWORD v9[2] = xmmword_2343AD780;
  v9[3] = unk_2343AD790;
  v8[0] = constinit_20;
  v8[1] = unk_2343AD7B0;
  uint64_t v8[2] = xmmword_2343AD7C0;
  v8[3] = unk_2343AD7D0;
  int v7 = 3;
  uint64_t v6 = 0x2000200010000;
  v5[0] = (float32x4_t)xmmword_2343AD6D0;
  v5[1] = (float32x4_t)xmmword_234376D80;
  v4[0] = (float32x4_t *)v9;
  v4[1] = (float32x4_t *)4;
  v3[0] = &v6;
  v3[1] = 6;
  v2[0] = v8;
  v2[1] = 4;
  re::setShape(v4, v3, v2, a1, a2, v5);
}

uint64_t re::createUVSphere(unint64_t a1, uint64_t a2, id *a3, float a4)
{
  float v37 = a4 * 0.5;
  id v53 = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  int v52 = 0;
  uint64_t v49 = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  v46[0] = 0;
  int v48 = 0;
  float32x4_t v42 = (float32x4_t)COERCE_UNSIGNED_INT(-1.0 - (float)(a4 * 0.5));
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, (__n128 *)&v42);
  float32x4_t v42 = (float32x4_t)xmmword_23435FD70;
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
  float32x4_t v42 = (float32x4_t)COERCE_UNSIGNED_INT(v37 + 1.0);
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, (__n128 *)&v42);
  float32x4_t v42 = (float32x4_t)xmmword_23435FD50;
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
  uint64_t v8 = 2 * a1;
  if (2 * a1)
  {
    unint64_t v9 = 0;
    float v10 = 3.1416 / (float)a1;
    unint64_t v11 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        __float2 v12 = __sincosf_stret(v10 * (float)v9);
        unint64_t v13 = 1;
        do
        {
          __float2 v14 = __sincosf_stret((float)(v10 * (float)v13) + -1.5708);
          v15.f32[0] = v14.__sinval;
          v15.f32[1] = v14.__cosval * (float)-v12.__sinval;
          v15.f32[2] = v12.__cosval * v14.__cosval;
          float32x4_t v42 = v15;
          if (v13 <= v11) {
            float32x4_t v16 = vsubq_f32(v15, (float32x4_t)LODWORD(v37));
          }
          else {
            float32x4_t v16 = vaddq_f32((float32x4_t)LODWORD(v37), v15);
          }
          v41[0] = (__n128)v16;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
          if (a4 != 0.0 && v11 == v13)
          {
            v41[0] = (__n128)vaddq_f32((float32x4_t)LODWORD(v37), v42);
            re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, v41);
            re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
          }
          ++v13;
        }
        while (a1 != v13);
      }
      ++v9;
    }
    while (v9 != v8);
    uint64_t v36 = a3;
    uint64_t v17 = 0;
    uint64_t v45 = 0;
    if (a4 != 0.0) {
      ++a1;
    }
    unint64_t v18 = a1 - 1;
    uint64_t v43 = 0;
    float32x4_t v42 = 0uLL;
    int v44 = 0;
    int v19 = 2;
    do
    {
      __int16 v20 = v17++;
      if (v17 == v8) {
        __int16 v21 = 0;
      }
      else {
        __int16 v21 = v20 + 1;
      }
      v41[0].n128_u16[0] = 0;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      __int16 v22 = v21 * v18;
      unsigned __int16 v23 = v22 + 2;
      v41[0].n128_u16[0] = v22 + 2;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      __int16 v24 = v20 * v18;
      v41[0].n128_u16[0] = v24 + 2;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = 1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = v24 + a1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = v22 + a1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      if (v18 >= 2)
      {
        int v25 = v19;
        unint64_t v26 = a1 - 2;
        do
        {
          v41[0].n128_u16[0] = v25;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v25 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v25 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          ++v23;
          ++v25;
          --v26;
        }
        while (v26);
      }
      v19 += v18;
    }
    while (v17 != v8);
    uint64_t v27 = v45;
    uint64_t v28 = v43;
    a3 = v36;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = 0;
    float32x4_t v42 = 0uLL;
    int v44 = 0;
  }
  __asm { FMOV            V2.4S, #-1.0 }
  _Q2.n128_f32[0] = -1.0 - (float)(a4 * 0.5);
  __asm { FMOV            V1.4S, #1.0 }
  _Q1.n128_f32[0] = (float)(a4 * 0.5) + 1.0;
  v41[0] = _Q2;
  v41[1] = _Q1;
  v40[0] = v53;
  v40[1] = v51;
  v39[0] = v27;
  v39[1] = v28;
  v38[0] = v49;
  v38[1] = v47;
  re::setShape(v40, v39, v38, a2, a3, (float32x4_t *)v41);
  if (v42.i64[0])
  {
    if (v45) {
      (*(void (**)(void))(*(void *)v42.i64[0] + 40))();
    }
    uint64_t v45 = 0;
  }
  if (v46[0] && v49) {
    (*(void (**)(void))(*(void *)v46[0] + 40))();
  }
  uint64_t result = v50[0];
  if (v50[0])
  {
    if (v53) {
      return (*(uint64_t (**)(void))(*(void *)v50[0] + 40))(v50[0]);
    }
  }
  return result;
}

void re::setShape(float32x4_t **a1, void *a2, void *a3, uint64_t a4, id *a5, float32x4_t *a6)
{
  if (a6)
  {
    float32x4_t v10 = *a6;
    float32x4_t v11 = a6[1];
    __float2 v12 = a1[1];
  }
  else
  {
    __float2 v12 = a1[1];
    if (v12)
    {
      unint64_t v13 = *a1;
      float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      uint64_t v14 = 16 * (void)v12;
      v11.i64[0] = 0x7F0000007FLL;
      v11.i32[2] = 127;
      do
      {
        float32x4_t v15 = *v13++;
        float32x4_t v16 = v15;
        v10.i32[3] = 0;
        v16.i32[3] = 0;
        float32x4_t v10 = vminnmq_f32(v10, v16);
        v11.i32[3] = 0;
        float32x4_t v11 = vmaxnmq_f32(v11, v16);
        v14 -= 16;
      }
      while (v14);
    }
    else
    {
      float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v11.i64[0] = 0x7F0000007FLL;
      v11.i64[1] = 0x7F0000007FLL;
    }
  }
  *(unsigned char *)a4 = 3;
  *(void *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
  *(void *)(a4 + 16) = a2[1];
  *(float32x4_t *)(a4 + 32) = v10;
  *(float32x4_t *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v11;
  id v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a1, 16 * (void)a1[1], 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 64), &v21);
  if (v21) {

  }
  *(void *)(a4 + 72) = 0;
  uint64_t v17 = a2[1];
  if (v17)
  {
    id v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a2, 2 * v17, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 72), &v21);
    if (v21) {
  }
    }
  int v19 = *(void **)(a4 + 80);
  unint64_t v18 = (void **)(a4 + 80);

  _OWORD *v18 = 0;
  uint64_t v20 = a3[1];
  if (v20)
  {
    id v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a3, 16 * v20, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v18, &v21);
    if (v21) {
  }
    }
}

uint64_t re::PrimitiveRenderer::addCustomShape(void *a1, float32x4_t **a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = (id *)(a1[31] + 184);
  *(void *)&long long v6 = 0x7F0000007FLL;
  *((void *)&v6 + 1) = 0x7F0000007FLL;
  int32x4_t v11 = vdupq_n_s32(0x7F800000u);
  long long v12 = v6;
  id v14 = 0;
  id v15 = 0;
  id v13 = 0;
  re::setShape(a2, a3, a4, (uint64_t)v10, v5, 0);
  int v7 = (_anonymous_namespace_ *)(a1 + 26);
  uint64_t v8 = a1[28];
  re::DynamicArray<re::PrimitiveShapeGeometry>::add(v7, v10);
  if (v15)
  {

    id v15 = 0;
  }
  if (v14)
  {

    id v14 = 0;
  }
  if (v13) {

  }
  return v8;
}

uint64_t re::PrimitiveRenderer::submitContext(uint64_t a1, unint64_t *a2)
{
  re::DynamicArray<re::PrimitiveRenderingContext>::add((_anonymous_namespace_ *)(a1 + 256), (uint64_t)a2);
  re::PrimitiveRenderingDynamicGeometry::init((re::PrimitiveRenderingDynamicGeometry *)a2, a2[147]);
  return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear((uint64_t)(a2 + 132));
}

__n128 re::DynamicArray<re::PrimitiveRenderingContext>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PrimitiveRenderingContext>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(*((void *)this + 4) + 1200 * v4, a2);
  *(void *)(v5 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v5 + 1080) = 0;
  *(void *)(v5 + 1072) = 0;
  *(void *)(v5 + 1064) = 0;
  *(void *)(v5 + 1056) = 0;
  *(void *)(v5 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  *(void *)(v5 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a2 + 1064) = 0;
  uint64_t v6 = *(void *)(v5 + 1072);
  *(void *)(v5 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = v6;
  uint64_t v7 = *(void *)(v5 + 1088);
  *(void *)(v5 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a2 + 1088);
  *(void *)(a2 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
  ++*(_DWORD *)(a2 + 1080);
  ++*(_DWORD *)(v5 + 1080);
  long long v8 = *(_OWORD *)(a2 + 1096);
  long long v9 = *(_OWORD *)(a2 + 1112);
  *(_DWORD *)(v5 + 112re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 1128);
  *(_OWORD *)(v5 + 1096) = v8;
  *(_OWORD *)(v5 + 1112) = v9;
  *(void *)(v5 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v5 + 1136) = 0;
  *(void *)(v5 + 1152) = 0;
  *(void *)(v5 + 1144) = 0;
  *(_DWORD *)(v5 + 1160) = 0;
  *(void *)(v5 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a2 + 1136) = 0;
  *(void *)(v5 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a2 + 1144) = 0;
  uint64_t v10 = *(void *)(v5 + 1152);
  *(void *)(v5 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a2 + 1152) = v10;
  uint64_t v11 = *(void *)(v5 + 1168);
  *(void *)(v5 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a2 + 1168);
  *(void *)(a2 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
  ++*(_DWORD *)(a2 + 1160);
  ++*(_DWORD *)(v5 + 1160);
  __n128 result = *(__n128 *)(a2 + 1176);
  *(void *)(v5 + 1192) = *(void *)(a2 + 1192);
  *(__n128 *)(v5 + 1176) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
      *(void *)a3 = 0;
      *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      int v3 = 2;
      break;
    case 1:
    case 5:
      *(void *)a3 = 0x3F8000003F800000;
      *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x3F8000003F800000;
      int v3 = 3;
      break;
    case 2:
    case 6:
      int v3 = 0;
      *(_DWORD *)a3 = 1065353216;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeDefaultValue", 555);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233B649ECLL);
  }
  *(_DWORD *)(a3 + 16) = v3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  int v4 = 2;
  switch((int)a2)
  {
    case 0:
      break;
    case 1:
      uint64_t v2 = 0;
      uint64_t v3 = 0x3F80000000000000;
      int v4 = 4;
      break;
    case 2:
      uint64_t v2 = 0x3F8000003F800000;
      uint64_t v3 = 1065353216;
      break;
    case 3:
      uint64_t v2 = 0x3F8000003F800000;
      int v4 = 3;
      uint64_t v3 = 0x3F8000003F800000;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeDefaultValue", 574);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233B64AC8);
  }
  *(void *)__n128 result = v2;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v3;
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void re::PrimitiveRenderingDynamicGeometry::init(re::PrimitiveRenderingDynamicGeometry *this, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(_WORD *)((char *)this + 51re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *(_DWORD *)((char *)this + 51re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  do
  {
    uint64_t v5 = (char *)this + v4;
    *((void *)v5 + 2) = 0;
    *((_DWORD *)v5 + 6) = *(_DWORD *)((char *)this + v4 + 24) + 1;
    v4 += 40;
  }
  while (v4 != 280);
  *((unsigned char *)this + 512) = 1;
  *(_WORD *)((char *)this + 515) = 257;
  if (*((_DWORD *)this + 84) != 3) {
    *((_DWORD *)this + 84) = 3;
  }
  *((void *)this + 40) = 0x3F8000003F800000;
  *((void *)this + 41) = 0x3F8000003F800000;
  if (*((_DWORD *)this + 92)) {
    *((_DWORD *)this + 92) = 0;
  }
  *((_DWORD *)this + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1065353216;
  if (*((_DWORD *)this + 116) != 3) {
    *((_DWORD *)this + 116) = 3;
  }
  *((void *)this + 56) = 0x3F8000003F800000;
  *((void *)this + 5re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0x3F8000003F800000;
  if (*((_DWORD *)this + 124)) {
    *((_DWORD *)this + 124) = 0;
  }
  *((_DWORD *)this + 120) = 1065353216;
  *(_OWORD *)((char *)this + 520) = 0u;
  re::DynamicArray<unsigned long>::resize((uint64_t)this + 1016, a2);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v7 = (char *)this + 40 * i;
    long long v8 = (unint64_t *)(v7 + 552);
    unint64_t v9 = *((void *)v7 + 69);
    if (v9 >= a2)
    {
      if (v9 <= a2) {
        goto LABEL_23;
      }
      uint64_t v13 = 40 * a2;
      unint64_t v14 = a2;
      do
      {
        re::DynamicArray<unsigned long>::deinit(*((void *)this + 5 * i + 71) + v13);
        ++v14;
        v13 += 40;
      }
      while (v14 < *v8);
    }
    else
    {
      if (*((void *)this + 5 * i + 68) < a2)
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)v7 + 67, a2);
        unint64_t v9 = *v8;
      }
      unint64_t v10 = a2 - v9;
      if (a2 > v9)
      {
        uint64_t v11 = 40 * v9;
        do
        {
          uint64_t v12 = *((void *)this + 5 * i + 71) + v11;
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)uint64_t v12 = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v11 += 40;
          --v10;
        }
        while (v10);
      }
    }
    unint64_t *v8 = a2;
    ++*((_DWORD *)this + 10 * i + 140);
LABEL_23:
    id v15 = (char *)this + 40 * i;
    uint64_t v16 = (unint64_t *)(v15 + 712);
    unint64_t v17 = *((void *)v15 + 89);
    if (v17 >= a2)
    {
      if (v17 <= a2) {
        goto LABEL_33;
      }
    }
    else
    {
      if (*((void *)this + 5 * i + 88) < a2)
      {
        re::DynamicArray<re::AABB>::setCapacity((void *)v15 + 87, a2);
        unint64_t v17 = *v16;
      }
      if (v17 < a2)
      {
        uint64_t v18 = *((void *)this + 5 * i + 91);
        int v19 = (_DWORD *)(v18 + 32 * v17);
        uint64_t v20 = v18 + 32 * a2 - (void)v19;
        if (v20 >= 1)
        {
          unint64_t v21 = ((unint64_t)v20 >> 5) + 1;
          do
          {
            *int v19 = 0;
            v19[4] = 0;
            --v21;
            v19 += 8;
          }
          while (v21 > 1);
        }
      }
    }
    unint64_t *v16 = a2;
    ++*((_DWORD *)this + 10 * i + 180);
LABEL_33:
    re::DynamicArray<BOOL>::resize((uint64_t)this + 40 * i + 856, a2);
  }
  if (!a2) {
    return;
  }
  unint64_t v22 = 0;
  do
  {
    if (*((void *)this + 129) <= v22) {
      goto LABEL_47;
    }
    uint64_t v23 = 0;
    *(void *)(*((void *)this + 131) + 8 * v22) = 0;
    do
    {
      __int16 v24 = (char *)this + v23;
      if (*(void *)((char *)this + v23 + 552) <= v22)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        __n128 v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        __n128 v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_47:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        __n128 v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        __n128 v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_49:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        __n128 v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v25 = *((void *)v24 + 71) + 40 * v22;
      *(void *)(v25 + 16) = 0;
      ++*(_DWORD *)(v25 + 24);
      if (*((void *)v24 + 109) <= v22) {
        goto LABEL_46;
      }
      *(unsigned char *)(*(void *)((char *)this + v23 + 888) + v22) = 0;
      v23 += 40;
    }
    while (v23 != 160);
    if (*((void *)this + 109) <= v22) {
      goto LABEL_48;
    }
    *(unsigned char *)(*((void *)this + 111) + v22) = 1;
    if (*((void *)this + 114) <= v22) {
      goto LABEL_49;
    }
    *(unsigned char *)(*((void *)this + 116) + v22) = 1;
    v26.n128_u64[0] = 0x3F8000003F800000;
    v26.n128_u64[1] = 1065353216;
    LODWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 2;
    re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>((uint64_t)this, v22, 2u, &v26);
    v26.n128_u64[0] = 0x3F8000003F800000;
    v26.n128_u64[1] = 0x3F8000003F800000;
    LODWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 3;
    re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>((uint64_t)this, v22++, 3u, &v26);
  }
  while (v22 != a2);
}

re::PrimitiveRenderingContext *re::PrimitiveRenderingContext::PrimitiveRenderingContext(re::PrimitiveRenderingContext *this, unint64_t a2, re::RenderManager *a3)
{
  for (uint64_t i = 0; i != 280; i += 40)
  {
    uint64_t v7 = (char *)this + i;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = 0;
    *((_DWORD *)v7 + 6) = 0;
  }
  uint64_t v8 = 288;
  do
  {
    unint64_t v9 = (_DWORD *)((char *)this + v8);
    _DWORD *v9 = 0;
    _OWORD v9[4] = 0;
    v8 += 32;
  }
  while (v9 + 8 != (_DWORD *)((char *)this + 512));
  for (uint64_t j = 0; j != 160; j += 40)
  {
    uint64_t v11 = (char *)this + j;
    *((void *)v11 + 71) = 0;
    *((void *)v11 + 6re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    *((void *)v11 + 6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    *((void *)v11 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((_DWORD *)v11 + 140) = 0;
  }
  for (uint64_t k = 0; k != 160; k += 40)
  {
    uint64_t v13 = (char *)this + k;
    *((void *)v13 + 91) = 0;
    *((void *)v13 + 8re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    *((void *)v13 + 8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    *((void *)v13 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((_DWORD *)v13 + 180) = 0;
  }
  for (uint64_t m = 0; m != 160; m += 40)
  {
    id v15 = (char *)this + m;
    *((void *)v15 + 111) = 0;
    *((void *)v15 + 10re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    *((void *)v15 + 10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    *((void *)v15 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((_DWORD *)v15 + 220) = 0;
  }
  *((void *)this + 12re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *((void *)this + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 260) = 0;
  *((void *)this + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((_DWORD *)this + 270) = 0;
  *(_OWORD *)((char *)this + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_OWORD *)this + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((void *)this + 140) = 0;
  *((_DWORD *)this + 282) = 16843009;
  *((void *)this + 146) = 0;
  *((void *)this + 142) = 0;
  *((void *)this + 144) = 0;
  *((void *)this + 14re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *((_DWORD *)this + 290) = 0;
  *((unsigned char *)this + 1184) = 1;
  re::PrimitiveRenderingDynamicGeometry::init(this, a2);
  *((void *)this + 14re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = a2;
  *((void *)this + 14re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  return this;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 96 * v2;
    do
    {
      __n128 result = re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v3);
      v3 += 96;
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

BOOL re::PrimitiveRenderingContext::isEmpty(re::PrimitiveRenderingContext *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && (v2 << 7) - 128 + *((void *)this + 65)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3)
  {
    if ((v3 << 7) - 128 + *((void *)this + 66)) {
      return 0;
    }
  }
  if (*((void *)this + 134)) {
    return 0;
  }
  if (!*((void *)this + 147)) {
    return 1;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)this, v5);
    BOOL result = v6 == 0;
    if (v6) {
      break;
    }
    ++v5;
  }
  while (v5 < *((void *)this + 147));
  return result;
}

uint64_t re::PrimitiveRenderingContext::addPoint(uint64_t a1, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = *(void *)(a1 + 520) + (v4 << 7) - 128;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
  unsigned __int8 v13 = 2;
  __int16 v12 = 256;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  do
  {
    uint64_t v7 = *((unsigned __int8 *)&v12 + v6);
    *(&v14 + v6) = a1 + 40 * v7;
    v11[v6++] = *(unsigned char *)(a1 + v7 + 512);
  }
  while (v6 != 3);
  uint64_t v8 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>((unsigned __int8 *)&v12, (uint64_t)&v14, v11, 3, v4, *(void *)(a1 + 520), *(re **)(a1 + 1192));
  *(void *)(a1 + 520) = v8;
  if (v8 == 1)
  {
    if (v11[1]) {
      re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(*(void *)(v15 + 32) + 32 * *(void *)(v15 + 16) - 32, HIBYTE(v12));
    }
    if (v11[2]) {
      re::fill<float,re::PrimitiveRenderingAttribute>(*(void *)(v16 + 32) + 32 * *(void *)(v16 + 16) - 32, v13);
    }
  }
  uint64_t v9 = *(void *)(v14 + 32) + 32 * *(void *)(v14 + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v9 - 8), sel_contents)
            + 16 * *(void *)(a1 + 520)
            + *(void *)(v9 - 24)
            - 16) = *a2;
  return v5;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, char a6, re *a7)
{
  uint64_t v7 = a6 & 0x7F;
  if (a4)
  {
    uint64_t v9 = a4;
    uint64_t v11 = (_anonymous_namespace_ **)a2;
    do
    {
      int v14 = *a3++;
      int v13 = v14;
      if (!v7 && v13)
      {
        uint64_t v15 = *v11;
        uint64_t v16 = (const re::RenderManager *)re::attributeInfo(*a1, a2);
        re::allocate(a7, v16, v17, v19);
        re::DynamicArray<re::EvaluationRegister>::add(v15, (uint64_t)v19);
      }
      ++a1;
      ++v11;
      --v9;
    }
    while (v9);
  }
  return v7 + 1;
}

char *re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(a2, a2, (uint64_t)&v7);
  if (v8 != 3) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  long long v6 = v7;
  BOOL result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  uint64_t v4 = 0;
  uint64_t v5 = &result[*(void *)(a1 + 8)];
  do
  {
    *(_OWORD *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

char *re::fill<float,re::PrimitiveRenderingAttribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(a2, a2, (uint64_t)&v8);
  if (v9) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  int32x2_t v7 = (int32x2_t)v8;
  BOOL result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  uint64_t v4 = 0;
  uint64_t v5 = &result[*(void *)(a1 + 8)];
  int32x4_t v6 = vdupq_lane_s32(v7, 0);
  do
  {
    *(int32x4_t *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 512);
  return result;
}

uint64_t re::PrimitiveRenderingContext::addLine(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6) {
    uint64_t v7 = *(void *)(a1 + 528) + (v6 << 7) - 128;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  int v15 = 100992003;
  long long v16 = 0u;
  long long v17 = 0u;
  do
  {
    uint64_t v9 = *((unsigned __int8 *)&v15 + v8);
    *((void *)&v16 + vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a1 + 40 * v9;
    v14[v8++] = *(unsigned char *)(a1 + v9 + 512);
  }
  while (v8 != 4);
  uint64_t v10 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>((unsigned __int8 *)&v15, (uint64_t)&v16, v14, 4, v6, *(void *)(a1 + 528), *(re **)(a1 + 1192));
  *(void *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
  if (v10 == 1)
  {
    if (v14[2]) {
      re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(*(void *)(v17 + 32) + 32 * *(void *)(v17 + 16) - 32, BYTE2(v15));
    }
    if (v14[3]) {
      re::fill<float,re::PrimitiveRenderingAttribute>(*(void *)(*((void *)&v17 + 1) + 32) + 32 * *(void *)(*((void *)&v17 + 1) + 16) - 32, HIBYTE(v15));
    }
  }
  uint64_t v11 = *(void *)(v16 + 32) + 32 * *(void *)(v16 + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v11 - 8), sel_contents)
            + 16 * *(void *)(a1 + 528)
            + *(void *)(v11 - 24)
            - 16) = *a2;
  uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 32) + 32 * *(void *)(*((void *)&v16 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v12 - 8), sel_contents)
            + 16 * *(void *)(a1 + 528)
            + *(void *)(v12 - 24)
            - 16) = *a3;
  return v7;
}

void re::PrimitiveRenderingContext::buildMeshSceneOfPoints(uint64_t *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  v22[0] = a1[149];
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)v22, &v24);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v22, a1);
  *(void *)&long long v23 = v24;
  if (v24) {
    uint64_t v8 = (char *)v24 + 8;
  }
  *((void *)&v23 + 1) = a1;
  uint64_t v9 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v21, a1);
  uint64_t v10 = *(void *)(a1[149] + 104);
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 312);
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[65];
  uint64_t v13 = v10 + 16;
  int v14 = v24;
  uint64_t v15 = re::globalAllocators(v9)[2];
  uint64_t v29 = v15;
  uint64_t v30 = 0;
  if (v15) {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 64, 0);
  }
  else {
    uint64_t v16 = 0;
  }
  *(void *)uint64_t v16 = &unk_26E70E878;
  long long v17 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray(v16 + 8, v22);
  long long v18 = v23;
  *(void *)&long long v23 = 0;
  *(_OWORD *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v18;
  uint64_t v30 = v16;
  uint64_t v19 = re::globalAllocators(v17)[2];
  uint64_t v26 = v19;
  long long v27 = 0;
  if (v19) {
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v19 + 32))(v19, 48, 0);
  }
  else {
    uint64_t v20 = 0;
  }
  *uint64_t v20 = &unk_26E70E8D0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v20 + 1), v21);
  long long v27 = v20;
  re::PrimitiveRenderingContext::buildMeshScene(a4, (uint64_t)a1, a2, a3, v11, v12, v13, v14, (uint64_t)v28, (uint64_t)v25);
  re::FunctionBase<24ul,re::AABB ()(unsigned long,unsigned long)>::destroyCallable((uint64_t)v25);
  re::FunctionBase<24ul,void ()(unsigned long)>::destroyCallable((uint64_t)v28);
  if (v21[0] && v21[4]) {
    (*(void (**)(void))(*(void *)v21[0] + 40))();
  }
  if ((void)v23)
  {

    *(void *)&long long v23 = 0;
  }
  if (v22[0] && v22[4]) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  if (v24) {
}
  }

void re::PrimitiveRenderingContext::buildMeshSceneOfLines(void *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 15;
  uint64_t v8 = a1 + 20;
  v24[0] = a1[149];
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)v24, &v30);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v24, v7);
  uint64_t v25 = v30;
  if (v30) {
    uint64_t v9 = (char *)v30 + 8;
  }
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v26, v8);
  uint64_t v29 = a1;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v20, v7);
  uint64_t v10 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v21, v8);
  uint64_t v11 = *(void *)(a1[149] + 104);
  if (v11) {
    uint64_t v11 = *(void *)(v11 + 312);
  }
  uint64_t v12 = a1[17];
  uint64_t v13 = a1[66];
  uint64_t v14 = v11 + 112;
  uint64_t v15 = v30;
  uint64_t v16 = (void *)re::globalAllocators(v10)[2];
  long long v35 = v16;
  if (v16) {
    uint64_t v16 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*v16 + 32))(v16, 104, 0);
  }
  uint64_t v36 = (re *)re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(v16, v24);
  uint64_t v17 = re::globalAllocators(v36)[2];
  uint64_t v32 = v17;
  int v33 = 0;
  if (v17) {
    long long v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 32))(v17, 88, 0);
  }
  else {
    long long v18 = 0;
  }
  void *v18 = &unk_26E70E980;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v18 + 1), v20);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v18 + 6), v21);
  int v33 = v18;
  re::PrimitiveRenderingContext::buildMeshScene(a4, (uint64_t)a1, a2, a3, v12, v13, v14, v15, (uint64_t)v34, (uint64_t)v31);
  re::FunctionBase<24ul,re::AABB ()(unsigned long,unsigned long)>::destroyCallable((uint64_t)v31);
  re::FunctionBase<24ul,void ()(unsigned long)>::destroyCallable((uint64_t)v34);
  if (v21[0])
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v21[0] + 40))();
    }
    uint64_t v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v20[0] && v20[4]) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  if (v26[0])
  {
    if (v28) {
      (*(void (**)(void))(*(void *)v26[0] + 40))();
    }
    uint64_t v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v25)
  {

    uint64_t v25 = 0;
  }
  if (v24[0] && v24[4]) {
    (*(void (**)(void))(*(void *)v24[0] + 40))();
  }
  if (v30) {
}
  }

void re::PrimitiveRenderingContext::buildMeshSceneOfShapes(void *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, re::MaterialParameterBlock *a4@<X8>)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  if (a1[147])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)a1, v7)) {
        ++v6;
      }
      ++v7;
    }
    while (v7 < a1[147]);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *((void *)a4 + 4) = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v8 = (uint64_t *)((char *)a4 + 8);
  *((void *)a4 + 2) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *(void *)a4 = a2;
  re::DynamicArray<re::MeshScene>::setCapacity(a4, 0);
  ++*((_DWORD *)a4 + 6);
  bzero(&v97, 0x290uLL);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    goto LABEL_96;
  }
  while (1)
  {
    *((void *)&v122 + 1) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&long long v123 = _D0;
    DWORD2(v12re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1065353216;
    long long v124 = 0u;
    memset(v125, 0, 19);
    *(void *)&v125[20] = 0xFFFFFFFF00000001;
    *(void *)&long long v14 = 0x7F0000007FLL;
    *((void *)&v14 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)&v125[40] = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)&v125[56] = v14;
    *(void *)&v125[72] = 0;
    unsigned __int8 v126 = 0;
    uint64_t v129 = 0;
    unsigned __int8 v130 = 0;
    uint64_t v135 = 0x10100010001;
    unint64_t v15 = *((void *)a4 + 2);
    float32x4_t v80 = a4;
    if (v15 >= v6)
    {
      if (v15 <= v6) {
        goto LABEL_30;
      }
      uint64_t v47 = 656 * v6 + 256;
      unint64_t v48 = v6;
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(*((void *)a4 + 4) + v47);
        ++v48;
        v47 += 656;
      }
      while (v48 < *((void *)a4 + 2));
LABEL_29:
      *((void *)a4 + 2) = v6;
      ++*((_DWORD *)a4 + 6);
      goto LABEL_30;
    }
    if (*v8 < v6)
    {
      re::DynamicArray<re::MeshScene>::setCapacity(a4, v6);
      unint64_t v15 = *((void *)a4 + 2);
    }
    if (v15 >= v6) {
      goto LABEL_29;
    }
    uint64_t v16 = 656 * v15;
    do
    {
      uint64_t v17 = *((void *)a4 + 4);
      uint64_t v18 = v17 + v16;
      long long v19 = v97;
      long long v20 = v98;
      long long v21 = v100;
      *(_OWORD *)(v18 + 32) = v99;
      *(_OWORD *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v21;
      long long v22 = v104;
      long long v24 = v101;
      long long v23 = v102;
      *(_OWORD *)(v18 + 96) = v103;
      *(_OWORD *)(v18 + 112) = v22;
      *(_OWORD *)(v18 + 64) = v24;
      *(_OWORD *)(v18 + 80) = v23;
      long long v25 = v108;
      long long v27 = v105;
      long long v26 = v106;
      *(_OWORD *)(v18 + 160) = v107;
      *(_OWORD *)(v18 + 176) = v25;
      *(_OWORD *)(v18 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v27;
      *(_OWORD *)(v18 + 144) = v26;
      long long v28 = v112;
      long long v30 = v109;
      long long v29 = v110;
      *(_OWORD *)(v18 + 224) = v111;
      *(_OWORD *)(v18 + 240) = v28;
      *(_OWORD *)(v18 + 192) = v30;
      *(_OWORD *)(v18 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v29;
      *(_OWORD *)uint64_t v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(v17 + v16 + 256, (uint64_t *)&v113);
      *(_DWORD *)(v18 + 320) = v118;
      int v31 = v119;
      *(unsigned char *)(v18 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v119;
      if (v31) {
        *(void *)(v18 + 336) = v120;
      }
      *(_OWORD *)(v18 + 344) = v121;
      long long v32 = v122;
      long long v33 = v123;
      long long v34 = *(_OWORD *)v125;
      *(_OWORD *)(v18 + 392) = v124;
      *(_OWORD *)(v18 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v34;
      *(_OWORD *)(v18 + 360) = v32;
      *(_OWORD *)(v18 + 376) = v33;
      long long v35 = *(_OWORD *)&v125[16];
      long long v36 = *(_OWORD *)&v125[32];
      long long v37 = *(_OWORD *)&v125[64];
      *(_OWORD *)(v18 + 456) = *(_OWORD *)&v125[48];
      *(_OWORD *)(v18 + 472) = v37;
      *(_OWORD *)(v18 + 424) = v35;
      *(_OWORD *)(v18 + 440) = v36;
      int v38 = v126;
      *(unsigned char *)(v18 + 496) = v126;
      if (v38)
      {
        uint64_t v39 = v17 + v16;
        long long v40 = v128;
        *(_OWORD *)(v39 + 512) = v127;
        *(_OWORD *)(v39 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v40;
      }
      uint64_t v41 = v17 + v16;
      *(void *)(v41 + 544) = v129;
      int v42 = v130;
      *(unsigned char *)(v41 + 560) = v130;
      if (v42)
      {
        long long v43 = v131;
        long long v44 = v132;
        long long v45 = v134;
        *(_OWORD *)(v41 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v133;
        *(_OWORD *)(v41 + 624) = v45;
        *(_OWORD *)(v41 + 576) = v43;
        *(_OWORD *)(v41 + 592) = v44;
      }
      *(void *)(v41 + 640) = v135;
      ++v15;
      v16 += 656;
      a4 = v80;
    }
    while (v6 != v15);
    uint64_t v46 = v117;
    *((void *)v80 + 2) = v6;
    ++*((_DWORD *)v80 + 6);
    if (v46)
    {
      if (*((void *)&v113 + 1)) {
        *((void *)&v113 + 1) = 0;
      }
      if ((void)v113) {
        (*(void (**)(uint64_t))(*(void *)v46 + 40))(v46);
      }
    }
LABEL_30:
    uint64_t v49 = *(void *)(a1[149] + 104);
    uint64_t v50 = v49 ? *(void *)(v49 + 312) : 0;
    if (!a1[147]) {
      break;
    }
    uint64_t v51 = 0;
    unint64_t v6 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      if (!re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)a1, v6)) {
        goto LABEL_91;
      }
      uint64_t Attribute = (uint64_t *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>((uint64_t)a1, v6, 0);
      id v53 = (uint64_t *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>((uint64_t)a1, v6, 1u);
      *(void *)&long long v97 = a1[149];
      re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v97, &v89);
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v82, Attribute);
      long long v83 = v89;
      if (v89) {
        id v54 = (char *)v89 + 8;
      }
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v84, v53);
      long long v87 = a1;
      unint64_t v88 = v6;
      uint64_t v55 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v81, Attribute);
      unint64_t v56 = a1[129];
      if (v56 <= v6) {
        break;
      }
      unint64_t v56 = *(void *)(v50 + 224);
      if (v56 <= v6) {
        goto LABEL_94;
      }
      uint64_t v57 = Attribute[2];
      uint64_t v58 = *(void *)(a1[131] + 8 * v6);
      uint64_t v59 = v50;
      uint64_t v60 = *(void *)(v50 + 240);
      a4 = v89;
      uint64_t v61 = re::globalAllocators(v55)[2];
      uint64_t v95 = v61;
      uint64_t v96 = 0;
      if (v61) {
        uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 112, 0);
      }
      uint64_t v96 = (re *)re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(v61, (uint64_t)v82);
      uint64_t v62 = re::globalAllocators(v96)[2];
      uint64_t v92 = v62;
      long long v93 = 0;
      if (v62) {
        long long v63 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v62 + 32))(v62, 48, 0);
      }
      else {
        long long v63 = 0;
      }
      *long long v63 = &unk_26E70EA30;
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v63 + 1), v81);
      long long v93 = v63;
      re::PrimitiveRenderingContext::buildMeshScene((uint64_t)&v97, (uint64_t)a1, a2, a3, v57, v58, v60 + v51, a4, (uint64_t)v94, (uint64_t)v91);
      uint64_t Attribute = (uint64_t *)*((void *)v80 + 2);
      if (Attribute <= v8) {
        goto LABEL_95;
      }
      uint64_t v64 = *((void *)v80 + 4);
      uint64_t v65 = v64 + 656 * (void)v8;
      *(_OWORD *)(v65 + 192) = v109;
      *(_OWORD *)(v65 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v110;
      *(_OWORD *)(v65 + 224) = v111;
      *(_OWORD *)(v65 + 240) = v112;
      *(_OWORD *)(v65 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v105;
      *(_OWORD *)(v65 + 144) = v106;
      *(_OWORD *)(v65 + 160) = v107;
      *(_OWORD *)(v65 + 176) = v108;
      *(_OWORD *)(v65 + 64) = v101;
      *(_OWORD *)(v65 + 80) = v102;
      *(_OWORD *)(v65 + 96) = v103;
      *(_OWORD *)(v65 + 112) = v104;
      *(_OWORD *)uint64_t v65 = v97;
      *(_OWORD *)(v65 + 16) = v98;
      *(_OWORD *)(v65 + 32) = v99;
      *(_OWORD *)(v65 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v100;
      uint64_t v66 = *(void *)(v65 + 312);
      *(void *)(v65 + 312) = v117;
      uint64_t v117 = v66;
      long long v67 = *(_OWORD *)(v65 + 256);
      *(_OWORD *)(v65 + 256) = v113;
      long long v113 = v67;
      uint64_t v68 = *(void *)(v65 + 304);
      *(void *)(v65 + 304) = v116;
      uint64_t v116 = v68;
      long long v69 = *(_OWORD *)(v65 + 272);
      *(_OWORD *)(v65 + 272) = v114;
      long long v114 = v69;
      long long v70 = *(_OWORD *)(v65 + 288);
      *(_OWORD *)(v65 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v115;
      long long v115 = v70;
      *(_DWORD *)(v65 + 320) = v118;
      int v71 = *(unsigned __int8 *)(v65 + 328);
      uint64_t v50 = v59;
      if (*(unsigned char *)(v65 + 328) || v119)
      {
        uint64_t v72 = (unsigned char *)(v65 + 328);
        if (!v71 || v119)
        {
          if (!v71 && v119) {
            *uint64_t v72 = 1;
          }
          *(void *)(v64 + 656 * (void)v8 + 336) = v120;
        }
        else
        {
          *uint64_t v72 = 0;
        }
      }
      uint64_t v73 = v64 + 656 * (void)v8;
      *(_OWORD *)(v73 + 344) = v121;
      *(_OWORD *)(v73 + 360) = v122;
      *(_OWORD *)(v73 + 376) = v123;
      *(_OWORD *)(v73 + 392) = v124;
      *(void *)(v73 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)v125;
      *(_OWORD *)(v73 + 432) = *(_OWORD *)&v125[24];
      *(_OWORD *)(v73 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_OWORD *)&v125[40];
      *(_OWORD *)(v73 + 464) = *(_OWORD *)&v125[56];
      *(void *)(v73 + 480) = *(void *)&v125[72];
      *(_OWORD *)(v73 + 416) = *(_OWORD *)&v125[8];
      int v74 = *(unsigned __int8 *)(v73 + 496);
      if (*(unsigned char *)(v73 + 496) || v126)
      {
        uint64_t v75 = (unsigned char *)(v73 + 496);
        if (!v74 || v126)
        {
          if (!v74 && v126) {
            *uint64_t v75 = 1;
          }
          *(_OWORD *)(v64 + 656 * (void)v8 + 512) = v127;
          *(_OWORD *)(v64 + 656 * (void)v8 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v128;
        }
        else
        {
          *uint64_t v75 = 0;
        }
      }
      uint64_t v76 = v64 + 656 * (void)v8;
      *(void *)(v76 + 544) = v129;
      if (*(unsigned char *)(v76 + 560) || v130)
      {
        uint64_t v77 = (unsigned char *)(v76 + 560);
        if (!*(unsigned char *)(v76 + 560) || v130)
        {
          if (!*(unsigned char *)(v76 + 560) && v130) {
            *uint64_t v77 = 1;
          }
          *(_OWORD *)(v64 + 656 * (void)v8 + 576) = v131;
          *(_OWORD *)(v64 + 656 * (void)v8 + 592) = v132;
          *(_OWORD *)(v64 + 656 * (void)v8 + 60re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v133;
          *(_OWORD *)(v64 + 656 * (void)v8 + 624) = v134;
        }
        else
        {
          *uint64_t v77 = 0;
        }
      }
      *(void *)(v64 + 656 * (void)v8 + 640) = v135;
      if (v66 && (void)v67) {
        (*(void (**)(uint64_t))(*(void *)v66 + 40))(v66);
      }
      re::FunctionBase<24ul,re::AABB ()(unsigned long,unsigned long)>::destroyCallable((uint64_t)v91);
      re::FunctionBase<24ul,void ()(unsigned long)>::destroyCallable((uint64_t)v94);
      if (v81[0] && v81[4]) {
        (*(void (**)(void))(*(void *)v81[0] + 40))();
      }
      if (v84[0])
      {
        if (v86) {
          (*(void (**)(void))(*(void *)v84[0] + 40))();
        }
        uint64_t v86 = 0;
        memset(v84, 0, sizeof(v84));
        ++v85;
      }
      if (v83)
      {

        long long v83 = 0;
      }
      if (v82[0] && v82[4]) {
        (*(void (**)(void))(*(void *)v82[0] + 40))();
      }
      if (v89) {

      }
      uint64_t v8 = (uint64_t *)((char *)v8 + 1);
LABEL_91:
      ++v6;
      v51 += 96;
      if (v6 >= a1[147]) {
        return;
      }
    }
    uint64_t v90 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v144 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v136 = 136315906;
    uint64_t v137 = "operator[]";
    __int16 v138 = 1024;
    int v139 = 797;
    __int16 v140 = 2048;
    uint64_t v141 = (uint64_t *)v6;
    __int16 v142 = 2048;
    id v143 = (uint64_t *)v56;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    uint64_t v90 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v144 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v136 = 136315906;
    uint64_t v137 = "operator[]";
    __int16 v138 = 1024;
    int v139 = 797;
    __int16 v140 = 2048;
    uint64_t v141 = (uint64_t *)v6;
    __int16 v142 = 2048;
    id v143 = (uint64_t *)v56;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    uint64_t v90 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v144 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v136 = 136315906;
    uint64_t v137 = "operator[]";
    __int16 v138 = 1024;
    int v139 = 789;
    __int16 v140 = 2048;
    uint64_t v141 = v8;
    __int16 v142 = 2048;
    id v143 = Attribute;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
}

void re::PrimitiveRenderingContext::buildMeshSceneOfMeshes(uint64_t a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v91 = a3;
  uint64_t v5 = 0;
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v105 = 0;
  long long v106 = "";
  v6.i64[0] = 0x7F0000007FLL;
  v6.i64[1] = 0x7F0000007FLL;
  float32x4_t v107 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  float32x4_t v108 = v6;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  do
  {
    unint64_t v7 = (char *)&v105 + v5;
    *((void *)v7 + 12) = 0;
    *((void *)v7 + 16) = 0;
    v5 += 40;
  }
  while (v5 != 720);
  re::StringID::destroyString((re::StringID *)&v105);
  uint64_t v105 = 0x4B61EB17F5807C1ALL;
  long long v106 = "PrimitiveRendering Mesh Instance";
  unint64_t v8 = *(void *)(a1 + 1072);
  uint64_t v9 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(a1 + 1192));
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 24, 8);
  v10[1] = 0;
  v10[2] = 0;
  uint64_t *v10 = 0;
  long long v93 = v10;
  re::FixedArray<unsigned long>::init<>(v10, v9, v8);
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 24, 8);
  v11[1] = 0;
  uint64_t v11[2] = 0;
  *uint64_t v11 = 0;
  uint64_t v92 = v11;
  re::FixedArray<unsigned long>::init<>(v11, v9, v8);
  *(void *)&long long buf = *(void *)(a1 + 1192);
  uint64_t v13 = re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&buf, &v104);
  uint64_t v101 = 0;
  long long v102 = 0;
  long long v103 = 0;
  *(void *)&long long v95 = v8;
  *(void *)&long long v96 = a1;
  uint64_t v15 = *(void *)(a1 + 1152);
  if (v15)
  {
    uint64_t v16 = *(unint64_t **)(a1 + 1168);
    uint64_t v17 = &v16[2 * v15];
    do
    {
      uint64_t v18 = v104;
      unint64_t v19 = *v16;
      uint64_t v20 = v16[1];
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      long long v14 = (_anonymous_namespace_ *)re::MaterialParameterBlock::addPassTechniqueMapping(v18, v19, v20, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      v16 += 2;
    }
    while (v16 != v17);
  }
  long long v21 = (void *)v96;
  if ((void)v95)
  {
    unint64_t v22 = 0;
    long long v90 = xmmword_23435FD50;
    while (1)
    {
      long long v23 = (void *)v21[134];
      if ((unint64_t)v23 <= v22) {
        goto LABEL_63;
      }
      uint64_t v24 = v21[136] + 96 * v22;
      uint64_t v25 = *(void *)(v24 + 16);
      if (v25)
      {
        unint64_t v26 = 0;
        uint64_t v27 = v25 << 6;
        long long v28 = (unsigned __int8 *)(*(void *)(v24 + 32) + 16);
        do
        {
          unsigned int v29 = *v28;
          v28 += 64;
          v26 += v29;
          v27 -= 64;
        }
        while (v27);
      }
      else
      {
        unint64_t v26 = 0;
      }
      long long v30 = v104;
      uint64_t v98 = 0;
      long long v99 = 0;
      uint64_t v100 = 0;
      uint64_t v32 = *(void *)(v24 + 16);
      if (v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        uint64_t v35 = *(void *)(v24 + 32);
        uint64_t v36 = v32 << 6;
        do
        {
          uint64_t v37 = v35 + v33;
          if (*(unsigned char *)(v35 + v33 + 16))
          {
            BOOL v38 = re::StringID::operator==((void *)(v35 + v33), re::MeshAttributeNames::kIndexTriangles);
            BOOL v39 = !v38;
            long long v40 = *(const char **)(v37 + 8);
            LOBYTE(v136[4]) = *(unsigned char *)(v37 + 18);
            BYTE1(v136[4]) = v39;
            v136[5] = *(id *)(v37 + 24);
            LODWORD(v13re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
            DWORD1(v13re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = objc_msgSend(*(id *)(v37 + 24), sel_length);
            *((void *)&v137 + 1) = 0xFFFFFFFF00000000;
            long long v23 = v99;
            if ((unint64_t)v99 <= v34)
            {
              uint64_t v116 = 0;
              long long v122 = 0u;
              long long v123 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long buf = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v117 = 136315906;
              *(void *)&v117[4] = "operator[]";
              *(_WORD *)&v117[12] = 1024;
              *(_DWORD *)&v117[14] = 468;
              *(_WORD *)&v117[18] = 2048;
              *(void *)&v117[20] = v34;
              *(_WORD *)&v117[28] = 2048;
              *(void *)&v117[30] = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_63:
              *(void *)uint64_t v117 = 0;
              long long v122 = 0u;
              long long v123 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long buf = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v136[0]) = 136315906;
              *(const void **)((char *)v136 + 4) = "operator[]";
              WORD2(v136[1]) = 1024;
              *(_DWORD *)((char *)&v136[1] + 6) = 797;
              WORD1(v136[2]) = 2048;
              *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
              WORD2(v136[3]) = 2048;
              *(const void **)((char *)&v136[3] + 6) = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_64:
              *(void *)uint64_t v117 = 0;
              long long v122 = 0u;
              long long v123 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long buf = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v136[0]) = 136315906;
              *(const void **)((char *)v136 + 4) = "operator[]";
              WORD2(v136[1]) = 1024;
              *(_DWORD *)((char *)&v136[1] + 6) = 797;
              WORD1(v136[2]) = 2048;
              *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
              WORD2(v136[3]) = 2048;
              *(const void **)((char *)&v136[3] + 6) = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_65;
            }
            uint64_t v41 = v100 + (v34 << 6);
            re::DynamicString::operator=((re::DynamicString *)v41, (re::DynamicString *)v136);
            *(_WORD *)(v41 + 32) = v136[4];
            NS::SharedPtr<MTL::Texture>::operator=((void **)(v41 + 40), (void **)&v136[5]);
            *(_OWORD *)(v41 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v137;
            if (v136[5])
            {

              v136[5] = 0;
            }
            int v31 = (re *)v136[0];
            if (v136[0] && ((uint64_t)v136[1] & 1) != 0) {
              int v31 = (re *)(*(uint64_t (**)(void))(*(void *)v136[0] + 40))();
            }
            ++v34;
          }
          else if (*(unsigned char *)(v37 + 17))
          {
            switch(*(unsigned char *)(v35 + v33 + 18))
            {
              case 0x1C:
                uint64_t v42 = v35 + v33;
                if (*(_DWORD *)(v35 + v33 + 48)) {
                  goto LABEL_72;
                }
                long long v43 = (const void *)(*(void *)v42 >> 1);
                *(_DWORD *)uint64_t v117 = *(_DWORD *)(v42 + 32);
                v136[0] = v43;
                long long v44 = (uint64_t *)v136;
                long long v45 = (const void **)v117;
                uint64_t v46 = v30;
                size_t v47 = 4;
                uint64_t v48 = 1;
                goto LABEL_41;
              case 0x1D:
                uint64_t v56 = v35 + v33;
                if (*(_DWORD *)(v35 + v33 + 48) != 1) {
                  goto LABEL_72;
                }
                uint64_t v57 = *(void *)v56 >> 1;
                v136[0] = *(const void **)(v56 + 32);
                *(void *)uint64_t v117 = v57;
                long long v44 = (uint64_t *)v117;
                long long v45 = v136;
                uint64_t v46 = v30;
                size_t v47 = 8;
                uint64_t v48 = 32;
                goto LABEL_41;
              case 0x1E:
                uint64_t v50 = (void *)(v35 + v33);
                if (*(_DWORD *)(v35 + v33 + 48) != 2) {
                  goto LABEL_72;
                }
                uint64_t v51 = *v50 >> 1;
                id v53 = (const void *)v50[4];
                int v52 = (const void *)v50[5];
                v136[0] = v53;
                v136[1] = v52;
                *(void *)uint64_t v117 = v51;
                long long v44 = (uint64_t *)v117;
                long long v45 = v136;
                uint64_t v46 = v30;
                size_t v47 = 16;
                uint64_t v48 = 33;
                goto LABEL_41;
              case 0x1F:
                uint64_t v58 = (void *)(v35 + v33);
                if (*(_DWORD *)(v35 + v33 + 48) != 3) {
LABEL_72:
                }
                  std::__throw_bad_variant_access[abi:nn180100]();
                uint64_t v59 = *v58 >> 1;
                uint64_t v61 = (const void *)v58[4];
                uint64_t v60 = (const void *)v58[5];
                v136[0] = v61;
                v136[1] = v60;
                *(void *)uint64_t v117 = v59;
                long long v44 = (uint64_t *)v117;
                long long v45 = v136;
                uint64_t v46 = v30;
                size_t v47 = 16;
                uint64_t v48 = 34;
LABEL_41:
                re::MaterialParameterBlock::setConstant(v46, v44, v47, v45, v48, (uint64_t)&buf);
                break;
              default:
                id v54 = *re::graphicsLogObjects(v31);
                int v31 = (re *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
                if (v31)
                {
                  int v55 = *(unsigned __int8 *)(v35 + v33 + 18);
                  LODWORD(buf) = 67109120;
                  DWORD1(buf) = v55;
                  _os_log_impl(&dword_233120000, v54, OS_LOG_TYPE_DEFAULT, "Format %d is not supported in PrimitiveRenderer", (uint8_t *)&buf, 8u);
                }
                break;
            }
          }
          else
          {
            uint64_t v115 = *(void *)(v35 + v33) >> 1;
            id v49 = *(id *)(v35 + v33 + 24);
            id v112 = v49;
            int v113 = 0;
            unsigned int v114 = objc_msgSend(*(id *)(v35 + v33 + 24), sel_length);
            re::MaterialParameterBlock::setBuffer(v30, &v115, (uint64_t)&v112, (uint64_t)v129);
            *(void *)uint64_t v129 = 0;
            if (v49)
            {

              id v112 = 0;
            }
            uint64_t v115 = 0;
          }
          v33 += 64;
        }
        while (v36 != v33);
      }
      long long v21 = (void *)v96;
      long long v23 = *(void **)(v96 + 1072);
      if ((unint64_t)v23 <= v22) {
        goto LABEL_64;
      }
      long long v23 = v102;
      if ((unint64_t)v102 <= v22) {
        break;
      }
      uint64_t v62 = *(void *)(v96 + 1088) + 96 * v22;
      long long v63 = &v103[32 * v22];
      long long v64 = *(_OWORD *)(v62 + 64);
      *(_OWORD *)long long v63 = *(_OWORD *)(v62 + 48);
      *((_OWORD *)v63 + 1) = v64;
      long long v23 = *(void **)(v96 + 1072);
      if ((unint64_t)v23 <= v22) {
        goto LABEL_66;
      }
      uint64_t v65 = *(void *)(v96 + 1088) + 96 * v22;
      float32x4_t v66 = *(float32x4_t *)(v65 + 48);
      v65 += 48;
      float32x4_t v67 = v66;
      float32x4_t v68 = v107;
      float32x4_t v69 = v108;
      v68.i32[3] = 0;
      v67.i32[3] = 0;
      float32x4_t v107 = vminnmq_f32(v68, v67);
      float32x4_t v70 = *(float32x4_t *)(v65 + 16);
      v69.i32[3] = 0;
      v70.i32[3] = 0;
      float32x4_t v108 = vmaxnmq_f32(v69, v70);
      v97[0] = 0x4B61EB17F5807C1ALL;
      v97[1] = (uint64_t)"PrimitiveRendering Mesh Instance";
      int v71 = *(_DWORD *)(v65 + 40);
      int v72 = *(_DWORD *)(v65 + 32);
      *(_OWORD *)uint64_t v117 = xmmword_23435FD50;
      *(_OWORD *)&v117[16] = xmmword_23435FD60;
      *(_OWORD *)&v117[32] = xmmword_23435FD80;
      long long v118 = xmmword_23435FBB0;
      WORD2(v116) = 0;
      LODWORD(v116) = 0;
      re::MeshPart::MeshPart((uint64_t)&buf, v97, v22, v100, (unint64_t)v99, v71, v72, 1, (_OWORD *)v65, v22, (long long *)v117, (re::MeshPartFlags *)&v116, -1, 0);
      long long v23 = (void *)*((void *)&v109 + 1);
      if (*((void *)&v109 + 1) <= v22) {
        goto LABEL_67;
      }
      re::MeshPart::operator=((uint64_t *)(v110 + 560 * v22), (uint64_t *)&buf);
      re::StringID::destroyString((re::StringID *)&v128);
      re::FixedArray<re::StringID>::deinit(v127);
      re::AttributeTable::~AttributeTable((re::AttributeTable *)&buf);
      re::StringID::destroyString((re::StringID *)v97);
      long long v23 = (void *)*((void *)&v109 + 1);
      if (*((void *)&v109 + 1) <= v22) {
        goto LABEL_68;
      }
      *(unsigned char *)(v110 + 560 * v22 + 536) = 3;
      uint64_t v73 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v104, a2);
      long long v23 = (void *)v93[1];
      if ((unint64_t)v23 <= v22) {
        goto LABEL_69;
      }
      *(void *)(v93[2] + 8 * v22) = v73;
      long long v23 = (void *)v92[1];
      if ((unint64_t)v23 <= v22) {
        goto LABEL_70;
      }
      *(void *)(v92[2] + 8 * v22) = v91;
      long long v14 = (_anonymous_namespace_ *)re::FixedArray<re::NamedVertexBuffer>::deinit(&v98);
      if (++v22 == (void)v95) {
        goto LABEL_51;
      }
    }
LABEL_65:
    *(void *)uint64_t v117 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v136[0]) = 136315906;
    *(const void **)((char *)v136 + 4) = "operator[]";
    WORD2(v136[1]) = 1024;
    *(_DWORD *)((char *)&v136[1] + 6) = 468;
    WORD1(v136[2]) = 2048;
    *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
    WORD2(v136[3]) = 2048;
    *(const void **)((char *)&v136[3] + 6) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    *(void *)uint64_t v117 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v136[0]) = 136315906;
    *(const void **)((char *)v136 + 4) = "operator[]";
    WORD2(v136[1]) = 1024;
    *(_DWORD *)((char *)&v136[1] + 6) = 797;
    WORD1(v136[2]) = 2048;
    *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
    WORD2(v136[3]) = 2048;
    *(const void **)((char *)&v136[3] + 6) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    id v112 = 0;
    long long v137 = 0u;
    long long v138 = 0u;
    memset(v136, 0, sizeof(v136));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v129 = 136315906;
    *(void *)&v129[4] = "operator[]";
    __int16 v130 = 1024;
    int v131 = 468;
    __int16 v132 = 2048;
    unint64_t v133 = v22;
    __int16 v134 = 2048;
    uint64_t v135 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    *(void *)uint64_t v117 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v136[0]) = 136315906;
    *(const void **)((char *)v136 + 4) = "operator[]";
    WORD2(v136[1]) = 1024;
    *(_DWORD *)((char *)&v136[1] + 6) = 468;
    WORD1(v136[2]) = 2048;
    *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
    WORD2(v136[3]) = 2048;
    *(const void **)((char *)&v136[3] + 6) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    *(void *)uint64_t v117 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v136[0]) = 136315906;
    *(const void **)((char *)v136 + 4) = "operator[]";
    WORD2(v136[1]) = 1024;
    *(_DWORD *)((char *)&v136[1] + 6) = 468;
    WORD1(v136[2]) = 2048;
    *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
    WORD2(v136[3]) = 2048;
    *(const void **)((char *)&v136[3] + 6) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    *(void *)uint64_t v117 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v136[0]) = 136315906;
    *(const void **)((char *)v136 + 4) = "operator[]";
    WORD2(v136[1]) = 1024;
    *(_DWORD *)((char *)&v136[1] + 6) = 468;
    WORD1(v136[2]) = 2048;
    *(const void **)((char *)&v136[2] + 4) = (const void *)v22;
    WORD2(v136[3]) = 2048;
    *(const void **)((char *)&v136[3] + 6) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else
  {
LABEL_51:
    unint64_t v74 = re::DataArray<re::MeshModel>::create<re::MeshModel>(*(void *)(v21[149] + 32) + 8, &v105);
    re::MeshManager::destroyModel(*(void *)(v21[149] + 32), v74);
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = "";
    BYTE8(v120) = 0;
    HIDWORD(v120) = 1065353216;
    long long v125 = 0u;
    memset(v126, 0, 32);
    *(void *)&long long v120 = v74;
    long long v95 = xmmword_23435FD60;
    long long v96 = xmmword_23435FD50;
    long long v121 = xmmword_23435FD50;
    long long v122 = xmmword_23435FD60;
    long long v90 = xmmword_23435FBB0;
    long long v91 = xmmword_23435FD80;
    long long v123 = xmmword_23435FD80;
    long long v124 = xmmword_23435FBB0;
    *(void *)uint64_t v117 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(*(void *)(v21[149] + 32) + 72, (uint64_t)&buf);
    re::MeshManager::destroyInstance(*(void *)(v21[149] + 32), *(uint64_t *)v117);
    long long v23 = (void *)a4;
    *(_OWORD *)(a4 + 200) = 0u;
    *(unsigned char *)(a4 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(a4 + 344) = 0;
    *(_OWORD *)(a4 + 352) = 0u;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_OWORD *)(a4 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(unsigned char *)(a4 + 176) = 0;
    *(_OWORD *)(a4 + 216) = 0u;
    *(_OWORD *)(a4 + 232) = 0u;
    *(_OWORD *)(a4 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(a4 + 264) = 0u;
    *(_OWORD *)(a4 + 280) = 0u;
    *(_OWORD *)(a4 + 296) = 0u;
    *(_OWORD *)(a4 + 30re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once == -1) {
      goto LABEL_52;
    }
  }
  dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
LABEL_52:
  v23[46] = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  __asm { FMOV            V0.2S, #1.0 }
  v23[47] = _D0;
  *((_DWORD *)v23 + 96) = 1065353216;
  *(_OWORD *)(v23 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *(_OWORD *)(v23 + 51) = 0u;
  *(_DWORD *)((char *)v23 + 42re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *(void *)((char *)v23 + 42re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0xFFFFFFFF00000001;
  *((unsigned char *)v23 + 496) = 0;
  v23[68] = 0;
  *((unsigned char *)v23 + 560) = 0;
  v23[80] = 0x10100010001;
  float32x4_t v80 = a2;
  float32x4_t v81 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24, 8);
  v81[1] = 0;
  v81[2] = 0;
  *float32x4_t v81 = 0;
  re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(v81, (uint64_t)a2, v117);
  uint64_t v82 = v81[1];
  void *v23 = v81[2];
  v23[1] = v82;
  v136[0] = &v107;
  v136[1] = (const void *)1;
  uint64_t v83 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v80 + 32))(v80, 72, 8);
  v23[3] = re::MeshBoundingBoxes::MeshBoundingBoxes(v83, (uint64_t)a2, v136, 1);
  v136[0] = v103;
  v136[1] = v102;
  uint64_t v84 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v80 + 32))(v80, 72, 8);
  uint64_t v85 = re::MeshBoundingBoxes::MeshBoundingBoxes(v84, (uint64_t)a2, v136, 1);
  v23[4] = v85;
  float32x4_t v86 = v108;
  *((float32x4_t *)v23 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v107;
  *((float32x4_t *)v23 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v86;
  v23[60] = v85;
  *((_OWORD *)v23 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v96;
  *((_OWORD *)v23 + 4) = v95;
  *((_OWORD *)v23 + 5) = v91;
  *((_OWORD *)v23 + 6) = v90;
  uint64_t v87 = v93[1];
  v23[23] = v93[2];
  v23[24] = v87;
  uint64_t v88 = v92[1];
  v23[14] = v92[2];
  v23[15] = v88;
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit(&v126[1]);
  if ((void)v125)
  {
    if (*((void *)&v125 + 1))
    {
      (*(void (**)(void, void))(*(void *)v125 + 40))(v125, v126[0]);
      *((void *)&v125 + 1) = 0;
      v126[0] = 0;
    }
    *(void *)&long long v125 = 0;
  }
  re::StringID::destroyString((re::StringID *)&buf);
  if (v101 && v102) {
    (*(void (**)(uint64_t, char *))(*(void *)v101 + 40))(v101, v103);
  }
  if (v104) {

  }
  re::MeshModel::~MeshModel((re::MeshModel *)&v105);
}

void re::populateAttribute<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  isuint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(a1, a2, 2u);
  uint64_t v13 = *a4;
  v30[0] = isAttribute ^ 1;
  *(void *)&long long v35 = v13;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)&v35, 1uLL, v30, 2, (uint64_t)v28);
  v28[0] = 0;
  if ((isAttribute & 1) == 0)
  {
    a6 = *(void *)(a1 + 792);
    if (a6 > v10)
    {
      uint64_t v20 = *(void *)(a1 + 808) + 32 * v10;
      if (*(_DWORD *)(v20 + 16) == 2)
      {
        uint64_t v22 = *(void *)v20;
        uint64_t v21 = *(void *)(v20 + 8);
        uint64_t v23 = *a3;
        *(void *)long long v30 = v22;
        *(void *)&v30[8] = v21;
        uint64_t v29 = v23;
        re::MaterialParameterBlock::setConstant(a5, &v29, 0x10uLL, v30, 33, (uint64_t)&v35);
      }
      else
      {
        uint64_t v24 = std::__throw_bad_variant_access[abi:nn180100]();
        re::populateAttribute<re::Vector4<float>,unsigned long>(v24);
      }
      return;
    }
LABEL_12:
    uint64_t v29 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    __int16 v33 = 2048;
    unint64_t v34 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, v10, 2u);
  unint64_t v10 = *(void *)(Attribute + 16);
  if (v10 <= a6)
  {
    uint64_t v29 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    __int16 v31 = 2048;
    unint64_t v32 = a6;
    __int16 v33 = 2048;
    unint64_t v34 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(Attribute + 32) + 32 * a6;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(unsigned int *)(v15 + 8);
  id v18 = **(id **)(v15 + 24);
  uint64_t v26 = *a3;
  id v19 = v18;
  v25[0] = v19;
  v25[1] = v17 | (v16 << 32);
  re::MaterialParameterBlock::setBuffer(a5, &v26, (uint64_t)v25, (uint64_t)v27);
  v27[0] = 0;
  if (v19) {

  }
  if (v18) {
}
  }

void re::populateAttribute<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  isuint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(a1, a2, 3u);
  uint64_t v13 = *a4;
  v30[0] = isAttribute ^ 1;
  *(void *)&long long v35 = v13;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)&v35, 1uLL, v30, 2, (uint64_t)v28);
  v28[0] = 0;
  if ((isAttribute & 1) == 0)
  {
    a6 = *(void *)(a1 + 832);
    if (a6 > v10)
    {
      uint64_t v20 = *(void *)(a1 + 848) + 32 * v10;
      if (*(_DWORD *)(v20 + 16) == 3)
      {
        uint64_t v22 = *(void *)v20;
        uint64_t v21 = *(void *)(v20 + 8);
        uint64_t v23 = *a3;
        *(void *)long long v30 = v22;
        *(void *)&v30[8] = v21;
        uint64_t v29 = v23;
        re::MaterialParameterBlock::setConstant(a5, &v29, 0x10uLL, v30, 34, (uint64_t)&v35);
      }
      else
      {
        uint64_t v24 = std::__throw_bad_variant_access[abi:nn180100]();
        re::FunctionBase<24ul,re::AABB ()(unsigned long,unsigned long)>::destroyCallable(v24);
      }
      return;
    }
LABEL_12:
    uint64_t v29 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    __int16 v33 = 2048;
    unint64_t v34 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, v10, 3u);
  unint64_t v10 = *(void *)(Attribute + 16);
  if (v10 <= a6)
  {
    uint64_t v29 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    __int16 v31 = 2048;
    unint64_t v32 = a6;
    __int16 v33 = 2048;
    unint64_t v34 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(Attribute + 32) + 32 * a6;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(unsigned int *)(v15 + 8);
  id v18 = **(id **)(v15 + 24);
  uint64_t v26 = *a3;
  id v19 = v18;
  v25[0] = v19;
  v25[1] = v17 | (v16 << 32);
  re::MaterialParameterBlock::setBuffer(a5, &v26, (uint64_t)v25, (uint64_t)v27);
  v27[0] = 0;
  if (v19) {

  }
  if (v18) {
}
  }

uint64_t (***re::FunctionBase<24ul,re::AABB ()(unsigned long,unsigned long)>::destroyCallable(uint64_t a1))(void)
{
  BOOL result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    BOOL result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      BOOL result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(unsigned long)>::destroyCallable(uint64_t a1))(void)
{
  BOOL result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    BOOL result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      BOOL result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *re::FixedArray<re::NamedVertexBuffer>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 << 6, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    BOOL result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = v5;
  for (unint64_t i = a3 - 1; i; --i)
  {
    *(_OWORD *)unint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((_WORD *)v7 + 16) = 256;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0xFFFFFFFF00000000;
    unint64_t v7 = (_anonymous_namespace_ *)((char *)v7 + 64);
  }
  *(_OWORD *)unint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  BOOL result = re::DynamicString::setCapacity(v7, 0);
  *((_WORD *)v7 + 16) = 256;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 6) = 0;
  *((void *)v7 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0xFFFFFFFF00000000;
  return result;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E878;
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E878;
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v2 = *a2;
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 <= *a2)
  {
    uint64_t v14 = 0;
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v15 = 136315906;
    *(void *)&v15[4] = "operator[]";
    *(_WORD *)&v15[12] = 1024;
    *(_DWORD *)&v15[14] = 797;
    __int16 v16 = 2048;
    unint64_t v17 = v2;
    __int16 v18 = 2048;
    unint64_t v19 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40) + 32 * v2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  id v9 = **(id **)(v6 + 24);
  uint64_t v10 = v8 | (v7 << 32);
  uint64_t v11 = *(re::MaterialParameterBlock **)(a1 + 48);
  uint64_t v14 = 0x70A66CC11824C2D9;
  id v12 = v9;
  *(void *)uint64_t v15 = v12;
  *(void *)&v15[8] = v10;
  re::MaterialParameterBlock::setBuffer(v11, &v14, (uint64_t)v15, (uint64_t)v20);
  *(void *)&v20[0] = 0;
  if (v12) {

  }
  if (v9) {
  uint64_t v13 = 0xADE0D49ECE3B3;
  }
  re::populateAttribute<re::Vector4<float>>(v5, 1u, &v13, 0x2A5B4409271D7A77, *(re::MaterialParameterBlock **)(a1 + 48), v2);
  uint64_t v13 = 0x59BE5D4061B1;
  re::populateAttribute<float>(v5, 2u, &v13, 0x4BDE6E805B77B40DLL, *(re::MaterialParameterBlock **)(a1 + 48), v2);
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t *a1, void *a2)
{
  *a2 = &unk_26E70E878;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), a1 + 1);
  uint64_t v4 = a1[6];
  a2[6] = v4;
  if (v4) {
    id v5 = (id)(v4 + 8);
  }
  a2[7] = a1[7];
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E878;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 8, (uint64_t *)(a1 + 8));
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 64;
}

void re::populateAttribute<re::Vector4<float>>(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  int v11 = *(unsigned __int8 *)(a1 + a2 + 512);
  v29[0] = v11 ^ 1;
  *(void *)&v34[0] = a4;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v34, 1uLL, v29, 2, (uint64_t)v27);
  v27[0] = 0;
  if (v11)
  {
    unint64_t v12 = *(void *)(a1 + 40 * v10 + 16);
    if (v12 <= a6)
    {
      uint64_t v28 = 0;
      memset(v34, 0, sizeof(v34));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v29 = 136315906;
      *(void *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 797;
      __int16 v30 = 2048;
      unint64_t v31 = a6;
      __int16 v32 = 2048;
      unint64_t v33 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v13 = *(void *)(a1 + 40 * v10 + 32) + 32 * a6;
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    id v16 = **(id **)(v13 + 24);
    uint64_t v25 = *a3;
    id v17 = v16;
    v24[0] = v17;
    v24[1] = v15 | (v14 << 32);
    re::MaterialParameterBlock::setBuffer(a5, &v25, (uint64_t)v24, (uint64_t)v26);
    v26[0] = 0;
    if (v17) {

    }
    if (v16) {
  }
    }
  else
  {
    uint64_t v18 = a1 + 32 * v10;
    if (*(_DWORD *)(v18 + 304) == 3)
    {
      unint64_t v19 = (uint64_t *)(v18 + 288);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = *a3;
      *(void *)uint64_t v29 = v21;
      *(void *)&v29[8] = v20;
      uint64_t v28 = v22;
      re::MaterialParameterBlock::setConstant(a5, &v28, 0x10uLL, v29, 34, (uint64_t)v34);
    }
    else
    {
      uint64_t v23 = std::__throw_bad_variant_access[abi:nn180100]();
      re::populateAttribute<float>(v23);
    }
  }
}

void re::populateAttribute<float>(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  int v11 = *(unsigned __int8 *)(a1 + a2 + 512);
  v27[0] = v11 ^ 1;
  *(void *)&v34[0] = a4;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v34, 1uLL, v27, 2, (uint64_t)v25);
  v25[0] = 0;
  if (v11)
  {
    unint64_t v12 = *(void *)(a1 + 40 * v10 + 16);
    if (v12 <= a6)
    {
      uint64_t v26 = 0;
      memset(v34, 0, sizeof(v34));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v27 = 136315906;
      *(void *)&void v27[4] = "operator[]";
      __int16 v28 = 1024;
      int v29 = 797;
      __int16 v30 = 2048;
      unint64_t v31 = a6;
      __int16 v32 = 2048;
      unint64_t v33 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v13 = *(void *)(a1 + 40 * v10 + 32) + 32 * a6;
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    id v16 = **(id **)(v13 + 24);
    uint64_t v23 = *a3;
    id v17 = v16;
    v22[0] = v17;
    v22[1] = v15 | (v14 << 32);
    re::MaterialParameterBlock::setBuffer(a5, &v23, (uint64_t)v22, (uint64_t)v24);
    v24[0] = 0;
    if (v17) {

    }
    if (v16) {
  }
    }
  else
  {
    uint64_t v18 = a1 + 32 * v10;
    if (*(_DWORD *)(v18 + 304))
    {
      uint64_t v21 = std::__throw_bad_variant_access[abi:nn180100]();
      re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(v21);
    }
    else
    {
      int v19 = *(_DWORD *)(v18 + 288);
      uint64_t v20 = *a3;
      LODWORD(v26) = v19;
      *(void *)uint64_t v27 = v20;
      re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v27, 4uLL, &v26, 1, (uint64_t)v34);
    }
  }
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E8D0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E8D0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*(void *)(a1 + 24) <= (unint64_t)*a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  int32x4_t v16 = vdupq_n_s32(0x7F800000u);
  *a4 = v16;
  a4[1] = v8;
  uint64_t v9 = v7 + 32 * v5;
  BOOL result = (char *)objc_msgSend(**(id **)(v9 + 24), sel_contents);
  if (v6)
  {
    int v11 = (float32x4_t *)&result[*(void *)(v9 + 8)];
    float32x4_t v12 = (float32x4_t)v16;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i32[2] = 127;
    do
    {
      float32x4_t v14 = *v11++;
      float32x4_t v15 = v14;
      v12.i32[3] = 0;
      v15.i32[3] = 0;
      float32x4_t v12 = vminnmq_f32(v12, v15);
      v13.i32[3] = 0;
      float32x4_t v13 = vmaxnmq_f32(v13, v15);
      --v6;
    }
    while (v6);
    *a4 = v12;
    a4[1] = v13;
  }
  return result;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70E8D0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70E8D0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 48;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(void *a1, uint64_t *a2)
{
  *a1 = &unk_26E70E928;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a1 + 1), a2);
  a1[6] = a2[5];
  a2[5] = 0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a1 + 7), a2 + 6);
  a1[12] = a2[11];
  return a1;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E928;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E928;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 <= *a2)
  {
    v24[0] = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v26 = 136315906;
    *(void *)&void v26[4] = "operator[]";
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = 797;
    __int16 v27 = 2048;
    unint64_t v28 = v3;
    __int16 v29 = 2048;
    unint64_t v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 40) + 32 * v3;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(unsigned int *)(v7 + 8);
  id v10 = **(id **)(v7 + 24);
  uint64_t v11 = v9 | (v8 << 32);
  float32x4_t v12 = *(re::MaterialParameterBlock **)(a1 + 48);
  uint64_t v23 = 0x42DD0EA8FF94AE93;
  id v13 = v10;
  v22[0] = v13;
  v22[1] = v11;
  re::MaterialParameterBlock::setBuffer(v12, &v23, (uint64_t)v22, (uint64_t)v24);
  v24[0] = 0;
  if (v13) {

  }
  if (v10) {
  unint64_t v2 = *(void *)(a1 + 72);
  }
  if (v2 <= v3)
  {
LABEL_13:
    uint64_t v25 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v26 = 136315906;
    *(void *)&void v26[4] = "operator[]";
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = 797;
    __int16 v27 = 2048;
    unint64_t v28 = v3;
    __int16 v29 = 2048;
    unint64_t v30 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *(void *)(a1 + 88) + 32 * v3;
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(unsigned int *)(v14 + 8);
  id v17 = **(id **)(v14 + 24);
  uint64_t v18 = v16 | (v15 << 32);
  int v19 = *(re::MaterialParameterBlock **)(a1 + 48);
  uint64_t v25 = 0x42DD0EA8FF94AE94;
  id v20 = v17;
  *(void *)uint64_t v26 = v20;
  *(void *)&v26[8] = v18;
  re::MaterialParameterBlock::setBuffer(v19, &v25, (uint64_t)v26, (uint64_t)&v31);
  *(void *)&long long v31 = 0;
  if (v20) {

  }
  if (v17) {
  uint64_t v21 = 0x567E936567CFLL;
  }
  re::populateAttribute<re::Vector4<float>>(v6, 5u, &v21, 0xAE343F25523302FLL, *(re::MaterialParameterBlock **)(a1 + 48), v3);
  uint64_t v21 = 0x567E947C6632;
  re::populateAttribute<float>(v6, 6u, &v21, 0x11DE7004A5E6CC6CLL, *(re::MaterialParameterBlock **)(a1 + 48), v3);
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t *a1, void *a2)
{
  *a2 = &unk_26E70E928;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), a1 + 1);
  uint64_t v4 = a1[6];
  a2[6] = v4;
  if (v4) {
    id v5 = (id)(v4 + 8);
  }
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 7), a1 + 7);
  a2[12] = a1[12];
  return a2;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  return re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(a2, (uint64_t *)(a1 + 8));
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 104;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E980;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 6));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E980;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 6));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, float32x4_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  if (a1[3] <= *a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = *a3;
  uint64_t v8 = a1[5] + 32 * v5;
  uint64_t v9 = (char *)objc_msgSend(**(id **)(v8 + 24), sel_contents);
  if (v7)
  {
    id v10 = (float32x4_t *)&v9[*(void *)(v8 + 8)];
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v12.i64[0] = 0x7F0000007FLL;
    v12.i32[2] = 127;
    uint64_t v13 = v7;
    do
    {
      float32x4_t v14 = *v10++;
      float32x4_t v15 = v14;
      v11.i32[3] = 0;
      v15.i32[3] = 0;
      float32x4_t v11 = vminnmq_f32(v11, v15);
      v12.i32[3] = 0;
      float32x4_t v12 = vmaxnmq_f32(v12, v15);
      --v13;
    }
    while (v13);
  }
  else
  {
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v12.i64[0] = 0x7F0000007FLL;
    v12.i64[1] = 0x7F0000007FLL;
  }
  if (a1[8] <= v5)
  {
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v16 = a1[10];
  float32x4_t v24 = v12;
  float32x4_t v25 = v11;
  *a4 = v11;
  a4[1] = v12;
  uint64_t v17 = v16 + 32 * v5;
  BOOL result = (char *)objc_msgSend(**(id **)(v17 + 24), sel_contents);
  if (v7)
  {
    int v19 = (float32x4_t *)&result[*(void *)(v17 + 8)];
    float32x4_t v21 = v24;
    float32x4_t v20 = v25;
    do
    {
      float32x4_t v22 = *v19++;
      float32x4_t v23 = v22;
      v20.i32[3] = 0;
      v23.i32[3] = 0;
      float32x4_t v20 = vminnmq_f32(v20, v23);
      v21.i32[3] = 0;
      float32x4_t v21 = vmaxnmq_f32(v21, v23);
      --v7;
    }
    while (v7);
    *a4 = v20;
    a4[1] = v21;
  }
  return result;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70E980;
  uint64_t v4 = (uint64_t)(a2 + 6);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  re::DynamicArray<re::GPUAllocation>::DynamicArray(v4, (uint64_t *)(a1 + 48));
  return a2;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70E980;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 6), (uint64_t *)(a1 + 48));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 88;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70E9D8;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a1 + 8, (uint64_t *)a2);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a1 + 56, (uint64_t *)(a2 + 48));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 88);
  return a1;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E9D8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70E9D8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 <= *a2)
  {
    v27[0] = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 797;
    __int16 v30 = 2048;
    unint64_t v31 = v3;
    __int16 v32 = 2048;
    unint64_t v33 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 40) + 32 * v3;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(unsigned int *)(v7 + 8);
  id v10 = **(id **)(v7 + 24);
  uint64_t v11 = v9 | (v8 << 32);
  float32x4_t v12 = *(re::MaterialParameterBlock **)(a1 + 48);
  uint64_t v26 = 0xEE268E43F3D1BEALL;
  id v13 = v10;
  v25[0] = v13;
  v25[1] = v11;
  re::MaterialParameterBlock::setBuffer(v12, &v26, (uint64_t)v25, (uint64_t)v27);
  v27[0] = 0;
  if (v13) {

  }
  if (v10) {
  unint64_t v2 = *(void *)(a1 + 72);
  }
  if (v2 <= v3)
  {
LABEL_13:
    uint64_t v28 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 797;
    __int16 v30 = 2048;
    unint64_t v31 = v3;
    __int16 v32 = 2048;
    unint64_t v33 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *(void *)(a1 + 88) + 32 * v3;
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(unsigned int *)(v14 + 8);
  id v17 = **(id **)(v14 + 24);
  uint64_t v18 = v16 | (v15 << 32);
  int v19 = *(re::MaterialParameterBlock **)(a1 + 48);
  uint64_t v28 = 0x1D89B02FDAB8EF6FLL;
  id v20 = v17;
  *(void *)__int16 v29 = v20;
  *(void *)&v29[8] = v18;
  re::MaterialParameterBlock::setBuffer(v19, &v28, (uint64_t)v29, (uint64_t)&v34);
  *(void *)&long long v34 = 0;
  if (v20) {

  }
  if (v17) {
  unint64_t v21 = *(void *)(a1 + 104);
  }
  uint64_t v24 = 0xB20902AF06629;
  uint64_t v23 = 0x19A8EF0EE74E6741;
  re::populateAttribute<re::Vector3<float>,unsigned long>(v6, v21, &v24, &v23, *(re::MaterialParameterBlock **)(a1 + 48), v3);
  unint64_t v22 = *(void *)(a1 + 104);
  uint64_t v24 = 0xB20902A148C42;
  uint64_t v23 = 0x14289D97E950E308;
  re::populateAttribute<re::Vector4<float>,unsigned long>(v6, v22, &v24, &v23, *(re::MaterialParameterBlock **)(a1 + 48), v3);
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70E9D8;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 8, (uint64_t *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v4;
  if (v4) {
    id v5 = (id)(v4 + 8);
  }
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 56, (uint64_t *)(a1 + 56));
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 112;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EA30;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EA30;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*(void *)(a1 + 24) <= (unint64_t)*a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  int32x4_t v16 = vdupq_n_s32(0x7F800000u);
  *a4 = v16;
  a4[1] = v8;
  uint64_t v9 = v7 + 32 * v5;
  BOOL result = (char *)objc_msgSend(**(id **)(v9 + 24), sel_contents);
  if (v6)
  {
    uint64_t v11 = (float32x4_t *)&result[*(void *)(v9 + 8)];
    float32x4_t v12 = (float32x4_t)v16;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i32[2] = 127;
    do
    {
      float32x4_t v14 = *v11++;
      float32x4_t v15 = v14;
      v12.i32[3] = 0;
      v15.i32[3] = 0;
      float32x4_t v12 = vminnmq_f32(v12, v15);
      v13.i32[3] = 0;
      float32x4_t v13 = vmaxnmq_f32(v13, v15);
      --v6;
    }
    while (v6);
    *a4 = v12;
    a4[1] = v13;
  }
  return result;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70EA30;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

void *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70EA30;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 48;
}

uint64_t re::DynamicArray<re::PrimitiveShapeGeometry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 96 * v4;
        uint64_t v6 = (id *)(v3 + 80);
        do
        {
          if (*v6)
          {

            *uint64_t v6 = 0;
          }
          uint64_t v7 = *(v6 - 1);
          if (v7)
          {

            *(v6 - 1) = 0;
          }
          long long v8 = *(v6 - 2);
          if (v8)
          {

            *(v6 - 2) = 0;
          }
          v6 += 12;
          v5 -= 96;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v3 + 1200 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v3 + 1136);
          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(v3 + 1056);
          re::DynamicArray<unsigned long>::deinit(v3 + 1016);
          for (uint64_t i = 976; i != 816; i -= 40)
            re::DynamicArray<unsigned long>::deinit(v3 + i);
          do
          {
            re::DynamicArray<unsigned long>::deinit(v3 + i);
            i -= 40;
          }
          while (i != 656);
          do
          {
            re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v3 + i);
            i -= 40;
          }
          while (i != 496);
          for (uint64_t j = 240; j != -40; j -= 40)
            re::DynamicArray<unsigned long>::deinit(v3 + j);
          v3 += 1200;
        }
        while (v3 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::PrimitiveShapeGeometry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 96 * v9;
        uint64_t v11 = v8 + 64;
        float32x4_t v12 = v7;
        do
        {
          long long v13 = *(_OWORD *)(v11 - 64);
          long long v14 = *(_OWORD *)(v11 - 48);
          long long v15 = *(_OWORD *)(v11 - 16);
          *((_OWORD *)v12 + 2) = *(_OWORD *)(v11 - 32);
          *((_OWORD *)v12 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v15;
          *(_OWORD *)float32x4_t v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12[8] = *(void *)v11;
          *(void *)uint64_t v11 = 0;
          v12[9] = *(void *)(v11 + 8);
          *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          v12[10] = *(void *)(v11 + 16);
          *(void *)(v11 + 16) = 0;
          int32x4_t v16 = *(void **)(v11 + 8);
          if (v16)
          {

            *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          }
          if (*(void *)v11)
          {

            *(void *)uint64_t v11 = 0;
          }
          v11 += 96;
          v12 += 12;
          v10 -= 96;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void *re::DynamicArray<re::PrimitiveRenderingContext>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x4B0uLL))
        {
          uint64_t v2 = 1200 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 1200 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 1200 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::PrimitiveRenderingContext>(v8, v11);
          v8 += 1200;
          v11 += 1200;
          v10 -= 1200;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::PrimitiveRenderingContext>(uint64_t a1, uint64_t a2)
{
  re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(a2, a1);
  *(void *)(a2 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a2 + 1080) = 0;
  *(void *)(a2 + 1072) = 0;
  *(void *)(a2 + 1064) = 0;
  *(void *)(a2 + 1056) = 0;
  *(void *)(a2 + 1056) = *(void *)(a1 + 1056);
  *(void *)(a1 + 1056) = 0;
  *(void *)(a2 + 1064) = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = 0;
  uint64_t v4 = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = v4;
  uint64_t v5 = *(void *)(a2 + 1088);
  *(void *)(a2 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a1 + 1088);
  *(void *)(a1 + 108re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  ++*(_DWORD *)(a1 + 1080);
  ++*(_DWORD *)(a2 + 1080);
  long long v6 = *(_OWORD *)(a1 + 1096);
  long long v7 = *(_OWORD *)(a1 + 1112);
  *(_DWORD *)(a2 + 112re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 1128);
  *(_OWORD *)(a2 + 1096) = v6;
  *(_OWORD *)(a2 + 1112) = v7;
  *(void *)(a2 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1136) = 0;
  *(void *)(a2 + 1152) = 0;
  *(void *)(a2 + 1144) = 0;
  *(_DWORD *)(a2 + 1160) = 0;
  *(void *)(a2 + 1136) = *(void *)(a1 + 1136);
  *(void *)(a1 + 1136) = 0;
  *(void *)(a2 + 1144) = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = 0;
  uint64_t v8 = *(void *)(a2 + 1152);
  *(void *)(a2 + 1152) = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = v8;
  uint64_t v9 = *(void *)(a2 + 1168);
  *(void *)(a2 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a1 + 1168);
  *(void *)(a1 + 116re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
  ++*(_DWORD *)(a1 + 1160);
  ++*(_DWORD *)(a2 + 1160);
  long long v10 = *(_OWORD *)(a1 + 1176);
  *(void *)(a2 + 1192) = *(void *)(a1 + 1192);
  *(_OWORD *)(a2 + 1176) = v10;
  re::DynamicArray<unsigned long>::deinit(a1 + 1136);
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(a1 + 1056);
  re::DynamicArray<unsigned long>::deinit(a1 + 1016);
  for (uint64_t i = 0; i != -160; i -= 40)
    re::DynamicArray<unsigned long>::deinit(a1 + 976 + i);
  for (uint64_t j = 0; j != -160; j -= 40)
    re::DynamicArray<unsigned long>::deinit(a1 + 816 + j);
  for (uint64_t k = 0; k != -160; k -= 40)
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1 + 656 + k);
  for (uint64_t m = 240; m != -40; m -= 40)
    uint64_t result = re::DynamicArray<unsigned long>::deinit(a1 + m);
  return result;
}

uint64_t re::attributeInfo(unsigned int a1, uint64_t a2)
{
  if (a1 < 7) {
    return qword_2343ADB60[(char)a1];
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeInfo", 30);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

double re::allocate@<D0>(re *this@<X0>, const re::RenderManager *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *((void *)this + 13);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 336);
  }
  uint64_t v8 = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(v7, *(void *)(*((void *)this + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*((void *)this + 17) + 16) << 60));
  return re::PerFrameAllocatorGPU::allocInternal(v8, (void)a2 << 7, a3, 0, a4);
}

uint64_t re::attributeInfo(uint64_t result, uint64_t a2)
{
  if (result >= 4)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeInfo", 49, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::FixedArray<re::NamedVertexBuffer>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (re::DynamicString *)result[2];
      uint64_t v5 = v2 << 6;
      do
      {
        long long v6 = (void *)*((void *)v4 + 5);
        if (v6)
        {

          *((void *)v4 + 5) = 0;
        }
        double v7 = re::DynamicString::deinit(v4);
        uint64_t v4 = (re::DynamicString *)((char *)v4 + 64);
        v5 -= 64;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v7);
      void *v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = a2;
  a1[1] = 1;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8, 8);
  a1[2] = result;
  if (result)
  {
    *uint64_t result = *a3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DynamicArray<re::GPUAllocation>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, a2[2]);
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        memmove(*(void **)(a1 + 32), (const void *)a2[4], 32 * v7);
        uint64_t v7 = *(void *)(a1 + 16);
      }
      memcpy((void *)(*(void *)(a1 + 32) + 32 * v7), (const void *)(a2[4] + 32 * v7), 32 * v6 - 32 * v7);
    }
    else if (v6)
    {
      memmove(*(void **)(a1 + 32), (const void *)a2[4], 32 * v6);
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

re::DynamicString *re::renderGraphEncoderSplitReasonToString(_anonymous_namespace_ *a1, int a2)
{
  uint64_t v3 = off_264BE57A0[a2];
}

re::DynamicString *re::multisampleDepthResolveFilterToString(_anonymous_namespace_ *a1, int a2)
{
  uint64_t v3 = off_264BE5818[a2];
}

re::DynamicString *re::multisampleStencilResolveFilterToString(_anonymous_namespace_ *a1, int a2)
{
  if (a2) {
    uint64_t v4 = "kDepthResolvedSample";
  }
  else {
    uint64_t v4 = "kSample0";
  }
}

uint64_t re::RenderGraphEncoderSplitLogBuffer::clear(uint64_t this)
{
  if (*(void *)(this + 16))
  {
    uint64_t v1 = 0;
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(this + 32);
      uint64_t v4 = v3 + v1;
      uint64_t v5 = *(void *)(v3 + v1 + 8);
      if (v5)
      {
        *(void *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
        unint64_t v6 = *(unsigned char **)(v3 + v1 + 16);
      }
      else
      {
        *(unsigned char *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5 & 1;
        unint64_t v6 = (unsigned char *)(v3 + v1 + 9);
      }
      *unint64_t v6 = 0;
      ++v2;
      v1 += 32;
    }
    while (*(void *)(this + 16) > v2);
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void re::RenderGraphEncoderSplitLogManager::save(re::RenderGraphEncoderSplitLogManager *this, char a2)
{
  uint64_t v4 = (char *)this + 24;
  unint64_t v5 = re::RenderGraphEncoderSplitLogBuffer::calculateHash((re::RenderGraphEncoderSplitLogManager *)((char *)this + 24));
  unint64_t v6 = v5;
  if ((a2 & 1) != 0 || !*((unsigned char *)this + 16) || v5 != *((void *)this + 1))
  {
    re::RenderGraphEncoderSplitLogBuffer::logBuffer((BOOL)v4);
    *((unsigned char *)this + 16) = 1;
  }
  *((void *)this + 1) = v6;
}

unint64_t re::RenderGraphEncoderSplitLogBuffer::calculateHash(re::RenderGraphEncoderSplitLogBuffer *this)
{
  void v13[2] = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *((void *)this + 4) + v3;
      unint64_t v7 = *(void *)(v6 + 8);
      unint64_t v8 = v7 >> 1;
      if ((v7 & 1) == 0) {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 >> 1;
      }
      if ((int)v8 >= 100) {
        int v9 = 100;
      }
      else {
        int v9 = v8;
      }
      if (v7)
      {
        uint64_t v10 = *(void *)(v6 + 16);
        if (!v9)
        {
LABEL_12:
          unint64_t v11 = 0;
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v10 = v6 + 9;
        if (!v9) {
          goto LABEL_12;
        }
      }
      MurmurHash3_x64_128(v10, v9, 0, v13);
      unint64_t v11 = (v13[1] - 0x61C8864680B583E9 + (v13[0] << 6) + (v13[0] >> 2)) ^ v13[0];
      unint64_t v1 = *((void *)this + 2);
LABEL_13:
      v5 ^= (v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + v11;
      ++v4;
      v3 += 32;
      if (v1 <= v4) {
        return v5;
      }
    }
  }
  return 0;
}

void re::RenderGraphEncoderSplitLogBuffer::logBuffer(BOOL this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(int *)(this + 40) >= 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (this)
      {
        if (*(void *)(v1 + 16) <= v3)
        {
          long long v10 = 0u;
          long long v11 = 0u;
          long long v8 = 0u;
          long long v9 = 0u;
          *(_OWORD *)long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v5 = *(void *)(v1 + 32) + v2;
        if (*(unsigned char *)(v5 + 8)) {
          uint64_t v6 = *(void *)(v5 + 16);
        }
        else {
          uint64_t v6 = v5 + 9;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
      ++v3;
      v2 += 32;
    }
    while ((uint64_t)v3 < *(int *)(v1 + 40));
  }
}

uint64_t re::RenderGraphEncoderSplitLogManager::logEntry(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    unint64_t v13 = result;
    int v14 = *(_DWORD *)(result + 64);
    unint64_t v15 = *(void *)(result + 40);
    if (v15 <= v14)
    {
      *((void *)&v79 + 1) = 0;
      long long v80 = 0uLL;
      re::DynamicString::setCapacity(&v79, 0);
      re::DynamicString::setCapacity(&v79, 0x400uLL);
      re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)(v13 + 24), (re::DynamicString *)&v79);
      uint64_t result = v79;
      if (void)v79 && (BYTE8(v79)) {
        uint64_t result = (*(uint64_t (**)(void, void))(*(void *)v79 + 40))(v79, v80);
      }
      int v14 = *(_DWORD *)(v13 + 64);
      unint64_t v15 = *(void *)(v13 + 40);
      unint64_t v16 = v14;
    }
    else
    {
      unint64_t v16 = v14;
    }
    if (v15 <= v16)
    {
      *(void *)&long long v71 = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      __int16 v75 = 2048;
      uint64_t v76 = (unsigned int *)v16;
      __int16 v77 = 2048;
      unint64_t v78 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_159:
      v66[0] = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      __int16 v75 = 2048;
      uint64_t v76 = a6;
      __int16 v77 = 2048;
      unint64_t v78 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_160:
      v66[0] = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      __int16 v75 = 2048;
      uint64_t v76 = (unsigned int *)a2;
      __int16 v77 = 2048;
      unint64_t v78 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      uint64_t v73 = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      __int16 v75 = 2048;
      uint64_t v76 = (unsigned int *)a2;
      __int16 v77 = 2048;
      unint64_t v78 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      v66[0] = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      __int16 v75 = 2048;
      uint64_t v76 = a6;
      __int16 v77 = 2048;
      unint64_t v78 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    id v17 = (re::DynamicString *)(*(void *)(v13 + 56) + 32 * v16);
    *(_DWORD *)(v13 + 64) = v14 + 1;
    if (a7)
    {
      re::renderGraphResourceOperationTypeToString((_anonymous_namespace_ *)(a7 + 1), (re::DynamicString *)&v71);
      re::renderGraphEncoderSplitReasonToString((_anonymous_namespace_ *)&v67, a2);
      if (v68) {
        uint64_t v18 = v70;
      }
      else {
        uint64_t v18 = v69;
      }
      if (BYTE8(v71)) {
        int v19 = (char *)v72;
      }
      else {
        int v19 = (char *)&v71 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"Encoder Split: %s for %s.\n", (re::DynamicString *)&v79, v18, v19);
    }
    else
    {
      long long v71 = 0u;
      long long v72 = 0u;
      re::DynamicString::setCapacity(&v71, 0);
      re::renderGraphEncoderSplitReasonToString((_anonymous_namespace_ *)&v67, a2);
      if (v68) {
        id v20 = v70;
      }
      else {
        id v20 = v69;
      }
      re::DynamicString::format((re::DynamicString *)"Encoder Split: %s.\n", (re::DynamicString *)&v79, v20);
    }
    unint64_t v13 = v80;
    uint64_t v21 = BYTE8(v79) & 1;
    if (BYTE8(v79)) {
      unint64_t v22 = (const char *)v80;
    }
    else {
      unint64_t v22 = (char *)&v79 + 9;
    }
    if (BYTE8(v79)) {
      size_t v23 = *((void *)&v79 + 1) >> 1;
    }
    else {
      size_t v23 = BYTE8(v79) >> 1;
    }
    re::DynamicString::append(v17, v22, v23);
    if ((void)v79 && v21) {
      (*(void (**)(void, unint64_t))(*(void *)v79 + 40))(v79, v13);
    }
    switch((int)a2)
    {
      case 0:
        uint64_t v24 = *(void *)(a3 + 296);
        a6 = (unsigned int *)a7[13];
        a2 = *(void *)(v24 + 16);
        if (a2 <= (unint64_t)a6) {
          goto LABEL_159;
        }
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(void *)(v24 + 32) + 48 * a6 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying a force clear for %s resource index %d.\n", (re::DynamicString *)&v79, *(void *)&v74[8], a7[13]);
        goto LABEL_47;
      case 1:
        uint64_t v25 = *(void *)(a3 + 296);
        a2 = a7[13];
        unint64_t v13 = *(void *)(v25 + 16);
        if (v13 <= a2) {
          goto LABEL_160;
        }
        re::StringID::StringID((re::StringID *)v66, (const StringID *)(*(void *)(v25 + 32) + 48 * a2 + 8));
        uint64_t v26 = *(void *)(a3 + 296);
        a2 = a6[13];
        unint64_t v13 = *(void *)(v26 + 16);
        if (v13 <= a2) {
          goto LABEL_161;
        }
        uint64_t v27 = v66[1];
        uint64_t v28 = a7[13];
        uint64_t v29 = *a7;
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(void *)(v26 + 32) + 48 * a2 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying to bind %s resource index %d at attachment index %d but old setup has already bound %s resource index %d at same attachment index %d.\n", (re::DynamicString *)&v79, v27, v28, v29, *(void *)&v74[8], a6[13], *a6);
        uint64_t v30 = v80;
        uint64_t v31 = BYTE8(v79) & 1;
        if (BYTE8(v79)) {
          __int16 v32 = (const char *)v80;
        }
        else {
          __int16 v32 = (char *)&v79 + 9;
        }
        if (BYTE8(v79)) {
          size_t v33 = *((void *)&v79 + 1) >> 1;
        }
        else {
          size_t v33 = BYTE8(v79) >> 1;
        }
        re::DynamicString::append(v17, v32, v33);
        if ((void)v79 && v31) {
          (*(void (**)(void, uint64_t))(*(void *)v79 + 40))(v79, v30);
        }
        re::StringID::destroyString((re::StringID *)v74);
        long long v34 = (re::StringID *)v66;
        goto LABEL_57;
      case 2:
        uint64_t v35 = *(void *)(a3 + 296);
        a6 = (unsigned int *)a7[13];
        a2 = *(void *)(v35 + 16);
        if (a2 <= (unint64_t)a6) {
          goto LABEL_162;
        }
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(void *)(v35 + 32) + 48 * a6 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying to bind %s resource index %d at attachment index %d but resource is not included in old setup encoder.\n", (re::DynamicString *)&v79, *(void *)&v74[8], a7[13], *a7);
LABEL_47:
        uint64_t v36 = v80;
        uint64_t v37 = BYTE8(v79) & 1;
        if (BYTE8(v79)) {
          long long v38 = (const char *)v80;
        }
        else {
          long long v38 = (char *)&v79 + 9;
        }
        if (BYTE8(v79)) {
          size_t v39 = *((void *)&v79 + 1) >> 1;
        }
        else {
          size_t v39 = BYTE8(v79) >> 1;
        }
        re::DynamicString::append(v17, v38, v39);
        if ((void)v79 && v37) {
          (*(void (**)(void, uint64_t))(*(void *)v79 + 40))(v79, v36);
        }
        long long v34 = (re::StringID *)v74;
LABEL_57:
        re::StringID::destroyString(v34);
        goto LABEL_125;
      case 3:
        if (BYTE8(v71)) {
          unint64_t v40 = v72;
        }
        else {
          unint64_t v40 = (unint64_t)&v71 | 9;
        }
        re::DynamicString::format((re::DynamicString *)"The new setup contains %s but old setup doesn't.\n", (re::DynamicString *)&v79, v40, v63);
        goto LABEL_116;
      case 4:
        unsigned int v41 = a7[1];
        if (v41 == 8)
        {
          re::multisampleStencilResolveFilterToString((_anonymous_namespace_ *)&v79, a6[10]);
          if (BYTE8(v79)) {
            uint64_t v42 = (const char *)v80;
          }
          else {
            uint64_t v42 = (char *)&v79 + 9;
          }
          if (void)v79 && (BYTE8(v79)) {
            (*(void (**)(void))(*(void *)v79 + 40))(v79);
          }
          re::multisampleStencilResolveFilterToString((_anonymous_namespace_ *)&v79, a7[10]);
        }
        else
        {
          if (v41 != 7)
          {
            uint64_t v42 = "n/a";
            int v52 = "n/a";
            goto LABEL_111;
          }
          re::multisampleDepthResolveFilterToString((_anonymous_namespace_ *)&v79, a6[9]);
          if (BYTE8(v79)) {
            uint64_t v42 = (const char *)v80;
          }
          else {
            uint64_t v42 = (char *)&v79 + 9;
          }
          if (void)v79 && (BYTE8(v79)) {
            (*(void (**)(void))(*(void *)v79 + 40))(v79);
          }
          re::multisampleDepthResolveFilterToString((_anonymous_namespace_ *)&v79, a7[9]);
        }
        if (BYTE8(v79)) {
          int v52 = (const char *)v80;
        }
        else {
          int v52 = (char *)&v79 + 9;
        }
        if (void)v79 && (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))(v79);
        }
LABEL_111:
        if (BYTE8(v71)) {
          unint64_t v53 = v72;
        }
        else {
          unint64_t v53 = (unint64_t)&v71 | 9;
        }
        long long v63 = v52;
        long long v64 = v42;
        unint64_t v62 = v53;
        id v49 = "The new step has a %s filter of %s but the old step has a resolve filter of %s.\n";
LABEL_115:
        re::DynamicString::format((re::DynamicString *)v49, (re::DynamicString *)&v79, v62, v63, v64);
LABEL_116:
        uint64_t v54 = v80;
        uint64_t v55 = BYTE8(v79) & 1;
        if (BYTE8(v79)) {
          uint64_t v56 = (const char *)v80;
        }
        else {
          uint64_t v56 = (char *)&v79 + 9;
        }
        if (BYTE8(v79)) {
          size_t v57 = *((void *)&v79 + 1) >> 1;
        }
        else {
          size_t v57 = BYTE8(v79) >> 1;
        }
        re::DynamicString::append(v17, v56, v57);
        if ((void)v79 && v55) {
          (*(void (**)(void, uint64_t))(*(void *)v79 + 40))(v79, v54);
        }
LABEL_125:
        re::DynamicString::format((re::DynamicString *)"Old Setup:\n", (re::DynamicString *)v74);
        LOBYTE(v66[0]) = 1;
        LOBYTE(v7re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
        char v65 = 1;
        re::renderGraphResourceSetupToString(v74, a3, a4, v66, &v73, &v65, (re::DynamicString *)&v79);
        if (BYTE8(v79)) {
          uint64_t v58 = (const char *)v80;
        }
        else {
          uint64_t v58 = (char *)&v79 + 9;
        }
        if (BYTE8(v79)) {
          size_t v59 = *((void *)&v79 + 1) >> 1;
        }
        else {
          size_t v59 = BYTE8(v79) >> 1;
        }
        re::DynamicString::append(v17, v58, v59);
        if ((void)v79)
        {
          if (BYTE8(v79)) {
            (*(void (**)(void, void))(*(void *)v79 + 40))(v79, v80);
          }
          long long v79 = 0u;
          long long v80 = 0u;
        }
        if (*(void *)v74 && (v74[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v74 + 40))();
        }
        re::DynamicString::format((re::DynamicString *)"New Setup:\n", (re::DynamicString *)v74);
        LOBYTE(v66[0]) = 1;
        LOBYTE(v7re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
        char v65 = 1;
        re::renderGraphResourceSetupToString(v74, a3, a5, v66, &v73, &v65, (re::DynamicString *)&v79);
        if (BYTE8(v79)) {
          uint64_t v60 = (const char *)v80;
        }
        else {
          uint64_t v60 = (char *)&v79 + 9;
        }
        if (BYTE8(v79)) {
          size_t v61 = *((void *)&v79 + 1) >> 1;
        }
        else {
          size_t v61 = BYTE8(v79) >> 1;
        }
        re::DynamicString::append(v17, v60, v61);
        if ((void)v79)
        {
          if (BYTE8(v79)) {
            (*(void (**)(void, void))(*(void *)v79 + 40))(v79, v80);
          }
          long long v79 = 0u;
          long long v80 = 0u;
        }
        if (*(void *)v74 && (v74[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v74 + 40))();
        }
        if (v67 && (v68 & 1) != 0) {
          (*(void (**)(void))(*(void *)v67 + 40))();
        }
        uint64_t result = v71;
        if ((void)v71)
        {
          if (BYTE8(v71)) {
            uint64_t result = (*(uint64_t (**)(void))(*(void *)v71 + 40))();
          }
        }
        break;
      case 5:
        re::DynamicString::format((re::DynamicString *)"The new setup has a threadgroup memory length of %zu but the old setup has a threadgroup memory length of %zu.\n", (re::DynamicString *)&v79, *(void *)(a5 + 176), *(void *)(a4 + 176));
        goto LABEL_116;
      case 6:
        unsigned int v43 = *(unsigned __int8 *)(a5 + 184) - 1;
        if (v43 > 2) {
          long long v44 = "Automatic";
        }
        else {
          long long v44 = off_264BE5830[(char)v43];
        }
        unsigned int v50 = *(unsigned __int8 *)(a4 + 184) - 1;
        if (v50 > 2) {
          uint64_t v51 = "Automatic";
        }
        else {
          uint64_t v51 = off_264BE5830[(char)v50];
        }
        re::DynamicString::format((re::DynamicString *)"The new setup has tile size overridden to %s but the old setup has a tile sizeoverridden to %s.\n", (re::DynamicString *)&v79, v44, v51);
        goto LABEL_116;
      case 7:
        long long v45 = " has";
        if (*(unsigned char *)(a5 + 171)) {
          uint64_t v46 = " has";
        }
        else {
          uint64_t v46 = " doesn't have";
        }
        if (!*(unsigned char *)(a4 + 171)) {
          long long v45 = " doesn't have";
        }
        re::DynamicString::format((re::DynamicString *)"The new setup%s VRR enabled but the old setup%s VRR enabled.\n", (re::DynamicString *)&v79, v46, v45);
        goto LABEL_116;
      case 8:
        size_t v47 = " has";
        if (*(unsigned char *)(a5 + 169)) {
          uint64_t v48 = " has";
        }
        else {
          uint64_t v48 = " doesn't have";
        }
        if (!*(unsigned char *)(a4 + 169)) {
          size_t v47 = " doesn't have";
        }
        re::DynamicString::format((re::DynamicString *)"The new setup%s custom encoders but the old setup%s custom encoders.\n", (re::DynamicString *)&v79, v48, v47);
        goto LABEL_116;
      case 9:
        id v49 = "The old setup has a depth step but the new setup doesn't.\n";
        goto LABEL_115;
      case 10:
        id v49 = "The old setup has a stencil step but the new setup doesn't.\n";
        goto LABEL_115;
      case 11:
        re::DynamicString::format((re::DynamicString *)"The old setup writes to the resource at attachment index %d and the new setup is trying to read from the same attachment index so the nodes can't be combined. This is because waits happen before an encoder and fence updates happen at the end of an encoder.\n", (re::DynamicString *)&v79, *a7, v63);
        goto LABEL_116;
      case 12:
        id v49 = "The old setup and the new setup have mismatched visibility buffers.\n";
        goto LABEL_115;
      case 13:
        id v49 = "The old setup and the new setup have mismatched encoder types.\n";
        goto LABEL_115;
      case 14:
        id v49 = "The old setup and the new setup have mismatched write protection options.\n";
        goto LABEL_115;
      default:
        goto LABEL_125;
    }
  }
  return result;
}

re::RenderGraphEncoderSplitLogBuffer *re::RenderGraphEncoderSplitLogBuffer::RenderGraphEncoderSplitLogBuffer(re::RenderGraphEncoderSplitLogBuffer *this, const char *a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  re::Defaults::intValue((re::Defaults *)"encoderSplitLogging", a2, (uint64_t)v9);
  int v3 = LOBYTE(v9[0]);
  int v4 = DWORD1(v9[0]);
  *((_DWORD *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::setCapacity(this, 0xAuLL);
    if (*((void *)this + 1))
    {
      unint64_t v7 = 0;
      do
      {
        memset(v9, 0, sizeof(v9));
        re::DynamicString::setCapacity(v9, 0);
        re::DynamicString::setCapacity(v9, 0x400uLL);
        re::DynamicArray<re::DynamicString>::add(this, (re::DynamicString *)v9);
        uint64_t v6 = *(_anonymous_namespace_ **)&v9[0];
        if (*(void *)&v9[0] && (BYTE8(v9[0]) & 1) != 0) {
          uint64_t v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v9[0] + 40))();
        }
        ++v7;
      }
      while (*((void *)this + 1) > v7);
    }
  }
  return this;
}

void *re::ShadowTileManager::releaseTile(void *a1, unsigned __int16 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v2 = *a2;
  unint64_t v3 = a1[7];
  if (v3 <= v2)
  {
    memset(v7, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v8 = 136315906;
    long long v9 = "operator[]";
    __int16 v10 = 1024;
    int v11 = 789;
    __int16 v12 = 2048;
    unint64_t v13 = v2;
    __int16 v14 = 2048;
    unint64_t v15 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  for (uint64_t i = 0; i != 56; i += 14)
  {
    BOOL v5 = &v7[i];
    v5[22] = 0uLL;
    v5[23] = 0uLL;
    v5[20] = 0uLL;
    v5[21] = 0uLL;
    v5[18] = 0uLL;
    v5[19] = 0uLL;
    v5[25] = 0uLL;
    v5[26] = 0uLL;
    v5[27] = 0uLL;
    v5[28] = 0uLL;
  }
  LOWORD(v7[0]) = v2;
  return re::DynamicArray<unsigned short>::add(a1, v7);
}

void *re::ShadowTileManager::acquireTile@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = this;
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = this[2];
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = *(unsigned __int16 *)(this[4] + 2 * v5);
    this[2] = v5;
    ++*((_DWORD *)this + 6);
    unint64_t v7 = this[7];
    if (v7 <= v6)
    {
      memset(__src, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      uint64_t v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = v6;
      __int16 v31 = 2048;
      unint64_t v32 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = this[9] + 1792 * v6;
    int v9 = (unsigned __int16)(*(_WORD *)(v8 + 1776))++ + 1;
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + 2) = v6 | (v9 << 16);
  }
  else
  {
    unint64_t v10 = this[7];
    if (v10 - 2041 > 0xFFFFFFFFFFFFF805)
    {
      int v11 = this + 5;
      memset(__src, 0, 56);
      bzero(&__src[15], 0x394uLL);
      uint64_t v13 = 0;
      memset(&__src[4], 0, 164);
      do
      {
        __int16 v14 = &__src[v13];
        v14[22] = 0uLL;
        v14[23] = 0uLL;
        v14[20] = 0uLL;
        v14[21] = 0uLL;
        v14[18] = 0uLL;
        v14[19] = 0uLL;
        v14[25] = 0uLL;
        v14[26] = 0uLL;
        v13 += 14;
        v14[27] = 0uLL;
        v14[28] = 0uLL;
      }
      while (v13 != 56);
      LODWORD(__src[73]) = 0;
      memset(&__src[74], 0, 72);
      memset(&__src[79], 0, 81);
      __src[85] = vdupq_n_s32(0x7F800000u);
      *(void *)&long long v15 = 0x7F0000007FLL;
      *((void *)&v15 + 1) = 0x7F0000007FLL;
      __src[86] = v15;
      DWORD2(__src[110]) = 0;
      LOWORD(__src[111]) = 0;
      memset(&__src[87], 0, 374);
      unint64_t v16 = v10;
      unint64_t v17 = v2[6];
      if (v10 >= v17)
      {
        if (v17 < v10 + 1)
        {
          if (*v11)
          {
            uint64_t v18 = 2 * v17;
            BOOL v19 = v17 == 0;
            unint64_t v20 = 8;
            if (!v19) {
              unint64_t v20 = v18;
            }
            if (v20 <= v10 + 1) {
              unint64_t v21 = v10 + 1;
            }
            else {
              unint64_t v21 = v20;
            }
            re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v2 + 5, v21);
          }
          else
          {
            re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v2 + 5, v10 + 1);
            ++*((_DWORD *)v2 + 16);
          }
        }
        unint64_t v16 = v2[7];
      }
      this = memcpy((void *)(v2[9] + 1792 * v16), __src, 0x700uLL);
      uint64_t v22 = v2[7];
      v2[7] = v22 + 1;
      ++*((_DWORD *)v2 + 16);
      uint64_t v23 = v2[9] + 1792 * v22;
      *(unsigned char *)a2 = 1;
      *(_DWORD *)(a2 + 2) = (unsigned __int16)v10 | (*(unsigned __int16 *)(v23 + 1776) << 16);
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
  }
  return this;
}

void *re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x700uLL))
        {
          uint64_t v2 = 1792 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 1792 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              id v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 1792 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1792, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::logAttributeIndexExceedsLimit(re *a1, uint64_t a2, int a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    unint64_t v7 = (uint64_t *)*((void *)a1 + 5);
    if (v7[306]) {
      uint64_t v8 = v7[307];
    }
    else {
      uint64_t v8 = (uint64_t)v7 + 2449;
    }
    uint64_t v9 = *v7;
    if (v7[310]) {
      uint64_t v10 = v7[311];
    }
    else {
      uint64_t v10 = (uint64_t)v7 + 2481;
    }
    if (*(void *)(a2 + 8)) {
      uint64_t v11 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v11 = a2 + 9;
    }
    v12[0] = 67110402;
    v12[1] = 30;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 2080;
    uint64_t v16 = v9;
    __int16 v17 = 2080;
    uint64_t v18 = v8;
    __int16 v19 = 2080;
    uint64_t v20 = v10;
    __int16 v21 = 2080;
    uint64_t v22 = v11;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Attribute index exceeds limit. Maximum allowed index is %d but received index is %d. technique=%s vs=%s fs=%s fc=%s", (uint8_t *)v12, 0x36u);
  }
}

void re::makeAPIFunctionAsync(uint64_t a1, char *a2, void *a3, void *a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = a1 + 144;
  id v18 = a4;
  re::APIFunctionCache::getOrCreateAPIFunction(v17, a2, a1, a9, a10, a3, (dispatch_group_t *)&v18, a5, a6, a7, a8);
}

void re::makeMetalPrivateLinkedFunctionsAsync(uint64_t *a1, void *a2, uint64_t a3, void *a4, dispatch_group_t *a5, unsigned int a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  if (a3 == 1) {
    uint64_t v16 = *a2 + 32;
  }
  else {
    uint64_t v16 = *a2 + 56;
  }
  uint64_t v17 = *(uint64_t **)(v16 + 8);
  if (v17)
  {
    char v18 = 0;
    __int16 v19 = (int *)(*(void *)(v16 + 16) + 56);
    uint64_t v20 = *(void *)(v16 + 8);
    do
    {
      int v21 = *v19;
      v19 += 36;
      v18 |= v21;
      --v20;
    }
    while (v20);
  }
  else
  {
    char v18 = 0;
  }
  if (v18) {
    uint64_t v17 = (uint64_t *)((char *)v17 + 75);
  }
  if ((v18 & 2) != 0) {
    uint64_t v17 = (uint64_t *)((char *)v17 + 61);
  }
  if ((v18 & 0x20) != 0) {
    uint64_t v17 = (uint64_t *)((char *)v17 + 22);
  }
  if ((v18 & 4) != 0) {
    uint64_t v17 = (uint64_t *)((char *)v17 + 68);
  }
  if ((v18 & 8) != 0) {
    v17 += 7;
  }
  char v117 = v18;
  if ((v18 & 0x10) != 0) {
    uint64_t v22 = (uint64_t *)((char *)v17 + 13);
  }
  else {
    uint64_t v22 = v17;
  }
  a8[1] = v22;
  if (v22)
  {
    if ((unint64_t)v22 >> 61) {
      goto LABEL_86;
    }
    a8[2] = v24;
    if (!v24)
    {
LABEL_87:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    uint64_t v26 = v24;
    if (v22 != (uint64_t *)1)
    {
      bzero(v24, 8 * (void)v22 - 8);
      v26 += (void)v22 - 1;
    }
    *uint64_t v26 = 0;
  }
  long long v122 = (id *)a5;
  long long v123 = a2;
  long long v121 = a4;
  uint64_t v127 = a7;
  unsigned int v126 = a6;
  uint64_t v124 = (uint64_t)a8;
  unint64_t v27 = 0;
  if (*(void *)(v16 + 8))
  {
    uint64_t v118 = v16;
    int v28 = a1;
    while (1)
    {
      uint64_t v22 = *(uint64_t **)(v16 + 16);
      __int16 v29 = &v22[18 * v27];
      id v30 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
      uint64_t v31 = v29[9];
      if (v31)
      {
        uint64_t v32 = v31 << 6;
        uint64_t v33 = (unsigned __int16 *)(v29[10] + 32);
        do
        {
          objc_msgSend(v30, sel_setConstantValue_type_atIndex_, *((void *)v33 + 3), *v33, v33[1]);
          v33 += 32;
          v32 -= 64;
        }
        while (v32);
      }
      long long v120 = &v22[18 * v27];
      re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v28[7], &v129);
      objc_msgSend(v129, sel_setName_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v120[4], 4));
      if (!re::StringID::operator==(v120 + 3, v120 + 1)) {
        objc_msgSend(v129, sel_setSpecializedName_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v22[18 * v27 + 2], 4));
      }
      objc_msgSend(v129, sel_setConstantValues_, v30);
      id location = 0;
      if (v22[18 * v27 + 6])
      {
        unint64_t v34 = *(void *)(a10 + 8);
        if (v34 <= v27)
        {
          uint64_t v130 = 0;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          long long v142 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v134 = 136315906;
          uint64_t v135 = "operator[]";
          __int16 v136 = 1024;
          int v137 = 468;
          __int16 v138 = 2048;
          unint64_t v139 = v27;
          __int16 v140 = 2048;
          unint64_t v141 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_85:
          uint64_t v130 = 0;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          long long v142 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v134 = 136315906;
          uint64_t v135 = "operator[]";
          __int16 v136 = 1024;
          int v137 = 468;
          __int16 v138 = 2048;
          unint64_t v139 = v27;
          __int16 v140 = 2048;
          unint64_t v141 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_86:
          re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v22);
          _os_crash();
          __break(1u);
          goto LABEL_87;
        }
        *(void *)(*(void *)(a10 + 16) + 8 * v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
        uint64_t CGColorSpaceFromWorkingColorGamut = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(*(unsigned __int8 *)v28[19]);
      }
      else
      {
        uint64_t v36 = &v22[18 * v27];
        uint64_t v38 = v36[5];
        uint64_t v37 = v36 + 5;
        uint64_t v39 = v28[7] + 264;
        *(void *)&long long v142 = v38;
        uint64_t v40 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v39, (uint64_t *)&v142);
        if (v40) {
          unsigned int v41 = (id *)(v40 + 8);
        }
        else {
          unsigned int v41 = 0;
        }
        re::ObjCObject::operator=(&location, v41);
        uint64_t v22 = a9;
        unint64_t v42 = *a9;
        *a9 = ((v42 << 6) + (v42 >> 2) + [location hash] - 0x61C8864680B583E9) ^ v42;
        unint64_t v34 = *(void *)(a10 + 8);
        if (v34 <= v27) {
          goto LABEL_85;
        }
        uint64_t CGColorSpaceFromWorkingColorGamut = 0;
        *(void *)(*(void *)(a10 + 16) + 8 * v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *v37;
      }
      dispatch_group_enter(*a5);
      uint64_t v43 = v28[7];
      id v44 = (id)v28[23];
      id v45 = location;
      id v46 = v129;
      size_t v47 = *a5;
      uint64_t v48 = v47;
      uint64_t v49 = *v123;
      if (*v123) {
        size_t v47 = (re *)(id)(v49 + 8);
      }
      uint64_t v132 = re::globalAllocators(v47)[2];
      uint64_t v133 = 0;
      uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v132 + 32))(v132, 96, 0);
      *(void *)uint64_t v50 = &unk_26E70EAA8;
      *(void *)(v50 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v44;
      *(void *)(v50 + 16) = CGColorSpaceFromWorkingColorGamut;
      *(void *)(v50 + 24) = v45;
      *(void *)(v50 + 32) = v46;
      *(void *)(v50 + 40) = v48;
      *(void *)(v50 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v27;
      *(void *)(v50 + 56) = a7;
      *(unsigned char *)(v50 + 64) = v126;
      *(void *)(v50 + 72) = v120;
      *(void *)(v50 + 80) = v124;
      *(void *)(v50 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v49;
      uint64_t v133 = v50;
      re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v43, v126, a7, (uint64_t)v131);
      re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v131);

      if (v129) {
      a5 = (dispatch_group_t *)v122;
      }
      int v28 = a1;
      if (v30) {

      }
      ++v27;
      uint64_t v16 = v118;
      if (v27 >= *(void *)(v118 + 8)) {
        goto LABEL_52;
      }
    }
  }
  int v28 = a1;
LABEL_52:
  uint64_t v51 = v28[7];
  uint64_t v119 = v51;
  if (v117)
  {
    uint64_t v53 = 0;
    uint64_t v54 = v28[7];
    do
    {
      unint64_t v55 = v27;
      uint64_t v56 = realitykit_shader_api::textureFunctions[v53];
      id v57 = *v122;
      uint64_t v58 = v54;
      id v59 = *(id *)(v54 + 248);
      ++v27;
      re::makeAPIFunctionAsync(a1[7], v56, v121, v57, v126, v127, v124, v55, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      uint64_t v54 = v58;
      ++v53;
    }
    while (v53 != 12);
    for (uint64_t i = 0; i != 9; ++i)
    {
      unint64_t v61 = v27;
      unint64_t v62 = realitykit_shader_api::materialFunctions[i];
      id v63 = *v122;
      id v64 = *(id *)(v54 + 248);
      ++v27;
      re::makeAPIFunctionAsync(a1[7], v62, v121, v63, v126, v127, v124, v61, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      uint64_t v54 = v58;
    }
    uint64_t v65 = 0;
    uint64_t v51 = v58;
    do
    {
      float32x4_t v66 = realitykit_shader_api::surfaceFunctions[v65];
      id v67 = *v122;
      id v68 = *(id *)(v51 + 248);
      unint64_t v52 = v27 + 1;
      re::makeAPIFunctionAsync(a1[7], v66, v121, v67, v126, v127, v124, v27, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      uint64_t v51 = v119;
      ++v65;
      ++v27;
    }
    while (v65 != 54);
  }
  else
  {
    unint64_t v52 = v27;
  }
  char v69 = v117;
  if ((v117 & 2) != 0)
  {
    uint64_t v70 = 0;
    uint64_t v71 = v51;
    do
    {
      unint64_t v72 = v52;
      uint64_t v73 = realitykit_shader_api::surface_privateFunctions[v70];
      id v74 = *v122;
      id v75 = *(id *)(v71 + 248);
      ++v52;
      re::makeAPIFunctionAsync(a1[7], v73, v121, v74, v126, v127, v124, v72, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      ++v70;
    }
    while (v70 != 60);
    id v76 = *v122;
    id v77 = *(id *)(v71 + 248);
    re::makeAPIFunctionAsync(a1[7], "realitykit::texture_private::api::custom_at", v121, v76, v126, v127, v124, v52, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

    ++v52;
    char v69 = v117;
  }
  if ((v69 & 0x20) != 0)
  {
    for (uint64_t j = 0; j != 22; ++j)
    {
      long long v80 = realitykit_shader_api::uisurface_privateFunctions[j];
      id v81 = *v122;
      id v82 = *(id *)(v119 + 248);
      unint64_t v78 = v52 + 1;
      re::makeAPIFunctionAsync(a1[7], v80, v121, v81, v126, v127, v124, v52, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      ++v52;
    }
  }
  else
  {
    unint64_t v78 = v52;
  }
  if ((v117 & 4) != 0)
  {
    for (uint64_t k = 0; k != 12; ++k)
    {
      unint64_t v85 = v78;
      float32x4_t v86 = realitykit_shader_api::textureFunctions[k];
      id v87 = *v122;
      id v88 = *(id *)(v119 + 248);
      ++v78;
      re::makeAPIFunctionAsync(a1[7], v86, v121, v87, v126, v127, v124, v85, *(void *)(*v123 + 144), *(void *)(*v123 + 136));
    }
    for (uint64_t m = 0; m != 9; ++m)
    {
      unint64_t v90 = v78;
      long long v91 = realitykit_shader_api::materialFunctions[m];
      id v92 = *v122;
      id v93 = *(id *)(v119 + 248);
      ++v78;
      re::makeAPIFunctionAsync(a1[7], v91, v121, v92, v126, v127, v124, v90, *(void *)(*v123 + 144), *(void *)(*v123 + 136));
    }
    for (uint64_t n = 0; n != 47; ++n)
    {
      long long v95 = realitykit_shader_api::geometry_modifierFunctions[n];
      id v96 = *v122;
      id v97 = *(id *)(v119 + 248);
      unint64_t v83 = v78 + 1;
      re::makeAPIFunctionAsync(a1[7], v95, v121, v96, v126, v127, v124, v78, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      ++v78;
    }
  }
  else
  {
    unint64_t v83 = v78;
  }
  char v98 = v117;
  if ((v117 & 8) != 0)
  {
    for (iuint64_t i = 0; ii != 55; ++ii)
    {
      unint64_t v100 = v83;
      uint64_t v101 = realitykit_shader_api::geometry_modifier_privateFunctions[ii];
      id v102 = *v122;
      id v103 = *(id *)(v119 + 248);
      ++v83;
      re::makeAPIFunctionAsync(a1[7], v101, v121, v102, v126, v127, v124, v100, *(void *)(*v123 + 144), *(void *)(*v123 + 136));
    }
    id v104 = *v122;
    id v105 = *(id *)(v119 + 248);
    re::makeAPIFunctionAsync(a1[7], "realitykit::texture_private::api::custom_at", v121, v104, v126, v127, v124, v83, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

    ++v83;
    char v98 = v117;
  }
  uint64_t v106 = v127;
  uint64_t v107 = v126;
  float32x4_t v108 = v121;
  if ((v98 & 0x10) != 0)
  {
    for (juint64_t j = 0; jj != 13; ++jj)
    {
      long long v110 = v108;
      uint64_t v111 = v107;
      uint64_t v112 = v106;
      int v113 = realitykit_shader_api::ui_geometry_modifier_privateFunctions[jj];
      id v114 = *v122;
      id v115 = *(id *)(v119 + 248);
      uint64_t v116 = v113;
      uint64_t v106 = v112;
      uint64_t v107 = v111;
      float32x4_t v108 = v110;
      re::makeAPIFunctionAsync(a1[7], v116, v110, v114, v107, v106, v124, v83, *(void *)(*v123 + 144), *(void *)(*v123 + 136));

      ++v83;
    }
  }
}

BOOL re::validateCachedPipelineState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56) + 264;
  uint64_t v25 = *(void *)(*(void *)a2 + 160);
  uint64_t v5 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4, &v25);
  uint64_t v6 = *(void *)(a1 + 56) + 264;
  uint64_t v25 = *(void *)(*(void *)a2 + 168);
  uint64_t v7 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6, &v25);
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = *(void *)(*(void *)a2 + 200);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)v8[26];
    uint64_t v12 = 8 * v9;
    do
    {
      uint64_t v13 = *(void *)(a1 + 56) + 264;
      uint64_t v25 = *v11;
      uint64_t v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v13, &v25);
      if (v14) {
        v10 ^= (v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + [*(id *)(v14 + 8) hash];
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
    uint64_t v8 = *(void **)a2;
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v15 = v8[28];
  if (!v15)
  {
    unint64_t v16 = 0;
    if (v5) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v21 = 0;
    if (v7) {
      goto LABEL_15;
    }
LABEL_18:
    uint64_t v22 = 0;
    goto LABEL_19;
  }
  unint64_t v16 = 0;
  uint64_t v17 = (uint64_t *)v8[29];
  uint64_t v18 = 8 * v15;
  do
  {
    uint64_t v19 = *(void *)(a1 + 56) + 264;
    uint64_t v25 = *v17;
    uint64_t v20 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v19, &v25);
    if (v20) {
      v16 ^= (v16 << 6) - 0x61C8864680B583E9 + (v16 >> 2) + [*(id *)(v20 + 8) hash];
    }
    ++v17;
    v18 -= 8;
  }
  while (v18);
  if (!v5) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v21 = [*(id *)(v5 + 8) hash];
  if (!v7) {
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v22 = [*(id *)(v7 + 8) hash];
LABEL_19:
  uint64_t v23 = *(void **)a2;
  return v22 == *(void *)(*(void *)a2 + 152) && v21 == v23[18] && v16 == v23[23] && v10 == v23[22];
}

uint64_t re::compileCachedPipelineStateAsync@<X0>(re *a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X8>)
{
  unint64_t v4 = (unint64_t)a1;
  uint64_t v325 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 256, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v7, 0);
  *(void *)uint64_t v8 = &unk_26E70EC58;
  *(_DWORD *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_DWORD *)(v8 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(v8 + 61) = 0;
  *(void *)(v8 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(void *)a3 = v8;
  uint64_t v9 = re::internal::enableSignposts(0, 0);
  if (v9) {
    uint64_t v9 = kdebug_trace();
  }
  unsigned int v249 = a2;
  atomic_store(1u, (unsigned __int8 *)(v7 + 240));
  ++*(void *)(*(void *)v4 + 48);
  unint64_t v10 = *(char ***)(v4 + 8);
  uint64_t v11 = *(unsigned int **)(v4 + 24);
  uint64_t v12 = *(char ***)(v4 + 64);
  int v260 = *(unsigned __int8 *)(v4 + 88);
  uint64_t v245 = *(void *)(v4 + 40);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94890, memory_order_acquire) & 1) == 0) {
    goto LABEL_327;
  }
  while (2)
  {
    long long v270 = 0;
    uint64_t v271 = 0;
    uint64_t v269 = 0;
    re::DynamicString::setCapacity(&v268, 0x200uLL);
    uint64_t v13 = *(void *)(v4 + 80);
    if (v13)
    {
      uint64_t v14 = *(unsigned __int16 **)(v4 + 72);
      uint64_t v15 = (uint64_t)&v14[5 * v13];
      while (1)
      {
        unint64_t v16 = v12;
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = (char **)v16[1];
          unint64_t v18 = (unint64_t)v17[4];
          if (v16) {
            BOOL v19 = v18 == 0;
          }
          else {
            BOOL v19 = 0;
          }
        }
        while (v19);
        uint64_t v20 = (unsigned __int16 *)v14[2];
        if (v18 <= (unint64_t)v20) {
          break;
        }
        uint64_t v21 = v17[5];
        if (v14[3])
        {
          int VertexFormatFromDataType = re::getVertexFormatFromDataType((re *)v14[3]);
          int v23 = -1;
          int v24 = 1;
          unsigned __int8 v25 = 1;
        }
        else
        {
          uint64_t v26 = &v21[16 * (void)v20];
          int v23 = *(unsigned __int16 *)v26;
          int VertexFormatFromDataType = v26[12];
          unsigned __int8 v27 = v26[5];
          if (*((unsigned char *)v14 + 8)) {
            int v24 = 0;
          }
          else {
            int v24 = *((unsigned __int16 *)v26 + 1);
          }
          if (*((unsigned char *)v14 + 8)) {
            unsigned __int8 v25 = 0;
          }
          else {
            unsigned __int8 v25 = v27;
          }
        }
        int v28 = v14[1];
        int v29 = *v14;
        v14 += 5;
        re::DynamicString::appendf((re::DynamicString *)&v268, "(att=%d fmt=%d off=%d lyt=%d str=%d sf=%d sr=%d) ", v28, VertexFormatFromDataType, *(_DWORD *)&v21[16 * (void)v20 + 8], v29, v23, v25, v24);
        if (v14 == (unsigned __int16 *)v15) {
          goto LABEL_21;
        }
      }
      v322[0] = 0;
      memset(v280, 0, sizeof(v280));
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v324 = 136315906;
      *(void *)&v324[4] = "operator[]";
      *(_WORD *)&v324[12] = 1024;
      *(_DWORD *)&v324[14] = 476;
      *(_WORD *)&v324[18] = 2048;
      *(void *)&v324[20] = v20;
      *(_WORD *)&v324[28] = 2048;
      *(void *)&v324[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_311;
    }
LABEL_21:
    WeakRetained = (re *)objc_loadWeakRetained((id *)(*(void *)(v4 + 40) + 2736));
    uint64_t v31 = 0;
    uint64_t v32 = (char *)WeakRetained - 8;
    if (!WeakRetained) {
      uint64_t v32 = 0;
    }
    uint64_t v33 = (const char *)*((void *)v32 + 178);
    unint64_t v257 = *v11;
    unint64_t v254 = v11[9];
    *(void *)char v251 = v11[10];
    unint64_t v34 = *(const char **)(v4 + 120);
    uint64_t v35 = *(const char **)(v4 + 128);
    uint64_t v36 = *(const char **)(v4 + 112);
    do
    {
      *(_OWORD *)((char *)&v311 + v31 * 4) = *(_OWORD *)&v11[v31 + 1];
      v31 += 4;
    }
    while (v31 != 8);
    uint64_t v37 = "NULL";
    if (!v33) {
      uint64_t v33 = "NULL";
    }
    __s = (char *)v33;
    if (v36) {
      uint64_t v38 = v36;
    }
    else {
      uint64_t v38 = "NULL";
    }
    uint64_t v248 = v38;
    if (v35) {
      uint64_t v39 = v35;
    }
    else {
      uint64_t v39 = "NULL";
    }
    __int16 v247 = v39;
    if (v34) {
      uint64_t v37 = v34;
    }
    id v241 = v10;
    uint64_t v243 = v37;
    int v239 = WeakRetained;
    id v240 = (unsigned __int16 *)a3;
    long long v253 = v12;
    if (*(void *)(v245 + 144))
    {
      uint64_t v40 = *(unsigned __int8 **)(v245 + 160);
      unsigned int v41 = (int *)(v40 + 4);
      unint64_t v42 = (int *)(v40 + 8);
      uint64_t v43 = (int *)(v40 + 12);
      id v44 = (int *)(v40 + 16);
      id v45 = (int *)(v40 + 20);
      id v46 = (int *)(v40 + 24);
    }
    else
    {
      unsigned int v41 = (int *)(v245 + 84);
      unint64_t v42 = (int *)(v245 + 88);
      uint64_t v43 = (int *)(v245 + 92);
      id v44 = (int *)(v245 + 96);
      id v45 = (int *)(v245 + 100);
      id v46 = (int *)(v245 + 104);
      uint64_t v40 = (unsigned __int8 *)(v245 + 72);
    }
    int v47 = *v45;
    int v48 = *v43;
    int v49 = *v41;
    int v50 = *v42;
    int v51 = *v44;
    int v52 = *v46;
    int v53 = *v40;
    __int16 v264 = (re *)v4;
    uint64_t v244 = v11;
    if (*(unsigned char *)(v4 + 56) && !*(unsigned char *)(v4 + 57)
      || (*(unsigned char *)(*(void *)(v4 + 40) + 2845) ? (BOOL v54 = _MergedGlobals_380 == 0) : (BOOL v54 = 0), !v54))
    {
      unint64_t v55 = *re::graphicsLogObjects(WeakRetained);
      BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
      if (v56)
      {
        uint64_t v57 = *(void *)(v4 + 104);
        uint64_t v58 = *(void **)(v4 + 32);
        uint64_t v59 = **(void **)(v4 + 40);
        uint64_t v60 = v58[3];
        unint64_t v61 = *(void **)(v58[2] + 8);
        if (v60) {
          unint64_t v62 = *(const char **)(v60 + 8);
        }
        else {
          unint64_t v62 = "NONE";
        }
        int v63 = *(unsigned __int8 *)(v4 + 57);
        id v64 = (void *)v58[21];
        if (v269) {
          uint64_t v65 = v270;
        }
        else {
          uint64_t v65 = (char *)&v269 + 1;
        }
        *(_DWORD *)long long buf = 134223874;
        *(void *)&uint8_t buf[4] = v57;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = __s;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&buf[24] = v59;
        LOWORD(v280[0]) = 2082;
        *(id *)((char *)v280 + 2) = v61;
        WORD1(v280[1]) = 2082;
        *(id *)((char *)&v280[1] + 4) = (id)v62;
        WORD2(v280[2]) = 1024;
        *(_DWORD *)((char *)&v280[2] + 6) = v63;
        WORD1(v280[3]) = 2048;
        *(id *)((char *)&v280[3] + 4) = v64;
        WORD2(v280[4]) = 1024;
        *(_DWORD *)((char *)&v280[4] + 6) = v254;
        WORD1(v280[5]) = 1024;
        HIDWORD(v280[5]) = v251[0];
        __int16 v281 = 1024;
        int v282 = v257;
        __int16 v283 = 1024;
        int v284 = v260;
        __int16 v285 = 1024;
        unsigned int v286 = v249;
        __int16 v287 = 1024;
        unsigned int v288 = v311;
        __int16 v289 = 1024;
        unsigned int v290 = v312;
        __int16 v291 = 1024;
        unsigned int v292 = v313;
        __int16 v293 = 1024;
        unsigned int v294 = v314;
        __int16 v295 = 1024;
        unsigned int v296 = v315;
        __int16 v297 = 1024;
        unsigned int v298 = v316;
        __int16 v299 = 1024;
        unsigned int v300 = v317;
        __int16 v301 = 1024;
        unsigned int v302 = v318;
        __int16 v303 = 2082;
        unint64_t v304 = (char *)v65;
        __int16 v305 = 2082;
        v306 = v248;
        __int16 v307 = 2082;
        v308 = v243;
        __int16 v309 = 2082;
        v310 = v247;
        _os_log_impl(&dword_233120000, v55, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu name=%{public}s tech=%{public}s vtx=%{public}s frag=%{public}s ciar=%d fc=%zu dFmt=%d sFmt=%d sc=%d pt=%d sof=%d pxFmt=%d %d %d %d %d %d %d %d vd=%{public}snode=%{public}s type=%{public}s graph=%{public}s ", buf, 0xBAu);
      }
      float32x4_t v66 = *re::graphicsLogObjects((re *)v56);
      BOOL v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        int v68 = 0;
        int v69 = *(unsigned __int8 *)(v245 + 75);
        if (*(unsigned char *)(v245 + 75)) {
          BOOL v70 = *(unsigned char *)(v245 + 76) == 0;
        }
        else {
          BOOL v70 = 1;
        }
        int v71 = !v70;
        if (v53) {
          int v72 = v49;
        }
        else {
          int v72 = 0;
        }
        uint64_t v73 = *(void *)(v4 + 104);
        if (v53) {
          int v74 = v50;
        }
        else {
          int v74 = 0;
        }
        if (v53) {
          int v75 = v48;
        }
        else {
          int v75 = 0;
        }
        if (v53) {
          int v76 = v51;
        }
        else {
          int v76 = 0;
        }
        if (v53) {
          int v77 = v47;
        }
        else {
          int v77 = 0;
        }
        if (v53) {
          int v78 = v52;
        }
        else {
          int v78 = 0;
        }
        if ((v249 & 2) == 0) {
          int v68 = *(_DWORD *)(v245 + 108);
        }
        *(_DWORD *)long long buf = 134220544;
        *(void *)&uint8_t buf[4] = v73;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v69;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v71;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v53;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v280[0]) = v72;
        WORD2(v280[0]) = 1024;
        *(_DWORD *)((char *)v280 + 6) = v74;
        WORD1(v280[1]) = 1024;
        HIDWORD(v280[1]) = v75;
        LOWORD(v280[2]) = 1024;
        *(_DWORD *)((char *)&v280[2] + 2) = v76;
        HIWORD(v280[2]) = 1024;
        LODWORD(v280[3]) = v77;
        WORD2(v280[3]) = 1024;
        *(_DWORD *)((char *)&v280[3] + 6) = v78;
        WORD1(v280[4]) = 1024;
        HIDWORD(v280[4]) = v68;
        _os_log_impl(&dword_233120000, v66, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu a2c=%d a21=%d be=%d rgbS=%d rgbD=%d rgbB=%d aS=%d aD=%d aB=%d wm=%d ", buf, 0x48u);
      }
      memset(&buf[8], 0, 24);
      long long v79 = (re *)re::DynamicString::setCapacity(buf, 0x200uLL);
      uint64_t v80 = *(void *)(v4 + 32);
      uint64_t v81 = *(void *)(v80 + 136);
      if (v81)
      {
        int v82 = 0;
        uint64_t v83 = *(void *)(v80 + 144);
        uint64_t v84 = v81 << 6;
        do
        {
          if (*(unsigned char *)(v83 + 8)) {
            unint64_t v85 = *(const char **)(v83 + 16);
          }
          else {
            unint64_t v85 = (const char *)(v83 + 9);
          }
          uint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v83);
          long long v79 = (re *)re::DynamicString::appendf((re::DynamicString *)buf, "%s=%llu ", v85, As64Bits);
          if (++v82 == 20)
          {
            id v87 = *re::graphicsLogObjects(v79);
            long long v79 = (re *)os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT);
            if (v79)
            {
              uint64_t v88 = *((void *)v264 + 13);
              uint64_t v89 = *(void *)(*((void *)v264 + 4) + 168);
              if (buf[8]) {
                unint64_t v90 = *(uint8_t **)&buf[16];
              }
              else {
                unint64_t v90 = &buf[9];
              }
              *(_DWORD *)v324 = 134218498;
              *(void *)&v324[4] = v88;
              *(_WORD *)&v324[12] = 2048;
              *(void *)&v324[14] = v89;
              *(_WORD *)&v324[22] = 2082;
              *(void *)&v324[24] = v90;
              _os_log_impl(&dword_233120000, v87, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu fc=%zu %{public}s", v324, 0x20u);
            }
            if (buf[8])
            {
              *(void *)&uint8_t buf[8] = 1;
              long long v91 = *(uint8_t **)&buf[16];
            }
            else
            {
              buf[8] &= 1u;
              long long v91 = &buf[9];
            }
            int v82 = 0;
            uint8_t *v91 = 0;
          }
          v83 += 64;
          v84 -= 64;
        }
        while (v84);
      }
      if (buf[8]) {
        uint64_t v92 = *(void *)&buf[8] >> 1;
      }
      else {
        uint64_t v92 = buf[8] >> 1;
      }
      unint64_t v4 = (unint64_t)v264;
      if (v92)
      {
        id v93 = *re::graphicsLogObjects(v79);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v94 = *((void *)v264 + 13);
          uint64_t v95 = *(void *)(*((void *)v264 + 4) + 168);
          if (buf[8]) {
            id v96 = *(uint8_t **)&buf[16];
          }
          else {
            id v96 = &buf[9];
          }
          *(_DWORD *)v324 = 134218498;
          *(void *)&v324[4] = v94;
          *(_WORD *)&v324[12] = 2048;
          *(void *)&v324[14] = v95;
          *(_WORD *)&v324[22] = 2082;
          *(void *)&v324[24] = v96;
          _os_log_impl(&dword_233120000, v93, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu fc=%zu %{public}s", v324, 0x20u);
        }
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
      }
    }
    size_t v97 = strlen(__s);
    if (v97)
    {
      MurmurHash3_x64_128((uint64_t)__s, v97, 0, (unint64_t *)buf);
      uint64_t v98 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
    }
    else
    {
      uint64_t v98 = 0;
    }
    size_t v99 = strlen(**(const char ***)(v4 + 40));
    if (v99)
    {
      MurmurHash3_x64_128(**(void **)(v4 + 40), v99, 0, (unint64_t *)buf);
      unint64_t v100 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
    }
    else
    {
      unint64_t v100 = 0;
    }
    uint64_t v15 = (uint64_t)&v269 + 1;
    if (v269) {
      uint64_t v101 = v270;
    }
    else {
      uint64_t v101 = (char *)&v269 + 1;
    }
    size_t v102 = strlen(v101);
    if (v102)
    {
      MurmurHash3_x64_128((uint64_t)v101, v102, 0, (unint64_t *)buf);
      uint64_t v103 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
    }
    else
    {
      uint64_t v103 = 0;
    }
    unint64_t v104 = (((v98 - 0x61C8864680B583E9) << 6)
          - 0x61C8864680B583E9
          + ((unint64_t)(v98 - 0x61C8864680B583E9) >> 2)
          + (((v100 << 6) - 0x61C8864680B583E9 + (v100 >> 2) + v103) ^ v100)) ^ (v98 - 0x61C8864680B583E9);
    unint64_t v105 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v254 ^ (v254 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v254 ^ (v254 >> 30))) >> 27));
    unint64_t v106 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (*(void *)v251 ^ (*(void *)v251 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                   * (*(void *)v251 ^ (*(void *)v251 >> 30))) >> 27));
    unint64_t v107 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v257 ^ (v257 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v257 ^ (v257 >> 30))) >> 27));
    unint64_t v108 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v249) ^ ((0xBF58476D1CE4E5B9 * v249) >> 27));
    unint64_t v109 = ((v105 ^ (v105 >> 31)) - 0x61C8864680B583E9 + (v104 << 6) + (v104 >> 2)) ^ v104;
    unint64_t v110 = ((v107 ^ (v107 >> 31)) - 0x61C8864680B583E9 + ((v106 ^ (v106 >> 31)) << 6) + ((v106 ^ (v106 >> 31)) >> 2)) ^ v106 ^ (v106 >> 31);
    unint64_t v111 = ((((v108 ^ (v108 >> 31)) - 0x61C8864680B583E9 + (v110 << 6) + (v110 >> 2)) ^ v110)
          - 0x61C8864680B583E9
          + (v109 << 6)
          + (v109 >> 2)) ^ v109;
    unint64_t v112 = 0xBF58476D1CE4E5B9 * (v311 ^ ((unint64_t)v311 >> 30));
    unint64_t v113 = 0xBF58476D1CE4E5B9 * (v312 ^ ((unint64_t)v312 >> 30));
    unint64_t v114 = (0x94D049BB133111EBLL * (v113 ^ (v113 >> 27))) ^ ((0x94D049BB133111EBLL * (v113 ^ (v113 >> 27))) >> 31);
    unint64_t v115 = 0xBF58476D1CE4E5B9 * (v313 ^ ((unint64_t)v313 >> 30));
    unint64_t v116 = 0xBF58476D1CE4E5B9 * (v314 ^ ((unint64_t)v314 >> 30));
    unint64_t v117 = (((0x94D049BB133111EBLL * (v112 ^ (v112 >> 27))) ^ ((0x94D049BB133111EBLL * (v112 ^ (v112 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v111 << 6)
          + (v111 >> 2)) ^ v111;
    unint64_t v118 = (((0x94D049BB133111EBLL * (v115 ^ (v115 >> 27))) ^ ((0x94D049BB133111EBLL * (v115 ^ (v115 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v114 << 6)
          + (v114 >> 2)) ^ v114;
    unint64_t v119 = ((v117 << 6)
          - 0x61C8864680B583E9
          + (v117 >> 2)
          + ((((0x94D049BB133111EBLL * (v116 ^ (v116 >> 27))) ^ ((0x94D049BB133111EBLL * (v116 ^ (v116 >> 27))) >> 31))
            - 0x61C8864680B583E9
            + (v118 << 6)
            + (v118 >> 2)) ^ v118)) ^ v117;
    unint64_t v120 = 0xBF58476D1CE4E5B9 * (v315 ^ ((unint64_t)v315 >> 30));
    unint64_t v121 = 0xBF58476D1CE4E5B9 * (v316 ^ ((unint64_t)v316 >> 30));
    unint64_t v122 = (0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) ^ ((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) >> 31);
    unint64_t v123 = 0xBF58476D1CE4E5B9 * (v317 ^ ((unint64_t)v317 >> 30));
    unint64_t v124 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v318 ^ ((unint64_t)v318 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v318 ^ ((unint64_t)v318 >> 30))) >> 27));
    unint64_t v125 = (((0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) ^ ((0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v119 << 6)
          + (v119 >> 2)) ^ v119;
    unint64_t v126 = (((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) ^ ((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v122 << 6)
          + (v122 >> 2)) ^ v122;
    uint64_t v127 = ((((v124 ^ (v124 >> 31)) - 0x61C8864680B583E9 + (v126 << 6) + (v126 >> 2)) ^ v126)
          - 0x61C8864680B583E9
          + (v125 << 6)
          + (v125 >> 2)) ^ v125;
    if (v269) {
      uint64_t v128 = v270;
    }
    else {
      uint64_t v128 = (char *)&v269 + 1;
    }
    LOBYTE(v23re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(unsigned char *)(v4 + 57);
    re::REAnalyticsEventShaderCompilationRequest((re *)__s, **(const char ***)(v4 + 40), v248, v247, v243, (const char *)v257, (uint64_t)&v311, (unsigned int *)v254, v251[0], v249, (uint64_t)v128, v238, v127, *(unsigned char *)(v4 + 56));
    re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v241[7], &v267);
    uint64_t v129 = *(void *)(v4 + 48);
    if (v129) {
      objc_msgSend(v267, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v129, 4));
    }
    else {
      objc_msgSend(v267, sel_setLabel_, @"MeshPartRenderPipeline");
    }
    objc_msgSend(v267, sel_setRasterSampleCount_, *v11);
    objc_msgSend(v267, sel_setAlphaToCoverageEnabled_, *(unsigned __int8 *)(v245 + 75));
    if (*(unsigned char *)(v245 + 76)) {
      BOOL v130 = *(unsigned char *)(v245 + 75) != 0;
    }
    else {
      BOOL v130 = 0;
    }
    objc_msgSend(v267, sel_setAlphaToOneEnabled_, v130);
    if ((v260 - 1) > 3u) {
      uint64_t v131 = 1;
    }
    else {
      uint64_t v131 = qword_2343AE400[(char)(v260 - 1)];
    }
    objc_msgSend(v267, sel_setInputPrimitiveTopology_, v131);
    uint64_t v132 = *(void **)(v4 + 32);
    if (v132) {
      uint64_t v133 = v132 + 1;
    }
    a3 = (unint64_t)objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
    uint64_t v134 = v132[17];
    if (v134)
    {
      uint64_t v15 = v134 << 6;
      uint64_t v135 = (unsigned __int16 *)(v132[18] + 32);
      do
      {
        objc_msgSend((id)a3, sel_setConstantValue_type_atIndex_, *((void *)v135 + 3), *v135, v135[1]);
        v135 += 32;
        v15 -= 64;
      }
      while (v15);
    }
    if (!v260)
    {
      buf[0] = 1;
      objc_msgSend((id)a3, sel_setConstantValue_type_withName_, buf, 53, @"IsPointPrimitive");
    }
    uint64_t v246 = v132;
    char v136 = v249;
    if (*((unsigned char *)v241 + 302)) {
      objc_msgSend(v267, sel_setMaxVertexAmplificationCount_, 2);
    }
    id v242 = (id)a3;
    if (*(unsigned char *)(v4 + 56) && *(unsigned char *)(*(void *)(v4 + 40) + 2848))
    {
      objc_msgSend(v267, sel_setMaxVertexCallStackDepth_, 1);
      objc_msgSend(v267, sel_setSupportAddingVertexBinaryFunctions_, 1);
    }
    else
    {
      int v137 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(MEMORY[0x263F12A80], sel_alloc), sel_init);
      unint64_t v255 = v137;
      uint64_t v138 = *(void *)(v4 + 80);
      if (v138)
      {
        uint64_t v20 = (unsigned __int16 *)*((void *)v264 + 9);
        uint64_t v11 = (unsigned int *)&v280[1];
        unint64_t v10 = (char **)&buf[9];
        uint64_t v12 = (char **)&v324[9];
        *(void *)uint64_t v252 = &v20[5 * v138];
        while (1)
        {
          unint64_t v139 = v253;
          do
          {
            __int16 v140 = v139;
            unint64_t v139 = (char **)v139[1];
            uint64_t v14 = (unsigned __int16 *)v140[4];
            if (v139) {
              BOOL v141 = v14 == 0;
            }
            else {
              BOOL v141 = 0;
            }
          }
          while (v141);
          unint64_t v4 = v20[2];
          if ((unint64_t)v14 <= v4) {
            break;
          }
          long long v142 = v140[5];
          if (*v20 >= 0x1Fu)
          {
            int v261 = v140[5];
            memset(&v324[8], 0, 24);
            re::DynamicString::setCapacity(v324, 0x200uLL);
            uint64_t v143 = *((void *)v264 + 4);
            uint64_t v144 = *(void *)(v143 + 136);
            if (v144)
            {
              int v145 = 0;
              uint64_t v146 = *(void *)(v143 + 144);
              uint64_t v147 = v146 + (v144 << 6);
              do
              {
                re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)v146);
                LODWORD(v280[0]) = *(_DWORD *)(v146 + 32);
                re::FixedArray<unsigned char>::FixedArray(&v280[1], (uint64_t *)(v146 + 40));
                if (buf[8]) {
                  long long v148 = *(const char **)&buf[16];
                }
                else {
                  long long v148 = (const char *)&buf[9];
                }
                uint64_t v149 = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)buf);
                re::DynamicString::appendf((re::DynamicString *)v324, "%s=%llu ", v148, v149);
                if (++v145 == 20)
                {
                  re::logAttributeIndexExceedsLimit(v264, (uint64_t)v324, *v20);
                  if (v324[8])
                  {
                    *(void *)&v324[8] = 1;
                    BOOL v150 = *(unsigned char **)&v324[16];
                  }
                  else
                  {
                    v324[8] &= 1u;
                    BOOL v150 = &v324[9];
                  }
                  int v145 = 0;
                  *BOOL v150 = 0;
                }
                if (v280[1])
                {
                  if (v280[2])
                  {
                    (*(void (**)(void))(*(void *)v280[1] + 40))();
                    v280[2] = 0;
                    v280[3] = 0;
                  }
                  v280[1] = 0;
                }
                if (*(void *)buf && (buf[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)buf + 40))();
                }
                v146 += 64;
              }
              while (v146 != v147);
            }
            if (v324[8]) {
              uint64_t v151 = *(void *)&v324[8] >> 1;
            }
            else {
              uint64_t v151 = v324[8] >> 1;
            }
            if (v151) {
              re::logAttributeIndexExceedsLimit(v264, (uint64_t)v324, *v20);
            }
            if (*(void *)v324 && (v324[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)v324 + 40))();
            }
            long long v142 = v261;
          }
          if (v20[3])
          {
            uint64_t v15 = re::getVertexFormatFromDataType((re *)v20[3]);
            unsigned __int16 v262 = 1;
            uint64_t v258 = -1;
            int v260 = 1;
          }
          else
          {
            uint64_t v258 = *(unsigned __int16 *)&v142[16 * v4];
            id v152 = &v142[16 * v4];
            uint64_t v15 = v152[12];
            int v153 = v152[5];
            unsigned __int16 v154 = *((_WORD *)v152 + 1);
            if (*((unsigned char *)v20 + 8)) {
              unsigned __int16 v154 = 0;
            }
            unsigned __int16 v262 = v154;
            if (*((unsigned char *)v20 + 8)) {
              int v155 = 0;
            }
            else {
              int v155 = v153;
            }
            int v260 = v155;
          }
          a3 = (unint64_t)v255;
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v255, sel_attributes), sel_objectAtIndexedSubscript_, v20[1]), sel_setFormat_, v15);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v255, sel_attributes), sel_objectAtIndexedSubscript_, v20[1]), sel_setOffset_, *(unsigned int *)&v142[16 * v4 + 8]);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v255, sel_attributes), sel_objectAtIndexedSubscript_, v20[1]), sel_setBufferIndex_, *v20);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ layouts](v255, sel_layouts), sel_objectAtIndexedSubscript_, *v20), sel_setStride_, v258);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ layouts](v255, sel_layouts), sel_objectAtIndexedSubscript_, *v20), sel_setStepFunction_, v260);
          id v156 = [(_anonymous_namespace_ *)v255 layouts];
          unsigned int v157 = *v20;
          v20 += 5;
          int v137 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v156, sel_objectAtIndexedSubscript_, v157), sel_setStepRate_, v262);
          uint64_t v12 = (char **)&v324[9];
          if (v20 == *(unsigned __int16 **)v252) {
            goto LABEL_189;
          }
        }
LABEL_311:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 476;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = v4;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_312:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_313:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_314:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_315:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_316:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_317:
        v322[0] = 0;
        memset(v280, 0, sizeof(v280));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v324 = 136315906;
        *(void *)&v324[4] = "operator[]";
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 797;
        *(_WORD *)&v324[18] = 2048;
        *(void *)&v324[20] = a3;
        *(_WORD *)&v324[28] = 2048;
        *(void *)&v324[30] = v14;
        v237[0] = 38;
        id v236 = v324;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_318:
        dispatch_once(&qword_26AF94898, &__block_literal_global_32);
        goto LABEL_236;
      }
LABEL_189:
      uint64_t v132 = v246;
      unint64_t v4 = (unint64_t)v264;
      if (v246[23])
      {
        id v228 = [(_anonymous_namespace_ *)v255 layouts];
        uint64_t v229 = *((void *)v264 + 10);
        if (v229)
        {
          int v230 = v228;
          uint64_t v231 = (unsigned __int16 *)*((void *)v264 + 9);
          uint64_t v232 = 10 * v229;
          do
          {
            id v233 = objc_msgSend(v230, sel_objectAtIndexedSubscript_, *v231);
            if (objc_msgSend(v233, sel_stepFunction) == (id)1)
            {
              objc_msgSend(v233, sel_setStepFunction_, 0);
              objc_msgSend(v233, sel_setStepRate_, 0);
            }
            v231 += 5;
            v232 -= 10;
          }
          while (v232);
        }
      }
      objc_msgSend(v267, sel_setVertexDescriptor_, v255);
      char v136 = v249;
      uint64_t v11 = v244;
      if (v255) {
    }
      }
    if (v132[23])
    {
      objc_msgSend(v267, sel_setTessellationFactorScaleEnabled_, 0);
      objc_msgSend(v267, sel_setTessellationFactorFormat_, 0);
      objc_msgSend(v267, sel_setTessellationFactorStepFunction_, 1);
      objc_msgSend(v267, sel_setTessellationControlPointIndexType_, 0);
      objc_msgSend(v267, sel_setTessellationOutputWindingOrder_, 1);
      objc_msgSend(v267, sel_setTessellationPartitionMode_, 0);
      objc_msgSend(v267, sel_setMaxTessellationFactor_, 16);
    }
    a3 = 0;
    mach_timebase_info v158 = v11 + 1;
    uint64_t v15 = -256;
    uint64_t v11 = (unsigned int *)&selRef_taskToken;
    uint64_t v12 = &selRef_taskToken;
    unint64_t v10 = &selRef_taskToken;
    do
    {
      if (!v158[a3]) {
        goto LABEL_224;
      }
      objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), v12[431], (int)v158[a3]);
      unint64_t v159 = *(void *)(v245 + 144);
      if (v159)
      {
        if (v159 <= a3)
        {
          objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setBlendingEnabled_, 0);
          objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setWriteMask_, 15);
          goto LABEL_224;
        }
        uint64_t v160 = *(void *)(v245 + 160) + v15;
        if (*(unsigned char *)(v160 + 257) && (uint64_t v161 = *(unsigned char **)(v4 + 8), v161[307]) && *v161)
        {
          objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setBlendingEnabled_, 0);
        }
        else if (*(unsigned char *)(v160 + 256))
        {
          unint64_t v4 = (unint64_t)v12;
          uint64_t v20 = (unsigned __int16 *)&selRef_taskToken;
          objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setBlendingEnabled_, 1);
          id v165 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3);
          uint64_t v12 = &selRef_taskToken;
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_312;
          }
          objc_msgSend(v165, sel_setSourceRGBBlendFactor_, *(int *)(*(void *)(v245 + 160) + v15 + 260));
          id v166 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), (SEL)&selRef_newTextureWithDescriptor_iosurface_plane__0, a3);
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_313;
          }
          objc_msgSend(v166, sel_setDestinationRGBBlendFactor_, *(int *)(*(void *)(v245 + 160) + v15 + 264));
          id v167 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), (SEL)&selRef_newTextureWithDescriptor_iosurface_plane__0, a3);
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_314;
          }
          objc_msgSend(v167, sel_setRgbBlendOperation_, *(int *)(*(void *)(v245 + 160) + v15 + 268));
          id v168 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), (SEL)&selRef_newTextureWithDescriptor_iosurface_plane__0, a3);
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_315;
          }
          objc_msgSend(v168, sel_setSourceAlphaBlendFactor_, *(int *)(*(void *)(v245 + 160) + v15 + 272));
          id v169 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), (SEL)&selRef_newTextureWithDescriptor_iosurface_plane__0, a3);
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_316;
          }
          objc_msgSend(v169, sel_setDestinationAlphaBlendFactor_, *(int *)(*(void *)(v245 + 160) + v15 + 276));
          id v170 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), (SEL)&selRef_newTextureWithDescriptor_iosurface_plane__0, a3);
          uint64_t v14 = *(unsigned __int16 **)(v245 + 144);
          if ((unint64_t)v14 <= a3) {
            goto LABEL_317;
          }
          objc_msgSend(v170, sel_setAlphaBlendOperation_, *(int *)(*(void *)(v245 + 160) + v15 + 280));
          uint64_t v12 = (char **)v4;
          unint64_t v4 = (unint64_t)v264;
          char v136 = v249;
        }
        id v163 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3);
        if ((v136 & 2) == 0)
        {
          if (*(void *)(v245 + 144) <= a3) {
            int v164 = 15;
          }
          else {
            int v164 = *(_DWORD *)(*(void *)(v245 + 160) + v15 + 284);
          }
          goto LABEL_223;
        }
LABEL_222:
        int v164 = 0;
        goto LABEL_223;
      }
      if (*(unsigned char *)(v245 + 73) && (uint64_t v162 = *(unsigned char **)(v4 + 8), v162[307]) && *v162)
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setBlendingEnabled_, 0);
      }
      else if (*(unsigned char *)(v245 + 72))
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setBlendingEnabled_, 1);
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setSourceRGBBlendFactor_, *(int *)(v245 + 84));
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setDestinationRGBBlendFactor_, *(int *)(v245 + 88));
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setRgbBlendOperation_, *(int *)(v245 + 92));
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setSourceAlphaBlendFactor_, *(int *)(v245 + 96));
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setDestinationAlphaBlendFactor_, *(int *)(v245 + 100));
        objc_msgSend(objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3), sel_setAlphaBlendOperation_, *(int *)(v245 + 104));
      }
      id v163 = objc_msgSend(objc_msgSend(v267, sel_colorAttachments), sel_objectAtIndexedSubscript_, a3);
      if ((v136 & 2) != 0) {
        goto LABEL_222;
      }
      int v164 = *(_DWORD *)(v245 + 108);
LABEL_223:
      objc_msgSend(v163, sel_setWriteMask_, v164);
LABEL_224:
      ++a3;
      v15 += 32;
    }
    while (v15);
    unsigned int v171 = v244[9];
    if (v171 - 250 <= 0xA && ((1 << (v171 + 6)) & 0x425) != 0) {
      objc_msgSend(v267, sel_setDepthAttachmentPixelFormat_);
    }
    uint64_t v14 = v240;
    uint64_t v15 = (uint64_t)v242;
    uint64_t v20 = (unsigned __int16 *)v246;
    if (v244[10] - 253 <= 9 && ((1 << (*((unsigned char *)v244 + 40) + 3)) & 0x385) != 0) {
      objc_msgSend(v267, sel_setStencilAttachmentPixelFormat_);
    }
    if (qword_26AF94898 != -1) {
      goto LABEL_318;
    }
LABEL_236:
    if (byte_26AF9488C == 1)
    {
      uint64_t v173 = *(void *)(v4 + 32);
      if (*(void *)(v173 + 64))
      {
        if (*(void *)(v173 + 40))
        {
          uint64_t v174 = *re::graphicsLogObjects((re *)objc_msgSend(v267, sel_setShaderValidation_, 1));
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v175 = *(void **)(v4 + 32);
            if (v175[8])
            {
              if (v175[5])
              {
                uint64_t v176 = *(void *)(v175[9] + 32);
                uint64_t v177 = *(void *)(v175[6] + 32);
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = v176;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v177;
                _os_log_impl(&dword_233120000, v174, OS_LOG_TYPE_DEFAULT, "Shader Validation Enabled for custom shader using SurfaceShader = %s and GeometryModifier = %s", buf, 0x16u);
                break;
              }
            }
            else
            {
              v322[0] = 0;
              memset(v280, 0, sizeof(v280));
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v324 = 136315906;
              *(void *)&v324[4] = "operator[]";
              *(_WORD *)&v324[12] = 1024;
              *(_DWORD *)&v324[14] = 476;
              *(_WORD *)&v324[18] = 2048;
              *(void *)&v324[20] = 0;
              *(_WORD *)&v324[28] = 2048;
              *(void *)&v324[30] = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v322[0] = 0;
            memset(v280, 0, sizeof(v280));
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v324 = 136315906;
            *(void *)&v324[4] = "operator[]";
            *(_WORD *)&v324[12] = 1024;
            *(_DWORD *)&v324[14] = 476;
            *(_WORD *)&v324[18] = 2048;
            *(void *)&v324[20] = 0;
            *(_WORD *)&v324[28] = 2048;
            *(void *)&v324[30] = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_327:
            uint64_t v9 = __cxa_guard_acquire(&qword_26AF94890);
            if (v9)
            {
              re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v234, (char *)buf);
              if (buf[0]) {
                uint8_t v235 = buf[1];
              }
              else {
                uint8_t v235 = 0;
              }
              _MergedGlobals_380 = v235;
              __cxa_guard_release(&qword_26AF94890);
            }
            continue;
          }
        }
      }
    }
    break;
  }
  unint64_t v263 = *(uint64_t **)(v4 + 8);
  if (v20) {
    id v178 = v20 + 4;
  }
  id v179 = v267;
  id v266 = (id)v15;
  unsigned int v180 = *(uint64_t **)v14;
  if (*(void *)v14) {
    uint64_t v181 = v180 + 1;
  }
  uint64_t v182 = *(void *)(v4 + 40);
  int v183 = *(unsigned __int8 *)(v4 + 56);
  unint64_t v184 = *(void **)(v4 + 96);
  uint64_t v185 = (re *)objc_loadWeakRetained((id *)(v182 + 2736));
  uint64_t v259 = v185;
  if (v185) {
    uint64_t v186 = (char *)v185 - 8;
  }
  else {
    uint64_t v186 = 0;
  }
  uint64_t v187 = dispatch_group_create();

  dispatch_group_enter(v187);
  unsigned int v189 = re::globalAllocators(v188);
  uint64_t v190 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v189[2] + 32))(v189[2], 24, 8);
  *((void *)v190 + 1) = 0;
  *((void *)v190 + 2) = 0;
  *(void *)uint64_t v190 = 0;
  unsigned __int16 v191 = re::globalAllocators(v190);
  uint64_t v192 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v191[2] + 32))(v191[2], 24, 8);
  v192[1] = 0;
  v192[2] = 0;
  *uint64_t v192 = 0;
  unint64_t v256 = v192;
  uint64_t v265 = v263[7];
  unint64_t v193 = v187;
  v278 = v193;
  id v194 = v179;
  if (v180) {
    uint64_t v195 = v180 + 1;
  }
  if (v20) {
    uint64_t v196 = v20 + 4;
  }
  uint64_t v197 = v259;
  if (v259) {
    uint64_t v197 = v259;
  }
  uint64_t v198 = re::globalAllocators(v197)[2];
  *(void *)&v324[24] = v198;
  *(void *)&v324[32] = 0;
  if (v198) {
    uint64_t v199 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v198 + 32))(v198, 88, 0);
  }
  else {
    uint64_t v199 = 0;
  }
  *(void *)uint64_t v199 = &unk_26E70EB00;
  *(void *)(v199 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v190;
  *(void *)(v199 + 16) = v256;
  *(void *)(v199 + 24) = v194;
  *(void *)(v199 + 32) = v180;
  *(void *)(v199 + 40) = v182;
  *(void *)(v199 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v246;
  *(unsigned char *)(v199 + 56) = v183;
  *(void *)(v199 + 64) = v184;
  *(void *)(v199 + 72) = v263;
  *(void *)(v199 + 80) = v186;
  *(void *)&v324[32] = v199;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v265, v183 != 0, v184, (id *)&v278, (uint64_t)v324);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v324);
  if (v194) {

  }
  dispatch_group_enter(v193);
  uint64_t v200 = v246;
  uint64_t v201 = v263[7] + 264;
  *(void *)long long buf = *(void *)(v246[2] + 16);
  uint64_t v202 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v201, (uint64_t *)buf);
  if (v202) {
    int v203 = (id *)(v202 + 8);
  }
  else {
    int v203 = 0;
  }
  v180[18] = objc_msgSend(*v203, "hash", v236, *(void *)v237);
  uint64_t v204 = v246[2];
  uint64_t v205 = *(void *)(v204 + 16);
  v180[20] = v205;
  re::ShaderManager::makeFunctionDescriptor(v263[7], *(void *)(v204 + 8), &v266, v203, v205, &v277);
  *(void *)long long buf = v277;
  *(void *)&uint8_t buf[8] = v179;
  *(void *)&uint8_t buf[16] = v246;
  int v206 = v246 + 1;
  uint64_t v207 = v246 + 1;
  buf[24] = v183;
  unint64_t v208 = v193;
  v280[0] = v208;
  v280[1] = v184;
  v280[2] = *v203;
  uint64_t v209 = re::globalAllocators((re *)v280[2])[2];
  v322[3] = v209;
  uint64_t v323 = 0;
  if (v209) {
    uint64_t v209 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v209 + 32))(v209, 64, 0);
  }
  uint64_t v323 = re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::Callable(v209, (uint64_t)buf);
  re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v265, v183 != 0, (uint64_t)v184, (uint64_t)v322);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v322);

  if (*(void *)&buf[16]) {
  if (*(void *)&buf[8])
  }

  uint64_t v210 = *(_anonymous_namespace_ **)buf;
  if (*(void *)buf) {

  }
  v180[22] = 0;
  unint64_t v211 = v246[5];
  if (v211)
  {
    *(void *)long long buf = 0;
    uint64_t v276 = v246;
    id v212 = v206;
    unsigned int v213 = v208;
    dispatch_group_t v275 = v213;
    uint64_t v200 = v246;
    re::makeMetalPrivateLinkedFunctionsAsync(v263, &v276, 1, &v266, &v275, v183 != 0, (uint64_t)v184, v190, (uint64_t *)buf, (uint64_t)(v180 + 24));

    v180[22] = *(void *)buf;
  }
  if (v200[3])
  {
    dispatch_group_enter(v208);
    uint64_t v214 = v263[7] + 264;
    *(void *)long long buf = *(void *)(v200[3] + 16);
    uint64_t v215 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v214, (uint64_t *)buf);
    if (v215) {
      uint64_t v216 = (id *)(v215 + 8);
    }
    else {
      uint64_t v216 = 0;
    }
    v180[19] = [*v216 hash];
    uint64_t v217 = v200[3];
    uint64_t v218 = *(void *)(v217 + 16);
    v180[21] = v218;
    re::ShaderManager::makeFunctionDescriptor(v263[7], *(void *)(v217 + 8), &v266, v216, v218, &v274);
    *(void *)long long buf = v274;
    *(void *)&uint8_t buf[8] = v179;
    *(void *)&uint8_t buf[16] = v200;
    id v219 = v206;
    buf[24] = v183;
    int v220 = v208;
    v280[0] = v220;
    v280[1] = v184;
    v280[2] = *v216;
    uint64_t v221 = re::globalAllocators((re *)v280[2])[2];
    uint64_t v320 = v221;
    if (v221) {
      uint64_t v221 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v221 + 32))(v221, 64, 0);
    }
    uint64_t v321 = re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::Callable(v221, (uint64_t)buf);
    re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v265, v183 != 0, (uint64_t)v184, (uint64_t)v319);
    re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v319);

    if (*(void *)&buf[16]) {
    if (*(void *)&buf[8])
    }

    uint64_t v222 = *(_anonymous_namespace_ **)buf;
    if (*(void *)buf) {

    }
    unint64_t v223 = v200[8];
    if (v223)
    {
      *(void *)long long buf = 0;
      v273 = v200;
      id v224 = v206;
      uint64_t v225 = v220;
      dispatch_group_t v272 = v225;
      re::makeMetalPrivateLinkedFunctionsAsync(v263, &v273, 2, &v266, &v272, v183 != 0, (uint64_t)v184, v256, (uint64_t *)buf, (uint64_t)(v180 + 27));

      v180[23] = *(void *)buf;
    }
    if (v274) {

    }
    BOOL v226 = v239;
  }
  else
  {
    v180[19] = 0;
    v180[23] = 0;
    BOOL v226 = v239;
  }
  dispatch_group_leave(v208);
  if (v277) {

  }
  if (v259) {
  if (v266)
  }
  {

    id v266 = 0;
  }
  if (v179) {

  }
  if (v242) {
  if (v267)
  }

  if (v226) {
  uint64_t result = (uint64_t)v268;
  }
  if (v268)
  {
    if (v269) {
      return (*(uint64_t (**)(void))(*v268 + 40))();
    }
  }
  return result;
}

uint64_t ___ZN2re31compileCachedPipelineStateAsyncERNS_25PipelineStateCacheContextEh_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::stringValue((re::Defaults *)"shaderValidationMaterialFilter", a2, (uint64_t)v9);
  if (v9[0]) {
    uint64_t v3 = (const re::DynamicString *)&v10;
  }
  else {
    uint64_t v3 = (const re::DynamicString *)&v7;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v12, v3);
  if (v7 && (v8 & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  if (v9[0] && v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  byte_26AF9488C = 0;
  uint64_t v4 = v13 & 1;
  if (v13) {
    uint64_t v5 = *(const char **)&v14[7];
  }
  else {
    uint64_t v5 = v14;
  }
  byte_26AF9488C = strcmp(v5, "custom") == 0;
  uint64_t result = v12;
  if (v12)
  {
    if (v4) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

void re::makePipelineStateCacheKey(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = a2;
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0x9E3779B97F4A7C17;
  uint64_t v7 = *(void *)(a1 + 80);
  unint64_t v8 = 0x9E3779B97F4A7C17;
  if (v7)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(unsigned __int16 **)(a1 + 72);
    char v11 = &v10[5 * v7];
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = *(void *)(v12 + 8);
        unint64_t v14 = *(void *)(v13 + 32);
        if (v12) {
          BOOL v15 = v14 == 0;
        }
        else {
          BOOL v15 = 0;
        }
      }
      while (v15);
      unint64_t v16 = v10[2];
      if (v14 <= v16)
      {
        memset(v40, 0, sizeof(v40));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v17 = *(void *)(v13 + 40);
      if (v10[3])
      {
        uint64_t VertexFormatFromDataType = re::getVertexFormatFromDataType((re *)v10[3]);
        unsigned int v19 = 1;
        unint64_t v20 = -1;
        uint64_t v21 = 1;
      }
      else
      {
        if (!*((unsigned char *)v10 + 8))
        {
          unint64_t v20 = 0;
          uint64_t VertexFormatFromDataType = 0;
          unsigned int v19 = 0;
          char v22 = 0;
          uint64_t v21 = 1;
          goto LABEL_14;
        }
        unint64_t v20 = 0;
        unsigned int v19 = 0;
        uint64_t v21 = 0;
        uint64_t VertexFormatFromDataType = *(unsigned __int8 *)(v17 + 16 * v16 + 12);
      }
      char v22 = 1;
LABEL_14:
      unint64_t v23 = v10[1];
      unsigned int v24 = *v10;
      v10 += 5;
      unint64_t v25 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v24 | (v23 << 16)) ^ (v23 >> 14))) ^ ((0xBF58476D1CE4E5B9
                                                                            * ((v24 | (v23 << 16)) ^ (v23 >> 14))) >> 27));
      v9 ^= (v9 << 6)
          - 0x61C8864680B583E9
          + (v9 >> 2)
          + ((re::VertexBufferFormat::hash((unsigned __int16 *)(v17 + 16 * v16), v22, v20, VertexFormatFromDataType, v19, v21)- 0x61C8864680B583E9+ ((v25 ^ (v25 >> 31)) << 6)+ ((v25 ^ (v25 >> 31)) >> 2)) ^ v25 ^ (v25 >> 31));
      if (v10 == v11)
      {
        unint64_t v8 = v9 - 0x61C8864680B583E9;
        char v3 = a2;
        uint64_t v6 = 0x9E3779B97F4A7C17;
        break;
      }
    }
  }
  uint64_t v26 = *(void **)(a1 + 32);
  if (v26) {
    unsigned __int8 v27 = v26 + 1;
  }
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = *(void *)(v28 + 56) + 264;
  *(void *)&v40[0] = *(void *)(v26[2] + 16);
  unint64_t v30 = objc_msgSend(*(id *)(re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v29, (uint64_t *)v40)+ 8), "hash");
  uint64_t v31 = v26[3];
  if (v31)
  {
    uint64_t v32 = *(void *)(v28 + 56) + 264;
    *(void *)&v40[0] = *(void *)(v31 + 16);
    uint64_t v6 = objc_msgSend(*(id *)(re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v32, (uint64_t *)v40)+ 8), "hash")- 0x61C8864680B583E9;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  long long v34 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v33;
  *(_OWORD *)(a3 + 16) = v34;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v33 + 32);
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_DWORD *)(v33 + 48);
  unint64_t v35 = re::TechniqueState::hashForPSO((re::TechniqueState *)(*(void *)(a1 + 40) + 72), v3);
  unint64_t v36 = ((v35 << 6) - 0x61C8864680B583E9 + (v35 >> 2) + ((v8 + (v26[19] << 6) + (v26[19] >> 2)) ^ v26[19])) ^ v35;
  *(void *)(a3 + 56) = ((((v30 >> 2) + (v30 << 6) + v6) ^ v30) - 0x61C8864680B583E9 + (v36 << 6) + (v36 >> 2)) ^ v36;
  unint64_t v37 = *(unsigned __int8 *)(a1 + 88);
  if (v37 >= 5) {
    char v38 = 1;
  }
  else {
    char v38 = 0x303020201uLL >> (8 * v37);
  }
  *(unsigned char *)(a3 + 64) = v38;
}

uint64_t re::VertexBufferFormat::hash(unsigned __int16 *a1, char a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if ((a2 & 1) == 0)
  {
    a3 = *a1;
    a4 = *((unsigned __int8 *)a1 + 12);
    a5 = a1[1];
    a6 = *((unsigned __int8 *)a1 + 5);
  }
  unint64_t v6 = ((unint64_t)a5 << 16) | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | (a6 << 40) | (a4 << 48) | ((unint64_t)*((unsigned int *)a1 + 2) << 56);
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  return (((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9 + (v7 ^ (v7 >> 31))) ^ v8 ^ (v8 >> 31);
}

unint64_t re::TechniqueState::hashForPSO(re::TechniqueState *this, char a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  if ((a2 & 2) != 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = (unint64_t)*((unsigned int *)this + 9) << 51;
  }
  uint64_t v3 = *(unsigned __int8 *)this;
  uint64_t v4 = *((unsigned __int8 *)this + 3);
  uint64_t v5 = *((unsigned __int8 *)this + 4);
  uint64_t v6 = *((unsigned int *)this + 7);
  uint64_t v7 = *((unsigned int *)this + 8);
  long long v8 = *(_OWORD *)((char *)this + 12);
  unint64_t v9 = 0x9E3779B97F4A7C17;
  uint64_t v10 = *((unsigned __int8 *)this + 1);
  uint64_t v11 = *((void *)this + 9);
  if (v11 && 32 * v11)
  {
    long long v18 = *(_OWORD *)((char *)this + 12);
    MurmurHash3_x64_128(*((void *)this + 11), 32 * v11, 0, v19);
    long long v8 = v18;
    unint64_t v9 = ((v19[1] - 0x61C8864680B583E9 + (v19[0] << 6) + (v19[0] >> 2)) ^ v19[0]) - 0x61C8864680B583E9;
  }
  v12.i64[0] = (int)v8;
  v12.i64[1] = SDWORD1(v8);
  uint64x2_t v13 = v12;
  v12.i64[0] = SDWORD2(v8);
  v12.i64[1] = SHIDWORD(v8);
  int8x16_t v14 = vorrq_s8((int8x16_t)vshlq_u64(v13, (uint64x2_t)xmmword_2343ADBB0), (int8x16_t)vshlq_u64(v12, (uint64x2_t)xmmword_234361EC0));
  unint64_t v15 = *(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | (v6 << 35) | (v7 << 43) | (v10 << 52) | v2 | v3 | (2 * v4) | (4 * v5);
  unint64_t v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
  return (((v16 ^ (v16 >> 31)) >> 2) + ((v16 ^ (v16 >> 31)) << 6) + v9) ^ v16 ^ (v16 >> 31);
}

id re::getOrCreatePipelineState@<X0>(re *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  re::makePipelineStateCacheKey((uint64_t)a1, a2, (uint64_t)v14);
  uint64_t v6 = (uint64_t *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(*((void *)a1 + 2) + 48, v14);
  if (v6)
  {
    uint64_t v7 = *v6;
    *a3 = *v6;
    if (v7) {
      return (id)(v7 + 8);
    }
  }
  *((void *)a1 + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v13, v14);
  re::compileCachedPipelineStateAsync(a1, a2, (unint64_t)&v13);
  uint64_t v9 = v13;
  *a3 = v13;
  char v10 = v15;
  long long v11 = v14[3];
  *(_OWORD *)(v9 + 56) = v14[2];
  long long v12 = v14[0];
  *(_OWORD *)(v9 + 40) = v14[1];
  *(_OWORD *)(v9 + 72) = v11;
  *(unsigned char *)(v9 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
  *(_OWORD *)(v9 + 24) = v12;
  return (id)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(*(void *)a1, v14, a3);
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v15, a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addEmplace<re::SharedPtr<re::CachedPipelineState>&>(a1, v8, v7, (uint64_t)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 96 * v12;
    return v13 + 88;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v11 = re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v16, (void *)(v10 + 96 * v9 + 16), a2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v11) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = v10 + 96 * v9;
  return v13 + 88;
}

void re::CachedPipelineState::getOrCreateVertexFetchPipeline(id *this@<X0>, id *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unint64_t v6 = (char *)(a2 + 3);
  unint64_t v7 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v51, (uint64_t)(a2 + 3));
  if (!this[12] || (uint64_t v8 = *((unsigned int *)this[13] + v7 % *((unsigned int *)this + 30)), v8 == 0x7FFFFFFF))
  {
LABEL_6:
    uint64_t v10 = re::globalAllocators((re *)v7);
    BOOL v11 = (void **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 32, 8);
    *(_OWORD *)BOOL v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v11, 0);
    void *v12 = &unk_26E70ECC8;
    v12[3] = 0;
    uint64_t v11[2] = 0;
    id v45 = a3;
    *a3 = (uint64_t)v12;
    id v49 = a2[2];
    id v13 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, &v49, 1);
    id v14 = objc_msgSend(objc_msgSend(MEMORY[0x263F129D0], sel_alloc), sel_init);
    objc_msgSend(v14, sel_setVertexAdditionalBinaryFunctions_, v13);
    id v48 = 0;
    id v46 = v14;
    id v15 = objc_msgSend(this[2], sel_newRenderPipelineStateWithAdditionalBinaryFunctions_error_, v14, &v48);
    id v47 = v15;
    if (v48)
    {
      char v16 = *re::graphicsLogObjects((re *)v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v44 = objc_msgSend(objc_msgSend(v48, sel_localizedDescription), sel_cStringUsingEncoding_, 4);
        *(_DWORD *)int v51 = 136315138;
        *(void *)&__n128 v51[4] = v44;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Failed to create manual vertex fetch pipeline. %s", v51, 0xCu);
      }
    }
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 2, &v47);
    id v17 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A88], sel_alloc), sel_init);
    objc_msgSend(v17, sel_setFunctionCount_, 1);
    id v18 = objc_msgSend(v47, sel_newVisibleFunctionTableWithDescriptor_stage_, v17, 1);
    *(void *)int v51 = v18;
    id v19 = objc_msgSend(v47, sel_functionHandleWithFunction_stage_, a2[2], 1);
    objc_msgSend(v18, sel_setFunction_atIndex_, v19, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 3, (void **)v51);
    unint64_t v20 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v50, (uint64_t)v6);
    unint64_t v21 = v20;
    if (this[12])
    {
      unint64_t v22 = v20 % *((unsigned int *)this + 30);
      uint64_t v23 = *((unsigned int *)this[13] + v22);
      if (v23 != 0x7FFFFFFF)
      {
        unsigned int v24 = this[14];
        while (!re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v50, (uint64_t)&v24[50 * v23 + 3], (uint64_t)v6))
        {
          unsigned int v24 = this[14];
          uint64_t v23 = v24[50 * v23 + 2] & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF) {
            goto LABEL_16;
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      LODWORD(v22) = 0;
    }
LABEL_16:
    unsigned int v25 = *((_DWORD *)this + 33);
    if (v25 == 0x7FFFFFFF)
    {
      unsigned int v25 = *((_DWORD *)this + 32);
      unsigned int v26 = v25;
      if (v25 == *((_DWORD *)this + 30))
      {
        re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity((uint64_t)(this + 12), 2 * *((_DWORD *)this + 31));
        LODWORD(v22) = v21 % *((unsigned int *)this + 30);
        unsigned int v26 = *((_DWORD *)this + 32);
      }
      *((_DWORD *)this + 32) = v26 + 1;
      unsigned __int8 v27 = this[14];
      int v28 = v27[50 * v25 + 2];
    }
    else
    {
      unsigned __int8 v27 = this[14];
      int v28 = v27[50 * v25 + 2];
      *((_DWORD *)this + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = v28 & 0x7FFFFFFF;
    }
    uint64_t v29 = 200 * v25;
    v27[(unint64_t)v29 / 4 + 2] = v28 | 0x80000000;
    *(_DWORD *)((char *)this[14] + v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)((unsigned char *)this[14] + v29 + 8) & 0x80000000 | *((_DWORD *)this[13] + v22);
    *(void *)((char *)this[14] + v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v21;
    unint64_t v30 = (char *)this[14] + v29;
    long long v32 = *(_OWORD *)v6;
    long long v31 = *((_OWORD *)v6 + 1);
    long long v33 = *((_OWORD *)v6 + 3);
    *(_OWORD *)(v30 + 44) = *((_OWORD *)v6 + 2);
    *(_OWORD *)(v30 + 60) = v33;
    long long v35 = *((_OWORD *)v6 + 6);
    long long v34 = *((_OWORD *)v6 + 7);
    long long v36 = *((_OWORD *)v6 + 5);
    *(_OWORD *)(v30 + 76) = *((_OWORD *)v6 + 4);
    *(_OWORD *)(v30 + 92) = v36;
    *(_OWORD *)(v30 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v35;
    *(_OWORD *)(v30 + 124) = v34;
    int v37 = *((_DWORD *)v6 + 44);
    long long v39 = *((_OWORD *)v6 + 9);
    long long v38 = *((_OWORD *)v6 + 10);
    *(_OWORD *)(v30 + 140) = *((_OWORD *)v6 + 8);
    *(_OWORD *)(v30 + 156) = v39;
    *(_OWORD *)(v30 + 172) = v38;
    *((_DWORD *)v30 + 4re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v37;
    *(_OWORD *)(v30 + 12) = v32;
    *(_OWORD *)(v30 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
    uint64_t v40 = *v45;
    *(void *)((char *)this[14] + v29 + 192) = *v45;
    if (v40) {
      id v41 = (id)(v40 + 8);
    }
    *((_DWORD *)this[13] + v22) = v25;
    ++*((_DWORD *)this + 31);
    ++*((_DWORD *)this + 34);
LABEL_24:
    if (v19) {

    }
    if (*(void *)v51) {
    if (v17)
    }

    if (v47) {
    if (v46)
    }

    if (v13) {
    if (v49)
    }

    return;
  }
  uint64_t v9 = this[14];
  while (1)
  {
    unint64_t v7 = re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v51, (uint64_t)&v9[50 * v8 + 3], (uint64_t)v6);
    uint64_t v9 = this[14];
    if (v7) {
      break;
    }
    uint64_t v8 = v9[50 * v8 + 2] & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_6;
    }
  }
  *a3 = 0;
  uint64_t v42 = *(void *)&v9[50 * v8 + 48];
  if (v42)
  {
    id v43 = (id)(v42 + 8);
    *a3 = v42;
  }
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EAA8;
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {

    *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {

    *(void *)(a1 + 32) = 0;
  }

  return a1;
}

void re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EAA8;
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {

    *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {

    *(void *)(a1 + 32) = 0;
  }

  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(a1 + 24);
  uint64_t v3 = v2;
  v14[0] = v2;
  if (*(void *)(*(void *)(a1 + 72) + 48))
  {
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 48);
    id v13 = *(id *)(a1 + 8);
    re::sg::CachedCompilationMaterial::compileMetalLibrary(v4, &v13, *(CGColorSpace **)(a1 + 16), (id *)buf);
    uint64_t v5 = *(void **)buf;
    *(void *)long long buf = 0;
    v14[0] = v5;

    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
  }
  else
  {
    uint64_t v5 = v2;
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::mtl::Library::makeFunctionWithDescriptor(v14, *(void **)(a1 + 32), &v12);
  uint64_t v6 = re::internal::enableSignposts(0, 0);
  if (v6) {
    uint64_t v6 = kdebug_trace();
  }
  if (v12)
  {
    uint64_t v7 = *(void *)(a1 + 80);
    unint64_t v8 = *(void *)(a1 + 48);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v9 <= v8)
    {
      v14[1] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      char v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 468;
      __int16 v19 = 2048;
      unint64_t v20 = v8;
      __int16 v21 = 2048;
      unint64_t v22 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(v7 + 16) + 8 * v8), &v12);
  }
  else
  {
    uint64_t v10 = *re::graphicsLogObjects((re *)v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 32);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Unable to create linked function %s", buf, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v12) {
}
  }

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EAA8;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(id *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = *(id *)(a1 + 32);
  *(void *)(a2 + 40) = *(id *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v6;
  *(_OWORD *)(a2 + 64) = v5;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a2 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
  if (v7) {
    id v8 = (id)(v7 + 8);
  }
  return a2;
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EAA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a2 + 40) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(void *)(a2 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a1 + 88);
  *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::size()
{
  return 96;
}

void *re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EB00;
  uint64_t v2 = a1[10];
  if (v2)
  {

    a1[10] = 0;
  }
  uint64_t v3 = a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  uint64_t v4 = a1[4];
  if (v4)
  {

    a1[4] = 0;
  }
  long long v5 = (void *)a1[3];
  if (v5)
  {

    a1[3] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EB00;
  uint64_t v2 = a1[10];
  if (v2)
  {

    a1[10] = 0;
  }
  uint64_t v3 = a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  uint64_t v4 = a1[4];
  if (v4)
  {

    a1[4] = 0;
  }
  long long v5 = (void *)a1[3];
  if (v5)
  {

    a1[3] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263F12940];
  id v3 = objc_msgSend(objc_msgSend(MEMORY[0x263F12940], sel_alloc), sel_init);
  id v4 = objc_msgSend(objc_msgSend(v2, sel_alloc), sel_init);
  id v45 = 0;
  *(void *)id v46 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 8));
  NS::SharedPtr<MTL::Texture>::operator=(&v45, (void **)v46);
  if (*(void *)v46) {

  }
  id v44 = 0;
  *(void *)id v46 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(*(void *)(a1 + 16) + 16), *(void *)(*(void *)(a1 + 16) + 8));
  NS::SharedPtr<MTL::Texture>::operator=(&v44, (void **)v46);
  if (*(void *)v46) {

  }
  re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(*(re **)(a1 + 8));
  re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(*(re **)(a1 + 16));
  objc_msgSend(v3, sel_setPrivateFunctions_, v45);
  objc_msgSend(v4, sel_setPrivateFunctions_, v44);
  objc_msgSend(*(id *)(a1 + 24), sel_setVertexLinkedFunctions_, v3);
  objc_msgSend(*(id *)(a1 + 24), sel_setFragmentLinkedFunctions_, v4);
  *(void *)(*(void *)(a1 + 32) + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = mach_absolute_time();
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::mtl::Device::makeRenderPipelineState((id *)(*(void *)(a1 + 72) + 184), *(void *)(a1 + 24), &v43);
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  long long v5 = NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(a1 + 32) + 16), &v43);
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    uint64_t v6 = mach_absolute_time();
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 248);
    double v9 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
    if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
    {
      uint64_t v6 = mach_timebase_info((mach_timebase_info_t)v46);
      if (v6)
      {
        double v12 = NAN;
LABEL_20:
        __int16 v17 = "NULL";
        if (*(void *)(*(void *)(a1 + 80) + 1424)) {
          int v18 = *(re **)(*(void *)(a1 + 80) + 1424);
        }
        else {
          int v18 = (re *)"NULL";
        }
        __int16 v19 = *(const char ***)(a1 + 40);
        if (v19)
        {
          unint64_t v20 = *v19;
          if (v20) {
            __int16 v17 = v20;
          }
        }
        uint64_t v21 = *(void *)(a1 + 48);
        uint64_t v22 = *(void *)(v21 + 16);
        uint64_t v23 = "";
        if (v22)
        {
          long long v24 = *(const char **)(v22 + 8);
          if (v24) {
            uint64_t v23 = v24;
          }
        }
        uint64_t v25 = *(void *)(v21 + 24);
        long long v26 = "";
        double v27 = v12 / 1000000.0;
        if (v25)
        {
          uint64_t v28 = *(const char **)(v25 + 8);
          if (v28) {
            long long v26 = v28;
          }
        }
        uint64_t v29 = (const char *)(int)v27;
        unint64_t v30 = *re::graphicsLogObjects((re *)v6);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)id v46 = 136447234;
          if (v31) {
            long long v32 = "fallback";
          }
          else {
            long long v32 = "specialized";
          }
          *(void *)&v46[4] = v32;
          *(_WORD *)&v46[12] = 2082;
          *(void *)&v46[14] = v17;
          *(_WORD *)&v46[22] = 2082;
          *(void *)&v46[24] = v23;
          LOWORD(v4re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 2082;
          *(void *)((char *)&v47 + 2) = v26;
          WORD5(v4re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 1024;
          HIDWORD(v4re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v29;
          _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for %{public}s technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", v46, 0x30u);
        }
        re::REAnalyticsEventShaderCompilationDuration(v18, v17, v29);
        goto LABEL_38;
      }
      LODWORD(v11) = *(_DWORD *)&v46[4];
      LODWORD(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_DWORD *)v46;
      double v9 = (double)v10 / (double)v11;
      re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v9;
    }
    double v12 = v9 * (double)(v7 - v8);
    goto LABEL_20;
  }
  id v13 = *(const char ***)(a1 + 40);
  id v14 = "";
  if (v13)
  {
    int v15 = *v13;
    if (v15) {
      id v14 = v15;
    }
  }
  char v16 = *re::graphicsLogObjects((re *)v5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v46 = 136315138;
    *(void *)&v46[4] = v14;
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Pipeline for technique %s failed compilation!", v46, 0xCu);
  }
LABEL_38:
  uint64_t v33 = re::internal::enableSignposts(0, 0);
  if (v33) {
    uint64_t v33 = kdebug_trace();
  }
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v35 = *(void *)(a1 + 72);
  long long v36 = *(os_unfair_lock_s **)(v35 + 136);
  long long v37 = *(_OWORD *)(v34 + 56);
  *(_OWORD *)&v46[16] = *(_OWORD *)(v34 + 40);
  long long v47 = v37;
  long long v48 = *(_OWORD *)(v34 + 72);
  char v49 = *(unsigned char *)(v34 + 88);
  *(_OWORD *)id v46 = *(_OWORD *)(v34 + 24);
  uint64_t v38 = *(void *)(a1 + 48);
  if (v38) {
    uint64_t v33 = (uint64_t)(id)(v38 + 8);
  }
  uint64_t v39 = *(void *)(a1 + 40);
  uint64_t v40 = *(void *)(a1 + 80);
  if (v40) {
    uint64_t v33 = (uint64_t)(id)(v40 + 8);
  }
  uint64_t v51 = re::globalAllocators((re *)v33)[2];
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v51 + 32))(v51, 112, 0);
  *(void *)uint64_t v41 = &unk_26E70EB58;
  *(void *)(v41 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v35;
  long long v42 = *(_OWORD *)&v46[16];
  *(_OWORD *)(v41 + 16) = *(_OWORD *)v46;
  *(_OWORD *)(v41 + 32) = v42;
  *(_OWORD *)(v41 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v47;
  *(_OWORD *)(v41 + 64) = v48;
  *(unsigned char *)(v41 + 80) = v49;
  *(void *)(v41 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v38;
  *(void *)(v41 + 96) = v39;
  *(void *)(v41 + 104) = v40;
  uint64_t v52 = v41;
  re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v50);
  atomic_store(2 * (*(void *)(*(void *)(a1 + 32) + 16) == 0), (unsigned __int8 *)(*(void *)(a1 + 32) + 240));
  MEMORY[0x237DBC9B0](*(void *)(a1 + 32) + 240);
  if (v43) {

  }
  if (v44) {
  if (v45)
  }

  if (v4) {
  if (v3)
  }
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EB00;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  id v4 = *(id *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  if (v5) {
    id v6 = (id)(v5 + 8);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v7;
  if (v7) {
    id v8 = (id)(v7 + 8);
  }
  long long v9 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a2 + 80) = v10;
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EB00;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(id *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = v4;
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::size()
{
  return 88;
}

re *re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    if (*(void *)v1)
    {
      uint64_t v3 = *((void *)v1 + 1);
      if (v3)
      {
        uint64_t v4 = (id *)*((void *)v1 + 2);
        uint64_t v5 = 8 * v3;
        do
        {
          if (*v4)
          {

            id *v4 = 0;
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        (*(void (**)(void, void))(**(void **)v1 + 40))(*(void *)v1, *((void *)v1 + 2));
        *((void *)v1 + 1) = 0;
        *((void *)v1 + 2) = 0;
      }
      *(void *)uint64_t v1 = 0;
    }
    id v6 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v6(v2, v1);
  }
  return result;
}

void *re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E70EB58;
  uint64_t v2 = a1[13];
  if (v2)
  {

    a1[13] = 0;
  }
  uint64_t v3 = a1[11];
  if (v3)
  {

    a1[11] = 0;
  }
  return a1;
}

void re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E70EB58;
  uint64_t v2 = a1[13];
  if (v2)
  {

    a1[13] = 0;
  }
  uint64_t v3 = a1[11];
  if (v3)
  {

    a1[11] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = re::DrawingManager::releasePipelineState(*(void *)(*(void *)(a1 + 8) + 104), (void *)(a1 + 16));
  --*(void *)(*(void *)(*(void *)(a1 + 8) + 104) + 96);
  return result;
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EB58;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 65) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  *(_OWORD *)(a2 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 88);
  *(void *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 112;
}

uint64_t (***re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::Callable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70EBA8;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(id *)a2;
  id v4 = *(id *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a1 + 56) = v8;
  return a1;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EBA8;

  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0;
  }
  long long v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(void *)(a1 + 16) = 0;
  }
  id v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EBA8;

  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0;
  }
  long long v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(void *)(a1 + 16) = 0;
  }
  id v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::operator()(uint64_t a1)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 56), *(void **)(a1 + 8), &v3);
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v2 = v3;
  objc_msgSend(*(id *)(a1 + 16), sel_setVertexFunction_, v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v2)
  {
  }
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EBA8;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(id *)(a1 + 8);
  id v4 = *(id *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  if (v5) {
    id v6 = (id)(v5 + 8);
  }
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
  *(void *)(a2 + 40) = *(id *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 56);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::size()
{
  return 64;
}

void re::FixedArray<unsigned long long>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = 8 * a3;
  id v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    uint64_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  void *v8 = 0;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::Callable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70EC00;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(id *)a2;
  id v4 = *(id *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a1 + 56) = v8;
  return a1;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EC00;

  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0;
  }
  long long v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(void *)(a1 + 16) = 0;
  }
  id v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70EC00;

  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0;
  }
  long long v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(void *)(a1 + 16) = 0;
  }
  id v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::operator()(uint64_t a1)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 56), *(void **)(a1 + 8), &v3);
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v2 = v3;
  objc_msgSend(*(id *)(a1 + 16), sel_setFragmentFunction_, v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v2)
  {
  }
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EC00;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(id *)(a1 + 8);
  id v4 = *(id *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  if (v5) {
    id v6 = (id)(v5 + 8);
  }
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
  *(void *)(a2 + 40) = *(id *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 56);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::size()
{
  return 64;
}

unint64_t re::Hash<re::PipelineStateCacheKey>::operator()(int a1, void *a2)
{
  uint64_t v8[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)a2, 44, 0, v8);
  unint64_t v3 = (v8[1] + (v8[0] << 6) + (v8[0] >> 2) - 0x61C8864680B583E9) ^ v8[0];
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2[7] ^ (a2[7] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2[7] ^ (a2[7] >> 30))) >> 27));
  unint64_t v5 = ((v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9 + (v4 ^ (v4 >> 31))) ^ v3;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)a2 + 64)) ^ ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)a2 + 64)) >> 27));
  return ((v6 ^ (v6 >> 31)) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
}

void re::CachedPipelineState::~CachedPipelineState(re::CachedPipelineState *this)
{
  *(void *)this = &unk_26E70EC58;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 27);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)this + 12);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {

    *((void *)this + 2) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E70EC58;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 27);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)this + 12);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {

    *((void *)this + 2) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SharedPersistentObject<re::CachedPipelineState>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

double re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 192);
          if (v8)
          {

            *(void *)(v6 + 192) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 200;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(uint64_t a1, void *a2)
{
  unint64_t v4 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v7 = re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v10, (void *)(v6 + 96 * v5 + 16), a2);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v7) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 96 * v5 + 88;
}

BOOL re::EqualTo<re::PipelineStateCacheKey>::operator()(int a1, void *__s1, void *__s2)
{
  return !memcmp(__s1, __s2, 0x2CuLL) && *((void *)__s1 + 7) == *((void *)__s2 + 7);
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addEmplace<re::SharedPtr<re::CachedPipelineState>&>(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  uint64_t v13 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  uint64_t v14 = *(void *)(a1 + 16) + 96 * v9;
  uint64_t v15 = *(void *)(a4 + 64);
  long long v16 = *(_OWORD *)(a4 + 48);
  long long v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v14 + 64) = v16;
  *(void *)(v14 + 80) = v15;
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v14 + 32) = v17;
  uint64_t v18 = *a5;
  *(void *)(*(void *)(a1 + 16) + 96 * v9 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a5;
  if (v18) {
    id v19 = (id)(v18 + 8);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, (void *)(*(void *)&v13[16] + v10 + 88));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  uint64_t v13 = *(void *)(a1 + 16) + 96 * v9;
  uint64_t v14 = *(void *)(a4 + 64);
  long long v15 = *(_OWORD *)(a4 + 48);
  long long v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v13 + 64) = v15;
  *(void *)(v13 + 80) = v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v13 + 32) = v16;
  uint64_t v17 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 96 * v9 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a5;
  *a5 = 0;
  *(_DWORD *)(v17 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_14, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  BOOL v3 = *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4) && *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a3 + 8);
  if (!v3 || *(unsigned __int8 *)(a2 + 9) != *(unsigned __int8 *)(a3 + 9)) {
    return 0;
  }
  unint64_t v6 = 0;
  unsigned int v7 = (unsigned __int8 *)(a2 + 21);
  long long v8 = (unsigned __int8 *)(a3 + 21);
  do
  {
    unint64_t v9 = v6;
    if (v6 == 14 || *(_DWORD *)(v7 - 9) != *(_DWORD *)(v8 - 9)) {
      break;
    }
    int v10 = *v8;
    int v11 = *(v8 - 1);
    int v12 = *v7;
    int v13 = *(v7 - 1);
    int v14 = *(_DWORD *)(v8 - 5);
    int v15 = *(_DWORD *)(v7 - 5);
    v7 += 12;
    v8 += 12;
    ++v6;
    BOOL v16 = v15 == v14 && v13 == v11;
  }
  while (v16 && v12 == v10);
  return v9 > 0xD;
}

unint64_t re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t result = 0;
  do
  {
    unint64_t v4 = ((result << 6) - 0x61C8864680B583E9 + (result >> 2) + *(void *)(a2 + v2)) ^ result;
    unint64_t result = (*(unsigned __int16 *)(a2 + v2 + 8) - 0x61C8864680B583E9 + (v4 << 6) + (v4 >> 2)) ^ v4;
    v2 += 12;
  }
  while (v2 != 180);
  return result;
}

void re::CachedVertexFetchPipeline::~CachedVertexFetchPipeline(re::CachedVertexFetchPipeline *this)
{
  *(void *)this = &unk_26E70ECC8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  }
  BOOL v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E70ECC8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  }
  BOOL v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SharedPersistentObject<re::CachedVertexFetchPipeline>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v33, 0, 36);
      *(void *)&v33[36] = 0x7FFFFFFFLL;
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)v33, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v33;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v33[8];
      *(_OWORD *)uint64_t v33 = v5;
      *(void *)&v33[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v33[24];
      *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v33[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 192);
        do
        {
          if ((*(_DWORD *)(v13 - 23) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 24);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            unsigned int v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              unsigned int v17 = *(_DWORD *)(a1 + 32);
              unsigned int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                unsigned int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 200 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 200 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 200 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            uint64_t v21 = *(void *)(a1 + 16) + 200 * v17;
            *(_DWORD *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 200 * v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 200 * v17;
            long long v23 = *(_OWORD *)((char *)v13 - 180);
            long long v24 = *(_OWORD *)((char *)v13 - 164);
            long long v25 = *(_OWORD *)((char *)v13 - 148);
            *(_OWORD *)(v22 + 60) = *(_OWORD *)((char *)v13 - 132);
            *(_OWORD *)(v22 + 44) = v25;
            *(_OWORD *)(v22 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v24;
            *(_OWORD *)(v22 + 12) = v23;
            long long v26 = *(_OWORD *)((char *)v13 - 116);
            long long v27 = *(_OWORD *)((char *)v13 - 100);
            long long v28 = *(_OWORD *)((char *)v13 - 84);
            *(_OWORD *)(v22 + 124) = *(_OWORD *)((char *)v13 - 68);
            *(_OWORD *)(v22 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28;
            *(_OWORD *)(v22 + 92) = v27;
            *(_OWORD *)(v22 + 76) = v26;
            long long v29 = *(_OWORD *)((char *)v13 - 52);
            long long v30 = *(_OWORD *)((char *)v13 - 36);
            long long v31 = *(_OWORD *)((char *)v13 - 20);
            *(_DWORD *)(v22 + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)v13 - 1);
            *(_OWORD *)(v22 + 172) = v31;
            *(_OWORD *)(v22 + 156) = v30;
            *(_OWORD *)(v22 + 140) = v29;
            *(void *)(*(void *)(a1 + 16) + 200 * v17 + 192) = *v13;
            void *v13 = 0;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
          }
          v13 += 25;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)v33);
    }
  }
  else
  {
    if (a2) {
      signed int v32 = a2;
    }
    else {
      signed int v32 = 3;
    }
  }
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 200 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_14, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__IOSurface *re::DeformationVertexBufferState::LockedSurfaces::ensureIOSurfaceLocked(re::DeformationVertexBufferState::LockedSurfaces *this, Buffer *a2)
{
  long long v5 = a2;
  unint64_t result = (__IOSurface *)[(Buffer *)a2 iosurface];
  if (result)
  {
    unint64_t v4 = result;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)this, (uint64_t *)&v5))
    {
      IOSurfaceLock(v4, 1u, 0);
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addNew((uint64_t)this, (uint64_t *)&v5);
    }
    return (__IOSurface *)IOSurfaceGetBaseAddress(v4);
  }
  return result;
}

uint64_t re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addNew(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

void re::DeformationVertexBufferState::LockedSurfaces::unlockAll(re::DeformationVertexBufferState::LockedSurfaces *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 6;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  }
  if (v2 != v3)
  {
    uint64_t v6 = v3;
    do
    {
      IOSurfaceUnlock((IOSurfaceRef)[*(id *)(*((void *)this + 2) + 24 * v6 + 16) iosurface], 1u, 0);
      if (*((_DWORD *)this + 8) <= (v3 + 1)) {
        int v7 = v3 + 1;
      }
      else {
        int v7 = *((_DWORD *)this + 8);
      }
      int v8 = v3;
      while (1)
      {
        uint64_t v6 = (v8 + 1);
        if (v7 - 1 == v8) {
          break;
        }
        ++v8;
        LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v6;
        if ((*(_DWORD *)(*((void *)this + 2) + 24 * v6 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v7;
LABEL_17:
      ;
    }
    while (v2 != v3);
  }
  re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::clear((uint64_t)this);
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_29, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)long long v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 16) = *v14;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_29, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::SkinnedMeshBoundsEstimator::init<re::SkinningInfluence>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int **a5, unsigned int a6, double a7, double a8)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = _D0;
  if (a6)
  {
    unint64_t v16 = a4[1];
    if (v16 >= a6)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      LODWORD(_D0) = 1.0;
      LODWORD(are::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1.0;
      do
      {
        if (v18 <= v16) {
          unint64_t v19 = v16;
        }
        else {
          unint64_t v19 = v18;
        }
        unsigned __int8 v20 = v18 + a6;
        int v21 = (float *)(*a4 + 8 * v18 + 4);
        double v22 = 0.0;
        do
        {
          if (v19 == v18)
          {
            re::internal::assertLog((re::internal *)6, a2, _D0, a8, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v16);
            _os_crash();
            __break(1u);
            goto LABEL_40;
          }
          float v23 = *v21;
          v21 += 2;
          *(float *)&double v22 = *(float *)&v22 + fabsf(v23);
          ++v18;
        }
        while (v20 != v18);
        if (*(float *)&v22 > 0.0)
        {
          if (*(float *)&a8 > *(float *)&v22) {
            *(float *)&a8 = *(float *)&v22;
          }
          if (*(float *)&_D0 < *(float *)&v22) {
            *(float *)&_D0 = *(float *)&v22;
          }
          *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = LODWORD(_D0);
          *(_DWORD *)(a1 + 52) = LODWORD(a8);
        }
        ++v17;
      }
      while (v17 != v16 / a6);
    }
  }
  else
  {
    long long v24 = a5[1];
    if (v24)
    {
      int v25 = 0;
      long long v26 = *a5;
      uint64_t v27 = (uint64_t)&(*a5)[(void)v24];
      unint64_t v28 = a4[1];
      LODWORD(_D0) = 1.0;
      LODWORD(are::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1.0;
      do
      {
        int v29 = *v26;
        if (v25 < *v26)
        {
          unint64_t v30 = v25;
          if (v28 > v25) {
            unint64_t v30 = v28;
          }
          long long v31 = (float *)(*a4 + 8 * v25 + 4);
          uint64_t v32 = v29 - (uint64_t)v25;
          unint64_t v33 = v30 - v25;
          double v34 = 0.0;
          do
          {
            if (!v33)
            {
LABEL_40:
              re::internal::assertLog((re::internal *)6, a2, _D0, a8, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v30, v28);
              uint64_t result = _os_crash();
              __break(1u);
              return result;
            }
            float v35 = *v31;
            v31 += 2;
            *(float *)&double v34 = *(float *)&v34 + fabsf(v35);
            --v33;
            --v32;
          }
          while (v32);
          if (*(float *)&v34 > 0.0)
          {
            if (*(float *)&a8 > *(float *)&v34) {
              *(float *)&a8 = *(float *)&v34;
            }
            if (*(float *)&_D0 < *(float *)&v34) {
              *(float *)&_D0 = *(float *)&v34;
            }
            *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = LODWORD(_D0);
            *(_DWORD *)(a1 + 52) = LODWORD(a8);
          }
        }
        ++v26;
        int v25 = v29;
      }
      while (v26 != (int *)v27);
    }
  }
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)a1, a2);
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(a1 + 24), a2);
  uint64_t result = (uint64_t)re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a1 + 56), a3);
  uint64_t v37 = *(void *)(a1 + 64);
  if (v37)
  {
    DWORD1(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((void *)&v38 + 1) = 0;
    *(float *)&long long v38 = 1.0 / *(float *)(a1 + 52);
    *(void *)&long long v40 = 0;
    HIDWORD(v40) = 0;
    LODWORD(v3re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    *((void *)&v39 + 1) = 0;
    *((float *)&v39 + 1) = *(float *)&v38;
    *((float *)&v40 + 2) = *(float *)&v38;
    uint64_t v41 = *(float32x4_t **)(a1 + 72);
    long long v42 = &v41[4 * v37];
    do
    {
      uint64_t v43 = 0;
      float32x4_t v44 = *v41;
      float32x4_t v45 = v41[1];
      float32x4_t v46 = v41[2];
      float32x4_t v47 = v41[3];
      v51[0] = v38;
      v51[1] = v39;
      v51[2] = v40;
      v51[3] = xmmword_23435FBB0;
      do
      {
        v52[v43] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(v51[v43])), v45, *(float32x2_t *)&v51[v43], 1), v46, (float32x4_t)v51[v43], 2), v47, (float32x4_t)v51[v43], 3);
        ++v43;
      }
      while (v43 != 4);
      float32x4_t v48 = (float32x4_t)v52[1];
      float32x4_t v49 = (float32x4_t)v52[2];
      float32x4_t v50 = (float32x4_t)v52[3];
      float32x4_t *v41 = (float32x4_t)v52[0];
      v41[1] = v48;
      __n128 v41[2] = v49;
      void v41[3] = v50;
      v41 += 4;
    }
    while (v41 != v42);
  }
  return result;
}

uint64_t re::SkinnedMeshBoundsEstimator::init<re::PackedSkinningInfluence>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int **a5, unsigned int a6, double a7, double a8, double a9)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = _D0;
  if (a6)
  {
    unint64_t v17 = a4[1];
    if (v17 >= a6)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      LODWORD(_D0) = 1.0;
      LODWORD(are::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 880803842;
      LODWORD(are::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 1.0;
      do
      {
        if (v19 <= v17) {
          unint64_t v20 = v17;
        }
        else {
          unint64_t v20 = v19;
        }
        unsigned __int8 v21 = v19 + a6;
        double v22 = 0.0;
        do
        {
          if (v20 == v19)
          {
            re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v17);
            _os_crash();
            __break(1u);
            goto LABEL_40;
          }
          *(float *)&double v22 = *(float *)&v22 + (float)((float)(*(_DWORD *)(*a4 + 4 * v19++) & 0x3FFFFF) * 0.00000023842);
        }
        while (v21 != v19);
        if (*(float *)&v22 > 0.0)
        {
          if (*(float *)&a9 > *(float *)&v22) {
            *(float *)&a9 = *(float *)&v22;
          }
          if (*(float *)&_D0 < *(float *)&v22) {
            *(float *)&_D0 = *(float *)&v22;
          }
          *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = LODWORD(_D0);
          *(_DWORD *)(a1 + 52) = LODWORD(a9);
        }
        ++v18;
      }
      while (v18 != v17 / a6);
    }
  }
  else
  {
    float v23 = a5[1];
    if (v23)
    {
      int v24 = 0;
      int v25 = *a5;
      uint64_t v26 = (uint64_t)&(*a5)[(void)v23];
      unint64_t v27 = a4[1];
      LODWORD(_D0) = 1.0;
      LODWORD(are::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 880803842;
      LODWORD(are::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 1.0;
      do
      {
        int v28 = *v25;
        if (v24 < *v25)
        {
          unint64_t v29 = v24;
          if (v27 > v24) {
            unint64_t v29 = v27;
          }
          unint64_t v30 = (int *)(*a4 + 4 * v24);
          uint64_t v31 = v28 - (uint64_t)v24;
          unint64_t v32 = v29 - v24;
          double v33 = 0.0;
          do
          {
            if (!v32)
            {
LABEL_40:
              re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v27);
              uint64_t result = _os_crash();
              __break(1u);
              return result;
            }
            int v34 = *v30++;
            *(float *)&double v33 = *(float *)&v33 + (float)((float)(v34 & 0x3FFFFF) * 0.00000023842);
            --v32;
            --v31;
          }
          while (v31);
          if (*(float *)&v33 > 0.0)
          {
            if (*(float *)&a9 > *(float *)&v33) {
              *(float *)&a9 = *(float *)&v33;
            }
            if (*(float *)&_D0 < *(float *)&v33) {
              *(float *)&_D0 = *(float *)&v33;
            }
            *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = LODWORD(_D0);
            *(_DWORD *)(a1 + 52) = LODWORD(a9);
          }
        }
        ++v25;
        int v24 = v28;
      }
      while (v25 != (int *)v26);
    }
  }
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)a1, a2);
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(a1 + 24), a2);
  uint64_t result = (uint64_t)re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a1 + 56), a3);
  uint64_t v36 = *(void *)(a1 + 64);
  if (v36)
  {
    DWORD1(v3re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    *((void *)&v37 + 1) = 0;
    *(float *)&long long v37 = 1.0 / *(float *)(a1 + 52);
    *(void *)&long long v39 = 0;
    HIDWORD(v3re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((void *)&v38 + 1) = 0;
    *((float *)&v38 + 1) = *(float *)&v37;
    *((float *)&v39 + 2) = *(float *)&v37;
    long long v40 = *(float32x4_t **)(a1 + 72);
    uint64_t v41 = &v40[4 * v36];
    do
    {
      uint64_t v42 = 0;
      float32x4_t v43 = *v40;
      float32x4_t v44 = v40[1];
      float32x4_t v45 = v40[2];
      float32x4_t v46 = v40[3];
      v50[0] = v37;
      v50[1] = v38;
      void v50[2] = v39;
      v50[3] = xmmword_23435FBB0;
      do
      {
        v51[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(v50[v42])), v44, *(float32x2_t *)&v50[v42], 1), v45, (float32x4_t)v50[v42], 2), v46, (float32x4_t)v50[v42], 3);
        ++v42;
      }
      while (v42 != 4);
      float32x4_t v47 = (float32x4_t)v51[1];
      float32x4_t v48 = (float32x4_t)v51[2];
      float32x4_t v49 = (float32x4_t)v51[3];
      float32x4_t *v40 = (float32x4_t)v51[0];
      v40[1] = v47;
      v40[2] = v48;
      v40[3] = v49;
      v40 += 4;
    }
    while (v40 != v41);
  }
  return result;
}

uint64_t re::SkinnedMeshBoundsEstimator::deinit(re::SkinnedMeshBoundsEstimator *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3);
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 6) = _D0;
  return re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 7);
}

void re::SkinnedMeshBoundsEstimator::updateKnownBoundingBoxes(_anonymous_namespace_ *a1, uint64_t a2, void *a3)
{
  re::FixedArray<re::AABB>::operator=(a1, a2);
  uint64_t v6 = *((void *)a1 + 8);
  if (v6)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i != v6; ++i)
    {
      unint64_t v9 = a3[1];
      if (v9 <= i)
      {
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v9);
        _os_crash();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      simd_float4x4 v10 = __invert_f4(*(simd_float4x4 *)(*a3 + v7));
      if (*((void *)a1 + 8) <= i) {
        goto LABEL_8;
      }
      *(simd_float4x4 *)(*((void *)a1 + 9) + vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v10;
      v7 += 64;
    }
  }
}

float32x4_t re::SkinnedMeshBoundsEstimator::updateEstimatedBoundingBoxes(uint64_t a1, uint64_t a2, float32x4_t result)
{
  uint64_t v6 = (void *)a2;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v45 = *(void *)(a1 + 64);
  unsigned int v8 = *(void **)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    for (unint64_t i = 0; (void *)i != v8; ++i)
    {
      simd_float4x4 v10 = *(unsigned char **)(a1 + 8);
      if ((unint64_t)v10 <= i) {
        goto LABEL_28;
      }
      simd_float4x4 v10 = *(unsigned char **)(a1 + 32);
      if ((unint64_t)v10 <= i) {
        goto LABEL_29;
      }
      uint64_t v11 = *(void *)(a1 + 16) + v9;
      int v12 = (_OWORD *)(*(void *)(a1 + 40) + v9);
      uint64_t result = *(float32x4_t *)v11;
      long long v13 = *(_OWORD *)(v11 + 16);
      _OWORD *v12 = *(_OWORD *)v11;
      v12[1] = v13;
      v9 += 32;
    }
  }
  if (v45)
  {
    unint64_t i = 0;
    v14.i64[0] = 0;
    v15.i32[0] = 0;
    v15.i32[3] = 0;
    *(uint64_t *)((char *)v15.i64 + 4) = *(unsigned int *)(a1 + 52);
    v14.i64[1] = *(uint64_t *)((char *)v15.i64 + 4);
    simd_float4x4 v10 = v47;
    float32x4_t v16 = (float32x4_t)xmmword_23435FBB0;
    float32x4_t v43 = (float32x4_t)*(unsigned int *)(a1 + 52);
    float32x4_t v44 = v14;
    float32x4_t v46 = v15;
    while (1)
    {
      unint64_t v17 = v6[1];
      if (v17 <= i) {
        goto LABEL_32;
      }
      uint64_t v18 = 0;
      unint64_t v19 = (float32x4_t *)(*v6 + (i << 6));
      float32x4_t v20 = v19[1];
      float32x4_t v21 = v19[2];
      float32x4_t v22 = v19[3];
      *(float32x4_t *)float32x4_t v47 = *v19;
      *(float32x4_t *)&v47[16] = v20;
      *(float32x4_t *)&v47[32] = v21;
      float32x4_t v48 = v22;
      do
      {
        *(float32x4_t *)((char *)&v56 + v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&v47[v18])), v15, *(float32x2_t *)&v47[v18], 1), v44, *(float32x4_t *)&v47[v18], 2), v16, *(float32x4_t *)&v47[v18], 3);
        v18 += 16;
      }
      while (v18 != 64);
      uint64_t v5 = *(void **)(a1 + 64);
      if ((unint64_t)v5 <= i) {
        goto LABEL_33;
      }
      uint64_t v23 = 0;
      int v24 = (float32x4_t *)(*(void *)(a1 + 72) + (i << 6));
      float32x4_t v25 = v24[1];
      float32x4_t v26 = v24[2];
      float32x4_t v27 = v24[3];
      float32x4_t v28 = v56;
      float32x4_t v29 = v57;
      float32x4_t v30 = v58;
      float32x4_t v31 = v59;
      *(float32x4_t *)float32x4_t v47 = *v24;
      *(float32x4_t *)&v47[16] = v25;
      *(float32x4_t *)&v47[32] = v26;
      float32x4_t v48 = v27;
      do
      {
        *(float32x4_t *)((char *)&v56 + v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&v47[v23])), v29, *(float32x2_t *)&v47[v23], 1), v30, *(float32x4_t *)&v47[v23], 2), v31, *(float32x4_t *)&v47[v23], 3);
        v23 += 16;
      }
      while (v23 != 64);
      uint64_t result = v56;
      *(float32x4_t *)float32x4_t v47 = v56;
      *(float32x4_t *)&v47[16] = v57;
      *(float32x4_t *)&v47[32] = v58;
      float32x4_t v48 = v59;
      if (v8) {
        break;
      }
LABEL_19:
      if (++i == v45) {
        goto LABEL_20;
      }
    }
    uint64_t v32 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 <= (unint64_t)v5) {
        break;
      }
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 <= (unint64_t)v5) {
        goto LABEL_27;
      }
      double v33 = (float32x4_t *)(*(void *)(a1 + 40) + v32);
      re::AABB::transform((float32x4_t *)(*(void *)(a1 + 16) + v32), (float32x4_t *)v47, (uint64_t)&v56);
      float32x4_t v16 = (float32x4_t)xmmword_23435FBB0;
      float32x4_t v15 = v46;
      float32x4_t v34 = v56;
      float32x4_t v35 = *v33;
      float32x4_t v36 = v33[1];
      v35.i32[3] = 0;
      v34.i32[3] = 0;
      float32x4_t *v33 = vminnmq_f32(v35, v34);
      float32x4_t v37 = v57;
      v36.i32[3] = 0;
      v37.i32[3] = 0;
      uint64_t result = vmaxnmq_f32(v36, v37);
      v33[1] = result;
      uint64_t v5 = (void *)((char *)v5 + 1);
      v32 += 32;
      if (v8 == v5) {
        goto LABEL_19;
      }
    }
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    __int16 v50 = 1024;
    int v51 = 468;
    __int16 v52 = 2048;
    uint64_t v53 = v5;
    __int16 v54 = 2048;
    unint64_t v55 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    __int16 v50 = 1024;
    int v51 = 468;
    __int16 v52 = 2048;
    uint64_t v53 = v5;
    __int16 v54 = 2048;
    unint64_t v55 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    *(void *)float32x4_t v49 = 0;
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v47 = 136315906;
    *(void *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(void *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(void *)&v47[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    *(void *)float32x4_t v49 = 0;
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v47 = 136315906;
    *(void *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(void *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(void *)&v47[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    *(void *)float32x4_t v49 = 0;
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v47 = 136315906;
    *(void *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(void *)&v47[20] = v6;
    *(_WORD *)&v47[28] = 2048;
    *(void *)&v47[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    *(void *)float32x4_t v49 = 0;
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v47 = 136315906;
    *(void *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(void *)&v47[20] = v6;
    *(_WORD *)&v47[28] = 2048;
    *(void *)&v47[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v17);
    _os_crash();
    __break(1u);
LABEL_33:
    *(void *)float32x4_t v49 = 0;
    float32x4_t v59 = 0u;
    long long v60 = 0u;
    float32x4_t v57 = 0u;
    float32x4_t v58 = 0u;
    float32x4_t v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v47 = 136315906;
    *(void *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(void *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(void *)&v47[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_20:
  if (v8)
  {
    uint64_t v38 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 <= (unint64_t)v6) {
        goto LABEL_30;
      }
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 <= (unint64_t)v6) {
        goto LABEL_31;
      }
      long long v39 = (float32x4_t *)(*(void *)(a1 + 16) + v38);
      long long v40 = (float32x4_t *)(*(void *)(a1 + 40) + v38);
      float v41 = *(float *)(a1 + 48);
      uint64_t result = vaddq_f32(*v39, vmulq_n_f32(vsubq_f32(*v40, *v39), v41));
      float32x4_t v42 = vaddq_f32(v39[1], vmulq_n_f32(vsubq_f32(v40[1], v39[1]), v41));
      float32x4_t *v40 = result;
      v40[1] = v42;
      uint64_t v6 = (void *)((char *)v6 + 1);
      v38 += 32;
      if (v8 == v6) {
        return result;
      }
    }
  }
  return result;
}

re::DynamicString *re::renderGraphResourceOperationTypeToString@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X8>)
{
  unint64_t v3 = off_264BE60E8[*(int *)a1];
}

uint64_t re::RenderGraphCompiled::targetDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 304);
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (*(void *)(v2 + 16) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v2 + 32) + 112 * v3;
}

void *re::renderGraphResourceSetupToString@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, unsigned char *a5@<X4>, unsigned char *a6@<X5>, re::DynamicString *a7@<X8>)
{
  long long v13 = a7;
  uint64_t v142 = *MEMORY[0x263EF8340];
  *((void *)a7 + 1) = 0;
  *((void *)a7 + 2) = 0;
  *((void *)a7 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  re::DynamicString::setCapacity(v13, 0);
  uint64_t v14 = *((void *)v13 + 1);
  unint64_t v110 = a6;
  if (v14)
  {
    *((void *)v13 + 1) = 1;
    float32x4_t v15 = (unsigned char *)*((void *)v13 + 2);
  }
  else
  {
    *((unsigned char *)v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14 & 1;
    float32x4_t v15 = (char *)v13 + 9;
  }
  *float32x4_t v15 = 0;
  re::DynamicString::setCapacity(v13, 0x400uLL);
  unint64_t v16 = *((void *)a1 + 1);
  if (v16) {
    unint64_t v17 = (const char *)*((void *)a1 + 2);
  }
  else {
    unint64_t v17 = a1 + 9;
  }
  size_t v18 = v16 >> 1;
  size_t v19 = v16 >> 1;
  if (*((void *)a1 + 1)) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v19;
  }
  re::DynamicString::append(v13, v17, v20);
  if (*a4)
  {
    re::DynamicString::format((re::DynamicString *)"\tNodes: %zu\n", (re::DynamicString *)&v137, *(void *)(a3 + 16));
    uint64_t v21 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      float32x4_t v22 = (const char *)v138;
    }
    else {
      float32x4_t v22 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v23 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v23 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v22, v23);
    if ((void)v137 && v21) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(void *)(a3 + 16))
    {
      unint64_t v24 = 0;
      do
      {
        re::DynamicString::format((re::DynamicString *)"\t\t%s\n", (re::DynamicString *)&v137, *(void *)(*(void *)(*(void *)(a3 + 32) + 8 * v24) + 16));
        uint64_t v25 = BYTE8(v137) & 1;
        if (BYTE8(v137)) {
          float32x4_t v26 = (const char *)v138;
        }
        else {
          float32x4_t v26 = (char *)&v137 + 9;
        }
        if (BYTE8(v137)) {
          size_t v27 = *((void *)&v137 + 1) >> 1;
        }
        else {
          size_t v27 = BYTE8(v137) >> 1;
        }
        re::DynamicString::append(v13, v26, v27);
        if ((void)v137) {
          BOOL v28 = v25 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28) {
          (*(void (**)(void))(*(void *)v137 + 40))();
        }
        ++v24;
      }
      while (*(void *)(a3 + 16) > v24);
    }
  }
  if (*a5)
  {
    re::DynamicString::format((re::DynamicString *)"\tSteps: %zu\n", (re::DynamicString *)&v137, *(void *)(a3 + 56));
    uint64_t v29 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      float32x4_t v30 = (const char *)v138;
    }
    else {
      float32x4_t v30 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v31 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v31 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v30, v31);
    uint64_t v32 = (_anonymous_namespace_ *)v137;
    if ((void)v137 && v29) {
      uint64_t v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v137 + 40))();
    }
    if (*(void *)(a3 + 56))
    {
      *((void *)&v127 + 1) = 0;
      long long v128 = 0uLL;
      re::DynamicString::setCapacity(&v127, 0);
      if (BYTE8(v127))
      {
        *((void *)&v127 + 1) = 1;
        double v33 = (unsigned char *)v128;
      }
      else
      {
        BYTE8(v127) &= 1u;
        double v33 = (char *)&v127 + 9;
      }
      unsigned char *v33 = 0;
      re::DynamicString::setCapacity(&v127, 0x80uLL);
      re::DynamicString::format((re::DynamicString *)"\t\t%-9s%-11s%-11s%-11s%-12s%-26s%-20s%-14s%s\n", (re::DynamicString *)&v137, "Resource", "Attachment", "ForceClear", "IsOptional", "RenderStage", "StepType", "ResourceDescription", "EnableNoClear", "Name");
      re::DynamicString::operator=((re::DynamicString *)&v127, (re::DynamicString *)&v137);
      if (void)v137 && (BYTE8(v137)) {
        (*(void (**)(void))(*(void *)v137 + 40))();
      }
      re::DynamicString::trimExcess(&v127);
      if (BYTE8(v127)) {
        float32x4_t v34 = (const char *)v128;
      }
      else {
        float32x4_t v34 = (char *)&v127 + 9;
      }
      if (BYTE8(v127)) {
        size_t v35 = *((void *)&v127 + 1) >> 1;
      }
      else {
        size_t v35 = BYTE8(v127) >> 1;
      }
      re::DynamicString::append(v13, v34, v35);
      float32x4_t v36 = (_anonymous_namespace_ *)v127;
      if (void)v127 && (BYTE8(v127)) {
        float32x4_t v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v127 + 40))();
      }
      if (*(void *)(a3 + 56))
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        unint64_t v112 = v13;
        uint64_t v111 = a3;
        do
        {
          long long v39 = (long long *)(*(void *)(a3 + 72) + v37);
          long long v127 = *v39;
          long long v128 = v39[1];
          long long v129 = v39[2];
          long long v130 = v39[3];
          unint64_t v116 = 0;
          unint64_t v117 = 0;
          uint64_t v118 = 0;
          re::DynamicString::setCapacity(&v115, 0);
          if (v116)
          {
            unint64_t v116 = 1;
            long long v40 = v117;
          }
          else
          {
            LOBYTE(v116) = v116 & 1;
            long long v40 = (char *)&v116 + 1;
          }
          unsigned char *v40 = 0;
          re::DynamicString::setCapacity(&v115, 0x80uLL);
          uint64_t v41 = v127;
          int v42 = v129;
          int v43 = BYTE1(v129);
          unint64_t v44 = DWORD1(v130);
          int v45 = HIDWORD(v129);
          float32x4_t v46 = re::renderGraphResourceOperationTypeToString((_anonymous_namespace_ *)((char *)&v127 + 4), (re::DynamicString *)&v123);
          char v47 = v124;
          float32x4_t v48 = *(unsigned char **)&v125[7];
          uint64_t v120 = 0;
          unint64_t v121 = 0;
          uint64_t v122 = 0;
          re::DynamicString::setCapacity(&v119, 0);
          re::DynamicString::setCapacity(&v119, 0x20uLL);
          unint64_t v114 = v48;
          if (v120)
          {
            uint64_t v120 = 1;
            float32x4_t v49 = v121;
          }
          else
          {
            LOBYTE(v120) = v120 & 1;
            float32x4_t v49 = (char *)&v120 + 1;
          }
          unsigned char *v49 = 0;
          uint64_t v50 = *(void *)(a2 + 296);
          unint64_t v51 = *(void *)(v50 + 16);
          if (v51 <= v44)
          {
            uint64_t v126 = 0;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v137 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v131 = 136315906;
            *(void *)uint64_t v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            __int16 v133 = 2048;
            unint64_t v134 = v44;
            __int16 v135 = 2048;
            unint64_t v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_240:
            uint64_t v126 = 0;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v137 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v131 = 136315906;
            *(void *)uint64_t v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            __int16 v133 = 2048;
            unint64_t v134 = v44;
            __int16 v135 = 2048;
            unint64_t v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_241:
            uint64_t v126 = 0;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v137 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v131 = 136315906;
            *(void *)uint64_t v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            __int16 v133 = 2048;
            unint64_t v134 = v44;
            __int16 v135 = 2048;
            unint64_t v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (*(_DWORD *)(*(void *)(v50 + 32) + 48 * v44))
          {
            __int16 v52 = "Buffer";
            size_t v53 = 6;
          }
          else
          {
            re::DynamicString::append((re::DynamicString *)&v119, "Target", 6uLL);
            if (DWORD1(v127) > 8 || ((1 << SBYTE4(v127)) & 0x1EE) == 0) {
              goto LABEL_81;
            }
            uint64_t v54 = *(void *)(a2 + 296);
            unint64_t v51 = *(void *)(v54 + 16);
            if (v51 <= v44) {
              goto LABEL_241;
            }
            uint64_t v55 = *(void *)(v54 + 32) + 48 * v44;
            *(void *)&long long v137 = *(void *)(v55 + 8) >> 1;
            *((void *)&v137 + 1) = *(void *)(v55 + 24);
            int v56 = *(_DWORD *)(re::RenderGraphCompiled::targetDescription(a2, (uint64_t)&v137) + 56);
            re::DynamicString::append((re::DynamicString *)&v119, " ", 1uLL);
            float32x4_t v57 = "DontCare";
            if (v56 == 1) {
              float32x4_t v57 = "Load";
            }
            if (v56 == 2) {
              float32x4_t v58 = "Clear";
            }
            else {
              float32x4_t v58 = v57;
            }
            size_t v53 = strlen(v58);
            __int16 v52 = v58;
          }
          re::DynamicString::append((re::DynamicString *)&v119, v52, v53);
LABEL_81:
          re::DynamicString::resize(&v119, 0x13uLL, 0);
          uint64_t v59 = *(void *)(a2 + 296);
          unint64_t v51 = *(void *)(v59 + 16);
          if (v51 <= v44) {
            goto LABEL_240;
          }
          uint64_t v113 = v37;
          uint64_t v60 = a2;
          if ((_BYTE)v130) {
            uint64_t v61 = "True";
          }
          else {
            uint64_t v61 = "False";
          }
          if (v120) {
            unint64_t v62 = v121;
          }
          else {
            unint64_t v62 = (char *)&v120 + 1;
          }
          if (v47) {
            int v63 = v114;
          }
          else {
            int v63 = v125;
          }
          if (v45 == 1) {
            id v64 = "Vertex";
          }
          else {
            id v64 = "Fragment";
          }
          if (v43) {
            uint64_t v65 = "True";
          }
          else {
            uint64_t v65 = "False";
          }
          if (v42) {
            float32x4_t v66 = "True";
          }
          else {
            float32x4_t v66 = "False";
          }
          re::StringID::StringID((re::StringID *)&v131, (const StringID *)(*(void *)(v59 + 32) + 48 * v44 + 8));
          re::DynamicString::format((re::DynamicString *)"\t\t%-9d%-11d%-11s%-11s%-12s%-26s%-20s%-14s%s\n", (re::DynamicString *)&v137, v44, v41, v66, v65, v64, v63, v62, v61, *(void *)&v132[4]);
          re::DynamicString::operator=((re::DynamicString *)&v115, (re::DynamicString *)&v137);
          a3 = v111;
          long long v13 = v112;
          if ((void)v137)
          {
            if (BYTE8(v137)) {
              (*(void (**)(void))(*(void *)v137 + 40))();
            }
            long long v137 = 0u;
            long long v138 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v131);
          if (v119 && (v120 & 1) != 0) {
            (*(void (**)(void))(*v119 + 40))();
          }
          a2 = v60;
          if (v123 && (v124 & 1) != 0) {
            (*(void (**)(void))(*(void *)v123 + 40))();
          }
          re::DynamicString::trimExcess(&v115);
          if (v116) {
            BOOL v67 = v117;
          }
          else {
            BOOL v67 = (char *)&v116 + 1;
          }
          if (v116) {
            size_t v68 = v116 >> 1;
          }
          else {
            size_t v68 = v116 >> 1;
          }
          re::DynamicString::append(v112, v67, v68);
          float32x4_t v36 = (_anonymous_namespace_ *)v115;
          if (v115 && (v116 & 1) != 0) {
            float32x4_t v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v115 + 40))();
          }
          ++v38;
          uint64_t v37 = v113 + 64;
        }
        while (*(void *)(v111 + 56) > v38);
      }
    }
  }
  if (*v110)
  {
    re::DynamicString::format((re::DynamicString *)"\tProperties:\n", (re::DynamicString *)&v137);
    uint64_t v69 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      BOOL v70 = (const char *)v138;
    }
    else {
      BOOL v70 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v71 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v71 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v70, v71);
    if ((void)v137 && v69) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "Key", "Value");
    uint64_t v72 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      uint64_t v73 = (const char *)v138;
    }
    else {
      uint64_t v73 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v74 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v74 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v73, v74);
    if ((void)v137 && v72) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%llu\n", (re::DynamicString *)&v137, "WriteProtectionOptions", *(void *)(a3 + 160));
    uint64_t v75 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      int v76 = (const char *)v138;
    }
    else {
      int v76 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v77 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v77 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v76, v77);
    if ((void)v137 && v75) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(unsigned char *)(a3 + 168)) {
      int v78 = "True";
    }
    else {
      int v78 = "False";
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "HasSideEffect", v78);
    uint64_t v79 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      uint64_t v80 = (const char *)v138;
    }
    else {
      uint64_t v80 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v81 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v81 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v80, v81);
    if ((void)v137 && v79) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(unsigned char *)(a3 + 169)) {
      int v82 = "True";
    }
    else {
      int v82 = "False";
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "HasCustomEncoders", v82);
    uint64_t v83 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      uint64_t v84 = (const char *)v138;
    }
    else {
      uint64_t v84 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v85 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v85 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v84, v85);
    if ((void)v137 && v83) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(unsigned char *)(a3 + 170)) {
      float32x4_t v86 = "True";
    }
    else {
      float32x4_t v86 = "False";
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "IsParallel", v86);
    uint64_t v87 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      uint64_t v88 = (const char *)v138;
    }
    else {
      uint64_t v88 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v89 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v89 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v88, v89);
    if ((void)v137 && v87) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%zu\n", (re::DynamicString *)&v137, "ThreadgroupMemoryLength", *(void *)(a3 + 176));
    uint64_t v90 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      long long v91 = (const char *)v138;
    }
    else {
      long long v91 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v92 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v92 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v91, v92);
    if ((void)v137 && v90) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    unsigned int v93 = *(unsigned __int8 *)(a3 + 184) - 1;
    if (v93 > 2) {
      uint64_t v94 = "Automatic";
    }
    else {
      uint64_t v94 = off_264BE6150[(char)v93];
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "TileSizeOverride", v94);
    uint64_t v95 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      id v96 = (const char *)v138;
    }
    else {
      id v96 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v97 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v97 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v96, v97);
    if ((void)v137 && v95) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(unsigned char *)(a3 + 171)) {
      uint64_t v98 = "True";
    }
    else {
      uint64_t v98 = "False";
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "EnableVRR", v98);
    uint64_t v99 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      unint64_t v100 = (const char *)v138;
    }
    else {
      unint64_t v100 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v101 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v101 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v100, v101);
    if ((void)v137 && v99) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%hhu\n", (re::DynamicString *)&v137, "ProgrammableBlendingAttachmentMask", *(unsigned __int8 *)(a3 + 185));
    uint64_t v102 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      uint64_t v103 = (const char *)v138;
    }
    else {
      uint64_t v103 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v104 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v104 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v103, v104);
    if ((void)v137 && v102) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
    if (*(unsigned char *)(a3 + 186)) {
      unint64_t v105 = "True";
    }
    else {
      unint64_t v105 = "False";
    }
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "EnableNoClearOptimization", v105);
    uint64_t v106 = BYTE8(v137) & 1;
    if (BYTE8(v137)) {
      unint64_t v107 = (const char *)v138;
    }
    else {
      unint64_t v107 = (char *)&v137 + 9;
    }
    if (BYTE8(v137)) {
      size_t v108 = *((void *)&v137 + 1) >> 1;
    }
    else {
      size_t v108 = BYTE8(v137) >> 1;
    }
    re::DynamicString::append(v13, v107, v108);
    if ((void)v137 && v106) {
      (*(void (**)(void))(*(void *)v137 + 40))();
    }
  }
  return re::DynamicString::trimExcess(v13);
}

uint64_t re::DynamicArray<re::RenderGraphResourceOperation>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RigTransform>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RenderGraphResourceOperation>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::RenderGraphResourceOperation>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigTransform>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), ((void)v5 << 6) - 8);
      unint64_t v5 = v3[2];
    }
    uint64_t result = (void **)memcpy((char *)v3[4] + 64 * (void)v5, (const void *)(*(void *)(a2 + 32) + ((void)v5 << 6)), (v4 << 6) - ((void)v5 << 6));
  }
  else if (v4)
  {
    uint64_t result = (void **)memmove(result[4], *(const void **)(a2 + 32), (v4 << 6) - 8);
  }
  void v3[2] = (void *)v4;
  return result;
}

uint64_t re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(re::DeformerFeatureFlags *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_2687A0000;
  {
    uint64_t v1 = (unsigned char *)&unk_2687A0000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"DeformerSkinningAssignLogging", v4, v7);
      if (v7[0]) {
        BOOL v5 = v7[1] == 0;
      }
      else {
        BOOL v5 = 1;
      }
      char v6 = !v5;
      re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(void)::enabled = v6;
      uint64_t v1 = (unsigned char *)&unk_2687A0000;
    }
  }
  return v1[536];
}

uint64_t re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(re::DeformerFeatureFlags *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_2687A0000;
  {
    uint64_t v1 = (unsigned char *)&unk_2687A0000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"CustomDeformerLogging", v4, v7);
      if (v7[0]) {
        BOOL v5 = v7[1] == 0;
      }
      else {
        BOOL v5 = 1;
      }
      char v6 = !v5;
      re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(void)::enabled = v6;
      uint64_t v1 = (unsigned char *)&unk_2687A0000;
    }
  }
  return v1[552];
}

void re::MaterialTextureParam::setString(re::MaterialTextureParam *this, const re::DynamicString *a2)
{
  unint64_t v4 = (const re::DynamicString *)((char *)a2 + 9);
  if (*((void *)a2 + 1)) {
    BOOL v5 = (re *)*((void *)a2 + 2);
  }
  else {
    BOOL v5 = (const re::DynamicString *)((char *)a2 + 9);
  }
  if (re::materialTextureParamIsAsset(v5, (const char *)a2))
  {
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    if (*((void *)a2 + 1)) {
      char v6 = (re::AssetPath *)*((void *)a2 + 2);
    }
    else {
      char v6 = v4;
    }
    re::AssetHandle::setSerializationString((re::DynamicString *)&v10, v6, *(re::Allocator **)a2);
    uint64_t v7 = *((unsigned int *)this + 8);
    if (v7 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0[v7]((int)&v9, this);
    }
    *(_OWORD *)this = v10;
    long long v10 = 0uLL;
    *((void *)this + 2) = v11;
    uint64_t v11 = 0;
    *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    unsigned int v8 = (re::AssetPath *)*((void *)a2 + 2);
    if ((*((void *)a2 + 1) & 1) == 0) {
      unsigned int v8 = v4;
    }
    uint64_t v9 = *(re::Allocator **)a2;
    *(void *)&long long v10 = v8;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>(this, (const char **)&v10, &v9);
  }
}

re::MaterialTextureParam *re::MaterialTextureParam::MaterialTextureParam(re::MaterialTextureParam *this, const re::DynamicString *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  re::DynamicString::setCapacity(this, 0);
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::MaterialTextureParam::setString(this, a2);
  return this;
}

char *re::MaterialTextureParam::serializationString(re::MaterialTextureParam *this, uint64_t a2)
{
  if (!this) {
    goto LABEL_20;
  }
  int v2 = *((_DWORD *)this + 8);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = *((void *)this + 2);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 8))
        {
          unint64_t v4 = *(char **)(v3 + 16);
          if (!v4) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v4 = (char *)(v3 + 9);
        }
      }
      else
      {
        unint64_t v4 = &str_1_16;
      }
      if (*v4)
      {
LABEL_16:
        if (v4) {
          return v4;
        }
        else {
          return (char *)&str_25_9;
        }
      }
LABEL_13:
      char v6 = (char *)re::AssetHandle::legacy_assetPath(this);
      if (v6[48]) {
        unint64_t v4 = (char *)*((void *)v6 + 7);
      }
      else {
        unint64_t v4 = v6 + 49;
      }
      goto LABEL_16;
    }
LABEL_20:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
      "false",
      "serializationString",
      104);
    uint64_t result = (char *)_os_crash();
    __break(1u);
    return result;
  }
  if (*((unsigned char *)this + 8)) {
    return (char *)*((void *)this + 2);
  }
  else {
    return (char *)this + 9;
  }
}

uint64_t re::MaterialTextureParam::introspectionSerialize(re::DynamicString *a1, uint64_t a2, uint64_t a3, re::DynamicString *this)
{
  if (!a1) {
    goto LABEL_8;
  }
  int v4 = *((_DWORD *)a1 + 8);
  if (!v4)
  {
    re::DynamicString::operator=(this, a1);
    return 1;
  }
  if (v4 == 1)
  {
    return re::AssetHandle::introspectionSerialize(a2, a3, a1, this);
  }
  else
  {
LABEL_8:
    re::internal::assertLog((re::internal *)4, a2, a3, this, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
      "false",
      "introspectionSerialize",
      120);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::MaterialTextureParam::introspectionDeserialize(uint64_t a1, re::Allocator *a2, void *a3, int a4, re *this)
{
  float32x4_t v15 = (const char *)this;
  unint64_t v16 = a2;
  if (re::materialTextureParamIsAsset(this, (const char *)a2))
  {
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v10 = re::AssetHandle::introspectionDeserialize(a2, a3, a4, (re::DynamicString *)&v13, (char *)this);
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    if (v11 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0[v11]((int)&v17, (re::DynamicString *)a1);
    }
    *(_OWORD *)a1 = v13;
    long long v13 = 0uLL;
    *(void *)(a1 + 16) = v14;
    uint64_t v14 = 0;
    *(_DWORD *)(a1 + 32) = 1;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>((re::DynamicString *)a1, &v15, &v16);
    return 1;
  }
  return v10;
}

uint64_t re::MaterialTechniqueGroupData::deinit(const re::DynamicString **this)
{
  re::DynamicString::deinit((re::DynamicString *)this);
  int v2 = this[6];
  if (v2)
  {
    uint64_t v3 = this[8];
    uint64_t v4 = 32 * (void)v2;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v6, v3);
      if (v6 && (v7 & 1) != 0) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
      uint64_t v3 = (const re::DynamicString *)((char *)v3 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)(this + 4));
}

uint64_t re::MaterialTechniqueQualityLevelSetData::deinit(const re::DynamicString **this)
{
  re::DynamicString::deinit((re::DynamicString *)this);
  int v2 = this[10];
  if (v2)
  {
    uint64_t v3 = this[12];
    uint64_t v4 = 32 * (void)v2;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v6, v3);
      if (v6 && (v7 & 1) != 0) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
      uint64_t v3 = (const re::DynamicString *)((char *)v3 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)(this + 8));
}

double re::MaterialDefinitionFile::deinit(re::MaterialDefinitionFile *this)
{
  int v2 = (uint64_t *)((char *)this + 144);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v2);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42);
  re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384);
  re::DynamicArray<re::MaterialTechniqueGroupData>::deinit((uint64_t)this + 424);
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit((uint64_t)this + 648);
  uint64_t v3 = *((unsigned int *)this + 124);
  if (v3)
  {
    uint64_t v4 = 0;
    BOOL v5 = (int *)(*((void *)this + 60) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 20;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 124);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(*((void *)this + 60) + 80 * v7 + 48));
      if (*((_DWORD *)this + 124) <= (v4 + 1)) {
        int v8 = v4 + 1;
      }
      else {
        int v8 = *((_DWORD *)this + 124);
      }
      int v9 = v4;
      while (1)
      {
        uint64_t v7 = (v9 + 1);
        if (v8 - 1 == v9) {
          break;
        }
        ++v9;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((void *)this + 60) + 80 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v4) = v8;
LABEL_17:
      ;
    }
    while (v3 != v4);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 58);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64);
  uint64_t v10 = *((void *)this + 72);
  if (v10)
  {
    uint64_t v11 = (const re::DynamicString *)*((void *)this + 74);
    uint64_t v12 = 80 * v10;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)v15, v11);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v16, (uint64_t)v11 + 32);
      if (*(void *)&v15[0])
      {
        if (BYTE8(v15[0])) {
          (*(void (**)(void))(**(void **)&v15[0] + 40))();
        }
        memset(v15, 0, sizeof(v15));
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v16);
      double v13 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v16);
      if (*(void *)&v15[0] && (BYTE8(v15[0]) & 1) != 0) {
        (*(void (**)(double))(**(void **)&v15[0] + 40))(v13);
      }
      uint64_t v11 = (const re::DynamicString *)((char *)v11 + 80);
      v12 -= 80;
    }
    while (v12);
  }
  re::DynamicString::deinit(this);
  return re::DynamicString::deinit((re::MaterialDefinitionFile *)((char *)this + 32));
}

id re::MaterialSamplerData::makeDescriptor@<X0>(re::MaterialSamplerData *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 1) != 5)
  {
    if (*((_DWORD *)this + 2) != 5)
    {
      if (*((_DWORD *)this + 3) != 5) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    goto LABEL_5;
  }
  uint64_t v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (R Address Mode)", 0x23uLL);
  if (*((_DWORD *)this + 2) == 5)
  {
    re::DynamicString::append((re::DynamicString *)&v11, ", ", 2uLL);
LABEL_5:
    uint64_t v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (S Address Mode)", 0x23uLL);
  }
  if (*((_DWORD *)this + 3) != 5) {
    goto LABEL_10;
  }
  re::DynamicString::append((re::DynamicString *)&v11, ", ", 2uLL);
LABEL_9:
  uint64_t v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (T Address Mode)", 0x23uLL);
LABEL_10:
  BOOL v5 = *re::graphicsLogObjects(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v12) {
      int v6 = *(unsigned char **)&v13[7];
    }
    else {
      int v6 = v13;
    }
    *(_DWORD *)long long buf = 136315138;
    float32x4_t v15 = v6;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_15:
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  *a2 = v7;
  objc_msgSend(v7, sel_setNormalizedCoordinates_, *(unsigned __int8 *)this);
  objc_msgSend(v7, sel_setRAddressMode_, *((int *)this + 1));
  objc_msgSend(v7, sel_setSAddressMode_, *((int *)this + 2));
  objc_msgSend(v7, sel_setTAddressMode_, *((int *)this + 3));
  objc_msgSend(v7, sel_setBorderColor_, *((int *)this + 4));
  objc_msgSend(v7, sel_setMinFilter_, *((int *)this + 5));
  objc_msgSend(v7, sel_setMagFilter_, *((int *)this + 6));
  objc_msgSend(v7, sel_setMipFilter_, *((int *)this + 7));
  LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)this + 9);
  objc_msgSend(v7, sel_setLodMinClamp_, v8);
  LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *((_DWORD *)this + 10);
  objc_msgSend(v7, sel_setLodMaxClamp_, v9);
  objc_msgSend(v7, sel_setLodAverage_, *((unsigned __int8 *)this + 1));
  objc_msgSend(v7, sel_setMaxAnisotropy_, *((void *)this + 6));
  return objc_msgSend(v7, sel_setCompareFunction_, *((int *)this + 8));
}

unint64_t re::MaterialSamplerData::hash(re::MaterialSamplerData *this)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*((int *)this + 1) ^ ((unint64_t)*((int *)this + 1) >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*((int *)this + 2) ^ ((unint64_t)*((int *)this + 2) >> 30));
  unint64_t v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  unint64_t v6 = 0xBF58476D1CE4E5B9 * (*((int *)this + 3) ^ ((unint64_t)*((int *)this + 3) >> 30));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((int *)this + 4) ^ ((unint64_t)*((int *)this + 4) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 4) ^ ((unint64_t)*((int *)this + 4) >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (*((int *)this + 5) ^ ((unint64_t)*((int *)this + 5) >> 30));
  unint64_t v11 = re::hashCombine(*(unsigned __int8 *)this, v3, v5, v7, v9, (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31));
  unint64_t v12 = 0xBF58476D1CE4E5B9 * (*((int *)this + 6) ^ ((unint64_t)*((int *)this + 6) >> 30));
  unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
  unint64_t v14 = 0xBF58476D1CE4E5B9 * (*((int *)this + 7) ^ ((unint64_t)*((int *)this + 7) >> 30));
  unint64_t v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
  LODWORD(vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 73244475 * (*((_DWORD *)this + 9) ^ HIWORD(*((_DWORD *)this + 9)));
  unint64_t v16 = (73244475 * (v14 ^ WORD1(v14))) ^ ((73244475 * (v14 ^ WORD1(v14))) >> 16);
  LODWORD(vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 73244475
               * ((73244475 * (*((_DWORD *)this + 10) ^ HIWORD(*((_DWORD *)this + 10)))) ^ ((73244475 * (*((_DWORD *)this + 10) ^ HIWORD(*((_DWORD *)this + 10)))) >> 16));
  uint64_t v17 = v14 ^ WORD1(v14);
  unint64_t v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 1)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int8 *)this + 1)) >> 27));
  unint64_t v19 = v18 ^ (v18 >> 31);
  unint64_t v20 = 0xBF58476D1CE4E5B9 * (*((void *)this + 6) ^ (*((void *)this + 6) >> 30));
  unint64_t v21 = re::hashCombine(v13, v15, v16, v17, v19, (0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31));
  unint64_t v22 = 0xBF58476D1CE4E5B9 * (*((int *)this + 8) ^ ((unint64_t)*((int *)this + 8) >> 30));
  return ((v11 << 6)
        + (v11 >> 2)
        - 0x61C8864680B583E9
        + (((v21 << 6)
          + (v21 >> 2)
          + ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
          - 0x61C8864680B583E9) ^ v21)) ^ v11;
}

unint64_t re::hashCombine(unint64_t this, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6 = (a2 + (this << 6) + (this >> 2) - 0x61C8864680B583E9) ^ this;
  unint64_t v7 = (a4 + (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9) ^ a3;
  return ((v6 << 6)
        + (v6 >> 2)
        - 0x61C8864680B583E9
        + (((v7 << 6) + (v7 >> 2) + ((a6 + (a5 << 6) + (a5 >> 2) - 0x61C8864680B583E9) ^ a5) - 0x61C8864680B583E9) ^ v7)) ^ v6;
}

void re::OptionalMaterialSamplerData::makeSamplerData(re::OptionalMaterialSamplerData *this@<X0>, uint64_t a2@<X8>)
{
  switch(*(unsigned char *)this)
  {
    case 0:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v3 = xmmword_2343AE450;
      goto LABEL_10;
    case 1:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v4 = xmmword_2343AE450;
      goto LABEL_12;
    case 3:
      *(_WORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = xmmword_2343AE450;
      *(void *)(a2 + 20) = 0x100000001;
      *(_DWORD *)(a2 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
      *(void *)(a2 + 36) = 0x7F80000000000000;
      uint64_t v2 = 4;
      goto LABEL_19;
    case 4:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      *(void *)(a2 + 4) = 0;
      *(void *)(a2 + 20) = 0;
      *(void *)(a2 + 12) = 0;
      goto LABEL_14;
    case 5:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      *(void *)(a2 + 12) = 0;
      *(void *)(a2 + 4) = 0;
      goto LABEL_13;
    case 6:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      *(void *)(a2 + 12) = 0;
      *(void *)(a2 + 4) = 0;
      goto LABEL_17;
    case 7:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v3 = xmmword_2343AE440;
LABEL_10:
      *(_OWORD *)(a2 + 4) = v3;
      *(_DWORD *)(a2 + 20) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      goto LABEL_14;
    case 8:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v4 = xmmword_2343AE440;
LABEL_12:
      *(_OWORD *)(a2 + 4) = v4;
LABEL_13:
      *(void *)(a2 + 20) = 0x100000001;
LABEL_14:
      *(_DWORD *)(a2 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
      goto LABEL_18;
    case 9:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v5 = xmmword_2343AE440;
      goto LABEL_16;
    default:
      uint64_t v2 = 1;
      *(_WORD *)a2 = 1;
      long long v5 = xmmword_2343AE450;
LABEL_16:
      *(_OWORD *)(a2 + 4) = v5;
LABEL_17:
      *(void *)(a2 + 20) = 0x100000001;
      *(_DWORD *)(a2 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
LABEL_18:
      *(void *)(a2 + 36) = 0x7F80000000000000;
LABEL_19:
      *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v2;
      *(_DWORD *)(a2 + 32) = 0;
      unint64_t v6 = (_DWORD *)(a2 + 32);
      if (*((unsigned char *)this + 1)) {
        unint64_t v7 = (char *)this + 2;
      }
      else {
        unint64_t v7 = (unsigned char *)a2;
      }
      *(unsigned char *)a2 = *v7;
      unint64_t v8 = (int *)(a2 + 4);
      if (*((unsigned char *)this + 8)) {
        unint64_t v8 = (int *)((char *)this + 12);
      }
      int v9 = *v8;
      unint64_t v10 = (int *)(a2 + 8);
      if (*((unsigned char *)this + 16)) {
        unint64_t v10 = (int *)((char *)this + 20);
      }
      int v11 = *v10;
      *(_DWORD *)(a2 + 4) = v9;
      *(_DWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
      unint64_t v12 = (int *)(a2 + 12);
      if (*((unsigned char *)this + 24)) {
        unint64_t v12 = (int *)((char *)this + 28);
      }
      int v13 = *v12;
      unint64_t v14 = (int *)(a2 + 16);
      if (*((unsigned char *)this + 32)) {
        unint64_t v14 = (int *)((char *)this + 36);
      }
      int v15 = *v14;
      *(_DWORD *)(a2 + 12) = v13;
      *(_DWORD *)(a2 + 16) = v15;
      unint64_t v16 = (int *)(a2 + 20);
      if (*((unsigned char *)this + 40)) {
        unint64_t v16 = (int *)((char *)this + 44);
      }
      int v17 = *v16;
      unint64_t v18 = (int *)(a2 + 24);
      if (*((unsigned char *)this + 48)) {
        unint64_t v18 = (int *)((char *)this + 52);
      }
      int v19 = *v18;
      *(_DWORD *)(a2 + 20) = v17;
      *(_DWORD *)(a2 + 24) = v19;
      unint64_t v20 = (_DWORD *)(a2 + 28);
      if (*((unsigned char *)this + 56)) {
        unint64_t v20 = (_DWORD *)((char *)this + 60);
      }
      *(_DWORD *)(a2 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *v20;
      unint64_t v21 = (int *)(a2 + 36);
      if (*((unsigned char *)this + 72)) {
        unint64_t v21 = (int *)((char *)this + 76);
      }
      int v22 = *v21;
      size_t v23 = (int *)(a2 + 40);
      if (*((unsigned char *)this + 80)) {
        size_t v23 = (int *)((char *)this + 84);
      }
      int v24 = *v23;
      *(_DWORD *)(a2 + 36) = v22;
      *(_DWORD *)(a2 + 40) = v24;
      if (*((unsigned char *)this + 3)) {
        uint64_t v25 = (char *)this + 4;
      }
      else {
        uint64_t v25 = (unsigned char *)(a2 + 1);
      }
      *(unsigned char *)(a2 + 1) = *v25;
      float32x4_t v26 = (uint64_t *)(a2 + 48);
      if (*((unsigned char *)this + 88)) {
        size_t v27 = (void *)((char *)this + 96);
      }
      else {
        size_t v27 = (void *)(a2 + 48);
      }
      *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *v27;
      if (*((unsigned char *)this + 64)) {
        BOOL v28 = (_DWORD *)((char *)this + 68);
      }
      else {
        BOOL v28 = (_DWORD *)(a2 + 32);
      }
      *unint64_t v6 = *v28;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948A8, memory_order_acquire) & 1) == 0)
      {
        double v33 = v26;
        int v30 = __cxa_guard_acquire(&qword_26AF948A8);
        float32x4_t v26 = v33;
        if (v30)
        {
          re::Defaults::uint64Value((re::Defaults *)"materialSamplerMaxAnisotropy", v31, (uint64_t)v34);
          if (v34[0]) {
            uint64_t v32 = v35;
          }
          else {
            uint64_t v32 = 0;
          }
          _MergedGlobals_381 = v32;
          __cxa_guard_release(&qword_26AF948A8);
          float32x4_t v26 = v33;
        }
      }
      uint64_t v29 = _MergedGlobals_381;
      if (_MergedGlobals_381)
      {
        if ((unint64_t)_MergedGlobals_381 >= 0x10) {
          uint64_t v29 = 16;
        }
        *float32x4_t v26 = v29;
      }
      return;
  }
}

float re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = 266;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)a2;
  *(unsigned char *)(a1 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 1;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 80) = 1;
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 84) = result;
  *(unsigned char *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(void *)(a1 + 96) = *(void *)(a2 + 48);
  return result;
}

id re::MaterialSamplerData::fromDescriptor@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = objc_msgSend(*a1, sel_normalizedCoordinates);
  *(_DWORD *)(a2 + 4) = objc_msgSend(*a1, sel_rAddressMode);
  *(_DWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = objc_msgSend(*a1, sel_sAddressMode);
  *(_DWORD *)(a2 + 12) = objc_msgSend(*a1, sel_tAddressMode);
  *(_DWORD *)(a2 + 16) = objc_msgSend(*a1, sel_borderColor);
  *(_DWORD *)(a2 + 20) = objc_msgSend(*a1, sel_minFilter);
  *(_DWORD *)(a2 + 24) = objc_msgSend(*a1, sel_magFilter);
  *(_DWORD *)(a2 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = objc_msgSend(*a1, sel_mipFilter);
  objc_msgSend(*a1, sel_lodMinClamp);
  *(_DWORD *)(a2 + 36) = v4;
  objc_msgSend(*a1, sel_lodMaxClamp);
  *(_DWORD *)(a2 + 40) = v5;
  *(unsigned char *)(a2 + 1) = objc_msgSend(*a1, sel_lodAverage);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = objc_msgSend(*a1, sel_maxAnisotropy);
  id result = objc_msgSend(*a1, sel_compareFunction);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

unint64_t re::FunctionLink::appendFunctionConstant(uint64_t a1, re::DynamicString *a2, char *a3, unsigned __int16 a4)
{
  size_t Size = MTLDataTypeGetSize();
  unint64_t v9 = *(void *)(a1 + 248);
  re::DynamicArray<REFrameAnalysisBottleneck>::copy((void *)(a1 + 232), v9, a3, Size);
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = a4;
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ConstantDataEntry&>(a1 + 184, a2, &v11);
}

unint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ConstantDataEntry&>(uint64_t a1, re::DynamicString *a2, _OWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + ((unint64_t)v12 << 6) + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2)) {
      return v11 + 48;
    }
    uint64_t v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>(re::DynamicString *this, const char **a2, re::Allocator **a3)
{
  uint64_t v6 = *((unsigned int *)this + 8);
  if (v6 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0[v6]((int)&v8, this);
  }
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  id result = re::DynamicString::DynamicString(this, *a2, *a3);
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::generatePatchPlane@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = 0;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  v61[0] = 0;
  int v63 = 0;
  unint64_t v7 = *(void *)a2;
  float v8 = 1.0;
  do
  {
    unint64_t v9 = 0;
    do
    {
      v10.n128_f32[0] = (float)((float)v9 / (float)v7) + -0.5;
      float v11 = (float)((float)v6 / (float)*(unint64_t *)(a2 + 8)) + -0.5;
      if (*(_DWORD *)(a2 + 16)) {
        char v12 = 2;
      }
      else {
        char v12 = 1;
      }
      v10.n128_u32[1] = 0;
      v10.n128_u32[2] = 0;
      v10.n128_f32[3] = v8;
      __n128 v48 = v10;
      *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) = v11;
      __n128 v54 = v48;
      *(void *)&double v13 = re::DynamicArray<re::Vector4<float>>::add((_anonymous_namespace_ *)v61, &v54).n128_u64[0];
      float v8 = 1.0;
      ++v9;
      unint64_t v7 = *(void *)a2;
    }
    while (v9 <= *(void *)a2);
    ++v6;
    unint64_t v14 = *(void *)(a2 + 8);
  }
  while (v6 <= v14);
  uint64_t v60 = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  v57[0] = 0;
  int v59 = 0;
  if (v14)
  {
    uint64_t v15 = 0;
    do
    {
      unint64_t v16 = v15 + 1;
      if (v7)
      {
        unint64_t v17 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 16))
          {
            unint64_t v18 = v17 + 1;
            unint64_t v19 = v7 + 1;
            int v20 = (v7 + 1) * v15;
            unsigned __int16 v21 = v20 + v17 + 1;
            uint64_t v22 = v19 * v16;
            unsigned __int16 v23 = v19 * v16 + v17;
          }
          else
          {
            int v24 = v7 + 1;
            uint64_t v22 = (v7 + 1) * v15;
            unsigned __int16 v21 = v22 + v17;
            int v20 = v24 * v16;
            unint64_t v18 = v17 + 1;
            unsigned __int16 v23 = v20 + v17 + 1;
          }
          v54.n128_u64[0] = v21 | ((v22 + v18) << 48) | ((v20 + v17) << 16) | ((unint64_t)v23 << 32);
          re::DynamicArray<unsigned short>::add(v57, &v54);
          re::DynamicArray<unsigned short>::add(v57, &v54.n128_u16[3]);
          re::DynamicArray<unsigned short>::add(v57, &v54.n128_u16[1]);
          re::DynamicArray<unsigned short>::add(v57, &v54.n128_u16[3]);
          re::DynamicArray<unsigned short>::add(v57, &v54.n128_u16[2]);
          re::DynamicArray<unsigned short>::add(v57, &v54.n128_u16[1]);
          unint64_t v7 = *(void *)a2;
          unint64_t v17 = v18;
        }
        while (v18 < *(void *)a2);
        unint64_t v14 = *(void *)(a2 + 8);
      }
      ++v15;
    }
    while (v16 < v14);
  }
  v54.n128_u64[0] = 0;
  v54.n128_u32[2] = 0;
  uint64_t v25 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(a1 + 184), sel_newBufferWithBytes_length_options_, v64, 16 * v62, 0, v13);
  LOWORD(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 287;
  *((void *)&v68 + 1) = v25;
  LODWORD(v6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  DWORD1(v6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = [(_anonymous_namespace_ *)v25 length];
  *((void *)&v69 + 1) = 0xFFFFFFFF00000000;
  re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add((uint64_t)&v54, (uint64_t)v67);
  if (*((void *)&v68 + 1))
  {

    *((void *)&v68 + 1) = 0;
  }
  if (*(void *)v67 && (v67[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v67 + 40))();
  }
  if (v25) {

  }
  float32x4_t v26 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(a1 + 184), sel_newBufferWithBytes_length_options_, v60, 2 * v58, 0);
  LOWORD(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 49;
  *((void *)&v68 + 1) = v26;
  LODWORD(v6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  DWORD1(v6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = [(_anonymous_namespace_ *)v26 length];
  *((void *)&v69 + 1) = 0xFFFFFFFF00000000;
  re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add((uint64_t)&v54, (uint64_t)v67);
  if (*((void *)&v68 + 1))
  {

    *((void *)&v68 + 1) = 0;
  }
  if (*(void *)v67 && (v67[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v67 + 40))();
  }
  if (v26) {

  }
  v27.i32[0] = 0;
  v28.i32[0] = *(_DWORD *)(a2 + 16);
  int8x16_t v29 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v28, v27), 0);
  v53[0] = vbslq_s8(v29, (int8x16_t)xmmword_2343AE490, (int8x16_t)xmmword_2343AE480);
  v53[1] = vbslq_s8(v29, (int8x16_t)xmmword_2343AE470, (int8x16_t)xmmword_2343AE460);
  std::to_string(&v50, *(void *)a2);
  int v30 = std::string::insert(&v50, 0, "PlanePatch-");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = std::string::append(&v70, "x");
  std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)BOOL v67 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&v67[16] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v49, *(void *)(a2 + 8));
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float32x4_t v34 = &v49;
  }
  else {
    float32x4_t v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v49.__r_.__value_.__l.__size_;
  }
  float32x4_t v36 = std::string::append((std::string *)v67, (const std::string::value_type *)v34, size);
  std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  uint64_t v52 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if ((v67[23] & 0x80000000) != 0) {
    operator delete(*(void **)v67);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (v52 >= 0) {
    unint64_t v38 = __p;
  }
  else {
    unint64_t v38 = (void **)__p[0];
  }
  v49.__r_.__value_.__r.__words[0] = 0;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"";
  int v39 = v58;
  int v40 = v62;
  int v42 = re::globalAllocators(v41);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42[2] + 32))(v42[2], 560, 16);
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[0] = 0;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"";
  *(_OWORD *)BOOL v67 = xmmword_23435FD50;
  *(_OWORD *)&v67[16] = xmmword_23435FD60;
  long long v68 = xmmword_23435FD80;
  long long v69 = xmmword_23435FBB0;
  __int16 v66 = 0;
  int v65 = 0;
  uint64_t v44 = re::MeshPart::MeshPart(v43, (uint64_t *)&v50, 0, (uint64_t)&v55, v54.n128_u64[0], v39, v40, 1, v53, 0, (long long *)v67, (re::MeshPartFlags *)&v65, -1, 0);
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26E70ED48;
  size_t v71 = &v70;
  a3[4] = (uint64_t)(a3 + 1);
  *a3 = v44;
  a3[1] = (uint64_t)&unk_26E70ED48;
  std::__function::__value_func<void ()(re::MeshPart *)>::~__value_func[abi:nn180100](&v70);
  re::StringID::destroyString((re::StringID *)&v50);
  re::StringID::destroyString((re::StringID *)&v49);
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
  if (v54.n128_u64[0])
  {
    unint64_t v45 = v54.n128_u64[0] << 6;
    float32x4_t v46 = (id *)&v56;
    do
    {
      if (*v46)
      {

        *float32x4_t v46 = 0;
      }
      re::DynamicString::deinit((re::DynamicString *)(v46 - 5));
      v46 += 8;
      v45 -= 64;
    }
    while (v45);
  }
  if (v57[0] && v60) {
    (*(void (**)(void))(*(void *)v57[0] + 40))();
  }
  uint64_t result = v61[0];
  if (v61[0])
  {
    if (v64) {
      return (*(uint64_t (**)(void))(*(void *)v61[0] + 40))();
    }
  }
  return result;
}

id re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    id result = (id)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v4 = a1 + (*(void *)a1 << 6);
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(void *)(v4 + 40) = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)a2;
    *(void *)a2 = 0;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + 24) = 0;
    uint64_t v8 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v4 + 32);
    *(void *)(v4 + 24) = v5;
    *(void *)(v4 + 32) = v6;
    *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
    *(void *)(a2 + 16) = v7;
    *(_WORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_WORD *)(a2 + 32);
    id result = *(id *)(a2 + 40);
    *(void *)(v4 + 56) = result;
    *(void *)(v4 + 64) = *(void *)(a2 + 48);
    *(void *)(v4 + 72) = *(void *)(a2 + 56);
    ++*(void *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

void std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::__clone()
{
  id result = operator new(0x10uLL);
  *id result = &unk_26E70ED48;
  return result;
}

void std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70ED48;
}

re *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::operator()(re *result, void **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v2 + 63));
    re::FixedArray<re::StringID>::deinit(v2 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::MeshPart *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::SelectionMeshVisitor::visitMeshPart(uint64_t *a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t result = re::MeshVisitor::findLevelIndex((re::MeshVisitor *)a1, *(unsigned int *)(a2 + 24));
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v6 = *(long long **)(a2 + 40);
    uint64_t v7 = a1[11];
    int v8 = (*(_DWORD *)(v5 + 544) ^ *(_DWORD *)(a1[10] + 216)) & ~*(_DWORD *)(a1[10] + 220) | *(_DWORD *)(a1[10] + 220) & *(_DWORD *)(a1[10] + 216);
    v56[0] = *(void *)a2;
    v56[1] = 0;
    v56[2] = v5;
    _OWORD v56[3] = 0;
    unint64_t v51 = (void *)a2;
    uint64_t v9 = *(void *)(a2 + 48);
    v56[4] = 0;
    v56[5] = v9;
    v56[7] = 0xFFFF010000000000;
    long long v10 = *v6;
    long long v11 = v6[1];
    long long v12 = v6[3];
    long long v59 = v6[2];
    long long v60 = v12;
    long long v57 = v10;
    long long v58 = v11;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int v63 = -1;
    *(_DWORD *)((char *)&v64[1] + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
    *(void *)uint64_t v64 = 0;
    __int16 v65 = 0;
    *(void *)&v64[3] = 0;
    *(void *)&v64[5] = 0;
    int v66 = v8;
    uint64_t v67 = 0x7FFFFFFF00000000;
    int v68 = 0;
    uint64_t v69 = 0xFFFFFFFFLL;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24), 224, 16);
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    __asm { FMOV            V1.2S, #1.0 }
    *(void *)(v13 + 152) = _D1;
    *(_DWORD *)(v13 + 160) = 1065353216;
    *(void *)(v13 + 40) = a1[10];
    v56[6] = v13;
    __int16 v54 = *(_WORD *)(a1[9] + 16);
    uint64_t v19 = *(void *)(a1[11] + 24);
    int v77 = 0;
    memset(v76, 0, sizeof(v76));
    uint64_t v78 = 0x7FFFFFFFLL;
    uint64_t v52 = (re::Allocator *)v19;
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v76, v19, 10);
    uint64_t v20 = 0;
    int8x16_t v90 = vextq_s8(*(int8x16_t *)(v13 + 48), *(int8x16_t *)(v13 + 48), 8uLL);
    uint64_t v55 = v13;
    uint64_t v21 = *(void *)(v13 + 40) + 224;
    uint64_t v91 = *(void *)(v13 + 72);
    uint64_t v92 = v21;
    while (1)
    {
      uint64_t v53 = v20;
      uint64_t v22 = (re::MaterialParameterTable *)v90.i64[v20];
      if (v22)
      {
        if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
          dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
        }
        unsigned __int16 v23 = re::MaterialParameterTable::passTechniqueHashTable(v22, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash, 1);
        int v24 = v23;
        uint64_t v25 = *((unsigned int *)v23 + 8);
        if (v25)
        {
          uint64_t v26 = 0;
          int32x4_t v27 = (int *)v23[2];
          while (1)
          {
            int v28 = *v27;
            v27 += 6;
            if (v28 < 0) {
              break;
            }
            if (v25 == ++v26)
            {
              LODWORD(v26) = *((_DWORD *)v23 + 8);
              break;
            }
          }
        }
        else
        {
          LODWORD(v26) = 0;
        }
        if (v25 != v26) {
          break;
        }
      }
LABEL_58:
      uint64_t v20 = v53 + 1;
      if (v53 == 3)
      {
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v76);
        return (uint64_t)re::DynamicArray<re::TransitionCondition *>::add((void *)a1[9], v51);
      }
    }
    uint64_t v29 = v26;
    uint64_t v30 = v23[2];
    while (1)
    {
      uint64_t v31 = v30 + 24 * v29;
      uint64_t v32 = (uint64_t *)(v31 + 8);
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v76, (uint64_t *)(v31 + 8)))
      {
        goto LABEL_50;
      }
      uint64_t v33 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1[8], (uint64_t *)(v31 + 8));
      if (!v33) {
        break;
      }
LABEL_26:
      uint64_t v41 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(void *)(v55 + 40) + 24, (uint64_t *)(v31 + 16));
      if (v41)
      {
        uint64_t v42 = v41;
        LOWORD(v80) = 263;
        *(_DWORD *)((char *)&v80 + 2) = 0x1000000;
        *(void *)((char *)&v80 + 6) = 0xFFFF0000FFFFLL;
        *(void *)&long long v82 = 0;
        long long v81 = 0uLL;
        *((void *)&v82 + 1) = 0xFFFFFFFF00000000;
        BOOL v83 = 0;
        *((void *)&v85 + 1) = 0;
        v86[0] = 0;
        *((void *)&v88 + 1) = 0;
        LODWORD(v8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(void *)&v86[4] = 0;
        *(void *)&v86[12] = 0;
        *(_DWORD *)&v86[19] = 0;
        long long v89 = 0xFF00000007FFFFFFLL;
        if (*(void *)(v41 + 8))
        {
          uint64_t v43 = a1[11];
          uint64_t v74 = 0;
          int v75 = 0;
          uint64_t v44 = re::addDrawCall(v33, (uint64_t)v56, v43, 0, (uint64_t)&v74);
          *(_WORD *)uint64_t v44 = *(_WORD *)v44 & 0xFFCF | 0x10;
          *(_WORD *)(v44 + 12) = v54;
          unint64_t v45 = *(void *)(v42 + 8);
          if (!v45)
          {
            uint64_t v79 = 0;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v101 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v93 = 136315906;
            uint64_t v94 = "operator[]";
            __int16 v95 = 1024;
            int v96 = 476;
            __int16 v97 = 2048;
            uint64_t v98 = 0;
            __int16 v99 = 2048;
            uint64_t v100 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(v44 + 44) = **(_DWORD **)(v42 + 16);
          long long v80 = *(_OWORD *)v44;
          long long v81 = *(_OWORD *)(v44 + 16);
          long long v82 = *(_OWORD *)(v44 + 32);
          if (v83 || *(unsigned char *)(v44 + 48))
          {
            if (!v83 || *(unsigned char *)(v44 + 48))
            {
              if (!v83) {
                BOOL v83 = *(unsigned char *)(v44 + 48) != 0;
              }
              int v84 = *(_DWORD *)(v44 + 52);
            }
            else
            {
              BOOL v83 = 0;
            }
          }
          long long v85 = *(_OWORD *)(v44 + 56);
          *(_OWORD *)float32x4_t v86 = *(_OWORD *)(v44 + 72);
          *(void *)&v86[14] = *(void *)(v44 + 86);
          if (v86[22] || *(unsigned char *)(v44 + 94))
          {
            if (!v86[22] || *(unsigned char *)(v44 + 94))
            {
              if (!v86[22]) {
                v86[22] = *(unsigned char *)(v44 + 94) != 0;
              }
              char v87 = *(unsigned char *)(v44 + 95);
            }
            else
            {
              v86[22] = 0;
            }
          }
          long long v88 = *(_OWORD *)(v44 + 96);
          long long v89 = *(_OWORD *)(v44 + 112);
          if (v45 >= 2)
          {
            unint64_t v48 = 1;
            do
            {
              HIDWORD(v82) = *(_DWORD *)(*(void *)(v42 + 16) + 4 * v48);
              re::BucketArray<re::DrawCall,128ul>::add(v33, &v80);
              ++v48;
            }
            while (v48 < *(void *)(v42 + 8));
          }
        }
      }
      else
      {
        uint64_t v46 = a1[11];
        uint64_t v72 = 0;
        int v73 = 0;
        uint64_t v47 = re::addDrawCall(v33, (uint64_t)v56, v46, 0, (uint64_t)&v72);
        *(_DWORD *)(v47 + 44) = -1;
        *(_WORD *)uint64_t v47 = *(_WORD *)v47 & 0xFFCF | 0x10;
        *(_WORD *)(v47 + 12) = v54;
        re::BucketArray<re::DrawCall,128ul>::add(v33, (long long *)v47);
      }
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v76, v32);
LABEL_50:
      uint64_t v30 = v24[2];
      if (*((_DWORD *)v24 + 8) <= (v26 + 1)) {
        int v49 = v26 + 1;
      }
      else {
        int v49 = *((_DWORD *)v24 + 8);
      }
      while (1)
      {
        uint64_t v29 = (v26 + 1);
        if (v49 - 1 == v26) {
          break;
        }
        LODWORD(v26) = v26 + 1;
        int v50 = v29;
        if ((*(_DWORD *)(v30 + 24 * v29) & 0x80000000) != 0) {
          goto LABEL_57;
        }
      }
      int v50 = v49;
LABEL_57:
      LODWORD(v26) = v50;
      if (v25 == v50) {
        goto LABEL_58;
      }
    }
    uint64_t v34 = a1[8];
    re::DrawTable::DrawTable((re::DrawTable *)&v80, v52, 1uLL);
    unint64_t v35 = *v32;
    if (*(void *)v34)
    {
      unint64_t v36 = v35 % *(unsigned int *)(v34 + 24);
      uint64_t v37 = *(unsigned int *)(*(void *)(v34 + 8) + 4 * v36);
      if (v37 != 0x7FFFFFFF)
      {
        uint64_t v38 = *(void *)(v34 + 16);
        while (*(void *)(v38 + 344 * v37 + 8) != v35)
        {
          LODWORD(v3re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(v38 + 344 * v37) & 0x7FFFFFFF;
          if (v37 == 0x7FFFFFFF) {
            goto LABEL_23;
          }
        }
        uint64_t v40 = v38 + 344 * v37;
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
LABEL_23:
    unsigned int v39 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(v34, v36, v35, (void *)(v31 + 8), (uint64_t)&v80);
    ++*(_DWORD *)(v34 + 40);
    uint64_t v40 = *(void *)(v34 + 16) + 344 * v39;
LABEL_25:
    uint64_t v33 = v40 + 16;
    re::DrawTable::~DrawTable((void (***)(void))&v80);
    goto LABEL_26;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 344 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(_DWORD *)(v5 + 344 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 344 * v3 + 8) == v2) {
        return v5 + 344 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 344 * v3 + 16;
}

__n128 re::BucketArray<re::DrawCall,128ul>::add(uint64_t a1, long long *a2)
{
  uint64_t v3 = re::BucketArray<re::DrawCall,128ul>::addUninitialized(a1);
  long long v4 = a2[2];
  long long v5 = *a2;
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)uint64_t v3 = v5;
  int v6 = *((unsigned __int8 *)a2 + 48);
  *(unsigned char *)(v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v6;
  if (v6) {
    *(_DWORD *)(v3 + 52) = *((_DWORD *)a2 + 13);
  }
  long long v7 = *(long long *)((char *)a2 + 56);
  long long v8 = *(long long *)((char *)a2 + 72);
  *(void *)(v3 + 86) = *(void *)((char *)a2 + 86);
  *(_OWORD *)(v3 + 72) = v8;
  *(_OWORD *)(v3 + 56) = v7;
  int v9 = *((unsigned __int8 *)a2 + 94);
  *(unsigned char *)(v3 + 94) = v9;
  if (v9) {
    *(unsigned char *)(v3 + 95) = *((unsigned char *)a2 + 95);
  }
  __n128 result = (__n128)a2[6];
  long long v11 = a2[7];
  *(__n128 *)(v3 + 96) = result;
  *(_OWORD *)(v3 + 112) = v11;
  return result;
}

re::DrawTable *re::DrawTable::DrawTable(re::DrawTable *this, re::Allocator *a2, unint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  re::BucketArray<re::DrawCall,128ul>::init((uint64_t)this, (uint64_t)a2, a3);
  *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  re::BucketArray<re::Matrix4x4<float>,128ul>::init((uint64_t)this + 56, (uint64_t)a2, a3);
  *((void *)this + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 1;
  *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((void *)this + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *((_DWORD *)this + 40) = 0;
  re::BucketArray<re::ConstantTable const*,128ul>::init((uint64_t)this + 112, (uint64_t)a2, a3);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((void *)this + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  re::BucketArray<float,128ul>::init((uint64_t)this + 168, (uint64_t)a2, a3);
  *((void *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((_DWORD *)this + 60) = 1;
  *((void *)this + 32) = 0;
  *((void *)this + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::BucketArray<unsigned int,128ul>::init((uint64_t)this + 224, (uint64_t)a2, a3);
  *((unsigned char *)this + 320) = 1;
  return this;
}

uint64_t re::BucketArray<re::DrawCall,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 0x4000, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::Matrix4x4<float>,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 0x2000, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1024, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<float,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<float,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<float,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<unsigned int,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::DrawTable::~DrawTable(void (***this)(void))
{
  if (!*((unsigned char *)this + 320))
  {
    (*this[35])();
    *((unsigned char *)this + 320) = 1;
  }
  re::BucketArray<unsigned int,128ul>::deinit((uint64_t)(this + 28));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(this + 28));
  re::BucketArray<unsigned int,128ul>::deinit((uint64_t)(this + 21));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(this + 21));
  re::BucketArray<re::ConstantTable const*,128ul>::deinit((uint64_t)(this + 14));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(this + 14));
  re::BucketArray<re::Matrix4x4<float>,128ul>::deinit((uint64_t)(this + 7));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(this + 7));
  re::BucketArray<re::DrawCall,128ul>::deinit((uint64_t)this);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this);
}

uint64_t re::BucketArray<unsigned int,128ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<unsigned int,128ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<unsigned int,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + 4 * (a2 & 0x7F);
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::ConstantTable const*,128ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + 8 * (a2 & 0x7F);
}

uint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + ((a2 & 0x7F) << 6);
}

uint64_t re::BucketArray<re::DrawCall,128ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::DrawCall,128ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unint64_t re::BucketArray<re::DrawCall,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + ((a2 & 0x7F) << 7);
}

uint64_t re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v42, 0, 36);
          *(void *)&v42[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v42, v14, v13);
          long long v16 = *(_OWORD *)v42;
          *(_OWORD *)uint64_t v42 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v42[16];
          *(void *)&v42[16] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v17;
          long long v19 = *(_OWORD *)&v42[24];
          *(_OWORD *)&v42[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v42[32];
          *(_OWORD *)(a1 + 24) = v19;
          unsigned int v20 = v18;
          if (v18)
          {
            uint64_t v21 = 0;
            unint64_t v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(void *)&v42[16] + v21) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v42[16] + v21 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v42[16] + v21 + 8), *(void *)&v42[16] + v21 + 8, *(void *)&v42[16] + v21 + 16);
                unsigned int v20 = *(_DWORD *)&v42[32];
              }
              ++v22;
              v21 += 344;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v42);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 344 * v9);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 344 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 344 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26) = *(_DWORD *)(*(void *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v27 + v26;
  *(void *)(v28 + 16) = 0;
  *(void *)(v28 + 24) = 0;
  uint64_t v29 = v27 + v26 + 16;
  *(_DWORD *)(v29 + 16) = 1;
  *(void *)(v29 + 32) = 0;
  *(void *)(v29 + 40) = 0;
  *(void *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)uint64_t v42 = 0uLL;
  *(_DWORD *)&v42[16] = 1;
  *(void *)&v42[24] = 0;
  *(void *)&v42[32] = 0;
  int v30 = *(_DWORD *)(v27 + v26 + 32);
  if (v30)
  {
    if (*(void *)(v27 + v26 + 24))
    {
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v42, v27 + v26 + 16);
    }
    else
    {
      *(void *)uint64_t v42 = *(void *)v29;
      *(_DWORD *)(v27 + v26 + 32) = v30 + 2;
      *(_DWORD *)&v42[16] = 3;
    }
  }
  else
  {
    *(_DWORD *)&v42[16] = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v42, (uint64_t *)(v27 + v26 + 16));
  }
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v29, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v42);
  if (*(void *)v42 && (v42[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v42 + 40))();
  }
  uint64_t v31 = *(void *)(v29 + 40);
  *(void *)(v29 + 40) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = v31;
  ++*(_DWORD *)(v29 + 48);
  ++*(_DWORD *)(a5 + 48);
  uint64_t v32 = v27 + 344 * v9;
  *(void *)(v32 + 72) = 0;
  *(void *)(v32 + 80) = 0;
  v32 += 72;
  *(_DWORD *)(v32 + 16) = 1;
  *(void *)(v32 + 32) = 0;
  *(void *)(v32 + 40) = 0;
  *(void *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v42, v32);
  re::DynamicOverflowArray<re::FixedArray<int> *,2ul>::operator=(v32, a5 + 56);
  re::DynamicOverflowArray<re::FixedArray<int> *,2ul>::operator=(a5 + 56, (uint64_t)v42);
  if (*(void *)v42 && (v42[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v42 + 40))();
  }
  uint64_t v33 = v27 + 344 * v9;
  uint64_t v34 = *(void *)(v33 + 112);
  *(void *)(v33 + 112) = *(void *)(a5 + 96);
  *(void *)(a5 + 96) = v34;
  ++*(_DWORD *)(v33 + 120);
  ++*(_DWORD *)(a5 + 104);
  *(void *)(v33 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v33 + 136) = 0;
  v33 += 128;
  *(void *)(v33 + 32) = 0;
  *(void *)(v33 + 40) = 0;
  *(void *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)&v42[24] = 0;
  *(void *)&v42[32] = 0;
  *(_OWORD *)uint64_t v42 = 0uLL;
  *(_DWORD *)(v33 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v33, a5 + 112);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 112, (uint64_t)v42);
  if (*(void *)v42 && (v42[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v42 + 40))();
  }
  uint64_t v35 = v27 + 344 * v9;
  uint64_t v36 = *(void *)(v35 + 168);
  *(void *)(v35 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a5 + 152);
  *(void *)(a5 + 152) = v36;
  ++*(_DWORD *)(v35 + 176);
  ++*(_DWORD *)(a5 + 160);
  *(void *)(v35 + 184) = 0;
  *(void *)(v35 + 192) = 0;
  v35 += 184;
  *(void *)(v35 + 32) = 0;
  *(void *)(v35 + 40) = 0;
  *(void *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)&v42[24] = 0;
  *(void *)&v42[32] = 0;
  *(_OWORD *)uint64_t v42 = 0uLL;
  *(_DWORD *)(v35 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v35, a5 + 168);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 168, (uint64_t)v42);
  if (*(void *)v42 && (v42[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v42 + 40))();
  }
  uint64_t v37 = v27 + 344 * v9;
  uint64_t v38 = *(void *)(v37 + 224);
  *(void *)(v37 + 224) = *(void *)(a5 + 208);
  *(void *)(a5 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v38;
  ++*(_DWORD *)(v37 + 232);
  ++*(_DWORD *)(a5 + 216);
  *(void *)(v37 + 240) = 0;
  *(void *)(v37 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  v37 += 240;
  *(void *)(v37 + 32) = 0;
  *(void *)(v37 + 40) = 0;
  *(void *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)&v42[24] = 0;
  *(void *)&v42[32] = 0;
  *(_OWORD *)uint64_t v42 = 0uLL;
  *(_DWORD *)(v37 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v37, a5 + 224);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 224, (uint64_t)v42);
  if (*(void *)v42 && (v42[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v42 + 40))();
  }
  uint64_t v39 = v27 + 344 * v9;
  uint64_t v40 = *(void *)(v39 + 280);
  *(void *)(v39 + 280) = *(void *)(a5 + 264);
  *(void *)(a5 + 264) = v40;
  ++*(_DWORD *)(v39 + 288);
  ++*(_DWORD *)(a5 + 272);
  *(unsigned char *)(v39 + 336) = 1;
  re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((unsigned char *)(v39 + 296), (unsigned char *)(a5 + 280));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

unsigned char *re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    if (!a1[40])
    {
      (**(void (***)(unsigned char *))a1)(a1);
      a1[40] = 1;
    }
    if (!a2[40])
    {
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 32))(a2, a1);
      if (!a2[40])
      {
        (**(void (***)(unsigned char *))a2)(a2);
        a2[40] = 1;
      }
      a1[40] = 0;
    }
  }
  return a1;
}

{
  if (a1 != a2)
  {
    if (!a1[40])
    {
      (**(void (***)(unsigned char *))a1)(a1);
      a1[40] = 1;
    }
    if (!a2[40])
    {
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 24))(a2, a1);
      a1[40] = 0;
    }
  }
  return a1;
}

void re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 344 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::DrawTable::~DrawTable((void (***)(void))(v6 + v4 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 344;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::BucketArray<re::DrawCall,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 0x7F) << 7);
}

unsigned __int8 *re::DeformationPassBuilder::addDeformationStack(unsigned __int8 *result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = __clz(__rbit64(a3));
    uint64_t v94 = (uint64_t)(result + 976);
    int v7 = result + 56;
    int8x16_t v90 = result + 80;
    unint64_t v91 = a4 + 688;
    uint64_t v92 = result + 24;
    unint64_t v8 = (unint64_t)v100;
    uint64_t v99 = (uint64_t)(result + 56);
    while (1)
    {
      unint64_t v9 = v4 + 4 * v6;
      unsigned int v11 = *(_DWORD *)(v9 + 4);
      uint64_t v10 = (unsigned char *)(v9 + 4);
      unsigned int v12 = re::Bitset<64>::toWordIndex(v94, v11);
      *(void *)(v94 + 8 * v12) |= 1 << v11;
      *(void *)&long long v109 = a3;
      uint64_t v14 = *(void *)(v5 + 96);
      if (*v10 == 8)
      {
        if (!v14
          || (BOOL v15 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v14 - 1),
              unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v15),
              !*(void *)(v16 + 40)))
        {
          LODWORD(v22) = v14;
          goto LABEL_57;
        }
        int v17 = v14 - (*(unsigned char *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v16, 0) == 8);
      }
      else
      {
        if ((_BYTE)v6)
        {
          int v17 = 0;
          unsigned int v18 = (unsigned __int8 *)(v91 + 10 * v6);
          unint64_t v19 = v6;
          do
          {
            unsigned int v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 == 255) {
              break;
            }
            re::Bitset<64>::toWordIndex((uint64_t)&v109, v20);
            if (((unint64_t)v109 >> v20))
            {
              if (v17 <= (v100[v20] + 1)) {
                int v17 = (v100[v20] + 1);
              }
              else {
                int v17 = v17;
              }
            }
            --v19;
          }
          while (v19);
        }
        else
        {
          int v17 = 0;
        }
        unint64_t v23 = v4 + (v6 << 6);
        uint64_t v24 = *(void *)(v23 + 96);
        if (v24)
        {
          signed int v25 = *(unsigned __int8 **)(v23 + 104);
          uint64_t v26 = &v25[16 * v24];
          do
          {
            uint64_t v27 = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v5 + 48 * *v25 + 112, *((void *)v25 + 1));
            if (v27)
            {
              unint64_t v13 = *v27;
              if (v13 == 255) {
                char v28 = -1;
              }
              else {
                char v28 = *(unsigned char *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, v13) + 56);
              }
              unsigned __int8 v29 = v28 + 1;
              if (v17 <= v29) {
                int v17 = v29;
              }
              else {
                int v17 = v17;
              }
            }
            v25 += 16;
          }
          while (v25 != v26);
        }
        unint64_t v30 = v4 + 24 * v6;
        uint64_t v31 = *(void *)(v30 + 800);
        if (v31)
        {
          uint64_t v32 = *(unsigned __int8 **)(v30 + 808);
          uint64_t v33 = &v32[16 * v31];
          do
          {
            uint64_t v34 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v5 + 48 * *v32 + 112, *((void *)v32 + 1));
            if (v34)
            {
              unint64_t v13 = *(unsigned __int8 *)(v34 + 1);
              unsigned int v35 = v13 == 255
                  ? 255
                  : *(unsigned __int8 *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, v13) + 56);
              if (v14 >= v35) {
                LOBYTE(vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v35;
              }
            }
            v32 += 16;
          }
          while (v32 != v33);
        }
        uint64_t v36 = *(void *)(v5 + 96);
        if (v36 == v14)
        {
          if (v36)
          {
            uint64_t v37 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v14 - 1);
            unint64_t v38 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v37);
            if (*(void *)(v38 + 40)) {
              LOBYTE(vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v14
            }
                          - (*(unsigned char *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v38, 0) == 8);
          }
        }
      }
      if (v14 <= v17)
      {
        LODWORD(v22) = v17;
        int v7 = (void *)v99;
LABEL_57:
        if (v22 == v14)
        {
          unint64_t v50 = *(void *)(v5 + 40);
          unint64_t v51 = *(void *)(v5 + 8);
          if (v50 + 1 > 8 * v51)
          {
            re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity((void *)v5, (v50 + 8) >> 3);
            unint64_t v51 = *(void *)(v5 + 8);
          }
          unint64_t v52 = v50 >> 3;
          if (v51 <= v50 >> 3) {
            goto LABEL_110;
          }
          uint64_t v53 = v92;
          if ((*(unsigned char *)(v5 + 16) & 1) == 0) {
            uint64_t v53 = *(unsigned __int8 **)(v5 + 32);
          }
          uint64_t v54 = *(void *)&v53[8 * v52];
          ++*(void *)(v5 + 40);
          ++*(_DWORD *)(v5 + 48);
          uint64_t v55 = v54 + ((v50 & 7) << 6);
          *(_OWORD *)(v55 + 16) = 0u;
          *(_OWORD *)(v55 + 32) = 0u;
          *(void *)(v55 + 40) = 0;
          *(void *)(v55 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          *(_OWORD *)uint64_t v55 = 0u;
          *(_DWORD *)(v55 + 16) = 1;
          *(void *)(v55 + 24) = 0;
          *(void *)(v55 + 32) = 0;
          *(_DWORD *)(v55 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          *(unsigned char *)(v55 + 56) = -1;
          unint64_t v8 = v22;
          unint64_t v56 = *(void *)(v5 + 96);
          if (v56 < v22) {
            goto LABEL_111;
          }
          char v57 = *(unsigned char *)(v5 + 40);
          unint64_t v4 = *(void *)(v5 + 64);
          if (v56 + 1 > 8 * v4)
          {
            re::BucketArray<unsigned char,8ul>::setBucketsCapacity(v7, (v56 + 8) >> 3);
            unint64_t v4 = *(void *)(v5 + 64);
          }
          unint64_t v51 = (unint64_t)v22 >> 3;
          if (v4 <= v51) {
            goto LABEL_112;
          }
          unint64_t v58 = *(void *)(v5 + 96);
          unint64_t v52 = v58 >> 3;
          if (*(unsigned char *)(v5 + 72))
          {
            long long v59 = v90;
            if (v4 <= v52) {
              goto LABEL_113;
            }
          }
          else
          {
            if (v4 <= v52) {
              goto LABEL_113;
            }
            long long v59 = *(unsigned __int8 **)(v5 + 88);
          }
          long long v60 = (unsigned char *)(*(void *)&v59[8 * v51] + (v22 & 7));
          uint64_t v61 = (unsigned char *)(*(void *)&v59[8 * v52] + (*(void *)(v5 + 96) & 7));
          if (v60 != v61)
          {
            *uint64_t v61 = *(unsigned char *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v58 - 1);
            for (unint64_t i = *(void *)(v5 + 96) - 1; v22 != i; --i)
            {
              char v63 = *(unsigned char *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, i - 1);
              *(unsigned char *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, i) = v63;
            }
          }
          *long long v60 = v57 - 1;
          ++*(void *)(v5 + 96);
          ++*(_DWORD *)(v5 + 104);
          if (*(void *)(v5 + 40) <= (unint64_t)v22)
          {
            int v7 = (void *)v99;
          }
          else
          {
            unint64_t v64 = v22;
            int v65 = v22;
            int v7 = (void *)v99;
            do
            {
              int v66 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v64);
              *(unsigned char *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v66) + 56) = v65++;
              unint64_t v64 = v65;
            }
            while (*(void *)(v5 + 40) > (unint64_t)v65);
          }
        }
        else
        {
          unint64_t v8 = v22;
        }
        uint64_t v67 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v8);
        int v68 = (void *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v67);
        unint64_t v4 = (unint64_t)v68;
        unint64_t v69 = v68[5];
        unint64_t v51 = v68[1];
        if (v69 + 1 > v51 << 6)
        {
          re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(v68, (v69 + 64) >> 6);
          unint64_t v51 = *(void *)(v4 + 8);
        }
        unint64_t v52 = v69 >> 6;
        if (v51 <= v69 >> 6)
        {
          long long v113 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v101 = 136315906;
          long long v102 = "operator[]";
          __int16 v103 = 1024;
          int v104 = 858;
          __int16 v105 = 2048;
          unint64_t v106 = v69 >> 6;
          __int16 v107 = 2048;
          unint64_t v108 = v51;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          long long v113 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v101 = 136315906;
          long long v102 = "operator[]";
          __int16 v103 = 1024;
          int v104 = 858;
          __int16 v105 = 2048;
          unint64_t v106 = v52;
          __int16 v107 = 2048;
          unint64_t v108 = v51;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index <= m_size", "insert", 809, v8, v56);
          _os_crash();
          __break(1u);
LABEL_112:
          long long v113 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v101 = 136315906;
          long long v102 = "operator[]";
          __int16 v103 = 1024;
          int v104 = 858;
          __int16 v105 = 2048;
          unint64_t v106 = v51;
          __int16 v107 = 2048;
          unint64_t v108 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          long long v113 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v101 = 136315906;
          long long v102 = "operator[]";
          __int16 v103 = 1024;
          int v104 = 858;
          __int16 v105 = 2048;
          unint64_t v106 = v52;
          __int16 v107 = 2048;
          unint64_t v108 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unint64_t v70 = *(void *)(v4 + 32);
        if (*(_DWORD *)(v4 + 16)) {
          unint64_t v70 = v4 + 24;
        }
        uint64_t v71 = *(void *)(v70 + 8 * v52);
        ++*(void *)(v4 + 40);
        ++*(_DWORD *)(v4 + 48);
        uint64_t v72 = v71 + ((v69 & 0x3F) << 6);
        *(_OWORD *)(v72 + 24) = 0u;
        *(_OWORD *)(v72 + 40) = 0u;
        *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        *(void *)(v72 + 56) = 0;
        *(_OWORD *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *(_DWORD *)(v72 + 24) = 1;
        *(void *)(v72 + 32) = 0;
        *(void *)(v72 + 40) = 0;
        *(_DWORD *)(v72 + 56) = 0;
        unint64_t v73 = a4;
        char v74 = *(unsigned char *)(a4 + (v6 << 6) + 72);
        *(unsigned char *)uint64_t v72 = *(_DWORD *)v10;
        *(unsigned char *)(v72 + 1) = v74;
        uint64_t v75 = re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized(v72 + 8);
        *(void *)uint64_t v75 = a4;
        *(void *)(v75 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
        *(unsigned char *)(v75 + 16) = v6;
        unint64_t v76 = v6;
      }
      else
      {
        unsigned __int8 v39 = v14;
        unint64_t v40 = v4;
        unint64_t v98 = v6;
        uint64_t v41 = (unsigned __int8 *)(v4 + (v6 << 6) + 72);
        unint64_t v22 = v17;
        unsigned __int8 v93 = v39;
        uint64_t v42 = v39;
        while (1)
        {
          uint64_t v43 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v22);
          unint64_t v44 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v43);
          uint64_t v45 = *(void *)(v44 + 40);
          if (v45)
          {
            unint64_t v8 = v44;
            unint64_t v4 = 0;
            while (1)
            {
              uint64_t v46 = (unsigned __int8 *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v8, v4);
              int v47 = *v41;
              if (*v46 == *(_DWORD *)v10 && v46[1] == v47) {
                break;
              }
              if (v45 == ++v4) {
                goto LABEL_54;
              }
            }
            if (!*((void *)v46 + 6))
            {
              *uint64_t v46 = *(_DWORD *)v10;
              v46[1] = v47;
            }
            uint64_t v49 = re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized((uint64_t)(v46 + 8));
            *(void *)uint64_t v49 = v40;
            *(void *)(v49 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
            *(unsigned char *)(v49 + 16) = v98;
            if ((_BYTE)v22 != 0xFF) {
              break;
            }
          }
LABEL_54:
          if (++v22 == v42)
          {
            LODWORD(v22) = v17;
            unint64_t v6 = v98;
            int v7 = (void *)v99;
            LOBYTE(vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v93;
            goto LABEL_57;
          }
        }
        unint64_t v8 = v22;
        unint64_t v73 = v40;
        unint64_t v76 = v98;
        int v7 = (void *)v99;
      }
      double result = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v8);
      unsigned int v77 = *result;
      uint64_t v78 = (uint64_t *)(v73 + (v76 << 6));
      unint64_t v79 = v78[10];
      if (v79 != -1)
      {
        uint64_t v80 = v5 + 48 * *(unsigned int *)v10 + 112;
        double result = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v80, v79);
        if (result)
        {
          unsigned int v81 = *result;
          if (v81 <= v77) {
            unsigned __int8 v82 = v77;
          }
          else {
            unsigned __int8 v82 = *result;
          }
          if (v81 == 255) {
            unsigned __int8 v83 = v77;
          }
          else {
            unsigned __int8 v83 = v82;
          }
          *double result = v83;
        }
        else
        {
          LOBYTE(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v77;
          BYTE1(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = -1;
          double result = (unsigned __int8 *)re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v80, v78 + 10, &v109);
        }
      }
      uint64_t v84 = v78[12];
      if (v84)
      {
        uint64_t v85 = v78[13];
        uint64_t v86 = 16 * v84;
        char v87 = (unint64_t *)(v85 + 8);
        do
        {
          uint64_t v88 = v5 + 48 * *((unsigned __int8 *)v87 - 8) + 112;
          double result = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v88, *v87);
          if (result)
          {
            unsigned int v89 = result[1];
            if (v89 >= v77) {
              LOBYTE(v8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v77;
            }
            result[1] = v89;
          }
          else
          {
            LOBYTE(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = -1;
            BYTE1(v10re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v77;
            double result = (unsigned __int8 *)re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v88, (uint64_t *)v87, &v109);
          }
          v87 += 2;
          v86 -= 16;
        }
        while (v86);
      }
      unint64_t v8 = (unint64_t)v100;
      v100[v76] = v22;
      unint64_t v4 = a4;
      if (v76 == 63 || ((-2 << v76) & a3) == 0) {
        return result;
      }
      unint64_t v6 = __clz(__rbit64((-2 << v76) & a3));
    }
  }
  return result;
}

unint64_t re::BucketArray<unsigned char,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + (a2 & 7);
}

uint64_t re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  }
  double result = re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 6)
  {
    re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity((void *)a1, (v2 + 64) >> 6);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 6));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 24 * (v2 & 0x3F);
}

void *re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1536, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    double result = (void *)re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

unint64_t re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 6) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 6)) + ((a2 & 0x3F) << 6);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 6) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 6)) + ((a2 & 0x3F) << 6);
}

void *re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 4096, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    double result = (void *)re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void *re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    double result = (void *)re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void *re::BucketArray<unsigned char,8ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 8, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    double result = (void *)re::BucketArray<unsigned char,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _WORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v27[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_WORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::dispatchMaterialPipelineDataCompilation(unint64_t *a1)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = re::internal::enableSignposts(0, 0);
  if (v4) {
    uint64_t v4 = kdebug_trace();
  }
  uint64_t v5 = *(uint64_t **)v2;
  uint64_t v6 = **(void **)v2;
  re::make::shared::object<re::FunctionReflectionCache>((re *)v4, &v56);
  if (*((unsigned char *)v5 + 40)) {
    uint64_t v7 = (uint64_t)(v5 + 6);
  }
  else {
    uint64_t v7 = *v5 + 8;
  }
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(v54, v7);
  long long v55 = *(_OWORD *)(v7 + 24);
  int v52 = 0;
  memset(v51, 0, sizeof(v51));
  uint64_t v53 = 0x7FFFFFFFLL;
  uint64_t v50 = 0;
  int v49 = 0;
  memset(v48, 0, sizeof(v48));
  unint64_t v34 = v2;
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v8 = *(unsigned int *)(v6 + 2776);
    if (v8)
    {
      uint64_t v9 = 0;
      int v10 = (int *)(*(void *)(v6 + 2760) + 8);
      while (1)
      {
        int v11 = *v10;
        v10 += 28;
        if (v11 < 0) {
          break;
        }
        if (v8 == ++v9)
        {
          LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v6 + 2776);
          break;
        }
      }
    }
    else
    {
      LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    }
    if (v8 != v9)
    {
      uint64_t v12 = v9;
      do
      {
        uint64_t v13 = *(void *)(v6 + 2760) + 112 * v12;
        re::DynamicString::DynamicString((re::DynamicString *)&v36, (const re::DynamicString *)(v13 + 48));
        LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v13 + 80);
        re::FixedArray<unsigned char>::FixedArray(&v39, (uint64_t *)(v13 + 88));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v51, (uint64_t)&v36))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v51, (re::DynamicString *)&v36);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v48, (re::DynamicString *)&v36);
        }
        if ((void)v39)
        {
          if (*((void *)&v39 + 1))
          {
            (*(void (**)(void))(*(void *)v39 + 40))();
            *((void *)&v39 + 1) = 0;
            uint64_t v40 = 0;
          }
          *(void *)&long long v39 = 0;
        }
        if (void)v36 && (BYTE8(v36)) {
          (*(void (**)(void))(*(void *)v36 + 40))();
        }
        if (*(_DWORD *)(v6 + 2776) <= (v9 + 1)) {
          int v14 = v9 + 1;
        }
        else {
          int v14 = *(_DWORD *)(v6 + 2776);
        }
        while (1)
        {
          uint64_t v12 = (v9 + 1);
          if (v14 - 1 == v9) {
            break;
          }
          LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v9 + 1;
          int v15 = v12;
          if ((*(_DWORD *)(*(void *)(v6 + 2760) + 112 * v12 + 8) & 0x80000000) != 0) {
            goto LABEL_31;
          }
        }
        int v15 = v14;
LABEL_31:
        LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v15;
      }
      while (v8 != v15);
    }
    uint64_t v16 = v5[3];
    if (v16)
    {
      uint64_t v17 = v5[4];
      uint64_t v18 = v17 + (v16 << 6);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v36, (const re::DynamicString *)v17);
        LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v17 + 32);
        re::FixedArray<unsigned char>::FixedArray(&v39, (uint64_t *)(v17 + 40));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v51, (uint64_t)&v36))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v51, (re::DynamicString *)&v36);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v48, (re::DynamicString *)&v36);
        }
        if ((void)v39)
        {
          if (*((void *)&v39 + 1))
          {
            (*(void (**)(void))(*(void *)v39 + 40))();
            *((void *)&v39 + 1) = 0;
            uint64_t v40 = 0;
          }
          *(void *)&long long v39 = 0;
        }
        if (void)v36 && (BYTE8(v36)) {
          (*(void (**)(void))(*(void *)v36 + 40))();
        }
        v17 += 64;
      }
      while (v17 != v18);
    }
  }
  if (*(unsigned char *)(v34 + 16)) {
    re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v47, v48);
  }
  else {
    re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v54, v1, v5[4], v5[3], (uint64_t)v47);
  }
  WeakRetained = (char *)objc_loadWeakRetained((id *)(v6 + 2736));
  unint64_t v20 = WeakRetained - 8;
  if (!WeakRetained) {
    unint64_t v20 = 0;
  }
  uint64_t v33 = v20;
  uint64_t v21 = v5[1];
  if (v21) {
    id v22 = (id)(v21 + 8);
  }
  *(void *)&long long v36 = v47[4];
  *((void *)&v36 + 1) = v47[2];
  re::MaterialBuilder::addFunctionsToReflectionCache(v6, (uint64_t *)&v36, v56);
  uint64_t v23 = dispatch_group_create();

  *(void *)(v56 + 16) = mach_absolute_time();
  dispatch_group_enter(v23);
  int v24 = *(void **)(v21 + 1360);
  uint64_t v25 = v56;
  uint64_t v26 = v23;
  uint64_t v46 = v26;
  re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v25, v3, (id *)&v46, *(unsigned char *)(v34 + 16), (uint64_t)v24);

  uint64_t v35 = *(void *)(v3 + 56);
  int v27 = *(unsigned __int8 *)(v34 + 16);
  char v28 = v26;
  uint64_t v45 = v28;
  *(void *)&long long v36 = v34;
  *((void *)&v36 + 1) = v56;
  if (v56) {
    id v29 = (id)(v56 + 8);
  }
  *(void *)&long long v37 = v35;
  *((void *)&v37 + 1) = v6;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v38, v47);
  *(void *)&long long v42 = v24;
  *((void *)&v42 + 1) = v21 + 168;
  uint64_t v43 = v3;
  *(void *)&long long v44 = v33;
  if (WeakRetained) {
    unint64_t v30 = WeakRetained;
  }
  *((void *)&v44 + 1) = v21;
  uint64_t v58 = re::globalAllocators((re *)(id)(v21 + 8))[2];
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v58 + 32))(v58, 120, 0);
  *(void *)uint64_t v31 = &unk_26E70EE20;
  *(_OWORD *)(v31 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v36;
  *(_OWORD *)(v31 + 24) = v37;
  *(_DWORD *)(v31 + 64) = 0;
  *(void *)(v31 + 40) = v38;
  *((void *)&v36 + 1) = 0;
  uint64_t v38 = 0;
  *(void *)(v31 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v39;
  *(void *)(v31 + 56) = 0;
  *(void *)(v31 + 56) = *((void *)&v39 + 1);
  long long v39 = 0u;
  *(void *)(v31 + 72) = v41;
  uint64_t v41 = 0;
  LODWORD(v40) = v40 + 1;
  *(_DWORD *)(v31 + 64) = 1;
  long long v32 = v42;
  *(void *)(v31 + 96) = v43;
  *(_OWORD *)(v31 + 80) = v32;
  *(_OWORD *)(v31 + 104) = v44;
  long long v44 = 0u;
  uint64_t v59 = v31;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v35, v27 != 0, v24, (id *)&v45, (uint64_t)v57);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v57);
  if (*((void *)&v44 + 1))
  {

    *((void *)&v44 + 1) = 0;
  }
  if ((void)v44)
  {

    *(void *)&long long v44 = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v38);
  if (*((void *)&v36 + 1)) {

  }
  dispatch_group_leave(v28);
  if (WeakRetained) {

  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v47);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v48);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v51);
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v54);
  if (v56) {
}
  }

void *re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EE20;
  uint64_t v2 = a1[14];
  if (v2)
  {

    a1[14] = 0;
  }
  uint64_t v3 = a1[13];
  if (v3)
  {

    a1[13] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 5));
  uint64_t v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EE20;
  uint64_t v2 = a1[14];
  if (v2)
  {

    a1[14] = 0;
  }
  uint64_t v3 = a1[13];
  if (v3)
  {

    a1[13] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 5));
  uint64_t v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = dispatch_group_create();

  dispatch_group_enter(v2);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = v2;
  dispatch_group_t v24 = v5;
  re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v3, v4, &v24, *(unsigned __int8 *)(*(void *)(a1 + 8) + 16), *(void **)(a1 + 80));

  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
  uint64_t v8 = *(void **)(a1 + 80);
  uint64_t v9 = v5;
  uint64_t v23 = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)uint64_t v16 = *(void *)(a1 + 8);
  *(void *)&v16[8] = v10;
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  uint64_t v12 = (re *)re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v16[16], (uint64_t *)(a1 + 40));
  uint64_t v13 = *(void *)(a1 + 104);
  *(void *)&long long v20 = *(void *)(a1 + 32);
  *((void *)&v20 + 1) = v13;
  if (v13) {
    uint64_t v12 = (re *)(id)(v13 + 8);
  }
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v22 = v14;
  if (v14) {
    uint64_t v12 = (re *)(id)(v14 + 8);
  }
  uint64_t v26 = re::globalAllocators(v12)[2];
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v26 + 32))(v26, 104, 0);
  *(void *)uint64_t v15 = &unk_26E70EE78;
  *(_OWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)v16;
  *(_DWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(v15 + 24) = *(void *)&v16[16];
  *(_OWORD *)&v16[8] = 0u;
  *(_OWORD *)(v15 + 32) = v17;
  long long v17 = 0u;
  *(void *)(v15 + 56) = v19;
  uint64_t v19 = 0;
  ++v18;
  *(_DWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 1;
  *(_OWORD *)(v15 + 64) = v20;
  *(_OWORD *)(v15 + 80) = v21;
  *(void *)(v15 + 96) = v22;
  *((void *)&v20 + 1) = 0;
  uint64_t v22 = 0;
  uint64_t v27 = v15;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v6, v7 != 0, v8, (id *)&v23, (uint64_t)v25);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v25);
  if (v22)
  {

    uint64_t v22 = 0;
  }
  if (*((void *)&v20 + 1))
  {

    *((void *)&v20 + 1) = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v16[16]);
  if (*(void *)&v16[8]) {

  }
  dispatch_group_leave(v9);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_26E70EE20;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (v4) {
    id v6 = (id)(v4 + 8);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(a2 + 40, (uint64_t *)(a1 + 40));
  long long v7 = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v7;
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(a2 + 104) = v8;
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  uint64_t v10 = *(void *)(a1 + 112);
  *(void *)(a2 + 112) = v10;
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EE20;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v3;
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  ++*(_DWORD *)(a1 + 64);
  ++*(_DWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::size()
{
  return 120;
}

void *re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EE78;
  uint64_t v2 = a1[12];
  if (v2)
  {

    a1[12] = 0;
  }
  uint64_t v3 = a1[9];
  if (v3)
  {

    a1[9] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 3));
  uint64_t v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~Callable(void *a1)
{
  *a1 = &unk_26E70EE78;
  uint64_t v2 = a1[12];
  if (v2)
  {

    a1[12] = 0;
  }
  uint64_t v3 = a1[9];
  if (v3)
  {

    a1[9] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 3));
  uint64_t v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  re::TechniqueDefinitionBuilder::buildPipelineData(*(_anonymous_namespace_ **)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 64), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 16), (uint64_t)v31);
  if (v31[0])
  {
    uint64_t v3 = mach_absolute_time();
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 16);
    double v5 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
    if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
    {
      if (mach_timebase_info((mach_timebase_info_t)info))
      {
        double v8 = NAN;
LABEL_13:
        uint64_t v13 = v32;
        if (v32) {
          uint64_t v14 = v32 + 8;
        }
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(void *)(a1 + 8) + 8), (uint64_t)v13);
        uint64_t v16 = *(const char ***)(a1 + 64);
        long long v17 = "";
        if (v16)
        {
          int v18 = *v16;
          if (v18) {
            long long v17 = v18;
          }
        }
        uint64_t v19 = v13[2];
        long long v20 = "";
        if (v19)
        {
          long long v21 = *(const char **)(v19 + 8);
          if (v21) {
            long long v20 = v21;
          }
        }
        uint64_t v22 = v13[3];
        uint64_t v23 = "";
        if (v22)
        {
          dispatch_group_t v24 = *(const char **)(v22 + 8);
          if (v24) {
            uint64_t v23 = v24;
          }
        }
        uint64_t v25 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
          *(_DWORD *)info = 136447234;
          if (v26) {
            uint64_t v27 = "fallback";
          }
          else {
            uint64_t v27 = "specialized";
          }
          *(void *)&mach_timebase_info info[4] = v27;
          __int16 v34 = 2082;
          uint64_t v35 = v17;
          __int16 v36 = 2082;
          long long v37 = v20;
          __int16 v38 = 2082;
          long long v39 = v23;
          __int16 v40 = 1024;
          int v41 = (int)(v8 / 1000000.0);
          _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "Function specialization completed for %{public}s technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", info, 0x30u);
        }

        goto LABEL_30;
      }
      LODWORD(v6) = *(_DWORD *)info;
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)&info[4];
      double v5 = (double)v6 / (double)v7;
      re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v5;
    }
    double v8 = v5 * (double)(v3 - v4);
    goto LABEL_13;
  }
  id v9 = *re::graphicsLogObjects(v2);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    unint64_t v30 = re::ObjCObject::description((id *)&v32);
    *(_DWORD *)info = 136315138;
    *(void *)&mach_timebase_info info[4] = v30;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "%s", info, 0xCu);
  }
  id v11 = *re::graphicsLogObjects((re *)v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = **(const char ***)(a1 + 64);
    if (!v12) {
      uint64_t v12 = "";
    }
    *(_DWORD *)info = 136315138;
    *(void *)&mach_timebase_info info[4] = v12;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Pipeline data for technique %s failed compilation!", info, 0xCu);
  }
LABEL_30:
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (v31[0]) {
    unsigned __int8 v28 = 1;
  }
  else {
    unsigned __int8 v28 = 3;
  }
  atomic_store(v28, (unsigned __int8 *)(*(void *)(a1 + 8) + 17));
  MEMORY[0x237DBC9B0](*(void *)(a1 + 8) + 17);
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v31);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_26E70EE78;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (v4) {
    id v6 = (id)(v4 + 8);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(a2 + 24, (uint64_t *)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a2 + 72) = v7;
  if (v7) {
    id v8 = (id)(v7 + 8);
  }
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 96);
  *(void *)(a2 + 96) = v9;
  if (v9) {
    id v10 = (id)(v9 + 8);
  }
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70EE78;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v4;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 104;
}

_anonymous_namespace_ *re::setVertexAmplificationCount(_anonymous_namespace_ *this, int a2, int a3, int a4, uint64_t a5, const RenderCommandEncoder *a6)
{
  if (a3 != 2 || !a2 || !this) {
    return this;
  }
  if (!v8)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    this = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return this;
  }
  id v10 = v8;
  v8[1] = 0x100000001;
  void *v8 = 0;
  if ((~a4 & 3) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if ((a4 & 2) != 0) {
        (*(void (**)(void, char *, uint64_t, void *))(*(void *)(a5 + 8) + 144))(**(void **)(a5 + 8), sel_setVertexAmplificationCount_viewMappings_, 1, v8 + 1);
      }
      goto LABEL_13;
    }
    uint64_t v15 = *(uint64_t **)(a5 + 8);
    uint64_t v12 = *v15;
    uint64_t v13 = (void (*)(uint64_t, char *, uint64_t, void *))v15[18];
    uint64_t v14 = 1;
  }
  else
  {
    id v11 = *(uint64_t **)(a5 + 8);
    uint64_t v12 = *v11;
    uint64_t v13 = (void (*)(uint64_t, char *, uint64_t, void *))v11[18];
    uint64_t v14 = 2;
  }
  v13(v12, sel_setVertexAmplificationCount_viewMappings_, v14, v10);
LABEL_13:
                                                      + 40);
}

unsigned char *re::VertexCacheDeformer::init(unsigned char *this, re::RenderManager *a2)
{
  if (!this[40])
  {
    uint64_t v3 = 0;
    this[40] = 1;
    id v8 = this;
    uint64_t v4 = (void **)(this + 8);
    do
    {
      v14[0] = 0;
      uint64_t v20 = 0;
      memset(v18, 0, sizeof(v18));
      int v19 = 0;
      char v21 = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      char v24 = 0;
      memset(v9, 0, sizeof(v9));
      id v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v9, v3);
      int v10 = 33;
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v18, (re::DynamicString *)v9);
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v14);
      NS::SharedPtr<MTL::Texture>::operator=(v4, ComputePipelineState);
      if (v11)
      {
        if (v12)
        {
          (*(void (**)(void))(*(void *)v11 + 40))();
          uint64_t v12 = 0;
          uint64_t v13 = 0;
        }
        uint64_t v11 = 0;
      }
      if (*(void *)&v9[0] && (BYTE8(v9[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v9[0] + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v18);
      this = (unsigned char *)v17[0];
      if (v17[0])
      {
        if (v17[1]) {
          this = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
        }
        memset(v17, 0, sizeof(v17));
      }
      if (v14[0])
      {
        this = v15;
        if (v15)
        {
          if (v16) {
            this = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v15 + 40))();
          }
        }
      }
      ++v3;
      ++v4;
    }
    while (v3 != 4);
    v8[41] = 1;
  }
  return this;
}

int64x2_t re::VertexCacheDeformer::addDeformationInstance@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xFFFFFFFFLL;
  int64x2_t result = vdupq_n_s64(2uLL);
  *(int64x2_t *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

void *re::VertexCacheDeformer::allocateBuffers(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  id v6 = a4;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a4;
  uint64_t v9 = *(void *)(*a4 + 48);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 32))(a2[3], 56, 8);
  uint64_t v11 = a2[3];
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v10 + 16) = 1;
  *(void *)(v10 + 24) = 0;
  uint64_t v54 = v10 + 24;
  long long v55 = (re::FrameContext *)a2;
  *(_DWORD *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0;
  uint64_t v56 = (void *)v10;
  re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::init(v10, v11, 1uLL);
  uint64_t v61 = v9;
  if (v9)
  {
    unint64_t v12 = 0;
    uint64_t v60 = v8 + 8;
    uint64_t v59 = v6;
    while (1)
    {
      uint64_t v13 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v60, v12);
      unint64_t v15 = *(void *)(v13 + 8);
      unint64_t v16 = v6[6];
      if (v16 <= v15) {
        break;
      }
      uint64_t v17 = v13;
      uint64_t v18 = v6[5];
      uint64_t v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v15);
      unint64_t v4 = *(void *)(*(void *)(v19 + 352) + 152);
      if (v4)
      {
        uint64_t v20 = v19;
        char v21 = (void *)(v18 + 312 * v15);
        uint64_t v22 = *(unsigned int *)(v4 + 36);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 1u);
        unsigned int v23 = *(_DWORD *)(v21[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 7, buf)+ 20);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 1u);
        uint64_t v24 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 15, buf);
        unint64_t v5 = v23 / *(unsigned __int16 *)(v21[16] + 20 * v24 + 4);
        unint64_t v26 = *(unsigned int *)(v4 + 12);
        if (v27 == v5)
        {
          if (*(float *)(v4 + 32) >= 0.5) {
            float v28 = 1.0;
          }
          else {
            float v28 = 0.0;
          }
          if (*(unsigned char *)(a1 + 41)) {
            float v29 = *(float *)(v4 + 32);
          }
          else {
            float v29 = v28;
          }
          *(_DWORD *)&void v66[2] = 16842753;
          *(_WORD *)int v66 = (re::sizeFromVertexFormat(v30, v25) + 3) & 0x1FC;
          char v68 = v30;
          int v67 = 0;
          if (v29 == 0.0 || (float v31 = fabsf(v29) + 1.0, vabds_f32(0.0, v29) < (float)(v31 * 0.00001)))
          {
            id v32 = objc_msgSend(*(id *)v4, sel_contents);
            id v33 = *(id *)v4;
            *(void *)long long buf = v32;
            uint64_t v34 = *(void *)(v4 + 8);
          }
          else if (v29 == 1.0 || vabds_f32(1.0, v29) < (float)((float)(v31 + 1.0) * 0.00001))
          {
            id v36 = objc_msgSend(*(id *)(v4 + 16), sel_contents);
            id v33 = *(id *)(v4 + 16);
            *(void *)long long buf = v36;
            uint64_t v34 = *(void *)(v4 + 24);
          }
          else
          {
            re::FrameContext::perFrameAlloc(v55, 8uLL, 4uLL, (uint64_t)buf);
            unint64_t v37 = *(void *)&buf[16];
            uint64_t v38 = *(unsigned int *)&buf[8];
            uint64_t v39 = *(unsigned int *)&buf[12];
            uint64_t v40 = *(void *)buf + *(unsigned int *)&buf[8];
            *(_DWORD *)uint64_t v40 = v5;
            *(float *)(v40 + 4) = v29;
            int v41 = v56;
            unint64_t v42 = v56[5];
            unint64_t v5 = v56[1];
            if (v42 + 1 > 8 * v5)
            {
              uint64_t v43 = v38;
              uint64_t v44 = v39;
              re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity(v56, (v42 + 8) >> 3);
              uint64_t v39 = v44;
              uint64_t v38 = v43;
              int v41 = v56;
              unint64_t v5 = v56[1];
            }
            unint64_t v4 = v42 >> 3;
            if (v5 <= v42 >> 3) {
              goto LABEL_31;
            }
            uint64_t v45 = v54;
            if ((v41[2] & 1) == 0) {
              uint64_t v45 = v41[4];
            }
            uint64_t v46 = *(void *)(v45 + 8 * v4);
            ++v41[5];
            ++*((_DWORD *)v41 + 12);
            int v47 = (unint64_t *)(v46 + 24 * (v42 & 7));
            unint64_t *v47 = v15;
            v47[1] = v37;
            void v47[2] = v38 | (v39 << 32);
            unint64_t v48 = *(void **)(v20 + 360);
            uint64_t v49 = v59[2];
            int v62 = *(_DWORD *)v66;
            __int16 v63 = *(_WORD *)&v66[4];
            int v64 = v67;
            char v65 = v68;
            unsigned int v50 = re::DeformationBufferAllocator::alloc(v48, v49, 1, (uint64_t)&v62, *(unsigned __int8 *)(v17 + 16), v26);
            uint64_t v51 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v20 + 360), *(unsigned __int8 *)(v17 + 16), v50);
            id v52 = objc_msgSend(*(id *)(v51 + 24), sel_contents);
            id v33 = *(id *)(v51 + 24);
            *(void *)long long buf = v52;
            uint64_t v34 = *(void *)(v51 + 32);
          }
          *(void *)&uint8_t buf[8] = v34;
          *(void *)&uint8_t buf[16] = v33;
          re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v21, 1u, a3, (uint64_t)buf, (uint64_t)v66);
          id v6 = v59;
        }
        else
        {
          uint64_t v35 = *re::graphicsLogObjects((re *)v24);
          id v6 = v59;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v5;
            _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Vertex cache size (%zu) does not match target vertex buffer size (%zu)", buf, 0x16u);
          }
        }
      }
      if (v61 == ++v12) {
        return v56;
      }
    }
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, *(void *)(v13 + 8), v16);
    _os_crash();
    __break(1u);
LABEL_31:
    uint64_t v69 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v70 = 136315906;
    uint64_t v71 = "operator[]";
    __int16 v72 = 1024;
    int v73 = 858;
    __int16 v74 = 2048;
    unint64_t v75 = v4;
    __int16 v76 = 2048;
    unint64_t v77 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v56;
}

uint64_t re::DeformationBufferAllocator::allocationData(re::DeformationBufferAllocator *this, unsigned int a2, unsigned int a3)
{
  if (*((void *)this + 1) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 2) + 72 * a2 + 16;
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v3, a3);
}

uint64_t re::VertexCacheDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Apply Vertex Cache Deformer");
  uint64_t v24 = *(void *)(a2 + 40);
  if (v24)
  {
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + 40);
      if (v10 <= v9) {
        break;
      }
      unint64_t v4 = v9 >> 3;
      unint64_t v5 = *(void **)(a2 + 8);
      if ((unint64_t)v5 <= v9 >> 3) {
        goto LABEL_11;
      }
      uint64_t v11 = a2 + 24;
      if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
        uint64_t v11 = *(void *)(a2 + 32);
      }
      uint64_t v12 = *(void *)(v11 + 8 * v4);
      unint64_t v13 = *(void *)(v12 + 24 * (v9 & 7));
      unint64_t v14 = a4[6];
      if (v14 <= v13) {
        goto LABEL_12;
      }
      uint64_t v15 = v12 + 24 * (v9 & 7);
      unint64_t v5 = (void *)(a4[5] + 312 * v13);
      uint64_t v16 = *(void *)(*(void *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](a4[1], v13) + 352) + 152);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      unsigned int v17 = *(_DWORD *)(v5[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 7, (unsigned __int8 *)v30)+ 20);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      unsigned int v18 = v17
          / *(unsigned __int16 *)(v5[16]
                                + 20
                                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 15, (unsigned __int8 *)v30)+ 4);
      uint64_t v19 = a1 + 8 * *(unsigned int *)(v16 + 36);
      unsigned int v20 = objc_msgSend(*(id *)(v19 + 8), sel_maxTotalThreadsPerThreadgroup);
      unint64_t v4 = (v18 + v20 - 1) / v20;
      [*this setComputePipelineState:*(void *)(v19 + 8)];
      [*this setBuffer:*(void *)v16 offset:*(unsigned int *)(v16 + 8) atIndex:0];
      [*this setBuffer:*(void *)(v16 + 16) offset:*(unsigned int *)(v16 + 24) atIndex:1];
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      uint64_t v21 = *(void *)(v5[24]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 23, (unsigned __int8 *)v30)+ 24);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v21, *(unsigned int *)(v5[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 23, (unsigned __int8 *)v30)+ 16), 2);
      [*this setBuffer:*(void *)(v15 + 8) offset:*(unsigned int *)(v15 + 16) atIndex:3];
      uint64_t v22 = *this;
      *(void *)&v30[0] = v4;
      *(int64x2_t *)((char *)v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vdupq_n_s64(1uLL);
      *(void *)unint64_t v27 = v20;
      *(_OWORD *)&v27[8] = *(_OWORD *)((char *)v30 + 8);
      [v22 dispatchThreadgroups:v30 threadsPerThreadgroup:v27];
      if (v24 == ++v9) {
        return [*this popDebugGroup];
      }
    }
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, v9, v10);
    _os_crash();
    __break(1u);
LABEL_11:
    memset(v30, 0, sizeof(v30));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v27 = 136315906;
    *(void *)&uint64_t v27[4] = "operator[]";
    *(_WORD *)&unsigned char v27[12] = 1024;
    *(_DWORD *)&v27[14] = 858;
    *(_WORD *)&v27[18] = 2048;
    *(void *)&v27[20] = v4;
    __int16 v28 = 2048;
    float v29 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 666, v13, v14);
    _os_crash();
    __break(1u);
  }
  return [*this popDebugGroup];
}

void re::VertexCacheDeformer::~VertexCacheDeformer(re::VertexCacheDeformer *this)
{
  uint64_t v2 = 32;
  do
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
  }
  while (v2);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = 32;
  while (1)
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (!v2)
    {
      JUMPOUT(0x237DBCBD0);
    }
  }
}

void re::VertexCacheDeformer::deformCPU(uint64_t a1, uint64_t a2)
{
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(void *a1, unsigned __int8 *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  unint64_t v7 = v6 % v3;
  int8x16_t v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  unint64_t v10 = v6 % v3;
  while (1)
  {
    int8x16_t v11 = *(int8x16_t *)(*a1 + 16 * v10);
    unint64_t v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3) {
      unint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    uint64_t v15 = -1;
    if (v10 == v7) {
      return v15;
    }
  }
  uint64_t v14 = 16 * v10;
  while (1)
  {
    uint64_t v15 = v13 + v14;
    if (v4 == *(unsigned __int8 *)(a1[1] + 32 * (v13 + v14))) {
      return v15;
    }
    if (v13 <= 0x3E)
    {
      unint64_t v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(void *a1, unsigned __int8 *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  unint64_t v7 = v6 % v3;
  int8x16_t v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  unint64_t v10 = v6 % v3;
  while (1)
  {
    int8x16_t v11 = *(int8x16_t *)(*a1 + 16 * v10);
    unint64_t v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3) {
      unint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    uint64_t v15 = -1;
    if (v10 == v7) {
      return v15;
    }
  }
  uint64_t v14 = 16 * v10;
  while (1)
  {
    uint64_t v15 = v13 + v14;
    if (v4 == *(unsigned __int8 *)(a1[1] + 20 * (v13 + v14))) {
      return v15;
    }
    if (v13 <= 0x3E)
    {
      unint64_t v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::DeformationVertexBufferState::setOutputBuffer(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v23 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2);
  uint64_t v8 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 248), &v23);
  *(unsigned char *)(a1 + 32) |= !re::VertexBufferFormat::operator==((unsigned __int16 *)(*(void *)(a1 + 256) + 20 * v8 + 4), (unsigned __int16 *)a5);
  uint64_t v9 = *(void *)(a1 + 192)
     + 32
     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 184), &v23);
  uint64_t v10 = *(void *)(a4 + 16);
  *(_OWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)a4;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(a1 + 248), &v23);
  uint64_t v12 = *(void *)(a1 + 256);
  uint64_t v13 = v12 + 20 * v11;
  __int16 v14 = *(_WORD *)(a5 + 4);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)a5;
  v13 += 4;
  *(_WORD *)(v13 + 4) = v14;
  if (v13 != a5)
  {
    uint64_t v15 = v12 + 20 * v11;
    *(_DWORD *)(v15 + 12) = *(_DWORD *)(a5 + 8);
    *(unsigned char *)(v15 + 16) = *(unsigned char *)(a5 + 12);
  }
  uint64_t v16 = 1 << v23;
  unsigned int v17 = re::Bitset<64>::toWordIndex(a1 + 8, v23);
  *(void *)(a1 + 8 + 8 * v17) |= v16;
  uint64_t v18 = 1 << v23;
  unsigned int v19 = re::Bitset<64>::toWordIndex(a1 + 16, v23);
  *(void *)(a1 + 16 + 8 * v19) |= v18;
  uint64_t v20 = a1 + 24;
  uint64_t v21 = 1 << v23;
  uint64_t result = re::Bitset<64>::toWordIndex(v20, v23);
  *(void *)(v20 + 8 * result) |= v21;
  return result;
}

BOOL re::VertexBufferFormat::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && *((unsigned __int8 *)a1 + 4) == *((unsigned __int8 *)a2 + 4)
      && *((unsigned __int8 *)a1 + 5) == *((unsigned __int8 *)a2 + 5)
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && *((unsigned __int8 *)a1 + 12) == *((unsigned __int8 *)a2 + 12);
}

void *re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      unint64_t v4 = result[1];
      if (v4 > a2)
      {
        int v5 = *((_DWORD *)result + 4);
        do
        {
          unint64_t v6 = v3 + 3;
          if ((v5 & 1) == 0) {
            unint64_t v6 = (void *)v3[4];
          }
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v3 + 40))(*v3, v6[v4 - 1]);
          int v7 = *((_DWORD *)v3 + 4);
          unint64_t v4 = v3[1] - 1;
          v3[1] = v4;
          int v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        uint64_t v8 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 192, 0);
          uint64_t v9 = result;
          if (*v3)
          {
            unint64_t v10 = v3[1];
            int v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              unint64_t v12 = *v8;
              BOOL v14 = v10 >= *v8;
              unint64_t v13 = v10 + 1;
              BOOL v14 = !v14 || v12 >= v13;
              if (v14) {
                goto LABEL_24;
              }
              unint64_t v15 = 2 * v12;
              goto LABEL_20;
            }
            unint64_t v13 = v10 + 1;
            if (v13 >= 3)
            {
              unint64_t v15 = 4;
LABEL_20:
              if (v15 <= v13) {
                unint64_t v17 = v13;
              }
              else {
                unint64_t v17 = v15;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              int v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v16 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            int v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          uint64_t v18 = v3 + 3;
          if ((v11 & 1) == 0) {
            uint64_t v18 = (void *)v3[4];
          }
          unint64_t v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

unsigned int *re::RenderGraphStats::registerNewFrame(unsigned int *this)
{
  unsigned int v1 = *this + 1;
  *this = v1;
  if (v1 >> 3 >= 0x2A3)
  {
    unint64_t v2 = this;
    this = (unsigned int *)this[1];
    if (this | v2[2] || v2[3] || v2[4]) {
      this = (unsigned int *)re::REAnalyticsEventRenderGraphCacheState((re *)this);
    }
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    v2[4] = 0;
  }
  return this;
}

uint64_t re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(uint64_t a1, long long *a2, int a3, re::DynamicString *a4)
{
  uint64_t v16[6] = *MEMORY[0x263EF8340];
  BOOL v5 = a3 == 2;
  long long v7 = *a2;
  long long v8 = a2[1];
  re::DynamicString::DynamicString((re::DynamicString *)&v9, a4);
  v12[0] = 1;
  long long v13 = v7;
  long long v14 = v8;
  char v15 = 0;
  v16[0] = v9;
  v16[3] = v11;
  *(_OWORD *)&v16[1] = v10;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(a1 + 96 * v5 + 192, v12);
  if (v12[0] && v16[0])
  {
    if (v16[1]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))();
    }
    memset(v16, 0, 32);
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::DynamicString::deinit((re::DynamicString *)(a1 + 56));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      unint64_t v6 = (_OWORD *)(a1 + 16);
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        long long v8 = *((_OWORD *)a2 + 1);
        long long v9 = *((_OWORD *)a2 + 2);
        *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = a2[48];
        *unint64_t v6 = v8;
        *(_OWORD *)(a1 + 32) = v9;
        re::DynamicString::operator=((re::DynamicString *)(a1 + 56), (re::DynamicString *)(a2 + 56));
      }
      else
      {
        *(unsigned char *)a1 = 1;
        long long v10 = *((_OWORD *)a2 + 1);
        long long v11 = *((_OWORD *)a2 + 2);
        *(unsigned char *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = a2[48];
        *unint64_t v6 = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        uint64_t v12 = *((void *)a2 + 8);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        *((void *)a2 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
        uint64_t v13 = *((void *)a2 + 9);
        *((void *)a2 + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
        uint64_t v15 = *(void *)(a1 + 64);
        uint64_t v14 = *(void *)(a1 + 72);
        *(void *)(a1 + 64) = v12;
        *(void *)(a1 + 72) = v13;
        *((void *)a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
        *((void *)a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v14;
      }
    }
  }
  return a1;
}

uint64_t re::RenderFrameWorkloadPatchCamera::trackWorldEyePose(uint64_t a1, long long *a2, int a3, re::DynamicString *a4)
{
  uint64_t v16[6] = *MEMORY[0x263EF8340];
  BOOL v5 = a3 == 2;
  long long v7 = *a2;
  long long v8 = a2[1];
  re::DynamicString::DynamicString((re::DynamicString *)&v9, a4);
  v12[0] = 1;
  long long v13 = v7;
  long long v14 = v8;
  char v15 = 1;
  v16[0] = v9;
  v16[3] = v11;
  *(_OWORD *)&v16[1] = v10;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(a1 + 96 * v5 + 192, v12);
  if (v12[0] && v16[0])
  {
    if (v16[1]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))();
    }
    memset(v16, 0, 32);
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

void re::RenderFrameWorkloadPatchCamera::applyPostEncode(uint64_t this, const re::RenderFrame *a2)
{
  uint64_t v3 = this;
  *(void *)&long long v90 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 32))
  {
    *(_OWORD *)long long v81 = 0u;
    *(_OWORD *)long long buf = xmmword_23435FBB0;
    long long v89 = 0u;
    re::decomposeScaleRotationTranslation<float>(this + 48, (int32x4_t *)v81, buf, &v89);
    float32x4_t v75 = (float32x4_t)v89;
    int32x4_t v77 = *(int32x4_t *)buf;
    this = MurmurHash3_x64_128((uint64_t)"Camera", 6, 0, (unint64_t *)v81);
    int v4 = 0;
    uint64_t v5 = 0;
    long long v87 = 0u;
    long long v88 = 0u;
    unint64_t v6 = (v81[1] + (v81[0] << 6) + ((unint64_t)v81[0] >> 2) - 0x61C8864680B583E9) ^ v81[0];
    *(_OWORD *)uint64_t v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)long long v81 = 0u;
    long long v82 = 0u;
    uint64_t v74 = v3;
    uint64_t v7 = v3 + 192;
    char v8 = 1;
    do
    {
      char v9 = v8;
      if (*(unsigned char *)(v7 + 96 * v5))
      {
        uint64_t v10 = v7 + 96 * v5;
        uint64_t v11 = v10 + 16;
        if (*(unsigned char *)(v10 + 64)) {
          uint64_t v12 = *(const char **)(v10 + 72);
        }
        else {
          uint64_t v12 = (const char *)(v10 + 65);
        }
        size_t v13 = strlen(v12);
        uint64_t v14 = 0x9E3779B97F4A7C17;
        if (v13)
        {
          MurmurHash3_x64_128((uint64_t)v12, v13, 0, (unint64_t *)buf);
          uint64_t v14 = ((*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf)
              - 0x61C8864680B583E9;
        }
        *((void *)&v89 + v5) = ((v6 >> 2) + (v6 << 6) + v14) ^ v6;
        this = (uint64_t)re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(buf, v11, v75, v77);
        float32x4_t v15 = vnegq_f32(v80);
        int8x16_t v16 = (int8x16_t)vnegq_f32(*(float32x4_t *)buf);
        float32x4_t v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
        float32x4_t v18 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL), v80), v17, *(float32x4_t *)buf);
        int8x16_t v19 = (int8x16_t)vaddq_f32(v18, v18);
        float32x4_t v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL);
        int8x16_t v21 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v80), v20, v17);
        float32x4_t v22 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v20, v80, 3), *(float32x4_t *)buf), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL));
        v20.f32[0] = v15.f32[0] + v15.f32[0];
        float v23 = (float)(v15.f32[0] + v15.f32[0]) * v15.f32[0];
        float v24 = vmuls_lane_f32(v15.f32[1] + v15.f32[1], *(float32x2_t *)v15.f32, 1);
        float v25 = vmuls_lane_f32(v15.f32[2] + v15.f32[2], v15, 2);
        float v26 = vmuls_lane_f32(v15.f32[0] + v15.f32[0], *(float32x2_t *)v15.f32, 1);
        float v27 = vmuls_lane_f32(v15.f32[0] + v15.f32[0], v15, 2);
        v15.f32[0] = vmuls_lane_f32(v15.f32[1] + v15.f32[1], v15, 2);
        v20.f32[0] = vmuls_lane_f32(v20.f32[0], v80, 3);
        v17.f32[0] = vmuls_lane_f32(v15.f32[1] + v15.f32[1], v80, 3);
        float v28 = vmuls_lane_f32(v15.f32[2] + v15.f32[2], v80, 3);
        HIDWORD(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
        *(float *)&long long v29 = 1.0 - (float)(v24 + v25);
        *((float *)&v29 + 1) = v26 + v28;
        *((float *)&v29 + 2) = v27 - v17.f32[0];
        *(float *)v21.i32 = 1.0 - (float)(v23 + v25);
        HIDWORD(v30) = 0;
        *(float *)&long long v30 = v26 - v28;
        DWORD1(v30) = v21.i32[0];
        *((float *)&v30 + 2) = v15.f32[0] + v20.f32[0];
        v17.i32[3] = 0;
        v17.f32[0] = v27 + v17.f32[0];
        v17.f32[1] = v15.f32[0] - v20.f32[0];
        v17.f32[2] = 1.0 - (float)(v23 + v24);
        v22.i32[3] = 1.0;
        uint64_t v31 = &v81[8 * v5];
        *(_OWORD *)uint64_t v31 = v29;
        *((_OWORD *)v31 + 1) = v30;
        *((float32x4_t *)v31 + 2) = v17;
        *((float32x4_t *)v31 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v22;
        ++v4;
      }
      char v8 = 0;
      uint64_t v5 = 1;
    }
    while ((v9 & 1) != 0);
    if (v4)
    {
      uint64_t v32 = *((unsigned int *)a2 + 162);
      if (v32)
      {
        uint64_t v33 = 0;
        uint64_t v34 = (_DWORD *)(*((void *)a2 + 79) + 8);
        while ((*v34 & 0x80000000) == 0)
        {
          v34 += 512;
          if (v32 == ++v33)
          {
            LODWORD(vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = *((_DWORD *)a2 + 162);
            break;
          }
        }
      }
      else
      {
        LODWORD(vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 0;
      }
      if (v32 != v33)
      {
        uint64_t v36 = v33;
        uint64_t v37 = v89;
        uint64_t v38 = *((void *)a2 + 79);
        do
        {
          uint64_t v39 = (__n128 *)(v38 + (v36 << 11));
          if (v39[1].n128_u64[0] == v37)
          {
            re::VFXLateLatch::patchTrackedVFXDrawCalls((re::LateLatch *)&v39[114].n128_i8[8], v39 + 117, (uint64_t)v81, 2);
            re::ViewConstantsLateLatch::patchTrackedViewConstantsBuffers((__n128 *)v39[16].n128_u64, (float32x4_t *)&v39[117], (unint64_t)buf, v4, v40, v41, v42, v43, v73, v74, v75.i64[0], v75.i64[1], v77.i64[0], v77.i64[1], (uint64_t)v81, 2, v80.i64[0], v80.i64[1], v81[0],
              v81[1],
              v82,
              *((uint64_t *)&v82 + 1),
              v83,
              *((uint64_t *)&v83 + 1),
              v84,
              *((uint64_t *)&v84 + 1),
              v85[0],
              v85[1],
              v86,
              v87,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93);
            re::InstanceConstantsLateLatch::patchTrackedInstanceConstantsBuffers((re::LateLatch *)&v39[112], *(os_unfair_lock_s **)(*((void *)a2 + 1) + 160), *((void *)a2 + 46) & 0xFFFFFFFFFFFFFFFLL, (float32x4_t *)&v39[117]);
            LODWORD(v32) = *((_DWORD *)a2 + 162);
            uint64_t v38 = *((void *)a2 + 79);
          }
          if (v32 <= (int)v33 + 1) {
            int v44 = v33 + 1;
          }
          else {
            int v44 = v32;
          }
          while (1)
          {
            uint64_t v36 = (v33 + 1);
            if (v44 - 1 == v33) {
              break;
            }
            LODWORD(vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = v33 + 1;
            int v45 = v36;
            if ((*(_DWORD *)(v38 + (v36 << 11) + 8) & 0x80000000) != 0) {
              goto LABEL_31;
            }
          }
          int v45 = v44;
LABEL_31:
          LODWORD(vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = v45;
        }
        while (v32 != v45);
      }
    }
    else
    {
      uint64_t v35 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      if (this)
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "patchPostEncodeTransforms";
        _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "%s: Expecting at least one viewport", buf, 0xCu);
      }
    }
    uint64_t v3 = v74;
  }
  if (re::LateLatch::shouldApplyHeadPoseLateLatching((re::LateLatch *)this) && *(unsigned char *)(v3 + 32))
  {
    *(_OWORD *)long long v81 = 0u;
    *(_OWORD *)long long buf = xmmword_23435FBB0;
    long long v89 = 0u;
    uint64_t v46 = (re *)re::decomposeScaleRotationTranslation<float>(v3 + 48, (int32x4_t *)v81, buf, &v89);
    uint64_t v47 = 0;
    long long v87 = 0u;
    long long v88 = 0u;
    *(_OWORD *)uint64_t v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)long long v81 = 0u;
    long long v82 = 0u;
    uint64_t v48 = v3 + 192;
    char v49 = 1;
    float32x4_t v76 = (float32x4_t)v89;
    int32x4_t v78 = *(int32x4_t *)buf;
    do
    {
      char v50 = v49;
      if (*(unsigned char *)(v48 + 96 * v47))
      {
        uint64_t v46 = (re *)re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(buf, v48 + 96 * v47 + 16, v76, v78);
        float32x4_t v51 = vnegq_f32(v80);
        int8x16_t v52 = (int8x16_t)vnegq_f32(*(float32x4_t *)buf);
        float32x4_t v53 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        float32x4_t v54 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL), v80), v53, *(float32x4_t *)buf);
        int8x16_t v55 = (int8x16_t)vaddq_f32(v54, v54);
        float32x4_t v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL);
        int8x16_t v57 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL), v80), v56, v53);
        float32x4_t v58 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v56, v80, 3), *(float32x4_t *)buf), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), v57, 0xCuLL));
        v56.f32[0] = v51.f32[0] + v51.f32[0];
        float v59 = (float)(v51.f32[0] + v51.f32[0]) * v51.f32[0];
        float v60 = vmuls_lane_f32(v51.f32[1] + v51.f32[1], *(float32x2_t *)v51.f32, 1);
        float v61 = vmuls_lane_f32(v51.f32[2] + v51.f32[2], v51, 2);
        float v62 = vmuls_lane_f32(v51.f32[0] + v51.f32[0], *(float32x2_t *)v51.f32, 1);
        float v63 = vmuls_lane_f32(v51.f32[0] + v51.f32[0], v51, 2);
        v51.f32[0] = vmuls_lane_f32(v51.f32[1] + v51.f32[1], v51, 2);
        v56.f32[0] = vmuls_lane_f32(v56.f32[0], v80, 3);
        v53.f32[0] = vmuls_lane_f32(v51.f32[1] + v51.f32[1], v80, 3);
        float v64 = vmuls_lane_f32(v51.f32[2] + v51.f32[2], v80, 3);
        HIDWORD(v65) = 0;
        *(float *)&long long v65 = 1.0 - (float)(v60 + v61);
        *((float *)&v65 + 1) = v62 + v64;
        *((float *)&v65 + 2) = v63 - v53.f32[0];
        *(float *)v57.i32 = 1.0 - (float)(v59 + v61);
        HIDWORD(v66) = 0;
        *(float *)&long long v66 = v62 - v64;
        DWORD1(v66) = v57.i32[0];
        *((float *)&v66 + 2) = v51.f32[0] + v56.f32[0];
        v53.i32[3] = 0;
        v53.f32[0] = v63 + v53.f32[0];
        v53.f32[1] = v51.f32[0] - v56.f32[0];
        v53.f32[2] = 1.0 - (float)(v59 + v60);
        v58.i32[3] = 1.0;
        int v67 = &v81[8 * v47];
        *(_OWORD *)int v67 = v65;
        *((_OWORD *)v67 + 1) = v66;
        *((float32x4_t *)v67 + 2) = v53;
        *((float32x4_t *)v67 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v58;
      }
      char v49 = 0;
      uint64_t v47 = 1;
    }
    while ((v50 & 1) != 0);
    if ((*((unsigned char *)a2 + 680) & 1) == 0
      && (atomic_exchange(re::RenderFrameWorkloadPatchCamera::callPostEncodeTransformsFunctions(re::RenderFrame const&,re::Optional<re::Matrix4x4<float>> const&)::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      char v68 = *re::graphicsLogObjects(v46);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v69 = *((void *)a2 + 84);
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v69;
        _os_log_impl(&dword_233120000, v68, OS_LOG_TYPE_DEFAULT, "Patch Functions Overflowed the inline space and triggered an alloc. Size: %zu", buf, 0xCu);
      }
    }
    if (*((void *)a2 + 84))
    {
      uint64_t v70 = 0;
      unint64_t v71 = 0;
      do
      {
        if (*((_DWORD *)a2 + 170)) {
          __int16 v72 = (char *)a2 + 688;
        }
        else {
          __int16 v72 = (char *)*((void *)a2 + 87);
        }
        (*(void (**)(char *, uint64_t *, uint64_t *))(*(void *)&v72[v70] + 16))(&v72[v70], v81, v85);
        ++v71;
        v70 += 472;
      }
      while (*((void *)a2 + 84) > v71);
    }
  }
}

_OWORD *re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(_OWORD *result, uint64_t a2, float32x4_t a3, int32x4_t _Q1)
{
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    long long v18 = *(_OWORD *)(a2 + 16);
    *uint64_t result = *(_OWORD *)a2;
    result[1] = v18;
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "worldEyePose", 201);
    uint64_t result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q1, _Q1), (int8x16_t)_Q1, 0xCuLL);
    _Q4 = *(float32x4_t *)(a2 + 16);
    float32x4_t v6 = vnegq_f32((float32x4_t)_Q1);
    float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v6), *(float32x4_t *)a2, v4);
    int8x16_t v8 = (int8x16_t)vaddq_f32(v7, v7);
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), v8, 0xCuLL);
    int8x16_t v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), v6), v9, v4);
    float32x4_t v11 = vaddq_f32(vaddq_f32(*(float32x4_t *)a2, vmulq_laneq_f32(v9, (float32x4_t)_Q1, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL));
    _Q5 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v6), _Q4, v4);
    float32x4_t v13 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), _Q5, 0xCuLL), _Q4, (float32x4_t)_Q1, 3), (float32x4_t)_Q1, _Q4, 3);
    _Q4.i32[0] = _Q4.i32[3];
    __asm { FMLA            S5, S4, V1.S[3] }
    v13.i32[3] = _Q5.i32[0];
    *uint64_t result = vaddq_f32(v11, a3);
    result[1] = v13;
  }
  return result;
}

void re::RenderFrameWorkloadPatchCamera::~RenderFrameWorkloadPatchCamera(re::RenderFrameWorkloadPatchCamera *this)
{
  for (uint64_t i = 0; i != -192; i -= 96)
  {
    if (*((unsigned char *)this + i + 288)) {
      re::DynamicString::deinit((re::RenderFrameWorkloadPatchCamera *)((char *)this + i + 344));
    }
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = 0;
  while (1)
  {
    if (*((unsigned char *)this + v2 + 288)) {
      re::DynamicString::deinit((re::RenderFrameWorkloadPatchCamera *)((char *)this + v2 + 344));
    }
    v2 -= 96;
    if (v2 == -192)
    {
      *(void *)this = &unk_26E6DECE0;
      objc_destructInstance((char *)this + 8);
      JUMPOUT(0x237DBCBD0);
    }
  }
}

re::ContactDeformerModelBuilder *re::ContactDeformerModelBuilder::ContactDeformerModelBuilder(re::ContactDeformerModelBuilder *this, re::Allocator *a2, const re::mtl::Device *a3, uint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  *(void *)this = a3;
  *((void *)this + 1) = a6;
  *((void *)this + 2) = 0;
  int8x16_t v10 = (void *)re::DeformationModelData::create<re::ContactDeformer,re::ContactDeformerModel>((uint64_t)a6, (uint64_t)a2);
  re::FixedArray<re::FixedArray<re::ContactDeformerModel::ContactDeformerTarget>>::init<>(v10 + 3, (uint64_t)a2, a5);
  re::FixedArray<re::StringID>::init<>(v10, (uint64_t)a2, a5);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v10 + 6, (uint64_t)a2, a4, &re::ContactDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::ContactDeformer,re::ContactDeformerModel>(uint64_t a1, uint64_t a2)
{
  _OWORD v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 88, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(void *)(v4 + 80) = "";
  v6[0] = &unk_26E70F018;
  v6[1] = a2;
  _OWORD v6[3] = v6;
  uint64_t v7 = v4;
  unint64_t v8[3] = v8;
  v8[0] = &unk_26E70F018;
  v8[1] = a2;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:nn180100]((uint64_t *)(a1 + 600), &v7);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](&v7);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v6);
  return *(void *)(a1 + 600);
}

void re::FixedArray<re::FixedArray<re::ContactDeformerModel::ContactDeformerTarget>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 24 * a3;
  float32x4_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  int8x16_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    int8x16_t v8 = (void *)((char *)v8 + v5 - 24);
  }
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v8[2] = 0;
}

void *re::FixedArray<unsigned short>::init<unsigned short const&>(void *result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 < 0)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 2, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  float32x4_t v6 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 2 * a3, 2);
  _DWORD v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_WORD *)uint64_t result = *a4;
      uint64_t result = (void *)((char *)result + 2);
      --v8;
    }
    while (v8);
  }
  *(_WORD *)uint64_t result = *a4;
  return result;
}

unint64_t *re::ContactDeformerModelBuilder::initTargetsForMeshPart(re::ContactDeformerModelBuilder *this, unint64_t a2, unint64_t a3, unint64_t a4, const re::StringID *a5)
{
  float32x4_t v6 = *(void **)(*((void *)this + 1) + 600);
  if (v6[7] <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  *(_WORD *)(v6[8] + 2 * a2) = a3;
  if (v6[4] <= a3)
  {
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v5 = a4;
  uint64_t v9 = v6[5];
  int8x16_t v10 = (void *)(v9 + 24 * a3);
  v10[1] = v5;
  if (v5)
  {
    if (v5 >> 60)
    {
LABEL_16:
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 16, v5);
      _os_crash();
      __break(1u);
LABEL_17:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    uint64_t v12 = 16 * v5;
    *(void *)(v9 + 24 * a3 + 16) = v13;
    if (!v13) {
      goto LABEL_17;
    }
    float32x4_t v15 = v13;
    if (v5 != 1)
    {
      bzero(v13, v12 - 16);
      float32x4_t v15 = (void *)((char *)v15 + v12 - 16);
    }
    *float32x4_t v15 = 0;
    v15[1] = 0;
  }
  unint64_t v5 = v6[1];
  if (v5 <= a3)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  int8x16_t v16 = (unint64_t *)(v6[2] + 16 * a3);
  return re::StringID::operator=(v16, (uint64_t *)a5);
}

void re::ContactDeformerModelBuilder::addContactTarget(id **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v5 = (unint64_t)a1[2];
  id v6 = a1[1][75];
  a1[2] = (id *)(v5 + 1);
  uint64_t v26 = *a3;
  id v27 = 0;
  if (!a3[2]) {
    goto LABEL_21;
  }
  uint64_t v8 = a1;
  uint64_t v23 = 0;
  float v24 = 0;
  uint64_t v25 = 0;
  unint64_t v10 = 0;
  LODWORD(v11) = 1.0;
  LODWORD(v12) = 998277249;
  do
  {
    unint64_t v13 = a3[2];
    if (v13 <= v10)
    {
      re::internal::assertLog((re::internal *)6, v9, v11, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v10, v13);
      _os_crash();
      __break(1u);
LABEL_27:
      uint64_t v28 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)uint64_t v36 = 0u;
      a2 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v29 = 136315906;
      *(void *)&v29[4] = "operator[]";
      __int16 v30 = 1024;
      int v31 = 468;
      __int16 v32 = 2048;
      unint64_t v33 = v10;
      __int16 v34 = 2048;
      uint64_t v35 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_28:
      uint64_t v23 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)uint64_t v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v29 = 136315906;
      *(void *)&v29[4] = "operator[]";
      __int16 v30 = 1024;
      int v31 = 468;
      __int16 v32 = 2048;
      unint64_t v33 = a2;
      __int16 v34 = 2048;
      uint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      uint64_t v23 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)uint64_t v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v29 = 136315906;
      *(void *)&v29[4] = "operator[]";
      __int16 v30 = 1024;
      int v31 = 468;
      __int16 v32 = 2048;
      unint64_t v33 = v5;
      __int16 v34 = 2048;
      uint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    float v14 = *(float *)(a3[1] + 4 * v10);
    if (v14 >= 1.0)
    {
      LOBYTE(v15) = -1;
    }
    else if (v14 <= 0.0)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      int v15 = (int)(float)(v14 / 0.0039216);
    }
    uint64_t v3 = v24;
    if ((unint64_t)v24 <= v10) {
      goto LABEL_27;
    }
    *(unsigned char *)(v25 + v10++) = v15;
  }
  while (v10 != 64800);
  id v16 = **v8;
  uint64_t v28 = 0;
  *(void *)long long v29 = v16;
  uint64_t v21 = 0;
  uint64_t v22 = 10;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType((id *)v29, &v21, &v22, &v28);
  id v18 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v18, sel_setUsage_, 0);
  if ((objc_msgSend(v18, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v18, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v18, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v18, sel_setStorageMode_, 0);
  objc_msgSend(v18, sel_setWidth_, 360);
  objc_msgSend(v18, sel_setHeight_, 180);
  objc_msgSend(v18, sel_setPixelFormat_, 10);
  re::mtl::Device::makeTexture(v18, *v8, v36);
  NS::SharedPtr<MTL::Texture>::operator=(&v27, v36);
  if (v36[0]) {

  }
  v36[0] = 0;
  v36[1] = 0;
  *(void *)&v37[0] = 0;
  *(_OWORD *)((char *)v37 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_2343AE830;
  *((void *)&v37[1] + 1) = 1;
  objc_msgSend(v27, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, v36, 0, v25, 360);
  if (v18) {

  }
  if (v23 && v24) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
LABEL_21:
  uint64_t v8 = (id **)*((void *)v6 + 4);
  if ((unint64_t)v8 <= a2) {
    goto LABEL_28;
  }
  uint64_t v19 = *((void *)v6 + 5);
  uint64_t v8 = *(id ***)(v19 + 24 * a2 + 8);
  if ((unint64_t)v8 <= v5) {
    goto LABEL_29;
  }
  uint64_t v20 = *(void *)(v19 + 24 * a2 + 16) + 16 * v5;
  *(void *)uint64_t v20 = v26;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v20 + 8), &v27);
  if (v27) {
}
  }

double re::ContactDeformer::addDeformationInstance@<D0>(re::ContactDeformer *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2)
  {
    BOOL v3 = 0;
  }
  else if (*((unsigned char *)this + 32))
  {
    BOOL v3 = *((unsigned char *)this + 33) != 0;
  }
  else
  {
    BOOL v3 = 1;
  }
  *(void *)a3 = 0xFFFFFFFFLL;
  *(void *)&double result = 3;
  *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_2343AE840;
  *(unsigned char *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return result;
}

uint64_t re::ContactDeformer::init(uint64_t this, re::RenderManager *a2)
{
  if (!*(unsigned char *)(this + 32))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)a2 + 4);
    if (*((unsigned char *)a2 + 265))
    {
      uint64_t v4 = 0;
      char v5 = 1;
      do
      {
        char v6 = v5;
        v15[0] = 0;
        uint64_t v21 = 0;
        memset(v19, 0, sizeof(v19));
        int v20 = 0;
        char v22 = 0;
        char v23 = 0;
        uint64_t v24 = 0;
        char v25 = 0;
        memset(v10, 0, sizeof(v10));
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10, 0);
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v10, v6 & 1);
        int v11 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v19, (re::DynamicString *)v10);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v15);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v4 + 16), ComputePipelineState);
        if (v12)
        {
          if (v13)
          {
            (*(void (**)(void))(*(void *)v12 + 40))();
            uint64_t v13 = 0;
            uint64_t v14 = 0;
          }
          uint64_t v12 = 0;
        }
        if (*(void *)&v10[0] && (BYTE8(v10[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v10[0] + 40))();
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v19);
        this = v18[0];
        if (v18[0])
        {
          if (v18[1]) {
            this = (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
          }
          memset(v18, 0, sizeof(v18));
        }
        if (v15[0])
        {
          this = v16;
          if (v16)
          {
            if (v17) {
              this = (*(uint64_t (**)(void))(*(void *)v16 + 40))();
            }
          }
        }
        char v5 = 0;
        uint64_t v4 = 1;
      }
      while ((v6 & 1) != 0);
      *(unsigned char *)(v3 + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 1;
    }
  }
  return this;
}

uint64_t re::ContactDeformer::allocateBuffers(re *a1, unint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  char v6 = a4;
  unint64_t v8 = a2;
  uint64_t v129 = *MEMORY[0x263EF8340];
  unint64_t v9 = *a4;
  unint64_t v10 = *(void *)(*a4 + 48);
  uint64_t v11 = *(void *)(a2 + 24);
  re::globalAllocators(a1);
  uint64_t v95 = v11;
  uint64_t v13 = (char **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 24, 8);
  uint64_t v14 = *(char **)(v8 + 24);
  v13[1] = (char *)v10;
  void v13[2] = 0;
  void *v13 = v14;
  if (v10)
  {
    if (v10 >= 0x276276276276277)
    {
LABEL_68:
      re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 104, v10);
      _os_crash();
      __break(1u);
      goto LABEL_69;
    }
    size_t v5 = 104 * v10;
    uint64_t v14 = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(void *)v14 + 32))(v14, 104 * v10, 8);
    void v13[2] = v14;
    if (!v14)
    {
LABEL_69:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_70:
      re::internal::assertLog((re::internal *)5, v71, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 267, v75);
      _os_crash();
      __break(1u);
    }
    uint64_t v16 = v14;
    if (v10 != 1)
    {
      v5 -= 104;
      bzero(v14, v5);
      v16 += v5;
    }
    *((void *)v16 + 12) = 0;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
  }
  *((void *)&v125 + 1) = re::globalAllocators((re *)v14)[2];
  *(void *)&long long v126 = &v124;
  *(void *)&long long v124 = &unk_26E70EFC0;
  uint64_t v89 = (*(uint64_t (**)(uint64_t, char **, long long *))(*(void *)v95 + 16))(v95, v13, &v124);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v124);
  if (v10)
  {
    unint64_t v17 = 0;
    uint64_t v87 = v9 + 8;
    unsigned int v86 = a3;
    unint64_t v84 = v10;
    uint64_t v85 = v6;
    uint64_t v100 = (re::FrameContext *)v8;
    while (1)
    {
      uint64_t v18 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v87, v17);
      unint64_t v20 = *(void *)(v18 + 8);
      unint64_t v21 = v6[6];
      if (v21 <= v20) {
        goto LABEL_59;
      }
      uint64_t v22 = v18;
      size_t v96 = v17;
      size_t v5 = v6[5];
      uint64_t v23 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v20);
      uint64_t v24 = *(void **)(*(void *)(v23 + 344) + 600);
      unint64_t v17 = *(unsigned __int16 *)(v23 + 392);
      unint64_t v9 = v24[7];
      if (v9 <= v17) {
        goto LABEL_60;
      }
      uint64_t v25 = v23;
      unint64_t v17 = *(unsigned __int16 *)(v24[8] + 2 * v17);
      uint64_t v26 = re::DataArray<re::MeshModel>::get(*((void *)a1 + 1) + 8, *(void *)(*(void *)(v23 + 368) + 16));
      unint64_t v8 = *(unsigned __int16 *)(v25 + 392);
      unint64_t v9 = *(void *)(v26 + 56);
      if (v9 <= v8) {
        goto LABEL_61;
      }
      uint64_t v91 = v22;
      uint64_t v109 = *(void *)(v26 + 64);
      unint64_t v10 = 1;
      LOBYTE(v124) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v5 + 312 * v20, 1u);
      id v27 = (void *)(v5 + 312 * v20);
      uint64_t v28 = v25;
      unint64_t v29 = *(unsigned int *)(v27[8]
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27 + 7, (unsigned __int8 *)&v124)+ 20);
      LOBYTE(v124) = 1;
      uint64_t v93 = (uint64_t)v27;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v27, 1u);
      unsigned int v31 = *(unsigned __int16 *)(v27[16]
                                + 20
                                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27 + 15, (unsigned __int8 *)&v124)+ 4);
      uint64_t v90 = v28;
      uint64_t v32 = *(void *)(*(void *)(v28 + 352) + 144);
      if (v32)
      {
        unint64_t v98 = (char *)objc_msgSend(*(id *)v32, sel_contents) + *(unsigned int *)(v32 + 8);
        unint64_t v97 = (unint64_t)*(unsigned int *)(v32 + 12) >> 6;
      }
      else
      {
        unint64_t v97 = 0;
        unint64_t v98 = 0;
      }
      unint64_t v9 = v96;
      size_t v5 = v24[4];
      if (v5 <= v17) {
        goto LABEL_62;
      }
      size_t v5 = *(void *)(v89 + 8);
      if (v5 <= v96) {
        goto LABEL_63;
      }
      unint64_t v33 = *(void *)(v24[5] + 24 * v17 + 8);
      uint64_t v34 = *(void *)(v89 + 16);
      unint64_t v9 = v34 + 104 * v96;
      *(void *)(v9 + 96) = v33;
      *(void *)unint64_t v9 = v95;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v33;
      unint64_t v101 = v33;
      if (v33)
      {
        if (v33 >= 0xAAAAAAAAAAAAAABLL) {
          goto LABEL_65;
        }
        unint64_t v10 = v29;
        uint64_t v35 = 24 * v33;
        unint64_t v36 = v33;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v95 + 32))(v95, 24 * v33, 8);
        *(void *)(v9 + 16) = v37;
        if (!v37) {
          goto LABEL_66;
        }
        long long v39 = v37;
        if (v36 == 1)
        {
          unint64_t v33 = 1;
        }
        else
        {
          size_t v40 = v35 - 24;
          bzero(v37, v40);
          unint64_t v33 = v101;
          long long v39 = (void *)((char *)v39 + v40);
        }
        LODWORD(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v10;
        void *v39 = 0;
        v39[1] = 0;
        void v39[2] = 0;
      }
      uint64_t v41 = (re::AttributeTable *)(v109 + 560 * v8);
      uint64_t v99 = v29 / v31;
      uint64_t v92 = 12 * v99;
      re::FixedArray<NS::SharedPtr<MTL::Texture>>::init<>((uint64_t *)(v34 + 104 * v96 + 72), v95, v33);
      uint64_t v42 = v41;
      do
      {
        uint64_t v43 = v42;
        uint64_t v42 = (re::AttributeTable *)*((void *)v42 + 1);
      }
      while (v42 && !*((void *)v43 + 9));
      size_t v5 = v24[1];
      if (v5 <= v17) {
        goto LABEL_64;
      }
      *(void *)&long long v124 = *(void *)(v24[2] + 16 * v17) >> 1;
      uint64_t v44 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v43 + 6, &v124);
      int v45 = v44 == -1 ? 0 : (unsigned __int8 *)(*((void *)v43 + 7) + 16 * v44 + 8);
      size_t v5 = 4 * v99;
      re::FrameContext::perFrameAlloc(v100, 4 * v99, 4uLL, (uint64_t)&v124);
      uint64_t v46 = v124;
      uint64_t v48 = DWORD2(v124);
      unsigned int v47 = HIDWORD(v124);
      uint64_t v49 = v125;
      size_t v50 = v34 + 104 * v96;
      *(void *)(v50 + 24) = v124;
      *(_DWORD *)(v50 + 32) = v48;
      *(_DWORD *)(v50 + 36) = v47;
      *(void *)(v50 + 40) = v49;
      uint64_t v94 = v34;
      if (v45)
      {
        uint64_t v51 = re::AttributeTable::buffers(v41);
        unint64_t v53 = *v45;
        if (v52 <= v53) {
          goto LABEL_67;
        }
        memcpy((void *)(v46 + v48), (char *)objc_msgSend(*(id *)(v51 + 16 * v53), sel_contents) + *(unsigned int *)(v51 + 16 * v53 + 8), v5);
      }
      else if (v47 >= 4)
      {
        bzero((void *)(v46 + v48), v47 & 0xFFFFFFFC);
      }
      if (v101) {
        break;
      }
LABEL_47:
      unint64_t v8 = (unint64_t)v100;
      re::FrameContext::perFrameAlloc(v100, v92, 4uLL, (uint64_t)&v124);
      uint64_t v72 = v125;
      uint64_t v73 = (void *)(v94 + 104 * v96);
      uint64_t v74 = *((void *)&v124 + 1);
      v73[6] = v124;
      v73[7] = v74;
      v73[8] = v72;
      unsigned int v75 = v86;
      if (v86)
      {
        unint64_t v10 = v84;
        char v6 = v85;
        if (v86 != 1) {
          goto LABEL_70;
        }
        float32x4_t v76 = *(void **)(v90 + 360);
        uint64_t v77 = v85[2];
        size_t v5 = 257;
        __int16 v112 = 257;
        unint64_t v9 = 65548;
        int v111 = 65548;
        char v114 = 30;
        int v113 = 0;
        unsigned int v78 = re::DeformationBufferAllocator::alloc(v76, v77, 1, (uint64_t)&v111, *(unsigned __int8 *)(v91 + 16), v92);
        uint64_t v79 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v90 + 360), *(unsigned __int8 *)(v91 + 16), v78);
        LOWORD(v11re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 257;
        int v116 = 65548;
        LOBYTE(v11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 30;
        HIDWORD(v11re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
        id v80 = objc_msgSend(*(id *)(v79 + 24), sel_contents);
        uint64_t v81 = *(void *)(v79 + 24);
        *(void *)&long long v124 = v80;
        *((void *)&v124 + 1) = *(void *)(v79 + 32);
        *(void *)&long long v125 = v81;
        re::DeformationVertexBufferState::setOutputBuffer(v93, 1u, 1, (uint64_t)&v124, (uint64_t)&v116);
      }
      else
      {
        re::FrameContext::perFrameAlloc(v100, v92, 0x10uLL, (uint64_t)&v124);
        LOWORD(v11re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 257;
        int v116 = 65548;
        LOBYTE(v11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 30;
        HIDWORD(v11re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
        re::DeformationVertexBufferState::setOutputBuffer(v93, 1u, 0, (uint64_t)&v124, (uint64_t)&v116);
        unint64_t v10 = v84;
        char v6 = v85;
      }
      unint64_t v17 = v96 + 1;
      if (v96 + 1 == v10) {
        goto LABEL_52;
      }
    }
    unint64_t v8 = 0;
    uint64_t v54 = 0;
    unint64_t v10 = 0;
    size_t v5 = 0;
    size_t v55 = v34 + 104 * v96;
    float32x4_t v56 = (size_t *)(v55 + 80);
    int8x16_t v57 = (void *)(v55 + 88);
    while (1)
    {
      unint64_t v58 = v24[4];
      if (v58 <= v17) {
        break;
      }
      uint64_t v59 = v24[5];
      unint64_t v58 = *(void *)(v59 + 24 * v17 + 8);
      if (v58 <= v5) {
        goto LABEL_54;
      }
      float v60 = (unsigned int *)(*(void *)(v59 + 24 * v17 + 16) + v10);
      unint64_t v61 = *v60;
      float v62 = (simd_float4x4 *)&v98[64 * v61];
      BOOL v63 = v97 > v61;
      float v64 = (simd_float4x4 *)MEMORY[0x263EF89A8];
      if (v63) {
        float v64 = v62;
      }
      simd_float4x4 v130 = *v64;
      simd_float4 v108 = v130.columns[1];
      simd_float4 v110 = v64->columns[0];
      simd_float4 v106 = v130.columns[3];
      simd_float4 v107 = v130.columns[2];
      unsigned int v65 = v60[1];
      simd_float4x4 v131 = __invert_f4(*v64);
      simd_float4 v104 = v131.columns[1];
      simd_float4 v105 = v131.columns[0];
      simd_float4 v102 = v131.columns[3];
      simd_float4 v103 = v131.columns[2];
      re::FrameContext::perFrameAlloc(v100, 0xA0uLL, 0x10uLL, (uint64_t)&v124);
      long long v66 = v124;
      uint64_t v67 = v125;
      char v68 = (simd_float4 *)(v124 + DWORD2(v124));
      v68->i32[0] = v65;
      v68[1] = v110;
      void v68[2] = v108;
      v68[3] = v107;
      v68[4] = v106;
      v68[5] = v105;
      v68[6] = v104;
      v68[7] = v103;
      v68[8] = v102;
      v68[9].i32[0] = v99;
      unint64_t v58 = *(void *)(v9 + 8);
      if (v58 <= v5) {
        goto LABEL_55;
      }
      unint64_t v69 = *(void *)(v9 + 16) + v8;
      *(_OWORD *)unint64_t v69 = v66;
      *(void *)(v69 + 16) = v67;
      unint64_t v58 = v24[4];
      if (v58 <= v17) {
        goto LABEL_56;
      }
      uint64_t v70 = v24[5];
      unint64_t v58 = *(void *)(v70 + 24 * v17 + 8);
      if (v58 <= v5) {
        goto LABEL_57;
      }
      unint64_t v58 = *v56;
      if (*v56 <= v5) {
        goto LABEL_58;
      }
      NS::SharedPtr<MTL::Texture>::operator=((void **)(*v57 + v54), (void **)(*(void *)(v70 + 24 * v17 + 16) + v10 + 8));
      ++v5;
      v10 += 16;
      v54 += 8;
      v8 += 24;
      if (v101 == v5) {
        goto LABEL_47;
      }
    }
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v17;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v5;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 468;
    __int16 v120 = 2048;
    unint64_t v121 = v5;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v17;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v5;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_58:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    unint64_t v20 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 468;
    __int16 v120 = 2048;
    unint64_t v121 = v5;
    __int16 v122 = 2048;
    unint64_t v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v20, v21);
    _os_crash();
    __break(1u);
LABEL_60:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v17;
    __int16 v122 = 2048;
    unint64_t v123 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v8;
    __int16 v122 = 2048;
    unint64_t v123 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v17;
    __int16 v122 = 2048;
    unint64_t v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 468;
    __int16 v120 = 2048;
    unint64_t v121 = v9;
    __int16 v122 = 2048;
    unint64_t v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    uint64_t v115 = 0;
    long long v128 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    unint64_t v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 476;
    __int16 v120 = 2048;
    unint64_t v121 = v17;
    __int16 v122 = 2048;
    unint64_t v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 24, v33);
    _os_crash();
    __break(1u);
LABEL_66:
    re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_67:
    re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v53, v52);
    _os_crash();
    __break(1u);
    goto LABEL_68;
  }
LABEL_52:
  *(void *)a5 |= 2uLL;
  *(unsigned char *)(a5 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 1;
  return v89;
}

void re::FixedArray<NS::SharedPtr<MTL::Texture>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  char v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    unint64_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  void *v8 = 0;
}

uint64_t re::ContactDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, void *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Contact");
  uint64_t v32 = *(void *)(*a4 + 48);
  if (v32)
  {
    unint64_t v8 = 0;
    uint64_t v30 = a4;
    uint64_t v31 = *a4 + 8;
    uint64_t v29 = a2;
    while (1)
    {
      uint64_t v9 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v31, v8);
      unint64_t v11 = *(void *)(a2 + 8);
      if (v11 <= v8) {
        goto LABEL_27;
      }
      unint64_t v4 = *(void *)(v9 + 8);
      unint64_t v12 = a4[6];
      if (v12 <= v4) {
        goto LABEL_28;
      }
      uint64_t v13 = *(void *)(a2 + 16);
      unint64_t v14 = a4[5];
      uint64_t v15 = (void *)(v14 + 312 * v4);
      LOBYTE(v48[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
      uint64_t v35 = v15 + 7;
      uint64_t v34 = v15 + 8;
      unsigned int v16 = *(_DWORD *)(v15[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 7, (unsigned __int8 *)v48)+ 20);
      LOBYTE(v48[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
      uint64_t v38 = (uint64_t)v15;
      uint64_t v17 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 15, (unsigned __int8 *)v48);
      unint64_t v33 = v8;
      uint64_t v44 = (unint64_t *)(v13 + 104 * v8 + 96);
      if (*v44) {
        break;
      }
LABEL_22:
      unint64_t v8 = v33 + 1;
      a2 = v29;
      a4 = v30;
      if (v33 + 1 == v32) {
        return [*this popDebugGroup];
      }
    }
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v43 = v13 + 104 * v8;
    uint64_t v41 = (void *)(v43 + 88);
    uint64_t v42 = (unint64_t *)(v43 + 80);
    unsigned int v40 = v16 / *(unsigned __int16 *)(*(void *)(v38 + 128) + 20 * v17 + 4) - 1;
    unint64_t v20 = v14 + 312 * v4;
    unint64_t v36 = (void *)(v20 + 192);
    uint64_t v37 = (void *)(v20 + 184);
    while (1)
    {
      unint64_t v4 = *v42;
      if (*v42 <= v19) {
        break;
      }
      unint64_t v8 = *(void *)(*v41 + 8 * v19);
      if (v8) {
        uint64_t v21 = 16;
      }
      else {
        uint64_t v21 = 24;
      }
      unsigned int v22 = objc_msgSend(*(id *)(a1 + v21), sel_maxTotalThreadsPerThreadgroup);
      [*this setComputePipelineState:*(void *)(a1 + v21)];
      if (v19)
      {
        uint64_t v23 = *(void *)(v43 + 64);
        uint64_t v24 = (unsigned int *)(v43 + 56);
      }
      else
      {
        unint64_t v4 = 1;
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        uint64_t v23 = *(void *)(*v34
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v35, (unsigned __int8 *)v48)+ 24);
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        uint64_t v24 = (unsigned int *)(*v34
                             + 32
                             * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v35, (unsigned __int8 *)v48)+ 16);
      }
      [*this setBuffer:v23 offset:*v24 atIndex:1];
      if (v19 == *v44 - 1)
      {
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        unint64_t v4 = (unint64_t)v37;
        uint64_t v25 = *(void *)(*v36
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37, (unsigned __int8 *)v48)+ 24);
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        uint64_t v26 = (unsigned int *)(*v36
                             + 32
                             * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37, (unsigned __int8 *)v48)+ 16);
      }
      else
      {
        uint64_t v25 = *(void *)(v43 + 64);
        uint64_t v26 = (unsigned int *)(v43 + 56);
      }
      [*this setBuffer:v25 offset:*v26 atIndex:0];
      [*this setBuffer:*(void *)(v43 + 40) offset:*(unsigned int *)(v43 + 32) atIndex:2];
      unint64_t v14 = *(void *)(v43 + 8);
      if (v14 <= v19) {
        goto LABEL_25;
      }
      [*this setBuffer:*(void *)(*(void *)(v43 + 16) + v18 + 16) offset:*(unsigned int *)(*(void *)(v43 + 16) + v18 + 8) atIndex:3];
      if (v8)
      {
        unint64_t v4 = *v42;
        if (*v42 <= v19) {
          goto LABEL_26;
        }
        [*this setTexture:*(void *)(*v41 + 8 * v19) atIndex:0];
      }
      id v27 = *this;
      *(void *)&v48[0] = (v40 + v22) / v22;
      *(int64x2_t *)((char *)v48 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vdupq_n_s64(1uLL);
      *(void *)int v45 = v22;
      *(_OWORD *)&v45[8] = *(_OWORD *)((char *)v48 + 8);
      [v27 dispatchThreadgroups:v48 threadsPerThreadgroup:v45];
      ++v19;
      v18 += 24;
      if (v19 >= *v44) {
        goto LABEL_22;
      }
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(void *)&v45[20] = v19;
    __int16 v46 = 2048;
    unint64_t v47 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(void *)&v45[20] = v19;
    __int16 v46 = 2048;
    unint64_t v47 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    memset(v48, 0, sizeof(v48));
    unint64_t v11 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(void *)&v45[20] = v19;
    __int16 v46 = 2048;
    unint64_t v47 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 468;
    *(_WORD *)&v45[18] = 2048;
    *(void *)&v45[20] = v8;
    __int16 v46 = 2048;
    unint64_t v47 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 666, v4, v12);
    _os_crash();
    __break(1u);
  }
  return [*this popDebugGroup];
}

void re::ContactDeformer::deformCPU(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*a3 + 48);
  if (v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a3 + 8;
    while (1)
    {
      uint64_t v8 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v7, v6);
      if (*(void *)(a2 + 8) <= v6) {
        goto LABEL_18;
      }
      unint64_t v10 = *(void *)(v8 + 8);
      unint64_t v11 = a3[6];
      if (v11 <= v10) {
        goto LABEL_19;
      }
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = a3[5] + 312 * v10;
      LOBYTE(v40) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v13, 1u);
      uint64_t v14 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v13 + 184), (unsigned __int8 *)&v40);
      uint64_t v16 = v12 + 104 * v6;
      uint64_t v17 = *(void *)(v16 + 96);
      if (v17) {
        break;
      }
LABEL_14:
      if (++v6 == v3) {
        return;
      }
    }
    uint64_t v18 = 0;
    uint64_t v19 = v12 + 104 * v6;
    uint64_t v20 = *(void *)(v13 + 192) + 32 * v14;
    uint64_t v21 = (float *)(*(void *)(v16 + 24) + *(unsigned int *)(v16 + 32));
    unint64_t v22 = *(unsigned int *)(v20 + 20) / 0xCuLL;
    uint64_t v23 = *(void *)(v19 + 8);
    uint64_t v24 = *(void *)(v20 + 8) + *(unsigned int *)(v20 + 16) + 8;
    while (1)
    {
      if (v18 == v23) {
        goto LABEL_17;
      }
      uint64_t v25 = (float32x4_t *)(*(void *)(*(void *)(v19 + 16) + 24 * v18)
                          + *(unsigned int *)(*(void *)(v19 + 16) + 24 * v18 + 8));
      uint64_t v26 = v25[9].u32[0];
      id v27 = v21;
      unint64_t v28 = v22;
      uint64_t v29 = (float *)v24;
      if (v26) {
        break;
      }
LABEL_13:
      if (++v18 == v17) {
        goto LABEL_14;
      }
    }
    while (v28)
    {
      float32x4_t v30 = vaddq_f32(v25[8], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25[5], *(v29 - 2)), v25[6], *(v29 - 1)), v25[7], *v29));
      float32x4_t v31 = vmulq_f32(v30, v30);
      v31.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).u32[0];
      float v32 = sqrtf(v31.f32[0]);
      float32x2_t v33 = vrsqrte_f32((float32x2_t)v31.u32[0]);
      float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33)));
      float32x4_t v35 = vmulq_n_f32(v30, vmul_f32(v34, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v34, v34))).f32[0]);
      float v36 = *v27++;
      float v37 = (float)(v25->f32[0] + v36) - v32;
      if (v37 < 0.0) {
        float v37 = 0.0;
      }
      float32x4_t v38 = vaddq_f32(v30, vmulq_n_f32(v35, v37));
      float32x4_t v39 = vaddq_f32(v25[4], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25[1], v38.f32[0]), v25[2], *(float32x2_t *)v38.f32, 1), v25[3], v38, 2));
      *((void *)v29 - 1) = v39.i64[0];
      float *v29 = v39.f32[2];
      v29 += 3;
      --v28;
      if (!--v26) {
        goto LABEL_13;
      }
    }
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 658, v22, v22);
    _os_crash();
    __break(1u);
LABEL_17:
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 666, v10, v11);
    _os_crash();
    __break(1u);
  }
}

void re::ContactDeformerModelUtil::heightMapForTarget(re::ContactDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *((void *)this + 75);
  if (v5)
  {
    if (*(void *)(v5 + 32) > (unint64_t)a2)
    {
      uint64_t v6 = *(void *)(v5 + 40);
      if (*(void *)(v6 + 24 * a2 + 8) > a3)
      {
        id v7 = *(id *)(*(void *)(v6 + 24 * a2 + 16) + 16 * a3 + 8);
        if (v7)
        {
          uint64_t v8 = v7;
          if ((objc_msgSend(v7, sel_width) == (id)360 || objc_msgSend(v8, sel_height) == (id)180)
            && objc_msgSend(v8, sel_pixelFormat) == (id)10)
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            long long v29 = 0uLL;
            *(void *)&v30[0] = 0;
            *(_OWORD *)((char *)v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_2343AE830;
            *((void *)&v30[1] + 1) = 1;
            objc_msgSend(v8, sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_, v19, 360, &v29, 0);
            uint64_t v11 = 0;
            uint64_t v13 = v18;
            uint64_t v12 = v19;
            uint64_t v15 = a4[1];
            uint64_t v14 = a4[2];
            v16.n128_u32[0] = 998277249;
            do
            {
              if (v13 == v11)
              {
                uint64_t v20 = 0;
                long long v31 = 0u;
                long long v32 = 0u;
                memset(v30, 0, sizeof(v30));
                long long v29 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v21 = 136315906;
                unint64_t v22 = "operator[]";
                __int16 v23 = 1024;
                int v24 = 468;
                __int16 v25 = 2048;
                uint64_t v26 = v13;
                __int16 v27 = 2048;
                uint64_t v28 = v13;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_17:
                uint64_t v20 = 0;
                long long v31 = 0u;
                long long v32 = 0u;
                memset(v30, 0, sizeof(v30));
                long long v29 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v21 = 136315906;
                unint64_t v22 = "operator[]";
                __int16 v23 = 1024;
                int v24 = 468;
                __int16 v25 = 2048;
                uint64_t v26 = v15;
                __int16 v27 = 2048;
                uint64_t v28 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              if (v15 == v11) {
                goto LABEL_17;
              }
              LOBYTE(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(unsigned char *)(v12 + v11);
              float v10 = (float)LODWORD(v10) * 0.0039216;
              *(float *)(v14 + 4 * v11++) = v10;
            }
            while (v11 != 64800);
            if (v17) {
              (*(void (**)(uint64_t, __n128))(*(void *)v17 + 40))(v17, v16);
            }
          }
        }
      }
    }
  }
}

re::StringID *re::ContactDeformerModelUtil::offsetBufferName@<X0>(re::ContactDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 75);
  if (v3 && *(void *)(v3 + 8) > (unint64_t)a2) {
    return re::StringID::StringID(a3, (const StringID *)(*(void *)(v3 + 16) + 16 * a2));
  }
  else {
    return re::StringID::invalid(a3);
  }
}

size_t re::ContactDeformerModelUtil::computeContactModelSizeExcludingMetalBuffers(re::ContactDeformerModelUtil *this, const DeformationModelData *a2)
{
  uint64_t v2 = *((void *)this + 75);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = 16 * v3 + 88;
  if (v3)
  {
    uint64_t v5 = (const char **)(*(void *)(v2 + 16) + 8);
    do
    {
      if (*(unsigned char *)(v5 - 1)) {
        size_t v6 = strlen(*v5) + 1;
      }
      else {
        size_t v6 = 0;
      }
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = v4 + 24 * v7;
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v2 + 40) + 8);
    do
    {
      uint64_t v10 = *v9;
      v9 += 3;
      v8 += 16 * v10;
      --v7;
    }
    while (v7);
  }
  uint64_t v11 = v8 + 2 * *(void *)(v2 + 56);
  if (*(unsigned char *)(v2 + 72)) {
    size_t v12 = strlen(*(const char **)(v2 + 80)) + 1;
  }
  else {
    size_t v12 = 0;
  }
  return v11 + v12;
}

void re::ContactDeformer::~ContactDeformer(re::ContactDeformer *this)
{
  for (uint64_t i = 24; i != 8; i -= 8)
  {
    uint64_t v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(void *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = 24;
  while (1)
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 8)
    {
      JUMPOUT(0x237DBCBD0);
    }
  }
}

void re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (**a2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = 104 * v3;
      uint64_t v5 = (void *)(v2[2] + 72);
      do
      {
        re::FixedArray<NS::SharedPtr<NS::String>>::deinit(v5);
        uint64_t v6 = *(v5 - 9);
        if (v6)
        {
          if (*(v5 - 8))
          {
            (*(void (**)(uint64_t, void))(*(void *)v6 + 40))(v6, *(v5 - 7));
            *(v5 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
            *(v5 - re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
          }
          *(v5 - re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
        }
        v5 += 13;
        v4 -= 104;
      }
      while (v4);
      (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, v2[2]);
      v2[1] = 0;
      void v2[2] = 0;
    }
    *uint64_t v2 = 0;
  }
}

void *re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E70EFC0;
  return result;
}

void *re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E70EFC0;
  return result;
}

uint64_t re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(void *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(void *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26E70F018;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E70F018;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    re::StringID::destroyString((re::StringID *)(v2 + 72));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v2 + 48));
    if (*(void *)(v2 + 24))
    {
      uint64_t v4 = *(void *)(v2 + 32);
      if (v4)
      {
        uint64_t v5 = *(void **)(v2 + 40);
        uint64_t v6 = &v5[3 * v4];
        do
        {
          if (*v5)
          {
            uint64_t v7 = v5[1];
            if (v7)
            {
              uint64_t v8 = 16 * v7;
              uint64_t v9 = (id *)(v5[2] + 8);
              do
              {
                if (*v9)
                {

                  id *v9 = 0;
                }
                v9 += 2;
                v8 -= 16;
              }
              while (v8);
              (*(void (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[2]);
              v5[1] = 0;
              float32x4_t v5[2] = 0;
            }
            void *v5 = 0;
          }
          v5 += 3;
        }
        while (v5 != v6);
        (*(void (**)(void, void))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), *(void *)(v2 + 40));
        *(void *)(v2 + 32) = 0;
        *(void *)(v2 + 40) = 0;
      }
      *(void *)(v2 + 24) = 0;
    }
    re::FixedArray<re::StringID>::deinit((void *)v2);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return v10(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void *)>::operator=[abi:nn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

re::RenderGraphResourceDescriptions *re::RenderGraphResourceDescriptions::RenderGraphResourceDescriptions(re::RenderGraphResourceDescriptions *this)
{
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)((char *)this + 204) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 60) = 0;
  *((void *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((void *)this + 2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  uint64_t v2 = re::globalAllocators(this);
  uint64_t v3 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 136, 8);
  uint64_t v4 = re::Allocator::Allocator(v3, "RenderGraphResourceDescriptions", 1);
  *(void *)uint64_t v4 = &unk_26E70F0E8;
  *(_OWORD *)((char *)v4 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v4 + 104) = 0u;
  *((_DWORD *)v4 + 30) = 0;
  *(_OWORD *)((char *)v4 + 24) = 0u;
  *(_OWORD *)((char *)v4 + 40) = 0u;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  *(_OWORD *)((char *)v4 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)((char *)v4 + 124) = 0x7FFFFFFFLL;
  *(void *)this = v4;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = 1024;
  *((void *)v3 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v3 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  return this;
}

void re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions(re::RenderGraphResourceDescriptions *this)
{
}

re::GrowableLinearAllocator *re::RenderGraphResourceDescriptions::deinit(re::RenderGraphResourceDescriptions *this)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256);
  double result = *(re::GrowableLinearAllocator **)this;
  if (*(void *)this)
  {
    re::GrowableLinearAllocator::deinit(result);
    double result = re::internal::destroyPersistent<re::GrowableLinearAllocator>((re *)"deinit", 36, *(uint64_t **)this);
    *(void *)this = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResource>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = (re::StringID *)(v3 + 8);
        uint64_t v6 = 48 * v4;
        do
        {
          re::StringID::destroyString(v5);
          uint64_t v5 = (re::StringID *)((char *)v5 + 48);
          v6 -= 48;
        }
        while (v6);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::GrowableLinearAllocator::deinit(re::GrowableLinearAllocator *this)
{
  if (*((void *)this + 6))
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2)
    {
      do
      {
        uint64_t v3 = *(void *)(v2 + 8);
        (*(void (**)(void))(**((void **)this + 7) + 40))(*((void *)this + 7));
        uint64_t v2 = v3;
      }
      while (v3);
    }
    *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    double result = 0.0;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  return result;
}

re *re::internal::destroyPersistent<re::GrowableLinearAllocator>(re *result, uint64_t a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::GrowableLinearAllocator::deinit((re::GrowableLinearAllocator *)a3);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(a3 + 11);
    re::Allocator::~Allocator((re::Allocator *)a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::RenderGraphResourceDescriptions::swap(re::RenderGraphResourceDescriptions *this, re::RenderGraphResourceDescriptions *a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (char *)a2 + 8;
  *(void *)this = *(void *)a2;
  *(void *)a2 = v4;
  uint64_t v6 = (char *)a2 + 48;
  uint64_t v8 = *((void *)this + 1);
  int v7 = (void *)((char *)this + 8);
  *(void *)size_t v12 = v8;
  *int v7 = 0;
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 1);
  *((_OWORD *)this + 1) = 0u;
  *((void *)&v13 + 1) = *((void *)this + 5);
  *((void *)this + 5) = 0;
  ++*((_DWORD *)this + 8);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v7, (uint64_t)a2 + 8);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v5, (uint64_t)v12);
  re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)v12);
  *(void *)size_t v12 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)&v13 + 1) = *((void *)this + 10);
  *((void *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
  ++*((_DWORD *)this + 18);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 48, (uint64_t)v6);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v6, (uint64_t)v12);
  if (*(void *)v12 && *((void *)&v13 + 1)) {
    (*(void (**)(void))(**(void **)v12 + 40))();
  }
  *(void *)size_t v12 = *((void *)this + 11);
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 6);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *((void *)&v13 + 1) = *((void *)this + 15);
  *((void *)this + 15) = 0;
  ++*((_DWORD *)this + 28);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 88, (uint64_t)a2 + 88);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 88, (uint64_t)v12);
  if (*(void *)v12 && *((void *)&v13 + 1)) {
    (*(void (**)(void))(**(void **)v12 + 40))();
  }
  *(void *)size_t v12 = *((void *)this + 16);
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 136);
  *((void *)this + 16) = 0;
  *((void *)this + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *((void *)this + 1re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *((void *)&v13 + 1) = *((void *)this + 20);
  *((void *)this + 20) = 0;
  ++*((_DWORD *)this + 38);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 128, (uint64_t)a2 + 128);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 128, (uint64_t)v12);
  if (*(void *)v12 && *((void *)&v13 + 1)) {
    (*(void (**)(void))(**(void **)v12 + 40))();
  }
  long long v9 = *(_OWORD *)((char *)this + 168);
  int v14 = 0;
  *(_OWORD *)size_t v12 = v9;
  *(_OWORD *)((char *)this + 16re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(void *)&unsigned __int8 v12[16] = *((void *)this + 23);
  *((void *)this + 2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  long long v13 = *((_OWORD *)this + 12);
  *((_OWORD *)this + 12) = xmmword_23436F740;
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)this + 168, (uint64_t *)a2 + 21);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)a2 + 168, (uint64_t *)v12);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v12);
  *(void *)size_t v12 = *((void *)this + 27);
  *((void *)this + 2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 14);
  *((_OWORD *)this + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 0u;
  *((void *)&v13 + 1) = *((void *)this + 31);
  *((void *)this + 31) = 0;
  ++*((_DWORD *)this + 60);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 216, (uint64_t)a2 + 216);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 216, (uint64_t)v12);
  if (*(void *)v12 && *((void *)&v13 + 1)) {
    (*(void (**)(void))(**(void **)v12 + 40))();
  }
  uint64_t v10 = (char *)a2 + 256;
  *(void *)size_t v12 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 264);
  *((void *)this + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)&v13 + 1) = *((void *)this + 36);
  *((void *)this + 36) = 0;
  ++*((_DWORD *)this + 70);
  LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 256, (uint64_t)v10);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v10, (uint64_t)v12);
  uint64_t result = *(void *)v12;
  if (*(void *)v12)
  {
    if (*((void *)&v13 + 1)) {
      return (*(uint64_t (**)(void))(**(void **)v12 + 40))();
    }
  }
  return result;
}

void *re::RenderGraphResourceDescriptions::resolveResourceSources(void *this)
{
  uint64_t v1 = (uint64_t)this;
  unint64_t v2 = this[8];
  unint64_t v3 = this[29];
  if (v3 >= v2)
  {
    if (v3 <= v2) {
      goto LABEL_10;
    }
  }
  else
  {
    if (this[28] < v2)
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(this + 27, v2);
      unint64_t v3 = *(void *)(v1 + 232);
    }
    unint64_t v4 = v2 - v3;
    if (v2 > v3)
    {
      uint64_t v5 = 16 * v3;
      do
      {
        uint64_t v6 = (void *)(*(void *)(v1 + 248) + v5);
        *uint64_t v6 = 0;
        v6[1] = -1;
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  *(void *)(v1 + 232) = v2;
  ++*(_DWORD *)(v1 + 240);
LABEL_10:
  unint64_t v7 = *(void *)(v1 + 104);
  unint64_t v8 = *(void *)(v1 + 272);
  if (v8 >= v7)
  {
    if (v8 <= v7) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*(void *)(v1 + 264) < v7)
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity((void *)(v1 + 256), *(void *)(v1 + 104));
      unint64_t v8 = *(void *)(v1 + 272);
    }
    unint64_t v9 = v7 - v8;
    if (v7 > v8)
    {
      uint64_t v10 = 16 * v8;
      do
      {
        uint64_t v11 = (void *)(*(void *)(v1 + 288) + v10);
        *uint64_t v11 = 0;
        v11[1] = -1;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  *(void *)(v1 + 272) = v7;
  ++*(_DWORD *)(v1 + 280);
  unint64_t v8 = v7;
LABEL_19:
  unint64_t v12 = *(void *)(v1 + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(v1 + 40);
    int v14 = (void *)(v13 + 24);
    uint64_t v15 = *(void *)(v1 + 24);
    while (1)
    {
      int v16 = *((_DWORD *)v14 - 6);
      if (v16 == 1) {
        break;
      }
      if (!v16)
      {
        unint64_t v17 = *v14;
        unint64_t v18 = HIDWORD(*v14);
        if (*(void *)(v1 + 64) <= v18)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_52:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_53:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_54:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_55:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_56:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v19 = (_DWORD *)(*(void *)(v1 + 80) + 112 * v18);
        unint64_t v20 = v19[18];
        if (*v19 != 4 || v20 == -1)
        {
          if (*(void *)(v1 + 232) <= v18) {
            goto LABEL_52;
          }
          unint64_t v22 = *(v14 - 2);
        }
        else
        {
          if (v12 <= v20) {
            goto LABEL_54;
          }
          if (*(void *)(v1 + 232) <= v18) {
            goto LABEL_56;
          }
          uint64_t v27 = v13 + 48 * v20;
          unint64_t v17 = *(void *)(v27 + 24);
          unint64_t v22 = *(void *)(v27 + 8);
        }
        unint64_t v28 = v22 >> 1;
        uint64_t v29 = *(void *)(v1 + 248);
        goto LABEL_47;
      }
LABEL_48:
      v14 += 6;
      if (!--v15) {
        return this;
      }
    }
    unint64_t v17 = *v14;
    unint64_t v18 = HIDWORD(*v14);
    if (*(void *)(v1 + 104) <= v18) {
      goto LABEL_51;
    }
    __int16 v23 = (_DWORD *)(*(void *)(v1 + 120) + 48 * v18);
    unint64_t v24 = v23[7];
    if (*v23 != 4 || v24 == -1)
    {
      if (v8 <= v18) {
        goto LABEL_53;
      }
      unint64_t v26 = *(v14 - 2);
    }
    else
    {
      if (v12 <= v24) {
        goto LABEL_55;
      }
      if (v8 <= v18) {
        goto LABEL_57;
      }
      uint64_t v30 = v13 + 48 * v24;
      unint64_t v17 = *(void *)(v30 + 24);
      unint64_t v26 = *(void *)(v30 + 8);
    }
    unint64_t v28 = v26 >> 1;
    uint64_t v29 = *(void *)(v1 + 288);
LABEL_47:
    long long v31 = (unint64_t *)(v29 + 16 * v18);
    unint64_t *v31 = v28;
    v31[1] = v17;
    goto LABEL_48;
  }
  return this;
}

uint64_t re::DynamicArray<re::RenderGraphTargetDescription>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::DynamicArray<re::RenderGraphBufferDescription>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

void re::RenderGraphResourceDescriptions::addTarget(re::GrowableLinearAllocator **this@<X0>, const re::RenderGraphTargetDescription *a2@<X1>, const char *__s@<X2>, void *a4@<X8>)
{
  memset(&v21[2], 255, 24);
  int v20 = 0;
  size_t v8 = strlen(__s);
  unint64_t v9 = (unsigned __int8 *)re::GrowableLinearAllocator::alloc(*this, v8 + 1, 0);
  memcpy(v9, __s, v8);
  v9[v8] = 0;
  uint64_t v10 = (char)*v9;
  if (*v9)
  {
    signed __int8 v11 = v9[1];
    if (v11)
    {
      unint64_t v12 = v9 + 2;
      do
      {
        uint64_t v10 = 31 * v10 + v11;
        int v13 = *v12++;
        signed __int8 v11 = v13;
      }
      while (v13);
    }
  }
  v19[0] = 0;
  v19[1] = "";
  v22[0] = 2 * v10;
  v22[1] = "";
  v21[0] = 2 * v10;
  v21[1] = v9;
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)v19);
  re::DynamicArray<re::RenderGraphResource>::add((_anonymous_namespace_ *)(this + 1), (uint64_t)&v20);
  re::DynamicArray<re::RenderGraphTargetDescription>::add((_anonymous_namespace_ *)(this + 6), (long long *)a2);
  int v14 = this[3];
  int v15 = v14 - 1;
  uint64_t v16 = (uint64_t)this[5] + 48 * (void)v14;
  *(_DWORD *)(v16 - 24) = v15;
  *(_DWORD *)(v16 - 20) = *((_DWORD *)this + 16) - 1;
  if (*((unsigned char *)a2 + 36))
  {
    uint64_t v17 = (uint64_t)this[10] + 112 * (void)this[8];
    *(_DWORD *)(v17 - 48) |= 1u;
  }
  uint64_t v18 = (uint64_t)this[5] + 48 * (void)this[3];
  *a4 = *(void *)(v18 - 40) >> 1;
  a4[1] = *(void *)(v18 - 24);
  re::StringID::destroyString((re::StringID *)v21);
}

__n128 re::DynamicArray<re::RenderGraphResource>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphResource>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
  re::StringID::StringID((re::StringID *)(v5 + 8), (const StringID *)(a2 + 8));
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)(v5 + 40) = *(void *)(a2 + 40);
  *(__n128 *)(v5 + 24) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RenderGraphTargetDescription>::add(_anonymous_namespace_ *this, long long *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphTargetDescription>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 112 * v4;
  long long v6 = *a2;
  long long v7 = a2[2];
  *(_OWORD *)(v5 + 16) = a2[1];
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)uint64_t v5 = v6;
  __n128 result = (__n128)a2[3];
  long long v9 = a2[4];
  long long v10 = a2[6];
  *(_OWORD *)(v5 + 80) = a2[5];
  *(_OWORD *)(v5 + 96) = v10;
  *(__n128 *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = result;
  *(_OWORD *)(v5 + 64) = v9;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderGraphResourceDescriptions::targetDescription(re *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 8);
  unint64_t v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    long long v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      uint64_t v10 = *a2;
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(void *)&long long v24 = v10;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "TargetIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((void *)a1 + 8))
    {
      unint64_t v3 = 0;
      unint64_t v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (re *)re::DynamicArray<re::RenderGraphTargetDescription>::operator[]((uint64_t)a1 + 48, v11);
      int v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphTargetDescription::valuesToString(v12, buf);
        if (buf[8]) {
          int v14 = (uint8_t *)v24;
        }
        else {
          int v14 = &buf[9];
        }
        *(_DWORD *)int v15 = 136315138;
        uint64_t v16 = (const char *)v14;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      ++v11;
      unint64_t v3 = *((void *)a1 + 8);
    }
    while (v3 > v11);
    unint64_t v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4) {
    return *((void *)a1 + 10) + 112 * v4;
  }
LABEL_18:
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long buf = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int v15 = 136315906;
  uint64_t v16 = "operator[]";
  __int16 v17 = 1024;
  int v18 = 789;
  __int16 v19 = 2048;
  unint64_t v20 = v4;
  __int16 v21 = 2048;
  unint64_t v22 = v3;
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 8);
  unint64_t v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    long long v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      uint64_t v10 = *a2;
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(void *)&long long v24 = v10;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "TargetIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((void *)a1 + 8))
    {
      unint64_t v3 = 0;
      unint64_t v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (re *)re::DynamicArray<re::RenderGraphTargetDescription>::operator[]((uint64_t)a1 + 48, v11);
      int v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphTargetDescription::valuesToString(v12, buf);
        if (buf[8]) {
          int v14 = (uint8_t *)v24;
        }
        else {
          int v14 = &buf[9];
        }
        *(_DWORD *)int v15 = 136315138;
        uint64_t v16 = (const char *)v14;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      ++v11;
      unint64_t v3 = *((void *)a1 + 8);
    }
    while (v3 > v11);
    unint64_t v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4) {
    return *((void *)a1 + 10) + 112 * v4;
  }
LABEL_18:
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long buf = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int v15 = 136315906;
  uint64_t v16 = "operator[]";
  __int16 v17 = 1024;
  int v18 = 797;
  __int16 v19 = 2048;
  unint64_t v20 = v4;
  __int16 v21 = 2048;
  unint64_t v22 = v3;
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

double re::RenderGraphResourceDescriptions::targetDescriptionSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (*(void *)(a1 + 232) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 248) + 16 * v3;
  *(void *)a3 = *(void *)v4;
  double result = *(double *)(v4 + 8);
  *(double *)(a3 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = result;
  return result;
}

void re::RenderGraphResourceDescriptions::addBuffer(re::GrowableLinearAllocator **this@<X0>, const re::RenderGraphBufferDescription *a2@<X1>, const char *__s@<X2>, void *a4@<X8>)
{
  memset(&v20[2], 255, 24);
  int v19 = 1;
  size_t v8 = strlen(__s);
  int v9 = (unsigned __int8 *)re::GrowableLinearAllocator::alloc(*this, v8 + 1, 0);
  memcpy(v9, __s, v8);
  v9[v8] = 0;
  uint64_t v10 = (char)*v9;
  if (*v9)
  {
    signed __int8 v11 = v9[1];
    if (v11)
    {
      unint64_t v12 = v9 + 2;
      do
      {
        uint64_t v10 = 31 * v10 + v11;
        int v13 = *v12++;
        signed __int8 v11 = v13;
      }
      while (v13);
    }
  }
  v18[0] = 0;
  v18[1] = "";
  v21[0] = 2 * v10;
  v21[1] = "";
  v20[0] = 2 * v10;
  v20[1] = v9;
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v18);
  re::DynamicArray<re::RenderGraphResource>::add((_anonymous_namespace_ *)(this + 1), (uint64_t)&v19);
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)(this + 11), (uint64_t)a2);
  int v14 = this[3];
  int v15 = v14 - 1;
  uint64_t v16 = (uint64_t)this[5] + 48 * (void)v14;
  *(_DWORD *)(v16 - 24) = v15;
  *(_DWORD *)(v16 - 20) = *((_DWORD *)this + 26) - 1;
  uint64_t v17 = (uint64_t)this[5] + 48 * (void)this[3];
  *a4 = *(void *)(v17 - 40) >> 1;
  a4[1] = *(void *)(v17 - 24);
  re::StringID::destroyString((re::StringID *)v20);
}

uint64_t re::RenderGraphResourceDescriptions::bufferDescription(re *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 13);
  unint64_t v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    long long v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      uint64_t v10 = *a2;
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(void *)&long long v24 = v10;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "BufferIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((void *)a1 + 13))
    {
      unint64_t v3 = 0;
      unint64_t v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (re *)re::DynamicArray<re::RenderGraphBufferDescription>::operator[]((uint64_t)a1 + 88, v11);
      int v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphBufferDescription::valuesToString(v12, buf);
        if (buf[8]) {
          int v14 = (uint8_t *)v24;
        }
        else {
          int v14 = &buf[9];
        }
        *(_DWORD *)int v15 = 136315138;
        uint64_t v16 = (const char *)v14;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      ++v11;
      unint64_t v3 = *((void *)a1 + 13);
    }
    while (v3 > v11);
    unint64_t v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4) {
    return *((void *)a1 + 15) + 48 * v4;
  }
LABEL_18:
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long buf = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int v15 = 136315906;
  uint64_t v16 = "operator[]";
  __int16 v17 = 1024;
  int v18 = 789;
  __int16 v19 = 2048;
  unint64_t v20 = v4;
  __int16 v21 = 2048;
  unint64_t v22 = v3;
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 13);
  unint64_t v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    long long v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      uint64_t v10 = *a2;
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(void *)&long long v24 = v10;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "BufferIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((void *)a1 + 13))
    {
      unint64_t v3 = 0;
      unint64_t v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (re *)re::DynamicArray<re::RenderGraphBufferDescription>::operator[]((uint64_t)a1 + 88, v11);
      int v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphBufferDescription::valuesToString(v12, buf);
        if (buf[8]) {
          int v14 = (uint8_t *)v24;
        }
        else {
          int v14 = &buf[9];
        }
        *(_DWORD *)int v15 = 136315138;
        uint64_t v16 = (const char *)v14;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      ++v11;
      unint64_t v3 = *((void *)a1 + 13);
    }
    while (v3 > v11);
    unint64_t v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4) {
    return *((void *)a1 + 15) + 48 * v4;
  }
LABEL_18:
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long buf = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int v15 = 136315906;
  uint64_t v16 = "operator[]";
  __int16 v17 = 1024;
  int v18 = 797;
  __int16 v19 = 2048;
  unint64_t v20 = v4;
  __int16 v21 = 2048;
  unint64_t v22 = v3;
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

double re::RenderGraphResourceDescriptions::bufferDescriptionSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (*(void *)(a1 + 272) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 288) + 16 * v3;
  *(void *)a3 = *(void *)v4;
  double result = *(double *)(v4 + 8);
  *(double *)(a3 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = result;
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 24;
}

void re::RenderGraphResourceDescriptions::specify(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, _anonymous_namespace_ *a5)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(unsigned int *)(a2 + 12);
  unint64_t v8 = a1[8];
  if (v8 <= v7)
  {
    v62[0] = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    memset(v65, 0, sizeof(v65));
    __n128 v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)BOOL v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(void *)&v63[20] = v7;
    *(_WORD *)&v63[28] = 2048;
    *(void *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v5 = *(unsigned int *)(a3 + 12);
  if (v8 <= v5)
  {
LABEL_93:
    v62[0] = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    memset(v65, 0, sizeof(v65));
    __n128 v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)BOOL v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(void *)&v63[20] = v5;
    *(_WORD *)&v63[28] = 2048;
    *(void *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_94;
  }
  if (a4)
  {
    unint64_t v13 = a1[10];
    int v14 = *(_DWORD *)(v13 + 112 * v7);
    if (v14 != 3 && v14 != *(_DWORD *)(v13 + 112 * v5)) {
      goto LABEL_36;
    }
    int v16 = *(_DWORD *)(v13 + 112 * v7 + 4);
    if (v16)
    {
      int v17 = *(_DWORD *)(v13 + 112 * v5 + 4);
      if (v17 && v16 != v17) {
        goto LABEL_36;
      }
    }
    int v19 = *(_DWORD *)(v13 + 112 * v7 + 12);
    if (v19 != -1)
    {
      int v20 = *(_DWORD *)(v13 + 112 * v5 + 12);
      if (v20 != -1 && v19 != v20) {
        goto LABEL_36;
      }
    }
    int v22 = *(_DWORD *)(v13 + 112 * v7 + 16);
    if (v22 != -1)
    {
      int v23 = *(_DWORD *)(v13 + 112 * v5 + 16);
      if (v23 != -1 && v22 != v23) {
        goto LABEL_36;
      }
    }
    int v25 = *(_DWORD *)(v13 + 112 * v7 + 20);
    if (v25 != -1)
    {
      int v26 = *(_DWORD *)(v13 + 112 * v5 + 20);
      if (v26 != -1 && v25 != v26) {
        goto LABEL_36;
      }
    }
    if ((int v27 = *(_DWORD *)(v13 + 112 * v7 + 24), v27 != -1)
      && (int v28 = *(_DWORD *)(v13 + 112 * v5 + 24), v28 != -1)
      && v27 != v28
      || (uint64_t v29 = *(void *)(v13 + 112 * v7 + 88), v29 != -1)
      && (uint64_t v30 = *(void *)(v13 + 112 * v5 + 88), v30 != -1)
      && v29 != v30
      || (unsigned int v58 = *(_DWORD *)(v13 + 112 * v7 + 8),
          unsigned int v59 = *(_DWORD *)(v13 + 112 * v5 + 8),
          v58 != v59)
      && (v59 | v58) >= 2
      && (v58 > 8 || ((1 << v58) & 0x11C) == 0 || v59 > 8 || ((1 << v59) & 0x11C) == 0)
      && ((v59 - 5) | (v58 - 5)) >= 2)
    {
LABEL_36:
      unint64_t v8 = *(unsigned int *)(a3 + 8);
      uint64_t v6 = (_anonymous_namespace_ *)a1[3];
      if ((unint64_t)v6 <= v8)
      {
LABEL_95:
        v62[0] = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        memset(v65, 0, sizeof(v65));
        __n128 v64 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)BOOL v63 = 136315906;
        *(void *)&v63[4] = "operator[]";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 789;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v8;
        *(_WORD *)&v63[28] = 2048;
        *(void *)&v63[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        v61[0] = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        memset(v65, 0, sizeof(v65));
        __n128 v64 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)BOOL v63 = 136315906;
        *(void *)&v63[4] = "operator[]";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 789;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v8;
        *(_WORD *)&v63[28] = 2048;
        *(void *)&v63[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::StringID::StringID((re::StringID *)v62, (const StringID *)(a1[5] + 48 * v8 + 8));
      unint64_t v8 = *(unsigned int *)(a2 + 8);
      uint64_t v6 = (_anonymous_namespace_ *)a1[3];
      if ((unint64_t)v6 <= v8) {
        goto LABEL_96;
      }
      uint64_t v6 = a5;
      uint64_t v60 = v62[1];
      re::StringID::StringID((re::StringID *)v61, (const StringID *)(a1[5] + 48 * v8 + 8));
      uint64_t v31 = v61[1];
      unint64_t v32 = *a1;
      v65[0] = 0uLL;
      __n128 v64 = (__n128)v32;
      re::DynamicString::setCapacity(&v64, 0x200uLL);
      int v33 = *(_DWORD *)(v13 + 112 * v5 + 4);
      if (v33)
      {
        int v34 = *(_DWORD *)(v13 + 112 * v7 + 4);
        if (v34)
        {
          if (v33 != v34)
          {
            CFStringRef Name = (const char *)MTLPixelFormatGetName();
            float v36 = (const char *)MTLPixelFormatGetName();
            re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %s (current) vs. %s\n", "format", Name, v36);
          }
        }
      }
      if (*(_DWORD *)(v13 + 112 * v5 + 8) != *(_DWORD *)(v13 + 112 * v7 + 8))
      {
        TextureTypeCFStringRef Name = (const char *)re::mtl::getTextureTypeName();
        float32x4_t v38 = (const char *)re::mtl::getTextureTypeName();
        re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %s (current) vs. %s\n", "textureType", TextureTypeName, v38);
      }
      int v39 = *(_DWORD *)(v13 + 112 * v5 + 12);
      if (v39 != -1)
      {
        int v40 = *(_DWORD *)(v13 + 112 * v7 + 12);
        if (v40 != -1 && v39 != v40) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "width", *(_DWORD *)(v13 + 112 * v5 + 12), v40);
        }
      }
      int v41 = *(_DWORD *)(v13 + 112 * v5 + 16);
      if (v41 != -1)
      {
        int v42 = *(_DWORD *)(v13 + 112 * v7 + 16);
        if (v42 != -1 && v41 != v42) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "height", *(_DWORD *)(v13 + 112 * v5 + 16), v42);
        }
      }
      int v43 = *(_DWORD *)(v13 + 112 * v5 + 20);
      if (v43 != -1)
      {
        int v44 = *(_DWORD *)(v13 + 112 * v7 + 20);
        if (v44 != -1 && v43 != v44) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "sampleCount", *(_DWORD *)(v13 + 112 * v5 + 20), v44);
        }
      }
      int v45 = *(_DWORD *)(v13 + 112 * v5 + 24);
      if (v45 != -1)
      {
        int v46 = *(_DWORD *)(v13 + 112 * v7 + 24);
        if (v46 != -1 && v45 != v46) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "arrayLength", *(_DWORD *)(v13 + 112 * v5 + 24), v46);
        }
      }
      int v47 = *(_DWORD *)(v13 + 112 * v5 + 28);
      if (v47 != -1)
      {
        int v48 = *(_DWORD *)(v13 + 112 * v7 + 28);
        if (v48 != -1 && v47 != v48) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "mipLevelCount", *(_DWORD *)(v13 + 112 * v5 + 28), v48);
        }
      }
      int v49 = *(_DWORD *)(v13 + 112 * v5 + 32);
      if (v49 != -1)
      {
        int v50 = *(_DWORD *)(v13 + 112 * v7 + 32);
        if (v50 != -1 && v49 != v50) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "tonemapInPlace", *(_DWORD *)(v13 + 112 * v5 + 32), v50);
        }
      }
      uint64_t v51 = *(void *)(v13 + 112 * v5 + 88);
      if (v51 != -1)
      {
        uint64_t v52 = *(void *)(v13 + 112 * v7 + 88);
        if (v52 != -1 && v51 != v52) {
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %llu (current) vs. %llu\n", "protectionOptions", *(void *)(v13 + 112 * v5 + 88), v52);
        }
      }
      unsigned __int8 v54 = v64.n128_u8[8];
      unint64_t v53 = *(__int8 **)&v65[0];
      if (v64.n128_u64[0] && (v64.n128_u8[8] & 1) != 0) {
        (*(void (**)(void))(*(void *)v64.n128_u64[0] + 40))();
      }
      size_t v55 = &v64.n128_i8[9];
      if (v54) {
        size_t v55 = v53;
      }
      re::DynamicString::format((re::DynamicString *)"Specify called on target (%s) which has already been specified; the following properties fr"
                             "om other target (%s) did not match:\n"
                             "%s",
        (re::DynamicString *)v63,
        v60,
        v31,
        v55);
      v64.n128_u64[0] = 2000;
      v64.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
      *(void *)&v65[0] = *(void *)v63;
      *((void *)&v65[1] + 1) = *(void *)&v63[24];
      *(_OWORD *)((char *)v65 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_OWORD *)&v63[8];
      __n128 v56 = re::DynamicArray<re::DetailedError>::add(a5, &v64);
      if (*(void *)&v65[0])
      {
        if (BYTE8(v65[0])) {
          (*(void (**)(__n128))(**(void **)&v65[0] + 40))(v56);
        }
        memset(v65, 0, sizeof(v65));
      }
      re::StringID::destroyString((re::StringID *)v61);
      re::StringID::destroyString((re::StringID *)v62);
      unint64_t v7 = *(unsigned int *)(a2 + 12);
      unint64_t v8 = a1[8];
    }
  }
  if (v8 <= v7)
  {
LABEL_94:
    v62[0] = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    memset(v65, 0, sizeof(v65));
    __n128 v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)BOOL v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(void *)&v63[20] = v7;
    *(_WORD *)&v63[28] = 2048;
    *(void *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
  int8x16_t v57 = (_DWORD *)(a1[10] + 112 * v7);
  _DWORD *v57 = 4;
  v57[18] = *(_DWORD *)(a3 + 8);
}

re::StringID *re::RenderGraphResourceDescriptions::resourceFromIndex@<X0>(re::StringID *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (*((void *)this + 3) <= (unint64_t)a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = "";
    a3[3] = -1;
    a3[4] = -1;
    a3[5] = -1;
  }
  else
  {
    uint64_t v4 = *((void *)this + 5) + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v4;
    this = re::StringID::StringID((re::StringID *)(a3 + 1), (const StringID *)(v4 + 8));
    long long v5 = *(_OWORD *)(v4 + 24);
    a3[5] = *(void *)(v4 + 40);
    *(_OWORD *)(a3 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v5;
  }
  return this;
}

unint64_t re::GrowableLinearAllocator::alloc(re::GrowableLinearAllocator *this, uint64_t a2, unint64_t a3)
{
  if (a3 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = a3;
  }
  unint64_t v6 = v5 + a2;
  unint64_t v7 = *((void *)this + 4);
  if (v7) {
    unint64_t v7 = **((void **)this + 3) + v7 - *((void *)this + 5);
  }
  if (v7 >= v6)
  {
    unint64_t v9 = (void *)*((void *)this + 5);
  }
  else
  {
    unint64_t v8 = (unint64_t *)*((void *)this + 3);
    if (v8)
    {
      while (1)
      {
        unint64_t v8 = (unint64_t *)v8[1];
        if (!v8) {
          break;
        }
        *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v8;
        if (*v8 >= v6)
        {
          unint64_t v9 = v8 + 2;
          *((void *)this + 4) = v8 + 2;
          goto LABEL_18;
        }
      }
    }
    if (v6 + 16 > *((void *)this + 6))
    {
      unint64_t v10 = (v6 + 15) | ((v6 + 15) >> 1) | (((v6 + 15) | ((v6 + 15) >> 1)) >> 2);
      unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      *((void *)this + 6) = (v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32)) + 1;
    }
    uint64_t v12 = (void *)(*(uint64_t (**)(void))(**((void **)this + 7) + 32))(*((void *)this + 7));
    uint64_t v13 = *((void *)this + 6);
    void *v12 = v13 - 16;
    v12[1] = 0;
    uint64_t v14 = *((void *)this + 3);
    if (v14) {
      int v15 = (void *)(v14 + 8);
    }
    else {
      int v15 = (void *)((char *)this + 64);
    }
    *int v15 = v12;
    unint64_t v9 = v12 + 2;
    *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v12;
    *((void *)this + 4) = v12 + 2;
    *((void *)this + 6) = 2 * v13;
  }
LABEL_18:
  unint64_t result = ((unint64_t)v9 + v5 - 1) & -v5;
  *((void *)this + 5) = result + a2;
  *((void *)this + 9) += a2;
  return result;
}

void re::GrowableLinearAllocator::~GrowableLinearAllocator(re::GrowableLinearAllocator *this)
{
  re::GrowableLinearAllocator::deinit(this);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 11);
  re::Allocator::~Allocator(this);
}

{
  uint64_t vars8;

  re::GrowableLinearAllocator::deinit(this);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 11);
  re::Allocator::~Allocator(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::GrowableLinearAllocator::parent(re::GrowableLinearAllocator *this)
{
  return *((void *)this + 7);
}

uint64_t re::GrowableLinearAllocator::statistics(re::GrowableLinearAllocator *this)
{
  uint64_t result = *((void *)this + 9);
  unint64_t v3 = (uint64_t *)*((void *)this + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v3;
      unint64_t v3 = (uint64_t *)v3[1];
      v4 += v5 + 16;
    }
    while (v3);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *a2;
    if (*(void *)a1) {
      BOOL v6 = v4 == v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      *(void *)a1 = v5;
      *a2 = v4;
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a2[1];
      a2[1] = v7;
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = a2[2];
      a2[2] = v8;
      LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v8;
      LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v8;
      LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v8;
      LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v8;
    }
    else
    {
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      if (v5)
      {
        unsigned int v9 = *((_DWORD *)a2 + 7);
        if (*(_DWORD *)(a1 + 24) < v9) {
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v9);
        }
        unint64_t v10 = *((unsigned int *)a2 + 8);
        if (v10)
        {
          uint64_t v11 = 0;
          for (unint64_t i = 0; i < v10; ++i)
          {
            uint64_t v13 = a2[2] + v11;
            if ((*(_DWORD *)(v13 + 8) & 0x80000000) != 0)
            {
              re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)v13 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v13, (void *)(v13 + 16), (void *)(v13 + 24));
              unint64_t v10 = *((unsigned int *)a2 + 8);
            }
            v11 += 40;
          }
        }
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  return a1;
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 40 * v9;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = -1;
  *(void *)(v14 + 24) = *a5;
  *(void *)(v14 + 32) = a5[1];
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::DynamicArray<re::RenderGraphResource>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphResource>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphResource>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphResource>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphResource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 48 * v9;
        uint64_t v11 = v7 + 1;
        uint64_t v12 = v8 + 8;
        do
        {
          *((_DWORD *)v11 - 2) = *(_DWORD *)(v12 - 8);
          re::StringID::StringID((re::StringID *)v11, (const StringID *)v12);
          long long v13 = *(_OWORD *)(v12 + 16);
          v11[4] = *(void *)(v12 + 32);
          *((_OWORD *)v11 + 1) = v13;
          re::StringID::destroyString((re::StringID *)v12);
          v11 += 6;
          uint64_t v14 = v12 + 40;
          v12 += 48;
        }
        while (v14 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphTargetDescription>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              id v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 112 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::addVFXSceneDrawsToTechniqueBuckets(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 794))
  {
    uint64_t v5 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v6 = "VFX simulation did not run, can't draw VFXScene";
      goto LABEL_12;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 795))
  {
    uint64_t v5 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v6 = "Should not arrive here when VFXScene culled by clipping";
LABEL_12:
      _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, v6, buf, 2u);
      return 0;
    }
    return 0;
  }
  uint64_t v11 = (re *)*(id *)(a1 + 664);
  uint64_t v12 = (void (*)(uint64_t, void *, void *))re::getVFXREForEachDrawCallFct(v11);
  long long v13 = [(re *)v11 transientDrawCall];

  if (!v13)
  {
    id v15 = objc_alloc_init(re::getVFXREDrawCallClass(v14));
    [(re *)v11 setTransientDrawCall:v15];
  }
  *(void *)long long buf = 0;
  int v22 = buf;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 0;
  uint64_t v16 = [(re *)v11 opaqueECS];
  int v17 = [(re *)v11 transientDrawCall];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = ___ZN2re34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEj_block_invoke;
  unint64_t v19[3] = &unk_264BE6170;
  void v19[4] = buf;
  v19[5] = a2;
  int v20 = a4;
  v19[6] = a1;
  v19[7] = a3;
  v12(v16, v17, v19);

  uint64_t v7 = *((void *)v22 + 3);
  _Block_object_dispose(buf, 8);

  return v7;
}

void ___ZN2re34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEj_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if ([v3 hasCustomHandler])
  {
    [v3 boundingBoxMin];
    long long v18 = v4;
    uint64_t v5 = (re *)[v3 boundingBoxMax];
    long long v17 = v6;
    re::globalAllocators(v5);
    uint64_t v7 = *(void *)(**(void **)(a1 + 40) + 24);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 560, 16);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_OWORD *)(v8 + 240) = 0u;
    *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 0u;
    *(_OWORD *)(v8 + 272) = 0u;
    *(_OWORD *)(v8 + 28re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(v8 + 320) = 0u;
    *(_DWORD *)(v8 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
    *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216) = 0;
    *(void *)(v8 + 224) = 0;
    *(void *)(v8 + 232) = 0;
    *(_DWORD *)(v8 + 240) = 0;
    *(void *)(v8 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
    *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 0;
    *(void *)(v8 + 264) = 0;
    *(_DWORD *)(v8 + 272) = 0;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_OWORD *)(v8 + 296) = 0u;
    *(_DWORD *)(v8 + 312) = 0;
    *(void *)(v8 + 344) = 0;
    *(void *)(v8 + 352) = 0;
    *(void *)(v8 + 336) = 0;
    *(_OWORD *)(v8 + 36re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = xmmword_23435FD50;
    *(_OWORD *)(v8 + 384) = xmmword_23435FD60;
    *(_OWORD *)(v8 + 400) = xmmword_23435FD80;
    *(_OWORD *)(v8 + 416) = xmmword_23435FBB0;
    *(void *)&long long v9 = 0x7F0000007FLL;
    *((void *)&v9 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v8 + 432) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v8 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v9;
    *(_WORD *)(v8 + 474) = 0;
    *(unsigned char *)(v8 + 472) = 0;
    *(void *)(v8 + 464) = 0;
    *(void *)(v8 + 504) = 0;
    *(void *)(v8 + 512) = "";
    *(void *)(v8 + 52re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(v8 + 536) = 3;
    *(void *)(v8 + 540) = 0x180197E00000001;
    *(void *)(v8 + 476) = -1;
    *(void *)(v8 + 484) = -1;
    *(void *)(v8 + 492) = -1;
    uint64_t v10 = re::globalAllocators((re *)v8)[2];
    v19[0] = &unk_26E70F158;
    uint64_t v22 = v10;
    uint64_t v23 = v19;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 16))(v7, v8, v19);
    re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v19);
    re::StringID::destroyString((re::StringID *)(v11 + 504));
    *(void *)(v11 + 504) = 0x8B87378FFD0D002ALL;
    *(void *)(v11 + 512) = "VFX Particles";
    *(_OWORD *)(v11 + 432) = v18;
    *(_OWORD *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v17;
    *(unsigned char *)(v11 + 536) = [v3 primitiveType];
    unsigned __int16 v12 = [v3 materialType];
    *(_WORD *)(v11 + 474) = v12;
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v14 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(v15 + 544);
    if (!v16) {
      uint64_t v16 = *(void *)(v15 + 416);
    }
    v19[0] = *(void *)(v15 + 416);
    v19[1] = v16;
    int v20 = *(_DWORD *)(a1 + 64);
    char v21 = 0;
    uint64_t v22 = v14;
    uint64_t v23 = (void *)v11;
    uint64_t v24 = v15 + 48;
    uint64_t v25 = 0;
    uint64_t v26 = v11 + 432;
    uint64_t v27 = v11 + 432;
    int v28 = v12;
    uint64_t v29 = v15 + 408;
    uint64_t v30 = 0;
    char v31 = *(unsigned char *)(v15 + 344);
    long long v32 = *(_OWORD *)(v15 + 352);
    char v33 = 1;
    id v34 = v3;
    (*(void (**)(void, void *))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), v19);
  }
}

void re::bucketVFXMeshPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a5;
  re::getVFXREDrawCallClass(v7);
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = v8;
  int v46 = v9;
  if (!v9)
  {
    long long v18 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    *(_WORD *)long long buf = 0;
    int v19 = "Bad object passed to bucketVFXMeshPart, can't render VFX";
LABEL_38:
    _os_log_debug_impl(&dword_233120000, v18, OS_LOG_TYPE_DEBUG, v19, buf, 2u);
    goto LABEL_16;
  }
  uint64_t v10 = *(re::MaterialParameterTable **)(a2 + 56);
  if (!v10)
  {
    long long v18 = *re::graphicsLogObjects(v9);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    *(_WORD *)long long buf = 0;
    int v19 = "Missing MaterialParameterTable, can't render VFX";
    goto LABEL_38;
  }
  uint64_t v11 = *(void *)(a2 + 144);
  int v44 = objc_alloc_init(VFXRECachedRenderCommandEncoder);
  unsigned __int16 v12 = re::MaterialParameterTable::passTechniqueHashTable(v10, v11, 1);
  uint64_t v13 = v12;
  uint64_t v14 = *((unsigned int *)v12 + 8);
  uint64_t v15 = 0;
  if (v14)
  {
    uint64_t v16 = (int *)v12[2];
    while (1)
    {
      int v17 = *v16;
      v16 += 6;
      if (v17 < 0) {
        break;
      }
      if (v14 == ++v15)
      {
        LODWORD(v15) = *((_DWORD *)v12 + 8);
        break;
      }
    }
  }
  if (v14 != v15)
  {
    uint64_t v20 = v15;
    uint64_t v21 = v12[2];
    do
    {
      v61[0] = 0;
      v61[0] = *(re::_anonymous_namespace_ **)(v21 + 24 * v20 + 8);
      uint64_t v22 = objc_alloc_init(VFXREDrawCallContextImpl);
      uint64_t v23 = [(re *)v46 customHandler];
      *(unsigned char *)(a1 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
      *(unsigned char *)(a1 + 211) = 0;
      uint64_t v24 = v61[0];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF948E8))
      {
        qword_26AF948E0 = re::hashString((re *)"Opaque", v43);
        __cxa_guard_release(&qword_26AF948E8);
      }
      *(unsigned char *)(a1 + 2re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = v25;
      uint64_t v26 = *(void *)(a3 + 24);
      v56[0] = MEMORY[0x263EF8330];
      v56[1] = 3221225472;
      v56[2] = ___ZN2re17bucketVFXMeshPartERNS_19MeshPartDrawContextEPKNS_28MaterialParameterTableLayersERKNS_12FrameContextERNS_9HashTableImNS_12MeshPassInfoENS_17PrecalculatedHashENS_7EqualToImEELb0ELb0EEEP11objc_objectb_block_invoke;
      _OWORD v56[3] = &unk_264BE6198;
      uint64_t v27 = v22;
      int8x16_t v57 = v27;
      uint64_t v60 = v61[0];
      unsigned int v58 = v44;
      id v28 = v23;
      id v59 = v28;
      re::DrawCallHandler::registerHandler(a1 + 208, v26, v56);
      uint64_t v29 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a4, (uint64_t *)v61);
      if (!v29)
      {
        *(void *)long long buf = 0;
        uint64_t v49 = 0;
        int v50 = 1;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v51 = 0;
        int v54 = 0;
        re::BucketArray<re::MeshPartDrawContext,128ul>::init((uint64_t)buf, v26, 1uLL);
        int v55 = 0;
        uint64_t v29 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a4, (unint64_t *)v61, (uint64_t)buf);
        re::BucketArray<re::MeshPartDrawContext,128ul>::deinit((uint64_t)buf);
        if (*(void *)buf)
        {
          if ((v50 & 1) == 0) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      *(_WORD *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(_DWORD *)(a1 + 144) = -1;
      *(unsigned char *)(a1 + 150) = 0;
      uint64_t v30 = (_OWORD *)re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(v29);
      long long v31 = *(_OWORD *)(a1 + 16);
      *uint64_t v30 = *(_OWORD *)a1;
      v30[1] = v31;
      long long v32 = *(_OWORD *)(a1 + 80);
      long long v34 = *(_OWORD *)(a1 + 32);
      long long v33 = *(_OWORD *)(a1 + 48);
      v30[4] = *(_OWORD *)(a1 + 64);
      _OWORD v30[5] = v32;
      _OWORD v30[2] = v34;
      v30[3] = v33;
      long long v35 = *(_OWORD *)(a1 + 144);
      long long v37 = *(_OWORD *)(a1 + 96);
      long long v36 = *(_OWORD *)(a1 + 112);
      v30[8] = *(_OWORD *)(a1 + 128);
      v30[9] = v35;
      v30[6] = v37;
      v30[7] = v36;
      long long v38 = *(_OWORD *)(a1 + 208);
      long long v40 = *(_OWORD *)(a1 + 160);
      long long v39 = *(_OWORD *)(a1 + 176);
      v30[12] = *(_OWORD *)(a1 + 192);
      v30[13] = v38;
      v30[10] = v40;
      v30[11] = v39;

      uint64_t v21 = v13[2];
      if (*((_DWORD *)v13 + 8) <= (v15 + 1)) {
        int v41 = v15 + 1;
      }
      else {
        int v41 = *((_DWORD *)v13 + 8);
      }
      while (1)
      {
        uint64_t v20 = (v15 + 1);
        if (v41 - 1 == v15) {
          break;
        }
        LODWORD(v15) = v15 + 1;
        int v42 = v20;
        if ((*(_DWORD *)(v21 + 24 * v20) & 0x80000000) != 0) {
          goto LABEL_30;
        }
      }
      int v42 = v41;
LABEL_30:
      LODWORD(v15) = v42;
    }
    while (v14 != v42);
  }

LABEL_16:
}

BOOL re::anonymous namespace'::isDepthOnly(re::_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948B8, memory_order_acquire) & 1) == 0)
  {
    long long v9 = this;
    int v4 = __cxa_guard_acquire(&qword_26AF948B8);
    this = v9;
    if (v4)
    {
      _MergedGlobals_382 = re::hashString((re *)"FadeDepthPrepass", v3);
      __cxa_guard_release(&qword_26AF948B8);
      this = v9;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v10 = this;
    int v6 = __cxa_guard_acquire(&qword_26AF948C8);
    this = v10;
    if (v6)
    {
      qword_26AF948C0 = re::hashString((re *)"VFXDepthWrite", v5);
      __cxa_guard_release(&qword_26AF948C8);
      this = v10;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = this;
    int v8 = __cxa_guard_acquire(&qword_26AF948D8);
    this = v11;
    if (v8)
    {
      qword_26AF948D0 = re::hashString((re *)"VFXFadeOpaqueDepthWrite", v7);
      __cxa_guard_release(&qword_26AF948D8);
      this = v11;
    }
  }
  return (re::_anonymous_namespace_ *)_MergedGlobals_382 == this
      || qword_26AF948C0 == (void)this
      || qword_26AF948D0 == (void)this;
}

uint64_t ___ZN2re17bucketVFXMeshPartERNS_19MeshPartDrawContextEPKNS_28MaterialParameterTableLayersERKNS_12FrameContextERNS_9HashTableImNS_12MeshPassInfoENS_17PrecalculatedHashENS_7EqualToImEELb0ELb0EEEP11objc_objectb_block_invoke(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  int v6 = *(void **)(a1 + 32);
  id v7 = a2;
  objc_msgSend(v6, "set_textureTable:", v5);
  objc_msgSend(*(id *)(a1 + 32), "set_bufferTable:", a3[1]);
  objc_msgSend(*(id *)(a1 + 32), "set_samplerTable:", a3[2]);
  objc_msgSend(*(id *)(a1 + 32), "set_constantTable:", a3[3]);
  objc_msgSend(*(id *)(a1 + 32), "set_viewports:", a3[4]);
  objc_msgSend(*(id *)(a1 + 32), "set_renderTargetInfo:", a3[5]);
  objc_msgSend(*(id *)(a1 + 32), "set_patchHandler:", a3[7]);
  objc_msgSend(*(id *)(a1 + 32), "set_stateOverride:", *((unsigned __int8 *)a3 + 88));
  objc_msgSend(*(id *)(a1 + 32), "set_isDrawingBlur:", *((unsigned __int8 *)a3 + 89));
  long long v10 = *((_OWORD *)a3 + 4);
  char v11 = *((unsigned char *)a3 + 80);
  objc_msgSend(*(id *)(a1 + 32), "set_stencilInfo:", &v10);
  LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_DWORD *)a3 + 21);
  objc_msgSend(*(id *)(a1 + 32), "set_fadeOpacity:", v8);
  objc_msgSend(*(id *)(a1 + 32), "set_dynamicFunctionConstants:", a3[6]);
  objc_msgSend(*(id *)(a1 + 32), "set_meshStats:", a3[12]);
  [*(id *)(a1 + 40) setEncoder:v7 state:a3[13]];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 80 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(_DWORD *)(v5 + 80 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 80 * v3 + 8) == v2) {
        return v5 + 80 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 80 * v3 + 16;
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 80 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 80 * v8 + 8) != v6)
  {
    LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 80 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 80 * v8;
  return v10 + 16;
}

void _ZN2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEED0Ev()
{
}

void _ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEEclEOSB_(uint64_t a1, re::AttributeTable **a2)
{
  uint64_t v2 = *a2;
  re::StringID::destroyString((re::AttributeTable *)((char *)*a2 + 504));
  re::FixedArray<re::StringID>::deinit((void *)v2 + 42);
  re::AttributeTable::~AttributeTable(v2);
}

void *_ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE9cloneIntoESB_(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70F158;
  return result;
}

void *_ZN2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE8moveIntoESB_(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70F158;
  return result;
}

uint64_t _ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE4sizeEv()
{
  return 16;
}

uint64_t *re::BucketArray<re::MeshPartDrawContext,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 28672, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + 224 * (a2 & 0x7F);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 7) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 7)) + 224 * (a2 & 0x7F);
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 80 * v9;
  *(_DWORD *)(v12 + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + 80 * v9;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  v15 += 16;
  *(_DWORD *)(v15 + 16) = 1;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  *(void *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v15, a5);
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), *(void *)&v13[16] + v10 + 8, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

double re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(_DWORD *result)
{
  if ((*result & 0x80000000) != 0)
  {
    *result &= ~0x80000000;
    uint64_t v1 = (uint64_t)(result + 4);
    re::BucketArray<re::MeshPartDrawContext,128ul>::deinit((uint64_t)(result + 4));
    return (_DWORD *)re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  }
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 224 * (v2 & 0x7F);
}

uint64_t re::CameraStreamContext::init(re::CameraStreamContext *this)
{
  unint64_t v2 = (long long *)MEMORY[0x263EF89A8];
  uint64_t v49 = 0x11844F475DLL;
  long long v3 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v24 = *MEMORY[0x263EF89A8];
  long long v25 = v3;
  long long v4 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  long long v26 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v27 = v4;
  long long v28 = v24;
  long long v29 = v3;
  long long v30 = v26;
  long long v31 = v4;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v5 = (long long *)MEMORY[0x263EF89A0];
  long long v7 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
  long long v6 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
  long long v32 = *MEMORY[0x263EF89A0];
  long long v33 = v7;
  long long v34 = v6;
  long long v35 = 0u;
  *(_OWORD *)long long v36 = 0u;
  long long v37 = 0u;
  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add((uint64_t)this, &v49, (uint64_t)&v24);
  if (v36[1])
  {

    v36[1] = 0;
  }
  if ((void)v35 && *((void *)&v35 + 1)) {
    (*(void (**)(void))(*(void *)v35 + 40))();
  }
  uint64_t v49 = 0x21F05F00586;
  long long v8 = v2[1];
  long long v24 = *v2;
  long long v25 = v8;
  long long v9 = v2[3];
  long long v26 = v2[2];
  long long v27 = v9;
  long long v28 = v24;
  long long v29 = v8;
  long long v30 = v26;
  long long v31 = v9;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v11 = v5[1];
  long long v10 = v5[2];
  long long v32 = *v5;
  long long v33 = v11;
  long long v34 = v10;
  long long v35 = 0u;
  *(_OWORD *)long long v36 = 0u;
  long long v37 = 0u;
  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add((uint64_t)this, &v49, (uint64_t)&v24);
  if (v36[1])
  {

    v36[1] = 0;
  }
  uint64_t result = v35;
  if ((void)v35 && *((void *)&v35 + 1)) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v35 + 40))();
  }
  int v13 = *((_DWORD *)this + 431);
  if (v13)
  {
    uint64_t v14 = (char *)this + 1696;
    uint64_t v15 = *((unsigned int *)this + 432);
    if (v15)
    {
      uint64_t v16 = 0;
      int v17 = (_DWORD *)*((void *)this + 214);
      while ((*v17 & 0x80000000) == 0)
      {
        v17 += 104;
        if (v15 == ++v16)
        {
          LODWORD(v16) = *((_DWORD *)this + 432);
          break;
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    long long v18 = (char *)this + 1696;
  }
  else
  {
    uint64_t v14 = (char *)this + 32;
    uint64_t v15 = *((void *)this + 2);
    LODWORD(v16) = 416;
    long long v18 = (char *)this + 416 * v15 + 32;
  }
  BOOL v19 = v14 == v18;
  if (v13) {
    BOOL v19 = v15 == v16;
  }
  if (!v19)
  {
    do
    {
      if (v13) {
        uint64_t v20 = *((void *)v14 + 2) + 416 * v16 + 16;
      }
      else {
        uint64_t v20 = (uint64_t)(v14 + 16);
      }
      long long v21 = *(_OWORD *)(v20 + 128);
      DWORD1(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = *(_DWORD *)(v20 + 148);
      *(void *)(v20 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(v20 + 160);
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216) = v21;
      if (v13)
      {
        unsigned int v22 = v16 + 1;
        do
        {
          LODWORD(v16) = v22;
          if (v22 >= *((_DWORD *)v14 + 8)) {
            break;
          }
          ++v22;
        }
        while ((*(_DWORD *)(*((void *)v14 + 2) + 416 * v16) & 0x80000000) == 0);
      }
      else
      {
        v14 += 416;
      }
      BOOL v23 = v14 == v18;
      if (v13) {
        BOOL v23 = v15 == v16;
      }
    }
    while (!v23);
  }
  return result;
}

id re::CameraStreamManager::context@<X0>(re::CameraStreamManager *this@<X0>, uint64_t a2@<X8>)
{
  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::SmallHashTable(a2, (uint64_t)this + 16);
  *(_OWORD *)(a2 + 1760) = *((_OWORD *)this + 111);
  *(_OWORD *)(a2 + 1776) = *((_OWORD *)this + 112);
  *(_OWORD *)(a2 + 1792) = *((_OWORD *)this + 113);
  *(_DWORD *)(a2 + 180re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_DWORD *)this + 456);
  *(_OWORD *)(a2 + 1744) = *((_OWORD *)this + 110);
  *(void *)(a2 + 1816) = *((id *)this + 229);
  id result = *((id *)this + 230);
  *(void *)(a2 + 1824) = result;
  return result;
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 1724))
  {
    long long v6 = (void *)(result + 1696);
LABEL_3:
    return re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew((uint64_t)v6, a2, (long long *)a3);
  }
  long long v8 = (void *)(result + 16);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v9 = result + 32;
  uint64_t v10 = *a2;
  if (v7)
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)(result + v11 + 32) == v10) {
        return result;
      }
      v11 += 416;
    }
    while (416 * v7 != v11);
    if ((v7 & 0xFFFFFFFC) != 0)
    {
      long long v26 = (uint64_t *)(result + 16);
      long long v6 = (void *)(result + 1696);
      if (!*(void *)(result + 1696))
      {
        signed int v12 = *(uint64_t **)result;
        if (!*(void *)result)
        {
        }
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(v5 + 1696, (uint64_t)v12, 8);
        uint64_t v7 = *v26;
        if (!*v26)
        {
LABEL_25:
          re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(v26);
          goto LABEL_3;
        }
      }
      uint64_t v13 = v9 + 416 * v7;
      while (1)
      {
        unint64_t v14 = 0xBF58476D1CE4E5B9 * (*(void *)v9 ^ (*(void *)v9 >> 30));
        unint64_t v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
        if (*v6)
        {
          unint64_t v16 = v15 % *(unsigned int *)(v5 + 1720);
          uint64_t v17 = *(unsigned int *)(*(void *)(v5 + 1704) + 4 * v16);
          if (v17 != 0x7FFFFFFF)
          {
            uint64_t v18 = *(void *)(v5 + 1712);
            while (*(void *)(v18 + 416 * v17 + 8) != *(void *)v9)
            {
              LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(v18 + 416 * v17) & 0x7FFFFFFF;
              if (v17 == 0x7FFFFFFF) {
                goto LABEL_23;
              }
            }
            goto LABEL_24;
          }
        }
        else
        {
          LODWORD(v16) = 0;
        }
LABEL_23:
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(v5 + 1696, v16, v15, (void *)v9, (long long *)(v9 + 16));
        ++*(_DWORD *)(v5 + 1736);
LABEL_24:
        v9 += 416;
        if (v9 == v13) {
          goto LABEL_25;
        }
      }
    }
  }
  long long v44 = *(_OWORD *)(a3 + 112);
  long long v45 = *(_OWORD *)(a3 + 128);
  long long v46 = *(_OWORD *)(a3 + 144);
  long long v47 = *(_OWORD *)(a3 + 160);
  long long v40 = *(_OWORD *)(a3 + 48);
  long long v41 = *(_OWORD *)(a3 + 64);
  long long v42 = *(_OWORD *)(a3 + 80);
  long long v43 = *(_OWORD *)(a3 + 96);
  long long v37 = *(_OWORD *)a3;
  long long v38 = *(_OWORD *)(a3 + 16);
  long long v39 = *(_OWORD *)(a3 + 32);
  long long v33 = *(_OWORD *)(a3 + 336);
  long long v34 = *(_OWORD *)(a3 + 352);
  long long v35 = *(_OWORD *)(a3 + 368);
  long long v36 = *(_OWORD *)(a3 + 384);
  long long v19 = *(_OWORD *)(a3 + 256);
  long long v29 = *(_OWORD *)(a3 + 272);
  long long v30 = *(_OWORD *)(a3 + 288);
  long long v31 = *(_OWORD *)(a3 + 304);
  long long v32 = *(_OWORD *)(a3 + 320);
  long long v20 = *(_OWORD *)(a3 + 192);
  long long v21 = *(_OWORD *)(a3 + 240);
  long long v27 = *(_OWORD *)(a3 + 208);
  long long v28 = *(_OWORD *)(a3 + 224);
  uint64_t v22 = *(void *)(a3 + 176);
  uint64_t v23 = *(void *)(a3 + 184);
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 200) = 0;
  if (*v8 >= 4uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, *(double *)&v20, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    id result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v24 = v9 + 416 * *v8;
    *(_OWORD *)(v24 + 144) = v45;
    *(_OWORD *)(v24 + 160) = v46;
    *(_OWORD *)(v24 + 176) = v47;
    *(_OWORD *)(v24 + 80) = v41;
    *(_OWORD *)(v24 + 96) = v42;
    *(_OWORD *)(v24 + 112) = v43;
    *(_OWORD *)(v24 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v44;
    *(_OWORD *)(v24 + 16) = v37;
    *(_OWORD *)(v24 + 32) = v38;
    *(_OWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v39;
    *(_OWORD *)(v24 + 64) = v40;
    *(_OWORD *)(v24 + 36re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v34;
    *(_OWORD *)(v24 + 384) = v35;
    *(_OWORD *)(v24 + 400) = v36;
    *(_OWORD *)(v24 + 304) = v30;
    *(_OWORD *)(v24 + 320) = v31;
    *(_OWORD *)(v24 + 336) = v32;
    *(_OWORD *)(v24 + 352) = v33;
    *(_OWORD *)(v24 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v20;
    *(_OWORD *)(v24 + 224) = v27;
    *(_OWORD *)(v24 + 240) = v28;
    *(_OWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = v21;
    *(void *)uint64_t v24 = v10;
    *(void *)(v24 + 192) = v22;
    *(void *)(v24 + 200) = v23;
    *(_OWORD *)(v24 + 272) = v19;
    *(_OWORD *)(v24 + 28re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v29;
    uint64_t v25 = *(void *)(result + 16);
    ++*(_DWORD *)(result + 24);
    *(void *)(result + 16) = v25 + 1;
    if (v25 == -1)
    {
      re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < m_size", "operator[]", 381, -1, 0);
      _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 416 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 416 * v10 + 8) != v6)
  {
    LODWORD(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_DWORD *)(v11 + 416 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 416 * v10;
  return v12 + 16;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 416 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 416 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 416 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 416 * v8;
  *(_DWORD *)(v11 + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v13 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + v13;
  long long v16 = *a5;
  long long v15 = a5[1];
  *(_OWORD *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = a5[2];
  long long v18 = a5[5];
  long long v17 = a5[6];
  long long v19 = a5[4];
  *(_OWORD *)(v14 + 64) = a5[3];
  *(_OWORD *)(v14 + 80) = v19;
  *(_OWORD *)(v14 + 96) = v18;
  *(_OWORD *)(v14 + 112) = v17;
  long long v21 = a5[9];
  long long v20 = a5[10];
  long long v22 = a5[8];
  *(_OWORD *)(v14 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a5[7];
  *(_OWORD *)(v14 + 144) = v22;
  *(_OWORD *)(v14 + 160) = v21;
  *(_OWORD *)(v14 + 176) = v20;
  *(_OWORD *)(v14 + 16) = v16;
  *(_OWORD *)(v14 + 32) = v15;
  *(void *)(v14 + 200) = 0;
  *(void *)(v14 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v14 + 192) = 0;
  uint64_t v23 = *((void *)a5 + 23);
  *(void *)(v14 + 192) = *((void *)a5 + 22);
  *(void *)(v14 + 200) = v23;
  *((void *)a5 + 22) = 0;
  *((void *)a5 + 2re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  uint64_t v24 = *(void *)(v14 + 208);
  *(void *)(v14 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((void *)a5 + 24);
  *((void *)a5 + 24) = v24;
  *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216) = *((void *)a5 + 25);
  *((void *)a5 + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = 0;
  long long v25 = a5[20];
  long long v27 = a5[17];
  long long v26 = a5[18];
  *(_OWORD *)(v14 + 320) = a5[19];
  *(_OWORD *)(v14 + 336) = v25;
  *(_OWORD *)(v14 + 28re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v27;
  *(_OWORD *)(v14 + 304) = v26;
  long long v28 = a5[21];
  long long v29 = a5[22];
  long long v30 = a5[24];
  *(_OWORD *)(v14 + 384) = a5[23];
  *(_OWORD *)(v14 + 400) = v30;
  *(_OWORD *)(v14 + 352) = v28;
  *(_OWORD *)(v14 + 36re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v29;
  long long v31 = a5[14];
  long long v33 = a5[15];
  long long v32 = a5[16];
  *(_OWORD *)(v14 + 224) = a5[13];
  *(_OWORD *)(v14 + 240) = v31;
  *(_OWORD *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = v33;
  *(_OWORD *)(v14 + 272) = v32;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (void *)(*(void *)&v15[16] + v10 + 8), (long long *)(*(void *)&v15[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 416;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::SmallHashTable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (void *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 172re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1732) = 0x7FFFFFFFLL;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::copy(v4, (uint64_t *)(a2 + 16));
    ++*(_DWORD *)(a1 + 24);
  }
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a1 + 1696, a2 + 1696);
  return a1;
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    long long v3 = *(void *)a1;
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1) {
      signed int v5 = v3 == v4;
    }
    else {
      signed int v5 = 1;
    }
    if (v5)
    {
      *(void *)a1 = v4;
      *(void *)a2 = v3;
      uint64_t v6 = *(void *)(a1 + 8);
      *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v6;
      unsigned int v7 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v7;
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v7;
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7;
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v7;
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a2 + 36) = v7;
    }
    else if (v4)
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

void re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::copy(void *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)(a2 + 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(v3, v3 + 416 * *a1, v5);
    if (*a1 != v4)
    {
      uint64_t v10 = v3 + 416 * v4;
      uint64_t v11 = 416 * *a1 + 208;
      uint64_t v12 = (uint64_t)a2 + v11;
      unint64_t v13 = (char *)a1 + v11;
      do
      {
        *((void *)v13 - 24) = *(void *)(v12 - 192);
        long long v14 = *(_OWORD *)(v12 - 176);
        long long v15 = *(_OWORD *)(v12 - 144);
        *((_OWORD *)v13 - re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_OWORD *)(v12 - 160);
        *((_OWORD *)v13 - re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v15;
        *((_OWORD *)v13 - 11) = v14;
        long long v16 = *(_OWORD *)(v12 - 128);
        long long v17 = *(_OWORD *)(v12 - 112);
        long long v18 = *(_OWORD *)(v12 - 80);
        *((_OWORD *)v13 - 6) = *(_OWORD *)(v12 - 96);
        *((_OWORD *)v13 - 5) = v18;
        *((_OWORD *)v13 - re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v16;
        *((_OWORD *)v13 - re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v17;
        long long v19 = *(_OWORD *)(v12 - 64);
        long long v20 = *(_OWORD *)(v12 - 48);
        long long v21 = *(_OWORD *)(v12 - 16);
        *((_OWORD *)v13 - 2) = *(_OWORD *)(v12 - 32);
        *((_OWORD *)v13 - 1) = v21;
        *((_OWORD *)v13 - 4) = v19;
        *((_OWORD *)v13 - re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v20;
        re::FixedArray<double>::FixedArray((uint64_t *)v13, v12);
        *((void *)v13 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(id *)(v12 + 24);
        long long v22 = *(_OWORD *)(v12 + 80);
        long long v24 = *(_OWORD *)(v12 + 32);
        long long v23 = *(_OWORD *)(v12 + 48);
        *((_OWORD *)v13 + 4) = *(_OWORD *)(v12 + 64);
        *((_OWORD *)v13 + 5) = v22;
        *((_OWORD *)v13 + 2) = v24;
        *((_OWORD *)v13 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v23;
        long long v25 = *(_OWORD *)(v12 + 144);
        long long v27 = *(_OWORD *)(v12 + 96);
        long long v26 = *(_OWORD *)(v12 + 112);
        *((_OWORD *)v13 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_OWORD *)(v12 + 128);
        *((_OWORD *)v13 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v25;
        *((_OWORD *)v13 + 6) = v27;
        *((_OWORD *)v13 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v26;
        long long v28 = *(_OWORD *)(v12 + 208);
        long long v30 = *(_OWORD *)(v12 + 160);
        long long v29 = *(_OWORD *)(v12 + 176);
        *((_OWORD *)v13 + 12) = *(_OWORD *)(v12 + 192);
        *((_OWORD *)v13 + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v28;
        *((_OWORD *)v13 + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = v30;
        *((_OWORD *)v13 + 11) = v29;
        uint64_t v31 = v12 + 224;
        v12 += 416;
        v13 += 416;
      }
      while (v31 != v10);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(v3, v3 + 416 * v4, v5);
    if (v4 != *a1)
    {
      uint64_t v6 = -416 * v4 + 416 * *a1;
      unsigned int v7 = &a1[52 * v4 + 26];
      do
      {
        long long v8 = (void *)v7[3];
        if (v8)
        {

          v7[3] = 0;
        }
        re::FixedArray<CoreIKTransform>::deinit(v7);
        *(v7 - 24) = 0;
        v7 += 52;
        v6 -= 416;
      }
      while (v6);
    }
  }
  *a1 = v4;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3 + 192;
    uint64_t v5 = a1 + 192;
    do
    {
      uint64_t v6 = v5 - 192;
      *(void *)(v4 - 192) = *(void *)(v5 - 192);
      long long v7 = *(_OWORD *)(v5 - 176);
      long long v8 = *(_OWORD *)(v5 - 144);
      *(_OWORD *)(v4 - 160) = *(_OWORD *)(v5 - 160);
      *(_OWORD *)(v4 - 144) = v8;
      *(_OWORD *)(v4 - 176) = v7;
      long long v9 = *(_OWORD *)(v5 - 128);
      long long v10 = *(_OWORD *)(v5 - 112);
      long long v11 = *(_OWORD *)(v5 - 80);
      *(_OWORD *)(v4 - 96) = *(_OWORD *)(v5 - 96);
      *(_OWORD *)(v4 - 80) = v11;
      *(_OWORD *)(v4 - 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v9;
      *(_OWORD *)(v4 - 112) = v10;
      long long v12 = *(_OWORD *)(v5 - 64);
      long long v13 = *(_OWORD *)(v5 - 48);
      long long v14 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v14;
      *(_OWORD *)(v4 - 64) = v12;
      *(_OWORD *)(v4 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v13;
      if (v4 != v5)
      {
        uint64_t v15 = *(void *)v5;
        if (*(void *)v4)
        {
          if (!v15) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (v15)
        {
          re::FixedArray<double>::init<>((uint64_t *)v4, v15, *(void *)(v5 + 8));
LABEL_9:
          re::FixedArray<unsigned long>::copy((void *)v4, v5);
        }
      }
LABEL_10:
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v4 + 24), (void **)(v5 + 24));
      long long v16 = *(_OWORD *)(v5 + 80);
      long long v18 = *(_OWORD *)(v5 + 32);
      long long v17 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 80) = v16;
      *(_OWORD *)(v4 + 32) = v18;
      *(_OWORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v17;
      long long v19 = *(_OWORD *)(v5 + 144);
      long long v21 = *(_OWORD *)(v5 + 96);
      long long v20 = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(v4 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 144) = v19;
      *(_OWORD *)(v4 + 96) = v21;
      *(_OWORD *)(v4 + 112) = v20;
      __n128 result = *(__n128 *)(v5 + 192);
      long long v23 = *(_OWORD *)(v5 + 208);
      long long v25 = *(_OWORD *)(v5 + 160);
      long long v24 = *(_OWORD *)(v5 + 176);
      *(__n128 *)(v4 + 192) = result;
      *(_OWORD *)(v4 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v23;
      *(_OWORD *)(v4 + 160) = v25;
      *(_OWORD *)(v4 + 176) = v24;
      v4 += 416;
      v5 += 416;
    }
    while (v6 + 416 != a2);
  }
  return result;
}

uint64_t *re::FixedArray<double>::FixedArray(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<double>::init<>(a1, v4, *(void *)(a2 + 8));
    re::FixedArray<unsigned long>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * (*(void *)(v8 + v6 + 8) ^ (*(void *)(v8 + v6 + 8) >> 30));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (void *)(v8 + v6 + 8), (id *)(v8 + v6 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 416;
    }
  }
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 416;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, id *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 416 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 416 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 416 * v9;
  *(_DWORD *)(v12 + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + v14) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  long long v17 = *(_OWORD *)a5;
  long long v16 = *((_OWORD *)a5 + 1);
  *(_OWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *((_OWORD *)a5 + 2);
  long long v19 = *((_OWORD *)a5 + 5);
  long long v18 = *((_OWORD *)a5 + 6);
  long long v20 = *((_OWORD *)a5 + 4);
  *(_OWORD *)(v15 + 64) = *((_OWORD *)a5 + 3);
  *(_OWORD *)(v15 + 80) = v20;
  *(_OWORD *)(v15 + 96) = v19;
  *(_OWORD *)(v15 + 112) = v18;
  long long v22 = *((_OWORD *)a5 + 9);
  long long v21 = *((_OWORD *)a5 + 10);
  long long v23 = *((_OWORD *)a5 + 8);
  *(_OWORD *)(v15 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_OWORD *)a5 + 7);
  *(_OWORD *)(v15 + 144) = v23;
  *(_OWORD *)(v15 + 160) = v22;
  *(_OWORD *)(v15 + 176) = v21;
  *(_OWORD *)(v15 + 16) = v17;
  *(_OWORD *)(v15 + 32) = v16;
  re::FixedArray<double>::FixedArray((uint64_t *)(v15 + 192), (uint64_t)(a5 + 22));
  *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216) = a5[25];
  long long v24 = *((_OWORD *)a5 + 16);
  long long v26 = *((_OWORD *)a5 + 13);
  long long v25 = *((_OWORD *)a5 + 14);
  *(_OWORD *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = *((_OWORD *)a5 + 15);
  *(_OWORD *)(v15 + 272) = v24;
  *(_OWORD *)(v15 + 224) = v26;
  *(_OWORD *)(v15 + 240) = v25;
  long long v27 = *((_OWORD *)a5 + 20);
  long long v29 = *((_OWORD *)a5 + 17);
  long long v28 = *((_OWORD *)a5 + 18);
  *(_OWORD *)(v15 + 320) = *((_OWORD *)a5 + 19);
  *(_OWORD *)(v15 + 336) = v27;
  *(_OWORD *)(v15 + 28re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v29;
  *(_OWORD *)(v15 + 304) = v28;
  long long v30 = *((_OWORD *)a5 + 24);
  long long v32 = *((_OWORD *)a5 + 21);
  long long v31 = *((_OWORD *)a5 + 22);
  *(_OWORD *)(v15 + 384) = *((_OWORD *)a5 + 23);
  *(_OWORD *)(v15 + 400) = v30;
  *(_OWORD *)(v15 + 352) = v32;
  *(_OWORD *)(v15 + 36re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v31;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

char *re::MeshInstanceCollection::make(re::MeshInstanceCollection *this)
{
  if (this <= 3) {
    unint64_t v1 = 3;
  }
  else {
    unint64_t v1 = this;
  }
  uint64_t v2 = (objc_class *)objc_opt_class();
  Instance = (char *)class_createInstance(v2, 0xA8uLL);
  *(_OWORD *)(Instance + 24) = 0u;
  *((_DWORD *)Instance + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
  *(_OWORD *)(Instance + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(Instance + 44) = 0x7FFFFFFFLL;
  *((void *)Instance + 11) = 0;
  *((void *)Instance + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *((void *)Instance + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((_DWORD *)Instance + 20) = 0;
  *((void *)Instance + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  int v5 = (_anonymous_namespace_ *)re::DynamicArray<re::StringID>::setCapacity((void *)Instance + 7, v1);
  ++*((_DWORD *)Instance + 20);
  *((void *)Instance + 16) = 0;
  *((void *)Instance + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  *((void *)Instance + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 0;
  *((_DWORD *)Instance + 30) = 0;
  *((void *)Instance + 12) = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::StringID>::setCapacity((void *)Instance + 12, v1);
  ++*((_DWORD *)Instance + 30);
  *((void *)Instance + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0;
  *((void *)Instance + 1re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *((void *)Instance + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  *((_DWORD *)Instance + 40) = 0;
  *((void *)Instance + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)Instance + 17, v1);
  ++*((_DWORD *)Instance + 40);
  return Instance;
}

id re::MeshInstanceCollection::makeCopy(re::MeshInstanceCollection *this, const re::MeshInstanceCollection *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  id Instance = class_createInstance(v3, 0xA8uLL);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)Instance + 8, (uint64_t)this + 8);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)Instance + 56, (uint64_t *)this + 7);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)Instance + 96, (uint64_t *)this + 12);
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray((uint64_t)Instance + 136, (uint64_t *)this + 17);
  return Instance;
}

void re::MeshInstanceCollection::beginCOWMutation(re::MeshInstanceCollection **this, re::MeshInstanceCollection **a2)
{
  if (CFGetRetainCount(*this) != 1)
  {
    unint64_t v4 = *this;
    *this = (re::MeshInstanceCollection *)re::MeshInstanceCollection::makeCopy(*this, v3);
    CFRelease(v4);
  }
}

uint64_t re::DrawCallRecorder::DrawCallRecorder(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a4;
  re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity((void *)(a1 + 8), 0);
  ++*(_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(a1 + 84) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 48, a4, 3);
  *(_DWORD *)(a1 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 132) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 96, a4, 3);
  *(void *)(a1 + 144) = *a2;
  *(unsigned char *)(a1 + 152) = a3;
  return a1;
}

uint64_t re::DrawCallRecorder::allocateDrawCallRecorderGroup(re::DrawCallRecorder *this, const char *a2, const char *a3)
{
  unint64_t v4 = (re::DrawCallRecorder *)((char *)this + 8);
  re::DrawCallRecorderGroup::DrawCallRecorderGroup((uint64_t)&v6, a2, a3, *(void *)this);
  re::DynamicArray<re::DrawCallRecorderGroup>::add(v4, (uint64_t)&v6);
  re::DynamicArray<re::EncodedDrawCallDetails>::deinit((uint64_t)&v12);
  re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v11);
  re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit((uint64_t)&v10);
  if ((void)v8)
  {
    if (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    long long v8 = 0u;
    long long v9 = 0u;
  }
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return *((void *)this + 5) + (*((void *)this + 3) << 8) - 256;
}

void re::DynamicArray<re::DrawCallRecorderGroup>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DrawCallRecorderGroup>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  re::DrawCallRecorderGroup::DrawCallRecorderGroup(*((void *)this + 4) + (v4 << 8), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
}

uint64_t re::DrawCallRecorder::savePerEntityDebugInformation(re::DrawCallRecorder *this, unint64_t a2, const re::DynamicString *a3, const re::DynamicString *a4)
{
  unint64_t v17 = a2;
  char v7 = (void *)((char *)this + 48);
  if (!re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 48, (uint64_t *)&v17))
  {
    uint64_t v8 = *(void *)this;
    memset(v14, 0, sizeof(v14));
    int v15 = 0;
    uint64_t v16 = 0x7FFFFFFFLL;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v14, v8, 3);
    re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v7, (uint64_t *)&v17, (uint64_t *)v14);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v14);
  }
  LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0x7FFFFFFF;
  if (*v7)
  {
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
    uint64_t v11 = *(unsigned int *)(*((void *)this + 7) + 4 * ((v10 ^ (v10 >> 31)) % *((unsigned int *)this + 18)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *((void *)this + 8);
      LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v11;
      if (*(void *)(v12 + 72 * v11 + 16) != v17)
      {
        uint64_t v9 = v11;
        while (1)
        {
          LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v12 + 72 * v9 + 8) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v12 + 72 * v9 + 16) == v17) {
            return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(*((void *)this + 8) + 72 * v9 + 24, a3, a4);
          }
        }
        LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0x7FFFFFFF;
      }
    }
  }
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(*((void *)this + 8) + 72 * v9 + 24, a3, a4);
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 72 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, const re::DynamicString *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 80 * v9 + 48), a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 80 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 96 * v13;
    return v12 + 32;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 96 * v10 + 16) != v6)
  {
    LODWORD(vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *(_DWORD *)(v11 + 96 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 96 * v10;
  return v12 + 32;
}

uint64_t re::DrawCallRecorder::drawCallRecordingEnabled(re::DrawCallRecorder *this, const re::RenderManager *a2)
{
  if (drawCallRecordingEnabledByEnvironmentVariable(void)::onceToken != -1) {
    dispatch_once(&drawCallRecordingEnabledByEnvironmentVariable(void)::onceToken, &__block_literal_global_33);
  }
  if (drawCallRecordingEnabledByEnvironmentVariable(void)::isEnabled) {
    return 1;
  }
  uint64_t result = *((void *)a2 + 11);
  if (result)
  {
    uint64_t v8 = 0x422F4464C0EC2900;
    unint64_t v9 = "drawcallrecording:takeSnapshotNow";
    unsigned __int8 v10 = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(result, &v8, &v10))
    {
      re::StringID::destroyString((re::StringID *)&v8);
    }
    else
    {
      int v4 = v10;
      re::StringID::destroyString((re::StringID *)&v8);
      if (v4)
      {
        uint64_t v7 = *((void *)a2 + 11);
        uint64_t v8 = 0x422F4464C0EC2900;
        unint64_t v9 = "drawcallrecording:takeSnapshotNow";
        unsigned __int8 v10 = 0;
        re::DebugSettingsManager::setWithErrorCode<BOOL>(v7, &v8, &v10);
        re::StringID::destroyString((re::StringID *)&v8);
        return 1;
      }
    }
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v8 = 0x184FB450F9DBB738;
    unint64_t v9 = "drawcallrecording:record";
    unsigned __int8 v10 = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v5, &v8, &v10))
    {
      re::StringID::destroyString((re::StringID *)&v8);
      return 0;
    }
    int v6 = v10;
    re::StringID::destroyString((re::StringID *)&v8);
    return v6 != 0;
  }
  return result;
}

uint64_t boxStringForVisualizer(re::DynamicString *a1, re::DynamicString *this, float32x4_t *a3, float *a4)
{
  float v4 = a4[1];
  float v5 = a4[2];
  float32x4_t v6 = a3[1];
  float32x4_t v7 = a3[2];
  float32x4_t v8 = a3[3];
  float32x4_t v9 = vmulq_n_f32(*a3, *a4);
  float32x4_t v10 = vmlaq_n_f32(v9, v6, v4);
  float32x4_t v11 = vaddq_f32(v8, vmlaq_n_f32(v10, v7, v5));
  float32x4_t v12 = vdivq_f32(v11, (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3));
  float v13 = a4[5];
  float32x4_t v14 = vmulq_n_f32(*a3, a4[4]);
  float32x4_t v15 = vmlaq_n_f32(v14, v6, v4);
  float32x4_t v16 = vaddq_f32(v8, vmlaq_n_f32(v15, v7, v5));
  float32x4_t v17 = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
  float32x4_t v18 = vmlaq_n_f32(v14, v6, v13);
  float32x4_t v19 = vaddq_f32(v8, vmlaq_n_f32(v18, v7, v5));
  float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
  float32x4_t v21 = vmlaq_n_f32(v9, v6, v13);
  float32x4_t v22 = vaddq_f32(v8, vmlaq_n_f32(v21, v7, v5));
  float32x4_t v23 = vdivq_f32(v22, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3));
  float v24 = a4[6];
  float32x4_t v25 = vaddq_f32(v8, vmlaq_n_f32(v10, v7, v24));
  float32x4_t v26 = vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3));
  float32x4_t v27 = vaddq_f32(v8, vmlaq_n_f32(v15, v7, v24));
  float32x4_t v28 = vdivq_f32(v27, (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3));
  float32x4_t v29 = vaddq_f32(v8, vmlaq_n_f32(v18, v7, v24));
  float32x4_t v30 = vdivq_f32(v29, (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3));
  float32x4_t v31 = vaddq_f32(v8, vmlaq_n_f32(v21, v7, v24));
  float32x4_t v32 = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
  return re::DynamicString::format(this, (re::Allocator *)"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f", a1, v12.f32[0], v12.f32[1], v12.f32[2], v17.f32[0], v17.f32[1], v17.f32[2], v20.f32[0], v20.f32[1], v20.f32[2], v23.f32[0], v23.f32[1], v23.f32[2], v26.f32[0], v26.f32[1], v26.f32[2], v28.f32[0],
           v28.f32[1],
           v28.f32[2],
           v30.f32[0],
           v30.f32[1],
           v30.f32[2],
           v32.f32[0],
           v32.f32[1],
           v32.f32[2]);
}

uint64_t re::DrawCallRecorder::dumpDrawCallsToDisk(re::DrawCallRecorder *this)
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 << 8;
    float32x4_t v8 = (void *)(*((void *)this + 5) + 176);
    do
    {
      v6 += *v8;
      v8 += 32;
      v7 -= 256;
    }
    while (v7);
    size_t v9 = v6 << 10;
  }
  else
  {
    size_t v9 = 0;
  }
  re::basicLocalWallTime((re *)"HH.mm.ss.SSS", (re::DynamicString *)buf);
  if (buf[8]) {
    float32x4_t v11 = (const char *)v270;
  }
  else {
    float32x4_t v11 = (const char *)&buf[9];
  }
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  uint64_t v12 = *(void *)this;
  uint64_t v247 = 0;
  uint64_t v246 = 0;
  uint64_t v245 = 0;
  uint64_t v244 = v12;
  re::DynamicString::setCapacity(&v244, v9);
  uint64_t v13 = *(void *)this;
  uint64_t v243 = 0;
  id v242 = 0;
  uint64_t v241 = 0;
  uint64_t v240 = v13;
  size_t v14 = v9;
  float32x4_t v15 = this;
  re::DynamicString::setCapacity(&v240, v14);
  re::DynamicString::appendf((re::DynamicString *)&v244, "DrawCallRecorder Version %s\n", "2.0.0");
  re::DynamicString::appendf((re::DynamicString *)&v244, "Frame: %llu\n", *((void *)this + 18) & 0xFFFFFFFFFFFFFFFLL);
  if (v249) {
    float32x4_t v16 = v251;
  }
  else {
    float32x4_t v16 = v250;
  }
  float32x4_t v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "Local Time: %s\n\n", v16);
  uint64_t v18 = *((void *)this + 3);
  if (v18)
  {
    uint64_t v19 = 0;
    int v181 = 0;
    uint64_t v20 = *((void *)this + 5);
    uint64_t v178 = v20 + (v18 << 8);
    unint64_t v193 = (void *)((char *)this + 48);
    do
    {
      if (*(void *)(v20 + 176))
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v238, (const re::DynamicString *)v20);
        uint64_t v21 = 0;
        char v22 = BYTE8(v238);
        if (BYTE8(v238)) {
          float32x4_t v23 = (const char *)v239;
        }
        else {
          float32x4_t v23 = (char *)&v238 + 9;
        }
        do
        {
          int v24 = strcmp(v23, off_264BE61B8[v21]);
          if (v24) {
            BOOL v25 = v21 == 3;
          }
          else {
            BOOL v25 = 1;
          }
          ++v21;
        }
        while (!v25);
        int v192 = v24;
        float32x4_t v15 = this;
        if ((void)v238)
        {
          if (v22) {
            (*(void (**)(void))(*(void *)v238 + 40))();
          }
          long long v238 = 0u;
          long long v239 = 0u;
        }
        float32x4_t v26 = (*(unsigned char *)(v20 + 8) & 1) != 0 ? *(const char **)(v20 + 16) : (const char *)(v20 + 9);
        float32x4_t v27 = (*(unsigned char *)(v20 + 40) & 1) != 0 ? *(const char **)(v20 + 48) : (const char *)(v20 + 41);
        float32x4_t v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "Group [%s] [%s]\n\n", v26, v27);
        if (*(void *)(v20 + 176))
        {
          uint64_t v28 = 0;
          uint64_t v187 = v20;
          do
          {
            uint64_t v29 = *(void *)(v20 + 192);
            uint64_t v30 = v29 + 320 * v28;
            re::DynamicString::appendf((re::DynamicString *)&v244, "          Draw-Call #: %zu\n", v19);
            if (*(unsigned char *)(v30 + 312))
            {
              re::DynamicString::appendf((re::DynamicString *)&v244, "          Technique: (VFX, details unavailable)\n");
            }
            else
            {
              if (*(unsigned char *)(v30 + 8)) {
                float32x4_t v31 = *(const char **)(v30 + 16);
              }
              else {
                float32x4_t v31 = (const char *)(v30 + 9);
              }
              if (*(unsigned char *)(v29 + 320 * v28 + 40)) {
                float32x4_t v32 = *(const char **)(v29 + 320 * v28 + 48);
              }
              else {
                float32x4_t v32 = (const char *)(v29 + 320 * v28 + 41);
              }
              if (*(unsigned char *)(v29 + 320 * v28 + 72)) {
                long long v33 = *(const char **)(v29 + 320 * v28 + 80);
              }
              else {
                long long v33 = (const char *)(v29 + 320 * v28 + 73);
              }
              re::DynamicString::appendf((re::DynamicString *)&v244, "          Technique: %s VertexShader: %s FragmentShader: %s\n", v31, v32, v33);
            }
            uint64_t v188 = (unsigned char *)(v29 + 320 * v28 + 96);
            uint64_t v189 = v28;
            uint64_t v191 = v19;
            if (*v188)
            {
              uint64_t v34 = v29 + 320 * v28;
              long long v35 = (long long *)(v34 + 104);
              long long v36 = *(_OWORD *)(v34 + 104);
              long long v37 = *(_OWORD *)(v34 + 120);
              long long v38 = *(_OWORD *)(v34 + 136);
              int v232 = *(_DWORD *)(v34 + 152);
              long long v230 = v37;
              long long v231 = v38;
              long long v229 = v36;
              LODWORD(v34) = *(unsigned __int8 *)(v34 + 156);
              char v233 = v34;
              if (v34) {
                char v234 = *((unsigned char *)v35 + 53);
              }
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v235, (uint64_t *)v35 + 7);
              uint64_t v39 = v29 + 320 * v28;
              char v42 = *(unsigned char *)(v39 + 200);
              long long v41 = (char *)(v39 + 200);
              char v40 = v42;
              *(_OWORD *)long long buf = v229;
              long long v270 = v230;
              long long v271 = v231;
              LODWORD(v272) = v232;
              BYTE4(v272) = v233;
              long long v43 = "Off";
              if (v233) {
                BYTE5(v272) = v234;
              }
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v272 + 8, v235);
              char v45 = (v40 & 2) == 0 && DWORD1(v271) != 0;
              if (v274.i64[1])
              {
                uint64_t v46 = *((void *)&v273 + 1);
                if (*((void *)&v273 + 1))
                {
                  long long v47 = (int *)(v274.i64[1] + 28);
                  do
                  {
                    if ((v40 & 2) != 0) {
                      int v48 = 0;
                    }
                    else {
                      int v48 = *v47;
                    }
                    v45 |= v48 != 0;
                    v47 += 8;
                    --v46;
                  }
                  while (v46);
                }
                if (*((void *)&v272 + 1)) {
                  (*(void (**)(void))(**((void **)&v272 + 1) + 40))(*((void *)&v272 + 1));
                }
              }
              if (v45) {
                uint64_t v49 = "On";
              }
              else {
                uint64_t v49 = "Off";
              }
              long long v50 = *v35;
              long long v51 = v35[1];
              long long v52 = v35[2];
              int v222 = *((_DWORD *)v35 + 12);
              long long v220 = v51;
              long long v221 = v52;
              long long v219 = v50;
              char v223 = *((unsigned char *)v35 + 52);
              float32x4_t v15 = this;
              if (v223) {
                char v224 = *((unsigned char *)v35 + 53);
              }
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v225, (uint64_t *)v35 + 7);
              BOOL v53 = (_BYTE)v219 != 0;
              BOOL v54 = BYTE1(v219) != 0;
              if (v228)
              {
                uint64_t v55 = v226;
                if (v226)
                {
                  __n128 v56 = (unsigned __int8 *)(v228 + 1);
                  do
                  {
                    int v57 = *(v56 - 1) | v53;
                    int v58 = *v56;
                    v56 += 32;
                    BOOL v54 = (v58 | v54) != 0;
                    BOOL v53 = v57 != 0;
                    --v55;
                  }
                  while (v55);
                }
              }
              id v59 = "FixedFunction";
              if (*((unsigned char *)this + 152) != 0 && v54) {
                id v59 = "Programmable";
              }
              if (v53) {
                uint64_t v60 = v59;
              }
              else {
                uint64_t v60 = "Off";
              }
              long long v61 = *v35;
              long long v62 = v35[1];
              long long v63 = v35[2];
              int v213 = *((_DWORD *)v35 + 12);
              long long v211 = v62;
              long long v212 = v63;
              long long v210 = v61;
              if (*((unsigned char *)v35 + 52)) {
                char v215 = *((unsigned char *)v35 + 53);
              }
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v216, (uint64_t *)v35 + 7);
              if ((BYTE2(v210) & ~*v41) != 0) {
                long long v43 = "On";
              }
              long long v65 = v35[1];
              long long v64 = v35[2];
              long long v66 = *v35;
              int v204 = *((_DWORD *)v35 + 12);
              long long v202 = v65;
              long long v203 = v64;
              long long v201 = v66;
              if (*((unsigned char *)v35 + 52)) {
                char v206 = *((unsigned char *)v35 + 53);
              }
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v207, (uint64_t *)v35 + 7);
              long long v67 = "Always";
              if ((*v41 & 4) == 0)
              {
                unsigned int v68 = BYTE10(v201) - 1;
                long long v67 = "Never";
                if (v68 <= 6) {
                  long long v67 = off_264BE61F8[(char)v68];
                }
              }
              char v69 = 0;
              uint64_t v70 = 0;
              uint64_t v71 = v29 + 320 * v28;
              uint64_t v72 = *(void *)(v71 + 201);
              uint64_t v73 = *(void *)(v71 + 209);
              *(void *)long long buf = v72;
              *(void *)&uint8_t buf[8] = v73;
              do
              {
                uint64_t v74 = 0;
                char v75 = v69;
                float32x4_t v76 = &buf[8 * v70];
                int v77 = v76[2];
                __int8 v78 = v76[4];
                __int8 v79 = v76[5];
                v252.i8[0] = v76[6];
                v252.i8[1] = v79;
                v252.i8[2] = v78;
                do
                {
                  if (v252.i8[v74]) {
                    BOOL v80 = v77 == 0;
                  }
                  else {
                    BOOL v80 = 1;
                  }
                  if (!v80)
                  {
                    uint64_t v81 = "On";
                    goto LABEL_103;
                  }
                  ++v74;
                }
                while (v74 != 3);
                char v69 = 1;
                uint64_t v70 = 1;
              }
              while ((v75 & 1) == 0);
              uint64_t v81 = "Off";
LABEL_103:
              char v82 = 0;
              uint64_t v83 = 0;
              *(void *)long long buf = v72;
              *(void *)&uint8_t buf[8] = v73;
              while (1)
              {
                char v84 = v82;
                uint64_t v85 = &buf[8 * v83];
                if (*v85)
                {
                  unsigned int v86 = v85[3];
                  if (v86 != 7 && v86 != 0) {
                    break;
                  }
                }
                char v82 = 1;
                uint64_t v83 = 1;
                if (v84)
                {
                  long long v88 = "None";
                  goto LABEL_114;
                }
              }
              long long v88 = "Never";
              if (v86 <= 6) {
                long long v88 = off_264BE6230[(char)(v86 - 1)];
              }
LABEL_114:
              re::DynamicString::appendf((re::DynamicString *)&v244, "          State: ColorWrite: %s AlphaBlending: %s DepthWrite: %s DepthCompare: %s StencilWrite: %s StencilTest: %s\n", v49, v60, v43, v67, v81, v88);
              uint64_t v20 = v187;
              if (v207[0])
              {
                if (v209) {
                  (*(void (**)(void))(*(void *)v207[0] + 40))();
                }
                uint64_t v209 = 0;
                memset(v207, 0, sizeof(v207));
                ++v208;
              }
              if (v216[0])
              {
                if (v218) {
                  (*(void (**)(void))(*(void *)v216[0] + 40))();
                }
                uint64_t v218 = 0;
                memset(v216, 0, sizeof(v216));
                ++v217;
              }
              if (v225[0])
              {
                if (v228) {
                  (*(void (**)(void))(*(void *)v225[0] + 40))();
                }
                uint64_t v228 = 0;
                v225[1] = 0;
                uint64_t v226 = 0;
                v225[0] = 0;
                ++v227;
              }
              if (v235[0])
              {
                if (v237) {
                  (*(void (**)(void))(*(void *)v235[0] + 40))();
                }
                uint64_t v237 = 0;
                memset(v235, 0, sizeof(v235));
                ++v236;
              }
              char v89 = *v41;
              if (*v41)
              {
                int v90 = v89 & 3;
                if (v90 == 1)
                {
                  uint64_t v91 = "ColorOnly";
                }
                else
                {
                  uint64_t v91 = "DepthOnly";
                  if (v90 != 2)
                  {
                    uint64_t v91 = "";
                    if (v90 == 3) {
                      uint64_t v91 = "NoWrite";
                    }
                  }
                }
                BOOL v25 = (v89 & 4) == 0;
                uint64_t v92 = "NoDepthCompare";
                if (v25) {
                  uint64_t v92 = "";
                }
                re::DynamicString::format((re::DynamicString *)"%s%s", (re::DynamicString *)buf, v91, v92);
                uint64_t v93 = (const char *)&buf[9];
                if (buf[8]) {
                  uint64_t v93 = (const char *)v270;
                }
                re::DynamicString::appendf((re::DynamicString *)&v244, "          StateOverride: %s\n", v93);
                if (*(void *)buf && (buf[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)buf + 40))();
                }
              }
            }
            if (*(unsigned char *)(v29 + 320 * v28 + 232)) {
              uint64_t v94 = *(const char **)(v29 + 320 * v28 + 240);
            }
            else {
              uint64_t v94 = (const char *)(v29 + 320 * v28 + 233);
            }
            re::DynamicString::appendf((re::DynamicString *)&v244, "          Draw Details: %s\n", v94);
            if (*(unsigned char *)(v29 + 320 * v28 + 256))
            {
              uint64_t v95 = v29 + 320 * v28;
              if (*(void *)(v95 + 288))
              {
                unint64_t v96 = 0;
                id v194 = (unint64_t *)(v95 + 288);
                uint64_t v97 = v29 + 320 * v189;
                unint64_t v98 = (uint64_t *)(v97 + 304);
                uint64_t v185 = (unsigned char *)(v97 + 156);
                uint64_t v186 = v97 + 104;
                uint64_t v182 = (unsigned char *)(v97 + 157);
                int v183 = (unsigned char *)(v97 + 200);
                unint64_t v184 = (uint64_t *)(v97 + 160);
                do
                {
                  uint64_t v99 = *v98;
                  uint64_t v100 = (uint64_t *)(*v98 + 56 * v96);
                  re::DynamicString::appendf((re::DynamicString *)&v244, "          Mesh %zu: \n", v96);
                  v199[0] = *((unsigned char *)v100 + 48);
                  if (v199[0]) {
                    int v200 = *(_DWORD *)(v99 + 56 * v96 + 52);
                  }
                  re::DrawCallRecorderGroup::getSortingContext((re::DynamicString *)v20, (uint64_t)v199, (uint64_t)buf);
                  if (*v100) {
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             Entity ID: %llu\n", *v100);
                  }
                  if (*(unsigned char *)(v99 + 56 * v96 + 8))
                  {
                    uint64_t v101 = v99 + 56 * v96;
                    if (*(unsigned char *)(v101 + 24)) {
                      simd_float4 v102 = *(const char **)(v101 + 32);
                    }
                    else {
                      simd_float4 v102 = (const char *)(v101 + 25);
                    }
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             MeshPart Name: %s\n", v102);
                  }
                  if (buf[0])
                  {
                    simd_float4 v103 = (char *)&v270 + 9;
                    if (BYTE8(v270)) {
                      simd_float4 v103 = (const char *)v271;
                    }
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             Sort Key: %s\n", v103);
                    if (!v192)
                    {
                      simd_float4 v104 = *(re::DynamicString **)v15;
                      simd_float4 v105 = re::DynamicString::DynamicString((re::DynamicString *)&v197, (const re::DynamicString *)v20);
                      uint64_t v106 = *v100;
                      if (*v188)
                      {
                        float32x4_t v107 = *(float32x4_t *)v186;
                        long long v108 = *(_OWORD *)(v186 + 16);
                        long long v109 = *(_OWORD *)(v186 + 32);
                        LODWORD(v255) = *(_DWORD *)(v186 + 48);
                        long long v254 = v109;
                        long long v253 = v108;
                        float32x4_t v252 = v107;
                        BYTE4(v255) = *v185;
                        if (BYTE4(v255)) {
                          BYTE5(v255) = *v182;
                        }
                        simd_float4 v105 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v255 + 8, v184);
                        char v111 = (*v183 & 2) == 0 && DWORD1(v254) != 0;
                        if (v257)
                        {
                          uint64_t v112 = v256;
                          if (v256)
                          {
                            int v113 = (int *)(v257 + 28);
                            do
                            {
                              if ((*v183 & 2) != 0) {
                                int v114 = 0;
                              }
                              else {
                                int v114 = *v113;
                              }
                              v111 |= v114 != 0;
                              v113 += 8;
                              --v112;
                            }
                            while (v112);
                          }
                          simd_float4 v105 = (_anonymous_namespace_ *)*((void *)&v255 + 1);
                          if (*((void *)&v255 + 1)) {
                            simd_float4 v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((void **)&v255 + 1)
                          }
                                                                                              + 40))(*((void *)&v255 + 1));
                        }
                        uint64_t v115 = "color_disabled";
                        if (v111) {
                          uint64_t v115 = "color_enabled";
                        }
                      }
                      else
                      {
                        uint64_t v115 = "color_disabled";
                      }
                      int v116 = (char *)v198;
                      if ((BYTE8(v197) & 1) == 0) {
                        int v116 = (char *)&v197 + 9;
                      }
                      re::DynamicString::format(v104, (re::Allocator *)"%s_entity%llu_draw%zu_mesh%zu", (re::DynamicString *)v285, v116, v106, v191, v96);
                      int v117 = v278;
                      double v118 = v279;
                      double v119 = v280;
                      double v120 = v281;
                      if (v285[8]) {
                        unint64_t v121 = v286;
                      }
                      else {
                        unint64_t v121 = &v285[9];
                      }
                      if (v266) {
                        __int16 v122 = v268;
                      }
                      else {
                        __int16 v122 = v267;
                      }
                      float32x4_t v252 = v274;
                      long long v253 = v275;
                      long long v254 = v276;
                      long long v255 = v277;
                      v258[1] = v273;
                      v258[0] = v272;
                      boxStringForVisualizer((re::DynamicString *)&v259, v104, &v252, (float *)v258);
                      unint64_t v123 = v261;
                      if (v260) {
                        unint64_t v123 = *(unsigned char **)&v261[7];
                      }
                      if (v117) {
                        double v124 = v118;
                      }
                      else {
                        double v124 = 0.0;
                      }
                      if (v117) {
                        double v125 = v119;
                      }
                      else {
                        double v125 = 0.0;
                      }
                      if (v117) {
                        double v126 = v120;
                      }
                      else {
                        double v126 = 0.0;
                      }
                      re::DynamicString::format(v104, (re::Allocator *)"visualize mesh_part %zu %s %s %s %d %f %f %f\n", (re::DynamicString *)&v262, v191, v121, v122, v123, v278, *(void *)&v124, *(void *)&v125, *(void *)&v126);
                      if (v259 && (v260 & 1) != 0) {
                        (*(void (**)(void))(*(void *)v259 + 40))();
                      }
                      long long v127 = v264;
                      if (v263) {
                        long long v127 = *(const char **)&v264[7];
                      }
                      re::DynamicString::appendf((re::DynamicString *)&v240, "%s", v127);
                      if (v262 && (v263 & 1) != 0) {
                        (*(void (**)(void))(*(void *)v262 + 40))();
                      }
                      float32x4_t v15 = this;
                      uint64_t v20 = v187;
                      if (*(void *)v285 && (v285[8] & 1) != 0) {
                        (*(void (**)(void))(**(void **)v285 + 40))();
                      }
                      if (v265 && (v266 & 1) != 0) {
                        (*(void (**)(void))(*(void *)v265 + 40))();
                      }
                      if ((void)v197)
                      {
                        if (BYTE8(v197)) {
                          (*(void (**)(void))(*(void *)v197 + 40))();
                        }
                        long long v197 = 0u;
                        long long v198 = 0u;
                      }
                    }
                  }
                  if (*v100
                    && re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v193, v100))
                  {
                    if (*v193)
                    {
                      unint64_t v128 = 0xBF58476D1CE4E5B9 * (*v100 ^ ((unint64_t)*v100 >> 30));
                      unint64_t v129 = ((0x94D049BB133111EBLL * (v128 ^ (v128 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                               * (v128 ^ (v128 >> 27))) >> 31))
                           % *((unsigned int *)v15 + 18);
                      uint64_t v130 = *((void *)v15 + 8);
                      uint64_t v131 = *(unsigned int *)(*((void *)v15 + 7) + 4 * v129);
                      if (v131 == 0x7FFFFFFF)
                      {
LABEL_227:
                        LODWORD(v131) = 0x7FFFFFFF;
                      }
                      else
                      {
                        while (*(void *)(v130 + 72 * v131 + 16) != *v100)
                        {
                          uint64_t v131 = *(_DWORD *)(v130 + 72 * v131 + 8) & 0x7FFFFFFF;
                          if (v131 == 0x7FFFFFFF) {
                            goto LABEL_227;
                          }
                        }
                      }
                    }
                    else
                    {
                      uint64_t v130 = *((void *)v15 + 8);
                      LODWORD(v131) = 0x7FFFFFFF;
                    }
                    uint64_t v132 = v130 + 72 * v131;
                    unsigned int v135 = *(_DWORD *)(v132 + 56);
                    __int16 v133 = (int *)(v132 + 56);
                    uint64_t v134 = v135;
                    if (v135)
                    {
                      uint64_t v136 = 0;
                      long long v137 = (int *)(*(void *)(v130 + 72 * v131 + 40) + 8);
                      while (1)
                      {
                        int v138 = *v137;
                        v137 += 20;
                        if (v138 < 0) {
                          break;
                        }
                        if (v134 == ++v136)
                        {
                          LODWORD(v136) = v134;
                          break;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v136) = 0;
                    }
                    if (v134 != v136)
                    {
                      uint64_t v139 = v136;
                      long long v140 = (uint64_t *)(v130 + 72 * v131 + 40);
                      do
                      {
                        uint64_t v141 = *v140;
                        uint64_t v142 = *v140 + 80 * v139;
                        if (*(unsigned char *)(v142 + 24)) {
                          uint64_t v143 = *(const char **)(v141 + 80 * v139 + 32);
                        }
                        else {
                          uint64_t v143 = (const char *)(v141 + 80 * v139 + 25);
                        }
                        if (*(unsigned char *)(v141 + 80 * v139 + 56)) {
                          uint64_t v144 = *(const char **)(v141 + 80 * v139 + 64);
                        }
                        else {
                          uint64_t v144 = (const char *)(v142 + 57);
                        }
                        re::DynamicString::appendf((re::DynamicString *)&v244, "             %s: %s\n", v143, v144);
                        int v145 = *v133;
                        if (*v133 <= (v136 + 1)) {
                          int v145 = v136 + 1;
                        }
                        while (1)
                        {
                          uint64_t v139 = (v136 + 1);
                          if (v145 - 1 == v136) {
                            break;
                          }
                          LODWORD(v136) = v136 + 1;
                          int v146 = v139;
                          if ((*(_DWORD *)(*v140 + 80 * v139 + 8) & 0x80000000) != 0) {
                            goto LABEL_249;
                          }
                        }
                        int v146 = v145;
LABEL_249:
                        LODWORD(v136) = v146;
                      }
                      while (v134 != v146);
                    }
                  }
                  if (buf[0] && (void)v270 && (BYTE8(v270) & 1) != 0) {
                    (*(void (**)(void))(*(void *)v270 + 40))();
                  }
                  ++v96;
                }
                while (v96 < *v194);
              }
            }
            if (*(unsigned char *)(v20 + 208))
            {
              float v3 = *(float *)(v20 + 224);
              float v2 = *(float *)(v20 + 228);
              float v1 = *(float *)(v20 + 232);
              float v4 = *(float *)(v20 + 248);
              float v179 = *(float *)(v20 + 240);
              float v180 = *(float *)(v20 + 244);
              int v181 = 1;
            }
            uint64_t v19 = v191 + 1;
            float32x4_t v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "\n");
            uint64_t v28 = v189 + 1;
          }
          while ((unint64_t)(v189 + 1) < *(void *)(v20 + 176));
        }
      }
      v20 += 256;
    }
    while (v20 != v178);
  }
  else
  {
    int v181 = 0;
  }
  uint64_t v147 = *((unsigned int *)v15 + 32);
  if (v147)
  {
    uint64_t v148 = 0;
    uint64_t v149 = (int *)(*((void *)v15 + 14) + 8);
    while (1)
    {
      int v150 = *v149;
      v149 += 24;
      if (v150 < 0) {
        break;
      }
      if (v147 == ++v148)
      {
        LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *((_DWORD *)v15 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  }
  if (v147 != v148)
  {
    uint64_t v151 = v148;
    do
    {
      uint64_t v152 = *((void *)this + 14) + 96 * v151;
      if (*(unsigned char *)(v152 + 40)) {
        int v153 = "fade";
      }
      else {
        int v153 = "default";
      }
      if (buf[8]) {
        unsigned __int16 v154 = (const char *)v270;
      }
      else {
        unsigned __int16 v154 = (const char *)&buf[9];
      }
      uint64_t v155 = *(void *)(v152 + 16);
      id v156 = *(re::DynamicString **)this;
      v196[0] = (float32x4_t)xmmword_23435FD50;
      v196[1] = (float32x4_t)xmmword_23435FD60;
      v196[2] = (float32x4_t)xmmword_23435FD80;
      v196[3] = (float32x4_t)xmmword_23435FBB0;
      long long v157 = *(_OWORD *)(v152 + 64);
      v195[0] = *(_OWORD *)(v152 + 48);
      v195[1] = v157;
      boxStringForVisualizer((re::DynamicString *)&v252, v156, v196, (float *)v195);
      if (v252.i8[8]) {
        mach_timebase_info v158 = (const char *)v253;
      }
      else {
        mach_timebase_info v158 = &v252.i8[9];
      }
      re::DynamicString::appendf((re::DynamicString *)&v240, "visualize rpg %s %llu %s\n", v154, v155, v158);
      if (v252.i64[0] && (v252.i8[8] & 1) != 0) {
        (*(void (**)(void))(*(void *)v252.i64[0] + 40))();
      }
      float32x4_t v17 = *(_anonymous_namespace_ **)buf;
      if (*(void *)buf && (buf[8] & 1) != 0) {
        float32x4_t v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
      }
      if (*((_DWORD *)this + 32) <= (v148 + 1)) {
        int v159 = v148 + 1;
      }
      else {
        int v159 = *((_DWORD *)this + 32);
      }
      while (1)
      {
        uint64_t v151 = (v148 + 1);
        if (v159 - 1 == v148) {
          break;
        }
        LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v148 + 1;
        int v160 = v151;
        if ((*(_DWORD *)(*((void *)this + 14) + 96 * v151 + 8) & 0x80000000) != 0) {
          goto LABEL_291;
        }
      }
      int v160 = v159;
LABEL_291:
      LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v160;
    }
    while (v147 != v160);
  }
  if (v181) {
    re::DynamicString::appendf((re::DynamicString *)&v240, "visualize sorting_camera %f %f %f %f %f %f\n", v3, v2, v1, v179, v180, v4);
  }
  if (v241) {
    uint64_t v161 = v242;
  }
  else {
    uint64_t v161 = (char *)&v241 + 1;
  }
  re::DynamicString::appendf((re::DynamicString *)&v244, "\n\nDrawCallRecorder Visualizer commands:\n%s", v161);
  re::defaultTemporaryDirectoryPath((uint64_t)&v252);
  if (v252.i8[0])
  {
    if (v253) {
      id v163 = (char *)*((void *)&v253 + 1);
    }
    else {
      id v163 = (char *)&v253 + 1;
    }
    int v164 = v250;
    if (v249) {
      int v164 = v251;
    }
    re::DynamicString::format(*(re::DynamicString **)this, (re::Allocator *)"%s/draw_calls__timestamp%s__frame%llu.txt", (re::DynamicString *)&v265, v163, v164, *((void *)this + 18) & 0xFFFFFFFFFFFFFFFLL);
    *(void *)long long buf = &unk_26E70F318;
    v282.__vftable = (std::ios_base_vtbl *)&unk_26E70F340;
    *(void *)&uint8_t buf[8] = 0;
    std::ios_base::init(&v282, (char *)&v270 + 8);
    int v284 = -1;
    uint64_t v283 = 0;
    MEMORY[0x237DBC6A0]((char *)&v270 + 8);
    uint64_t v165 = std::filebuf::open();
    id v166 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
    if (v165) {
      std::ios_base::iostate v167 = 0;
    }
    else {
      std::ios_base::iostate v167 = v166->__rdstate_ | 4;
    }
    std::ios_base::clear(v166, v167);
    if ((*((unsigned char *)&v271 + *(void *)(*(void *)buf - 24)) & 5) != 0)
    {
      id v170 = *re::graphicsLogObjects(v169);
      if (!os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
      {
LABEL_325:
        MEMORY[0x237DBC6B0]((char *)&v270 + 8);
        std::iostream::~basic_iostream();
        MEMORY[0x237DBCB10](&v282);
        if (v265 && (v266 & 1) != 0) {
          (*(void (**)(void))(*(void *)v265 + 40))();
        }
        goto LABEL_328;
      }
      if (v266) {
        unsigned int v171 = v268;
      }
      else {
        unsigned int v171 = v267;
      }
      *(_DWORD *)__int16 v285 = 136315138;
      *(void *)&v285[4] = v171;
      mach_timebase_info v172 = "DrawCallRecorder couldn't write to file %s";
    }
    else
    {
      if (v245) {
        uint64_t v173 = v246;
      }
      else {
        uint64_t v173 = (char *)&v245 + 1;
      }
      size_t v174 = strlen(v173);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v270, (uint64_t)v173, v174);
      uint64_t v175 = (re *)std::filebuf::close();
      if (!v175) {
        std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)((char *)&v271 + *(void *)(*(void *)buf - 24)) | 4);
      }
      id v170 = *re::graphicsLogObjects(v175);
      if (!os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_325;
      }
      if (v266) {
        uint64_t v176 = v268;
      }
      else {
        uint64_t v176 = v267;
      }
      *(_DWORD *)__int16 v285 = 136315138;
      *(void *)&v285[4] = v176;
      mach_timebase_info v172 = "DrawCallRecorder wrote to %s";
    }
    _os_log_impl(&dword_233120000, v170, OS_LOG_TYPE_DEFAULT, v172, v285, 0xCu);
    goto LABEL_325;
  }
  id v168 = *re::graphicsLogObjects(v162);
  if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v168, OS_LOG_TYPE_DEFAULT, "DrawCallRecorder couldn't determine a path to write to", buf, 2u);
  }
LABEL_328:
  if (v252.i8[0] && v252.i64[1] && (v253 & 1) != 0) {
    (*(void (**)(void))(*(void *)v252.i64[1] + 40))();
  }
  if (v240 && (v241 & 1) != 0) {
    (*(void (**)(void))(*(void *)v240 + 40))();
  }
  if (v244 && (v245 & 1) != 0) {
    (*(void (**)(void))(*(void *)v244 + 40))();
  }
  uint64_t result = v248;
  if (v248)
  {
    if (v249) {
      return (*(uint64_t (**)(void))(*(void *)v248 + 40))();
    }
  }
  return result;
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  float v2 = a1 + 54;
  MEMORY[0x237DBC6B0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237DBCB10](v2);
  return a1;
}

uint64_t re::DynamicArray<re::EncodedDrawCallDetails>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 320 * v4;
        do
        {
          uint64_t v7 = v3 + v5;
          if (*(unsigned char *)(v3 + v5 + 256)) {
            re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(v7 + 272);
          }
          re::DynamicString::deinit((re::DynamicString *)(v7 + 224));
          if (*(unsigned char *)(v7 + 96)) {
            re::DynamicArray<unsigned long>::deinit(v3 + v5 + 160);
          }
          re::DynamicString::deinit((re::DynamicString *)(v3 + v5 + 64));
          re::DynamicString::deinit((re::DynamicString *)(v3 + v5 + 32));
          re::DynamicString::deinit((re::DynamicString *)(v3 + v5));
          v5 += 320;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        uint64_t v6 = (re::DynamicString *)(v3 + 16);
        do
        {
          if (*((unsigned char *)v6 - 8)) {
            re::DynamicString::deinit(v6);
          }
          uint64_t v6 = (re::DynamicString *)((char *)v6 + 56);
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 160 * v4;
        do
        {
          re::DynamicString::deinit(v3);
          unint64_t v3 = (re::DynamicString *)((char *)v3 + 160);
          v5 -= 160;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void ___ZL45drawCallRecordingEnabledByEnvironmentVariablev_block_invoke()
{
  re::readBooleanEnvironmentVariable((re *)"ENABLE_DRAW_CALL_RECORDER", (uint64_t)v1);
  if (v1[0]) {
    char v0 = v1[1];
  }
  else {
    char v0 = 0;
  }
  drawCallRecordingEnabledByEnvironmentVariable(void)::isEnabled = v0;
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x237DBC6B0](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x237DBCB10);
}

{
  void *v1;
  uint64_t vars8;

  float v1 = a1 + 52;
  MEMORY[0x237DBC6B0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x237DBCB10](v1);
  JUMPOUT(0x237DBCBD0);
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  float v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x237DBC6B0](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x237DBCB10);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  float v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x237DBC6B0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237DBCB10](v1 + 54);
  JUMPOUT(0x237DBCBD0);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  float v1 = a1 + 54;
  MEMORY[0x237DBC6B0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237DBCB10](v1);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (HIBYTE(a2))
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 256, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 8;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 8, 16);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      float32x4_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v9 << 8;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::DrawCallRecorderGroup::DrawCallRecorderGroup(v11, (uint64_t)v8);
          re::DynamicArray<re::EncodedDrawCallDetails>::deinit((uint64_t)(v8 + 20));
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v8 + 14);
          re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit((uint64_t)(v8 + 9));
          re::DynamicString::deinit((re::DynamicString *)(v8 + 4));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 32;
          v11 += 256;
          v10 -= 256;
        }
        while (v10);
        float32x4_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 re::DrawCallRecorderGroup::DrawCallRecorderGroup(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a2 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a2 + 56) = 0;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v7;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v8;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v12;
  uint64_t v13 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v13;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  result.n128_u64[0] = 0x7FFFFFFFLL;
  *(void *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v15 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = v15;
  uint64_t v16 = *(void *)(a1 + 128);
  *(void *)(a1 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(a2 + 128);
  *(void *)(a2 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v16;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 16re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  uint64_t v17 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 16re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v17;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 16re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  uint64_t v18 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = v18;
  uint64_t v19 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = v19;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(a1 + 184);
  LODWORD(v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = *(unsigned __int8 *)(a2 + 208);
  *(unsigned char *)(a1 + 20re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v19;
  if (v19)
  {
    __n128 result = *(__n128 *)(a2 + 224);
    long long v20 = *(_OWORD *)(a2 + 240);
    *(__n128 *)(a1 + 224) = result;
    *(_OWORD *)(a1 + 240) = v20;
  }
  return result;
}

void re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    size_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    size_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_78, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::DrawCallRecorderGroup>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 8;
        do
        {
          re::DynamicArray<re::EncodedDrawCallDetails>::deinit((uint64_t)(v3 + 20));
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v3 + 14);
          re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit((uint64_t)(v3 + 9));
          re::DynamicString::deinit((re::DynamicString *)(v3 + 4));
          re::DynamicString::deinit((re::DynamicString *)v3);
          v3 += 32;
          v5 -= 256;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(uint64_t **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::DrawCallRecorderGroup>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          *(void *)&unsigned char v28[16] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v17;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&unsigned char v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          unsigned int v20 = v18;
          if (v18)
          {
            uint64_t v21 = 0;
            unint64_t v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(void *)&v28[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v28[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v28[16] + v21), *(void *)&v28[16] + v21 + 16, *(void *)&v28[16] + v21 + 24);
                unsigned int v20 = *(_DWORD *)&v28[32];
              }
              ++v22;
              v21 += 72;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v10 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v26 + 24) = 0u;
  v26 += 24;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_DWORD *)(v26 + 32) = 0;
  *(void *)(v26 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v26, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          *(void *)&v30[16] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v16;
          long long v18 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v17 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v18;
          unsigned int v19 = v17;
          if (v17)
          {
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            do
            {
              if ((*(_DWORD *)(*(void *)&v30[16] + v20 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v30[16] + v20) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v30[16] + v20), *(void *)&v30[16] + v20 + 16, *(void *)&v30[16] + v20 + 32);
                unsigned int v19 = *(_DWORD *)&v30[32];
              }
              ++v21;
              v20 += 96;
            }
            while (v21 < v19);
          }
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 96 * v9 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 96 * v9 + 16) = *a4;
  signed int v25 = (_OWORD *)(*(void *)(a1 + 16) + 96 * v9);
  long long v26 = *a5;
  long long v27 = a5[1];
  long long v28 = a5[3];
  void v25[4] = a5[2];
  v25[5] = v28;
  void v25[2] = v26;
  v25[3] = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DebugSettingsManager::setWithErrorCode<BOOL>(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  BOOL v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = re::DebugSettingsManager::contains<BOOL>(a1, a2);
  if (!v7)
  {
    uint64_t v8 = *a3 | 0x200000000;
    uint64_t v9 = 0x7FFFFFFFLL;
    if (*(void *)a1)
    {
      unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                               * (v10 ^ (v10 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if (v11 != 0x7FFFFFFF)
      {
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v9 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v12 + 40 * v11 + 8), a2))
        {
          uint64_t v11 = *(_DWORD *)(v12 + 40 * v11) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            goto LABEL_11;
          }
        }
        uint64_t v9 = v11;
      }
    }
LABEL_11:
    uint64_t v13 = *(void *)(a1 + 16) + 40 * v9;
    int v15 = *(unsigned __int8 *)(v13 + 24);
    uint64_t v14 = v13 + 24;
    if (!v15) {
      *(unsigned char *)uint64_t v14 = 1;
    }
    uint64_t v7 = 0;
    *(void *)(v14 + 4) = v8;
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::determineClippingNeeds(uint64_t a1, uint64_t *a2, unsigned int a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int32x4_t a13, float32x4_t a14)
{
  float32x4_t v16 = *a4;
  float32x4_t v15 = a4[1];
  float32x4_t v17 = vsubq_f32(v15, *a4);
  v17.i32[3] = 0;
  float32x4_t v18 = vmaxnmq_f32(v17, (float32x4_t)0);
  if (vmulq_laneq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v18.f32, 1), v18, 2).f32[0] <= 0.00001) {
    return 3;
  }
  uint64_t v19 = 0;
  float v20 = *(float *)a5;
  float v21 = *(float *)(a5 + 4);
  a13.i32[0] = *(_DWORD *)(a5 + 16);
  a14.i32[0] = *(_DWORD *)(a5 + 20);
  float v22 = *(float *)(a5 + 8);
  float v23 = *(float *)(a5 + 24);
  float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  long long v85 = 0uLL;
  long long v86 = 0uLL;
  long long v83 = 0uLL;
  long long v84 = 0uLL;
  long long v81 = 0uLL;
  long long v82 = 0uLL;
  long long v79 = 0uLL;
  long long v80 = 0uLL;
  float32x4_t v25 = *a6;
  float32x4_t v26 = a6[1];
  v27.i64[0] = 0x7F0000007FLL;
  v27.i32[2] = 127;
  float32x4_t v28 = a6[2];
  float32x4_t v29 = a6[3];
  do
  {
    if (v19) {
      float v30 = *(float *)a13.i32;
    }
    else {
      float v30 = v20;
    }
    if ((v19 & 2) != 0) {
      float v31 = a14.f32[0];
    }
    else {
      float v31 = v21;
    }
    if ((v19 & 4) != 0) {
      float v32 = v23;
    }
    else {
      float v32 = v22;
    }
    float32x4_t v33 = vaddq_f32(v29, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25, v30), v26, v31), v28, v32));
    float32x4_t v34 = vdivq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3));
    *(&v79 + v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = (__int128)v34;
    v24.i32[3] = 0;
    v34.i32[3] = 0;
    float32x4_t v24 = vminnmq_f32(v24, v34);
    v27.i32[3] = 0;
    float32x4_t v27 = vmaxnmq_f32(v27, v34);
    ++v19;
  }
  while (v19 != 8);
  uint32x4_t v35 = (uint32x4_t)vcgtq_f32(v16, vaddq_f32(v24, (float32x4_t)vdupq_n_s32(0x3C23D70Au)));
  v35.i32[3] = v35.i32[2];
  if ((vmaxvq_u32(v35) & 0x80000000) != 0
    || (uint32x4_t v36 = (uint32x4_t)vcgtq_f32(vaddq_f32(v24, (float32x4_t)vdupq_n_s32(0xBC23D70A)), v15),
        v36.i32[3] = v36.i32[2],
        (vmaxvq_u32(v36) & 0x80000000) != 0)
    || (uint32x4_t v37 = (uint32x4_t)vcgtq_f32(v16, vaddq_f32(v27, (float32x4_t)vdupq_n_s32(0x3C23D70Au))),
        v37.i32[3] = v37.i32[2],
        (vmaxvq_u32(v37) & 0x80000000) != 0)
    || (uint32x4_t v38 = (uint32x4_t)vcgtq_f32(vaddq_f32(v27, (float32x4_t)vdupq_n_s32(0xBC23D70A)), v15),
        v38.i32[3] = v38.i32[2],
        (vmaxvq_u32(v38) & 0x80000000) != 0))
  {
    uint32x4_t v77 = (uint32x4_t)vcgtq_f32(v16, v27);
    v77.i32[3] = v77.i32[2];
    if ((vmaxvq_u32(v77) & 0x80000000) == 0)
    {
      uint32x4_t v78 = (uint32x4_t)vcgtq_f32(v24, v15);
      v78.i32[3] = v78.i32[2];
      if ((vmaxvq_u32(v78) & 0x80000000) == 0) {
        return a3 == 0;
      }
    }
    return 3;
  }
  uint64_t v39 = *(void *)(a1 + 8);
  if (!v39) {
    return 2;
  }
  unint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v41 = a1 + 24;
  }
  uint64_t v43 = *a2;
  unint64_t v42 = a2[1];
  int32x4_t v44 = vdupq_n_s32(0x7F800000u);
  float32x4_t v45 = (float32x4_t)vdupq_n_s32(0xBC23D70A);
  __asm { FMOV            V4.4S, #1.0 }
  v51.i64[0] = 0x3F0000003F000000;
  v51.i64[1] = 0x3F0000003F000000;
  while (1)
  {
    unint64_t v52 = *(unsigned __int16 *)(v41 + 2 * v40);
    if (v42 <= v52) {
      break;
    }
    uint64_t v53 = 0;
    uint64_t v54 = v43 + (v52 << 6);
    a13.i64[0] = *(void *)v54;
    v55.i64[0] = 0;
    v55.i64[1] = *(unsigned int *)(v54 + 8);
    v14.i64[0] = *(void *)(v54 + 16);
    v56.i64[0] = 0;
    v56.i64[1] = *(unsigned int *)(v54 + 24);
    v26.i64[0] = *(void *)(v54 + 32);
    v57.i64[0] = 0;
    v57.i64[1] = *(unsigned int *)(v54 + 40);
    float32x4_t v63 = (float32x4_t)vzip1q_s32(a13, (int32x4_t)v26);
    int32x4_t v58 = vzip2q_s32(v55, v57);
    int32x4_t v59 = vzip1q_s32((int32x4_t)v14, (int32x4_t)0);
    int32x4_t v60 = vzip2q_s32(v56, (int32x4_t)xmmword_23435FBB0);
    float32x4_t v14 = (float32x4_t)vzip1q_s32((int32x4_t)v63, v59);
    float32x4_t v61 = (float32x4_t)vzip2q_s32((int32x4_t)v63, v59);
    float32x4_t v26 = (float32x4_t)vzip1q_s32(v58, v60);
    float32x4_t v62 = (float32x4_t)vzip2q_s32(v58, v60);
    v63.i64[0] = 0x7F0000007FLL;
    v63.i32[2] = 127;
    float32x4_t v64 = (float32x4_t)v44;
    do
    {
      a14.i32[2] = *(_DWORD *)(v54 + 44);
      a14.i32[1] = *(_DWORD *)(v54 + 28);
      a14.i32[0] = *(_DWORD *)(v54 + 12);
      float32x4_t v65 = vsubq_f32(*(float32x4_t *)((char *)&v79 + v53), a14);
      float32x4_t v66 = vaddq_f32(v62, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v65.f32[0]), v61, *(float32x2_t *)v65.f32, 1), v26, v65, 2));
      float32x4_t v67 = vdivq_f32(v66, (float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 3));
      v64.i32[3] = 0;
      v67.i32[3] = 0;
      float32x4_t v64 = vminnmq_f32(v64, v67);
      v63.i32[3] = 0;
      float32x4_t v63 = vmaxnmq_f32(v63, v67);
      v53 += 16;
    }
    while (v53 != 128);
    unsigned int v68 = (float16x4_t *)(v43 + (v52 << 6));
    v69.i64[0] = vcvtq_f32_f16(v68[6]).u64[0];
    _H17 = v68[6].i16[2];
    __asm { FCVT            S17, H17 }
    v72.i64[0] = vcvtq_f32_f16(v68[7]).u64[0];
    _H19 = v68[7].i16[2];
    __asm { FCVT            S19, H19 }
    v69.i64[1] = _S17;
    v72.i64[1] = _S19;
    a14 = vmulq_f32(vsubq_f32(_Q4, vaddq_f32(vmaxnmq_f32(v69, v72), v45)), v51);
    uint32x4_t v75 = (uint32x4_t)vcgeq_f32(a14, vabsq_f32(v64));
    v75.i32[3] = v75.i32[2];
    if ((vminvq_u32(v75) & 0x80000000) == 0) {
      return v40 >= a3;
    }
    a13 = vcgeq_f32(a14, vabsq_f32(v63));
    a13.i32[3] = a13.i32[2];
    a13.i32[0] = vminvq_u32((uint32x4_t)a13);
    if ((a13.i32[0] & 0x80000000) == 0) {
      return v40 >= a3;
    }
    if (++v40 == v39) {
      return 2;
    }
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, 0.0, 0.0, *(double *)v44.i64, *(double *)v45.i64, *(double *)_Q4.i64, 0.0000305175853, *(double *)a13.i64, *(double *)a14.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, *(unsigned __int16 *)(v41 + 2 * v40), v42, v79, v80, v81,
    v82,
    v83,
    v84,
    v85,
    v86);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RenderFrame::RenderFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a2 + 104);
  if (v15) {
    uint64_t v15 = *(void *)(v15 + 296);
  }
  *(void *)a1 = v15;
  *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a2;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a3;
  re::RenderGraphDataStore::RenderGraphDataStore(a1 + 32, a5);
  re::RenderFrameData::RenderFrameData(a1 + 264, *(void *)(*(void *)(*(void *)(a2 + 104) + 296) + 688), a6);
  *(void *)(a1 + 32re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = &str_106;
  *(void *)(a1 + 352) = &str_106;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 36re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a5;
  *(void *)(a1 + 376) = a6;
  *(void *)(a1 + 384) = a7;
  *(void *)(a1 + 392) = a8;
  *(unsigned char *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 40re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_WORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(void *)(a1 + 476) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 524) = 0x7FFFFFFFLL;
  *(void *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 56re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 60re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(void *)(a1 + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 1;
  *(_OWORD *)(a1 + 68re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 30re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_DWORD *)(a1 + 3064) = 1;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(void *)(a1 + 312re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 3136) = 0;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_DWORD *)(a1 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 0;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_DWORD *)(a1 + 3296) = 0;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_DWORD *)(a1 + 3176) = 0;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_DWORD *)(a1 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3332) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(void *)(a1 + 33re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_DWORD *)(a1 + 3392) = 0;
  *(void *)(a1 + 3396) = 0x7FFFFFFFLL;
  *(void *)(a1 + 3440) = 0;
  *(_DWORD *)(a1 + 3432) = 0;
  *(void *)(a1 + 3424) = 0;
  *(_OWORD *)(a1 + 340re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  float32x4_t v16 = re::RenderGraphResourceDescriptions::RenderGraphResourceDescriptions((re::RenderGraphResourceDescriptions *)(a1 + 3448));
  *(_DWORD *)(a1 + 376re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 3760) = 0;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_DWORD *)(a1 + 380re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3844) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_DWORD *)(a1 + 3896) = 0;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_DWORD *)(a1 + 3936) = 0;
  *(_DWORD *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_DWORD *)(a1 + 4016) = 0;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_DWORD *)(a1 + 4056) = 0;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_DWORD *)(a1 + 4096) = 0;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 41re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 416re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4196) = 0u;
  *(void *)(a1 + 4212) = 0x7FFFFFFFLL;
  *(void *)(a1 + 4224) = 850045863;
  *(void *)(a1 + 4280) = 0;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 42re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  if (a4)
  {
    float32x4_t v18 = re::globalAllocators(v16);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 160, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v19, 0);
    *(void *)uint64_t v19 = &unk_26E70F450;
    float v20 = re::Allocator::Allocator((re::Allocator *)(v19 + 24), "RenderGraphStringAllocator", 1);
    *(void *)(v19 + 24) = &unk_26E70F0E8;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_DWORD *)(v19 + 144) = 0;
    *(_OWORD *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 92) = 0u;
    *(void *)(v19 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0x7FFFFFFFLL;
    uint64_t v21 = *(void *)(a1 + 3824);
    *(void *)(a1 + 3824) = v19;
    if (v21)
    {

      uint64_t v19 = *(void *)(a1 + 3824);
    }
    *(void *)(v19 + 64) = 0;
    *(void *)(v19 + 72) = 1024;
    *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
    *(void *)(v19 + 56) = 0;
    *(void *)(v19 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v19 + 96) = 0;
    uint64_t v29 = 0xEE74EC71D35974;
    id v30 = 0;
    uint64_t v28 = 0x6A3DF053A9B45F3DLL;
    re::RenderFrame::registerExternalTexture(a1, &v30, &v29, &v28, 0);
    *(void *)(a1 + 536) = *(void *)(a1 + 376);
    re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((void *)(a1 + 536), 0);
    ++*(_DWORD *)(a1 + 560);
    *(void *)(a1 + 576) = *(void *)(a1 + 376);
    re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity((void *)(a1 + 576), 0);
    ++*(_DWORD *)(a1 + 600);
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 440, *(void *)(a1 + 376), 3);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 488, *(void *)(a1 + 376), 3);
    float v23 = re::globalAllocators(v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23[2] + 32))(v23[2], 160, 16);
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v24, 0);
    *(void *)uint64_t v24 = &unk_26E70F498;
    *(void *)&long long v25 = 0x7F0000007FLL;
    *((void *)&v25 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v24 + 32) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v25;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_DWORD *)(v24 + 96) = 0;
    *(void *)(v24 + 100) = 0x7FFFFFFFLL;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
    *(_DWORD *)(v24 + 144) = 0;
    *(void *)(v24 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0x7FFFFFFFLL;
    uint64_t v26 = *(void *)(a1 + 432);
    *(void *)(a1 + 432) = v24;
    if (v26) {

    }
    return a1;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) RenderFrame requires a ColorManager", "colorManager", "RenderFrame", 150);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::RenderFrame::registerExternalTexture(uint64_t a1, id *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 336))
  {
    if (!*(unsigned char *)(a1 + 425))
    {
      re::DynamicString::format((re::DynamicString *)"External texture '%s' cannot be registered inside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v11, a5, *(void *)(a1 + 344), *(void *)(a1 + 352));
      v14.n128_u64[0] = 2002;
      v14.n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
      uint64_t v15 = v11;
      uint64_t v17 = v13;
      long long v16 = v12;
      __n128 v9 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v14);
      if (v15)
      {
        if (v16) {
          (*(void (**)(__n128))(*(void *)v15 + 40))(v9);
        }
      }
    }
  }
  id v10 = *a2;
  v14.n128_u64[0] = ((*a3 << 6) + (*a3 >> 2) + *a4 - 0x61C8864680B583E9) ^ *a3;
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(a1 + 3312, v14.n128_u64, &v10);
  if (v10) {
}
  }

void re::RenderFrame::~RenderFrame(re::RenderFrame *this)
{
  unint64_t v2 = *((void *)this + 496);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *((void *)this + 498);
      uint64_t v5 = *(void *)(v4 + 8 * i);
      if (v5)
      {

        *(void *)(v4 + 8 * i) = 0;
        unint64_t v2 = *((void *)this + 496);
      }
    }
  }
  re::DynamicArray<re::RenderFrame::ProvideCall>::deinit((uint64_t)this + 536);
  re::DynamicArray<re::RenderFrame::PickupAction>::deinit((uint64_t)this + 576);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 55);
  v6.n128_f64[0] = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 61);
  if (*((void *)this + 381))
  {
    uint64_t v7 = *((void *)this + 382);
    if (v7)
    {
      if (*((unsigned char *)this + 3064)) {
        uint64_t v8 = (id **)((char *)this + 3072);
      }
      else {
        uint64_t v8 = (id **)*((void *)this + 385);
      }
      uint64_t v9 = 8 * v7;
      do
      {
        id v10 = *v8++;
        (*((void (**)(id *, __n128))*v10 + 2))(v10, v6);
        objc_destroyWeak(v10 + 1);
        v10[1] = 0;
        v9 -= 8;
      }
      while (v9);
    }
  }
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
  uint64_t v11 = *((void *)this + 54);
  if (v11)
  {

    *((void *)this + 54) = 0;
  }
  uint64_t v12 = *((void *)this + 478);
  if (v12)
  {

    *((void *)this + 47re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  }
  re::RenderFrame::onCommandBuffersComplete((std::mutex *)this);
  re::RenderFrame::onFrameComplete((uint64_t)this);
  std::mutex::~mutex((std::mutex *)this + 66);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 522);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 4136);
  if (*((void *)this + 514))
  {
    uint64_t v13 = *((void *)this + 515);
    if (v13)
    {
      __n128 v14 = (void **)*((void *)this + 516);
      uint64_t v15 = 32 * v13;
      do
      {
        long long v16 = *v14;
        v14 += 4;

        v15 -= 32;
      }
      while (v15);
      (*(void (**)(void, void))(**((void **)this + 514) + 40))(*((void *)this + 514), *((void *)this + 516));
      *((void *)this + 515) = 0;
      *((void *)this + 516) = 0;
    }
    *((void *)this + 5re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 0;
  }
  uint64_t v17 = *((void *)this + 509);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 513);
    if (v18)
    {
      uint64_t v19 = *((void *)this + 511);
      if (v19)
      {
        uint64_t v20 = v18 + 48 * v19;
        uint64_t v21 = *((void *)this + 513);
        do
        {
          *(void *)uint64_t v21 = 0;
          ++*(_DWORD *)(v21 + 8);
          v21 += 48;
        }
        while (v21 != v20);
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    }
    *((void *)this + 51re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
    *((void *)this + 5re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = 0;
    *((void *)this + 511) = 0;
    *((void *)this + 50re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    ++*((_DWORD *)this + 1024);
  }
  uint64_t v22 = *((void *)this + 504);
  if (v22)
  {
    float v23 = (id *)*((void *)this + 508);
    if (v23)
    {
      uint64_t v24 = *((void *)this + 506);
      if (v24)
      {
        uint64_t v25 = 8 * v24;
        do
        {
          if (*v23)
          {

            id *v23 = 0;
          }
          ++v23;
          v25 -= 8;
        }
        while (v25);
        uint64_t v22 = *((void *)this + 504);
        float v23 = (id *)*((void *)this + 508);
      }
      (*(void (**)(uint64_t, id *))(*(void *)v22 + 40))(v22, v23);
    }
    *((void *)this + 50re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *((void *)this + 505) = 0;
    *((void *)this + 506) = 0;
    *((void *)this + 504) = 0;
    ++*((_DWORD *)this + 1014);
  }
  uint64_t v26 = (uint64_t *)((char *)this + 3952);
  uint64_t v27 = *((void *)this + 499);
  if (v27)
  {
    uint64_t v28 = *((void *)this + 503);
    if (v28)
    {
      uint64_t v29 = *((void *)this + 501);
      if (v29)
      {
        uint64_t v30 = 104 * v29;
        float v31 = (re::DynamicString *)(v28 + 32);
        do
        {
          re::DynamicString::deinit(v31);
          float v32 = (void *)*((void *)v31 - 2);
          if (v32)
          {

            *((void *)v31 - 2) = 0;
          }
          float32x4_t v33 = (void *)*((void *)v31 - 3);
          if (v33)
          {

            *((void *)v31 - re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
          }
          *((void *)v31 - 4) = 0;
          float v31 = (re::DynamicString *)((char *)v31 + 104);
          v30 -= 104;
        }
        while (v30);
        uint64_t v27 = *((void *)this + 499);
        uint64_t v28 = *((void *)this + 503);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 40))(v27, v28);
    }
    *((void *)this + 50re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
    *((void *)this + 500) = 0;
    *((void *)this + 501) = 0;
    *((void *)this + 49re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    ++*((_DWORD *)this + 1004);
  }
  uint64_t v34 = *v26;
  if (*v26)
  {
    uint64_t v35 = *((void *)this + 498);
    if (v35)
    {
      uint64_t v36 = *((void *)this + 496);
      if (v36)
      {
        uint64_t v37 = 8 * v36;
        do
        {
          if (*(void *)v35)
          {

            *(void *)uint64_t v35 = 0;
          }
          v35 += 8;
          v37 -= 8;
        }
        while (v37);
        uint64_t v34 = *((void *)this + 494);
        uint64_t v35 = *((void *)this + 498);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v35);
    }
    *((void *)this + 49re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *((void *)this + 495) = 0;
    *((void *)this + 496) = 0;
    *uint64_t v26 = 0;
    ++*((_DWORD *)this + 994);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 3912);
  re::DynamicArray<re::Function<void ()(re::FrameCount)>>::deinit((uint64_t)this + 3872);
  re::DynamicArray<re::Function<void ()(re::FrameCount)>>::deinit((uint64_t)this + 3832);
  uint64_t v38 = *((void *)this + 478);
  if (v38)
  {

    *((void *)this + 47re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  }
  re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit((uint64_t)this + 3784);
  re::DynamicArray<re::RenderGraphScopeOutput>::deinit((uint64_t)this + 3744);
  re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions((re::RenderFrame *)((char *)this + 3448));
  re::DynamicArray<re::RenderGraph>::deinit((uint64_t)this + 3408);
  re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 420);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 414);
  re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer((re::RenderFrame *)((char *)this + 3192));
  re::DynamicArray<re::DetailedError>::deinit((uint64_t)this + 3152);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 3112);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)this + 664);
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 77);
  re::DynamicArray<re::RenderFrame::PickupAction>::deinit((uint64_t)this + 576);
  re::DynamicArray<re::RenderFrame::ProvideCall>::deinit((uint64_t)this + 536);
  re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 61);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 55);
  uint64_t v39 = *((void *)this + 54);
  if (v39)
  {

    *((void *)this + 54) = 0;
  }
  re::RenderFrameData::~RenderFrameData((re::RenderFrame *)((char *)this + 264));
  re::RenderGraphDataStore::deinit((re::RenderFrame *)((char *)this + 32));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 26);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 144);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 12);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 6);
}

void re::RenderFrame::onCommandBuffersComplete(std::mutex *this)
{
  unint64_t v2 = this + 66;
  std::mutex::lock(this + 66);
  uint64_t v3 = *(void *)&this[60].__m_.__opaque[40];
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    uint64_t v5 = (uint64_t *)(this[61].__m_.__sig + 32);
    do
    {
      uint64_t v7 = *(void *)&this[5].__m_.__opaque[40];
      uint64_t v6 = *v5;
      v5 += 5;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v7);
      v4 -= 40;
    }
    while (v4);
  }
  re::DynamicArray<re::Function<void ()(re::FrameCount)>>::clear((uint64_t (***)(void))&this[60].__m_.__opaque[24]);
  std::mutex::unlock(v2);
}

uint64_t re::RenderFrame::onFrameComplete(uint64_t this)
{
  if (!*(unsigned char *)(this + 400))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 3848);
    if (v2)
    {
      uint64_t v3 = 40 * v2;
      uint64_t v4 = (uint64_t *)(*(void *)(this + 3864) + 32);
      do
      {
        uint64_t v6 = *(void *)(v1 + 368);
        uint64_t v5 = *v4;
        v4 += 5;
        this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v6);
        v3 -= 40;
      }
      while (v3);
    }
    *(unsigned char *)(v1 + 400) = 1;
  }
  return this;
}

uint64_t re::DynamicArray<re::RenderFrame::ProvideCall>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        uint64_t v6 = (uint64_t *)(v3 + 16);
        do
        {
          re::FixedArray<CoreIKTransform>::deinit(v6);
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderFrame::PickupAction>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        uint64_t v6 = (re::DynamicString *)(v3 + 40);
        do
        {
          *((void *)v6 + 4) = 0;
          re::DynamicString::deinit(v6);
          re::DynamicString::deinit((re::DynamicString *)((char *)v6 - 32));
          uint64_t v6 = (re::DynamicString *)((char *)v6 + 80);
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v4 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::RenderFrame::setRenderGraphScopes(re::RenderFrame *this, const char *__s, const char *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v6 = 0x9E3779B97F4A7C17;
  *((void *)this + 4re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = __s;
  *((void *)this + 44) = a3;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v10);
    unint64_t v8 = (v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t result = strlen(a3);
  if (result)
  {
    uint64_t result = MurmurHash3_x64_128((uint64_t)a3, result, 0, &v10);
    unint64_t v6 = ((v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583E9;
  }
  *((void *)this + 45) = ((v8 >> 2) + (v8 << 6) + v6) ^ v8;
  return result;
}

void re::RenderFrame::emitGraph(re::RenderFrame *this, const char *__s, const char *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (!__s || !*__s)
  {
LABEL_54:
    re::internal::assertLog((re::internal *)4, (uint64_t)__s, a3, "assertion failure: '%s' (%s:line %i) ", "typeScope != nullptr && strlen(typeScope) > 0", "emitGraph", 226);
    _os_crash();
    __break(1u);
LABEL_55:
    re::internal::assertLog((re::internal *)4, (uint64_t)__s, "assertion failure: '%s' (%s:line %i) ", "graphScope != nullptr && strlen(graphScope) > 0", "emitGraph", 227);
    _os_crash();
    __break(1u);
LABEL_56:
    v36[1] = 0;
    *((_OWORD *)v5 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    long long v46 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    uint64_t v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v3;
    __int16 v43 = 2048;
    int32x4_t v44 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!a3 || !*a3) {
    goto LABEL_55;
  }
  size_t v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, (unint64_t *)buf);
    unint64_t v10 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
  }
  else
  {
    unint64_t v10 = 0;
  }
  size_t v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, (unint64_t *)buf);
    uint64_t v12 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
  }
  else
  {
    uint64_t v12 = 0;
  }
  v36[0] = ((v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + v12) ^ v10;
  BOOL v13 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 440, v36);
  if (v13)
  {
    __n128 v14 = *re::graphicsLogObjects((re *)v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = __s;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = a3;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Duplicate graph was emitted and skipped: %s::%s", buf, 0x16u);
    }
    return;
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 440, v36);
  size_t v15 = strlen(__s);
  uint64_t v4 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v15 + 1, 0);
  memcpy(v4, __s, v15);
  *((unsigned char *)v4 + v15) = 0;
  size_t v16 = strlen(a3);
  uint64_t v17 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v16 + 1, 0);
  memcpy(v17, a3, v16);
  *((unsigned char *)v17 + v16) = 0;
  re::RenderFrame::setRenderGraphScopes(this, (const char *)v4, (const char *)v17);
  if (*((unsigned char *)this + 425))
  {
    re::RenderGraphManager::getProviderPointers(*(re::RenderGraphManager **)this, __s, *((re::Allocator **)this + 47), (uint64_t *)buf);
    if (!*(void *)&buf[8]) {
      goto LABEL_50;
    }
    uint64_t v4 = *(void **)&buf[16];
    uint64_t v5 = (uint8_t *)(8 * *(void *)&buf[8]);
    while (1)
    {
      unint64_t v3 = *v4;
      if (!*v4) {
        break;
      }
      if ((*(uint64_t (**)(void, const char *, const char *, re::RenderFrame *))(*(void *)v3 + 16))(*v4, __s, a3, this))
      {
        *((unsigned char *)this + 336) = 1;
        (*(void (**)(unint64_t, const char *, const char *, re::RenderFrame *))(*(void *)v3 + 24))(v3, __s, a3, this);
        *((unsigned char *)this + 336) = 0;
      }
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        uint64_t v19 = *(void *)buf;
        if (*(void *)buf && *(void *)&buf[8])
        {
          uint64_t v20 = *(void *)&buf[16];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
    }
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "provider", "emitGraph", 242);
    _os_crash();
    __break(1u);
LABEL_53:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) ", "providerList[index]", "emitGraph", 257);
    _os_crash();
    __break(1u);
    goto LABEL_54;
  }
  re::RenderGraphManager::getProviderPointers(*(re::RenderGraphManager **)this, __s, *((re::Allocator **)this + 47), &v33);
  if (v34)
  {
    unint64_t v3 = 0;
    uint64_t v5 = buf;
    do
    {
      uint64_t v22 = *(void *)(v35 + 8 * v3);
      if (!v22) {
        goto LABEL_53;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t, const char *, const char *, re::RenderFrame *))(*(void *)v22 + 16))(v22, __s, a3, this);
      uint64_t v4 = v34;
      if (!v23)
      {
        if ((unint64_t)v34 <= v3) {
          goto LABEL_56;
        }
        *(void *)(v35 + 8 * vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
      }
      *((void *)this + 41) ^= v23
                              - 0x61C8864680B583E9
                              + (*((void *)this + 41) << 6)
                              + (*((void *)this + 41) >> 2);
      ++v3;
    }
    while (v3 < (unint64_t)v4);
    if (v4)
    {
      *(_OWORD *)long long buf = *(_OWORD *)((char *)this + 344);
      uint64_t v24 = re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)&buf[16], (uint64_t)&v33);
      unint64_t v25 = *((void *)this + 69);
      unint64_t v26 = *((void *)this + 68);
      if (v25 >= v26)
      {
        unint64_t v27 = v25 + 1;
        if (v26 < v25 + 1)
        {
          if (*((void *)this + 67))
          {
            uint64_t v28 = 2 * v26;
            BOOL v29 = v26 == 0;
            unint64_t v30 = 8;
            if (!v29) {
              unint64_t v30 = v28;
            }
            if (v30 <= v27) {
              unint64_t v31 = v27;
            }
            else {
              unint64_t v31 = v30;
            }
            re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((void *)this + 67, v31);
          }
          else
          {
            re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((void *)this + 67, v27);
            ++*((_DWORD *)this + 140);
          }
        }
        unint64_t v25 = *((void *)this + 69);
      }
      uint64_t v32 = *((void *)this + 71) + 40 * v25;
      *(_OWORD *)uint64_t v32 = *(_OWORD *)buf;
      re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)(v32 + 16), (uint64_t)&buf[16]);
      ++*((void *)this + 69);
      ++*((_DWORD *)this + 140);
      if (*(void *)&buf[16] && *(void *)&buf[24]) {
        (*(void (**)(void))(**(void **)&buf[16] + 40))();
      }
    }
  }
  uint64_t v19 = v33;
  if (v33 && v34)
  {
    uint64_t v20 = v35;
LABEL_49:
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 40))(v19, v20);
  }
LABEL_50:
  *((void *)this + 4re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = &str_106;
  *((void *)this + 44) = &str_106;
  *((void *)this + 45) = 0;
}

void re::RenderFrame::addTargetOutput(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  uint64_t v4 = __s;
  if (!__s) {
    uint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      size_t v11 = strlen(v4);
      uint64_t v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((unsigned char *)v12 + v11) = 0;
      uint64_t v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = "";
    int v18 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    long long v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    unint64_t v10 = *((void *)this + 470);
    unsigned int ScopeOutputIndex = v10 - 1;
  }
  else
  {
    unint64_t v10 = *((void *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "addTargetOutput", 310);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v13 = *((void *)this + 472) + 136 * ScopeOutputIndex;
    uint64_t v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::addTargetToLane(v13, &v15, v14, 1);
  }
}

unint64_t re::RenderFrame::getScopeOutputIndex(re::RenderFrame *this, const char *__s)
{
  unint64_t v2 = *((void *)this + 470);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *((void *)this + 472);
  size_t v5 = strlen(__s);
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = v4 + 136 * v6;
    if (*(void *)(v8 + 8) == v5 && !memcmp(*(const void **)v8, __s, v5)) {
      break;
    }
    unint64_t v6 = (v7 + 1);
    unint64_t v7 = v6;
    if (v2 <= v6) {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

uint64_t *re::DynamicArray<re::RenderGraphScopeOutput>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphScopeOutput>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 136 * v4;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v5 + 16) = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 16) = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = "";
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 76) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v5 + 40), (uint64_t *)(a2 + 40));
  *(_OWORD *)(v5 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  v5 += 88;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, (uint64_t *)(a2 + 88));
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderFrame::inheritLaneProperties(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  unint64_t v4 = __s;
  if (!__s) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      size_t v11 = strlen(v4);
      uint64_t v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((unsigned char *)v12 + v11) = 0;
      unint64_t v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = "";
    int v18 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    long long v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    unint64_t v10 = *((void *)this + 470);
    unsigned int ScopeOutputIndex = v10 - 1;
  }
  else
  {
    unint64_t v10 = *((void *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "inheritLaneProperties", 339);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v13 = *((void *)this + 472) + 136 * ScopeOutputIndex;
    uint64_t v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::inheritPropertiesFromLane(v13, &v15, v14);
  }
}

{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  double v14[2];
  uint64_t v15;
  void v16[2];
  void v17[2];
  int v18;
  _OWORD v19[2];
  long long v20;
  uint64_t v21[4];
  long long v22;

  unint64_t v4 = __s;
  if (!__s) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      size_t v11 = strlen(v4);
      uint64_t v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((unsigned char *)v12 + v11) = 0;
      unint64_t v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = "";
    int v18 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    long long v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    unint64_t v10 = *((void *)this + 470);
    unsigned int ScopeOutputIndex = v10 - 1;
  }
  else
  {
    unint64_t v10 = *((void *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "inheritLaneProperties", 397);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v13 = *((void *)this + 472) + 136 * ScopeOutputIndex;
    uint64_t v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::inheritPropertiesFromLane(v13, &v15, v14);
  }
}

void re::RenderFrame::addBufferOutput(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  unint64_t v4 = __s;
  if (!__s) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      size_t v11 = strlen(v4);
      uint64_t v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((void *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((unsigned char *)v12 + v11) = 0;
      unint64_t v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = "";
    int v18 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    long long v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    unint64_t v10 = *((void *)this + 470);
    unsigned int ScopeOutputIndex = v10 - 1;
  }
  else
  {
    unint64_t v10 = *((void *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "addBufferOutput", 368);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v13 = *((void *)this + 472) + 136 * ScopeOutputIndex;
    uint64_t v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::addBufferToLane(v13, &v15, v14, 1);
  }
}

void re::RenderFrame::createTarget(re::RenderFrame *this@<X0>, const re::RenderGraphTargetDescription *a2@<X1>, const char *__s@<X2>, void *a4@<X8>)
{
  if (!*((unsigned char *)this + 336) && !*((unsigned char *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Target '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v9, __s, *((void *)this + 43), *((void *)this + 44));
    v12.n128_u64[0] = 2001;
    v12.n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
    uint64_t v13 = v9;
    uint64_t v15 = v11;
    long long v14 = v10;
    __n128 v8 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v12);
    if (v13)
    {
      if (v14) {
        (*(void (**)(__n128))(*(void *)v13 + 40))(v8);
      }
    }
  }
  re::RenderGraphResourceDescriptions::addTarget((re::GrowableLinearAllocator **)this + 431, a2, __s, a4);
}

void re::RenderFrame::createBuffer(re::RenderFrame *this@<X0>, const re::RenderGraphBufferDescription *a2@<X1>, const char *__s@<X2>, void *a4@<X8>)
{
  if (!*((unsigned char *)this + 336) && !*((unsigned char *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Buffer '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v9, __s, *((void *)this + 43), *((void *)this + 44));
    v12.n128_u64[0] = 3001;
    v12.n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
    uint64_t v13 = v9;
    uint64_t v15 = v11;
    long long v14 = v10;
    __n128 v8 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v12);
    if (v13)
    {
      if (v14) {
        (*(void (**)(__n128))(*(void *)v13 + 40))(v8);
      }
    }
  }
  re::RenderGraphResourceDescriptions::addBuffer((re::GrowableLinearAllocator **)this + 431, a2, __s, a4);
}

uint64_t re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(uint64_t a1, unint64_t *a2, id *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<NS::SharedPtr<MTL::Texture>&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<re::BufferSlice&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<re::BufferSlice&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 32 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 32 * v8 + 8) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 32 * v8;
  return v10 + 16;
}

void re::RenderFrame::registerExternalBuffer(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 336))
  {
    if (!*(unsigned char *)(a1 + 425))
    {
      re::DynamicString::format((re::DynamicString *)"External buffer '%s' cannot be registered inside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v13, a5, *(void *)(a1 + 344), *(void *)(a1 + 352));
      v16.n128_u64[0] = 3002;
      v16.n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
      uint64_t v17 = v13;
      uint64_t v19 = v15;
      long long v18 = v14;
      __n128 v11 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v16);
      if (v17)
      {
        if (v18) {
          (*(void (**)(__n128))(*(void *)v17 + 40))(v11);
        }
      }
    }
  }
  id v9 = *(id *)a2;
  uint64_t v10 = *(void **)(a2 + 8);
  v12[0] = v9;
  v12[1] = v10;
  v16.n128_u64[0] = ((*a3 << 6) + (*a3 >> 2) + *a4 - 0x61C8864680B583E9) ^ *a3;
  re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<re::BufferSlice&>(a1 + 3360, v16.n128_u64, (uint64_t)v12);
  if (v12[0]) {
}
  }

id *re::RenderFrame::getExternalBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  uint64_t result = (id *)re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 3360, (uint64_t *)(a2 + 40));
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (id *)*result;
    unint64_t v6 = (id *)v5[1];
    *a3 = result;
    a3[1] = v6;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

double re::RenderFrame::tryGetInputTarget@<D0>(re::RenderFrame *this@<X0>, const char *a2@<X1>, const char *__s@<X2>, double *a4@<X8>)
{
  unint64_t v4 = __s;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 336) && !*((unsigned char *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Input target (lane '%s', override scope '%s') cannot be retrieved outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)v19, a2, __s, *((void *)this + 43), *((void *)this + 44));
    v20[0].n128_u64[0] = 2003;
    v20[0].n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
    v20[1].n128_u64[0] = *(void *)v19;
    v20[2].n128_u64[1] = *(void *)&v19[24];
    *(__n128 *)((char *)&v20[1] + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(__n128 *)&v19[8];
    __n128 v18 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), v20);
    if (v20[1].n128_u64[0])
    {
      if (v20[1].n128_u8[8]) {
        (*(void (**)(__n128))(*(void *)v20[1].n128_u64[0] + 40))(v18);
      }
    }
  }
  if (!v4) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1) {
    goto LABEL_17;
  }
  uint64_t v9 = ScopeOutputIndex;
  unint64_t v10 = *((void *)this + 470);
  if (v10 <= ScopeOutputIndex)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v19 = 136315906;
    *(void *)&void v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 797;
    *(_WORD *)&v19[18] = 2048;
    *(void *)&v19[20] = v9;
    *(_WORD *)&v19[28] = 2048;
    *(void *)&v19[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2)
  {
    uint64_t v11 = *a2;
    if (*a2)
    {
      char v12 = a2[1];
      if (v12)
      {
        uint64_t v13 = a2 + 2;
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *(unsigned __int8 *)v13++;
          char v12 = v14;
        }
        while (v14);
      }
      unint64_t v15 = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v15 = 0;
    }
  }
  else
  {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(*((void *)this + 472) + 136 * ScopeOutputIndex + 40, v15);
  if (!v16)
  {
LABEL_17:
    *a4 = 0.0;
    double result = NAN;
    a4[1] = NAN;
  }
  else
  {
    *a4 = *(double *)(v16 + 80);
    double result = *(double *)(v16 + 88);
    a4[1] = result;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 144 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *(_DWORD *)(v5 + 144 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 144 * v3 + 8) == a2) {
        return v5 + 144 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 144 * v3 + 16;
}

double re::RenderFrame::tryGetInputBuffer@<D0>(re::RenderFrame *this@<X0>, const char *a2@<X1>, const char *__s@<X2>, double *a4@<X8>)
{
  unint64_t v4 = __s;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 336) && !*((unsigned char *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Input buffer (lane '%s', override scope '%s') cannot be retrieved outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)v19, a2, __s, *((void *)this + 43), *((void *)this + 44));
    v20[0].n128_u64[0] = 3003;
    v20[0].n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
    v20[1].n128_u64[0] = *(void *)v19;
    v20[2].n128_u64[1] = *(void *)&v19[24];
    *(__n128 *)((char *)&v20[1] + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(__n128 *)&v19[8];
    __n128 v18 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), v20);
    if (v20[1].n128_u64[0])
    {
      if (v20[1].n128_u8[8]) {
        (*(void (**)(__n128))(*(void *)v20[1].n128_u64[0] + 40))(v18);
      }
    }
  }
  if (!v4) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1) {
    goto LABEL_17;
  }
  uint64_t v9 = ScopeOutputIndex;
  unint64_t v10 = *((void *)this + 470);
  if (v10 <= ScopeOutputIndex)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v19 = 136315906;
    *(void *)&void v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 797;
    *(_WORD *)&v19[18] = 2048;
    *(void *)&v19[20] = v9;
    *(_WORD *)&v19[28] = 2048;
    *(void *)&v19[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2)
  {
    uint64_t v11 = *a2;
    if (*a2)
    {
      char v12 = a2[1];
      if (v12)
      {
        uint64_t v13 = a2 + 2;
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *(unsigned __int8 *)v13++;
          char v12 = v14;
        }
        while (v14);
      }
      unint64_t v15 = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v15 = 0;
    }
  }
  else
  {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(*((void *)this + 472) + 136 * ScopeOutputIndex + 88, v15);
  if (!v16)
  {
LABEL_17:
    *a4 = 0.0;
    double result = NAN;
    a4[1] = NAN;
  }
  else
  {
    *a4 = *(double *)(v16 + 96);
    double result = *(double *)(v16 + 104);
    a4[1] = result;
  }
  return result;
}

uint64_t re::RenderFrame::specifyScopeLane(void *a1, uint64_t *a2, void **a3, const char *a4)
{
  uint64_t v12 = 0;
  id v13 = 0;
  id v14 = 0;
  int v15 = -1;
  long long v17 = 0uLL;
  *((void *)&v16 + 1) = 0;
  re::DynamicString::setCapacity(&v16, 0);
  HIBYTE(v1re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0xFFFFFFFFLL;
  char v22 = 0;
  uint64_t v12 = *a2;
  NS::SharedPtr<MTL::Texture>::operator=(&v13, a3);
  size_t v8 = strlen(a4);
  v23[0] = a4;
  v23[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)&v16, (uint64_t)v23);
  __int16 v18 = 257;
  __n128 v9 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((_anonymous_namespace_ *)(a1 + 499), (uint64_t)&v12);
  uint64_t v10 = a1[501];
  if ((void)v16)
  {
    if (BYTE8(v16)) {
      (*(void (**)(__n128))(*(void *)v16 + 40))(v9);
    }
    long long v16 = 0u;
    long long v17 = 0u;
  }
  if (v14)
  {

    id v14 = 0;
  }
  if (v13) {

  }
  return (v10 - 1);
}

__n128 re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 104 * v4;
  unint64_t v6 = *(void **)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)(v5 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v6;
  *(void *)(v5 + 16) = *(id *)(a2 + 16);
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 32), (const re::DynamicString *)(a2 + 32));
  __n128 result = *(__n128 *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(v5 + 96) = *(unsigned char *)(a2 + 96);
  *(__n128 *)(v5 + 64) = result;
  *(_OWORD *)(v5 + 80) = v8;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrame::specifyScopeLane(re::RenderFrame *this, const re::WeakStringID *a2, const unsigned int *a3, const char *a4)
{
  uint64_t v12 = 0;
  id v13 = 0;
  id v14 = 0;
  int v15 = -1;
  long long v17 = 0uLL;
  *((void *)&v16 + 1) = 0;
  re::DynamicString::setCapacity(&v16, 0);
  HIBYTE(v1re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0xFFFFFFFFLL;
  char v22 = 0;
  uint64_t v12 = *(void *)a2;
  int v15 = *a3;
  size_t v8 = strlen(a4);
  v23[0] = a4;
  v23[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)&v16, (uint64_t)v23);
  __int16 v18 = 257;
  __n128 v9 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)this + 3992), (uint64_t)&v12);
  uint64_t v10 = *((void *)this + 501);
  if ((void)v16)
  {
    if (BYTE8(v16)) {
      (*(void (**)(__n128))(*(void *)v16 + 40))(v9);
    }
    long long v16 = 0u;
    long long v17 = 0u;
  }
  if (v14)
  {

    id v14 = 0;
  }
  if (v13) {

  }
  return (v10 - 1);
}

uint64_t re::RenderFrame::specifyScopeLane(void *a1, char *a2, void **a3, const char *a4, int a5)
{
  uint64_t v18 = 0;
  id v19 = 0;
  id v20 = 0;
  int v21 = -1;
  long long v23 = 0uLL;
  *((void *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, 0);
  HIBYTE(v24) = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0xFFFFFFFFLL;
  char v28 = 0;
  if (a2)
  {
    uint64_t v10 = *a2;
    if (*a2)
    {
      char v11 = a2[1];
      if (v11)
      {
        uint64_t v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v18 = v10;
  NS::SharedPtr<MTL::Texture>::operator=(&v20, a3);
  size_t v14 = strlen(a4);
  v29[0] = a4;
  v29[1] = v14;
  re::DynamicString::operator=((re::DynamicString *)&v22, (uint64_t)v29);
  __int16 v24 = 257;
  HIDWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = a5;
  __n128 v15 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((_anonymous_namespace_ *)(a1 + 499), (uint64_t)&v18);
  uint64_t v16 = a1[501];
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(__n128))(*(void *)v22 + 40))(v15);
    }
    long long v22 = 0u;
    long long v23 = 0u;
  }
  if (v20)
  {

    id v20 = 0;
  }
  if (v19) {

  }
  return (v16 - 1);
}

uint64_t re::RenderFrame::getStreamNameForWorldRoot(re::DynamicString **this, const re::StringID *a2, uint64_t a3)
{
  uint64_t v11 = (a3 + (*(void *)a2 >> 3) + (*(void *)a2 >> 1 << 6) - 0x61C8864680B583E9) ^ (*(void *)a2 >> 1);
  unint64_t v6 = (char *)(this + 61);
  uint64_t v7 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(this + 61), &v11);
  if (!v7)
  {
    re::DynamicString::format(this[47], (re::Allocator *)"%s_W%llu", (re::DynamicString *)&v9, *((void *)a2 + 1), a3);
    uint64_t v7 = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v6, (unint64_t *)&v11, &v9);
    if (v9)
    {
      if (v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  return v7;
}

uint64_t re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 48 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 48 * v8 + 8) != v6)
  {
    LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + 48 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 48 * v8;
  return v10 + 16;
}

uint64_t re::RenderFrame::applyPropertiesToScopeLane(re::RenderFrame *this, const char *a2, const re::RenderGraphTargetDescription *a3, const char *__s)
{
  unint64_t v4 = __s;
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!__s) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    re::DynamicString::format((re::DynamicString *)"applyPropertiesToScopeLane called on unknown graphScope %s.", (re::DynamicString *)v27, v4);
    re::RenderFrame::addError((uint64_t)this, (uint64_t)v27);
    uint64_t result = *(void *)&v27[0];
    if (*(void *)&v27[0] && (BYTE8(v27[0]) & 1) != 0) {
      return (*(uint64_t (**)(void))(**(void **)&v27[0] + 40))();
    }
  }
  else
  {
    if (*((void *)this + 470) <= (unint64_t)ScopeOutputIndex)
    {
      memset(v27, 0, sizeof(v27));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *((void *)this + 472) + 136 * ScopeOutputIndex + 40;
    if (a2)
    {
      uint64_t v10 = *a2;
      if (*a2)
      {
        char v11 = a2[1];
        if (v11)
        {
          uint64_t v12 = a2 + 2;
          do
          {
            uint64_t v10 = 31 * v10 + v11;
            int v13 = *(unsigned __int8 *)v12++;
            char v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(void *)&v27[0] = v10;
    uint64_t result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v9, (uint64_t *)v27);
    if (result)
    {
      __n128 v15 = (void *)result;
      if (*(void *)(result + 16))
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = (_OWORD *)(v15[4] + v16);
          *(void *)&v27[0] = 0;
          *((void *)&v27[0] + 1) = -1;
          v27[0] = *v18;
          uint64_t result = re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v27);
          if (*(_DWORD *)result == 3)
          {
            if (!*(_DWORD *)(result + 4)) {
              *(_DWORD *)(result + 4) = *((_DWORD *)a3 + 1);
            }
            int v19 = *(_DWORD *)(result + 12);
            if (v19 == -1)
            {
              int v19 = *((_DWORD *)a3 + 3);
              *(_DWORD *)(result + 12) = v19;
            }
            int v20 = *(_DWORD *)(result + 16);
            if (v20 == -1)
            {
              int v20 = *((_DWORD *)a3 + 4);
              *(_DWORD *)(result + 16) = v20;
            }
            int v21 = *(_DWORD *)(result + 20);
            if (v21 == -1)
            {
              int v21 = *((_DWORD *)a3 + 5);
              *(_DWORD *)(result + 20) = v21;
            }
            int v22 = *(_DWORD *)(result + 24);
            if (v22 == -1)
            {
              int v22 = *((_DWORD *)a3 + 6);
              *(_DWORD *)(result + 24) = v22;
            }
            if (v19 != -1 && v20 != -1 && v21 != -1 && v22 != -1) {
              *(_DWORD *)(result + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_DWORD *)a3 + 2);
            }
            if (*(_DWORD *)(result + 28) == -1) {
              *(_DWORD *)(result + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((_DWORD *)a3 + 7);
            }
            if (*(_DWORD *)(result + 32) == -1) {
              *(_DWORD *)(result + 32) = *((_DWORD *)a3 + 8);
            }
            if (*(void *)(result + 88) == -1) {
              *(void *)(result + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((void *)a3 + 11);
            }
          }
          ++v17;
          v16 += 16;
        }
        while (v15[2] > v17);
      }
      if (v15[7])
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        uint64_t v25 = (re::RenderFrame *)((char *)this + 3448);
        do
        {
          uint64_t v26 = (_OWORD *)(v15[9] + v23);
          *(void *)&v27[0] = 0;
          *((void *)&v27[0] + 1) = -1;
          v27[0] = *v26;
          uint64_t result = re::RenderGraphResourceDescriptions::bufferDescription(v25, (uint64_t *)v27);
          if (*(_DWORD *)result == 3)
          {
            if (*(void *)(result + 8) == -1) {
              *(void *)(result + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = (unint64_t)(float)(*(float *)(result + 20)
            }
                                                                * (float)(*((_DWORD *)a3 + 4)
                                                                                      * *((_DWORD *)a3 + 3)));
            if (*(void *)(result + 32) == -1) {
              *(void *)(result + 32) = *((void *)a3 + 11);
            }
          }
          ++v24;
          v23 += 16;
        }
        while (v15[7] > v24);
      }
    }
  }
  return result;
}

uint64_t re::RenderFrame::applyPropertiesToScopeLane(re::RenderFrame *this, const char *a2, const re::RenderGraphBufferDescription *a3, const char *__s)
{
  unint64_t v4 = __s;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!__s) {
    unint64_t v4 = (const char *)*((void *)this + 44);
  }
  unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    re::DynamicString::format((re::DynamicString *)"applyPropertiesToScopeLane called on unknown graphScope %s.", (re::DynamicString *)v23, v4);
    re::RenderFrame::addError((uint64_t)this, (uint64_t)v23);
    uint64_t result = *(void *)&v23[0];
    if (*(void *)&v23[0] && (BYTE8(v23[0]) & 1) != 0) {
      return (*(uint64_t (**)(void))(**(void **)&v23[0] + 40))();
    }
  }
  else
  {
    if (*((void *)this + 470) <= (unint64_t)ScopeOutputIndex)
    {
      memset(v23, 0, sizeof(v23));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *((void *)this + 472) + 136 * ScopeOutputIndex + 88;
    if (a2)
    {
      uint64_t v10 = *a2;
      if (*a2)
      {
        char v11 = a2[1];
        if (v11)
        {
          uint64_t v12 = a2 + 2;
          do
          {
            uint64_t v10 = 31 * v10 + v11;
            int v13 = *(unsigned __int8 *)v12++;
            char v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(void *)&v23[0] = v10;
    uint64_t result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v9, (uint64_t *)v23);
    if (result)
    {
      __n128 v15 = (void *)result;
      if (*(void *)(result + 56))
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = (_OWORD *)(v15[9] + v16);
          *(void *)&v23[0] = 0;
          *((void *)&v23[0] + 1) = -1;
          v23[0] = *v18;
          uint64_t result = re::RenderGraphResourceDescriptions::bufferDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v23);
          if (*(_DWORD *)result == 3)
          {
            if (*(void *)(result + 8) == -1) {
              *(void *)(result + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((void *)a3 + 1);
            }
            if (*(void *)(result + 32) == -1) {
              *(void *)(result + 32) = *((void *)a3 + 4);
            }
          }
          ++v17;
          v16 += 16;
        }
        while (v15[7] > v17);
      }
      if (v15[2])
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        int v21 = (re::RenderFrame *)((char *)this + 3448);
        do
        {
          int v22 = (_OWORD *)(v15[4] + v19);
          *(void *)&v23[0] = 0;
          *((void *)&v23[0] + 1) = -1;
          v23[0] = *v22;
          uint64_t result = re::RenderGraphResourceDescriptions::targetDescription(v21, (uint64_t *)v23);
          if (*(_DWORD *)result == 3)
          {
            if (*(_DWORD *)(result + 12) == -1) {
              *(_DWORD *)(result + 12) = (float)(*(float *)(result + 40)
            }
                                                             * (float)*((unint64_t *)a3 + 1));
            if (*(_DWORD *)(result + 16) == -1) {
              *(_DWORD *)(result + 16) = (float)(*(float *)(result + 44)
            }
                                                             * (float)*((unint64_t *)a3 + 1));
            if (*(void *)(result + 88) == -1) {
              *(void *)(result + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *((void *)a3 + 4);
            }
          }
          ++v20;
          v19 += 16;
        }
        while (v15[2] > v20);
      }
    }
  }
  return result;
}

void re::RenderFrame::pickupScopeLane(re::RenderFrame *this, const char *a2, const char *__s, const char *a4)
{
  unint64_t v4 = a4;
  if (a4)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
  unint64_t v4 = (const char *)*((void *)this + 44);
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v6 = *a2;
  if (*a2)
  {
    char v7 = a2[1];
    if (v7)
    {
      uint64_t v8 = a2 + 2;
      do
      {
        uint64_t v6 = 31 * v6 + v7;
        int v9 = *(unsigned __int8 *)v8++;
        char v7 = v9;
      }
      while (v9);
    }
    uint64_t v10 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_11:
  if (*((unsigned char *)this + 425))
  {
    uint64_t v21 = v10;
    re::RenderFrame::pickupScopeLaneInternal(this, &v21, __s, v4);
  }
  else
  {
    char v11 = (re::RenderFrame *)((char *)this + 576);
    uint64_t v12 = *((void *)this + 69);
    re::DynamicString::DynamicString((re::DynamicString *)&v15, __s, *((re::Allocator **)this + 47));
    re::DynamicString::DynamicString((re::DynamicString *)v14, v4, *((re::Allocator **)this + 47));
    int v17 = v12;
    re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)&v15);
    re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)v14);
    uint64_t v20 = v10;
    __n128 v13 = re::DynamicArray<re::RenderFrame::PickupAction>::add(v11, (__n128 *)&v17);
    uint64_t v20 = 0;
    if (v19[0])
    {
      if (v19[1]) {
        (*(void (**)(__n128))(*(void *)v19[0] + 40))(v13);
      }
      __n128 v13 = 0uLL;
      memset(v19, 0, sizeof(v19));
    }
    if (v18[0])
    {
      if (v18[1]) {
        (*(void (**)(__n128))(*(void *)v18[0] + 40))(v13);
      }
      __n128 v13 = 0uLL;
      memset(v18, 0, sizeof(v18));
    }
    if (*(void *)&v14[0])
    {
      if (BYTE8(v14[0])) {
        (*(void (**)(__n128))(**(void **)&v14[0] + 40))(v13);
      }
      __n128 v13 = 0uLL;
      memset(v14, 0, sizeof(v14));
    }
    if (v15)
    {
      if (v16) {
        (*(void (**)(__n128))(*(void *)v15 + 40))(v13);
      }
    }
  }
}

double re::RenderFrame::pickupScopeLaneInternal(void *a1, uint64_t *a2, const char *a3, const char *a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  unint64_t ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, a3);
  if (ScopeOutputIndex == -1)
  {
    int v40 = a3;
    char v16 = "pickupScopeLane called with unknown srcScopeName \"%s\".";
LABEL_7:
    re::DynamicString::format((re::DynamicString *)v16, (re::DynamicString *)&v52, v40);
    re::RenderFrame::addError((uint64_t)a1, (uint64_t)&v52);
    if ((void)v52)
    {
      if (BYTE8(v52)) {
        (*(void (**)(void))(*(void *)v52 + 40))();
      }
    }
    return result;
  }
  unint64_t v9 = ScopeOutputIndex;
  unint64_t v10 = ScopeOutputIndex;
  unint64_t v11 = a1[470];
  if (v11 <= ScopeOutputIndex)
  {
    uint64_t v51 = 0;
    long long v53 = 0u;
    memset(v54, 0, 48);
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int32x4_t v57 = 136315906;
    *(void *)&v57[4] = "operator[]";
    *(_WORD *)&v57[12] = 1024;
    *(_DWORD *)&v57[14] = 789;
    __int16 v58 = 2048;
    unint64_t v59 = v10;
    __int16 v60 = 2048;
    unint64_t v61 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v12 = a1[472];
  if (!*(void *)(v12 + 136 * ScopeOutputIndex + 40)
    || (uint64_t v13 = *a2,
        unint64_t v14 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30)),
        uint64_t v15 = *(unsigned int *)(*(void *)(v12 + 136 * ScopeOutputIndex + 48)
                              + 4
                              * (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v14 ^ (v14 >> 27))) >> 31))
                               % *(unsigned int *)(v12 + 136 * ScopeOutputIndex + 64))),
        v15 == 0x7FFFFFFF))
  {
LABEL_5:
    char v16 = "pickupScopeLane called with missing lane.";
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v12 + 136 * ScopeOutputIndex + 56);
  while (*(void *)(v18 + 144 * v15 + 8) != v13)
  {
    LODWORD(v15) = *(_DWORD *)(v18 + 144 * v15) & 0x7FFFFFFF;
    if (v15 == 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  unint64_t v19 = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, a4);
  if (v19 == -1)
  {
    if ((const char *)a1[44] != a4)
    {
      size_t v20 = strlen(a4);
      uint64_t v21 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(a1[478] + 24), v20 + 1, 0);
      memcpy(v21, a4, v20);
      *((unsigned char *)v21 + v20) = 0;
      a4 = (const char *)v21;
    }
    *(void *)&long long v52 = a4;
    *((void *)&v52 + 1) = strlen(a4);
    *(void *)&long long v53 = 0;
    *((void *)&v53 + 1) = "";
    *(_DWORD *)uint64_t v54 = 0;
    memset(&v54[8], 0, 48);
    long long v56 = 0u;
    memset(v55, 0, sizeof(v55));
    *(_DWORD *)&v54[44] = 0x7FFFFFFF;
    DWORD1(v56) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((_anonymous_namespace_ *)(a1 + 468), (uint64_t)&v52);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v55);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v54[8]);
    re::StringID::destroyString((re::StringID *)&v53);
    unint64_t v11 = a1[470];
    unint64_t v19 = (v11 - 1);
  }
  if (v9 != v19)
  {
    if (v11 > v10)
    {
      unint64_t v9 = v19;
      if (v11 > v19)
      {
        uint64_t v22 = a1[472];
        uint64_t v23 = (const char **)(v22 + 136 * v19);
        uint64_t v24 = *v23;
        *(void *)int32x4_t v57 = 0;
        *(void *)&v57[8] = "";
        uint64_t v25 = v22 + 136 * v10;
        uint64_t v26 = *(void *)v57;
        uint64_t v27 = *(void *)&v57[8];
        *(void *)int32x4_t v57 = 0;
        *(void *)&v57[8] = "";
        uint64_t v28 = *(void *)(v25 + 24);
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v25 + 16) & 1;
        *(void *)(v25 + 24) = v27;
        *(void *)&long long v52 = v29;
        *((void *)&v52 + 1) = v28;
        *(void *)(v25 + 16) = v26;
        re::StringID::destroyString((re::StringID *)&v52);
        re::StringID::destroyString((re::StringID *)v57);
        uint64_t v30 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v25 + 40, a2);
        if (v30)
        {
          uint64_t v31 = v30;
          int v32 = *(_DWORD *)(v30 + 88);
          if (v32 != -1)
          {
            int v33 = *(_DWORD *)(v30 + 92);
            if (v33 != -1)
            {
              uint64_t v50 = *a2;
              uint64_t v47 = *(void *)(v30 + 80);
              int v48 = v32;
              int v49 = v33;
              re::RenderGraphScopeOutput::addTargetToLane((uint64_t)v23, &v50, (double *)&v47, 0);
              uint64_t v50 = 0;
            }
          }
          if (*(void *)(v31 + 16))
          {
            uint64_t v34 = 0;
            unint64_t v35 = 0;
            do
            {
              uint64_t v46 = *a2;
              uint64_t v36 = (uint64_t *)(*(void *)(v31 + 32) + v34);
              uint64_t v44 = 0;
              uint64_t v45 = -1;
              uint64_t v44 = *v36;
              uint64_t v45 = v36[1];
              re::RenderGraphScopeOutput::inheritPropertiesFromLane((uint64_t)v23, &v46, (double *)&v44);
              uint64_t v46 = 0;
              ++v35;
              v34 += 16;
            }
            while (*(void *)(v31 + 16) > v35);
          }
          if (*(void *)(v31 + 56))
          {
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            do
            {
              uint64_t v43 = *a2;
              __int16 v39 = (uint64_t *)(*(void *)(v31 + 72) + v37);
              uint64_t v41 = 0;
              uint64_t v42 = -1;
              uint64_t v41 = *v39;
              uint64_t v42 = v39[1];
              re::RenderGraphScopeOutput::inheritPropertiesFromLane((uint64_t)v23, &v43, (double *)&v41);
              uint64_t v43 = 0;
              ++v38;
              v37 += 16;
            }
            while (*(void *)(v31 + 56) > v38);
          }
          *(void *)(v31 + 80) = 0;
          double result = NAN;
          *(void *)(v31 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = -1;
          *(void *)(v31 + 16) = 0;
          ++*(_DWORD *)(v31 + 24);
          *(void *)(v31 + 56) = 0;
          ++*(_DWORD *)(v31 + 64);
        }
        return result;
      }
LABEL_34:
      uint64_t v51 = 0;
      long long v53 = 0u;
      memset(v54, 0, 48);
      long long v52 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int32x4_t v57 = 136315906;
      *(void *)&v57[4] = "operator[]";
      *(_WORD *)&v57[12] = 1024;
      *(_DWORD *)&v57[14] = 789;
      __int16 v58 = 2048;
      unint64_t v59 = v9;
      __int16 v60 = 2048;
      unint64_t v61 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_33:
    uint64_t v51 = 0;
    long long v53 = 0u;
    memset(v54, 0, 48);
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int32x4_t v57 = 136315906;
    *(void *)&v57[4] = "operator[]";
    *(_WORD *)&v57[12] = 1024;
    *(_DWORD *)&v57[14] = 789;
    __int16 v58 = 2048;
    unint64_t v59 = v10;
    __int16 v60 = 2048;
    unint64_t v61 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_34;
  }
  return result;
}

__n128 re::DynamicArray<re::RenderFrame::PickupAction>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderFrame::PickupAction>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 80 * v4;
  *(_DWORD *)uint64_t v5 = a2->n128_u32[0];
  *(_OWORD *)(v5 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 32) = a2[2].n128_u64[0];
  unint64_t v6 = a2[1].n128_u64[0];
  *(void *)(v5 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  unint64_t v7 = a2[1].n128_u64[1];
  a2[2].n128_u64[0] = 0;
  unint64_t v9 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = v7;
  a2[1].n128_u64[0] = v9;
  a2[1].n128_u64[1] = v8;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 40) = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = 0;
  unint64_t v10 = *(void *)(v5 + 56);
  *(void *)(v5 + 56) = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v10;
  __n128 result = a2[4];
  *(__n128 *)(v5 + 64) = result;
  a2[4].n128_u64[0] = 0;
  unint64_t v12 = *(void *)(v5 + 48);
  *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v12;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrame::makeRenderGraph(re::RenderFrame *this, const char *a2, unint64_t a3)
{
  if (!*((unsigned char *)this + 336) && !*((unsigned char *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Render graph '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v12, a2, *((void *)this + 43), *((void *)this + 44));
    v8.n128_u64[0] = 1001;
    v8.n128_u64[1] = (unint64_t)re::RenderGraphCachingErrorCategory(void)::instance;
    uint64_t v9 = v12;
    uint64_t v11 = v14;
    long long v10 = v13;
    __n128 v7 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v8);
    if (v9)
    {
      if (v10) {
        (*(void (**)(__n128))(*(void *)v9 + 40))(v7);
      }
    }
  }
  re::RenderGraph::RenderGraph((re::RenderGraph *)&v8, a2, a3, *((const char **)this + 43), *((const char **)this + 44), *((void *)this + 45));
  re::DynamicArray<re::RenderGraph>::add((re::RenderFrame *)((char *)this + 3408), &v8);
  re::RenderGraph::~RenderGraph((re::RenderGraph *)&v8);
  return *((void *)this + 430) + 112 * *((void *)this + 428) - 112;
}

uint64_t re::DynamicArray<re::RenderGraph>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraph>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::RenderGraph::RenderGraph(*((void *)this + 4) + 112 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderGraphExecutable::targetDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 12);
  if (*(void *)(a1 + 8) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 112 * v2;
}

void anonymous namespace'::resourcesWithInvalidTextureBound(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_383, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_383))
  {
    byte_26AF94910 = 0;
    qword_26AF94900 = (uint64_t)&unk_26E6DEC70;
    unk_26AF94908 = "RenderFrame allocator";
    __cxa_guard_release(&_MergedGlobals_383);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF948F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF948F8))
  {
    dword_26AF94938 = 0;
    xmmword_26AF94928 = 0u;
    xmmword_26AF94918 = 0u;
    unk_26AF9493C = 0x7FFFFFFFLL;
    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&xmmword_26AF94918, (uint64_t)&qword_26AF94900, 3);
    __cxa_guard_release(&qword_26AF948F8);
  }
}

uint64_t re::RenderGraphExecutable::bufferDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 12);
  if (*(void *)(a1 + 32) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40) + 48 * v2;
}

re *re::RenderFrame::buildOrRetainCachedGraph(re::RenderFrame *this, re::RenderGraphStats *a2)
{
  uint64_t v353 = *MEMORY[0x263EF8340];
  unint64_t v8 = *((void *)this + 41);
  uint64_t v330 = 0;
  __s = 0;
  unint64_t v332 = 0;
  uint64_t v9 = *((void *)this + 47);
  unint64_t v10 = *((void *)this + 501);
  LODWORD(v338[0]) = 0;
  re::FixedArray<unsigned long long>::init<int>(&v330, v9, v10, (int *)v338);
  unint64_t v12 = *((void *)this + 47);
  unint64_t v13 = *((void *)this + 501);
  v326 = this;
  unsigned int v317 = a2;
  unint64_t v320 = v8;
  if (v13)
  {
    if (v13 >> 61) {
      goto LABEL_507;
    }
    size_t v2 = 8 * v13;
    uint64_t v14 = (char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v12 + 32))(v12, 8 * v13, 8);
    if (!v14)
    {
LABEL_508:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_509:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v2;
      __int16 v348 = 2048;
      unint64_t v349 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_510:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v12;
      __int16 v348 = 2048;
      unint64_t v349 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_511:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v2;
      __int16 v348 = 2048;
      unint64_t v349 = v321;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_512:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v12;
      __int16 v348 = 2048;
      unint64_t v349 = (unint64_t)v325;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_513:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v2;
      __int16 v348 = 2048;
      unint64_t v349 = v321;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_514:
      v334[0] = 0;
      long long v339 = 0u;
      long long v340 = 0u;
      memset(v338, 0, sizeof(v338));
      unint64_t v289 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 468;
      __int16 v346 = 2048;
      size_t v347 = v2;
      __int16 v348 = 2048;
      unint64_t v349 = (unint64_t)v325;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_515:
      unint64_t v337 = 0;
      long long v351 = 0u;
      long long v352 = 0u;
      memset(v350, 0, sizeof(v350));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 797;
      __int16 v346 = 2048;
      size_t v347 = v289;
      __int16 v348 = 2048;
      unint64_t v349 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_516:
      uint64_t v330 = 0;
      long long v351 = 0u;
      long long v352 = 0u;
      memset(v350, 0, sizeof(v350));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(void *)&v343[4] = "operator[]";
      __int16 v344 = 1024;
      int v345 = 797;
      __int16 v346 = 2048;
      size_t v347 = v3;
      __int16 v348 = 2048;
      unint64_t v349 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_517:
      re::internal::assertLog((re::internal *)4, v265, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
      goto LABEL_518;
    }
    char v16 = v14;
    int v17 = v14;
    if (v13 != 1)
    {
      v2 -= 8;
      memset(v14, 255, v2);
      int v17 = &v16[v2];
    }
    uint64_t v18 = 0;
    *(void *)int v17 = -1;
    do
    {
      *(void *)&v16[8 * v18] = v18;
      ++v18;
    }
    while (v13 != v18);
    unint64_t v19 = this;
    uint64_t v20 = *((void *)this + 47);
    unint64_t v21 = *((void *)this + 501);
  }
  else
  {
    unint64_t v21 = 0;
    char v16 = 0;
    unint64_t v19 = this;
    uint64_t v20 = *((void *)this + 47);
  }
  unint64_t v318 = v12;
  unint64_t v4 = 0xBF58476D1CE4E5B9;
  unint64_t v22 = 0x9E3779B97F4A7C17;
  unint64_t v327 = 0;
  unint64_t v328 = 0;
  uint64_t v329 = 0;
  LODWORD(v338[0]) = 0;
  re::FixedArray<unsigned long long>::init<int>(&v327, v20, v21, (int *)v338);
  uint64_t v23 = *((void *)v19 + 47);
  if (*((_DWORD *)v19 + 1002) <= 1u) {
    signed int v24 = 1;
  }
  else {
    signed int v24 = *((_DWORD *)v19 + 1002);
  }
  memset(v350, 0, 36);
  *(void *)(&v350[2].var0 + 1) = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v350, v23, v24);
  if (*((void *)v19 + 501))
  {
    uint64_t v25 = v19;
    size_t v2 = 0;
    uint64_t v322 = 0;
    uint64_t v26 = v329;
    unint64_t v321 = v328;
    unint64_t v3 = 104;
    unint64_t v4 = v332;
    uint64_t v325 = __s;
    do
    {
      unint64_t v5 = *((void *)v25 + 503);
      unint64_t v27 = v5 + 104 * v2;
      unint64_t v337 = 0;
      if (*(unsigned char *)(v27 + 40)) {
        unint64_t v12 = *(void *)(v5 + 104 * v2 + 48);
      }
      else {
        unint64_t v12 = v5 + 104 * v2 + 41;
      }
      unint64_t v28 = *(void *)v27;
      size_t v29 = strlen((const char *)v12);
      if (v29)
      {
        MurmurHash3_x64_128(v12, v29, 0, (unint64_t *)v338);
        unint64_t v30 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        unint64_t v30 = 0;
      }
      unint64_t v337 = ((v28 << 6) - 0x61C8864680B583E9 + (v28 >> 2) + v30) ^ v28;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v350, (uint64_t *)&v337))
      {
        unint64_t v31 = *(void *)(v5 + 104 * v2 + 8);
        int v32 = v326;
        if (v31 || *(void *)(v5 + 104 * v2 + 16))
        {
          unint64_t v12 = 0;
          unint64_t v33 = v5 + 104 * v2;
          unint64_t v5 = v33 + 16;
          uint64_t v34 = (_DWORD *)(v33 + 92);
          unsigned int v35 = 1;
          while (1)
          {
            if (v31)
            {
              unint64_t v36 = *((void *)v326 + 501);
              if (v36 <= v12)
              {
                v334[0] = 0;
                long long v339 = 0u;
                long long v340 = 0u;
                memset(v338, 0, sizeof(v338));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v343 = 136315906;
                *(void *)&v343[4] = "operator[]";
                __int16 v344 = 1024;
                int v345 = 789;
                __int16 v346 = 2048;
                size_t v347 = v12;
                __int16 v348 = 2048;
                unint64_t v349 = v36;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_477:
                v334[0] = 0;
                long long v339 = 0u;
                long long v340 = 0u;
                memset(v338, 0, sizeof(v338));
                unint64_t v22 = &_os_log_internal;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v343 = 136315906;
                *(void *)&v343[4] = "operator[]";
                __int16 v344 = 1024;
                int v345 = 789;
                __int16 v346 = 2048;
                size_t v347 = v12;
                __int16 v348 = 2048;
                unint64_t v349 = v36;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_478;
              }
              if (*(void *)(*((void *)v326 + 503) + 104 * v12 + 8) == v31) {
                break;
              }
            }
            if (*(void *)v5)
            {
              unint64_t v36 = *((void *)v326 + 501);
              if (v36 <= v12) {
                goto LABEL_477;
              }
              uint64_t v37 = *((void *)v326 + 503);
              uint64_t v38 = *(void *)(v37 + 104 * v12 + 16);
              _ZF = v38 && v38 == *(void *)v5;
              if (_ZF && *(_DWORD *)(v37 + 104 * v12 + 92) == *v34) {
                break;
              }
            }
            unint64_t v12 = v35;
            _CF = v2 >= v35++;
            if (!_CF) {
              goto LABEL_43;
            }
          }
          if (v13 <= v2) {
            goto LABEL_497;
          }
          *(void *)&v16[8 * v2] = v12;
          unint64_t v41 = v321;
          if (v321 <= v12) {
            goto LABEL_498;
          }
          if (v321 <= v2) {
            goto LABEL_499;
          }
          *(void *)(v26 + 8 * v2) = *(void *)(v26 + 8 * v12);
          if ((unint64_t)v325 <= v12) {
            goto LABEL_500;
          }
          *(void *)(v4 + 8 * v12) ^= v337;
LABEL_43:
          if (v13 <= v2) {
            goto LABEL_488;
          }
          if (*(void *)&v16[8 * v2] == v2)
          {
            if (v31) {
              unint64_t v31 = (unint64_t)objc_msgSend((id)v31, sel_protectionOptions);
            }
            if (v321 <= v2) {
              goto LABEL_495;
            }
            unint64_t v42 = *(void *)(v26 + 8 * v2) | v31;
            *(void *)(v26 + 8 * v2) = v42;
            unint64_t v43 = *(void *)v5;
            if (*(void *)v5)
            {
              unint64_t v43 = (unint64_t)objc_msgSend((id)v43, sel_protectionOptions);
              unint64_t v42 = *(void *)(v26 + 8 * v2);
            }
            unint64_t v44 = v43 | v42;
            *(void *)(v26 + 8 * v2) = v44;
            unint64_t v45 = *((void *)v326 + 52) & v44;
            *(void *)(v26 + 8 * v2) = v45;
            if ((unint64_t)v325 <= v2)
            {
LABEL_496:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v2;
              __int16 v348 = 2048;
              unint64_t v349 = (unint64_t)v325;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_497:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              unint64_t v41 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v2;
              __int16 v348 = 2048;
              unint64_t v349 = v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_498:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              unint64_t v22 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v12;
              __int16 v348 = 2048;
              unint64_t v349 = v41;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_499:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v2;
              __int16 v348 = 2048;
              unint64_t v349 = v321;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_500:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v12;
              __int16 v348 = 2048;
              unint64_t v349 = (unint64_t)v325;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_501:
              *(void *)v343 = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              unint64_t v203 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
              *(void *)(&v350[0].var0 + 1) = "operator[]";
              WORD2(v350[0].var1) = 1024;
              *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
              *((_WORD *)&v350[1].var0 + 1) = 2048;
              *(void *)(&v350[1].var0 + 1) = v22;
              WORD2(v350[1].var1) = 2048;
              *(char **)((char *)&v350[1].var1 + 6) = (char *)v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_502:
              unint64_t v337 = 0;
              long long v351 = 0u;
              long long v352 = 0u;
              memset(v350, 0, sizeof(v350));
              unint64_t v200 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 789;
              __int16 v346 = 2048;
              size_t v347 = v203;
              __int16 v348 = 2048;
              unint64_t v349 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_503:
              uint64_t v330 = 0;
              long long v351 = 0u;
              long long v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 789;
              __int16 v346 = 2048;
              size_t v347 = v200;
              __int16 v348 = 2048;
              unint64_t v349 = v203;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_504:
              uint64_t v330 = 0;
              long long v351 = 0u;
              long long v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 789;
              __int16 v346 = 2048;
              size_t v347 = v200;
              __int16 v348 = 2048;
              unint64_t v349 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_505:
              uint64_t v330 = 0;
              long long v351 = 0u;
              long long v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 789;
              __int16 v346 = 2048;
              size_t v347 = v3;
              __int16 v348 = 2048;
              unint64_t v349 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_506:
              v334[0] = 0;
              long long v339 = 0u;
              long long v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(void *)&v343[4] = "operator[]";
              __int16 v344 = 1024;
              int v345 = 468;
              __int16 v346 = 2048;
              size_t v347 = v2;
              __int16 v348 = 2048;
              unint64_t v349 = v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_507:
              re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 8, v13);
              _os_crash();
              __break(1u);
              goto LABEL_508;
            }
            unint64_t v46 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
            *(void *)(v4 + 8 * v2) ^= (v46 >> 31) ^ v46;
          }
        }
        else
        {
          unint64_t v48 = *(unsigned int *)(v5 + 104 * v2 + 24);
          if (v48 == -1)
          {
            re::DynamicString::format((re::DynamicString *)"SpecifyScopeLaneParameters index %lu does not specify a texture, texture descriptor, or render layer handle.", (re::DynamicString *)v338, v2);
            re::RenderFrame::addError((uint64_t)v326, (uint64_t)v338);
            if (v338[0] && ((uint64_t)v338[1] & 1) != 0) {
              (*(void (**)(void))(*(void *)v338[0] + 40))();
            }
          }
          else
          {
            unint64_t v12 = 0;
            unint64_t v49 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) >> 27));
            v322 ^= v49 ^ (v49 >> 31) ^ (((v49 ^ (v49 >> 31)) << 6)
                                       - 0x61C8864680B583E9
                                       + ((v49 ^ (v49 >> 31)) >> 2)
                                       + v337);
            unint64_t v5 = *((void *)v326 + 501);
            unsigned int v50 = 1;
            while (1)
            {
              if (v5 <= v12) {
                goto LABEL_484;
              }
              if (*(_DWORD *)(*((void *)v326 + 503) + 104 * v12 + 24) == v48) {
                break;
              }
              unint64_t v12 = v50;
              _CF = v2 >= v50++;
              if (!_CF) {
                goto LABEL_69;
              }
            }
            if (v13 <= v2) {
              goto LABEL_509;
            }
            *(void *)&v16[8 * v2] = v12;
            unint64_t v5 = v321;
            if (v321 <= v12) {
              goto LABEL_510;
            }
            if (v321 <= v2) {
              goto LABEL_511;
            }
            *(void *)(v26 + 8 * v2) = *(void *)(v26 + 8 * v12);
            if ((unint64_t)v325 <= v12) {
              goto LABEL_512;
            }
            *(void *)(v4 + 8 * v12) ^= v337;
LABEL_69:
            if (v13 <= v2) {
              goto LABEL_506;
            }
            if (*(void *)&v16[8 * v2] == v2)
            {
              if (*((void *)v326 + 515) > v48 && (uint64_t v51 = *(void **)(*((void *)v326 + 516) + 32 * v48)) != 0)
              {
                unint64_t v12 = v51;
                uint64_t v52 = [(id)v12 protectionOptions];
                int v32 = v326;
              }
              else
              {
                unint64_t v12 = 0;
                uint64_t v52 = 0;
              }
              if (v321 <= v2) {
                goto LABEL_513;
              }
              uint64_t v53 = *(void *)(v26 + 8 * v2) | v52;
              *(void *)(v26 + 8 * v2) = v53;
              unint64_t v54 = *((void *)v32 + 52) & v53;
              *(void *)(v26 + 8 * v2) = v54;
              if ((unint64_t)v325 <= v2) {
                goto LABEL_514;
              }
              unint64_t v55 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) >> 27));
              *(void *)(v4 + 8 * v2) ^= (v55 >> 31) ^ v55;
            }
          }
        }
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v350, (uint64_t *)&v337);
      }
      uint64_t v25 = v326;
      ++v2;
      size_t v47 = *((void *)v326 + 501);
    }
    while (v2 < v47);
    if (v47)
    {
      uint64_t v56 = 0;
      size_t v2 = 0;
      unint64_t v3 = v321;
      do
      {
        if (v325 == (char *)v2) {
          goto LABEL_485;
        }
        unint64_t v57 = *(void *)(v4 + 8 * v2);
        uint64_t v58 = *((void *)v326 + 503);
        if (v57)
        {
          *(void *)(v58 + v56 + 80) = v57;
          if (v321 <= v2) {
            goto LABEL_490;
          }
          unint64_t v59 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v57 ^ (v57 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v57 ^ (v57 >> 30))) >> 27));
          v322 ^= (v59 >> 31) ^ v59;
        }
        else
        {
          *(unsigned char *)(v58 + v56 + 96) = 1;
          if (v13 <= v2) {
            goto LABEL_492;
          }
          unint64_t v12 = *(void *)&v16[8 * v2];
          if ((unint64_t)v325 <= v12)
          {
LABEL_493:
            v334[0] = 0;
            long long v339 = 0u;
            long long v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(void *)&v343[4] = "operator[]";
            __int16 v344 = 1024;
            int v345 = 468;
            __int16 v346 = 2048;
            size_t v347 = v12;
            __int16 v348 = 2048;
            unint64_t v349 = (unint64_t)v325;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_494:
            v334[0] = 0;
            long long v339 = 0u;
            long long v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(void *)&v343[4] = "operator[]";
            __int16 v344 = 1024;
            int v345 = 468;
            __int16 v346 = 2048;
            size_t v347 = v2;
            __int16 v348 = 2048;
            unint64_t v349 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_495:
            v334[0] = 0;
            long long v339 = 0u;
            long long v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(void *)&v343[4] = "operator[]";
            __int16 v344 = 1024;
            int v345 = 468;
            __int16 v346 = 2048;
            size_t v347 = v2;
            __int16 v348 = 2048;
            unint64_t v349 = v321;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_496;
          }
          *(void *)(v58 + v56 + 80) = *(void *)(v4 + 8 * v12);
          if (v321 <= v2) {
            goto LABEL_494;
          }
        }
        *(void *)(v58 + v56 + 72) = *(void *)(v26 + 8 * v2++);
        v56 += 104;
      }
      while (v47 != v2);
      unint64_t v4 = 0xBF58476D1CE4E5B9;
    }
    else
    {
      unint64_t v4 = 0xBF58476D1CE4E5B9;
      unint64_t v3 = v321;
    }
    uint64_t v60 = v322;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v3 = v328;
  }
  v61.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v350);
  if (v327 && v3) {
    (*(void (**)(double))(*(void *)v327 + 40))(v61.n128_f64[0]);
  }
  if (v318 && v13) {
    (*(void (**)(__n128))(*(void *)v318 + 40))(v61);
  }
  if (v330 && __s) {
    (*(void (**)(__n128))(*(void *)v330 + 40))(v61);
  }
  unint64_t v62 = ((v320 << 6) - 0x61C8864680B583E9 + (v320 >> 2) + v60) ^ v320;
  float32x4_t v63 = v326;
  *((void *)v326 + 41) = v62;
  uint64_t v64 = *((void *)v326 + 74);
  if (v64)
  {
    size_t v2 = 0;
    unint64_t v65 = 0;
    unint64_t v12 = *((void *)v326 + 76);
    unint64_t v3 = 80 * v64;
    do
    {
      unint64_t v66 = v12 + v2;
      if (*(unsigned char *)(v12 + v2 + 16)) {
        float32x4_t v67 = *(const char **)(v66 + 24);
      }
      else {
        float32x4_t v67 = (const char *)(v66 + 17);
      }
      size_t v68 = strlen(v67);
      if (v68)
      {
        MurmurHash3_x64_128((uint64_t)v67, v68, 0, (unint64_t *)v338);
        unint64_t v69 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        unint64_t v69 = 0;
      }
      unint64_t v70 = v12 + v2;
      if (*(unsigned char *)(v12 + v2 + 48)) {
        uint64_t v71 = *(const char **)(v70 + 56);
      }
      else {
        uint64_t v71 = (const char *)(v70 + 49);
      }
      size_t v72 = strlen(v71);
      if (v72)
      {
        MurmurHash3_x64_128((uint64_t)v71, v72, 0, (unint64_t *)v338);
        unint64_t v73 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        unint64_t v73 = 0;
      }
      float32x4_t v63 = v326;
      unint64_t v74 = ((v69 << 6) - 0x61C8864680B583E9 + (v69 >> 2) + v73) ^ v69;
      unint64_t v75 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v12 + v2) ^ ((unint64_t)*(unsigned int *)(v12 + v2) >> 30));
      unint64_t v76 = ((v65 << 6)
           - 0x61C8864680B583E9
           + (v65 >> 2)
           + ((0x94D049BB133111EBLL * (v75 ^ (v75 >> 27))) ^ ((0x94D049BB133111EBLL * (v75 ^ (v75 >> 27))) >> 31))) ^ v65;
      unint64_t v65 = (((*(void *)(v12 + v2 + 72) - 0x61C8864680B583E9 + (v74 << 6) + (v74 >> 2)) ^ v74)
           - 0x61C8864680B583E9
           + (v76 << 6)
           + (v76 >> 2)) ^ v76;
      v2 += 80;
    }
    while (v3 != v2);
  }
  else
  {
    unint64_t v65 = 0;
  }
  unint64_t v77 = ((v62 << 6) - 0x61C8864680B583E9 + (v62 >> 2) + v65) ^ v62;
  *((unsigned char *)v63 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 1;
  uint32x4_t v78 = (void *)((*((void *)v63 + 24) - 0x61C8864680B583E9 + (v77 << 6) + (v77 >> 2)) ^ v77);
  *((void *)v63 + 41) = v78;
  uint64_t v79 = *((void *)v63 + 46);
  if (*((unsigned char *)v63 + 425))
  {
    uint32x4_t v78 = (void *)(v79 & 0xFFFFFFFFFFFFFFFLL);
    *((void *)v63 + 41) = v79 & 0xFFFFFFFFFFFFFFFLL;
  }
  uint64_t v80 = *(void *)v63;
  v338[0] = v78;
  long long v81 = v63;
  uint64_t v82 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(v80 + 424), (uint64_t *)v338);
  if (v82 != -1)
  {
    *(void *)(*(void *)(v80 + 432) + 24 * v82 + 16) = v79;
    CachedGraph = (void *)re::RenderGraphManager::getCachedGraph(*(void *)v81, *((void *)v81 + 41), *((void *)v81 + 46));
    long long v84 = (_anonymous_namespace_ *)re::RenderFrame::fillSpecifyParameterScopeOutputs(*((void *)v81 + 501), *((void *)v81 + 503), CachedGraph[97], CachedGraph[95]);
    unsigned int v316 = CachedGraph;
    uint64_t v85 = CachedGraph[100];
    if (v85)
    {
      uint64_t v86 = CachedGraph[102];
      uint64_t v325 = (char *)(v86 + 40 * v85);
      unint64_t v4 = (unint64_t)&v340 + 8;
      unint64_t v321 = (unint64_t)&v338[1];
      size_t v2 = v86 + 32;
      do
      {
        size_t v88 = v2 - 32;
        uint64_t v87 = *(void **)(v2 - 32);
        int v89 = *(unsigned __int8 *)(v2 - 8);
        if (*(unsigned char *)(v2 - 8)) {
          unint64_t v5 = *(void *)v2;
        }
        unint64_t v12 = *(unsigned int *)(v2 - 24);
        unint64_t v3 = *(unsigned int *)(v2 - 20);
        unint64_t v13 = *(unsigned __int8 *)(v2 - 16);
        memset(v338, 0, 24);
        LODWORD(v338[3]) = -1;
        *(_OWORD *)&v338[4] = 0u;
        long long v339 = 0u;
        re::DynamicString::setCapacity(&v338[4], 0);
        BYTE1(v340) = 0;
        *((void *)&v340 + 1) = 0;
        *(void *)v341 = 0;
        *(void *)&v341[8] = 0xFFFFFFFFLL;
        v341[16] = 0;
        if (v89)
        {
          unint64_t v22 = *((void *)v326 + 501);
          unint64_t v90 = v5;
          if (v22 <= v5) {
            goto LABEL_489;
          }
          uint64_t v91 = *((void *)v326 + 503) + 104 * v5;
          v338[0] = *(id *)v91;
          NS::SharedPtr<MTL::Texture>::operator=(&v338[1], (void **)(v91 + 8));
          NS::SharedPtr<MTL::Texture>::operator=(&v338[2], (void **)(v91 + 16));
          LODWORD(v338[3]) = *(_DWORD *)(v91 + 24);
          re::DynamicString::operator=((re::DynamicString *)&v338[4], (re::DynamicString *)(v91 + 32));
          long long v92 = *(_OWORD *)(v91 + 64);
          long long v93 = *(_OWORD *)(v91 + 80);
          v341[16] = *(unsigned char *)(v91 + 96);
          long long v340 = v92;
          *(_OWORD *)v341 = v93;
        }
        v338[0] = v87;
        LODWORD(v338[3]) = v12;
        *(_DWORD *)&v341[8] = v3;
        LOBYTE(v340) = v13;
        __n128 v94 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)v326 + 3992), (uint64_t)v338);
        if (v338[4])
        {
          if ((uint64_t)v338[5]) {
            (*(void (**)(__n128))(*(void *)v338[4] + 40))(v94);
          }
          *(_OWORD *)&v338[4] = 0u;
          long long v339 = 0u;
        }
        if (v338[2])
        {

          v338[2] = 0;
        }
        long long v84 = (_anonymous_namespace_ *)v338[1];
        if (v338[1]) {

        }
        v2 += 40;
      }
      while ((char *)(v88 + 40) != v325);
    }
    uint64_t v95 = v316[81];
    uint64_t v96 = v316[79];
    if (v317)
    {
      ++*((_DWORD *)v317 + 1);
      uint64_t v97 = (_DWORD *)((char *)v317 + 8);
      goto LABEL_139;
    }
    goto LABEL_468;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v334, 5099, *((unsigned char *)v81 + 425) == 0);
  *((unsigned char *)v81 + 336) = 1;
  uint64_t v99 = v81;
  if (*((void *)v81 + 69))
  {
    unint64_t v3 = 0;
    unint64_t v5 = 0;
    unsigned int v100 = 0;
    size_t v2 = (size_t)&str_106;
    do
    {
      uint64_t v101 = *((void *)v99 + 71);
      unint64_t v12 = v101 + 40 * v3;
      re::RenderFrame::setRenderGraphScopes(v326, *(const char **)v12, *(const char **)(v12 + 8));
      uint64_t v99 = v326;
      if (*((void *)v326 + 74) > (unint64_t)v5)
      {
        unint64_t v4 = v5;
        while (1)
        {
          uint64_t v103 = *((void *)v99 + 76);
          if (*(_DWORD *)(v103 + 80 * v4) > v100) {
            break;
          }
          uint64_t v104 = v103 + 80 * v4;
          uint64_t v333 = *(void *)(v104 + 72);
          if (*(unsigned char *)(v104 + 16)) {
            simd_float4 v105 = *(const char **)(v103 + 80 * v4 + 24);
          }
          else {
            simd_float4 v105 = (const char *)(v103 + 80 * v4 + 17);
          }
          if (*(unsigned char *)(v103 + 80 * v4 + 48)) {
            uint64_t v106 = *(const char **)(v103 + 80 * v4 + 56);
          }
          else {
            uint64_t v106 = (const char *)(v103 + 80 * v4 + 49);
          }
          unint64_t v4 = (v5 + 1);
          v102.n128_f64[0] = re::RenderFrame::pickupScopeLaneInternal(v326, &v333, v105, v106);
          uint64_t v99 = v326;
          uint64_t v333 = 0;
          unint64_t v5 = v4;
          if (*((void *)v326 + 74) <= (unint64_t)v4) {
            goto LABEL_154;
          }
        }
      }
      unint64_t v4 = v5;
LABEL_154:
      uint64_t v107 = v101 + 40 * v3;
      uint64_t v108 = *(void *)(v107 + 24);
      if (v108)
      {
        long long v109 = *(void **)(v107 + 32);
        uint64_t v110 = 8 * v108;
        do
        {
          if (*v109)
          {
            (*(void (**)(void, void, void, re::RenderFrame *, __n128))(*(void *)*v109 + 24))(*v109, *(void *)v12, *(void *)(v12 + 8), v326, v102);
            uint64_t v99 = v326;
          }
          ++v109;
          v110 -= 8;
        }
        while (v110);
      }
      *((void *)v99 + 4re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = &str_106;
      *((void *)v99 + 44) = &str_106;
      *((void *)v99 + 45) = 0;
      unint64_t v5 = v4;
      unint64_t v3 = ++v100;
    }
    while (*((void *)v99 + 69) > (unint64_t)v100);
  }
  re::RenderFrame::fillSpecifyParameterScopeOutputs(*((void *)v99 + 501), *((void *)v326 + 503), *((void *)v99 + 472), *((void *)v99 + 470));
  char v111 = v326;
  unint64_t v13 = *((void *)v326 + 470);
  if (v13)
  {
    uint64_t v112 = (_DWORD *)(*((void *)v326 + 472) + 32);
    uint64_t v113 = *((void *)v326 + 470);
    do
    {
      *uint64_t v112 = 0;
      v112 += 34;
      --v113;
    }
    while (v113);
    unint64_t v114 = 0;
    uint64_t v115 = (re::RenderFrame *)((char *)v326 + 3448);
    unint64_t v3 = 144;
    do
    {
      uint64_t v116 = *((void *)v111 + 472);
      uint64_t v117 = v116 + 136 * v114;
      unint64_t v118 = *(unsigned int *)(v117 + 72);
      uint64_t v325 = (char *)(v117 + 72);
      unint64_t v4 = 0;
      if (*(_DWORD *)(v117 + 72))
      {
        double v119 = *(int **)(v116 + 136 * v114 + 56);
        while (1)
        {
          int v120 = *v119;
          v119 += 36;
          if (v120 < 0) {
            break;
          }
          if (v118 == ++v4)
          {
            unint64_t v4 = v118;
            break;
          }
        }
      }
      unint64_t v323 = v114;
      if (v118 != v4)
      {
        unint64_t v5 = v4;
        unint64_t v13 = v116 + 136 * v114 + 56;
        do
        {
          unint64_t v12 = *(void *)v13;
          uint64_t v121 = *(void *)v13 + 144 * v5;
          if (*(_DWORD *)(v121 + 104) != -1
            && *(_DWORD *)(v12 + 144 * v5 + 108) != -1
            && *(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)(v121 + 96)) == 3)
          {
            *(unsigned char *)(v12 + 144 * v5 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
            unint64_t v22 = *((void *)v326 + 470);
            unint64_t v122 = v323;
            if (v22 <= v323) {
              goto LABEL_482;
            }
            ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
          }
          uint64_t v123 = v121 + 16;
          unint64_t v124 = *(void *)(v123 + 16);
          if (v124)
          {
            uint64_t v125 = 0;
            unint64_t v126 = 0;
            unint64_t v3 = v12 + 144 * v5 + 108;
            do
            {
              uint64_t v127 = *(void *)(v123 + 32) + v125;
              if (*(_DWORD *)(v127 + 12) != *(_DWORD *)v3)
              {
                if (*(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)v127) == 3)
                {
                  *(unsigned char *)(v12 + 144 * v5 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
                  unint64_t v22 = *((void *)v326 + 470);
                  unint64_t v128 = v323;
                  if (v22 <= v323) {
                    goto LABEL_480;
                  }
                  ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
                  break;
                }
                unint64_t v124 = *(void *)(v123 + 16);
              }
              ++v126;
              v125 += 16;
            }
            while (v124 > v126);
          }
          unint64_t v3 = 144;
          unint64_t v129 = v12 + 144 * v5;
          int v131 = *(unsigned __int8 *)(v129 + 128);
          uint64_t v130 = (unsigned char *)(v129 + 128);
          if (!v131)
          {
            unint64_t v135 = v12 + 144 * v5;
            uint64_t v137 = *(void *)(v135 + 72);
            uint64_t v136 = (size_t *)(v135 + 72);
            if (v137)
            {
              uint64_t v138 = 0;
              size_t v2 = 0;
              v12 += 144 * v5 + 88;
              while (*(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)(*(void *)v12 + v138)) != 3)
              {
                ++v2;
                v138 += 16;
                if (*v136 <= v2) {
                  goto LABEL_186;
                }
              }
              *uint64_t v130 = 1;
              unint64_t v22 = *((void *)v326 + 470);
              unint64_t v139 = v323;
              if (v22 <= v323) {
                goto LABEL_486;
              }
              ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
            }
          }
LABEL_186:
          unsigned int v132 = *(_DWORD *)v325;
          if (*(_DWORD *)v325 <= (v4 + 1)) {
            unint64_t v133 = (v4 + 1);
          }
          else {
            unint64_t v133 = v132;
          }
          while (1)
          {
            unint64_t v5 = (v4 + 1);
            if (v133 - 1 == v4) {
              break;
            }
            LODWORD(v4) = v4 + 1;
            unint64_t v134 = v5;
            if ((*(_DWORD *)(*(void *)v13 + 144 * v5) & 0x80000000) != 0) {
              goto LABEL_193;
            }
          }
          unint64_t v134 = v133;
LABEL_193:
          unint64_t v4 = v134;
        }
        while (v132 != v134);
        char v111 = v326;
        unint64_t v13 = *((void *)v326 + 470);
        unint64_t v114 = v323;
      }
      if (v13 <= v114) {
        goto LABEL_491;
      }
      uint64_t v140 = *((void *)v111 + 472);
      uint64_t v141 = v140 + 136 * v114;
      unint64_t v142 = *(unsigned int *)(v141 + 120);
      unint64_t v321 = v141 + 120;
      unint64_t v4 = 0;
      if (*(_DWORD *)(v141 + 120))
      {
        uint64_t v143 = *(int **)(v140 + 136 * v114 + 104);
        while (1)
        {
          int v144 = *v143;
          v143 += 36;
          if (v144 < 0) {
            break;
          }
          if (v142 == ++v4)
          {
            unint64_t v4 = v142;
            break;
          }
        }
      }
      if (v142 != v4)
      {
        unint64_t v5 = v4;
        unint64_t v13 = v140 + 136 * v114 + 104;
        do
        {
          unint64_t v145 = *(void *)v13;
          uint64_t v146 = *(void *)v13 + 144 * v5;
          if (*(_DWORD *)(v146 + 120) != -1
            && *(_DWORD *)(v146 + 124) != -1
            && *(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)(v146 + 112)) == 3)
          {
            *(unsigned char *)(v145 + 144 * v5 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
            unint64_t v22 = *((void *)v326 + 470);
            unint64_t v147 = v323;
            if (v22 <= v323) {
              goto LABEL_483;
            }
            ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
          }
          uint64_t v325 = (char *)v146;
          unint64_t v148 = v145 + 144 * v5;
          unint64_t v151 = *(void *)(v148 + 72);
          int v150 = (unint64_t *)(v148 + 72);
          unint64_t v149 = v151;
          if (v151)
          {
            uint64_t v152 = 0;
            unint64_t v3 = 0;
            unint64_t v153 = v145 + 144 * v5;
            unint64_t v12 = v153 + 88;
            size_t v2 = v153 + 124;
            do
            {
              uint64_t v154 = *(void *)v12 + v152;
              if (*(_DWORD *)(v154 + 12) != *(_DWORD *)v2)
              {
                if (*(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)v154) == 3)
                {
                  *(unsigned char *)(v145 + 144 * v5 + 12re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 1;
                  unint64_t v22 = *((void *)v326 + 470);
                  unint64_t v155 = v323;
                  if (v22 <= v323) {
                    goto LABEL_481;
                  }
                  ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
                  break;
                }
                unint64_t v149 = *v150;
              }
              ++v3;
              v152 += 16;
            }
            while (v149 > v3);
          }
          unint64_t v3 = 144;
          unint64_t v156 = v145 + 144 * v5;
          int v158 = *(unsigned __int8 *)(v156 + 128);
          long long v157 = (unsigned char *)(v156 + 128);
          if (!v158 && *((void *)v325 + 4))
          {
            uint64_t v162 = 0;
            size_t v2 = 0;
            while (*(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)(*((void *)v325 + 6) + v162)) != 3)
            {
              ++v2;
              v162 += 16;
              if (*((void *)v325 + 4) <= v2) {
                goto LABEL_225;
              }
            }
            *long long v157 = 1;
            unint64_t v22 = *((void *)v326 + 470);
            unint64_t v163 = v323;
            if (v22 <= v323) {
              goto LABEL_487;
            }
            ++*(_DWORD *)(*((void *)v326 + 472) + 136 * v323 + 32);
          }
LABEL_225:
          unsigned int v159 = *(_DWORD *)v321;
          if (*(_DWORD *)v321 <= (v4 + 1)) {
            unint64_t v160 = (v4 + 1);
          }
          else {
            unint64_t v160 = v159;
          }
          while (1)
          {
            unint64_t v5 = (v4 + 1);
            if (v160 - 1 == v4) {
              break;
            }
            LODWORD(v4) = v4 + 1;
            unint64_t v161 = v5;
            if ((*(_DWORD *)(*(void *)v13 + 144 * v5) & 0x80000000) != 0) {
              goto LABEL_232;
            }
          }
          unint64_t v161 = v160;
LABEL_232:
          unint64_t v4 = v161;
        }
        while (v159 != v161);
        char v111 = v326;
        unint64_t v13 = *((void *)v326 + 470);
        unint64_t v114 = v323;
      }
      ++v114;
    }
    while (v13 > v114);
  }
  uint64_t v164 = *((void *)v111 + 501);
  if (v164)
  {
    uint64_t v165 = 0;
    uint64_t v166 = *((void *)v326 + 503);
    do
    {
      std::ios_base::iostate v167 = (uint64_t *)(v166 + 104 * v165);
      unint64_t v22 = *((unsigned int *)v167 + 22);
      if (v13 >= v22)
      {
        if (v13 <= v22) {
          goto LABEL_501;
        }
        uint64_t v168 = *((void *)v326 + 472);
        uint64_t v169 = v168 + 136 * v22;
        int v172 = *(_DWORD *)(v169 + 32);
        id v170 = (_DWORD *)(v169 + 32);
        int v171 = v172;
        if (v172)
        {
          uint64_t v173 = *(unsigned int *)(v168 + 136 * v22 + 72);
          if (v173)
          {
            uint64_t v174 = 0;
            uint64_t v175 = *(int **)(v168 + 136 * v22 + 56);
            while (1)
            {
              int v176 = *v175;
              v175 += 36;
              if (v176 < 0) {
                break;
              }
              if (v173 == ++v174)
              {
                LODWORD(v174) = *(_DWORD *)(v168 + 136 * v22 + 72);
                break;
              }
            }
          }
          else
          {
            LODWORD(v174) = 0;
          }
          if (v173 != v174)
          {
            uint64_t v177 = v174;
            uint64_t v178 = (uint64_t *)(v168 + 136 * v22 + 56);
            uint64_t v179 = *v167;
            do
            {
              uint64_t v180 = *v178;
              if (v179 == *(void *)(*v178 + 144 * v177 + 8))
              {
                uint64_t v181 = v180 + 144 * v177;
                int v183 = *(unsigned __int8 *)(v181 + 128);
                uint64_t v182 = (unsigned char *)(v181 + 128);
                if (v183)
                {
                  *uint64_t v182 = 0;
                  *(void *)(v180 + 144 * v177 + 136) = v165;
                  *id v170 = --v171;
                }
              }
              if (v173 <= (int)v174 + 1) {
                int v184 = v174 + 1;
              }
              else {
                int v184 = v173;
              }
              while (1)
              {
                uint64_t v177 = (v174 + 1);
                if (v184 - 1 == v174) {
                  break;
                }
                LODWORD(v174) = v174 + 1;
                int v185 = v177;
                if ((*(_DWORD *)(*v178 + 144 * v177) & 0x80000000) != 0) {
                  goto LABEL_265;
                }
              }
              int v185 = v184;
LABEL_265:
              LODWORD(v174) = v185;
            }
            while (v173 != v185);
          }
          uint64_t v186 = *(unsigned int *)(v168 + 136 * v22 + 120);
          if (v186)
          {
            uint64_t v187 = 0;
            uint64_t v188 = *(int **)(v168 + 136 * v22 + 104);
            while (1)
            {
              int v189 = *v188;
              v188 += 36;
              if (v189 < 0) {
                break;
              }
              if (v186 == ++v187)
              {
                LODWORD(v18re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = *(_DWORD *)(v168 + 136 * v22 + 120);
                break;
              }
            }
          }
          else
          {
            LODWORD(v18re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
          }
          if (v186 != v187)
          {
            uint64_t v190 = v187;
            uint64_t v191 = (uint64_t *)(v168 + 136 * v22 + 104);
            uint64_t v192 = *v167;
            do
            {
              uint64_t v193 = *v191;
              if (v192 == *(void *)(*v191 + 144 * v190 + 8))
              {
                uint64_t v194 = v193 + 144 * v190;
                int v196 = *(unsigned __int8 *)(v194 + 128);
                uint64_t v195 = (unsigned char *)(v194 + 128);
                if (v196)
                {
                  *uint64_t v195 = 0;
                  *(void *)(v193 + 144 * v190 + 136) = v165;
                  *id v170 = --v171;
                }
              }
              if (v186 <= (int)v187 + 1) {
                int v197 = v187 + 1;
              }
              else {
                int v197 = v186;
              }
              while (1)
              {
                uint64_t v190 = (v187 + 1);
                if (v197 - 1 == v187) {
                  break;
                }
                LODWORD(v18re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v187 + 1;
                int v198 = v190;
                if ((*(_DWORD *)(*v191 + 144 * v190) & 0x80000000) != 0) {
                  goto LABEL_284;
                }
              }
              int v198 = v197;
LABEL_284:
              LODWORD(v18re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v198;
            }
            while (v186 != v198);
          }
        }
      }
      ++v165;
    }
    while (v165 != v164);
  }
  uint64_t v199 = v326;
  re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(v326, re::RenderFrame::kStencilOutputLaneID);
  re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(v326, re::RenderFrame::kDepthOutputLaneID);
  if (*((void *)v326 + 470))
  {
    unint64_t v200 = 0;
    unint64_t v13 = 65290051;
    unint64_t v3 = (unint64_t)&v340 + 8;
    size_t v2 = (size_t)v326 + 3784;
    unint64_t v4 = 1;
    unint64_t v5 = 136;
    do
    {
      uint64_t v201 = *((void *)v199 + 472);
      if (*(_DWORD *)(v201 + 136 * v200 + 32))
      {
        v338[0] = (id)65290051;
        long long v202 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v201 + 136 * v200 + 40, (uint64_t *)v338);
        uint64_t v199 = v326;
        if (v202)
        {
          unint64_t v12 = (unint64_t)v202;
          if (*((unsigned char *)v202 + 112))
          {
            memset(v338, 0, 24);
            LODWORD(v338[3]) = -1;
            *(_OWORD *)&v338[4] = 0u;
            long long v339 = 0u;
            re::DynamicString::setCapacity(&v338[4], 0);
            BYTE1(v340) = 0;
            *((void *)&v340 + 1) = 0;
            *(void *)v341 = 0;
            *(void *)&v341[8] = 0xFFFFFFFFLL;
            v341[16] = 0;
            unint64_t v203 = *((void *)v326 + 470);
            if (v203 <= v200) {
              goto LABEL_503;
            }
            re::DynamicString::operator=((re::DynamicString *)&v338[4], *((void *)v326 + 472) + 136 * v200);
            *(_DWORD *)&v341[8] = v4 - 1;
            v338[0] = (id)65290051;
            LODWORD(v338[3]) = 0;
            LOWORD(v340) = 257;
            re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)v326 + 3992), (uint64_t)v338);
            *(id *)&v350[0].char var0 = v338[0];
            v350[0].var1 = (char *)__PAIR64__(*(unsigned int *)&v341[8], v338[3]);
            *(_WORD *)&v350[1].char var0 = v340;
            LOBYTE(v350[1].var1) = 0;
            re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add((_anonymous_namespace_ *)v2, (uint64_t)v350);
            uint64_t v199 = v326;
            *(unsigned char *)(v12 + 112) = 0;
            *(void *)(v12 + 120) = *((void *)v326 + 501) - 1;
            unint64_t v12 = *((void *)v326 + 470);
            if (v12 <= v200) {
              goto LABEL_504;
            }
            --*(_DWORD *)(*((void *)v326 + 472) + 136 * v200 + 32);
            if (v338[4])
            {
              if ((uint64_t)v338[5])
              {
                (*(void (**)(void))(*(void *)v338[4] + 40))();
                uint64_t v199 = v326;
              }
              *(_OWORD *)&v338[4] = 0u;
              long long v339 = 0u;
            }
            if (v338[2])
            {

              uint64_t v199 = v326;
              v338[2] = 0;
            }
            if (v338[1])
            {

              uint64_t v199 = v326;
            }
          }
        }
      }
      unint64_t v200 = v4;
      BOOL v204 = *((void *)v199 + 470) > (unint64_t)v4;
      unint64_t v4 = (v4 + 1);
    }
    while (v204);
  }
  unint64_t v205 = *((void *)v199 + 515);
  __asm { FMOV            V8.2S, #1.0 }
  if (v205)
  {
    uint64_t v209 = 0;
    unint64_t v210 = 0;
    unint64_t v12 = (unint64_t)&v338[1] + 4;
    long long v211 = (re::RenderFrame *)((char *)v199 + 3576);
    unint64_t v4 = -1;
    uint64_t v325 = 0;
    unint64_t v321 = -1;
    unint64_t v3 = 2;
    do
    {
      if (v205 > v210 && *(void *)(*((void *)v199 + 516) + v209))
      {
        LODWORD(v338[0]) = 3;
        *(id *)((char *)v338 + 4) = (id)0x200000000;
        memset((char *)&v338[1] + 4, 255, 24);
        BYTE4(v338[4]) = 0;
        v338[5] = _D8;
        long long v339 = xmmword_2343AEB90;
        long long v340 = xmmword_2343AEBA0;
        *(_DWORD *)v341 = -1;
        *(_OWORD *)&v341[8] = xmmword_234378E20;
        char v342 = 0;
        LODWORD(v338[0]) = 2;
        long long v212 = re::StringID::StringID((re::StringID *)v343, v350);
        *(void *)&v341[16] = ((*(void *)v343 >> 3) + 0x8756A0D28FEDB54 + (*(void *)v343 >> 1 << 6)) ^ (*(void *)v343 >> 1);
        re::StringID::destroyString(v212);
        char v342 = 1;
        re::RenderFrame::createTarget(v199, (const re::RenderGraphTargetDescription *)v338, v350[0].var1, &v330);
        re::DynamicArray<re::RenderGraphTargetHandle>::add(v211, (double *)&v330);
        re::StringID::destroyString((re::StringID *)v350);
      }
      else
      {
        v338[0] = 0;
        v338[1] = (id)-1;
        re::DynamicArray<re::RenderGraphTargetHandle>::add(v211, (double *)v338);
      }
      ++v210;
      uint64_t v199 = v326;
      unint64_t v205 = *((void *)v326 + 515);
      v209 += 32;
    }
    while (v205 > v210);
  }
  if (*((void *)v199 + 501))
  {
    unint64_t v4 = 0;
    unint64_t v213 = 0;
    unint64_t v12 = (unint64_t)&v338[1] + 4;
    uint64_t v214 = (uint64_t)v199 + 3616;
    char v215 = &off_264BE6328;
    unint64_t v3 = 2;
    uint64_t v325 = 0;
    do
    {
      uint64_t v216 = *((void *)v199 + 503);
      uint64_t v217 = v216 + v4;
      if (!*(unsigned char *)(v216 + v4 + 96))
      {
        if (*(void *)(v217 + 8))
        {
          if (*(_DWORD *)(v216 + v4 + 88) != -1) {
            goto LABEL_320;
          }
        }
        else
        {
          if (*(void *)(v216 + v4 + 16)) {
            BOOL v221 = *(_DWORD *)(v216 + v4 + 88) == -1;
          }
          else {
            BOOL v221 = 1;
          }
          if (!v221)
          {
LABEL_320:
            LODWORD(v338[1]) = 2;
            memset((char *)&v338[1] + 4, 255, 24);
            BYTE4(v338[4]) = 0;
            v338[5] = _D8;
            long long v339 = xmmword_2343AEB90;
            long long v340 = xmmword_2343AEBA0;
            *(_DWORD *)v341 = -1;
            *(void *)&v341[8] = -1;
            v338[0] = (id)2;
            uint64_t v222 = v216 + v4;
            *(void *)&v341[16] = ((*(void *)(v216 + v4 + 80) << 6)
                                  + 0x8756A0D28FEDB54
                                  + (*(void *)(v216 + v4 + 80) >> 2)) ^ *(void *)(v216 + v4 + 80);
            char v342 = 1;
            if (v213 > 0x1F)
            {
              char v224 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"SpecifyLaneOp%d", (re::DynamicString *)v350, v213);
              if ((uint64_t)v350[0].var1) {
                uint64_t v225 = *(const char **)&v350[1].var0;
              }
              else {
                uint64_t v225 = (char *)&v350[0].var1 + 1;
              }
              uint64_t v330 = 0;
              __s = "";
              if (*(void *)&v350[0].var0 && ((uint64_t)v350[0].var1 & 1) != 0) {
                (*(void (**)(void))(**(void **)&v350[0].var0 + 40))();
              }
              char v223 = __s;
              unint64_t v3 = 2;
            }
            else
            {
              char v223 = *v215;
              uint64_t v330 = 2 * (void)*(v215 - 1);
              __s = v223;
            }
            re::RenderFrame::createTarget(v326, (const re::RenderGraphTargetDescription *)v338, v223, v350);
            re::StringID::destroyString((re::StringID *)&v330);
            uint64_t v330 = *(void *)(v222 + 80);
            long long v219 = &v330;
            long long v220 = v350;
            goto LABEL_332;
          }
        }
      }
      uint64_t v218 = *(void *)(v217 + 80);
      v338[0] = 0;
      v338[1] = (id)-1;
      *(void *)&v350[0].char var0 = v218;
      long long v219 = (uint64_t *)v350;
      long long v220 = v338;
LABEL_332:
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v214, v219, v220);
      ++v213;
      uint64_t v199 = v326;
      v4 += 104;
      v215 += 2;
    }
    while (*((void *)v326 + 501) > v213);
  }
  uint64_t v226 = *((void *)v199 + 470);
  if (v226)
  {
    unint64_t v22 = *((void *)v199 + 472);
    unint64_t v319 = v22 + 136 * v226;
    uint64_t v227 = (uint64_t)v199 + 3448;
    while (1)
    {
      uint64_t v324 = *(unsigned int *)(v22 + 72);
      size_t v2 = 0;
      if (v324)
      {
        uint64_t v228 = *(int **)(v22 + 56);
        while (1)
        {
          int v229 = *v228;
          v228 += 36;
          if (v229 < 0) {
            break;
          }
          if (v324 == ++v2)
          {
            size_t v2 = *(unsigned int *)(v22 + 72);
            break;
          }
        }
      }
      if (v324 != v2) {
        break;
      }
LABEL_341:
      unint64_t v12 = *(unsigned int *)(v22 + 120);
      if (v12)
      {
        unint64_t v5 = 0;
        long long v230 = *(int **)(v22 + 104);
        while (1)
        {
          int v231 = *v230;
          v230 += 36;
          if (v231 < 0) {
            break;
          }
          if (v12 == ++v5)
          {
            unint64_t v5 = *(unsigned int *)(v22 + 120);
            break;
          }
        }
      }
      else
      {
        unint64_t v5 = 0;
      }
      if (v12 != v5)
      {
        unint64_t v4 = v5;
        do
        {
          uint64_t v248 = *(void *)(v22 + 104);
          uint64_t v249 = v248 + 144 * v4;
          unint64_t v13 = *(void *)(v249 + 136);
          if (v13 != -1)
          {
            char v16 = (char *)*((void *)v326 + 501);
            if ((unint64_t)v16 <= v13) {
              goto LABEL_479;
            }
            uint64_t v250 = v249 + 16;
            uint64_t v325 = (char *)*((void *)v326 + 503);
            uint64_t v251 = *(void *)(v249 + 32);
            if (v251)
            {
              float32x4_t v252 = *(uint64_t **)(v250 + 32);
              size_t v2 = (size_t)&v325[104 * v13 + 72];
              unint64_t v3 = 16 * v251;
              do
              {
                uint64_t v253 = re::RenderGraphResourceDescriptions::targetDescription((re *)v227, v252);
                if (*(void *)(v253 + 88) == -1) {
                  *(void *)(v253 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)v2;
                }
                v252 += 2;
                v3 -= 16;
              }
              while (v3);
            }
            uint64_t v254 = v248 + 144 * v4;
            uint64_t v255 = *(void *)(v254 + 72);
            if (v255)
            {
              uint64_t v256 = *(uint64_t **)(v254 + 88);
              size_t v2 = 16 * v255;
              do
              {
                uint64_t v257 = re::RenderGraphResourceDescriptions::bufferDescription((re *)v227, v256);
                if (*(void *)(v257 + 32) == -1) {
                  *(void *)(v257 + 32) = *(void *)&v325[104 * v13 + 72];
                }
                v256 += 2;
                v2 -= 16;
              }
              while (v2);
            }
          }
          LODWORD(v25re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(v22 + 120);
          if (v258 <= (int)v5 + 1) {
            unint64_t v258 = (v5 + 1);
          }
          else {
            unint64_t v258 = v258;
          }
          while (1)
          {
            unint64_t v4 = (v5 + 1);
            if (v258 - 1 == v5) {
              break;
            }
            LODWORD(v5) = v5 + 1;
            unint64_t v259 = v4;
            if ((*(_DWORD *)(*(void *)(v22 + 104) + 144 * v4) & 0x80000000) != 0) {
              goto LABEL_399;
            }
          }
          unint64_t v259 = v258;
LABEL_399:
          unint64_t v5 = v259;
        }
        while (v12 != v259);
      }
      v22 += 136;
      uint64_t v199 = v326;
      if (v22 == v319) {
        goto LABEL_401;
      }
    }
    unint64_t v5 = v2;
    while (1)
    {
      unint64_t v321 = *(void *)(v22 + 56);
      unint64_t v232 = v321 + 144 * v5;
      unint64_t v13 = *(void *)(v232 + 136);
      if (v13 != -1) {
        goto LABEL_348;
      }
      unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(v199, *(const char **)(v22 + 24));
      if (ScopeOutputIndex != -1) {
        break;
      }
LABEL_366:
      LODWORD(v246) = *(_DWORD *)(v22 + 72);
      if (v246 <= (int)v2 + 1) {
        size_t v246 = (v2 + 1);
      }
      else {
        size_t v246 = v246;
      }
      uint64_t v199 = v326;
      while (1)
      {
        unint64_t v5 = (v2 + 1);
        if (v246 - 1 == v2) {
          break;
        }
        LODWORD(v2) = v2 + 1;
        size_t v247 = v5;
        if ((*(_DWORD *)(*(void *)(v22 + 56) + 144 * v5) & 0x80000000) != 0) {
          goto LABEL_374;
        }
      }
      size_t v247 = v246;
LABEL_374:
      size_t v2 = v247;
      if (v324 == v247) {
        goto LABEL_341;
      }
    }
    unint64_t v4 = v321 + 144 * v5 + 8;
    uint64_t v325 = (char *)*((void *)v326 + 470);
    while (1)
    {
      unint64_t v3 = ScopeOutputIndex;
      if ((unint64_t)v325 <= ScopeOutputIndex) {
        break;
      }
      unint64_t v12 = (unint64_t)v326;
      uint64_t v245 = *((void *)v326 + 472);
      if (!re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v245 + 136 * ScopeOutputIndex + 40, *(void *)v4))
      {
        unint64_t v13 = MEMORY[0x78];
        if (MEMORY[0x78] != -1)
        {
          uint64_t v199 = v326;
          unint64_t v232 = v321 + 144 * v5;
LABEL_348:
          char v16 = (char *)*((void *)v199 + 501);
          if ((unint64_t)v16 > v13)
          {
            unint64_t v233 = v232 + 16;
            uint64_t v234 = *((void *)v199 + 503);
            uint64_t v235 = *(void *)(v232 + 32);
            if (v235)
            {
              int v236 = *(uint64_t **)(v233 + 32);
              unint64_t v3 = v234 + 104 * v13 + 72;
              unint64_t v4 = 16 * v235;
              do
              {
                uint64_t v237 = re::RenderGraphResourceDescriptions::targetDescription((re *)v227, v236);
                if (*(void *)(v237 + 88) == -1) {
                  *(void *)(v237 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)v3;
                }
                v236 += 2;
                v4 -= 16;
              }
              while (v4);
            }
            unint64_t v238 = v321 + 144 * v5;
            uint64_t v239 = *(void *)(v238 + 72);
            if (v239)
            {
              uint64_t v240 = *(uint64_t **)(v238 + 88);
              uint64_t v241 = (void *)(v234 + 104 * v13 + 72);
              uint64_t v242 = 16 * v239;
              do
              {
                uint64_t v243 = re::RenderGraphResourceDescriptions::bufferDescription((re *)v227, v240);
                if (*(void *)(v243 + 32) == -1) {
                  *(void *)(v243 + 32) = *v241;
                }
                v240 += 2;
                v242 -= 16;
              }
              while (v242);
            }
            goto LABEL_366;
          }
LABEL_478:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v13;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_479:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v13;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_480:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v308 = v128;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v308;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_481:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v309 = v155;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v309;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_482:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v310 = v122;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v310;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_483:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v311 = v147;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v311;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_484:
          v334[0] = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 789;
          __int16 v346 = 2048;
          size_t v347 = v12;
          __int16 v348 = 2048;
          unint64_t v349 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_485:
          v334[0] = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 468;
          __int16 v346 = 2048;
          size_t v347 = (size_t)v325;
          __int16 v348 = 2048;
          unint64_t v349 = (unint64_t)v325;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_486:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v312 = v139;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v312;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_487:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v313 = v163;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v313;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_488:
          v334[0] = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 468;
          __int16 v346 = 2048;
          size_t v347 = v2;
          __int16 v348 = 2048;
          unint64_t v349 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_489:
          uint64_t v330 = 0;
          long long v351 = 0u;
          long long v352 = 0u;
          memset(v350, 0, sizeof(v350));
          size_t v314 = v90;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 789;
          __int16 v346 = 2048;
          size_t v347 = v314;
          __int16 v348 = 2048;
          unint64_t v349 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_490:
          v334[0] = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 468;
          __int16 v346 = 2048;
          size_t v347 = v2;
          __int16 v348 = 2048;
          unint64_t v349 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_491:
          *(void *)v343 = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          unint64_t v315 = v114;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(void *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(void *)(&v350[1].var0 + 1) = v315;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_492:
          v334[0] = 0;
          long long v339 = 0u;
          long long v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(void *)&v343[4] = "operator[]";
          __int16 v344 = 1024;
          int v345 = 468;
          __int16 v346 = 2048;
          size_t v347 = v2;
          __int16 v348 = 2048;
          unint64_t v349 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_493;
        }
      }
      unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(v326, *(const char **)(v245 + 136 * v3 + 24));
      if (ScopeOutputIndex == -1) {
        goto LABEL_366;
      }
    }
    *(void *)v343 = 0;
    long long v339 = 0u;
    long long v340 = 0u;
    memset(v338, 0, sizeof(v338));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v350[0].char var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
    *(void *)(&v350[0].var0 + 1) = "operator[]";
    WORD2(v350[0].var1) = 1024;
    *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
    *((_WORD *)&v350[1].var0 + 1) = 2048;
    *(void *)(&v350[1].var0 + 1) = v3;
    WORD2(v350[1].var1) = 2048;
    *(char **)((char *)&v350[1].var1 + 6) = v325;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_465:
    re::RenderGraphManager::addGraphToCache(*v300, v300[41], v227, v300[46]);
    uint64_t v95 = *(void *)(v227 + 648);
    uint64_t v96 = *(void *)(v227 + 632);
    if (!v317) {
      goto LABEL_468;
    }
    ++*((_DWORD *)v317 + 1);
    uint64_t v97 = (_DWORD *)((char *)v317 + 12);
LABEL_139:
    unint64_t v98 = v326;
    ++*v97;
    goto LABEL_469;
  }
LABEL_401:
  char v260 = (uint64_t *)((char *)v199 + 3152);
  re::RenderGraphBuilder::RenderGraphBuilder((uint64_t)v338, (re::RenderFrame *)((char *)v199 + 3448), (uint64_t)v199 + 3744, (uint64_t)v199 + 3152);
  uint64_t v261 = *((void *)v199 + 428);
  if (v261)
  {
    uint64_t v262 = (re::RenderGraph *)*((void *)v326 + 430);
    uint64_t v263 = 112 * v261;
    do
    {
      re::RenderGraph::setup(v262, (re::RenderGraphBuilder *)v338, (re::RenderFrame *)((char *)v326 + 32));
      uint64_t v262 = (re::RenderGraph *)((char *)v262 + 112);
      v263 -= 112;
    }
    while (v263);
  }
  uint64_t CompiledGraph = re::RenderGraphBuilder::createCompiledGraph((re *)v338, (uint64_t)v326 + 3408);
  char v266 = v326;
  uint64_t v227 = CompiledGraph;
  if ((re::RenderFrame *)(CompiledGraph + 784) != (re::RenderFrame *)((char *)v326 + 3784))
  {
    uint64_t v267 = *(void *)(CompiledGraph + 784);
    uint64_t v268 = *((void *)v326 + 473);
    if (v267) {
      BOOL v269 = v268 == 0;
    }
    else {
      BOOL v269 = 1;
    }
    if (!v269 && v267 != v268) {
      goto LABEL_517;
    }
    *(void *)(CompiledGraph + 784) = v268;
    *((void *)v326 + 47re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v267;
    uint64_t v271 = *(void *)(CompiledGraph + 792);
    *(void *)(CompiledGraph + 792) = *((void *)v326 + 474);
    *((void *)v326 + 474) = v271;
    uint64_t v272 = *(void *)(CompiledGraph + 800);
    *(void *)(CompiledGraph + 800) = *((void *)v326 + 475);
    *((void *)v326 + 475) = v272;
    uint64_t v273 = *(void *)(CompiledGraph + 816);
    *(void *)(CompiledGraph + 816) = *((void *)v326 + 477);
    *((void *)v326 + 47re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v273;
    ++*((_DWORD *)v326 + 952);
    ++*(_DWORD *)(CompiledGraph + 808);
  }
  uint64_t v274 = *((void *)v326 + 478);
  uint64_t v275 = *(void *)(CompiledGraph + 824);
  if (v275 != v274)
  {
    if (v274)
    {
      id v276 = (id)(v274 + 8);
      uint64_t v275 = *(void *)(v227 + 824);
    }
    if (v275) {

    }
    *(void *)(v227 + 824) = v274;
    char v266 = v326;
  }
  if (!*((void *)v266 + 501)) {
    goto LABEL_456;
  }
  unint64_t v277 = 0;
  size_t v2 = *(void *)(v227 + 328);
  uint64_t v325 = *(char **)(v227 + 320);
  unint64_t v13 = 104;
  unint64_t v3 = 136;
  unint64_t v4 = 0x7FFFFFFFLL;
  unint64_t v5 = 40;
  do
  {
    uint64_t v278 = *((void *)v266 + 503);
    uint64_t v279 = v278 + 104 * v277;
    unint64_t v203 = *(unsigned int *)(v279 + 88);
    if (v203 == -1) {
      goto LABEL_435;
    }
    unint64_t v12 = *(void *)(v227 + 760);
    if (v12 <= v203) {
      goto LABEL_502;
    }
    uint64_t v280 = *(void *)(v227 + 776) + 136 * v203;
    uint64_t v281 = v278 + 104 * v277;
    unint64_t v282 = *(void *)(v281 + 80);
    if (*(void *)(v281 + 8) || *(void *)(v278 + 104 * v277 + 16))
    {
      unint64_t v336 = *(void *)v279;
      if (*(void *)v2)
      {
        unint64_t v283 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v282 ^ (v282 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v282 ^ (v282 >> 30))) >> 27));
        unint64_t v284 = (v283 ^ (v283 >> 31)) % *(unsigned int *)(v2 + 24);
        uint64_t v285 = *(void *)(v2 + 16);
        uint64_t v286 = *(unsigned int *)(*(void *)(v2 + 8) + 4 * v284);
        if (v286 != 0x7FFFFFFF)
        {
          while (*(void *)(v285 + 40 * v286 + 16) != v282)
          {
            uint64_t v286 = *(_DWORD *)(v285 + 40 * v286 + 8) & 0x7FFFFFFF;
            if (v286 == 0x7FFFFFFF) {
              goto LABEL_432;
            }
          }
          goto LABEL_433;
        }
      }
      else
      {
        uint64_t v285 = *(void *)(v2 + 16);
      }
LABEL_432:
      LODWORD(v286) = 0x7FFFFFFF;
LABEL_433:
      uint64_t v287 = v285 + 40 * v286;
      uint64_t v330 = *(void *)(v287 + 24);
      __s = *(char **)(v287 + 32);
      re::RenderFrame::specifyScopeLaneInternal(&v336, &v330, v280, *(unsigned __int8 *)(v278 + 104 * v277 + 64), (unint64_t *)v227);
      unint64_t v336 = 0;
LABEL_434:
      char v266 = v326;
      goto LABEL_435;
    }
    unint64_t v289 = *(unsigned int *)(v278 + 104 * v277 + 24);
    if (v289 != -1 && *((void *)v266 + 515) > v289 && *(void *)(*((void *)v266 + 516) + 32 * v289))
    {
      unint64_t v335 = *(void *)v279;
      unint64_t v12 = *((void *)v325 + 2);
      if (v12 <= v289) {
        goto LABEL_515;
      }
      unsigned int v290 = (unint64_t *)(*((void *)v325 + 4) + 16 * v289);
      unint64_t v327 = *v290;
      unint64_t v328 = v290[1];
      re::RenderFrame::specifyScopeLaneInternal(&v335, &v327, v280, *(unsigned __int8 *)(v278 + 104 * v277 + 64), (unint64_t *)v227);
      unint64_t v335 = 0;
      goto LABEL_434;
    }
LABEL_435:
    ++v277;
    unint64_t v288 = *((void *)v266 + 501);
  }
  while (v288 > v277);
  if (v288)
  {
    uint64_t v291 = 0;
    size_t v2 = 0;
    unint64_t v12 = *(void *)(v227 + 320);
    unint64_t v13 = 136;
    do
    {
      uint64_t v292 = *((void *)v266 + 503);
      unint64_t v3 = *(unsigned int *)(v292 + v291 + 88);
      if (v3 != -1)
      {
        unint64_t v4 = *(void *)(v227 + 760);
        if (v4 <= v3) {
          goto LABEL_505;
        }
        uint64_t v293 = *(void *)(v227 + 776) + 136 * v3;
        if (*(void *)(v292 + v291 + 8) || *(void *)(v292 + v291 + 16))
        {
          unint64_t v327 = *(void *)(v292 + v291);
          re::RenderFrame::makeRenderGraphManagedInternal(&v327, v293, v227);
          unint64_t v327 = 0;
        }
        else
        {
          unint64_t v3 = *(unsigned int *)(v292 + v291 + 24);
          if (v3 != -1 && *((void *)v326 + 515) > v3 && *(void *)(*((void *)v326 + 516) + 32 * v3))
          {
            unint64_t v337 = *(void *)(v292 + v291);
            unint64_t v4 = *(void *)(v12 + 16);
            if (v4 <= v3) {
              goto LABEL_516;
            }
            re::RenderFrame::makeRenderGraphManagedInternal(&v337, v293, v227);
            unint64_t v337 = 0;
          }
        }
      }
      ++v2;
      char v266 = v326;
      v291 += 104;
    }
    while (*((void *)v326 + 501) > v2);
  }
LABEL_456:
  re::RenderGraphResourceDescriptions::resolveResourceSources((void *)v227);
  *((unsigned char *)v326 + 336) = 0;
  re::RenderGraphBuilder::~RenderGraphBuilder((re::RenderGraphBuilder *)v338);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v334);
  re::RenderGraphProcessorManager::process(*(void *)v326, v227, (void *)v326 + 399);
  if (v260 != (uint64_t *)(v227 + 576))
  {
    uint64_t v295 = *v260;
    uint64_t v296 = *(void *)(v227 + 576);
    if (!*v260 || !v296 || v295 == v296)
    {
      *((void *)v326 + 394) = v296;
      *(void *)(v227 + 576) = v295;
      uint64_t v297 = *((void *)v326 + 395);
      *((void *)v326 + 395) = *(void *)(v227 + 584);
      *(void *)(v227 + 584) = v297;
      uint64_t v298 = *((void *)v326 + 396);
      *((void *)v326 + 396) = *(void *)(v227 + 592);
      *(void *)(v227 + 592) = v298;
      uint64_t v299 = *((void *)v326 + 398);
      *((void *)v326 + 39re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(v227 + 608);
      *(void *)(v227 + 60re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v299;
      ++*(_DWORD *)(v227 + 600);
      ++*((_DWORD *)v326 + 794);
      goto LABEL_461;
    }
LABEL_518:
    re::internal::assertLog((re::internal *)4, v294, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
  }
LABEL_461:
  re::RenderGraphCompiled::validateAttachmentsDuringGraphBuild(v227, *((void *)v326 + 47));
  unsigned int v300 = (uint64_t *)v326;
  if (!*((void *)v326 + 396)) {
    goto LABEL_465;
  }
  re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"buildOrRetainCachedGraph", 963, (re::RenderGraphCompiled *)v227);
  if (v317)
  {
    uint64_t v96 = 0;
    uint64_t v95 = 0;
    ++*((_DWORD *)v317 + 1);
    ++*((_DWORD *)v317 + 3);
    uint64_t v97 = (_DWORD *)((char *)v317 + 16);
    goto LABEL_139;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
LABEL_468:
  unint64_t v98 = v326;
LABEL_469:
  __int16 v301 = (char *)v98 + 4176;
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)v98 + 4176);
  if (v96)
  {
    uint64_t v302 = v95 + 112 * v96;
    do
    {
      uint64_t v303 = *(void *)(v95 + 16);
      if (v303)
      {
        unint64_t v304 = *(uint64_t **)(v95 + 32);
        uint64_t v305 = 8 * v303;
        do
        {
          uint64_t v306 = *v304++;
          (*(void (**)(uint64_t, char *))(*(void *)v306 + 32))(v306, v301);
          v305 -= 8;
        }
        while (v305);
      }
      v95 += 112;
    }
    while (v95 != v302);
  }
  return re::RenderGraphManager::deleteRemovedProviders(*(re **)v326);
}

re *re::internal::destroyPersistent<re::RenderGraphCompiled>(re *result, uint64_t a2, re::RenderGraphCompiled *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::RenderGraphCompiled::~RenderGraphCompiled(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, re::RenderGraphCompiled *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::RenderFrame::fillSpecifyParameterScopeOutputs(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a2 + 104 * result;
    do
    {
      if (a4)
      {
        uint64_t v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = *(void *)(v6 + 40);
        if (v10) {
          size_t v11 = v10 >> 1;
        }
        else {
          size_t v11 = v10 >> 1;
        }
        while (1)
        {
          uint64_t v12 = a3 + 136 * v8;
          if (*(void *)(v12 + 8) == v11)
          {
            unint64_t v13 = (v10 & 1) != 0 ? *(const void **)(v6 + 48) : (const void *)(v6 + 41);
            uint64_t result = memcmp(*(const void **)v12, v13, v11);
            if (!result) {
              break;
            }
          }
          uint64_t v8 = ++v9;
          if (a4 <= v9) {
            goto LABEL_15;
          }
        }
        *(_DWORD *)(v6 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v9;
      }
LABEL_15:
      v6 += 104;
    }
    while (v6 != v7);
  }
  return result;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          uint64_t v9 = *(void *)(v6 + v4 + 16);
          if (v9)
          {

            *(void *)(v8 + 16) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v10 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v10;
  }
}

void *re::RenderFrame::execute(re::RenderFrame *this, re::FrameContext *a2)
{
  MEMORY[0x270FA5388](this);
  unint64_t v3 = (int *)v2;
  uint64_t v5 = (uint64_t)v4;
  uint64_t v346 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)re::RenderGraphManager::getCachedGraph(*v4, v4[41], *(void *)(v2 + 32));
  if (result)
  {
    long long v306 = 0u;
    long long v307 = 0u;
    long long v304 = 0u;
    long long v305 = 0u;
    *(_OWORD *)__dst = 0u;
    long long v303 = 0u;
    long long v300 = 0u;
    long long v301 = 0u;
    uint64_t v308 = v5 + 3152;
    unint64_t v309 = result;
    unint64_t v7 = result[8];
    if (v7)
    {
      unint64_t v8 = result[10];
      *((void *)&v300 + 1) = v7;
      if (v7 >= 0x24924924924924ALL) {
        goto LABEL_411;
      }
      *(void *)&long long v301 = v10;
      if (!v10)
      {
LABEL_412:
        re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_413;
      }
      uint64_t v12 = v10;
      unint64_t v13 = v7 - 1;
      if (v7 != 1)
      {
        __asm { FMOV            V1.2S, #1.0 }
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 3;
          *((_DWORD *)v12 + 2) = 2;
          *(void *)(v12 + 12) = -1;
          *(void *)(v12 + 20) = -1;
          *(void *)(v12 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = -1;
          v12[36] = 0;
          *((void *)v12 + 5) = _D1;
          *((_OWORD *)v12 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = xmmword_2343AEB90;
          *((_OWORD *)v12 + 4) = xmmword_2343AEBA0;
          *((_DWORD *)v12 + 20) = -1;
          *(_OWORD *)(v12 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = xmmword_234378E20;
          v12[104] = 0;
          v12 += 112;
          --v13;
        }
        while (v13);
      }
      *(void *)uint64_t v12 = 3;
      *((_DWORD *)v12 + 2) = 2;
      *(void *)(v12 + 12) = -1;
      *(void *)(v12 + 20) = -1;
      *(void *)(v12 + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = -1;
      v12[36] = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((void *)v12 + 5) = _D0;
      *((_OWORD *)v12 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = xmmword_2343AEB90;
      *((_OWORD *)v12 + 4) = xmmword_2343AEBA0;
      *((_DWORD *)v12 + 20) = -1;
      *(_OWORD *)(v12 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = xmmword_234378E20;
      v12[104] = 0;
      uint64_t result = memmove(v10, (const void *)v8, 112 * v7 - 7);
    }
    unint64_t v7 = v309[15];
    unint64_t v8 = v309[13];
    if (*((void *)&v301 + 1))
    {
LABEL_16:
      if (__dst[0] != (void *)v8) {
        goto LABEL_410;
      }
      if (v8) {
        unint64_t v19 = (_anonymous_namespace_ *)memmove(__dst[1], (const void *)v7, 48 * v8);
      }
      goto LABEL_19;
    }
    if (!v8)
    {
LABEL_19:
      uint64_t v294 = (uint64_t)v3;
      if (*(void *)(v5 + 4152))
      {
        unint64_t v23 = 0;
        unint64_t v8 = 0x6A3DF053A9B45F3DLL;
        unint64_t v24 = v5 + 408;
        do
        {
          if ((*(void *)(v24 + 8 * re::Bitset<64>::toWordIndex(v5 + 408, v23)) >> v23))
          {
            unint64_t v7 = *(void *)(v5 + 4152);
            if (v7 <= v23)
            {
              *(void *)char v342 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 789;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v23;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_401:
              *(void *)char v342 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 789;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v23;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_402:
              id v312 = 0;
              long long v344 = 0u;
              long long v345 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)char v342 = 136315906;
              *(void *)&v342[4] = "operator[]";
              *(_WORD *)&v342[12] = 1024;
              *(_DWORD *)&v342[14] = 789;
              *(_WORD *)&v342[18] = 2048;
              *(void *)&v342[20] = v8;
              *(_WORD *)&v342[28] = 2048;
              *(void *)&v342[30] = v24;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_403:
              *(void *)char v342 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_404:
              id v312 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_405:
              id v312 = 0;
              long long v344 = 0u;
              long long v345 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)char v342 = 136315906;
              *(void *)&v342[4] = "operator[]";
              *(_WORD *)&v342[12] = 1024;
              *(_DWORD *)&v342[14] = 468;
              *(_WORD *)&v342[18] = 2048;
              *(void *)&v342[20] = v8;
              *(_WORD *)&v342[28] = 2048;
              *(void *)&v342[30] = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_406:
              id v310 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_407:
              id v310 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_408:
              id v310 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_409:
              id v315 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v316 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(void *)((char *)&buf[1] + re::FixedArray<re::TextureArgument>::deinit((void *)this + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_410:
              re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
              _os_crash();
              __break(1u);
LABEL_411:
              re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 112, v7);
              _os_crash();
              __break(1u);
              goto LABEL_412;
            }
            if (!*(void *)(*(void *)(v5 + 4168) + 8 * v23))
            {
              re::DynamicString::format((re::DynamicString *)"Requested framebuffer %d is invalid.", (re::DynamicString *)&v316, v23);
              re::RenderFrame::addError(v5, (uint64_t)&v316);
              if (void)v316 && (BYTE8(v316)) {
                (*(void (**)(void))(*(void *)v316 + 40))();
              }
              unint64_t v7 = *(void *)(v5 + 4152);
            }
            if (v7 <= v23) {
              goto LABEL_401;
            }
            id v25 = *(id *)(*(void *)(v5 + 4168) + 8 * v23);
            id v312 = v25;
            *(void *)&buf[0] = (unint64_t)v316 >> 1;
            *(void *)char v342 = 0x6A3DF053A9B45F3DLL;
            re::RenderFrame::registerExternalTexture(v5, &v312, buf, v342, 0);
            re::StringID::destroyString((re::StringID *)&v316);
            if (v25)
            {

              id v312 = 0;
            }
          }
          else
          {
            id v310 = 0;
            *(void *)&buf[0] = (unint64_t)v316 >> 1;
            *(void *)char v342 = 0x6A3DF053A9B45F3DLL;
            re::RenderFrame::registerExternalTexture(v5, &v310, buf, v342, 0);
            re::StringID::destroyString((re::StringID *)&v316);
          }
          ++v23;
        }
        while (*(void *)(v5 + 4152) > v23);
      }
      unint64_t v26 = *(void *)(v5 + 4008);
      if (v26)
      {
        uint64_t v27 = 0;
        for (unint64_t i = 0; i < v26; ++i)
        {
          unint64_t v3 = *(int **)(v5 + 4024);
          if (!LOBYTE(v3[v27 + 24]))
          {
            size_t v29 = *(void **)&v3[v27 + 2];
            if (v29)
            {
              if (v3[v27 + 22] != -1) {
                goto LABEL_45;
              }
            }
            else
            {
              if (*(void *)&v3[v27 + 4]) {
                _ZF = v3[v27 + 22] == -1;
              }
              else {
                _ZF = 1;
              }
              if (!_ZF)
              {
LABEL_45:
                *(void *)&buf[0] = v29;
                *(void *)&long long v316 = ((*(void *)&v3[v27 + 20] << 6)
                                  + (*(void *)&v3[v27 + 20] >> 2)
                                  + 0x8756A0D28FEDB54) ^ *(void *)&v3[v27 + 20];
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(v5 + 3312, (unint64_t *)&v316, (id *)buf);
                if (*(void *)&buf[0])
                {

                  *(void *)&buf[0] = 0;
                }
              }
            }
          }
          unint64_t v26 = *(void *)(v5 + 4008);
          v27 += 26;
        }
      }
      uint64_t v31 = *(void *)(v5 + 4048);
      *(void *)&long long v306 = *(void *)(v5 + 4064);
      *((void *)&v306 + 1) = v31;
      uint64_t v32 = *(void *)(v5 + 4088);
      *(void *)&long long v307 = *(void *)(v5 + 4104);
      *((void *)&v307 + 1) = v32;
      long long v316 = xmmword_2343AEBB0;
      long long v317 = xmmword_2343AEBC0;
      LODWORD(v31re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
      BYTE4(v31re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((void *)&v318 + 1) = _D0;
      long long v319 = xmmword_2343AEB90;
      long long v320 = xmmword_2343AEBA0;
      LODWORD(v3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = -1;
      *((void *)&v321 + 1) = 0;
      uint64_t v322 = 0;
      char v323 = 0;
      if (v26)
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v34 = *(void *)(v5 + 4024);
          uint64_t v35 = v34 + 104 * v7;
          unint64_t v8 = *(unsigned int *)(v35 + 88);
          if (v8 != -1)
          {
            unint64_t v24 = v309[95];
            if (v24 <= v8) {
              goto LABEL_402;
            }
            uint64_t v36 = v309[97];
            uint64_t v37 = v36 + 136 * v8;
            uint64_t v38 = *(void **)(v34 + 104 * v7 + 8);
            if (v38)
            {
              unint64_t v39 = *(void *)v35;
              id v40 = v38;
              id v310 = v40;
              re::RenderFrame::fillScopeLaneProperties(v5, v39, &v310, v37, (uint64_t)&v300);
              if (v40)
              {

                id v310 = 0;
              }
            }
            else if (*(void *)(v34 + 104 * v7 + 16))
            {
              if (*(unsigned char *)(v34 + 104 * v7 + 40)) {
                uint64_t v41 = *(void *)(v34 + 104 * v7 + 48);
              }
              else {
                uint64_t v41 = v34 + 104 * v7 + 41;
              }
              re::DynamicString::format((re::DynamicString *)"Texture descriptor for graph scope %s was never specified as a texture.", (re::DynamicString *)buf, v41);
              re::RenderFrame::addError(v5, (uint64_t)buf);
              if (*(void *)&buf[0] && (BYTE8(buf[0]) & 1) != 0) {
                (*(void (**)(void))(**(void **)&buf[0] + 40))();
              }
            }
            else
            {
              unint64_t v42 = *(unsigned int *)(v34 + 104 * v7 + 24);
              if (*(void *)(v5 + 4152) > v42 && (unint64_t v43 = *(void **)(*(void *)(v5 + 4168) + 8 * v42)) != 0)
              {
                unint64_t v44 = *(void *)v35;
                id v45 = v43;
                id v315 = v45;
                re::RenderFrame::fillScopeLaneProperties(v5, v44, &v315, v37, (uint64_t)&v300);
                if (v45)
                {

                  id v315 = 0;
                }
              }
              else
              {
                uint64_t v46 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v36 + 136 * v8 + 40, *(void *)v35);
                if (v46)
                {
                  size_t v47 = (void *)v46;
                  if (*(void *)(v46 + 16))
                  {
                    uint64_t v48 = 0;
                    unint64_t v49 = 0;
                    do
                    {
                      unsigned int v50 = (_OWORD *)(v47[4] + v48);
                      *(void *)&buf[0] = 0;
                      *((void *)&buf[0] + 1) = -1;
                      buf[0] = *v50;
                      uint64_t v51 = (_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v300, (uint64_t)buf);
                      if (*v51 == 3 || *v51 == 0)
                      {
                        _DWORD *v51 = 0;
                        re::RenderGraphTargetDescription::copySetProperties((uint64_t)v51, (uint64_t)&v316);
                      }
                      ++v49;
                      v48 += 16;
                    }
                    while (v47[2] > v49);
                  }
                  if (v47[7])
                  {
                    uint64_t v53 = 0;
                    unint64_t v54 = 0;
                    do
                    {
                      unint64_t v55 = (_OWORD *)(v47[9] + v53);
                      *(void *)&buf[0] = 0;
                      *((void *)&buf[0] + 1) = -1;
                      buf[0] = *v55;
                      uint64_t v56 = re::RenderGraphExecutable::bufferDescription((uint64_t)&v300, (uint64_t)buf);
                      if (*(_DWORD *)v56 == 3 || *(_DWORD *)v56 == 0)
                      {
                        *(_DWORD *)uint64_t v56 = 0;
                        if (*(void *)(v56 + 8) == -1) {
                          *(void *)(v56 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 32;
                        }
                        if (*(void *)(v56 + 32) == -1) {
                          *(void *)(v56 + 32) = 0;
                        }
                      }
                      ++v54;
                      v53 += 16;
                    }
                    while (v47[7] > v54);
                  }
                }
              }
            }
          }
          ++v7;
        }
        while (*(void *)(v5 + 4008) > v7);
      }
      uint64_t v58 = v309[37];
      uint64_t v59 = *(void *)(v58 + 16);
      if (!v59) {
        goto LABEL_117;
      }
      unint64_t v7 = *(void *)(v58 + 32) + 24;
      uint64_t v60 = 48 * v59;
      while (1)
      {
        int v61 = *(_DWORD *)(v7 - 24);
        if (v61 == 1)
        {
          *(void *)&buf[0] = *(void *)(v7 - 16) >> 1;
          *((void *)&buf[0] + 1) = *(void *)v7;
          uint64_t v68 = re::RenderGraphExecutable::bufferDescription((uint64_t)&v300, (uint64_t)buf);
          uint64_t v69 = v68;
          if (*(_DWORD *)v68 != 2)
          {
            if (*(void *)(v68 + 8) == -1) {
              *(void *)(v68 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 32;
            }
            if (*(void *)(v68 + 32) == -1) {
              *(void *)(v68 + 32) = 0;
            }
            goto LABEL_115;
          }
          re::StringID::StringID((re::StringID *)v342, (const StringID *)(v7 - 16));
          re::RenderFrame::getExternalBuffer(v5, v69, (id **)buf);
          unint64_t v70 = *(void **)&buf[0];
          id v71 = *(id *)&buf[0];
          id v312 = v71;
          if (v70) {

          }
          re::StringID::destroyString((re::StringID *)v342);
          if (v71)
          {
            re::RenderGraphBufferDescription::makeValid(v69, &v312, *(void *)(v5 + 416));
            float32x4_t v67 = v71;
LABEL_108:
          }
        }
        else if (!v61)
        {
          *(void *)&buf[0] = *(void *)(v7 - 16) >> 1;
          *((void *)&buf[0] + 1) = *(void *)v7;
          uint64_t v62 = re::RenderGraphExecutable::targetDescription((uint64_t)&v300, (uint64_t)buf);
          uint64_t v63 = v62;
          unint64_t v8 = *(unsigned int *)(v62 + 76);
          if (v8 != -1)
          {
            unint64_t v3 = (int *)*((void *)&v300 + 1);
            if (*((void *)&v300 + 1) <= v8) {
              goto LABEL_405;
            }
            re::RenderGraphTargetDescription::copySetProperties(v62, v301 + 112 * v8);
          }
          if (*(_DWORD *)v63 != 2)
          {
            re::RenderGraphTargetDescription::copySetProperties(v63, (uint64_t)&v316);
            goto LABEL_115;
          }
          re::StringID::StringID((re::StringID *)buf, (const StringID *)(v7 - 16));
          uint64_t v64 = (id *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v5 + 3312, (uint64_t *)(v63 + 96));
          if (!v64)
          {
            re::StringID::destroyString((re::StringID *)buf);
            goto LABEL_115;
          }
          id v65 = *v64;
          re::StringID::destroyString((re::StringID *)buf);
          if (v65)
          {
            id v66 = v65;
            id v314 = v66;
            re::RenderGraphTargetDescription::makeValid(v63, &v314, *(void *)(v5 + 416));
            if (v66)
            {

              id v314 = 0;
            }
            float32x4_t v67 = v65;
            goto LABEL_108;
          }
        }
LABEL_115:
        v7 += 48;
        v60 -= 48;
        if (!v60)
        {
          uint64_t v58 = v309[37];
LABEL_117:
          uint64_t v72 = *(void *)(v58 + 16);
          if (!v72) {
            goto LABEL_179;
          }
          unint64_t v73 = (unsigned int *)(*(void *)(v58 + 32) + 28);
          uint64_t v74 = 48 * v72;
          unint64_t v3 = &dword_233120000;
          while (2)
          {
            int v75 = *(v73 - 7);
            if (v75 != 1)
            {
              if (v75) {
                goto LABEL_143;
              }
              *(void *)&long long v316 = *(void *)(v73 - 5) >> 1;
              *((void *)&v316 + 1) = *(void *)(v73 - 1);
              uint64_t v76 = re::RenderGraphExecutable::targetDescription((uint64_t)&v300, (uint64_t)&v316);
              id v312 = 0;
              if (*(_DWORD *)v76 == 2)
              {
                re::StringID::StringID((re::StringID *)&v316, (const StringID *)(v73 - 5));
                unint64_t v77 = (id *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v5 + 3312, (uint64_t *)(v76 + 96));
                if (v77) {
                  unint64_t v77 = (id *)*v77;
                }
                *(void *)&buf[0] = v77;
                NS::SharedPtr<MTL::Texture>::operator=(&v312, (void **)buf);
                if (*(void *)&buf[0])
                {

                  *(void *)&buf[0] = 0;
                }
                re::StringID::destroyString((re::StringID *)&v316);
                if (!v312)
                {
                  uint32x4_t v78 = NS::SharedPtr<MTL::Texture>::operator=(&v312, (void **)(*(void *)(*(void *)(v5 + 8) + 64) + 32));
                  re::StringID::StringID((re::StringID *)&v316, (const StringID *)(v73 - 5));
                  *(void *)&buf[0] = (unint64_t)v316 >> 1;
                  BOOL v79 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&xmmword_26AF94918, (uint64_t *)buf);
                  *(void *)&buf[0] = 0;
                  re::StringID::destroyString((re::StringID *)&v316);
                  if (!v79)
                  {
                    re::StringID::StringID((re::StringID *)&v316, (const StringID *)(v73 - 5));
                    *(void *)&buf[0] = (unint64_t)v316 >> 1;
                    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)&xmmword_26AF94918, (uint64_t *)buf);
                    *(void *)&buf[0] = 0;
                    re::StringID::destroyString((re::StringID *)&v316);
                    uint64_t v82 = *re::graphicsLogObjects(v81);
                    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                    {
                      re::StringID::StringID((re::StringID *)&v316, (const StringID *)(v73 - 5));
                      LODWORD(buf[0]) = 136315138;
                      *(void *)((char *)buf + 4) = *((void *)&v316 + 1);
                      _os_log_impl(&dword_233120000, v82, OS_LOG_TYPE_DEFAULT, "Invalid external texture bound to resource (%s). Setting it to a gray 1x1 fallback texture.", (uint8_t *)buf, 0xCu);
                      re::StringID::destroyString((re::StringID *)&v316);
                    }
                  }
                  id v83 = v312;
                  id v314 = v83;
                  re::RenderGraphTargetDescription::makeValid(v76, &v314, *(void *)(v5 + 416));
                  if (v83)
                  {

                    id v314 = 0;
                  }
                }
              }
              unint64_t v8 = *v73;
              unint64_t v7 = *((void *)&v303 + 1);
              if (*((void *)&v303 + 1) <= v8) {
                goto LABEL_403;
              }
              NS::SharedPtr<MTL::Texture>::operator=((void **)(v304 + 8 * v8), &v312);
              *(_DWORD *)(v76 + 60) = *(_DWORD *)(v76 + 56);
              id v84 = v312;
              if (!v312) {
                goto LABEL_143;
              }
LABEL_142:

              goto LABEL_143;
            }
            *(_OWORD *)char v342 = 0uLL;
            *(void *)&long long v316 = *(void *)(v73 - 5) >> 1;
            *((void *)&v316 + 1) = *(void *)(v73 - 1);
            uint64_t v85 = (_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v300, (uint64_t)&v316);
            if (*v85 == 2)
            {
              uint64_t v86 = (uint64_t)v85;
              re::StringID::StringID((re::StringID *)buf, (const StringID *)(v73 - 5));
              re::RenderFrame::getExternalBuffer(v5, v86, (id **)&v316);
              NS::SharedPtr<MTL::Texture>::operator=((void **)v342, (void **)&v316);
              *(void *)&v342[8] = *((void *)&v316 + 1);
              if ((void)v316)
              {

                *(void *)&long long v316 = 0;
              }
              re::StringID::destroyString((re::StringID *)buf);
              if (!*(void *)v342) {
                re::RenderGraphBufferDescription::makeValid(v86, (id *)v342, *(void *)(v5 + 416));
              }
            }
            unint64_t v8 = *v73;
            unint64_t v7 = v305;
            if ((unint64_t)v305 <= v8) {
              goto LABEL_404;
            }
            uint64_t v87 = *((void *)&v305 + 1) + 16 * v8;
            NS::SharedPtr<MTL::Texture>::operator=((void **)v87, (void **)v342);
            *(void *)(v87 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)&v342[8];
            id v84 = *(id *)v342;
            if (*(void *)v342) {
              goto LABEL_142;
            }
LABEL_143:
            v73 += 12;
            v74 -= 48;
            if (v74) {
              continue;
            }
            break;
          }
          uint64_t v88 = v309[37];
          uint64_t v89 = *(void *)(v88 + 16);
          if (!v89) {
            goto LABEL_179;
          }
          unint64_t v7 = *(void *)(v88 + 32) + 24;
          uint64_t v90 = 48 * v89;
          while (2)
          {
            int v91 = *(_DWORD *)(v7 - 24);
            if (v91 != 1)
            {
              if (v91) {
                goto LABEL_164;
              }
              *(void *)&long long v316 = *(void *)(v7 - 16) >> 1;
              *((void *)&v316 + 1) = *(void *)v7;
              long long v92 = (_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v300, (uint64_t)&v316);
              if (*v92 != 4 || v92[18] == -1) {
                goto LABEL_164;
              }
              *(void *)char v342 = *(void *)(v7 - 16) >> 1;
              *(void *)&v342[8] = *(void *)v7;
              re::RenderGraphResourceDescriptions::targetDescriptionSource((uint64_t)v309, (uint64_t)v342, (uint64_t)&v312);
              unint64_t v8 = HIDWORD(v313);
              unint64_t v3 = (int *)*((void *)&v303 + 1);
              if (*((void *)&v303 + 1) <= (unint64_t)HIDWORD(v313)) {
                goto LABEL_406;
              }
              id v315 = *(id *)(v304 + 8 * HIDWORD(v313));
              unint64_t v8 = *(unsigned int *)&v342[12];
              unint64_t v3 = (int *)*((void *)&v303 + 1);
              if (*((void *)&v303 + 1) <= (unint64_t)*(unsigned int *)&v342[12]) {
                goto LABEL_408;
              }
              NS::SharedPtr<MTL::Texture>::operator=((void **)(v304 + 8 * *(unsigned int *)&v342[12]), &v315);
              id v94 = v315;
              if (!v315) {
                goto LABEL_164;
              }
LABEL_163:

              goto LABEL_164;
            }
            *(void *)&long long v316 = *(void *)(v7 - 16) >> 1;
            *((void *)&v316 + 1) = *(void *)v7;
            uint64_t v95 = (_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v300, (uint64_t)&v316);
            if (*v95 == 4 && v95[7] != -1)
            {
              *(void *)char v342 = *(void *)(v7 - 16) >> 1;
              *(void *)&v342[8] = *(void *)v7;
              re::RenderGraphResourceDescriptions::bufferDescriptionSource((uint64_t)v309, (uint64_t)v342, (uint64_t)&v312);
              unint64_t v8 = HIDWORD(v313);
              unint64_t v3 = (int *)v305;
              if ((unint64_t)v305 <= HIDWORD(v313)) {
                goto LABEL_407;
              }
              uint64_t v97 = *((void *)&v305 + 1) + 16 * HIDWORD(v313);
              id v310 = *(id *)v97;
              uint64_t v311 = *(void *)(v97 + 8);
              unint64_t v8 = *(unsigned int *)&v342[12];
              unint64_t v3 = (int *)v305;
              if ((unint64_t)v305 <= *(unsigned int *)&v342[12]) {
                goto LABEL_409;
              }
              uint64_t v98 = *((void *)&v305 + 1) + 16 * *(unsigned int *)&v342[12];
              NS::SharedPtr<MTL::Texture>::operator=((void **)v98, &v310);
              *(void *)(v98 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v311;
              id v94 = v310;
              if (v310) {
                goto LABEL_163;
              }
            }
LABEL_164:
            v7 += 48;
            v90 -= 48;
            if (v90) {
              continue;
            }
            break;
          }
          uint64_t v99 = v309[37];
          uint64_t v100 = *(void *)(v99 + 16);
          if (v100)
          {
            uint64_t v101 = (void *)(*(void *)(v99 + 32) + 24);
            for (uint64_t j = 48 * v100; j; j -= 48)
            {
              int v103 = *((_DWORD *)v101 - 6);
              if (v103 == 1)
              {
                *(void *)&long long v316 = *(v101 - 2) >> 1;
                *((void *)&v316 + 1) = *v101;
                if (*(_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v300, (uint64_t)&v316) == 3)
                {
                  re::StringID::StringID((re::StringID *)buf, (const StringID *)v101 - 1);
                  re::DynamicString::format((re::DynamicString *)"Buffer (%s) left unspecified by the end of the frame.", (re::DynamicString *)&v316, *((void *)&buf[0] + 1));
                  goto LABEL_173;
                }
              }
              else if (!v103)
              {
                *(void *)&long long v316 = *(v101 - 2) >> 1;
                *((void *)&v316 + 1) = *v101;
                if (*(_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v300, (uint64_t)&v316) == 3)
                {
                  re::StringID::StringID((re::StringID *)buf, (const StringID *)v101 - 1);
                  re::DynamicString::format((re::DynamicString *)"Target (%s) left unspecified by the end of the frame.", (re::DynamicString *)&v316, *((void *)&buf[0] + 1));
LABEL_173:
                  re::RenderFrame::addError(v5, (uint64_t)&v316);
                  if ((void)v316)
                  {
                    if (BYTE8(v316)) {
                      (*(void (**)(void))(*(void *)v316 + 40))();
                    }
                    long long v316 = 0u;
                    long long v317 = 0u;
                  }
                  re::StringID::destroyString((re::StringID *)buf);
                }
              }
              v101 += 6;
            }
          }
LABEL_179:
          re::RenderGraphExecutable::validateAttachmentsPerFrame((uint64_t)&v300, *(void *)(v5 + 376));
          if (!*(void *)(v308 + 16))
          {
            re::RenderGraphContext::RenderGraphContext((uint64_t)&v316, v294, *(re::RenderManager **)(v5 + 8), *(void *)(v5 + 24), *(void *)(v5 + 16), v5 + 32, *(void *)(*(void *)v5 + 128), (uint64_t)&v300, *(void *)(*(void *)v5 + 280), *(void *)(*(void *)v5 + 288), *(unsigned char *)(v5 + 425), v5 + 4176);
            uint64_t v104 = *(void *)(v5 + 3928);
            if (v104)
            {
              simd_float4 v105 = *(id **)(v5 + 3944);
              uint64_t v106 = 8 * v104;
              do
              {
                id v107 = *v105;
                id v299 = v107;
                re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)&v333, &v299);
                if (v299)
                {

                  id v299 = 0;
                }
                if (v107) {

                }
                ++v105;
                v106 -= 8;
              }
              while (v106);
            }
            uint64_t v108 = *(re::RenderGraphResourceAllocationManager **)(*(void *)v5 + 128);
            unint64_t v109 = *((void *)&v303 + 1);
            unint64_t v110 = v305;
            uint64_t v111 = v309[37];
            uint64_t v112 = *(void *)(v111 + 16);
            if (v112)
            {
              uint64_t v113 = (unsigned int *)(*(void *)(v111 + 32) + 36);
              uint64_t v114 = 31;
              do
              {
                uint64_t v114 = *v113 + 19 * (*(v113 - 1) + 19 * v114);
                v113 += 12;
                --v112;
              }
              while (v112);
            }
            else
            {
              uint64_t v114 = 31;
            }
            unint64_t v116 = re::RenderGraphExecutable::calculateResourcePropertiesHash((re::RenderGraphExecutable *)&v300);
            re::RenderGraphResourceAllocationManager::onFrameStart(v108, v109, v110, v114, v116);
            re::RenderGraphExecutable::execute((re::RenderGraphExecutable *)&v300, (re::RenderGraphContext *)&v316);
            unint64_t v118 = (uint64_t *)(v5 + 616);
            if ((uint64_t *)(v5 + 616) != &v334)
            {
              uint64_t v119 = *v118;
              uint64_t v120 = v334;
              if (!*v118 || v119 == v334)
              {
                *(void *)(v5 + 616) = v334;
                uint64_t v334 = v119;
                uint64_t v189 = *((void *)&v335 + 1);
                long long v190 = *(_OWORD *)(v5 + 624);
                long long v191 = *(_OWORD *)(v5 + 640);
                *(void *)(v5 + 624) = v335;
                *(void *)(v5 + 632) = v189;
                *(_OWORD *)(v5 + 640) = v336;
                long long v335 = v190;
                long long v336 = v191;
              }
              else
              {
                if (*(_DWORD *)(v5 + 644))
                {
                  uint64_t v121 = *(unsigned int *)(v5 + 640);
                  if (v121) {
                    memset_pattern16(*(void **)(v5 + 624), &unk_2343655D0, 4 * v121);
                  }
                  if (*(_DWORD *)(v5 + 648))
                  {
                    uint64_t v122 = 0;
                    unint64_t v123 = 0;
                    do
                    {
                      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(*(void *)(v5 + 632) + v122);
                      ++v123;
                      v122 += 2048;
                    }
                    while (v123 < *(unsigned int *)(v5 + 648));
                  }
                  *(_DWORD *)(v5 + 652) = 0x7FFFFFFF;
                  *(void *)(v5 + 644) = 0;
                  ++*(_DWORD *)(v5 + 656);
                }
                if (v120)
                {
                  uint64_t v117 = DWORD1(v336);
                  if (*(_DWORD *)(v5 + 640) < DWORD1(v336)) {
                    re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(v5 + 616, DWORD1(v336));
                  }
                  unint64_t v124 = DWORD2(v336);
                  if (DWORD2(v336))
                  {
                    unint64_t v125 = 0;
                    do
                    {
                      uint64_t v126 = *((void *)&v335 + 1);
                      uint64_t v127 = (uint64_t *)(*((void *)&v335 + 1) + (v125 << 11));
                      if ((v127[1] & 0x80000000) != 0)
                      {
                        unint64_t v128 = v127 + 2;
                        unint64_t v129 = *v127;
                        unint64_t v130 = *(unsigned int *)(v5 + 640);
                        unint64_t v131 = *v127 % v130;
                        uint64_t v132 = *(unsigned int *)(v5 + 652);
                        if (v132 == 0x7FFFFFFF)
                        {
                          uint64_t v132 = *(unsigned int *)(v5 + 648);
                          int v133 = v132;
                          if (v132 == v130)
                          {
                            re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(v5 + 616, 2 * *(_DWORD *)(v5 + 644));
                            unint64_t v131 = v129 % *(unsigned int *)(v5 + 640);
                            int v133 = *(_DWORD *)(v5 + 648);
                          }
                          *(_DWORD *)(v5 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v133 + 1;
                          uint64_t v134 = *(void *)(v5 + 632);
                          int v135 = *(_DWORD *)(v134 + (v132 << 11) + 8);
                        }
                        else
                        {
                          uint64_t v134 = *(void *)(v5 + 632);
                          int v135 = *(_DWORD *)(v134 + (v132 << 11) + 8);
                          *(_DWORD *)(v5 + 652) = v135 & 0x7FFFFFFF;
                        }
                        uint64_t v136 = (unsigned __int8 *)(v127 + 32);
                        *(_DWORD *)(v134 + (v132 << 11) + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v135 | 0x80000000;
                        *(_DWORD *)(*(void *)(v5 + 632) + (v132 << 11) + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v5 + 632)
                                                                                          + (v132 << 11)
                                                                                          + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v5 + 624) + 4 * v131);
                        *(void *)(*(void *)(v5 + 632) + (v132 << 11)) = v129;
                        *(void *)(*(void *)(v5 + 632) + (v132 << 11) + 16) = *v128;
                        uint64_t v295 = *(void *)(v5 + 632);
                        uint64_t v137 = v295 + (v132 << 11);
                        uint64_t v138 = v137 + 256;
                        int v139 = *v136;
                        *(unsigned char *)(v137 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = v139;
                        if (v139) {
                          memcpy((void *)(v137 + 512), v136 + 256, 0x400uLL);
                        }
                        *(void *)(v138 + 1312) = 0;
                        *(void *)(v138 + 1280) = 0;
                        *(void *)(v138 + 1296) = 0;
                        *(void *)(v138 + 128re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
                        *(_DWORD *)(v138 + 1304) = 0;
                        uint64_t v140 = *((void *)v136 + 160);
                        if (v140)
                        {
                          unint64_t v141 = *((void *)v136 + 162);
                          *(void *)(v138 + 1280) = v140;
                          re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(v138 + 1280), v141);
                          ++*(_DWORD *)(v138 + 1304);
                          unint64_t v142 = *((void *)v136 + 162);
                          if (v142 >= *(void *)(v138 + 1296))
                          {
                            re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(v138 + 1280), *((void *)v136 + 162));
                            uint64_t v143 = *(void *)(v138 + 1296);
                            if (v143)
                            {
                              memmove(*(void **)(v138 + 1312), *((const void **)v136 + 164), 16 * v143);
                              uint64_t v143 = *(void *)(v138 + 1296);
                            }
                            memcpy((void *)(*(void *)(v138 + 1312) + 16 * v143), (const void *)(*((void *)v136 + 164) + 16 * v143), 16 * v142 - 16 * v143);
                          }
                          else if (v142)
                          {
                            memmove(*(void **)(v138 + 1312), *((const void **)v136 + 164), 16 * v142);
                          }
                          *(void *)(v138 + 1296) = v142;
                        }
                        *(void *)(v138 + 1352) = 0;
                        *(void *)(v138 + 1320) = 0;
                        *(void *)(v138 + 1336) = 0;
                        *(void *)(v138 + 132re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
                        *(_DWORD *)(v138 + 1344) = 0;
                        uint64_t v144 = *((void *)v136 + 165);
                        if (v144)
                        {
                          unint64_t v145 = *((void *)v136 + 167);
                          *(void *)(v138 + 1320) = v144;
                          re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v138 + 1320), v145);
                          ++*(_DWORD *)(v138 + 1344);
                          unint64_t v146 = *((void *)v136 + 167);
                          if (v146 >= *(void *)(v138 + 1336))
                          {
                            re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v138 + 1320), *((void *)v136 + 167));
                            uint64_t v147 = *(void *)(v138 + 1336);
                            if (v147)
                            {
                              memmove(*(void **)(v138 + 1352), *((const void **)v136 + 169), 32 * v147 - 4);
                              uint64_t v147 = *(void *)(v138 + 1336);
                            }
                            memcpy((void *)(*(void *)(v138 + 1352) + 32 * v147), (const void *)(*((void *)v136 + 169) + 32 * v147), 32 * v146 - 32 * v147);
                          }
                          else if (v146)
                          {
                            memmove(*(void **)(v138 + 1352), *((const void **)v136 + 169), 32 * v146 - 4);
                          }
                          *(void *)(v138 + 1336) = v146;
                        }
                        *(void *)(v138 + 1392) = 0;
                        *(void *)(v138 + 1360) = 0;
                        *(void *)(v138 + 1376) = 0;
                        *(void *)(v138 + 136re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
                        *(_DWORD *)(v138 + 1384) = 0;
                        uint64_t v148 = *((void *)v136 + 170);
                        if (v148)
                        {
                          unint64_t v292 = v131;
                          unint64_t v149 = *((void *)v136 + 172);
                          *(void *)(v138 + 1360) = v148;
                          re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity((void *)(v138 + 1360), v149);
                          ++*(_DWORD *)(v138 + 1384);
                          unint64_t v150 = *((void *)v136 + 172);
                          if (v150 >= *(void *)(v138 + 1376))
                          {
                            re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity((void *)(v138 + 1360), *((void *)v136 + 172));
                            uint64_t v154 = (char *)*((void *)v136 + 174);
                            uint64_t v155 = *(void *)(v138 + 1376);
                            unint64_t v156 = *(char **)(v138 + 1392);
                            if (v155)
                            {
                              uint64_t v157 = v155 << 7;
                              do
                              {
                                if (v154 != v156) {
                                  memmove(v156, v154, 0x80uLL);
                                }
                                v154 += 128;
                                v156 += 128;
                                v157 -= 128;
                              }
                              while (v157);
                              unint64_t v156 = *(char **)(v138 + 1392);
                              uint64_t v155 = *(void *)(v138 + 1376);
                              uint64_t v154 = (char *)*((void *)v136 + 174);
                            }
                            if (v155 != v150)
                            {
                              int v158 = &v154[128 * v155];
                              unsigned int v159 = &v156[128 * v155];
                              uint64_t v160 = (v150 << 7) - (v155 << 7);
                              do
                              {
                                *((_OWORD *)v159 + 6) = 0u;
                                *((_OWORD *)v159 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
                                *((_OWORD *)v159 + 4) = 0u;
                                *((_OWORD *)v159 + 5) = 0u;
                                *((_OWORD *)v159 + 2) = 0u;
                                *((_OWORD *)v159 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
                                *(_OWORD *)unsigned int v159 = 0u;
                                *((_OWORD *)v159 + 1) = 0u;
                                memmove(v159, v158, 0x80uLL);
                                v158 += 128;
                                v159 += 128;
                                v160 -= 128;
                              }
                              while (v160);
                            }
                          }
                          else if (v150)
                          {
                            unint64_t v151 = (char *)*((void *)v136 + 174);
                            uint64_t v152 = *(char **)(v138 + 1392);
                            uint64_t v153 = v150 << 7;
                            do
                            {
                              if (v151 != v152) {
                                memmove(v152, v151, 0x80uLL);
                              }
                              v151 += 128;
                              v152 += 128;
                              v153 -= 128;
                            }
                            while (v153);
                          }
                          *(void *)(v138 + 1376) = v150;
                          unint64_t v131 = v292;
                        }
                        uint64_t v161 = v295;
                        uint64_t v162 = v295 + (v132 << 11);
                        unint64_t v163 = (void *)(v126 + (v125 << 11));
                        *(void *)(v162 + 1824) = 0;
                        *(void *)(v162 + 1792) = 0;
                        *(void *)(v162 + 180re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
                        *(void *)(v162 + 1800) = 0;
                        *(_DWORD *)(v162 + 1816) = 0;
                        uint64_t v164 = v163[224];
                        if (v164)
                        {
                          unint64_t v165 = v163[226];
                          *(void *)(v162 + 1792) = v164;
                          re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(v162 + 1792), v165);
                          ++*(_DWORD *)(v162 + 1816);
                          unint64_t v166 = v163[226];
                          if (v166 >= *(void *)(v162 + 1808))
                          {
                            re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(v162 + 1792), v163[226]);
                            std::ios_base::iostate v167 = (const void **)(v126 + (v125 << 11) + 1824);
                            uint64_t v168 = *(void *)(v162 + 1808);
                            if (v168)
                            {
                              memmove(*(void **)(v162 + 1824), *v167, 16 * v168 - 7);
                              uint64_t v168 = *(void *)(v162 + 1808);
                            }
                            memcpy((void *)(*(void *)(v162 + 1824) + 16 * v168), (char *)*v167 + 16 * v168, (unsigned char *)*v167 + 16 * v166 - ((unsigned char *)*v167 + 16 * v168));
                            uint64_t v161 = v295;
                          }
                          else if (v166)
                          {
                            memmove(*(void **)(v162 + 1824), *(const void **)(v126 + (v125 << 11) + 1824), 16 * v166 - 7);
                          }
                          *(void *)(v162 + 180re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v166;
                        }
                        *(void *)(v162 + 1864) = 0;
                        *(void *)(v162 + 1832) = 0;
                        *(void *)(v162 + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
                        *(void *)(v162 + 1840) = 0;
                        *(_DWORD *)(v162 + 1856) = 0;
                        uint64_t v169 = v163[229];
                        if (v169)
                        {
                          uint64_t v170 = v162 + 1832;
                          uint64_t v171 = v126 + (v125 << 11);
                          unint64_t v172 = *(void *)(v171 + 1848);
                          *(void *)uint64_t v170 = v169;
                          re::DynamicArray<re::PatchHandler>::setCapacity((void *)v170, v172);
                          ++*(_DWORD *)(v170 + 24);
                          unint64_t v173 = *(void *)(v171 + 1848);
                          if (v173 >= *(void *)(v170 + 16))
                          {
                            re::DynamicArray<re::PatchHandler>::setCapacity((void *)v170, *(void *)(v171 + 1848));
                            uint64_t v178 = *(void *)(v171 + 1864);
                            uint64_t v179 = *(void *)(v170 + 16);
                            uint64_t v180 = *(void *)(v170 + 32);
                            if (v179)
                            {
                              uint64_t v181 = 16 * v179;
                              uint64_t v182 = *(_OWORD **)(v170 + 32);
                              int v183 = *(long long **)(v171 + 1864);
                              do
                              {
                                long long v184 = *v183++;
                                *v182++ = v184;
                                v181 -= 16;
                              }
                              while (v181);
                            }
                            if (v179 != v173)
                            {
                              int v185 = (long long *)(v178 + 16 * v179);
                              uint64_t v186 = (_OWORD *)(v180 + 16 * v179);
                              uint64_t v187 = 16 * v173 - 16 * v179;
                              do
                              {
                                long long v188 = *v185++;
                                *v186++ = v188;
                                v187 -= 16;
                              }
                              while (v187);
                            }
                          }
                          else if (v173)
                          {
                            uint64_t v174 = *(long long **)(v171 + 1864);
                            uint64_t v175 = *(_OWORD **)(v170 + 32);
                            uint64_t v176 = 16 * v173;
                            do
                            {
                              long long v177 = *v174++;
                              *v175++ = v177;
                              v176 -= 16;
                            }
                            while (v176);
                          }
                          *(void *)(v170 + 16) = v173;
                        }
                        *(_OWORD *)(v161 + (v132 << 11) + 1872) = *(_OWORD *)(v126 + (v125 << 11) + 1872);
                        *(_DWORD *)(*(void *)(v5 + 624) + 4 * v131) = v132;
                        ++*(_DWORD *)(v5 + 644);
                        unint64_t v124 = DWORD2(v336);
                      }
                      ++v125;
                    }
                    while (v125 < v124);
                  }
                  ++*(_DWORD *)(v5 + 656);
                }
              }
            }
            uint64_t v192 = (uint64_t *)(v5 + 664);
            if ((uint64_t *)(v5 + 664) != &v337)
            {
              if (!*v192 || !v337 || *v192 == v337)
              {
                if (v339)
                {
                  unint64_t v200 = v338;
                  if (v338)
                  {
                    *(void *)(v5 + 664) = v337;
                    if (v200 >= *(void *)(v5 + 672))
                    {
                      re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(v192, v200);
                      if (v339) {
                        long long v202 = &v340;
                      }
                      else {
                        long long v202 = v341;
                      }
                      if (*(unsigned char *)(v5 + 680)) {
                        unint64_t v203 = (unsigned char *)(v5 + 688);
                      }
                      else {
                        unint64_t v203 = *(unsigned char **)(v5 + 696);
                      }
                      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(v202, &v202[59 * *(void *)(v5 + 672)], v203);
                      if (*(unsigned char *)(v5 + 680)) {
                        uint64_t v205 = v5 + 688;
                      }
                      else {
                        uint64_t v205 = *(void *)(v5 + 696);
                      }
                      uint64_t v210 = *(void *)(v5 + 672);
                      long long v211 = v341;
                      if (v339) {
                        long long v211 = &v340;
                      }
                      if (v210 != v200)
                      {
                        uint64_t v212 = 472 * v210;
                        unint64_t v213 = &v211[(unint64_t)v212 / 8];
                        uint64_t v214 = (unsigned char *)(v205 + v212);
                        unint64_t v215 = 472 * v200 - v212;
                        do
                        {
                          v214[464] = 1;
                          re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v214, v213);
                          v213 += 59;
                          v214 += 472;
                          v215 -= 472;
                        }
                        while (v215);
                      }
                    }
                    else
                    {
                      if (*(unsigned char *)(v5 + 680)) {
                        uint64_t v201 = (unsigned char *)(v5 + 688);
                      }
                      else {
                        uint64_t v201 = *(unsigned char **)(v5 + 696);
                      }
                      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(&v340, (unsigned char *)&v340 + 472 * v200, v201);
                      if (*(unsigned char *)(v5 + 680)) {
                        uint64_t v204 = v5 + 688;
                      }
                      else {
                        uint64_t v204 = *(void *)(v5 + 696);
                      }
                      uint64_t v206 = *(void *)(v5 + 672);
                      if (v200 != v206)
                      {
                        unint64_t v207 = v204 + 472 * v200;
                        uint64_t v208 = -472 * v200 + 472 * v206;
                        unint64_t v209 = v207;
                        do
                        {
                          if (!*(unsigned char *)(v209 + 464))
                          {
                            (**(void (***)(unint64_t))v209)(v209);
                            *(unsigned char *)(v209 + 464) = 1;
                          }
                          v209 += 472;
                          v207 += 472;
                          v208 -= 472;
                        }
                        while (v208);
                      }
                    }
                    *(void *)(v5 + 672) = v200;
                    re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear((uint64_t)&v337);
                  }
                  else
                  {
                    re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)v192);
                    *(void *)(v5 + 664) = v337;
                  }
                  v339 += 2;
                  int v196 = (_DWORD *)(v5 + 680);
                }
                else
                {
                  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear((uint64_t)v192);
                  uint64_t v193 = *(void *)(v5 + 664);
                  *(void *)(v5 + 664) = v337;
                  uint64_t v337 = v193;
                  unint64_t v194 = *(void *)(v5 + 672);
                  *(void *)(v5 + 672) = v338;
                  unint64_t v338 = v194;
                  uint64_t v195 = *(uint64_t **)(v5 + 696);
                  *(void *)(v5 + 696) = v341;
                  v341 = v195;
                  int v196 = (_DWORD *)(v5 + 680);
                  int v197 = *(_DWORD *)(v5 + 680);
                  unsigned int v198 = v339;
                  *(_DWORD *)(v5 + 680) = v197 & 0xFFFFFFFE;
                  uint64_t v199 = *(void *)(v5 + 688);
                  *(void *)(v5 + 68re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v340;
                  uint64_t v340 = v199;
                  unsigned int v339 = (v198 & 0xFFFFFFFE | v197 & 1) + 2;
                }
                *v196 += 2;
                goto LABEL_316;
              }
LABEL_415:
              re::internal::assertLog((re::internal *)4, v117, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
              _os_crash();
              __break(1u);
            }
LABEL_316:
            uint64_t v216 = *(void *)(v5 + 432);
            uint64_t v217 = (uint64_t *)(v216 + 64);
            if ((uint64_t *)(v216 + 64) != &v324)
            {
              uint64_t v218 = *v217;
              uint64_t v219 = v324;
              if (*v217) {
                BOOL v220 = v218 == v324;
              }
              else {
                BOOL v220 = 1;
              }
              if (v220)
              {
                *(void *)(v216 + 64) = v324;
                uint64_t v324 = v218;
                uint64_t v221 = *(void *)(v216 + 72);
                *(void *)(v216 + 72) = v325;
                uint64_t v325 = v221;
                uint64_t v222 = *(void *)(v216 + 80);
                *(void *)(v216 + 80) = v326;
                uint64_t v326 = v222;
                LODWORD(v222) = *(_DWORD *)(v216 + 88);
                *(_DWORD *)(v216 + 8re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v327;
                int v327 = v222;
                LODWORD(v222) = *(_DWORD *)(v216 + 92);
                *(_DWORD *)(v216 + 92) = v328;
                unsigned int v328 = v222;
                LODWORD(v222) = *(_DWORD *)(v216 + 96);
                *(_DWORD *)(v216 + 96) = v329;
                unsigned int v329 = v222;
                LODWORD(v222) = *(_DWORD *)(v216 + 100);
                *(_DWORD *)(v216 + 100) = v330;
                int v330 = v222;
              }
              else
              {
                if (*(_DWORD *)(v216 + 92))
                {
                  uint64_t v223 = *(unsigned int *)(v216 + 88);
                  if (v223) {
                    memset_pattern16(*(void **)(v216 + 72), &unk_2343655D0, 4 * v223);
                  }
                  unint64_t v224 = *(unsigned int *)(v216 + 96);
                  if (v224)
                  {
                    uint64_t v225 = 0;
                    for (unint64_t k = 0; k < v224; ++k)
                    {
                      uint64_t v227 = *(void *)(v216 + 80) + v225;
                      int v228 = *(_DWORD *)(v227 + 8);
                      if (v228 < 0)
                      {
                        *(_DWORD *)(v227 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v228 & 0x7FFFFFFF;
                        re::DynamicString::deinit((re::DynamicString *)(v227 + 16));
                        *(void *)(v227 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
                        ++*(_DWORD *)(v227 + 56);
                        unint64_t v224 = *(unsigned int *)(v216 + 96);
                      }
                      v225 += 224;
                    }
                  }
                  *(_DWORD *)(v216 + 92) = 0;
                  *(_DWORD *)(v216 + 96) = 0;
                  int v229 = *(_DWORD *)(v216 + 104) + 1;
                  *(_DWORD *)(v216 + 100) = 0x7FFFFFFF;
                  *(_DWORD *)(v216 + 104) = v229;
                }
                if (v219)
                {
                  if (*(_DWORD *)(v216 + 88) < v328) {
                    re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v216 + 64, v328);
                  }
                  unint64_t v230 = v329;
                  if (v329)
                  {
                    uint64_t v231 = 0;
                    unint64_t v232 = 0;
                    do
                    {
                      unint64_t v233 = (void *)(v326 + v231);
                      if ((*(_DWORD *)(v326 + v231 + 8) & 0x80000000) != 0)
                      {
                        unint64_t v234 = *v233;
                        unint64_t v235 = *(unsigned int *)(v216 + 88);
                        unint64_t v236 = *v233 % v235;
                        uint64_t v237 = *(unsigned int *)(v216 + 100);
                        if (v237 == 0x7FFFFFFF)
                        {
                          uint64_t v237 = *(unsigned int *)(v216 + 96);
                          int v238 = v237;
                          if (v237 == v235)
                          {
                            re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v216 + 64, 2 * *(_DWORD *)(v216 + 92));
                            unint64_t v236 = v234 % *(unsigned int *)(v216 + 88);
                            int v238 = *(_DWORD *)(v216 + 96);
                          }
                          *(_DWORD *)(v216 + 96) = v238 + 1;
                          uint64_t v239 = *(void *)(v216 + 80);
                          int v240 = *(_DWORD *)(v239 + 224 * v237 + 8);
                        }
                        else
                        {
                          uint64_t v239 = *(void *)(v216 + 80);
                          int v240 = *(_DWORD *)(v239 + 224 * v237 + 8);
                          *(_DWORD *)(v216 + 100) = v240 & 0x7FFFFFFF;
                        }
                        *(_DWORD *)(v239 + 224 * v237 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v240 | 0x80000000;
                        *(_DWORD *)(*(void *)(v216 + 80) + 224 * v237 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v216 + 80)
                                                                                         + 224 * v237
                                                                                         + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v216 + 72) + 4 * v236);
                        *(void *)(*(void *)(v216 + 80) + 224 * v23re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v234;
                        re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v216 + 80) + 224 * v237 + 16), (const re::DynamicString *)(v233 + 2));
                        uint64_t v241 = *(void *)(v216 + 80);
                        *(void *)(v241 + 224 * v237 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
                        uint64_t v242 = v241 + 224 * v237 + 48;
                        *(_DWORD *)(v242 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
                        re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy((void *)v242, v233 + 6);
                        *(_DWORD *)(*(void *)(v216 + 72) + 4 * v236) = v237;
                        ++*(_DWORD *)(v216 + 92);
                        unint64_t v230 = v329;
                      }
                      ++v232;
                      v231 += 224;
                    }
                    while (v232 < v230);
                  }
                  ++*(_DWORD *)(v216 + 104);
                }
              }
            }
            uint64_t v243 = *(void *)(v5 + 432);
            long long v244 = v321;
            *(_OWORD *)(v243 + 32) = v320;
            *(_OWORD *)(v243 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v244;
            uint64_t v291 = *(unsigned int *)(v5 + 520);
            uint64_t v245 = 0;
            if (v291)
            {
              size_t v246 = *(int **)(v5 + 504);
              while (1)
              {
                int v247 = *v246;
                v246 += 12;
                if (v247 < 0) {
                  break;
                }
                if (v291 == ++v245)
                {
                  LODWORD(v245) = *(_DWORD *)(v5 + 520);
                  break;
                }
              }
            }
            if (v291 != v245)
            {
              uint64_t v248 = v245;
              uint64_t v293 = (re::RenderFrameData *)(v5 + 264);
              do
              {
                uint64_t v249 = *(void *)(v5 + 504);
                unint64_t v250 = *(void *)(v249 + 48 * v248 + 24);
                if (v250)
                {
                  uint64_t v251 = *(unsigned char **)(v249 + 48 * v248 + 32);
                  if (!v251) {
                    goto LABEL_362;
                  }
                  LOBYTE(v252) = *v251;
                }
                else
                {
                  uint64_t v251 = (unsigned char *)(v249 + 48 * v248 + 25);
                  uint64_t v252 = v250 >> 8;
                }
                if (!(_BYTE)v252)
                {
LABEL_362:
                  uint64_t v252 = 0;
                  goto LABEL_363;
                }
                uint64_t v252 = (char)v252;
                LOBYTE(v25re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v251[1];
                if ((_BYTE)v253)
                {
                  uint64_t v254 = 2;
                  do
                  {
                    uint64_t v252 = 31 * v252 + (char)v253;
                    int v253 = v251[v254++];
                  }
                  while (v253);
                }
LABEL_363:
                unint64_t v255 = 2 * v252;
                id v312 = (id)(2 * v252);
                unint64_t v313 = v251;
                *(void *)&buf[0] = v252 & 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v256 = **(void **)(re::RenderFrameData::stream(v293, (const re::WeakStringID *)buf) + 48);
                uint64_t v257 = (*(uint64_t (**)(void))(v256 + 632))();
                if (v257)
                {
                  uint64_t v258 = v257;
                  uint64_t v259 = *(void *)(v257 + 40);
                  if (v259)
                  {
                    for (unint64_t m = 0; m != v259; ++m)
                    {
                      uint64_t v261 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v258, m);
                      uint64_t v262 = *(void *)(v261 + 16);
                      if (v262)
                      {
                        uint64_t v263 = *(float32x4_t **)(v261 + 32);
                        uint64_t v264 = 672 * v262;
                        do
                        {
                          *(void *)&buf[0] = 0;
                          DWORD2(buf[0]) = 0;
                          uint64_t v265 = *(float32x4_t **)(v5 + 432);
                          float32x4_t v266 = v265[3];
                          v298[0] = v265[2];
                          v298[1] = v266;
                          re::RenderCamera::transformWorldBoundsToScreen(v263 + 2, v298, (const re::Projection *)&v263[4], (uint64_t)v342);
                          uint64_t v267 = *(void *)&buf[0];
                          re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(unint64_t *)&buf[0], v268);
                          BOOL v269 = &buf[2 * v267 + 1];
                          long long v270 = *(_OWORD *)&v342[16];
                          *BOOL v269 = *(_OWORD *)v342;
                          v269[1] = v270;
                          ++*(void *)&buf[0];
                          ++DWORD2(buf[0]);
                          re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(*(void *)(v5 + 432) + 112, (const re::DynamicString *)v263, (uint64_t *)buf);
                          v263 += 42;
                          v264 -= 672;
                        }
                        while (v264);
                      }
                    }
                    unint64_t v255 = (unint64_t)v312;
                  }
                }
                *(void *)&buf[0] = v255 >> 1;
                uint64_t v271 = **(void **)(re::RenderFrameData::stream(v293, (const re::WeakStringID *)buf) + 48);
                uint64_t v272 = (*(uint64_t (**)(void))(v271 + 664))();
                if (v272)
                {
                  uint64_t v273 = v272;
                  uint64_t v296 = *(void *)(v272 + 40);
                  if (v296)
                  {
                    for (unint64_t n = 0; n != v296; ++n)
                    {
                      uint64_t v275 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v273, n);
                      uint64_t v276 = *(void *)(v275 + 16);
                      if (v276)
                      {
                        unint64_t v277 = *(const re::DynamicString **)(v275 + 32);
                        uint64_t v278 = (const re::DynamicString *)((char *)v277 + 1360 * v276);
                        do
                        {
                          uint64_t v279 = 0;
                          *(void *)&buf[0] = 0;
                          DWORD2(buf[0]) = 0;
                          char v280 = 1;
                          do
                          {
                            char v281 = v280;
                            unint64_t v282 = (float32x4_t *)((char *)v277 + 672 * v279);
                            unint64_t v283 = *(float32x4_t **)(v5 + 432);
                            float32x4_t v284 = v283[3];
                            v297[0] = v283[2];
                            v297[1] = v284;
                            re::RenderCamera::transformWorldBoundsToScreen(v282 + 2, v297, (const re::Projection *)&v282[4], (uint64_t)v342);
                            uint64_t v285 = *(void *)&buf[0];
                            re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(unint64_t *)&buf[0], v286);
                            char v280 = 0;
                            uint64_t v287 = &buf[2 * v285 + 1];
                            long long v288 = *(_OWORD *)&v342[16];
                            *uint64_t v287 = *(_OWORD *)v342;
                            v287[1] = v288;
                            ++*(void *)&buf[0];
                            ++DWORD2(buf[0]);
                            uint64_t v279 = 1;
                          }
                          while ((v281 & 1) != 0);
                          re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(*(void *)(v5 + 432) + 112, v277, (uint64_t *)buf);
                          unint64_t v277 = (const re::DynamicString *)((char *)v277 + 1360);
                        }
                        while (v277 != v278);
                      }
                    }
                  }
                }
                re::StringID::destroyString((re::StringID *)&v312);
                if (*(_DWORD *)(v5 + 520) <= (v245 + 1)) {
                  int v289 = v245 + 1;
                }
                else {
                  int v289 = *(_DWORD *)(v5 + 520);
                }
                while (1)
                {
                  uint64_t v248 = (v245 + 1);
                  if (v289 - 1 == v245) {
                    break;
                  }
                  LODWORD(v245) = v245 + 1;
                  int v290 = v248;
                  if ((*(_DWORD *)(*(void *)(v5 + 504) + 48 * v248) & 0x80000000) != 0) {
                    goto LABEL_387;
                  }
                }
                int v290 = v289;
LABEL_387:
                LODWORD(v245) = v290;
              }
              while (v291 != v290);
            }
            re::RenderGraphResourceAllocationManager::onFrameFinish(*(re::RenderGraphResourceAllocationManager **)(*(void *)v5 + 128));
            if (v331) {
              re::DrawCallRecorder::dumpDrawCallsToDisk((re::DrawCallRecorder *)&v332);
            }
            re::RenderGraphContext::~RenderGraphContext((re::RenderGraphContext *)&v316);
          }
          re::FixedArray<re::BufferSlice>::deinit((void *)&v304 + 1);
          re::FixedArray<NS::SharedPtr<NS::String>>::deinit(&v303);
          if (*((void *)&v301 + 1))
          {
            if (__dst[0])
            {
              (*(void (**)(void))(**((void **)&v301 + 1) + 40))();
              __dst[0] = 0;
              __dst[1] = 0;
            }
            *((void *)&v301 + 1) = 0;
          }
          uint64_t result = (void *)v300;
          if ((void)v300 && *((void *)&v300 + 1))
          {
            uint64_t v115 = v301;
            return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 40))(result, v115);
          }
          return result;
        }
      }
    }
    __dst[0] = (void *)v8;
    if (v8 < 0x555555555555556)
    {
      __dst[1] = v19;
      if (v19)
      {
        unint64_t v22 = v8 - 1;
        if (v8 != 1)
        {
          do
          {
            *(_DWORD *)unint64_t v19 = 0;
            *((void *)v19 + 1) = -1;
            *((unsigned char *)v19 + 16) = 0;
            *((_DWORD *)v19 + 5) = 1065353216;
            *((void *)v19 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0xFFFFFFFF00000020;
            *((_OWORD *)v19 + 2) = xmmword_234378E20;
            unint64_t v19 = (_anonymous_namespace_ *)((char *)v19 + 48);
            --v22;
          }
          while (v22);
        }
        *(_DWORD *)unint64_t v19 = 0;
        *((void *)v19 + 1) = -1;
        *((unsigned char *)v19 + 16) = 0;
        *((_DWORD *)v19 + 5) = 1065353216;
        *((void *)v19 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0xFFFFFFFF00000020;
        *((_OWORD *)v19 + 2) = xmmword_234378E20;
        goto LABEL_16;
      }
LABEL_414:
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_415;
    }
LABEL_413:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 48, v8);
    _os_crash();
    __break(1u);
    goto LABEL_414;
  }
  if (!*(void *)(v5 + 3168))
  {
    re::DynamicString::format((re::DynamicString *)"No compiled render graph found for a frame without errors. Graph hash: %llu", (re::DynamicString *)&v316, *(void *)(v5 + 328));
    re::RenderFrame::addError(v5, (uint64_t)&v316);
    uint64_t result = (void *)v316;
    if ((void)v316)
    {
      if (BYTE8(v316))
      {
        uint64_t v115 = v317;
        return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 40))(result, v115);
      }
    }
  }
  return result;
}

void *re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(uint64_t a1, const re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + (v13 << 7) + 8);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + (v13 << 7) + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + (v13 << 7) + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + (v13 << 7) + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v13 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + (v13 << 7)) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + (v13 << 7) + 16), a2);
    uint64_t v17 = *(void *)(a1 + 16) + (v13 << 7);
    *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
    *(_DWORD *)(v17 + 56) = 0;
    uint64_t v18 = *a3;
    uint64_t result = memcpy((void *)(v17 + 64), a3 + 2, 32 * *a3);
    *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v18;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 7);
    uint64_t result = (void *)re::DynamicString::operator==(v11 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::RenderFrame::addRateMap(uint64_t a1, void *a2)
{
  if (!*a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  id v7 = 0;
  if (*(unsigned char *)(v3 + 300))
  {
    id v6 = objc_msgSend(*(id *)(v3 + 184), sel_newRasterizationRateMapWithDescriptor_);
    NS::SharedPtr<MTL::Texture>::operator=(&v7, &v6);
    if (v6) {
  }
    }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 4032), &v7);
  uint64_t v4 = (*(_DWORD *)(a1 + 4048) - 1);
  if (v7) {

  }
  return v4;
}

void *re::RenderFrame::reserveDynamicArraysSize(void *this, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = this;
  if (this[500] < a3) {
    this = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(this + 499, a3);
  }
  if (*(unsigned char *)(v5[1] + 300))
  {
    if (v5[505] < a2) {
      this = re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v5 + 504, a2);
    }
    if (v5[510] < a3)
    {
      return re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v5 + 509, a3);
    }
  }
  return this;
}

uint64_t re::RenderFrame::addRateMap(uint64_t a1, void **a2)
{
  if (!*a2 || !*(unsigned char *)(*(void *)(a1 + 8) + 300)) {
    return 0xFFFFFFFFLL;
  }
  id v5 = 0;
  NS::SharedPtr<MTL::Texture>::operator=(&v5, a2);
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 4032), &v5);
  uint64_t v3 = (*(_DWORD *)(a1 + 4048) - 1);
  if (v5) {

  }
  return v3;
}

void *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add(_anonymous_namespace_ *this, uint64_t *__src)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
  uint64_t v6 = *__src;
  uint64_t result = memcpy((void *)(v5 + 16), __src + 2, 16 * *__src);
  *(void *)uint64_t v5 = v6;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_anonymous_namespace_ *re::FixedArray<re::RenderLayer>::operator=(_anonymous_namespace_ *a1, uint64_t *a2)
{
  if (*(void *)a1) {
    goto LABEL_4;
  }
  unint64_t v4 = a2[1];
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::RenderLayer>::copy((uint64_t)a1, a2);
  }
  return a1;
}

void *re::RenderFrame::identifyUsedRenderLayers(void *this)
{
  this[51] = 0;
  unint64_t v1 = this[501];
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t)(this + 51);
    do
    {
      uint64_t v6 = v2[503];
      if (!*(void *)(v6 + v3 + 8) && !*(void *)(v6 + v3 + 16))
      {
        unint64_t v7 = *(unsigned int *)(v6 + v3 + 24);
        if (v7 != -1 && v2[515] > v7)
        {
          this = (void *)re::Bitset<64>::toWordIndex(v5, v7);
          *(void *)(v5 + 8 * this) |= 1 << v7;
          unint64_t v1 = v2[501];
        }
      }
      ++v4;
      v3 += 104;
    }
    while (v1 > v4);
  }
  return this;
}

void re::RenderFrame::acquireDrawables(uint64_t a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 4120);
  a2[1] = v4;
  if (v4)
  {
    if (v4 >> 61) {
      goto LABEL_51;
    }
    a2[2] = v6;
    if (!v6)
    {
LABEL_52:
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v8 = v6;
    if (v4 != 1)
    {
      bzero(v6, 8 * v4 - 8);
      v8 += v4 - 1;
    }
    void *v8 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 4120);
  unint64_t v10 = *(void *)(a1 + 4152);
  if (v10 >= v9)
  {
    if (v10 <= v9) {
      goto LABEL_18;
    }
    unint64_t v11 = *(void *)(a1 + 4120);
    do
    {
      uint64_t v12 = *(void *)(a1 + 4168);
      uint64_t v13 = *(void **)(v12 + 8 * v11);
      if (v13)
      {

        *(void *)(v12 + 8 * v11) = 0;
        unint64_t v10 = *(void *)(a1 + 4152);
      }
      ++v11;
    }
    while (v11 < v10);
  }
  else
  {
    if (*(void *)(a1 + 4144) < v9)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a1 + 4136), *(void *)(a1 + 4120));
      unint64_t v10 = *(void *)(a1 + 4152);
    }
    if (v9 > v10) {
      bzero((void *)(*(void *)(a1 + 4168) + 8 * v10), 8 * (v9 - v10));
    }
  }
  *(void *)(a1 + 4152) = v9;
  ++*(_DWORD *)(a1 + 4160);
LABEL_18:
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 5006, *(void *)(a1 + 8));
  if (*(void *)(a1 + 4120))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(a1 + 4128);
      uint64_t v18 = (id *)(v17 + v14);
      if (!*(void *)(v17 + v14)
        || ((*(void *)(a1 + 408 + 8 * re::Bitset<64>::toWordIndex(a1 + 408, v16)) >> v16) & 1) == 0)
      {
        goto LABEL_46;
      }
      uint64_t v19 = v17 + v14;
      if (*(unsigned char *)(v17 + v14 + 20)) {
        break;
      }
      if (*(unsigned char *)(v17 + v14 + 8))
      {
        [*v18 drawableSize];
        float v24 = v23;
        float v26 = v25;
        uint64_t v27 = v17 + 4 * v15;
        float v21 = *(float *)(v27 + 12);
        float v22 = *(float *)(v27 + 16);
        if (v21 != v24 || v22 != v26) {
LABEL_33:
        }
          objc_msgSend(*v18, "setDrawableSize:", v21, v22);
        if (*(unsigned char *)(v19 + 8)) {
          *(unsigned char *)(v19 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
        }
      }
      if (*(unsigned char *)(v19 + 20)) {
        *(unsigned char *)(v19 + 20) = 0;
      }
      re::mtl::Layer::nextDrawable(v18, &v38);
      unint64_t v4 = a2[1];
      if (v4 <= v16)
      {
        uint64_t v40 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        unint64_t v42 = "operator[]";
        __int16 v43 = 1024;
        int v44 = 468;
        __int16 v45 = 2048;
        unint64_t v46 = v16;
        __int16 v47 = 2048;
        unint64_t v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_49:
        uint64_t v40 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        unint64_t v42 = "operator[]";
        __int16 v43 = 1024;
        int v44 = 468;
        __int16 v45 = 2048;
        unint64_t v46 = v16;
        __int16 v47 = 2048;
        unint64_t v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_50:
        uint64_t v40 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        unint64_t v42 = "operator[]";
        __int16 v43 = 1024;
        int v44 = 789;
        __int16 v45 = 2048;
        unint64_t v46 = v16;
        __int16 v47 = 2048;
        unint64_t v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 8, v4);
        _os_crash();
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v34 = (id *)(a2[2] + v15);
      if (v34 != &v38)
      {
        id v35 = v38;
        id v38 = 0;
        id v36 = *v34;
        *uint64_t v34 = v35;
      }
      unint64_t v4 = a2[1];
      if (v4 <= v16) {
        goto LABEL_49;
      }
      uint64_t v37 = (id *)(a2[2] + v15);
      if (*v37)
      {
        re::mtl::Drawable::texture(v37, &v38);
        unint64_t v4 = *(void *)(a1 + 4152);
        if (v4 <= v16) {
          goto LABEL_50;
        }
        NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(a1 + 4168) + v15), &v38);
        if (v38) {
      }
        }
LABEL_46:
      ++v16;
      v15 += 8;
      v14 += 32;
      if (*(void *)(a1 + 4120) <= v16) {
        goto LABEL_47;
      }
    }
    if (*(unsigned char *)(v17 + v14 + 8))
    {
      uint64_t v20 = (float *)(v17 + 4 * v15);
      [*v18 setContentsScale:v20[6]];
      float v21 = v20[3];
      float v22 = v20[4];
    }
    else
    {
      [*v18 bounds];
      float v30 = v29;
      float v32 = v31;
      float v33 = *(float *)(v17 + 4 * v15 + 24);
      [*v18 setContentsScale:v33];
      float v21 = v33 * v30;
      float v22 = v33 * v32;
    }
    goto LABEL_33;
  }
LABEL_47:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
}

void re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!a1[470]) {
    return;
  }
  unint64_t v5 = 0;
  float v22 = (_anonymous_namespace_ *)(a1 + 499);
  float v21 = (_anonymous_namespace_ *)(a1 + 473);
  do
  {
    uint64_t v6 = a1[472];
    if (!*(_DWORD *)(v6 + 136 * v5 + 32)) {
      goto LABEL_30;
    }
    v23[0] = (id)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v6 + 136 * v5 + 40, (uint64_t *)v23);
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v8 = v7;
    if (!*(unsigned char *)(v7 + 112)) {
      goto LABEL_30;
    }
    unint64_t v9 = a1[470];
    if (v9 <= v5) {
      goto LABEL_33;
    }
    uint64_t v10 = a1[472] + 136 * v5 + 40;
    v23[0] = (id)65290051;
    uint64_t v11 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v10, (uint64_t *)v23);
    if (!v11) {
      goto LABEL_30;
    }
    uint64_t v12 = v11;
    if (*(unsigned char *)(v11 + 112)) {
      goto LABEL_30;
    }
    unint64_t v2 = *(void *)(v11 + 120);
    if (v2 != -1) {
      goto LABEL_19;
    }
    unint64_t v9 = a1[470];
    if (v9 <= v5) {
      goto LABEL_37;
    }
    unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, *(const char **)(a1[472] + 136 * v5 + 24));
    if (ScopeOutputIndex == -1) {
      goto LABEL_18;
    }
    do
    {
      unint64_t v9 = ScopeOutputIndex;
      unint64_t v14 = a1[470];
      if (v14 <= ScopeOutputIndex)
      {
        *(void *)float v30 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)float v24 = 0u;
        long long v25 = 0u;
        *(_OWORD *)double v23 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(void *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(void *)((char *)&v37[2] + 4) = v9;
        WORD2(v37[3]) = 2048;
        *(void *)((char *)&v37[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        *(void *)float v30 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)float v24 = 0u;
        long long v25 = 0u;
        *(_OWORD *)double v23 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(void *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(void *)((char *)&v37[2] + 4) = v5;
        WORD2(v37[3]) = 2048;
        *(void *)((char *)&v37[3] + 6) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        long long v38 = 0u;
        long long v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v30 = 136315906;
        *(void *)&v30[4] = "operator[]";
        __int16 v31 = 1024;
        int v32 = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v2;
        __int16 v35 = 2048;
        unint64_t v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        long long v38 = 0u;
        long long v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v30 = 136315906;
        *(void *)&v30[4] = "operator[]";
        __int16 v31 = 1024;
        int v32 = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v5;
        __int16 v35 = 2048;
        unint64_t v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        long long v38 = 0u;
        long long v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v30 = 136315906;
        *(void *)&v30[4] = "operator[]";
        __int16 v31 = 1024;
        int v32 = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v5;
        __int16 v35 = 2048;
        unint64_t v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        *(void *)float v30 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)float v24 = 0u;
        long long v25 = 0u;
        *(_OWORD *)double v23 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(void *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(void *)((char *)&v37[2] + 4) = v5;
        WORD2(v37[3]) = 2048;
        *(void *)((char *)&v37[3] + 6) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v15 = a1[472];
      v23[0] = (id)65290051;
      uint64_t v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v15 + 136 * ScopeOutputIndex + 40, (uint64_t *)v23);
      uint64_t v12 = v16;
      if (v16)
      {
        if (!*(unsigned char *)(v16 + 112))
        {
          unint64_t v2 = *(void *)(v16 + 120);
          if (v2 != -1) {
            goto LABEL_19;
          }
        }
      }
      unsigned int ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, *(const char **)(v15 + 136 * v9 + 24));
    }
    while (ScopeOutputIndex != -1);
    if (!v12) {
      goto LABEL_30;
    }
LABEL_18:
    unint64_t v2 = *(void *)(v12 + 120);
LABEL_19:
    unint64_t v9 = a1[501];
    if (v9 <= v2) {
      goto LABEL_34;
    }
    uint64_t v17 = a1[503] + 104 * v2;
    v23[0] = *(id *)v17;
    v23[1] = *(id *)(v17 + 8);
    v24[0] = *(id *)(v17 + 16);
    LODWORD(v24[1]) = *(_DWORD *)(v17 + 24);
    uint64_t v18 = re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)(v17 + 32));
    long long v19 = *(_OWORD *)(v17 + 64);
    long long v20 = *(_OWORD *)(v17 + 80);
    char v29 = *(unsigned char *)(v17 + 96);
    long long v27 = v19;
    long long v28 = v20;
    unint64_t v9 = a1[470];
    if (v9 <= v5) {
      goto LABEL_35;
    }
    re::DynamicString::operator=(v18, a1[472] + 136 * v5);
    DWORD2(v2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v5;
    v23[0] = (id)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
    LOWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add(v22, (uint64_t)v23);
    v37[0] = v23[0];
    v37[1] = __PAIR64__(DWORD2(v28), v24[1]);
    LOWORD(v37[2]) = v27;
    LOBYTE(v37[3]) = 1;
    v37[4] = *(void *)(v12 + 120);
    re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add(v21, (uint64_t)v37);
    *(unsigned char *)(v8 + 112) = 0;
    *(void *)(v8 + 120) = a1[501] - 1;
    unint64_t v9 = a1[470];
    if (v9 <= v5) {
      goto LABEL_36;
    }
    --*(_DWORD *)(a1[472] + 136 * v5 + 32);
    if ((void)v25)
    {
      if (BYTE8(v25)) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    if (v24[0])
    {

      v24[0] = 0;
    }
    if (v23[1]) {

    }
LABEL_30:
    ++v5;
  }
  while (v5 < a1[470]);
}

_anonymous_namespace_ *re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(result, v8);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = *((void *)v3 + 4);
  uint64_t v10 = v9 + 40 * v4;
  *(void *)uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  *(_WORD *)(v10 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(v10 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v11;
  LODWORD(v11) = *(unsigned __int8 *)(a2 + 24);
  *(unsigned char *)(v10 + 24) = v11;
  if (v11) {
    *(void *)(v9 + 40 * v4 + 32) = *(void *)(a2 + 32);
  }
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::FixedArray<unsigned long long>::init<int>(void *result, uint64_t a2, unint64_t a3, int *a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v6 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  _DWORD v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v8 = *a4;
  unint64_t v9 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result++ = v8;
      --v9;
    }
    while (v9);
  }
  *uint64_t result = v8;
  return result;
}

re::StringID *anonymous namespace'::getSpecifyWithRenderLayerID(re::StringID *this, uint64_t a2)
{
  uint64_t v3 = this;
  if (a2 > 7)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"SpecifyRenderLayer%d", (re::DynamicString *)&v9, a2);
    if (v10) {
      uint64_t v8 = *(const char **)&v11[7];
    }
    else {
      uint64_t v8 = v11;
    }
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = "";
    this = (re::StringID *)v9;
    if (v9)
    {
      if (v10) {
        return (re::StringID *)(*(uint64_t (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    unint64_t v4 = (uint64_t *)((char *)&unk_264BE6280 + 16 * a2);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    *(void *)this = 2 * v6;
    *((void *)this + 1) = v5;
  }
  return this;
}

_DWORD *re::RenderFrame::specifyScopeLaneInternal(unint64_t *a1, void *a2, uint64_t a3, int a4, unint64_t *a5)
{
  uint64_t v10 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a3 + 40, *a1);
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(_DWORD *)(v10 + 88) != -1 && *(_DWORD *)(v10 + 92) != -1)
    {
      uint64_t v12 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a5, v10 + 80);
      if (*v12 == 3)
      {
        uint64_t v13 = v12;
        if (a4)
        {
          v16[0] = *(void *)(v11 + 80);
          v16[1] = *(void *)(v11 + 88);
          v15[0] = *a2;
          v15[1] = a2[1];
          re::RenderGraphResourceDescriptions::specify(a5, (uint64_t)v16, (uint64_t)v15, 1, (_anonymous_namespace_ *)(a5 + 72));
          *((unsigned char *)v13 + 104) = 1;
        }
        else
        {
          _DWORD *v12 = 0;
        }
      }
    }
  }
  uint64_t result = (_DWORD *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a3 + 88, *a1);
  if (result && result[26] != -1 && result[27] != -1)
  {
    uint64_t result = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a5, (uint64_t)(result + 24));
    if (*result == 3) {
      *uint64_t result = 0;
    }
  }
  return result;
}

uint64_t re::RenderGraphCompiled::bufferDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (*(void *)(v2 + 16) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v2 + 32) + 48 * v3;
}

uint64_t re::RenderFrame::makeRenderGraphManagedInternal(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a2 + 40, *a1);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (*(void *)(v6 + 16))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (uint64_t *)(v7[4] + v8);
        uint64_t v24 = 0;
        uint64_t v25 = -1;
        uint64_t v24 = *v10;
        uint64_t v25 = v10[1];
        uint64_t v11 = (_DWORD *)re::RenderGraphCompiled::targetDescription(a3, (uint64_t)&v24);
        if (*v11 == 3) {
          *uint64_t v11 = 0;
        }
        ++v9;
        v8 += 16;
      }
      while (v7[2] > v9);
    }
    if (v7[7])
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        unint64_t v14 = (uint64_t *)(v7[9] + v12);
        uint64_t v24 = 0;
        uint64_t v25 = -1;
        uint64_t v24 = *v14;
        uint64_t v25 = v14[1];
        uint64_t v15 = (_DWORD *)re::RenderGraphCompiled::bufferDescription(a3, (uint64_t)&v24);
        if (*v15 == 3) {
          *uint64_t v15 = 0;
        }
        ++v13;
        v12 += 16;
      }
      while (v7[7] > v13);
    }
  }
  uint64_t result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a2 + 88, *a1);
  if (result)
  {
    uint64_t v17 = (void *)result;
    if (*(void *)(result + 56))
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        long long v20 = (uint64_t *)(v17[9] + v18);
        uint64_t v24 = 0;
        uint64_t v25 = -1;
        uint64_t v24 = *v20;
        uint64_t v25 = v20[1];
        uint64_t result = re::RenderGraphCompiled::bufferDescription(a3, (uint64_t)&v24);
        if (*(_DWORD *)result == 3) {
          *(_DWORD *)uint64_t result = 0;
        }
        ++v19;
        v18 += 16;
      }
      while (v17[7] > v19);
    }
    if (v17[2])
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        double v23 = (uint64_t *)(v17[4] + v21);
        uint64_t v24 = 0;
        uint64_t v25 = -1;
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        uint64_t result = re::RenderGraphCompiled::targetDescription(a3, (uint64_t)&v24);
        if (*(_DWORD *)result == 3) {
          *(_DWORD *)uint64_t result = 0;
        }
        ++v22;
        v21 += 16;
      }
      while (v17[2] > v22);
    }
  }
  return result;
}

void re::RenderFrame::fillScopeLaneProperties(uint64_t a1, unint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a4 + 40, a2);
  if (v8)
  {
    unint64_t v9 = (void *)v8;
    if (*(void *)(v8 + 16))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = (uint64_t *)(v9[4] + v10);
        uint64_t v21 = 0;
        uint64_t v22 = -1;
        uint64_t v21 = *v12;
        uint64_t v22 = v12[1];
        unint64_t v13 = (_DWORD *)re::RenderGraphExecutable::targetDescription(a5, (uint64_t)&v21);
        if ((*v13 | 4) == 4)
        {
          uint64_t v14 = (uint64_t)v13;
          if (*a3)
          {
            id v15 = *a3;
            id v20 = v15;
            re::RenderGraphTargetDescription::makeValid(v14, &v20, *(void *)(a1 + 416));
            if (v15)
            {

              id v20 = 0;
            }
          }
        }
        ++v11;
        v10 += 16;
      }
      while (v9[2] > v11);
    }
    if (v9[7])
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = (uint64_t *)(v9[9] + v16);
        uint64_t v21 = 0;
        uint64_t v22 = -1;
        uint64_t v21 = *v18;
        uint64_t v22 = v18[1];
        unint64_t v19 = (_DWORD *)re::RenderGraphExecutable::bufferDescription(a5, (uint64_t)&v21);
        if ((*v19 | 4) == 4)
        {
          if (*a3) {
            re::RenderGraphBufferDescription::makeValid((uint64_t)v19, a3, *(void *)(a1 + 416));
          }
        }
        ++v17;
        v16 += 16;
      }
      while (v9[7] > v17);
    }
  }
}

void *re::RenderFrame::createWorkload@<X0>(re::RenderFrame *this@<X0>, uint64_t *a2@<X8>)
{
  re::make::shared::object<re::RenderFrameWorkload>(this, a2);
  *(void *)(*a2 + 40) = *((void *)this + 46);
  *(void *)(*a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *((void *)this + 48);
  *(void *)(*a2 + 32) = *((void *)this + 3);
  return re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((void *)this + 494, a2);
}

void re::RenderFrameWorkload::~RenderFrameWorkload(re::RenderFrameWorkload *this)
{
  *(void *)this = &unk_26E70F3C8;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {

    *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  }
  re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::deinit((uint64_t)this + 472);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 432);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 392);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 352);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 312);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 232);
  uint64_t v3 = *((void *)this + 24);
  if (v3)
  {
    unint64_t v4 = (void **)*((void *)this + 28);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 26);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        do
        {
          uint64_t v7 = *v4++;

          v6 -= 8;
        }
        while (v6);
        uint64_t v3 = *((void *)this + 24);
        unint64_t v4 = (void **)*((void *)this + 28);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, v4);
    }
    *((void *)this + 2re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *((void *)this + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = 0;
    *((void *)this + 26) = 0;
    *((void *)this + 24) = 0;
    ++*((_DWORD *)this + 54);
  }
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  uint64_t v8 = (void *)*((void *)this + 11);
  if (v8)
  {

    *((void *)this + 11) = 0;
  }
  unint64_t v9 = (void *)*((void *)this + 9);
  if (v9)
  {

    *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10)
  {

    *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::RenderFrameWorkload::~RenderFrameWorkload(this);
  JUMPOUT(0x237DBCBC0);
}

uint64_t re::RenderFrameWorkload::configure(re::RenderFrameWorkload *this, re::RenderFrameSettings *a2)
{
  uint64_t v2 = a2;
  if (a2) {
    unint64_t v4 = (char *)a2 + 8;
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v2;
  if (v5)
  {

    uint64_t v2 = (re::RenderFrameSettings *)*((void *)this + 7);
  }
  *((_DWORD *)this + 16) = *((_DWORD *)v2 + 6);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 9, (void **)v2 + 4);
  *((void *)this + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = *((void *)v2 + 5);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 11, (void **)v2 + 6);
  *((void *)this + 12) = *((void *)v2 + 7);
  re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)this + 104, (uint64_t *)v2 + 8);
  return re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)this + 144, (uint64_t *)v2 + 13);
}

uint64_t re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 32) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 32) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

id re::DynamicArray<re::mtl::Drawable>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::mtl::Drawable>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  id result = *a2;
  *(void *)(v5 + 8 * v4) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrameWorkload::beforeEmit(re::RenderFrameWorkload *this)
{
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    unint64_t v4 = (uint64_t *)(*((void *)this + 33) + 32);
    do
    {
      uint64_t v7 = this;
      uint64_t v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(void *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)this + 232);
}

uint64_t re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::RenderFrameWorkload::beforeEncode(uint64_t this)
{
  char v1 = 0;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(this + 512), (unsigned __int8 *)&v1, 1u);
  if (!v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = this + 272;
    uint64_t v4 = *(void *)(this + 288);
    if (v4)
    {
      uint64_t v5 = 40 * v4;
      uint64_t v6 = (uint64_t *)(*(void *)(this + 304) + 32);
      do
      {
        uint64_t v8 = v2;
        uint64_t v7 = *v6;
        v6 += 5;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v8);
        v5 -= 40;
      }
      while (v5);
    }
    return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit(v3);
  }
  return this;
}

uint64_t re::RenderFrameWorkload::postEncode(atomic_uchar *this)
{
  uint64_t result = re::RenderFrameWorkload::beforeEncode((uint64_t)this);
  char v3 = 0;
  atomic_compare_exchange_strong(this + 576, (unsigned __int8 *)&v3, 1u);
  if (!v3)
  {
    uint64_t v4 = *((void *)this + 41);
    if (v4)
    {
      uint64_t v5 = 40 * v4;
      uint64_t v6 = (uint64_t *)(*((void *)this + 43) + 32);
      do
      {
        uint64_t v8 = this;
        uint64_t v7 = *v6;
        v6 += 5;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v7 + 16))(v7, &v8);
        v5 -= 40;
      }
      while (v5);
    }
    return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)(this + 312));
  }
  return result;
}

uint64_t re::RenderFrameWorkload::encoded(atomic_uchar *this)
{
  uint64_t result = re::RenderFrameWorkload::postEncode(this);
  char v3 = 0;
  atomic_compare_exchange_strong(this + 640, (unsigned __int8 *)&v3, 1u);
  if (!v3)
  {
    uint64_t v4 = *((void *)this + 46);
    if (v4)
    {
      uint64_t v5 = 40 * v4;
      uint64_t v6 = (uint64_t *)(*((void *)this + 48) + 32);
      do
      {
        uint64_t v8 = this;
        uint64_t v7 = *v6;
        v6 += 5;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v7 + 16))(v7, &v8);
        v5 -= 40;
      }
      while (v5);
    }
    return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)(this + 352));
  }
  return result;
}

uint64_t re::RenderFrameWorkload::scheduled(atomic_uchar *this)
{
  re::RenderFrameWorkload::encoded(this);
  uint64_t v2 = *((void *)this + 56);
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    uint64_t v4 = (uint64_t *)(*((void *)this + 58) + 32);
    do
    {
      uint64_t v7 = this;
      uint64_t v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)(this + 432));
}

uint64_t re::RenderFrameWorkload::completed(atomic_uchar *this)
{
  re::RenderFrameWorkload::scheduled(this);
  uint64_t v2 = *((void *)this + 51);
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    uint64_t v4 = (uint64_t *)(*((void *)this + 53) + 32);
    do
    {
      uint64_t v7 = this;
      uint64_t v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::deinit((uint64_t)(this + 392));
}

uint64_t re::RenderFrameWorkload::beforeCommandBufferCommitted(re::RenderFrameWorkload *this, const re::mtl::CommandBuffer *a2)
{
  uint64_t v3 = *((void *)this + 61);
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    uint64_t v6 = (uint64_t *)(*((void *)this + 63) + 32);
    do
    {
      uint64_t v7 = *v6;
      v6 += 5;
      (*(void (**)(uint64_t, const re::mtl::CommandBuffer *))(*(void *)v7 + 16))(v7, a2);
      v5 -= 40;
    }
    while (v5);
  }
  return re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::deinit((uint64_t)this + 472);
}

uint64_t re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::RenderFrameWorkload::presentDrawables(re::RenderFrameWorkload *this, id *a2)
{
  if (*((void *)this + 26))
  {
    unint64_t v4 = 0;
    do
      [*a2 presentDrawable:*(void *)(*((void *)this + 28) + 8 * v4++) afterMinimumDuration:1.0 / *(float *)(*((void *)this + 4) + 1760)];
    while (*((void *)this + 26) > v4);
  }
  re::DynamicArray<re::mtl::Drawable>::clear((uint64_t)this + 192);
}

void re::DynamicArray<re::mtl::Drawable>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void ***)(a1 + 32);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;

      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::RenderFrameWorkload::immediatePresentDrawables(re::RenderFrameWorkload *this, double a2)
{
  if (*((void *)this + 26))
  {
    unint64_t v3 = 0;
    do
      objc_msgSend(*(id *)(*((void *)this + 28) + 8 * v3++), "present", a2);
    while (*((void *)this + 26) > v3);
  }
  re::DynamicArray<re::mtl::Drawable>::clear((uint64_t)this + 192);
}

uint64_t re::RenderFrameWorkload::applyPreEmitPatch(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::RenderFrameBox::get(*(void *)(a1 + 32) + 344, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
    return v4(a2, result);
  }
  return result;
}

uint64_t re::RenderFrameWorkload::applyPostEncodePatch(uint64_t result, unsigned char *a2)
{
  if (a2[28])
  {
    uint64_t result = re::RenderFrameBox::get(*(void *)(result + 32) + 344, *(void *)(result + 40));
    if (result)
    {
      unint64_t v3 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a2 + 40);
      return v3(a2, result);
    }
  }
  return result;
}

uint64_t (***re::DynamicArray<re::Function<void ()(re::FrameCount)>>::clear(uint64_t (***result)(void)))(void)
{
  char v1 = result;
  uint64_t v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    uint64_t v3 = (uint64_t)result[4];
    uint64_t v4 = 40 * (void)v2;
    do
    {
      uint64_t result = re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

unint64_t re::RenderFrame::getScopeResolution(re::RenderFrame *this, const char *__s2)
{
  uint64_t v2 = *((void *)this + 501);
  if (!v2)
  {
    uint64_t v12 = 1;
    Layersize_t Size = 1;
    return LayerSize | (unint64_t)(v12 << 32);
  }
  uint64_t v5 = *((void *)this + 503) + 24;
  uint64_t v6 = 104 * v2;
  while (1)
  {
    if (*(void *)(v5 + 16)) {
      uint64_t v7 = *(const char **)(v5 + 24);
    }
    else {
      uint64_t v7 = (const char *)(v5 + 17);
    }
    if (strcmp(v7, __s2)) {
      goto LABEL_10;
    }
    uint64_t v10 = *(void **)(v5 - 16);
    if (v10)
    {
      Layersize_t Size = objc_msgSend(v10, sel_width);
      uint64_t v12 = (uint64_t)objc_msgSend(*(id *)(v5 - 16), sel_height);
      return LayerSize | (unint64_t)(v12 << 32);
    }
    if (*(_DWORD *)v5 != -1) {
      break;
    }
    unint64_t v11 = *(void **)(v5 - 8);
    if (v11)
    {
      Layersize_t Size = objc_msgSend(v11, sel_width);
      uint64_t v12 = (uint64_t)objc_msgSend(*(id *)(v5 - 8), sel_height);
      return LayerSize | (unint64_t)(v12 << 32);
    }
LABEL_10:
    v5 += 104;
    v6 -= 104;
    if (!v6) {
      goto LABEL_11;
    }
  }
  uint64_t v14 = *(re::DrawingManager **)(*((void *)this + 1) + 104);
  if (!v14)
  {
LABEL_11:
    uint64_t v12 = 1;
    Layersize_t Size = 1;
    return LayerSize | (unint64_t)(v12 << 32);
  }
  Layersize_t Size = (int)re::DrawingManager::getLayerSize(v14, *(_DWORD *)v5, v8, v9);
  uint64_t v12 = (int)v15;
  return LayerSize | (unint64_t)(v12 << 32);
}

id re::RenderFrame::getScopePixelFormat(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 4008);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = (void *)(*(void *)(a1 + 4024) + 48);
  uint64_t v7 = 104 * v3;
  while (1)
  {
    if (*(v6 - 6) == v5)
    {
      double v8 = (*(v6 - 1) & 1) != 0 ? (const char *)*v6 : (char *)v6 - 7;
      if (!strcmp(v8, a2))
      {
        double v9 = (void *)*(v6 - 5);
        if (v9) {
          break;
        }
        double v9 = (void *)*(v6 - 4);
        if (v9) {
          break;
        }
      }
    }
    v6 += 13;
    v7 -= 104;
    if (!v7) {
      return 0;
    }
  }
  return objc_msgSend(v9, sel_pixelFormat);
}

id re::RenderFrame::getScopeProtectionOptions(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 4008);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = (void *)(*(void *)(a1 + 4024) + 48);
  uint64_t v7 = 104 * v3;
  while (1)
  {
    if (*(v6 - 6) == v5)
    {
      double v8 = (*(v6 - 1) & 1) != 0 ? (const char *)*v6 : (char *)v6 - 7;
      if (!strcmp(v8, a2))
      {
        double v9 = (void *)*(v6 - 5);
        if (v9) {
          break;
        }
        double v9 = (void *)*(v6 - 4);
        if (v9) {
          break;
        }
      }
    }
    v6 += 13;
    v7 -= 104;
    if (!v7) {
      return 0;
    }
  }
  return objc_msgSend(v9, sel_protectionOptions);
}

uint64_t re::RenderFrame::getScopeLayer(re::RenderFrame *this, const char *__s2)
{
  uint64_t v2 = *((void *)this + 501);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (void *)(*((void *)this + 503) + 48);
  uint64_t v5 = 104 * v2;
  while (1)
  {
    uint64_t v6 = (*(v4 - 1) & 1) != 0 ? (const char *)*v4 : (char *)v4 - 7;
    if (!strcmp(v6, __s2))
    {
      uint64_t result = *((unsigned int *)v4 - 6);
      if (result != -1) {
        break;
      }
    }
    v4 += 13;
    v5 -= 104;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a1)
  {
    if (v4)
    {
      re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy((int *)a1, 0, *(char **)a2, v4);
      re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::resize((_anonymous_namespace_ *)a1, *(void *)(a2 + 8));
    }
    else
    {
      *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else if (v4)
  {
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)a1, v4);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy((int *)a1, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return a1;
}

uint64_t re::RenderFrame::applyRenderFrameDeltas(re::RenderFrame *this)
{
  int v2 = *((_DWORD *)this + 766);
  if (v2) {
    uint64_t v3 = (void (****)(void))((char *)this + 3072);
  }
  else {
    uint64_t v3 = (void (****)(void))*((void *)this + 385);
  }
  uint64_t v4 = *((void *)this + 382);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    do
    {
      uint64_t v6 = *v3++;
      (**v6)(v6);
      v5 -= 8;
    }
    while (v5);
    int v2 = *((_DWORD *)this + 766);
  }
  if (v2) {
    uint64_t v7 = (id **)((char *)this + 3072);
  }
  else {
    uint64_t v7 = (id **)*((void *)this + 385);
  }
  uint64_t v8 = *((void *)this + 382);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    do
    {
      uint64_t v10 = *v7++;
      (*((void (**)(id *))*v10 + 2))(v10);
      objc_destroyWeak(v10 + 1);
      v10[1] = 0;
      v9 -= 8;
    }
    while (v9);
  }
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
}

uint64_t re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer(re::RenderGraphProcessorContainer *this)
{
}

re *re::RenderGraphProcessorContainer::reset(re *this)
{
  char v1 = this;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void (****)(void))*((void *)this + 4);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      this = re::internal::destroyPersistent<re::RenderGraphProcessor>((re *)"reset", 45, v5);
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v6 = *((void *)v1 + 7);
  if (v6)
  {
    uint64_t v7 = (void (****)(void))*((void *)v1 + 9);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      this = re::internal::destroyPersistent<re::RenderGraphProcessor>((re *)"reset", 48, v9);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v10 = *((void *)v1 + 12);
  if (v10)
  {
    unint64_t v11 = (void (****)(void))*((void *)v1 + 14);
    uint64_t v12 = 8 * v10;
    do
    {
      unint64_t v13 = *v11++;
      this = re::internal::destroyPersistent<re::RenderGraphProcessor>((re *)"reset", 51, v13);
      v12 -= 8;
    }
    while (v12);
  }
  *((void *)v1 + 2) = 0;
  ++*((_DWORD *)v1 + 6);
  *((void *)v1 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  ++*((_DWORD *)v1 + 16);
  *((void *)v1 + 12) = 0;
  ++*((_DWORD *)v1 + 26);
  return this;
}

re *re::internal::destroyPersistent<re::RenderGraphProcessor>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t *re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<unsigned long>::init<>(a1, v4, *(void *)(a2 + 8));
    re::FixedArray<re::RenderGraphProviderBase const*>::copy(a1, a2);
  }
  return a1;
}

void *re::FixedArray<re::RenderGraphProviderBase const*>::copy(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 == *(void *)(a2 + 8))
  {
    if (v2)
    {
      uint64_t v3 = *(const void **)(a2 + 16);
      uint64_t v4 = (void *)result[2];
      return memmove(v4, v3, 8 * v2);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void ___ZN12_GLOBAL__N_127getSpecifyWithRenderLayerIDEj_block_invoke(re *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  char v1 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 8;
    _os_log_impl(&dword_233120000, v1, OS_LOG_TYPE_DEFAULT, "More than %ul SpecifyRenderLayer targets have been created, falling back to dynamic string allocation. Performance may be impacted.", (uint8_t *)v2, 8u);
  }
}

void ___ZN12_GLOBAL__N_118getSpecifyLaneOpIDEj_block_invoke(re *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  char v1 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 32;
    _os_log_impl(&dword_233120000, v1, OS_LOG_TYPE_DEFAULT, "More than %ul SpecifyLaneOp targets have been created, falling back to dynamic string allocation. Performance may be impacted.", (uint8_t *)v2, 8u);
  }
}

uint64_t re::DynamicArray<re::RenderFrameEvent>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RenderFrameEvent>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::RenderFrameEvent>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderFrameEvent>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::RenderFrameEvent>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(a1, *(void *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 16 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = v9 + 16 * v4;
      uint64_t v11 = v9 + 16 * v8;
      uint64_t v12 = (void *)(a1[4] + 16 * v8);
      do
      {
        id v13 = *(id *)v11;
        uint64_t v14 = *(void *)(v11 + 8);
        void *v12 = v13;
        v12[1] = v14;
        v12 += 2;
        v11 += 16;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 16 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (id *)(a1[4] + 16 * v4);
      uint64_t v7 = 16 * v5 - 16 * v4;
      do
      {
        if (*v6)
        {

          *uint64_t v6 = 0;
        }
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::RenderFrameEvent>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(id **)(a1 + 32);
    uint64_t v4 = 16 * v2;
    do
    {
      if (*v3)
      {

        id *v3 = 0;
      }
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)a3, (void **)v4);
    *(void *)(a3 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = *(void *)(v4 + 8);
    a3 += 16;
    v4 += 16;
  }
  while (v4 != v5);
  return v5;
}

uint64_t re::DynamicArray<re::DetailedError>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        uint64_t v6 = (re::DynamicString *)(v3 + 16);
        do
        {
          re::DynamicString::deinit(v6);
          uint64_t v6 = (re::DynamicString *)((char *)v6 + 48);
          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraph>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::RenderGraph **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::RenderGraph::~RenderGraph(v3);
          uint64_t v3 = (re::RenderGraph *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::RenderGraph **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::RenderGraph *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphScopeOutput>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 136 * v4;
        uint64_t v6 = (uint64_t *)(v3 + 88);
        do
        {
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v6);
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v6 - 6);
          re::StringID::destroyString((re::StringID *)(v6 - 9));
          v6 += 17;
          v5 -= 136;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 40 * v3;
        uint64_t v5 = *(void **)(a1 + 32);
        do
        {
          void *v5 = 0;
          v5 += 5;
          v4 -= 40;
        }
        while (v4);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 2048;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v1 & 0x7FFFFFFF;
    re::DynamicArray<unsigned long>::deinit(result + 1832);
    re::DynamicArray<unsigned long>::deinit(v2 + 1792);
    re::DynamicArray<unsigned long>::deinit(v2 + 1616);
    re::DynamicArray<unsigned long>::deinit(v2 + 1576);
    return re::DynamicArray<unsigned long>::deinit(v2 + 1536);
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit(uint64_t result)
{
  if (*(void *)result)
  {
    int v1 = (void *)result;
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      if (*(unsigned char *)(result + 16)) {
        uint64_t v3 = result + 24;
      }
      else {
        uint64_t v3 = *(void *)(result + 32);
      }
      uint64_t v4 = 472 * v2;
      uint64_t v5 = v3;
      do
      {
        if (!*(unsigned char *)(v5 + 464))
        {
          double result = (**(uint64_t (***)(uint64_t))v5)(v5);
          *(unsigned char *)(v5 + 464) = 1;
        }
        v5 += 472;
        v3 += 472;
        v4 -= 472;
      }
      while (v4);
    }
    int v6 = *((_DWORD *)v1 + 4);
    if ((v6 & 1) == 0)
    {
      double result = (*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[4]);
      int v6 = *((_DWORD *)v1 + 4);
    }
    *int v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = (v6 | 1) + 2;
  }
  return result;
}

double re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          uint64_t v9 = *(void **)(v6 + v4 + 16);
          if (v9)
          {

            *(void *)(v8 + 16) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::FrameCount)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          uint64_t v9 = *(void *)(v6 + v4 + 16);
          if (v9)
          {

            *(void *)(v8 + 16) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 24;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::SharedStringAllocatorWrapper::~SharedStringAllocatorWrapper(re::SharedStringAllocatorWrapper *this)
{
  uint64_t v2 = (re::SharedStringAllocatorWrapper *)((char *)this + 24);
  re::GrowableLinearAllocator::deinit((re::SharedStringAllocatorWrapper *)((char *)this + 24));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 14);
  re::Allocator::~Allocator(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::Allocator *v2;
  uint64_t vars8;

  uint64_t v2 = (re::SharedStringAllocatorWrapper *)((char *)this + 24);
  re::GrowableLinearAllocator::deinit((re::SharedStringAllocatorWrapper *)((char *)this + 24));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 14);
  re::Allocator::~Allocator(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (uint64_t *)(v8 + 40 * v9);
        uint64_t v11 = v7 + 2;
        uint64_t v12 = (uint64_t *)(v8 + 16);
        do
        {
          *((_OWORD *)v11 - 1) = *((_OWORD *)v12 - 1);
          re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray(v11, (uint64_t)v12);
          re::FixedArray<CoreIKTransform>::deinit(v12);
          v11 += 5;
          id v13 = v12 + 3;
          v12 += 5;
        }
        while (v13 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 80 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v8;
          *(_OWORD *)(v11 + 1) = 0u;
          *(_OWORD *)(v11 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
          uint64_t v12 = (re::DynamicString *)(v8 + 8);
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = 0;
          v11[4] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = 0;
          uint64_t v14 = v11[2];
          uint64_t v13 = v11[3];
          uint64_t v15 = *(void *)(v8 + 24);
          uint64_t v11[2] = *(void *)(v8 + 16);
          unsigned __int8 v11[3] = v15;
          *(void *)(v8 + 16) = v14;
          *(void *)(v8 + 24) = v13;
          *(_OWORD *)(v11 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
          *(_OWORD *)(v11 + 5) = 0u;
          uint64_t v17 = *(void *)(v8 + 40);
          uint64_t v16 = v8 + 40;
          v11[5] = v17;
          *(void *)uint64_t v16 = 0;
          uint64_t v18 = v11[7];
          v11[7] = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = v18;
          *((_OWORD *)v11 + 4) = *(_OWORD *)(v16 + 24);
          uint64_t v19 = *(void *)(v16 + 8);
          *(void *)(v16 + 24) = 0;
          *(void *)(v16 + 32) = 0;
          uint64_t v20 = v11[6];
          uint64_t v11[6] = v19;
          *(void *)(v16 + re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8) = v20;
          re::DynamicString::deinit((re::DynamicString *)v16);
          re::DynamicString::deinit(v12);
          uint64_t v8 = v16 + 40;
          v11 += 10;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::RenderFrameBounds::~RenderFrameBounds(re::RenderFrameBounds *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          *(void *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          ++*(_DWORD *)(v6 + 56);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 128;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          *(void *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          ++*(_DWORD *)(v6 + 56);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 224;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphScopeOutput>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          uint64_t v2 = 136 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 136 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
          uint64_t v13 = *(void *)(v8 + 16);
          uint64_t v12 = v8 + 16;
          uint64_t v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          uint64_t v11[2] = *(void *)v12 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          unsigned __int8 v11[3] = *(void *)(v12 + 8);
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = "";
          *((_DWORD *)v11 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v12 + 16);
          *(_OWORD *)(v11 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
          *((_DWORD *)v11 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
          *(_OWORD *)(v11 + 5) = 0u;
          *(void *)((char *)v11 + 76) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 5, (uint64_t *)(v12 + 24));
          *(_OWORD *)(v11 + 11) = 0u;
          uint64_t v14 = v11 + 11;
          *((_DWORD *)v14 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
          *((_OWORD *)v14 + 1) = 0u;
          *(void *)((char *)v14 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v14, (uint64_t *)(v12 + 72));
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(v12 + 72));
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(v12 + 24));
          re::StringID::destroyString((re::StringID *)v12);
          uint64_t v8 = v12 + 120;
          uint64_t v11 = v14 + 6;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<NS::SharedPtr<MTL::Texture>&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, id *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 24 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 24 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + 24 * v9;
  *(void *)(v15 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)double v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 1);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 24 * v17;
            *(_DWORD *)(v19 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v14;
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 16) = *v13;
            void *v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<re::BufferSlice&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + 32 * v9;
  *(void *)(v15 + 16) = *(id *)a5;
  *(void *)(v15 + 24) = *(void *)(a5 + 8);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 16) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 8);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *(void *)(v13 - 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 32 * v17;
            *(_DWORD *)(v19 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 32 * v17;
            *(void *)(v22 + 16) = *(id *)v13;
            *(void *)(v22 + 24) = *(void *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void *re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x68uLL))
        {
          uint64_t v2 = 104 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 32;
        uint64_t v11 = 104 * v9;
        uint64_t v12 = v7;
        do
        {
          void *v12 = *(void *)(v10 - 32);
          *(_OWORD *)(v12 + 1) = *(_OWORD *)(v10 - 24);
          *(void *)(v10 - 24) = 0;
          *(void *)(v10 - 16) = 0;
          *((_DWORD *)v12 + 6) = *(_DWORD *)(v10 - 8);
          *((_OWORD *)v12 + 2) = 0u;
          *((_OWORD *)v12 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
          v12[7] = *(void *)(v10 + 24);
          uint64_t v13 = *(void *)(v10 + 8);
          v12[4] = *(void *)v10;
          *(void *)uint64_t v10 = 0;
          uint64_t v14 = *(void *)(v10 + 16);
          *(void *)(v10 + 24) = 0;
          uint64_t v16 = v12[5];
          uint64_t v15 = v12[6];
          _OWORD v12[5] = v13;
          v12[6] = v14;
          *(void *)(v10 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v16;
          *(void *)(v10 + 16) = v15;
          long long v17 = *(_OWORD *)(v10 + 32);
          long long v18 = *(_OWORD *)(v10 + 48);
          *((unsigned char *)v12 + 96) = *(unsigned char *)(v10 + 64);
          *((_OWORD *)v12 + 4) = v17;
          *((_OWORD *)v12 + 5) = v18;
          re::DynamicString::deinit((re::DynamicString *)v10);
          uint64_t v19 = *(void **)(v10 - 16);
          if (v19)
          {

            *(void *)(v10 - 16) = 0;
          }
          int v20 = *(void **)(v10 - 24);
          if (v20)
          {

            *(void *)(v10 - 24) = 0;
          }
          *(void *)(v10 - 32) = 0;
          v10 += 104;
          v12 += 13;
          v11 -= 104;
        }
        while (v11);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v8 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)float v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = (void *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v21 - 1) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v21 % (unint64_t)*(unsigned int *)(a1 + 24), *v21, v21, v21 + 1);
              }
              v21 += 6;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  uint64_t v25 = 48 * v8;
  *(_DWORD *)(v22 + vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v8 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 48 * v8;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(void *)(v26 + 16) = *a5;
  *a5 = 0;
  uint64_t v27 = *(void *)(v26 + 32);
  *(void *)(v26 + 32) = a5[2];
  a5[2] = v27;
  *(void *)(v26 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = a5[3];
  a5[3] = 0;
  uint64_t v28 = *(void *)(v26 + 24);
  *(void *)(v26 + 24) = a5[1];
  a5[1] = v28;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void *re::DynamicArray<re::RenderFrame::PickupAction>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraph>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraph>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraph>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraph>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderGraph>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (re::RenderGraph *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 112 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::RenderGraph::RenderGraph(v11, v8);
          re::RenderGraph::~RenderGraph(v8);
          uint64_t v8 = (re::RenderGraph *)((char *)v8 + 112);
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        uint64_t v8 = (re::RenderGraph *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::RenderGraph *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RenderGraph::RenderGraph(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  re::DynamicString::setCapacity((void *)(a1 + 40), 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = &str_106;
  *(void *)(a1 + 8re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 96) = &str_106;
  re::RenderGraph::move((void *)a1, a2);
  return a1;
}

void re::RenderGraph::move(void *a1, void *a2)
{
  re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)a1, (uint64_t)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 5), (re::DynamicString *)(a2 + 5));
  uint64_t v4 = a2[9];
  uint64_t v5 = a2[10];
  a2[9] = 0;
  a2[10] = "";
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  a1[9] = v4;
  a1[10] = v5;
  unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  uint64_t v13 = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  uint64_t v8 = a2[11];
  uint64_t v9 = a2[12];
  a2[11] = 0;
  a2[12] = "";
  uint64_t v10 = a1[11];
  uint64_t v11 = a1[12];
  a1[11] = v8;
  a1[12] = v9;
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  uint64_t v13 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  a1[13] = a2[13];
}

void re::RenderGraphCompiled::~RenderGraphCompiled(re::RenderGraphCompiled *this)
{
  uint64_t v2 = *((void *)this + 90);
  if (v2)
  {
    uint64_t v3 = (void (****)(void))*((void *)this + 92);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      re::internal::destroyPersistent<re::RenderGraphNodeBase>((re *)"~RenderGraphCompiled", 71, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + 90) = 0;
  ++*((_DWORD *)this + 182);
  uint64_t v6 = *((void *)this + 103);
  if (v6)
  {

    *((void *)this + 10re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  }
  re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit((uint64_t)this + 784);
  re::DynamicArray<re::RenderGraphScopeOutput>::deinit((uint64_t)this + 744);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 704);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 82);
  re::DynamicArray<re::RenderGraph>::deinit((uint64_t)this + 616);
  re::DynamicArray<re::DetailedError>::deinit((uint64_t)this + 576);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 536);
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + 496);
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + 456);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 416);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 376);
  re::DynamicArray<re::RenderGraphResourceSetup>::deinit((uint64_t)this + 336);
  re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions(this);
}

re *re::internal::destroyPersistent<re::RenderGraphNodeBase>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceSetup>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 192 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v3 + 120);
          re::DynamicArray<unsigned long>::deinit(v3 + 80);
          re::DynamicArray<unsigned long>::deinit(v3 + 40);
          re::DynamicArray<unsigned long>::deinit(v3);
          v3 += 192;
          v5 -= 192;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (unsigned __int8 *)(*(void *)&v13[16] + v10 + 256));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 2048;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, unsigned __int8 *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 11) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 11) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 11) + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 11) + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 11) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 11)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 11) + 16) = *a4;
  re::CameraLateLatch::CameraLateLatch(*(void *)(a1 + 16) + (v10 << 11) + 256, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 11), 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CameraLateLatch::CameraLateLatch(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (v4) {
    memcpy((void *)(a1 + 256), a2 + 256, 0x400uLL);
  }
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = 0;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 128re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(void *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = *((void *)a2 + 160);
  *((void *)a2 + 160) = 0;
  *(void *)(a1 + 128re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 161);
  *((void *)a2 + 161) = 0;
  uint64_t v5 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = *((void *)a2 + 162);
  *((void *)a2 + 162) = v5;
  uint64_t v6 = *(void *)(a1 + 1312);
  *(void *)(a1 + 1312) = *((void *)a2 + 164);
  *((void *)a2 + 164) = v6;
  ++*((_DWORD *)a2 + 326);
  ++*(_DWORD *)(a1 + 1304);
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 132re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 1344) = 0;
  *(void *)(a1 + 1320) = *((void *)a2 + 165);
  *((void *)a2 + 165) = 0;
  *(void *)(a1 + 132re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 166);
  *((void *)a2 + 166) = 0;
  uint64_t v7 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = *((void *)a2 + 167);
  *((void *)a2 + 16re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v7;
  uint64_t v8 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = *((void *)a2 + 169);
  *((void *)a2 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v8;
  ++*((_DWORD *)a2 + 336);
  ++*(_DWORD *)(a1 + 1344);
  *(void *)(a1 + 1392) = 0;
  *(void *)(a1 + 1360) = 0;
  *(void *)(a1 + 1376) = 0;
  *(void *)(a1 + 136re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  *(void *)(a1 + 1360) = *((void *)a2 + 170);
  *((void *)a2 + 170) = 0;
  *(void *)(a1 + 136re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 171);
  *((void *)a2 + 171) = 0;
  uint64_t v9 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = *((void *)a2 + 172);
  *((void *)a2 + 172) = v9;
  uint64_t v10 = *(void *)(a1 + 1392);
  *(void *)(a1 + 1392) = *((void *)a2 + 174);
  *((void *)a2 + 174) = v10;
  ++*((_DWORD *)a2 + 346);
  ++*(_DWORD *)(a1 + 1384);
  *(void *)(a1 + 156re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1544) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(void *)(a1 + 1536) = *((void *)a2 + 192);
  *((void *)a2 + 192) = 0;
  *(void *)(a1 + 1544) = *((void *)a2 + 193);
  *((void *)a2 + 19re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0;
  uint64_t v11 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = *((void *)a2 + 194);
  *((void *)a2 + 194) = v11;
  uint64_t v12 = *(void *)(a1 + 1568);
  *(void *)(a1 + 156re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 196);
  *((void *)a2 + 196) = v12;
  ++*((_DWORD *)a2 + 390);
  ++*(_DWORD *)(a1 + 1560);
  *(void *)(a1 + 160re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1576) = 0;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1600) = 0;
  *(void *)(a1 + 1576) = *((void *)a2 + 197);
  *((void *)a2 + 19re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *(void *)(a1 + 1584) = *((void *)a2 + 198);
  *((void *)a2 + 19re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v13 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = *((void *)a2 + 199);
  *((void *)a2 + 19re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = v13;
  uint64_t v14 = *(void *)(a1 + 1608);
  *(void *)(a1 + 160re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 201);
  *((void *)a2 + 201) = v14;
  ++*((_DWORD *)a2 + 400);
  ++*(_DWORD *)(a1 + 1600);
  *(_OWORD *)(a1 + 1616) = *((_OWORD *)a2 + 101);
  return a1;
}

void *re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (char *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v9 << 7;
        uint64_t v11 = v7;
        do
        {
          uint64_t v11[6] = 0u;
          v11[7] = 0u;
          v11[4] = 0u;
          v11[5] = 0u;
          uint64_t v11[2] = 0u;
          unsigned __int8 v11[3] = 0u;
          *uint64_t v11 = 0u;
          v11[1] = 0u;
          memmove(v11, v8, 0x80uLL);
          v8 += 128;
          v11 += 8;
          v10 -= 128;
        }
        while (v10);
        uint64_t v8 = (char *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, char *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::PatchHandler>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PatchHandler>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_15;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_15:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 16 * v9;
        uint64_t v11 = v7;
        uint64_t v12 = (long long *)v5[4];
        do
        {
          long long v13 = *v12++;
          *v11++ = v13;
          v10 -= 16;
        }
        while (v10);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  int v3 = *(_DWORD *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 24;
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(result + 32);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v5 = 472 * v2;
  uint64_t v6 = v4;
  do
  {
    if (!*(unsigned char *)(v4 + 464))
    {
      uint64_t result = (**(uint64_t (***)(uint64_t))v4)(v4);
      *(unsigned char *)(v4 + 464) = 1;
    }
    v4 += 472;
    v6 += 472;
    v5 -= 472;
  }
  while (v5);
  int v3 = *(_DWORD *)(v1 + 16);
LABEL_10:
  *(_DWORD *)(v1 + 16) = v3 + 2;
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 5 || (v7 & 1) == 0))
    {
      if (a2 < 6)
      {
        uint64_t v14 = a1[4];
        if (v7) {
          long long v15 = a1 + 3;
        }
        else {
          long long v15 = (void *)a1[4];
        }
        if (v9)
        {
          unint64_t v16 = 0;
          uint64_t v17 = 472 * v9;
          do
          {
            unsigned int v18 = &v15[v16 / 8];
            LOBYTE(a1[v16 / 8 + 61]) = 1;
            re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(&a1[v16 / 8 + 3], &v15[v16 / 8]);
            if (!LOBYTE(v15[v16 / 8 + 58]))
            {
              (*(void (**)(void *))*v18)(&v15[v16 / 8]);
              *((unsigned char *)v18 + 464) = 1;
            }
            v16 += 472;
          }
          while (v17 != v16);
          uint64_t result = *a1;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v14);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x1D8uLL))
      {
        uint64_t v2 = 472 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 472 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            long long v13 = a1 + 3;
          }
          else {
            long long v13 = (unsigned char *)a1[4];
          }
          uint64_t v19 = a1[1];
          if (v19)
          {
            uint64_t v20 = 472 * v19;
            uint64_t v21 = v13;
            uint64_t v22 = (unsigned char *)result;
            do
            {
              v22[464] = 1;
              uint64_t result = (uint64_t)re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v22, v13);
              if (!v13[464])
              {
                uint64_t result = (**(uint64_t (***)(unsigned char *))v13)(v13);
                v13[464] = 1;
              }
              v13 += 472;
              v22 += 472;
              v21 += 472;
              v20 -= 472;
            }
            while (v20);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 472, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

unsigned char *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(unsigned char *result, unsigned char *a2, unsigned char *a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t result = re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(a3, v5);
      v5 += 472;
      a3 += 472;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned char *re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    if (!a1[464])
    {
      (**(void (***)(unsigned char *))a1)(a1);
      a1[464] = 1;
    }
    if (!a2[464])
    {
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 32))(a2, a1);
      if (!a2[464])
      {
        (**(void (***)(unsigned char *))a2)(a2);
        a2[464] = 1;
      }
      a1[464] = 0;
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), (unint64_t *)(*(void *)&v13[16] + v10 + 48));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 224;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 224 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 224 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 224 * v10 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 224 * v10 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 224 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 224 * vre::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 224 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(v14 + 224 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  uint64_t v15 = v14 + 224 * v10 + 48;
  *(_DWORD *)(v15 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::move((unint64_t *)v15, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

unint64_t *re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::move(unint64_t *result, unint64_t *a2)
{
  int v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  if (*a2 >= *result)
  {
    uint64_t v6 = (uint64_t *)(a2 + 2);
    uint64_t v7 = (uint64_t)&a2[10 * v5 + 2];
    long long v8 = result + 2;
    if (v5) {
      memmove(result + 2, a2 + 2, 80 * v5 - 6);
    }
    uint64_t result = (unint64_t *)memcpy(&v8[10 * v5], &a2[10 * v5 + 2], (size_t)&v6[10 * v4] - v7);
  }
  else if (v4)
  {
    uint64_t result = (unint64_t *)memmove(result + 2, a2 + 2, 80 * v4 - 6);
  }
  unint64_t *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

void *re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy(void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  if ((unint64_t)*a2 >= *result)
  {
    unint64_t v5 = a2 + 2;
    uint64_t v6 = &a2[10 * v4 + 2];
    uint64_t v7 = result + 2;
    if (v4) {
      memmove(result + 2, a2 + 2, 80 * v4 - 6);
    }
    uint64_t result = memcpy(&v7[10 * v4], v6, (char *)&v5[10 * v3] - (char *)v6);
  }
  else if (v3)
  {
    uint64_t result = memmove(result + 2, a2 + 2, 80 * v3 - 6);
  }
  *uint64_t v2 = v3;
  return result;
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)signed int v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (uint64_t *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v13 - 5) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 6);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 7) + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 7) + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 7) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + (v17 << 7)) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + (v17 << 7) + 16), (const re::DynamicString *)(v13 - 4));
            uint64_t v21 = *(void *)(a1 + 16) + (v17 << 7);
            *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
            *(_DWORD *)(v21 + 56) = 0;
            uint64_t v22 = *v13;
            memcpy((void *)(v21 + 64), v13 + 2, 32 * *v13);
            *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v22;
            uint64_t *v13 = 0;
            ++*((_DWORD *)v13 + 2);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 16;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 48 * v9;
        int v11 = v7;
        do
        {
          *int v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          re::DynamicInlineArray<re::PlaneF,6ul>::move(v11, (unint64_t *)v8);
          *(void *)uint64_t v8 = 0;
          ++*(_DWORD *)(v8 + 8);
          v8 += 48;
          v11 += 6;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::FixedArray<re::RenderLayer>::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == a2[1]) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderLayer const*,re::RenderLayer const*,re::RenderLayer*>((uint64_t)&v4, *a2, *a2 + 32 * v2, *(void *)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::RenderLayer>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)uint64_t result = 0;
      *(unsigned char *)(result + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(unsigned char *)(result + 20) = 0;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(void *)uint64_t result = 0;
  *(unsigned char *)(result + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(result + 20) = 0;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderLayer const*,re::RenderLayer const*,re::RenderLayer*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = re::ObjCObject::operator=((id *)(a4 + v7), (id *)(a2 + v7));
    int v9 = *(unsigned __int8 *)(a2 + v7 + 8);
    if (*((unsigned char *)v8 + 8)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 == 0;
    }
    if (!v10)
    {
      if (*((unsigned char *)v8 + 8)) {
        BOOL v11 = v9 == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        *((unsigned char *)v8 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
      }
      else
      {
        if (*((unsigned char *)v8 + 8)) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v9 == 0;
        }
        if (!v12) {
          *((unsigned char *)v8 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 1;
        }
        *(void *)(a4 + v7 + 12) = *(void *)(a2 + v7 + 12);
      }
    }
    int v13 = *(unsigned __int8 *)(a2 + v7 + 20);
    if (*((unsigned char *)v8 + 20)) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v13 == 0;
    }
    if (!v14)
    {
      if (*((unsigned char *)v8 + 20)) {
        BOOL v15 = v13 == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        *((unsigned char *)v8 + 20) = 0;
      }
      else
      {
        if (*((unsigned char *)v8 + 20) || !*(unsigned char *)(a2 + v7 + 20))
        {
          int v17 = *(_DWORD *)(a2 + v7 + 24);
          uint64_t v16 = a4 + v7;
        }
        else
        {
          *((unsigned char *)v8 + 20) = 1;
          uint64_t v16 = a4 + v7;
          int v17 = *(_DWORD *)(a2 + v7 + 24);
        }
        *(_DWORD *)(v16 + 24) = v17;
      }
    }
    v7 += 32;
  }
  while (a2 + v7 != v6);
  return v6;
}

void *re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        BOOL v10 = (void *)(v8 + 40 * v9);
        BOOL v11 = v7 + 4;
        BOOL v12 = (void *)(v8 + 32);
        do
        {
          int v13 = v12 - 4;
          *(v11 - 4) = *(v12 - 4);
          uint64_t v14 = *(v12 - 3);
          *((_WORD *)v11 - re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((_WORD *)v12 - 8);
          *(v11 - re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v14;
          LODWORD(vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = *((unsigned __int8 *)v12 - 8);
          *((unsigned char *)v11 - re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v14;
          if (v14) {
            *BOOL v11 = *v12;
          }
          *(v12 - 4) = 0;
          v11 += 5;
          v12 += 5;
        }
        while (v13 + 5 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

double re::make::shared::object<re::RenderFrameWorkload>@<D0>(re *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 704, 64);
  bzero(v4, 0x2C0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  void *v4 = &unk_26E70F3C8;
  *((unsigned char *)v4 + 24) = 0;
  id v4[4] = 0;
  *(int64x2_t *)(v4 + 5) = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
  v4[7] = 0;
  *((_DWORD *)v4 + 16) = 0;
  v4[9] = 0;
  v4[11] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[13] = 0;
  *((_DWORD *)v4 + 32) = 0;
  v4[22] = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 1re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0u;
  *(_OWORD *)(v4 + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_DWORD *)v4 + 42) = 0;
  v4[25] = 0;
  v4[26] = 0;
  v4[24] = 0;
  *((_DWORD *)v4 + 54) = 0;
  v4[63] = 0;
  *((unsigned char *)v4 + 512) = 0;
  *((unsigned char *)v4 + 576) = 0;
  *((unsigned char *)v4 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = 0;
  *((_OWORD *)v4 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_DWORD *)v4 + 64) = 0;
  *(_OWORD *)(v4 + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  *((_DWORD *)v4 + 74) = 0;
  *((_OWORD *)v4 + 1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_DWORD *)v4 + 84) = 0;
  *(_OWORD *)(v4 + 4re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
  *(_OWORD *)(v4 + 45) = 0u;
  *((_DWORD *)v4 + 94) = 0;
  *((_DWORD *)v4 + 104) = 0;
  *((_OWORD *)v4 + 24) = 0u;
  *((_OWORD *)v4 + re::FixedArray<re::AttributeArgument>::deinit((void *)this + 25) = 0u;
  *((_DWORD *)v4 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *(_OWORD *)(v4 + 5re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 0u;
  *(_OWORD *)(v4 + 55) = 0u;
  *((_DWORD *)v4 + 124) = 0;
  *((_OWORD *)v4 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)v4 + 30) = 0u;
  *a2 = v4;
  return result;
}

void *re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  double result = (void *)*result;
  if (!*v5)
  {
    double result = (void *)re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 32) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 32) = v12;
        *(void *)(v8 + 32) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 32) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  id v5[4] = v7;
  v5[1] = a2;
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

void *re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  double result = (void *)*result;
  if (!*v5)
  {
    double result = (void *)re::DynamicArray<re::Function<void ()(re::mtl::CommandBuffer const&)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 32) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 32) = v12;
        *(void *)(v8 + 32) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 32) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  id v5[4] = v7;
  v5[1] = a2;
  return result;
}

void *re::DynamicArray<re::mtl::Drawable>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ObjCObject>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ObjCObject>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    double result = re::DynamicOverflowArray<unsigned long long,5ul>::reserve(result, a2);
    unint64_t v5 = *((void *)v3 + 1);
    if (v5 < a2)
    {
      do
      {
        BOOL v6 = (char *)v3 + 24;
        if ((*((unsigned char *)v3 + 16) & 1) == 0) {
          BOOL v6 = (char *)*((void *)v3 + 4);
        }
        *(void *)&v6[8 * v5++] = 0;
      }
      while (a2 != v5);
    }
  }
  *((void *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

int *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy(int *result, unint64_t a2, char *__src, uint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    unint64_t v7 = *((void *)result + 1);
    if (v7 + 1 <= a2)
    {
      uint64_t v20 = 0;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 136315906;
      *(void *)((char *)&v21 + 4) = "copy";
      WORD6(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 1024;
      HIWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 678;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v4 = a4;
      unint64_t v8 = a2 + a4;
      if (!__CFADD__(a2, a4))
      {
        if (v7 >= v8)
        {
          if (result[4]) {
            uint64_t v13 = (char *)(result + 6);
          }
          else {
            uint64_t v13 = (char *)*((void *)result + 4);
          }
          double result = (int *)memmove(&v13[8 * a2], __src, 8 * a4);
LABEL_29:
          v6[4] += 2;
          return result;
        }
        if (*(void *)result)
        {
          int v10 = result[4];
          if (v10)
          {
            if (v8 > 5)
            {
              unint64_t v12 = 10;
              goto LABEL_16;
            }
          }
          else
          {
            unint64_t v11 = *((void *)result + 3);
            if (v11 < v8)
            {
              unint64_t v12 = 2 * v11;
LABEL_16:
              if (v12 <= v8) {
                unint64_t v14 = a2 + a4;
              }
              else {
                unint64_t v14 = v12;
              }
              re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(result, v14);
              int v10 = v6[4];
            }
          }
        }
        else
        {
          re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(v6, v8);
          int v10 = v6[4] + 2;
          void v6[4] = v10;
        }
        uint64_t v15 = *((void *)v6 + 1);
        uint64_t v16 = v15 - a2;
        if (v10) {
          uint64_t v17 = (char *)(v6 + 6);
        }
        else {
          uint64_t v17 = (char *)*((void *)v6 + 4);
        }
        int v18 = &__src[8 * v16];
        if (v15 != a2)
        {
          memmove(&v17[8 * a2], __src, 8 * v16);
          int v10 = v6[4];
        }
        if (v10) {
          uint64_t v19 = (char *)(v6 + 6);
        }
        else {
          uint64_t v19 = (char *)*((void *)v6 + 4);
        }
        double result = (int *)memcpy(&v19[8 * *((void *)v6 + 1)], v18, &__src[8 * v4] - v18);
        *((void *)v6 + 1) = v8;
        goto LABEL_29;
      }
    }
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). std::string::size_type size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v20, v21);
    _os_crash();
    __break(1u);
  }
  return result;
}

void re::createMaterialSystemShaderMetadata(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  {
    re::Defaults::BOOLValue((re::Defaults *)"supportsManualVertexFetch", v4, (char *)&v7);
    if (v7.var0) {
      char v5 = *((unsigned char *)&v7.var0 + 1);
    }
    else {
      char v5 = 0;
    }
    re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports = v5;
  }
  char v3 = re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports;
  *(void *)&v7.char var0 = 0x3EE7B1A0B0613218;
  v7.var1 = "realitykit::vsGeometryModifier";
  char v6 = re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0x55E544DB28BE8DDALL;
  v7.var1 = "vsRealityPbr";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0x32567C2142;
  v7.var1 = "vsUnlit";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0x74EED1ADBD89D054;
  v7.var1 = "vsIncrementStencil";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0x1D9CEB56E2FABFF2;
  v7.var1 = "vsVideoPlayback";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0xCCDE6D7516E4C5C4;
  v7.var1 = "vsRealityShadowReceiver";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)&v7.char var0 = 0x2C5500CFF2B76A0;
  v7.var1 = "vsOcclusion";
  char v6 = v3;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v7, &v6);
  re::StringID::destroyString((re::StringID *)&v7);
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(uint64_t a1, StringID *a2, unsigned char *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned char *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(unsigned char *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

void re::GraphicsErrorCategoryImpl::~GraphicsErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x237DBCBD0);
}

const char *re::GraphicsErrorCategoryImpl::name(re::GraphicsErrorCategoryImpl *this)
{
  return "REGraphics error";
}

void *re::GraphicsErrorCategoryImpl::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  char v3 = "Error encountered when executing the render frame";
  uint64_t v4 = "Unknown REGraphics error";
  if (a1 == 1001) {
    uint64_t v4 = "Invalid custom deformer";
  }
  if (a1 != 2000) {
    char v3 = v4;
  }
  if (a1 == 1000) {
    long long v5 = "Invalid blend shape group definition";
  }
  else {
    long long v5 = (char *)v3;
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

id re::makeMetalTypeInfoForPointer@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(*a1, sel_dataTypeDescription);
  id v5 = objc_msgSend(v4, sel_elementType);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 1;
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v6 = (_DWORD *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = "";
  *(_WORD *)(a2 + 36) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_WORD *)(a2 + 76) = 256;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 61) = 0;
  if (v5 == (id)1)
  {
    re::makeMetalTypeInfo((_anonymous_namespace_ *)objc_msgSend(v4, sel_elementStructType), (const char *)objc_msgSend(objc_msgSend(*a1, sel_name), sel_UTF8String), 0, (unsigned char *)objc_msgSend(v4, sel_dataSize), (unsigned int *)&v12);
    *(void *)a2 = v12;
    *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = DWORD2(v12);
    long long v7 = v13[0];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = "";
    uint64_t v8 = *(void *)(a2 + 16);
    unsigned int v9 = *(const char **)(a2 + 24);
    *(_OWORD *)(a2 + 16) = v7;
    unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
    uint64_t v15 = v9;
    re::StringID::destroyString((re::StringID *)&v14);
    *uint64_t v6 = v13[1];
    *(_WORD *)(a2 + 36) = WORD2(v13[1]);
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 40), (uint64_t *)&v13[1] + 1);
    *(void *)(a2 + 64) = *(void *)&v13[3];
    *(void *)(a2 + 70) = *(void *)((char *)&v13[3] + 6);
    re::FixedArray<re::MetalTypeInfo>::deinit((void *)&v13[1] + 1);
    re::StringID::destroyString((re::StringID *)v13);
  }
  else
  {
    __int16 v10 = (__int16)v5;
    long long v12 = 0u;
    DWORD2(v12) = 1;
    memset(&v13[1], 0, 48);
    DWORD2(v13[3]) = 0;
    BYTE13(v13[3]) = 1;
    *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 1;
    *(void *)a2 = v12;
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = "";
    unint64_t v14 = 0;
    uint64_t v15 = "";
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = "";
    re::StringID::destroyString((re::StringID *)&v14);
    *uint64_t v6 = v13[1];
    *(_WORD *)(a2 + 36) = WORD2(v13[1]);
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 40), (uint64_t *)&v13[1] + 1);
    *(void *)(a2 + 64) = *(void *)&v13[3];
    *(void *)(a2 + 70) = *(void *)((char *)&v13[3] + 6);
    re::FixedArray<re::MetalTypeInfo>::deinit((void *)&v13[1] + 1);
    re::StringID::destroyString((re::StringID *)v13);
    *(_WORD *)(a2 + 36) = v10;
  }
  *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = objc_msgSend(v4, sel_alignment, v12, v13[0]);
  id result = objc_msgSend(v4, sel_alignment);
  if (!result) {
    *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 16;
  }
  return result;
}

id re::makeMetalTypeInfo@<X0>(_anonymous_namespace_ *a1@<X0>, const char *a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X3>, unsigned int *a5@<X8>)
{
  *a5 = a3;
  *(void *)(a5 + 1) = 0x100000000;
  *((void *)a5 + 2) = 0;
  unsigned int v9 = "";
  *((void *)a5 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = "";
  *((void *)a5 + 5) = 0;
  a5[8] = 0;
  a5[18] = 0;
  *((_WORD *)a5 + 3re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 256;
  *((void *)a5 + 6) = 0;
  *((void *)a5 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
  *(void *)((char *)a5 + 61) = 0;
  uint64_t v80 = a5;
  uint32x4_t v78 = a4;
  a5[1] = a4;
  *((_WORD *)a5 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 1;
  id v10 = [(_anonymous_namespace_ *)a1 members];
  id result = objc_msgSend(v10, sel_count);
  if (result)
  {
    int v103 = 0;
    unint64_t v100 = 0;
    unint64_t v101 = 0;
    uint64_t v99 = 0;
    int v102 = 0;
    id v12 = objc_msgSend(v10, sel_count);
    if (v12) {
      re::DynamicArray<re::MetalTypeInfo>::setCapacity(&v99, (unint64_t)v12);
    }
    uint64_t v77 = (uint64_t)(a5 + 10);
    unint64_t v13 = (_anonymous_namespace_ *)objc_msgSend(v10, sel_count);
    if (v13)
    {
      uint64_t v14 = 0;
      unsigned int v15 = 0;
      id v81 = v10;
      uint64_t v79 = *v80;
      unsigned int v16 = 1;
      while (1)
      {
        uint64_t v17 = v9;
        unsigned int v18 = v16 - 1;
        id v19 = objc_msgSend(v10, sel_objectAtIndex_, v14);
        uint64_t v20 = (char *)objc_msgSend(v19, sel_offset) + v79;
        unint64_t v90 = 0;
        int v91 = 1;
        unint64_t v92 = 0;
        long long v93 = v17;
        long long v21 = v17;
        unsigned int v94 = 0;
        unsigned __int16 v95 = 0;
        *(_DWORD *)&v98[16] = 0;
        *(_WORD *)&v98[20] = 256;
        unint64_t v97 = 0;
        *(void *)uint64_t v98 = 0;
        unint64_t v96 = 0;
        *(void *)&v98[5] = 0;
        uint64_t v22 = (uint64_t)objc_msgSend(v19, sel_dataType);
        if (v22 <= 57)
        {
          if (v22 == 1)
          {
            if (objc_msgSend(v19, sel_structType))
            {
              unsigned int v47 = objc_msgSend(v81, sel_count) - 1;
              unint64_t v48 = v78;
              if (v78)
              {
                if (v18 == v47)
                {
LABEL_29:
                  id v30 = (id)(v48 - (unsigned char *)objc_msgSend(v19, sel_offset));
                  goto LABEL_30;
                }
              }
              else if (v18 == v47)
              {
                id v30 = 0;
LABEL_30:
                id v55 = objc_msgSend(v19, sel_structType);
                id v56 = objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
                objc_msgSend(v19, sel_argumentIndex);
                re::makeMetalTypeInfo(&v82, v55, v56, v20, v30);
                unint64_t v90 = v82;
                int v91 = DWORD2(v82);
                unint64_t v57 = v83;
                uint64_t v58 = v84;
                unsigned int v9 = v21;
                unint64_t v83 = 0;
                id v84 = v21;
                char v59 = v92;
                uint64_t v60 = v93;
                unint64_t v92 = v57;
                long long v93 = v58;
                unint64_t v104 = v57 & 0xFFFFFFFFFFFFFFFELL | v59 & 1;
                simd_float4 v105 = v60;
                re::StringID::destroyString((re::StringID *)&v104);
                unsigned int v94 = v85;
                unsigned __int16 v95 = v86;
                re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
                *(void *)&v98[8] = *(void *)&v89[8];
                *(void *)&v98[14] = *(void *)&v89[14];
                re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
                re::StringID::destroyString((re::StringID *)&v83);
                goto LABEL_31;
              }
              unint64_t v48 = objc_msgSend(objc_msgSend(v81, sel_objectAtIndex_, v16), sel_offset);
              goto LABEL_29;
            }
          }
          else if (v22 == 2 && objc_msgSend(v19, sel_arrayType))
          {
            id v30 = objc_msgSend(v19, sel_arrayType);
            int v32 = (const char *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
            __int16 v33 = (_anonymous_namespace_ *)objc_msgSend(v19, sel_argumentIndex);
            LODWORD(v82) = v20;
            *(void *)((char *)&v82 + 4) = 0x100000000;
            unint64_t v83 = 0;
            id v84 = v21;
            unsigned int v9 = v21;
            unsigned int v85 = 0;
            __int16 v86 = 0;
            *(_DWORD *)&v89[16] = 0;
            *(_WORD *)&v89[20] = 256;
            uint64_t v88 = 0;
            *(void *)uint64_t v89 = 0;
            uint64_t v87 = 0;
            *(void *)&v89[5] = 0;
            unsigned int v85 = objc_msgSend(v30, sel_arrayLength);
            unsigned int v34 = objc_msgSend(v30, sel_stride);
            DWORD1(v82) = v85 * v34;
            int v91 = DWORD2(v82);
            unint64_t v90 = v82;
            unint64_t v35 = v83;
            unint64_t v36 = v84;
            unint64_t v83 = 0;
            id v84 = v21;
            char v37 = v92;
            long long v38 = v93;
            unint64_t v92 = v35;
            long long v93 = v36;
            unint64_t v104 = v35 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
            simd_float4 v105 = v38;
            re::StringID::destroyString((re::StringID *)&v104);
            unsigned int v94 = v85;
            unsigned __int16 v95 = v86;
            re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
            *(void *)&v98[8] = *(void *)&v89[8];
            *(void *)&v98[14] = *(void *)&v89[14];
            re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
            re::StringID::destroyString((re::StringID *)&v83);
            LODWORD(v30) = HIDWORD(v90);
LABEL_31:
            id v10 = v81;
            __int16 v31 = &selRef_stepFunction_0;
            goto LABEL_32;
          }
        }
        else
        {
          switch(v22)
          {
            case ':':
              id v30 = objc_msgSend(v19, sel_textureReferenceType);
              long long v39 = (const char *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
              uint64_t v40 = (_anonymous_namespace_ *)objc_msgSend(v19, sel_argumentIndex);
              int v41 = (int)v40;
              *(void *)&long long v82 = 0;
              DWORD2(v82) = 1;
              unint64_t v83 = 0;
              id v84 = v21;
              unsigned int v9 = v21;
              unsigned int v85 = 0;
              *(_DWORD *)&v89[16] = 0;
              *(_WORD *)&v89[20] = 256;
              uint64_t v88 = 0;
              *(void *)uint64_t v89 = 0;
              uint64_t v87 = 0;
              *(void *)&v89[5] = 0;
              __int16 v86 = 58;
              *(_DWORD *)&v89[8] = objc_msgSend(v30, sel_textureType);
              *(_DWORD *)&v89[16] = v41;
              v89[12] = objc_msgSend(v30, sel_isDepthTexture);
              unint64_t v90 = v82;
              int v91 = DWORD2(v82);
              unint64_t v42 = v83;
              __int16 v43 = v84;
              unint64_t v83 = 0;
              id v84 = v21;
              char v44 = v92;
              __int16 v45 = v93;
              unint64_t v92 = v42;
              long long v93 = v43;
              unint64_t v104 = v42 & 0xFFFFFFFFFFFFFFFELL | v44 & 1;
              simd_float4 v105 = v45;
              re::StringID::destroyString((re::StringID *)&v104);
              unsigned int v94 = v85;
              unsigned __int16 v95 = v86;
              re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
              *(void *)&v98[8] = *(void *)&v89[8];
              *(void *)&v98[14] = *(void *)&v89[14];
              re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
              re::StringID::destroyString((re::StringID *)&v83);
              Typesize_t Size = re::mtl::getTypeSize(v95);
              unint64_t v90 = __PAIR64__(TypeSize, v20);
              LODWORD(v30) = TypeSize;
              *((unsigned char *)v80 + 76) = 1;
              goto LABEL_31;
            case '<':
              if (objc_msgSend(v19, sel_pointerType))
              {
                signed int v24 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
                unint64_t v104 = 0;
                simd_float4 v105 = v21;
                unsigned int v9 = v21;
                unint64_t v25 = v104;
                uint64_t v26 = v105;
                unint64_t v104 = 0;
                simd_float4 v105 = v21;
                char v27 = v92;
                uint64_t v28 = v93;
                unint64_t v92 = v25;
                long long v93 = v26;
                *(void *)&long long v82 = v25 & 0xFFFFFFFFFFFFFFFELL | v27 & 1;
                *((void *)&v82 + 1) = v28;
                re::StringID::destroyString((re::StringID *)&v82);
                re::StringID::destroyString((re::StringID *)&v104);
                unsigned __int16 v95 = 60;
                unint64_t v90 = v20;
                unsigned int v29 = objc_msgSend(v19, sel_argumentIndex);
                LODWORD(v30) = 0;
                *(_DWORD *)&v98[16] = v29;
                id v10 = v81;
                *((unsigned char *)v80 + 76) = 1;
                __int16 v31 = &selRef_stepFunction_0;
                if (!v29) {
                  goto LABEL_34;
                }
LABEL_33:
                *((unsigned char *)v80 + 76) = 1;
                goto LABEL_34;
              }
              break;
            case ';':
              re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Samplers within argument buffers are not supported by the material system.", "!\"Unreachable code\"", "makeMetalTypeInfo", 219);
              id result = (id)_os_crash();
              __break(1u);
              return result;
          }
        }
        long long v49 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
        unint64_t v104 = 0;
        simd_float4 v105 = v21;
        unint64_t v50 = v104;
        long long v51 = v105;
        unint64_t v104 = 0;
        simd_float4 v105 = v21;
        char v52 = v92;
        long long v53 = v93;
        unint64_t v92 = v50;
        long long v93 = v51;
        *(void *)&long long v82 = v50 & 0xFFFFFFFFFFFFFFFELL | v52 & 1;
        *((void *)&v82 + 1) = v53;
        re::StringID::destroyString((re::StringID *)&v82);
        re::StringID::destroyString((re::StringID *)&v104);
        LODWORD(v90) = v20;
        unsigned __int16 v95 = (unsigned __int16)objc_msgSend(v19, sel_dataType);
        HIDWORD(v90) = re::mtl::getTypeSize(v95);
        *(_DWORD *)&v98[16] = objc_msgSend(v19, sel_argumentIndex);
        __int16 v31 = &selRef_stepFunction_0;
        id v10 = v81;
        if (v18 == objc_msgSend(v81, sel_count) - 1)
        {
          LODWORD(v30) = HIDWORD(v90);
        }
        else
        {
          unsigned int v54 = objc_msgSend(objc_msgSend(v81, sel_objectAtIndex_, v16), sel_offset);
          LODWORD(v30) = v54 - objc_msgSend(v19, sel_offset);
          __int16 v31 = &selRef_stepFunction_0;
        }
        unsigned int v9 = v21;
LABEL_32:
        if (*(_DWORD *)&v98[16]) {
          goto LABEL_33;
        }
LABEL_34:
        unint64_t v61 = v101;
        if (v101 >= v100)
        {
          re::DynamicArray<re::MetalTypeInfo>::growCapacity(&v99, v101 + 1);
          unint64_t v61 = v101;
        }
        uint64_t v62 = &v103[10 * v61];
        unint64_t v63 = v90;
        *((_DWORD *)v62 + 2) = v91;
        *uint64_t v62 = v63;
        LOBYTE(v6re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v92;
        void v62[2] = v62[2] & 0xFFFFFFFFFFFFFFFELL | v92 & 1;
        void v62[2] = v92 & 0xFFFFFFFFFFFFFFFELL | v63 & 1;
        v62[3] = (unint64_t)v93;
        unint64_t v92 = 0;
        long long v93 = v9;
        LODWORD(v6re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v94;
        *((_WORD *)v62 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v95;
        *((_DWORD *)v62 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v63;
        v62[6] = 0;
        v62[7] = 0;
        v62[5] = 0;
        v62[5] = v96;
        unint64_t v96 = 0;
        v62[6] = v97;
        unint64_t v97 = 0;
        unint64_t v64 = v62[7];
        v62[7] = *(void *)v98;
        *(void *)uint64_t v98 = v64;
        unint64_t v65 = *(void *)&v98[8];
        *(unint64_t *)((char *)v62 + 70) = *(void *)&v98[14];
        v62[8] = v65;
        ++v101;
        ++v102;
        v15 += v30;
        re::FixedArray<re::MetalTypeInfo>::deinit(&v96);
        re::StringID::destroyString((re::StringID *)&v92);
        uint64_t v14 = v16;
        unint64_t v13 = (_anonymous_namespace_ *)[v10 v31[31]];
        if ((unint64_t)v13 <= v16++) {
          goto LABEL_39;
        }
      }
    }
    unsigned int v15 = 0;
LABEL_39:
    if (!v78) {
      v80[1] = v15;
    }
    unint64_t v67 = v101;
    if (v101)
    {
      uint64_t v68 = v103;
      uint64_t v69 = &v103[10 * v101];
      uint64_t v70 = *((void *)v80 + 7);
      do
      {
        uint64_t v71 = *v68;
        *(_DWORD *)(v70 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)v68 + 2);
        *(void *)uint64_t v70 = v71;
        uint64_t v72 = (re::StringID *)(v68 + 2);
        LOBYTE(v71) = v68[2];
        *(void *)(v70 + 16) = *(void *)(v70 + 16) & 0xFFFFFFFFFFFFFFFELL | v68[2] & 1;
        *(void *)(v70 + 16) = v68[2] & 0xFFFFFFFFFFFFFFFELL | v71 & 1;
        *(void *)(v70 + 24) = v68[3];
        v68[3] = v9;
        void v68[2] = 0;
        LODWORD(v71) = *((_DWORD *)v68 + 8);
        *(_WORD *)(v70 + 36) = *((_WORD *)v68 + 18);
        *(_DWORD *)(v70 + 32) = v71;
        *(void *)(v70 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        *(void *)(v70 + 56) = 0;
        *(void *)(v70 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = 0;
        uint64_t v74 = v68[5];
        unint64_t v73 = v68 + 5;
        *(void *)(v70 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = v74;
        *unint64_t v73 = 0;
        *(void *)(v70 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v73[1];
        v73[1] = 0;
        uint64_t v75 = *(void *)(v70 + 56);
        *(void *)(v70 + 56) = v73[2];
        void v73[2] = v75;
        uint64_t v76 = v73[3];
        *(void *)(v70 + 70) = *(void *)((char *)v73 + 30);
        *(void *)(v70 + 64) = v76;
        re::FixedArray<re::MetalTypeInfo>::deinit(v73);
        re::StringID::destroyString(v72);
        uint64_t v68 = v73 + 5;
        v70 += 80;
      }
      while (v68 != v69);
    }
    return (id)re::DynamicArray<re::MetalTypeInfo>::deinit((uint64_t)&v99);
  }
  return result;
}

void re::collectArguments(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _anonymous_namespace_ *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = a9;
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (*(void *)(a8 + 16))
  {
    uint64_t v10 = a8;
    unint64_t v12 = 0;
    unint64_t v13 = &selRef_stepFunction_0;
    while (1)
    {
      id v14 = *(id *)(*(void *)(v10 + 32) + 8 * v12);
      id v15 = [v14 v13[15]];
      id v16 = [v14 v13[15]];
      BOOL v17 = !v15 || v16 == (id)28;
      if (v17) {
        break;
      }
      if ([v14 v13[15]] != (id)2)
      {
        if ([v14 v13[15]] != (id)3) {
          goto LABEL_88;
        }
        if (objc_msgSend(v14, sel_arrayLength) == (id)1)
        {
          id v21 = v14;
          uint64_t v26 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String);
          unint64_t v123 = 0;
          unint64_t v124 = "";
          unint64_t v27 = v123;
          uint64_t v28 = v124;
          unint64_t v29 = v123 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v123 = 0;
          unint64_t v124 = "";
          *(void *)unint64_t v129 = v29;
          *(void *)&v129[8] = "";
          *(void *)&v132.char var0 = v27;
          v132.var1 = v28;
          re::StringID::destroyString((re::StringID *)v129);
          re::StringID::destroyString((re::StringID *)&v123);
          LOWORD(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = (unsigned __int16)objc_msgSend(v21, sel_index);
          BYTE2(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = strncmp("dynamicSampler", (const char *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String), 0xEuLL) == 0;
          re::DynamicArray<re::SamplerArgument>::add(a5, (uint64_t *)&v132);
          goto LABEL_19;
        }
        uint64_t v112 = v10;
        id v78 = v14;
        BOOL v79 = strcmp("dynamicSamplers", (const char *)objc_msgSend(objc_msgSend(v78, sel_name), sel_UTF8String)) == 0;
        unint64_t v121 = 0;
        uint64_t v122 = 0;
        __endptr = 0;
        uint64_t v80 = (_anonymous_namespace_ *)objc_msgSend(v78, sel_arrayLength);
        if (objc_msgSend(v78, sel_arrayLength))
        {
          unint64_t v48 = 0;
          unsigned int v81 = 1;
          while (1)
          {
            long long v82 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s[%u]", (re::DynamicString *)&v123, objc_msgSend(objc_msgSend(v78, sel_name), sel_UTF8String), v81 - 1);
            unint64_t v83 = (v124 & 1) != 0 ? v125 : (char *)&v124 + 1;
            unint64_t v126 = 0;
            uint64_t v127 = "";
            unint64_t v52 = v121;
            if (v121 <= v48) {
              break;
            }
            id v84 = &v122->n128_u64[3 * v48];
            unint64_t v85 = v126;
            __int16 v86 = v127;
            unint64_t v126 = 0;
            uint64_t v127 = "";
            uint64_t v87 = (char *)v84[1];
            unint64_t v88 = v85 & 0xFFFFFFFFFFFFFFFELL | *v84 & 1;
            v84[1] = (unint64_t)v86;
            *(void *)&v132.char var0 = v88;
            v132.var1 = v87;
            *id v84 = v85;
            re::StringID::destroyString((re::StringID *)&v132);
            re::StringID::destroyString((re::StringID *)&v126);
            if (v123 && (v124 & 1) != 0) {
              (*(void (**)(void))(*(void *)v123 + 40))();
            }
            unsigned __int16 v89 = (unsigned __int16)objc_msgSend(v78, sel_index);
            unint64_t v52 = v121;
            if (v121 <= v48) {
              goto LABEL_120;
            }
            unint64_t v90 = (char *)v122 + 24 * v48;
            *((_WORD *)v90 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v89 + v48;
            v90[18] = v79;
            unint64_t v48 = v81;
            BOOL v63 = (unint64_t)objc_msgSend(v78, sel_arrayLength) > v81++;
            if (!v63) {
              goto LABEL_81;
            }
          }
LABEL_119:
          uint64_t v128 = 0;
          long long v135 = 0u;
          long long v136 = 0u;
          long long v133 = 0u;
          long long v134 = 0u;
          StringID v132 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v129 = 136315906;
          *(void *)&v129[4] = "operator[]";
          *(_WORD *)&unsigned char v129[12] = 1024;
          *(_DWORD *)&v129[14] = 468;
          *(_WORD *)&v129[18] = 2048;
          *(void *)&v129[20] = v48;
          *(_WORD *)&v129[28] = 2048;
          *(void *)&v129[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          unint64_t v123 = 0;
          long long v135 = 0u;
          long long v136 = 0u;
          long long v133 = 0u;
          long long v134 = 0u;
          StringID v132 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v129 = 136315906;
          *(void *)&v129[4] = "operator[]";
          *(_WORD *)&unsigned char v129[12] = 1024;
          *(_DWORD *)&v129[14] = 468;
          *(_WORD *)&v129[18] = 2048;
          *(void *)&v129[20] = v48;
          *(_WORD *)&v129[28] = 2048;
          *(void *)&v129[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_81:
        if (v78) {

        }
        uint64_t v10 = v112;
        if (v121)
        {
          int v91 = (uint64_t *)v122;
          uint64_t v92 = 24 * v121;
          do
          {
            re::DynamicArray<re::SamplerArgument>::add(a5, v91);
            v91 += 3;
            v92 -= 24;
          }
          while (v92);
        }
        re::FixedArray<re::AttributeArgument>::deinit(&__endptr);
LABEL_87:
        uint64_t v9 = a9;
        goto LABEL_88;
      }
      if (objc_msgSend(v14, sel_arrayLength) == (id)1)
      {
        id v21 = v14;
        uint64_t v22 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String);
        unint64_t v123 = 0;
        unint64_t v124 = "";
        unint64_t v23 = v123;
        signed int v24 = v124;
        unint64_t v25 = v123 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v123 = 0;
        unint64_t v124 = "";
        *(void *)unint64_t v129 = v25;
        *(void *)&v129[8] = "";
        *(void *)&v132.char var0 = v23;
        v132.var1 = v24;
        re::StringID::destroyString((re::StringID *)v129);
        re::StringID::destroyString((re::StringID *)&v123);
        LOWORD(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = (unsigned __int16)objc_msgSend(v21, sel_index);
        WORD1(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = (unsigned __int16)objc_msgSend(v21, sel_textureType);
        WORD2(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = (unsigned __int16)objc_msgSend(v21, sel_textureDataType);
        BYTE6(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = objc_msgSend(v21, sel_isDepthTexture);
        *((void *)&v133 + 1) = objc_msgSend(v21, sel_access);
        re::DynamicArray<re::TextureArgument>::add(a4, (__n128 *)&v132);
LABEL_19:
        re::StringID::destroyString((re::StringID *)&v132);
        if (v21) {

        }
        goto LABEL_87;
      }
      id v46 = v14;
      unint64_t v121 = 0;
      uint64_t v122 = 0;
      __endptr = 0;
      unsigned int v47 = (_anonymous_namespace_ *)objc_msgSend(v46, sel_arrayLength);
      if (objc_msgSend(v46, sel_arrayLength))
      {
        unint64_t v48 = 0;
        unsigned int v49 = 1;
        while (1)
        {
          unint64_t v50 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s[%u]", (re::DynamicString *)&v123, objc_msgSend(objc_msgSend(v46, sel_name), sel_UTF8String), v49 - 1);
          long long v51 = (v124 & 1) != 0 ? v125 : (char *)&v124 + 1;
          unint64_t v126 = 0;
          uint64_t v127 = "";
          unint64_t v52 = v121;
          if (v121 <= v48) {
            break;
          }
          long long v53 = &v122[2 * v48];
          unint64_t v54 = v126;
          id v55 = v127;
          unint64_t v126 = 0;
          uint64_t v127 = "";
          id v56 = (char *)v53->n128_u64[1];
          unint64_t v57 = v54 & 0xFFFFFFFFFFFFFFFELL | v53->n128_u64[0] & 1;
          v53->n128_u64[1] = (unint64_t)v55;
          *(void *)&v132.char var0 = v57;
          v132.var1 = v56;
          v53->n128_u64[0] = v54;
          re::StringID::destroyString((re::StringID *)&v132);
          re::StringID::destroyString((re::StringID *)&v126);
          if (v123 && (v124 & 1) != 0) {
            (*(void (**)(void))(*(void *)v123 + 40))();
          }
          unsigned __int16 v58 = (unsigned __int16)objc_msgSend(v46, sel_index);
          unint64_t v52 = v121;
          if (v121 <= v48) {
            goto LABEL_114;
          }
          v122[2 * v48 + 1].n128_u16[0] = v58 + v48;
          unsigned __int16 v59 = (unsigned __int16)objc_msgSend(v46, sel_textureType);
          unint64_t v52 = v121;
          if (v121 <= v48) {
            goto LABEL_115;
          }
          v122[2 * v48 + 1].n128_u16[1] = v59;
          unsigned __int16 v60 = (unsigned __int16)objc_msgSend(v46, sel_textureDataType);
          unint64_t v52 = v121;
          if (v121 <= v48) {
            goto LABEL_116;
          }
          v122[2 * v48 + 1].n128_u16[2] = v60;
          unsigned __int8 v61 = objc_msgSend(v46, sel_isDepthTexture);
          unint64_t v52 = v121;
          if (v121 <= v48) {
            goto LABEL_117;
          }
          v122[2 * v48 + 1].n128_u8[6] = v61;
          id v62 = objc_msgSend(v46, sel_access);
          unint64_t v52 = v121;
          if (v121 <= v48) {
            goto LABEL_118;
          }
          v122[2 * v48 + 1].n128_u64[1] = (unint64_t)v62;
          unint64_t v48 = v49;
          BOOL v63 = (unint64_t)objc_msgSend(v46, sel_arrayLength) > v49++;
          if (!v63) {
            goto LABEL_54;
          }
        }
        uint64_t v128 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        unint64_t v123 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        unint64_t v123 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        unint64_t v123 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        unint64_t v123 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        unint64_t v123 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        StringID v132 = (StringID)0;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v129 = 136315906;
        *(void *)&v129[4] = "operator[]";
        *(_WORD *)&unsigned char v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(void *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(void *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_119;
      }
LABEL_54:
      if (v46) {

      }
      uint64_t v9 = a9;
      if (v121)
      {
        unint64_t v64 = v122;
        uint64_t v65 = 32 * v121;
        do
        {
          re::DynamicArray<re::TextureArgument>::add(a4, v64);
          v64 += 2;
          v65 -= 32;
        }
        while (v65);
      }
      re::FixedArray<re::TextureArgument>::deinit(&__endptr);
LABEL_88:
      *(unsigned char *)uint64_t v9 = 0;
      char v93 = 1;
      if (v14) {
        goto LABEL_89;
      }
LABEL_90:
      if ((v93 & 1) == 0) {
        return;
      }
      ++v12;
      unint64_t v13 = &selRef_stepFunction_0;
      if (*(void *)(v10 + 16) <= v12) {
        goto LABEL_111;
      }
    }
    id v18 = v16;
    if (a7 && objc_msgSend(v14, sel_index) - 29 <= 1) {
      goto LABEL_88;
    }
    if (v15)
    {
      id v19 = objc_msgSend(v14, sel_dataTypeDescription);
      if (!v19)
      {
LABEL_27:
        if (objc_msgSend(v14, sel_isVertexDescriptorBuffer)) {
          goto LABEL_88;
        }
        if (a6)
        {
          int v41 = (const char *)objc_msgSend(objc_msgSend(v14, sel_name), sel_UTF8String);
          size_t v42 = strlen(v41);
          if (v42 >= 0x15)
          {
            BOOL v43 = *(void *)v41 == 0x4157524F465F4552 && *((void *)v41 + 1) == 0x4655425F44454452;
            if (v43 && *((_DWORD *)v41 + 4) == 1599227206)
            {
              size_t v94 = v42;
              __endptr = 0;
              unsigned __int16 v95 = (_anonymous_namespace_ *)strtoull(v41 + 20, &__endptr, 10);
              if (__endptr + 1 >= &v41[v94])
              {
                re::DynamicString::format((re::DynamicString *)"Forwarded buffer argument is malformed: %s. No valid shader function name found.", (re::DynamicString *)&v132, v41);
                re::makeMaterialBuilderErr((__CFString *)0x28, (uint64_t)&v132, v129);
                *(unsigned char *)uint64_t v9 = 1;
                uint64_t v109 = *(void *)v129;
                *(void *)unint64_t v129 = 0;
                *(void *)(v9 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v109;
                if (*(void *)&v132.var0 && ((uint64_t)v132.var1 & 1) != 0) {
                  (*(void (**)(void, void))(**(void **)&v132.var0 + 40))(*(void *)&v132.var0, v133);
                }
                char v93 = 0;
                if (!v14) {
                  goto LABEL_90;
                }
LABEL_89:

                goto LABEL_90;
              }
              unint64_t v96 = v95;
              unint64_t v123 = 0;
              unint64_t v124 = "";
              unint64_t v97 = __endptr + 1;
              unint64_t v98 = v123;
              uint64_t v99 = v124;
              unint64_t v100 = v123 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v123 = 0;
              unint64_t v124 = "";
              *(void *)unint64_t v129 = v100;
              *(void *)&v129[8] = "";
              *(void *)&v132.char var0 = v98;
              v132.var1 = v99;
              re::StringID::destroyString((re::StringID *)v129);
              re::StringID::destroyString((re::StringID *)&v123);
              *(void *)&long long v133 = v96;
              unint64_t v101 = (_anonymous_namespace_ *)objc_msgSend(v14, sel_index);
              WORD4(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = (_WORD)v101;
              uint64_t v102 = a6;
              unint64_t v103 = *(void *)(a6 + 8);
              unint64_t v104 = *(void *)(a6 + 16);
              if (v104 >= v103)
              {
                unint64_t v105 = v104 + 1;
                if (v103 < v104 + 1)
                {
                  if (*(void *)a6)
                  {
                    uint64_t v106 = 2 * v103;
                    BOOL v17 = v103 == 0;
                    unint64_t v107 = 8;
                    if (!v17) {
                      unint64_t v107 = v106;
                    }
                    if (v107 <= v105) {
                      unint64_t v108 = v105;
                    }
                    else {
                      unint64_t v108 = v107;
                    }
                    re::DynamicArray<re::ForwardedBufferArgument>::setCapacity((void *)a6, v108);
                    uint64_t v102 = a6;
                  }
                  else
                  {
                    re::DynamicArray<re::ForwardedBufferArgument>::setCapacity((void *)a6, v105);
                    uint64_t v102 = a6;
                    ++*(_DWORD *)(a6 + 24);
                  }
                }
                unint64_t v104 = *(void *)(v102 + 16);
              }
              uint64_t v110 = v102;
              uint64_t v111 = re::StringID::StringID((re::StringID *)(*(void *)(v102 + 32) + 32 * v104), &v132);
              *((void *)v111 + 2) = v133;
              *((_WORD *)v111 + 12) = WORD4(v133);
              ++*(void *)(v110 + 16);
              ++*(_DWORD *)(v110 + 24);
              goto LABEL_69;
            }
          }
        }
        id v45 = v14;
        *(void *)unint64_t v129 = v45;
        re::makeBufferArgument((uint64_t)&v132, (id *)v129);
        re::DynamicArray<re::BufferArgument>::add(a1, (uint64_t *)&v132);
        re::StringID::destroyString((re::StringID *)&v132);
        if (v45) {

        }
        goto LABEL_88;
      }
      id v20 = objc_msgSend(v19, sel_elementStructType);
    }
    else
    {
      id v20 = objc_msgSend(v14, sel_bufferStructType);
    }
    if (v20)
    {
      *(void *)&v132.char var0 = 0;
      v132.var1 = "";
      LOWORD(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = 0;
      *((void *)&v133 + 1) = 0;
      LODWORD(v134) = 1;
      *((void *)&v134 + 1) = 0;
      *(void *)&long long v135 = "";
      DWORD2(v135) = 0;
      WORD6(v135) = 0;
      *(_DWORD *)&v137[16] = 0;
      *(_WORD *)&v137[20] = 256;
      *(void *)uint64_t v137 = 0;
      long long v136 = 0uLL;
      *(void *)&v137[5] = 0;
      char v138 = 0;
      id v30 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v14, sel_name), sel_UTF8String);
      unint64_t v123 = 0;
      unint64_t v124 = "";
      unint64_t v31 = v123;
      int v32 = v124;
      unint64_t v123 = 0;
      unint64_t v124 = "";
      char var0 = (char)v132.var0;
      var1 = v132.var1;
      *(void *)&v132.char var0 = v31;
      v132.var1 = v32;
      *(void *)unint64_t v129 = v31 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *(void *)&v129[8] = var1;
      re::StringID::destroyString((re::StringID *)v129);
      re::StringID::destroyString((re::StringID *)&v123);
      unsigned __int16 v35 = v12;
      if (v18 != (id)28) {
        unsigned __int16 v35 = (unsigned __int16)objc_msgSend(v14, sel_index);
      }
      LOWORD(v1re::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = v35;
      unint64_t v36 = (char *)v14;
      if (v15)
      {
        __endptr = v36;
        re::makeMetalTypeInfoForPointer((id *)&__endptr, (uint64_t)v129);
        *((void *)&v133 + 1) = *(void *)v129;
        LODWORD(v134) = *(_DWORD *)&v129[8];
        uint64_t v37 = *(void *)&v129[16];
        uint64_t v38 = *(void *)&v129[24];
        *(void *)&v129[16] = 0;
        *(void *)&v129[24] = "";
        char v39 = BYTE8(v134);
        uint64_t v40 = (const char *)v135;
        *((void *)&v134 + 1) = v37;
        *(void *)&long long v135 = v38;
        unint64_t v123 = v37 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
        unint64_t v124 = (char *)v40;
      }
      else
      {
        re::makeMetalTypeInfo((_anonymous_namespace_ *)objc_msgSend(v36, sel_bufferStructType), (const char *)objc_msgSend(objc_msgSend(v36, sel_name), sel_UTF8String), 0, objc_msgSend(v36, sel_bufferDataSize), (unsigned int *)v129);
        *(_DWORD *)&v129[8] = objc_msgSend(v36, sel_bufferAlignment);
        *((void *)&v133 + 1) = *(void *)v129;
        LODWORD(v134) = *(_DWORD *)&v129[8];
        uint64_t v67 = *(void *)&v129[16];
        uint64_t v66 = *(void *)&v129[24];
        *(void *)&v129[16] = 0;
        *(void *)&v129[24] = "";
        char v68 = BYTE8(v134);
        uint64_t v69 = (const char *)v135;
        *((void *)&v134 + 1) = v67;
        *(void *)&long long v135 = v66;
        unint64_t v123 = v67 & 0xFFFFFFFFFFFFFFFELL | v68 & 1;
        unint64_t v124 = (char *)v69;
      }
      re::StringID::destroyString((re::StringID *)&v123);
      DWORD2(v135) = *(_DWORD *)&v129[32];
      WORD6(v135) = *(_WORD *)&v129[36];
      re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v136, v130);
      *(void *)&v137[8] = v131[0];
      *(void *)&v137[14] = *(void *)((char *)v131 + 6);
      re::FixedArray<re::MetalTypeInfo>::deinit(v130);
      re::StringID::destroyString((re::StringID *)&v129[16]);
      if (v36) {

      }
      uint64_t v9 = a9;
      if (v137[20]) {
        uint64_t v70 = a3;
      }
      else {
        uint64_t v70 = a2;
      }
      unint64_t v71 = *(void *)(v70 + 16);
      if (v71 >= *(void *)(v70 + 8))
      {
        re::DynamicArray<re::TypedArgument>::growCapacity((void *)v70, v71 + 1);
        unint64_t v71 = *(void *)(v70 + 16);
      }
      uint64_t v72 = *(void *)(v70 + 32) + 112 * v71;
      char v73 = (char)v132.var0;
      *(void *)uint64_t v72 = *(void *)v72 & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)&v132.var0 & 1;
      *(void *)uint64_t v72 = *(void *)&v132.var0 & 0xFFFFFFFFFFFFFFFELL | v73 & 1;
      *(void *)(v72 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v132.var1;
      *(void *)&v132.char var0 = 0;
      v132.var1 = "";
      *(_WORD *)(v72 + 16) = v133;
      int v74 = v134;
      *(void *)(v72 + 24) = *((void *)&v133 + 1);
      *(_DWORD *)(v72 + 32) = v74;
      LOBYTE(v74) = BYTE8(v134);
      *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = *(void *)(v72 + 40) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v134) & 1;
      *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = *((void *)&v134 + 1) & 0xFFFFFFFFFFFFFFFELL | v74 & 1;
      *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v135;
      *((void *)&v134 + 1) = 0;
      *(void *)&long long v135 = "";
      int v75 = DWORD2(v135);
      *(_WORD *)(v72 + 60) = WORD6(v135);
      *(_DWORD *)(v72 + 56) = v75;
      *(void *)(v72 + 72) = 0;
      *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = 0;
      *(void *)(v72 + 64) = 0;
      *(void *)(v72 + 64) = v136;
      *(void *)&long long v136 = 0;
      *(void *)(v72 + 72) = *((void *)&v136 + 1);
      *((void *)&v136 + 1) = 0;
      uint64_t v76 = *(void *)(v72 + 80);
      *(void *)(v72 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = *(void *)v137;
      *(void *)uint64_t v137 = v76;
      uint64_t v77 = *(void *)&v137[8];
      *(void *)(v72 + 94) = *(void *)&v137[14];
      *(void *)(v72 + 8re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v77;
      *(unsigned char *)(v72 + 104) = v138;
      ++*(void *)(v70 + 16);
      ++*(_DWORD *)(v70 + 24);
      re::FixedArray<re::MetalTypeInfo>::deinit(&v136);
      re::StringID::destroyString((re::StringID *)((char *)&v134 + 8));
LABEL_69:
      re::StringID::destroyString((re::StringID *)&v132);
      goto LABEL_88;
    }
    goto LABEL_27;
  }
LABEL_111:
  *(unsigned char *)uint64_t v9 = 0;
}

uint64_t re::createArgumentEncoderForBindlessArgument@<X0>(re *this@<X0>, id *a2@<X1>, const re::mtl::Device *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = 0;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = 80 * v4;
    uint64_t v6 = (unsigned __int16 *)(*((void *)this + 10) + 36);
    long long v7 = (void *)MEMORY[0x263F127B8];
    do
    {
      id v12 = objc_msgSend(objc_msgSend(v7, sel_alloc, a3), sel_init);
      objc_msgSend(v12, sel_setIndex_, *((unsigned int *)v6 + 9));
      objc_msgSend(v12, sel_setDataType_, *v6);
      objc_msgSend(v12, sel_setArrayLength_, *((unsigned int *)v6 - 1));
      objc_msgSend(v12, sel_setAccess_, 0);
      if (*v6 == 58) {
        objc_msgSend(v12, sel_setTextureType_, *((int *)v6 + 7));
      }
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)v13, &v12);
      if (v12) {

      }
      v6 += 40;
      v5 -= 80;
    }
    while (v5);
  }
  re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::DynamicArray((uint64_t)v11, v13);
  re::mtl::Device::makeArgumentEncoder(a2, (uint64_t)v11, &v12);
  *(unsigned char *)a4 = 1;
  *(void *)(a4 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v12;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v11);
  return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v13);
}

void *re::validateArgumentsCount@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  {
    uint64_t v18 = a2;
    id v19 = a1;
    uint64_t v12 = a4;
    uint64_t v13 = a3;
    a3 = v13;
    a4 = v12;
    int v16 = v15;
    a2 = v18;
    a1 = v19;
    if (v16)
    {
      uint64_t v17 = 31;
      if (a5) {
        uint64_t v17 = 96;
      }
      re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit = v17;
      a2 = v18;
      a1 = v19;
      a3 = v13;
      a4 = v12;
    }
  }
  unint64_t v7 = *((void *)a1 + 2) + *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(a3 + 16);
  unint64_t v9 = *(void *)(a4 + 16);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  id result = re::DynamicString::setCapacity(&v20, 0);
  if (v7 >= 0x20) {
    id result = (void *)re::DynamicString::appendf((re::DynamicString *)&v20, "Constant buffer count [%zu] exceeds limit [%zu]. ", v7, 0x1FuLL);
  }
  if (v8 > re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit)
  {
    id result = (void *)re::DynamicString::appendf((re::DynamicString *)&v20, "Texture count [%zu] exceeds limit [%zu]. ", v8, re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit);
    if (v9 < 0x11) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v9 > 0x10)
  {
LABEL_8:
    id result = (void *)re::DynamicString::appendf((re::DynamicString *)&v20, "Sampler count [%zu] exceeds limit [%zu]. ", v9, 0x10uLL);
LABEL_9:
    *(unsigned char *)a6 = 1;
    *(void *)(a6 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v20;
    *(void *)(a6 + 32) = v22;
    *(_OWORD *)(a6 + 16) = v21;
    return result;
  }
  if (v7 >= 0x20) {
    goto LABEL_9;
  }
  *(unsigned char *)a6 = 0;
  id result = v20;
  if (v20 && (v21 & 1) != 0)
  {
    unint64_t v11 = *(uint64_t (**)(void))(*v20 + 40);
    return (void *)v11();
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BufferArgument>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  char v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        id result = (_anonymous_namespace_ *)re::DynamicArray<re::BufferArgument>::setCapacity(result, v10);
      }
      else
      {
        id result = (_anonymous_namespace_ *)re::DynamicArray<re::BufferArgument>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  unint64_t v11 = (unint64_t *)(*((void *)v3 + 4) + 24 * v5);
  uint64_t v12 = *a2;
  *unint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *unint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v11[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v11[2] = a2[2];
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::makeBufferArgument(uint64_t a1, id *a2)
{
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 16) = (unsigned __int16)objc_msgSend(*a2, sel_index);
  *(_WORD *)(a1 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = (unsigned __int16)objc_msgSend(*a2, sel_bufferAlignment);
  *(_WORD *)(a1 + 20) = (unsigned __int16)objc_msgSend(*a2, sel_bufferDataSize);
  unint64_t v4 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(*a2, sel_name), sel_UTF8String);
  uint64_t v8 = 0;
  unint64_t v9 = "";
  uint64_t v5 = v8;
  unint64_t v6 = v9;
  unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v8 = 0;
  unint64_t v9 = "";
  v10[0] = v7;
  v10[1] = "";
  *(void *)a1 = v5;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v6;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

__n128 re::DynamicArray<re::TextureArgument>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::RigPose>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigPose>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  unint64_t v11 = (__n128 *)(*(void *)(a1 + 32) + 32 * v5);
  unint64_t v12 = a2->n128_u64[0];
  v11->n128_u64[0] = v11->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  v11->n128_u64[0] = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v11->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)"";
  __n128 result = a2[1];
  v11[1] = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::SamplerArgument>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  char v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::SamplerArgument>::setCapacity(result, v10);
      }
      else
      {
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::SamplerArgument>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 24 * v5;
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  LOWORD(v12) = *((_WORD *)a2 + 8);
  *(unsigned char *)(v11 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((unsigned char *)a2 + 18);
  *(_WORD *)(v11 + 16) = v12;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::ForwardedBufferArgument>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ForwardedBufferArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      BOOL v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[4 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          uint64_t *v8 = 0;
          v8[1] = (uint64_t)"";
          uint64_t v13 = v8[2];
          *((_WORD *)v11 + 12) = *((_WORD *)v8 + 12);
          uint64_t v11[2] = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 4;
          v11 += 4;
        }
        while (v8 != v10);
        BOOL v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::BufferArgument>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::BufferArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      BOOL v8 = (re::StringID *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = (re::StringID *)((char *)v8 + 24 * v9);
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(void *)v8 & 1;
          *uint64_t v11 = *(void *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = *((void *)v8 + 1);
          *(void *)BOOL v8 = 0;
          *((void *)v8 + 1) = "";
          uint64_t v11[2] = *((void *)v8 + 2);
          re::StringID::destroyString(v8);
          BOOL v8 = (re::StringID *)((char *)v8 + 24);
          v11 += 3;
        }
        while (v8 != v10);
        BOOL v8 = (re::StringID *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, re::StringID *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::SamplerArgument>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::SamplerArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        id v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      BOOL v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[3 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          uint64_t *v8 = 0;
          v8[1] = (uint64_t)"";
          LOWORD(v12) = *((_WORD *)v8 + 8);
          *((unsigned char *)v11 + 1re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = *((unsigned char *)v8 + 18);
          *((_WORD *)v11 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = v12;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        BOOL v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t v11 = *(void ***)(a2 + 32);
    uint64_t v12 = a1[2];
    uint64_t v13 = (void **)a1[4];
    if (v12)
    {
      uint64_t v14 = 8 * v12;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v13++, v11++);
        v14 -= 8;
      }
      while (v14);
      uint64_t v13 = (void **)a1[4];
      uint64_t v12 = a1[2];
      uint64_t v11 = *(void ***)(a2 + 32);
    }
    if (v12 != v4)
    {
      int v15 = &v11[v12];
      int v16 = &v13[v12];
      uint64_t v17 = 8 * v4 - 8 * v12;
      do
      {
        uint64_t v18 = *v15++;
        *v16++ = v18;
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    uint64_t v6 = (void **)a1[4];
    if (v4)
    {
      uint64_t v7 = *(void ***)(a2 + 32);
      uint64_t v8 = 8 * v4;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v6++, v7++);
        v8 -= 8;
      }
      while (v8);
      uint64_t v6 = (void **)a1[4];
      unint64_t v5 = a1[2];
    }
    if (v4 != v5)
    {
      uint64_t v9 = &v6[v4];
      uint64_t v10 = 8 * v5 - 8 * v4;
      do
      {
        if (*v9)
        {

          id *v9 = 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  a1[2] = v4;
}

id re::makeView1DTo1DArray@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(*a1, sel_arrayLength);
  id v5 = *a1;
  if ((unint64_t)v4 < 2) {
    id result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 1, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  }
  else {
    id result = v5;
  }
  *a2 = result;
  return result;
}

id re::makeView2DTo2DArray@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(*a1, sel_arrayLength);
  id v5 = *a1;
  if ((unint64_t)v4 < 2) {
    id result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 3, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  }
  else {
    id result = v5;
  }
  *a2 = result;
  return result;
}

id re::makeView2DArrayTo2D@<X0>(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v6 = objc_msgSend(*a1, sel_arrayLength);
  id v7 = *a1;
  if (v6 == (id)1) {
    id result = v7;
  }
  else {
    id result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 2, 0, objc_msgSend(v7, sel_mipmapLevelCount), a2, 1);
  }
  *a3 = result;
  return result;
}

id re::makeView2DMultisampleTo2DMultisampleArray@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(*a1, sel_arrayLength);
  id v5 = *a1;
  if ((unint64_t)v4 < 2) {
    id result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 8, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  }
  else {
    id result = v5;
  }
  *a2 = result;
  return result;
}

uint64_t *re::RenderGraphProcessor::updateTextureLifetimes(uint64_t *this, re::RenderGraphCompiled *a2)
{
  if (this[49])
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    while (1)
    {
      if (v2[59] <= v3) {
        goto LABEL_17;
      }
      uint64_t v4 = v2[61] + 40 * v3;
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5) {
        break;
      }
LABEL_8:
      if (v2[64] <= v3) {
        goto LABEL_18;
      }
      uint64_t v9 = v2[66] + 40 * v3;
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v11 = *(unsigned int **)(v9 + 32);
        uint64_t v12 = 4 * v10;
        while (v2[49] > v3)
        {
          unsigned int v13 = *v11++;
          this = (uint64_t *)re::RenderGraphCompiled::setLastRead(v2[37], v13, *(_DWORD *)(v2[51] + 4 * v3));
          v12 -= 4;
          if (!v12) {
            goto LABEL_13;
          }
        }
LABEL_16:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_13:
      if (++v3 >= v2[49]) {
        return this;
      }
    }
    id v6 = *(unsigned int **)(v4 + 32);
    uint64_t v7 = 4 * v5;
    while (v2[49] > v3)
    {
      unsigned int v8 = *v6++;
      this = (uint64_t *)re::RenderGraphCompiled::setFirstWritten(v2[37], v8, *(_DWORD *)(v2[51] + 4 * v3));
      v7 -= 4;
      if (!v7) {
        goto LABEL_8;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return this;
}

uint64_t re::RenderGraphCompiled::setFirstWritten(uint64_t this, unsigned int a2, int a3)
{
  if (*(void *)(this + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*(void *)(this + 32) + 48 * a2 + 32) = a3;
  return this;
}

uint64_t re::RenderGraphCompiled::setLastRead(uint64_t this, unsigned int a2, int a3)
{
  if (*(void *)(this + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*(void *)(this + 32) + 48 * a2 + 36) = a3;
  return this;
}

_anonymous_namespace_ *re::RenderGraphProcessorManager::addDefaultProcessors(re::RenderGraphProcessorManager *this)
{
  v43[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(this);
  unint64_t v3 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 48, 8);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v43[0] = &unk_26E70F540;
  v43[3] = v4;
  v43[4] = v43;
  *(void *)unint64_t v3 = &unk_26E70F5A8;
  *((void *)v3 + 4) = v4;
  *((void *)v3 + 5) = 0;
  re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>((uint64_t)v3 + 8, (uint64_t)v43);
  uint64_t v38 = v3;
  re::DynamicArray<re::RigDataValue *>::add(this, &v38);
  uint64_t v5 = (re *)re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)v43);
  if (*((unsigned char *)this + 121))
  {
    id v6 = re::globalAllocators(v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 176, 8);
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = xmmword_264BE6560;
    *(_OWORD *)(v7 + 56) = *(_OWORD *)&off_264BE6570;
    *(_OWORD *)(v7 + 72) = xmmword_264BE6580;
    *(_OWORD *)(v7 + re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = xmmword_264BE6540;
    *(void *)uint64_t v7 = &unk_26E7106A0;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)&off_264BE6550;
    *(void *)(v7 + 8re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = "QueryVisibility";
    *(void *)(v7 + 96) = 0;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 112) = 0;
    *(_DWORD *)(v7 + 120) = 0;
    *(void *)(v7 + 16re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(v7 + 160) = 0;
    *(_OWORD *)(v7 + 12re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v7 + 144) = 0u;
    uint64_t v38 = (re::RenderGraphNodeCombineProcessor *)v7;
    unsigned int v8 = re::DynamicArray<re::RigDataValue *>::add(this, &v38);
    uint64_t v9 = re::globalAllocators(v8);
    uint64_t v10 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 8, 8);
    *(void *)uint64_t v10 = &unk_26E70F5E8;
    uint64_t v38 = v10;
    uint64_t v11 = re::DynamicArray<re::RigDataValue *>::add(this, &v38);
  }
  else
  {
    uint64_t v12 = re::globalAllocators(v5);
    unsigned int v13 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 48, 8);
    uint64_t v14 = re::globalAllocators(v13)[2];
    v42[0] = &unk_26E70F628;
    v42[3] = v14;
    v42[4] = v42;
    *(void *)unsigned int v13 = &unk_26E70F5A8;
    *((void *)v13 + 4) = v14;
    *((void *)v13 + 5) = 0;
    re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>((uint64_t)v13 + 8, (uint64_t)v42);
    uint64_t v38 = v13;
    re::DynamicArray<re::RigDataValue *>::add(this, &v38);
    uint64_t v11 = (re *)re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)v42);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26AF94950, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = (re *)__cxa_guard_acquire(qword_26AF94950);
    if (v11)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableNoClearOptimization", v36, (char *)&v38);
      _MergedGlobals_384 = 1;
      if ((_BYTE)v38) {
        char v37 = BYTE1(v38);
      }
      else {
        char v37 = 1;
      }
      byte_26AF94949 = v37;
      __cxa_guard_release(qword_26AF94950);
    }
  }
  if ((_MergedGlobals_384 & 1) == 0)
  {
    if (!*((unsigned char *)this + 120)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v15 = byte_26AF94949 ^ 1;
  *((unsigned char *)this + 120) = byte_26AF94949 ^ 1;
  if (v15)
  {
LABEL_9:
    int v16 = re::globalAllocators(v11);
    uint64_t v17 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 8, 8);
    *(void *)uint64_t v17 = &unk_26E70FA20;
    uint64_t v38 = v17;
    uint64_t v11 = re::DynamicArray<re::RigDataValue *>::add(this, &v38);
  }
LABEL_10:
  if (*((unsigned char *)this + 122))
  {
    uint64_t v18 = re::globalAllocators(v11);
    id v19 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 88, 8);
    uint64_t v38 = re::RenderGraphNodeCombineProcessor::RenderGraphNodeCombineProcessor(v19, v20);
    long long v21 = re::DynamicArray<re::RigDataValue *>::add(this, &v38);
  }
  else
  {
    uint64_t v22 = re::globalAllocators(v11);
    unint64_t v23 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 48, 8);
    uint64_t v24 = re::globalAllocators(v23)[2];
    v41[0] = &unk_26E70F680;
    void v41[3] = v24;
    v41[4] = v41;
    *(void *)unint64_t v23 = &unk_26E70F5A8;
    *((void *)v23 + 4) = v24;
    *((void *)v23 + 5) = 0;
    re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>((uint64_t)v23 + 8, (uint64_t)v41);
    uint64_t v38 = v23;
    re::DynamicArray<re::RigDataValue *>::add(this, &v38);
    long long v21 = (re *)re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)v41);
  }
  unint64_t v25 = re::globalAllocators(v21);
  uint64_t v26 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 48, 8);
  uint64_t v27 = re::globalAllocators(v26)[2];
  v40[0] = &unk_26E70F6D8;
  v40[3] = v27;
  v40[4] = v40;
  *(void *)uint64_t v26 = &unk_26E70F5A8;
  *((void *)v26 + 4) = v27;
  *((void *)v26 + 5) = 0;
  re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>((uint64_t)v26 + 8, (uint64_t)v40);
  uint64_t v38 = v26;
  re::DynamicArray<re::RigDataValue *>::add((re::RenderGraphProcessorManager *)((char *)this + 80), &v38);
  uint64_t v28 = (re *)re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)v40);
  unint64_t v29 = re::globalAllocators(v28);
  id v30 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29[2] + 32))(v29[2], 48, 8);
  uint64_t v31 = re::globalAllocators(v30)[2];
  v39[0] = &unk_26E70F730;
  v39[1] = this;
  v39[3] = v31;
  unsigned char v39[4] = v39;
  *(void *)id v30 = &unk_26E70F5A8;
  *((void *)v30 + 4) = v31;
  *((void *)v30 + 5) = 0;
  re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>((uint64_t)v30 + 8, (uint64_t)v39);
  uint64_t v38 = v30;
  re::DynamicArray<re::RigDataValue *>::add((re::RenderGraphProcessorManager *)((char *)this + 80), &v38);
  int v32 = (re *)re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)v39);
  __int16 v33 = re::globalAllocators(v32);
  unsigned int v34 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33[2] + 32))(v33[2], 8, 8);
  *(void *)unsigned int v34 = &unk_26E70F788;
  uint64_t v38 = v34;
  return re::DynamicArray<re::RigDataValue *>::add((re::RenderGraphProcessorManager *)((char *)this + 80), &v38);
}

void re::RenderGraphProcessorManager::process(uint64_t a1, uint64_t a2, void *a3)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 5020, *(unsigned __int8 *)(a1 + 121));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 32);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v10 = a3[2];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)a3[4];
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14)
  {
    int v15 = *(uint64_t **)(a1 + 72);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a2);
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = a3[7];
  if (v18)
  {
    id v19 = (uint64_t *)a3[9];
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v19++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, a2);
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v22 = *(void *)(a1 + 96);
  if (v22)
  {
    unint64_t v23 = *(uint64_t **)(a1 + 112);
    uint64_t v24 = 8 * v22;
    do
    {
      uint64_t v25 = *v23++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, a2);
      v24 -= 8;
    }
    while (v24);
  }
  uint64_t v26 = a3[12];
  if (v26)
  {
    uint64_t v27 = (uint64_t *)a3[14];
    uint64_t v28 = 8 * v26;
    do
    {
      uint64_t v29 = *v27++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, a2);
      v28 -= 8;
    }
    while (v28);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::~Callable()
{
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2[44];
  if (v3)
  {
    uint64_t v5 = a2[46];
    uint64_t v6 = v5 + 192 * v3;
    do
    {
      uint64_t v7 = *(void *)(v5 + 56);
      if (v7)
      {
        uint64_t v8 = v7 << 6;
        uint64_t v9 = (_DWORD *)(*(void *)(v5 + 72) + 52);
        do
        {
          uint64_t v10 = a2[37];
          unint64_t v11 = *v9;
          unint64_t v12 = *(void *)(v10 + 16);
          if (v12 <= v11)
          {
            v24[0] = 0;
            long long v37 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v25 = 136315906;
            uint64_t v26 = "operator[]";
            __int16 v27 = 1024;
            int v28 = 789;
            __int16 v29 = 2048;
            unint64_t v30 = v11;
            __int16 v31 = 2048;
            unint64_t v32 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            id v24[2] = 0;
            long long v37 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v25 = 136315906;
            uint64_t v26 = "operator[]";
            __int16 v27 = 1024;
            int v28 = 789;
            __int16 v29 = 2048;
            unint64_t v30 = v12;
            __int16 v31 = 2048;
            unint64_t v32 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v13 = *(void *)(v10 + 32);
          int v14 = *(_DWORD *)(v13 + 48 * v11);
          if (v14 == 1)
          {
            uint64_t v21 = v13 + 48 * v11;
            *(void *)&long long v33 = *(void *)(v21 + 8) >> 1;
            *((void *)&v33 + 1) = *(void *)(v21 + 24);
            uint64_t v22 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v33);
            if (*v22 == 4)
            {
              int v23 = v22[7];
              if (v23 != -1) {
                _DWORD *v9 = v23;
              }
            }
          }
          else if (!v14)
          {
            uint64_t v15 = v13 + 48 * v11;
            v24[0] = *(void *)(v15 + 8) >> 1;
            v24[1] = *(void *)(v15 + 24);
            uint64_t v16 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)v24);
            if (*v16 == 4)
            {
              uint64_t v17 = v16;
              unint64_t v12 = v16[18];
              if (v12 != -1)
              {
                _DWORD *v9 = v12;
                uint64_t v18 = a2[37];
                unint64_t v2 = *(void *)(v18 + 16);
                if (v2 <= v12) {
                  goto LABEL_19;
                }
                uint64_t v19 = *(void *)(v18 + 32) + 48 * v12;
                *(void *)&long long v33 = *(void *)(v19 + 8) >> 1;
                *((void *)&v33 + 1) = *(void *)(v19 + 24);
                uint64_t v20 = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v33);
                *(_DWORD *)(v20 + 64) |= v17[16];
              }
            }
          }
          v9 += 16;
          v8 -= 64;
        }
        while (v8);
      }
      v5 += 192;
    }
    while (v5 != v6);
  }
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F540;
  return result;
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F540;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

void re::RenderGraphInlineProcessor::~RenderGraphInlineProcessor(re::RenderGraphInlineProcessor *this)
{
}

{
  uint64_t vars8;

  re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphInlineProcessor::process(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
}

uint64_t re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable(uint64_t a1))(void)
{
  id result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    id result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      id result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::FixLifetimeOfExternalsProcessor::~FixLifetimeOfExternalsProcessor(re::FixLifetimeOfExternalsProcessor *this)
{
}

re::FixLifetimeOfExternalsProcessor *re::FixLifetimeOfExternalsProcessor::process(uint64_t this, re::RenderGraphCompiled *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (!*((void *)a2 + 44)) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(*((void *)a2 + 37) + 16);
  LOBYTE(v4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
  long long v37 = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v6 = *((void *)a2 + 44);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v2 = 1;
  do
  {
    uint64_t v9 = *((void *)a2 + 46) + 192 * v7;
    uint64_t v10 = *(void *)(v9 + 56);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v3 = v10 << 6;
    unint64_t v11 = (unsigned int *)(*(void *)(v9 + 72) + 52);
    do
    {
      if (!re::RenderGraphCompiled::resourceIsExternal(a2, *v11)) {
        goto LABEL_14;
      }
      int v12 = *(v11 - 12);
      if ((v12 - 1) >= 8)
      {
        if (v12) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v13 = *v11;
        unint64_t v14 = v38;
        if (v38 <= v13)
        {
          uint64_t v40 = 0;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v41 = 136315906;
          size_t v42 = "operator[]";
          __int16 v43 = 1024;
          int v44 = 468;
          __int16 v45 = 2048;
          unint64_t v46 = v13;
          __int16 v47 = 2048;
          unint64_t v48 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_60;
        }
        if (*(unsigned char *)(v39 + v13)) {
          goto LABEL_13;
        }
        *(unsigned char *)(v39 + v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = 1;
        re::RenderGraphCompiled::setFirstWritten(*((void *)a2 + 37), v13, v8);
      }
      LODWORD(v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = *v11;
LABEL_13:
      re::RenderGraphCompiled::setLastRead(*((void *)a2 + 37), v13, v8);
LABEL_14:
      v11 += 16;
      v3 -= 64;
    }
    while (v3);
    unint64_t v6 = *((void *)a2 + 44);
LABEL_16:
    unint64_t v7 = (v8 + 1);
    unint64_t v8 = v7;
  }
  while (v6 > v7);
LABEL_17:
  this = (uint64_t)v37;
  if (v37 && v38) {
    this = (*(uint64_t (**)(void))(*(void *)v37 + 40))();
  }
LABEL_20:
  uint64_t v15 = *((void *)a2 + 37);
  if (*(void *)(v15 + 16))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v2 = 48;
    do
    {
      uint64_t v18 = *(void *)(v15 + 32);
      int v19 = *(_DWORD *)(v18 + v16);
      if (v19 == 1)
      {
        uint64_t v22 = v18 + v16;
        long long v37 = (re::FixLifetimeOfExternalsProcessor *)(*(void *)(v22 + 8) >> 1);
        unint64_t v38 = *(void *)(v22 + 24);
        this = re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 2) {
          goto LABEL_36;
        }
        this = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v17);
        if (this) {
          goto LABEL_36;
        }
        this = re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 4) {
          goto LABEL_36;
        }
        unint64_t v13 = *(unsigned int *)(this + 28);
        if (v13 == -1) {
          goto LABEL_36;
        }
        uint64_t v21 = (re::RenderGraphCompiled *)*((void *)a2 + 37);
        unint64_t v3 = *((void *)v21 + 2);
        if (v3 <= v13) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v19) {
          goto LABEL_36;
        }
        uint64_t v20 = v18 + v16;
        long long v37 = (re::FixLifetimeOfExternalsProcessor *)(*(void *)(v20 + 8) >> 1);
        unint64_t v38 = *(void *)(v20 + 24);
        this = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 2) {
          goto LABEL_36;
        }
        this = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v17);
        if (this) {
          goto LABEL_36;
        }
        this = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 4) {
          goto LABEL_36;
        }
        unint64_t v13 = *(unsigned int *)(this + 72);
        if (v13 == -1) {
          goto LABEL_36;
        }
        uint64_t v21 = (re::RenderGraphCompiled *)*((void *)a2 + 37);
        unint64_t v3 = *((void *)v21 + 2);
        if (v3 <= v13) {
          goto LABEL_65;
        }
      }
      unsigned int v23 = *(_DWORD *)(*((void *)v21 + 4) + 48 * v13 + 24);
      FirstWritteunint64_t n = re::RenderGraphCompiled::getFirstWritten(v21, v23);
      re::RenderGraphCompiled::setFirstWritten(*((void *)a2 + 37), v17, FirstWritten);
      int v25 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v23);
      this = re::RenderGraphCompiled::setLastRead(*((void *)a2 + 37), v17, v25);
LABEL_36:
      ++v17;
      uint64_t v15 = *((void *)a2 + 37);
      v16 += 48;
    }
    while (*(void *)(v15 + 16) > v17);
  }
  unint64_t v26 = *((void *)a2 + 44);
  LODWORD(v4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = -1;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  long long v37 = 0;
  uint64_t v28 = *((void *)a2 + 49);
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *((void *)a2 + 51);
    unint64_t v8 = v38;
    uint64_t v31 = v39;
    while (1)
    {
      unint64_t v13 = *(unsigned int *)(v30 + 4 * v29);
      if (v8 <= v13) {
        break;
      }
      *(_DWORD *)(v31 + 4 * v1re::FixedArray<re::TypedArgument>::deinit((void *)this + 3) = v29++;
      if (v28 == v29) {
        goto LABEL_41;
      }
    }
LABEL_60:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 468;
    __int16 v45 = 2048;
    unint64_t v46 = v13;
    __int16 v47 = 2048;
    unint64_t v48 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 468;
    __int16 v45 = 2048;
    unint64_t v46 = v13;
    __int16 v47 = 2048;
    unint64_t v48 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 468;
    __int16 v45 = 2048;
    unint64_t v46 = v8;
    __int16 v47 = 2048;
    unint64_t v48 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 789;
    __int16 v45 = 2048;
    unint64_t v46 = v13;
    __int16 v47 = 2048;
    unint64_t v48 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 789;
    __int16 v45 = 2048;
    unint64_t v46 = v8;
    __int16 v47 = 2048;
    unint64_t v48 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 789;
    __int16 v45 = 2048;
    unint64_t v46 = v13;
    __int16 v47 = 2048;
    unint64_t v48 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    uint64_t v40 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v41 = 136315906;
    size_t v42 = "operator[]";
    __int16 v43 = 1024;
    int v44 = 789;
    __int16 v45 = 2048;
    unint64_t v46 = v13;
    __int16 v47 = 2048;
    unint64_t v48 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_41:
  unsigned int v36 = 0;
  if (*(void *)(*((void *)a2 + 37) + 16))
  {
    LODWORD(v2re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = 0;
    do
    {
      if (re::RenderGraphCompiled::resourceIsExternal(a2, v27))
      {
        BOOL IsValid = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v36);
        unint64_t v8 = re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v36);
        if (IsValid)
        {
          unsigned int v33 = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v36);
          unint64_t v13 = v33;
          unint64_t v2 = v38;
          if (v38 <= v33) {
            goto LABEL_61;
          }
          unint64_t v13 = *(unsigned int *)(v39 + 4 * v33);
          if ((v13 & 0x80000000) == 0)
          {
            unint64_t v2 = *((void *)a2 + 59);
            if (v2 <= v13) {
              goto LABEL_63;
            }
            re::DynamicArray<int>::add((void *)(*((void *)a2 + 61) + 40 * v13), &v36);
          }
        }
        if (v8)
        {
          unsigned int v34 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v36);
          unint64_t v8 = v34;
          unint64_t v13 = v38;
          if (v38 <= v34) {
            goto LABEL_62;
          }
          unint64_t v8 = *(unsigned int *)(v39 + 4 * v34);
          if ((v8 & 0x80000000) == 0)
          {
            unint64_t v13 = *((void *)a2 + 64);
            if (v13 <= v8) {
              goto LABEL_64;
            }
            re::DynamicArray<int>::add((void *)(*((void *)a2 + 66) + 40 * v8), &v36);
          }
        }
      }
      __int16 v27 = (re::RenderGraphCompiled *)++v36;
    }
    while (*(void *)(*((void *)a2 + 37) + 16) > (unint64_t)v36);
  }
  re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v27);
  id result = v37;
  if (v37)
  {
    if (v38) {
      return (re::FixLifetimeOfExternalsProcessor *)(*(uint64_t (**)(void))(*(void *)v37 + 40))();
    }
  }
  return result;
}

BOOL re::RenderGraphCompiled::resourceIsExternal(re::RenderGraphCompiled *this, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 37);
  if (*(void *)(v2 + 16) <= (unint64_t)a2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v2 + 32);
  int v4 = *(_DWORD *)(v3 + 48 * a2);
  if (!v4)
  {
    uint64_t v8 = v3 + 48 * a2;
    *(void *)&long long v10 = *(void *)(v8 + 8) >> 1;
    *((void *)&v10 + 1) = *(void *)(v8 + 24);
    int v7 = *(_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)this, (uint64_t)&v10);
    return v7 == 2;
  }
  if (v4 == 1)
  {
    unint64_t v5 = *(unsigned int *)(v3 + 48 * a2 + 28);
    uint64_t v6 = *((void *)this + 39);
    if (*(void *)(v6 + 16) > v5)
    {
      int v7 = *(_DWORD *)(*(void *)(v6 + 32) + 48 * v5);
      return v7 == 2;
    }
LABEL_11:
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0;
}

BOOL re::RenderGraphCompiled::firstWrittenIsValid(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((void *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(*((void *)this + 4) + 48 * a2 + 32) != -1;
}

uint64_t re::RenderGraphCompiled::getFirstWritten(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((void *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 4) + 48 * a2 + 32);
}

uint64_t re::RenderGraphCompiled::getLastRead(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((void *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 4) + 48 * a2 + 36);
}

BOOL re::RenderGraphCompiled::lastReadIsValid(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((void *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(*((void *)this + 4) + 48 * a2 + 36) != -1;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::operator()(_anonymous_namespace_ *a1, re::RenderGraphProcessor *this)
{
  uint64_t v3 = (uint64_t *)this;
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 44)) {
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)(v3[37] + 16);
  LOBYTE(v45) = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v32 = 0;
  if (!v3[44]) {
    goto LABEL_24;
  }
  unint64_t v5 = (unint64_t)(v3 + 47);
  unint64_t v6 = (unint64_t)(v3 + 57);
  do
  {
    re::DynamicArray<int>::add(v3 + 47, &v32);
    *(void *)&long long v47 = 0;
    *(void *)&long long v46 = 0;
    long long v45 = 0uLL;
    DWORD2(v46) = 0;
    re::DynamicArray<re::DynamicArray<unsigned int>>::add(v3 + 57, (uint64_t)&v45);
    if ((void)v45 && (void)v47) {
      (*(void (**)(void))(*(void *)v45 + 40))();
    }
    *(void *)&long long v47 = 0;
    *(void *)&long long v46 = 0;
    long long v45 = 0uLL;
    DWORD2(v46) = 0;
    re::DynamicArray<re::DynamicArray<unsigned int>>::add(v3 + 62, (uint64_t)&v45);
    if ((void)v45)
    {
      this = (re::RenderGraphProcessor *)v47;
      if ((void)v47) {
        (*(void (**)(void))(*(void *)v45 + 40))();
      }
    }
    unint64_t v7 = v32;
    unint64_t v8 = v3[44];
    if (v8 <= v32) {
      goto LABEL_62;
    }
    uint64_t v9 = v3[46] + 192 * v32;
    uint64_t v10 = *(void *)(v9 + 56);
    if (!v10) {
      goto LABEL_23;
    }
    unint64_t v7 = v10 << 6;
    long long v11 = (unsigned int *)(*(void *)(v9 + 72) + 52);
    do
    {
      int v12 = *(v11 - 12);
      if ((v12 - 1) < 8)
      {
        unint64_t v8 = *v11;
        unint64_t v2 = v34;
        if (v34 <= v8)
        {
          *(void *)unsigned int v36 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 468;
          __int16 v41 = 2048;
          unint64_t v42 = v8;
          __int16 v43 = 2048;
          unint64_t v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_62:
          *(void *)unsigned int v36 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v7;
          __int16 v43 = 2048;
          unint64_t v44 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_63:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v6;
          __int16 v43 = 2048;
          unint64_t v44 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v5;
          __int16 v43 = 2048;
          unint64_t v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_65:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v5;
          __int16 v43 = 2048;
          unint64_t v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_66:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v5;
          __int16 v43 = 2048;
          unint64_t v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_67:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v5;
          __int16 v43 = 2048;
          unint64_t v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_68:
          uint64_t v33 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v5;
          __int16 v43 = 2048;
          unint64_t v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_69:
          *(void *)unsigned int v36 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v6;
          __int16 v43 = 2048;
          unint64_t v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          *(void *)unsigned int v36 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v37 = 136315906;
          unint64_t v38 = "operator[]";
          __int16 v39 = 1024;
          int v40 = 789;
          __int16 v41 = 2048;
          unint64_t v42 = v6;
          __int16 v43 = 2048;
          unint64_t v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unsigned int v13 = v32;
        if (!*(unsigned char *)(v35 + v8))
        {
          *(unsigned char *)(v35 + vre::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 1;
          re::RenderGraphCompiled::setFirstWritten(v3[37], v8, v13);
          LODWORD(vre::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = *v11;
          unsigned int v13 = v32;
        }
        uint64_t v14 = v3[37];
        unsigned int v15 = v8;
        goto LABEL_18;
      }
      if (!v12)
      {
        unsigned int v15 = *v11;
        unsigned int v13 = v32;
        uint64_t v14 = v3[37];
LABEL_18:
        re::RenderGraphCompiled::setLastRead(v14, v15, v13);
      }
      v11 += 16;
      v7 -= 64;
    }
    while (v7);
    LODWORD(vre::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v32;
    unint64_t v8 = v3[44];
LABEL_23:
    unsigned int v32 = v7 + 1;
  }
  while (v8 > (v7 + 1));
LABEL_24:
  if (v33 && v34) {
    (*(void (**)(void))(*(void *)v33 + 40))();
  }
LABEL_27:
  uint64_t v16 = (re::RenderGraphCompiled *)v3[37];
  if (!*((void *)v16 + 2)) {
    return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (2)
  {
    uint64_t v19 = *((void *)v16 + 4);
    int v20 = *(_DWORD *)(v19 + v17);
    if (v20 == 1)
    {
      uint64_t v24 = v19 + v17;
      uint64_t v33 = *(void *)(v24 + 8) >> 1;
      unint64_t v34 = *(void *)(v24 + 24);
      if (!re::RenderGraphCompiled::firstWrittenIsValid(v16, v18))
      {
        int v25 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)v3, (uint64_t)&v33);
        if (*v25 == 4)
        {
          unint64_t v6 = v25[7];
          if (v6 != -1)
          {
            unsigned int v23 = (re::RenderGraphCompiled *)v3[37];
            unint64_t v2 = *((void *)v23 + 2);
            if (v2 <= v6) {
              goto LABEL_70;
            }
LABEL_40:
            unsigned int v26 = *(_DWORD *)(*((void *)v23 + 4) + 48 * v6 + 24);
            FirstWritteunint64_t n = re::RenderGraphCompiled::getFirstWritten(v23, v26);
            re::RenderGraphCompiled::setFirstWritten(v3[37], v18, FirstWritten);
            int v28 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v26);
            re::RenderGraphCompiled::setLastRead(v3[37], v18, v28);
          }
        }
      }
    }
    else if (!v20)
    {
      uint64_t v21 = v19 + v17;
      uint64_t v33 = *(void *)(v21 + 8) >> 1;
      unint64_t v34 = *(void *)(v21 + 24);
      if (!re::RenderGraphCompiled::firstWrittenIsValid(v16, v18))
      {
        uint64_t v22 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)v3, (uint64_t)&v33);
        if (*v22 == 4)
        {
          unint64_t v6 = v22[18];
          if (v6 != -1)
          {
            unsigned int v23 = (re::RenderGraphCompiled *)v3[37];
            unint64_t v2 = *((void *)v23 + 2);
            if (v2 <= v6) {
              goto LABEL_69;
            }
            goto LABEL_40;
          }
        }
      }
    }
    ++v18;
    uint64_t v16 = (re::RenderGraphCompiled *)v3[37];
    unint64_t v29 = *((void *)v16 + 2);
    v17 += 48;
    if (v29 > v18) {
      continue;
    }
    break;
  }
  v36[0] = 0;
  if (v29)
  {
    LODWORD(this) = 0;
    while (1)
    {
      BOOL IsValid = re::RenderGraphCompiled::firstWrittenIsValid(v16, this);
      unint64_t v5 = re::RenderGraphCompiled::lastReadIsValid((re::RenderGraphCompiled *)v3[37], v36[0]);
      if (re::RenderGraphCompiled::resourceIsExternal((re::RenderGraphCompiled *)v3, v36[0]))
      {
        if (IsValid)
        {
          unint64_t v6 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
          unint64_t v8 = v3[59];
          if (v8 <= v6) {
            goto LABEL_63;
          }
          re::DynamicArray<int>::add((void *)(v3[61] + 40 * v6), v36);
        }
        if (!v5) {
          goto LABEL_59;
        }
        unint64_t v5 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v36[0]);
        unint64_t v6 = v3[64];
        if (v6 <= v5) {
          goto LABEL_65;
        }
        goto LABEL_58;
      }
      if ((IsValid & v5) == 1) {
        break;
      }
      if (((v5 | !IsValid) & 1) == 0)
      {
        unint64_t v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
        unint64_t v6 = v3[59];
        if (v6 <= v5) {
          goto LABEL_67;
        }
        re::DynamicArray<int>::add((void *)(v3[61] + 40 * v5), v36);
        unint64_t v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
        unint64_t v6 = v3[64];
        if (v6 <= v5) {
          goto LABEL_68;
        }
        goto LABEL_58;
      }
LABEL_59:
      this = (re::RenderGraphProcessor *)++v36[0];
      uint64_t v16 = (re::RenderGraphCompiled *)v3[37];
      if (*((void *)v16 + 2) <= (unint64_t)v36[0]) {
        return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
      }
    }
    unint64_t v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
    unint64_t v6 = v3[59];
    if (v6 <= v5) {
      goto LABEL_64;
    }
    re::DynamicArray<int>::add((void *)(v3[61] + 40 * v5), v36);
    unint64_t v5 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v36[0]);
    unint64_t v6 = v3[64];
    if (v6 <= v5) {
      goto LABEL_66;
    }
LABEL_58:
    re::DynamicArray<int>::add((void *)(v3[66] + 40 * v5), v36);
    goto LABEL_59;
  }
  return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F628;
  return result;
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F628;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

void *re::DynamicArray<re::DynamicArray<unsigned int>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 40 * v4;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)(v5 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v6;
  *(void *)a2 = 0;
  *(void *)(a2 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v7;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::operator()(int a1, re::RenderGraphProcessor *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((void *)this + 49))
  {
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      unint64_t v5 = *(unsigned int *)(*((void *)this + 51) + 4 * v3);
      if (*((void *)this + 44) <= v5)
      {
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v6 = *((void *)this + 46) + 192 * v5;
      if (!*(void *)(v6 + 16)) {
        goto LABEL_8;
      }
      uint64_t v7 = *(uint64_t **)(v6 + 32);
      *(void *)&long long v10 = v5;
      re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)this + 656, v7, &v10);
      uint64_t v3 = v4;
    }
    while (*((void *)this + 49) > (unint64_t)v4++);
  }
  return re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)this, this);
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F680;
  return result;
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F680;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

uint64_t re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unsigned int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::~Callable()
{
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 432);
  if (v2)
  {
    uint64_t v4 = *(unsigned int **)(a2 + 448);
    uint64_t v5 = 4 * v2;
    while (1)
    {
      unint64_t v6 = *v4;
      uint64_t v7 = *(void *)(a2 + 296);
      unint64_t v8 = *(void *)(v7 + 16);
      if (v8 <= v6)
      {
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        *(void *)unsigned int v23 = "operator[]";
        *(_WORD *)&v23[8] = 1024;
        *(_DWORD *)&v23[10] = 789;
        __int16 v24 = 2048;
        unint64_t v25 = v6;
        __int16 v26 = 2048;
        unint64_t v27 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = *(void *)(v7 + 32);
      int v10 = *(_DWORD *)(v9 + 48 * v6);
      if (v10 != 1) {
        break;
      }
      uint64_t v18 = v9 + 48 * v6;
      unint64_t v20 = *(void *)(v18 + 8);
      uint64_t v19 = v18 + 8;
      *(void *)&long long v28 = v20 >> 1;
      *((void *)&v28 + 1) = *(void *)(v19 + 16);
      if (*(_DWORD *)re::RenderGraphCompiled::bufferDescription(a2, (uint64_t)&v28) != 2)
      {
        FirstWritteunint64_t n = re::RenderGraphCompiled::getFirstWritten(*(re::RenderGraphCompiled **)(a2 + 296), v6);
        if (FirstWritten > re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6))
        {
          re::StringID::StringID((re::StringID *)&v22, (const StringID *)v19);
          re::DynamicString::format((re::DynamicString *)"Buffer (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v28, *(void *)&v23[4]);
LABEL_20:
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v28);
          if ((void)v28)
          {
            if (BYTE8(v28)) {
              (*(void (**)(void))(*(void *)v28 + 40))();
            }
            long long v28 = 0u;
            long long v29 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v22);
        }
      }
LABEL_25:
      ++v4;
      v5 -= 4;
      if (!v5) {
        return;
      }
    }
    if (v10) {
      goto LABEL_25;
    }
    uint64_t v11 = v9 + 48 * v6;
    unint64_t v13 = *(void *)(v11 + 8);
    uint64_t v12 = v11 + 8;
    *(void *)&long long v28 = v13 >> 1;
    *((void *)&v28 + 1) = *(void *)(v12 + 16);
    long long v14 = (int *)re::RenderGraphCompiled::targetDescription(a2, (uint64_t)&v28);
    int v15 = *v14;
    if ((*v14 - 2) >= 3)
    {
      uint64_t v16 = v14;
      if (*(void *)(a2 + 352) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6))
      {
        re::StringID::StringID((re::StringID *)&v22, (const StringID *)v12);
        re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v28, *(void *)&v23[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v28);
        if ((void)v28)
        {
          if (BYTE8(v28)) {
            (*(void (**)(void))(*(void *)v28 + 40))();
          }
          long long v28 = 0u;
          long long v29 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v22);
      }
      int v15 = *v16;
    }
    if (v15 == 2) {
      goto LABEL_25;
    }
    unsigned int v17 = re::RenderGraphCompiled::getFirstWritten(*(re::RenderGraphCompiled **)(a2 + 296), v6);
    if (v17 <= re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6)) {
      goto LABEL_25;
    }
    re::StringID::StringID((re::StringID *)&v22, (const StringID *)v12);
    re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v28, *(void *)&v23[4]);
    goto LABEL_20;
  }
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F6D8;
  return result;
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, void *a2)
{
  id result = a2;
  *a2 = &unk_26E70F6D8;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

uint64_t re::RenderGraphCompiled::addError(uint64_t a1, uint64_t a2)
{
  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  uint64_t v5 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
  __n128 v2 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 576), &v4);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(__n128))(*(void *)v5 + 40))(v2);
    }
  }
  return result;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::~Callable()
{
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, re::RenderGraphCompiled *this)
{
  uint64_t v2 = *((void *)this + 37);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    do
    {
      uint64_t v7 = *(void *)(v2 + 32);
      BOOL IsExternal = re::RenderGraphCompiled::resourceIsExternal(this, v5);
      if (!*(unsigned char *)(v6 + 121) && !IsExternal)
      {
        FirstWritteunint64_t n = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)this + 37), v5);
        if (FirstWritten > re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
        {
          re::StringID::StringID((re::StringID *)v17, (const StringID *)(v7 + 48 * v4 + 8));
          re::DynamicString::format((re::DynamicString *)"Resource (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v19, v18);
          re::RenderGraphCompiled::addError((uint64_t)this, (uint64_t)&v19);
          if ((void)v19)
          {
            if (BYTE8(v19)) {
              (*(void (**)(void))(*(void *)v19 + 40))();
            }
            long long v19 = 0u;
            long long v20 = 0u;
          }
          re::StringID::destroyString((re::StringID *)v17);
        }
        int v10 = *(_DWORD *)(v7 + 48 * v4);
        if (v10 == 1)
        {
          uint64_t v14 = v7 + 48 * v4;
          unint64_t v16 = *(void *)(v14 + 8);
          uint64_t v15 = v14 + 8;
          *(void *)&long long v19 = v16 >> 1;
          *((void *)&v19 + 1) = *(void *)(v15 + 16);
          if ((*(_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)this, (uint64_t)&v19) & 0xFFFFFFFE) != 2
            && *((void *)this + 44) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
          {
            re::StringID::StringID((re::StringID *)v17, (const StringID *)v15);
            re::DynamicString::format((re::DynamicString *)"Buffer (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v19, v18);
            goto LABEL_19;
          }
        }
        else if (!v10)
        {
          uint64_t v11 = v7 + 48 * v4;
          unint64_t v13 = *(void *)(v11 + 8);
          uint64_t v12 = v11 + 8;
          *(void *)&long long v19 = v13 >> 1;
          *((void *)&v19 + 1) = *(void *)(v12 + 16);
          if ((*(_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)this, (uint64_t)&v19) & 0xFFFFFFFE) != 2
            && *((void *)this + 44) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
          {
            re::StringID::StringID((re::StringID *)v17, (const StringID *)v12);
            re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v19, v18);
LABEL_19:
            re::RenderGraphCompiled::addError((uint64_t)this, (uint64_t)&v19);
            if ((void)v19)
            {
              if (BYTE8(v19)) {
                (*(void (**)(void))(*(void *)v19 + 40))();
              }
              long long v19 = 0u;
              long long v20 = 0u;
            }
            re::StringID::destroyString((re::StringID *)v17);
          }
        }
      }
      uint64_t v2 = *((void *)this + 37);
      uint64_t v4 = ++v5;
    }
    while (*(void *)(v2 + 16) > (unint64_t)v5);
  }
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70F730;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70F730;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

void re::MarkMemorylessProcessor::~MarkMemorylessProcessor(re::MarkMemorylessProcessor *this)
{
}

re::RenderGraphCompiled *re::MarkMemorylessProcessor::process(re::MarkMemorylessProcessor *this, re::RenderGraphCompiled *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t result = (re::RenderGraphCompiled *)*((void *)a2 + 37);
  if (*((void *)result + 2))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = *((void *)result + 4);
      int v7 = *(_DWORD *)(v6 + 48 * v4);
      if (v7 == 1)
      {
        if (re::RenderGraphCompiled::firstWrittenIsValid(result, v5)
          && re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v5))
        {
          FirstWritteunint64_t n = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v5);
          int v29 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v5);
          uint64_t v30 = v6 + 48 * v4;
          *(void *)&long long v48 = *(void *)(v30 + 8) >> 1;
          *((void *)&v48 + 1) = *(void *)(v30 + 24);
          long long v31 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v48);
          if (*v31 != 2)
          {
            uint64_t v32 = *((void *)a2 + 49);
            if (v32)
            {
              unint64_t v33 = 0;
              uint64_t v34 = *((void *)a2 + 51);
              unint64_t v35 = *((void *)a2 + 44);
              while (1)
              {
                int v36 = v35 + 1;
                if (v33 < v32 - 1) {
                  int v36 = *(_DWORD *)(v34 + 4 * v33 + 4);
                }
                unint64_t v37 = *(unsigned int *)(v34 + 4 * v33);
                if (FirstWritten >= (int)v37 && v29 < v36)
                {
                  if (v35 <= v37) {
                    goto LABEL_56;
                  }
                  uint64_t v39 = *((void *)a2 + 46) + 192 * v37;
                  uint64_t v40 = *(void *)(v39 + 56);
                  if (!v40) {
                    break;
                  }
                  char v41 = 0;
                  uint64_t v42 = *(void *)(v39 + 72);
                  uint64_t v43 = (v40 << 6) - 64;
                  unint64_t v44 = (int *)(v42 + 4);
                  do
                  {
                    int v45 = *v44;
                    v44 += 16;
                    BOOL v46 = (v45 & 0xFFFFFFFE) == 4;
                    BOOL v47 = (v45 & 0xFFFFFFFE) == 4 || v43 == 0;
                    v43 -= 64;
                    v41 |= v46;
                  }
                  while (!v47);
                  if ((v41 & 1) == 0) {
                    break;
                  }
                }
                if (++v33 == v32) {
                  goto LABEL_53;
                }
              }
              v31[6] = 48;
            }
          }
        }
      }
      else if (!v7 {
             && re::RenderGraphCompiled::firstWrittenIsValid(result, v5)
      }
             && re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v5))
      {
        int v8 = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v5);
        int v9 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v5);
        uint64_t v10 = v6 + 48 * v4;
        *(void *)&long long v48 = *(void *)(v10 + 8) >> 1;
        *((void *)&v48 + 1) = *(void *)(v10 + 24);
        uint64_t v11 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v48);
        if (*v11 != 2)
        {
          uint64_t v12 = *((void *)a2 + 49);
          if (v12)
          {
            unint64_t v13 = 0;
            uint64_t v14 = *((void *)a2 + 51);
            unint64_t v15 = *((void *)a2 + 44);
            do
            {
              int v16 = v15 + 1;
              if (v13 < v12 - 1) {
                int v16 = *(_DWORD *)(v14 + 4 * v13 + 4);
              }
              unint64_t v17 = *(unsigned int *)(v14 + 4 * v13);
              if (v8 >= (int)v17 && v9 < v16)
              {
                if (v15 <= v17)
                {
                  long long v51 = 0u;
                  long long v52 = 0u;
                  long long v49 = 0u;
                  long long v50 = 0u;
                  long long v48 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_56:
                  long long v51 = 0u;
                  long long v52 = 0u;
                  long long v49 = 0u;
                  long long v50 = 0u;
                  long long v48 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                uint64_t v19 = *((void *)a2 + 46) + 192 * v17;
                uint64_t v20 = *(void *)(v19 + 56);
                if (!v20) {
                  goto LABEL_51;
                }
                char v21 = 0;
                uint64_t v22 = *(void *)(v19 + 72);
                uint64_t v23 = (v20 << 6) - 64;
                __int16 v24 = (int *)(v22 + 4);
                do
                {
                  int v25 = *v24;
                  v24 += 16;
                  BOOL v26 = (v25 & 0xFFFFFFFE) == 4;
                  BOOL v27 = (v25 & 0xFFFFFFFE) == 4 || v23 == 0;
                  v23 -= 64;
                  v21 |= v26;
                }
                while (!v27);
                if ((v21 & 1) == 0)
                {
LABEL_51:
                  v11[17] = 48;
                  break;
                }
              }
              ++v13;
            }
            while (v13 != v12);
          }
        }
      }
LABEL_53:
      uint64_t result = (re::RenderGraphCompiled *)*((void *)a2 + 37);
      uint64_t v4 = ++v5;
    }
    while (*((void *)result + 2) > (unint64_t)v5);
  }
  return result;
}

uint64_t *re::PbrConstantSource::constantNameMap(re::PbrConstantSource *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94968))
  {
    byte_26AF94A18 = 0;
    qword_26AF94A08 = (uint64_t)&unk_26E6DEA30;
    unk_26AF94A10 = "pbrConstantAllocator";
    xmmword_26AF94A48 = 0u;
    unk_26AF94A58 = 0u;
    dword_26AF94A68 = 0;
    *(_OWORD *)&qword_26AF94A20 = 0u;
    *(_OWORD *)&qword_26AF94A30 = 0u;
    dword_26AF94A40 = 0;
    unk_26AF94A6C = 0x7FFFFFFFLL;
    byte_26AF94A78 = 1;
    __cxa_atexit((void (*)(void *))re::LinearAllocator::~LinearAllocator, &qword_26AF94A08, &dword_233120000);
    __cxa_guard_release(&qword_26AF94968);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94970))
  {
    __cxa_atexit((void (*)(void *))re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::~HashBrown, &qword_26AF94988, &dword_233120000);
    __cxa_guard_release(&qword_26AF94970);
  }
  if ((_MergedGlobals_385 & 1) == 0)
  {
    qword_26AF94A20 = (uint64_t)&unk_26AF94C10;
    unk_26AF94A28 = &_MergedGlobals_386;
    qword_26AF94A30 = (uint64_t)&unk_26AF94C10;
    unk_26AF94A38 = &_MergedGlobals_386;
    re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(&qword_26AF94988, (uint64_t)&qword_26AF94A08, 16);
    uint64_t v1 = &re::s_pbrConstantMembers;
    do
    {
      uint64_t v2 = (char *)*((void *)v1 + 2);
      if (v2)
      {
        uint64_t v3 = *v2;
        if (*v2)
        {
          char v4 = v2[1];
          if (v4)
          {
            unsigned int v5 = (unsigned __int8 *)(v2 + 2);
            do
            {
              uint64_t v3 = 31 * v3 + v4;
              int v6 = *v5++;
              char v4 = v6;
            }
            while (v6);
          }
          v3 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v22 = v3;
      int v7 = *v1;
      int v8 = v1[1];
      char v9 = *((unsigned char *)v1 + 24);
      if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(&qword_26AF94988, &v22) == -1)
      {
        if (!qword_26AF949C0)
        {
        }
        if (!qword_26AF949A8 || (unint64_t v10 = qword_26AF94998, qword_26AF94998 > (unint64_t)(8 * qword_26AF949A8)))
        {
          re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize((long long *)&qword_26AF94988);
          unint64_t v10 = qword_26AF94998;
        }
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
        unint64_t v12 = v11 ^ (v11 >> 31);
        unint64_t v13 = v10 >> 4;
        unint64_t v14 = v12 % (v10 >> 4);
        unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(qword_26AF94988 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
        if (v15 >= 0x40)
        {
          do
          {
            if (v14 + 1 == v13) {
              unint64_t v14 = 0;
            }
            else {
              ++v14;
            }
            unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(qword_26AF94988 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
          }
          while (v15 > 0x3F);
        }
        uint64_t v16 = qword_26AF94988 + 16 * v14;
        int v17 = *(unsigned __int8 *)(v16 + v15);
        *(unsigned char *)(v16 + v15) = v12 & 0x7F;
        uint64_t v18 = v17 == 255;
        unint64_t v19 = v15 + 16 * v14;
        uint64_t v20 = qword_26AF94990 + 16 * v19;
        *(void *)uint64_t v20 = v22;
        *(_WORD *)(v20 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v7;
        *(unsigned char *)(v20 + re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 10) = v8;
        *(unsigned char *)(v20 + 11) = 0;
        *(unsigned char *)(v20 + 12) = v9;
        ++qword_26AF949A0;
        qword_26AF949A8 -= v18;
        re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes((uint64_t)&qword_26AF94988, qword_26AF94990 + 16 * v19);
      }
      v1 += 8;
    }
    while (v1 != (int *)re::s_pbrTextureNames);
    _MergedGlobals_385 = 1;
  }
  return &qword_26AF94988;
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::~HashBrown(uint64_t a1)
{
  return a1;
}

void *re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    void *v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        unint64_t v12 = (void *)(v3[1] + v10);
        *(void *)((char *)v12 + 6) = 0;
        void *v12 = 0;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

void *re::PbrTextureSource::textureNameMap(re::PbrTextureSource *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94978))
  {
    byte_26AF94A90 = 0;
    qword_26AF94A80 = (uint64_t)&unk_26E6DEA30;
    unk_26AF94A88 = "pbrTextureAllocator";
    dword_26AF94AE0 = 0;
    xmmword_26AF94AC0 = 0u;
    unk_26AF94AD0 = 0u;
    xmmword_26AF94A98 = 0u;
    *(_OWORD *)&qword_26AF94AA8 = 0u;
    dword_26AF94AB8 = 0;
    *(void *)algn_26AF94AE4 = 0x7FFFFFFFLL;
    byte_26AF94AF0 = 1;
    __cxa_atexit((void (*)(void *))re::LinearAllocator::~LinearAllocator, &qword_26AF94A80, &dword_233120000);
    __cxa_guard_release(&qword_26AF94978);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94980))
  {
    __cxa_atexit((void (*)(void *))re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::~HashBrown, qword_26AF949C8, &dword_233120000);
    __cxa_guard_release(&qword_26AF94980);
  }
  if ((byte_26AF94961 & 1) == 0)
  {
    *(void *)&xmmword_26AF94A98 = &unk_26AF94B00;
    *((void *)&xmmword_26AF94A98 + 1) = &unk_26AF94C10;
    qword_26AF94AA8 = (uint64_t)&unk_26AF94B00;
    unk_26AF94AB0 = &unk_26AF94C10;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(qword_26AF949C8, (uint64_t)&qword_26AF94A80, 14);
    for (uint64_t i = 0; i != 14; ++i)
    {
      uint64_t v2 = re::s_pbrTextureNames[i];
      uint64_t v3 = *v2;
      if (*v2)
      {
        char v4 = v2[1];
        if (v4)
        {
          unint64_t v5 = (unsigned __int8 *)(v2 + 2);
          do
          {
            uint64_t v3 = 31 * v3 + v4;
            int v6 = *v5++;
            char v4 = v6;
          }
          while (v6);
        }
        v3 &= ~0x8000000000000000;
      }
      uint64_t v9 = v3;
      LOBYTE(vre::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
      HIBYTE(vre::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = i;
      if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(qword_26AF949C8, &v9) == -1)re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd((_anonymous_namespace_ *)qword_26AF949C8, &v9, &v8); {
    }
      }
    byte_26AF94961 = 1;
  }
  return qword_26AF949C8;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::~HashBrown(uint64_t a1)
{
  return a1;
}

void re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize(long long *a1)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = *((void *)a1 + 7);
  long long v46 = 0u;
  v47[0] = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v47[1], 0, 32);
  updated = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(&v46, v7, v8);
  unint64_t v11 = *((void *)a1 + 2);
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    unint64_t v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      uint64_t v24 = *((void *)a1 + 1);
      if (!*((void *)&v47[2] + 1))
      {
        int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
      }
      if (!*(void *)&v47[1]
        || (unint64_t v25 = *(void *)&v47[0], *(void *)&v47[0] > (unint64_t)(8 * *(void *)&v47[1])))
      {
        re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize(&v46);
        int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
        unint64_t v25 = *(void *)&v47[0];
      }
      BOOL v26 = (uint64_t *)(v24 + 16 * v17);
      BOOL v27 = v26 + 1;
      unint64_t v28 = 0xBF58476D1CE4E5B9 * (*v26 ^ ((unint64_t)*v26 >> 30));
      unint64_t v29 = (0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31);
      unint64_t v30 = v25 >> 4;
      unint64_t v31 = v29 % (v25 >> 4);
      unint64_t v32 = v31;
      while (1)
      {
        unint64_t v33 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v46 + 16 * v32)), v14)))), (int8x8_t)0x3830282018100800)));
        if (v33 < 0x40) {
          break;
        }
        if (v32 + 1 == v30) {
          unint64_t v32 = 0;
        }
        else {
          ++v32;
        }
        if (v32 == v31)
        {
          re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          _os_crash();
          __break(1u);
          return;
        }
      }
      uint64_t v34 = v46 + 16 * v32;
      uint64_t v35 = *(unsigned __int8 *)(v34 + v33) == 255;
      *(unsigned char *)(v34 + vre::FixedArray<re::AttributeArgument>::deinit((void *)this + 33) = v29 & 0x7F;
      unint64_t v36 = v33 + 16 * v32;
      uint64_t v37 = *v26;
      __int16 v48 = *((_WORD *)v27 + 2);
      int v38 = *(_DWORD *)v27;
      uint64_t v39 = *((void *)&v46 + 1);
      uint64_t v40 = *((void *)&v46 + 1) + 16 * v36;
      *(void *)uint64_t v40 = v37;
      *(_DWORD *)(v40 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v38;
      *(unsigned char *)(v40 + 12) = v48;
      ++*((void *)&v47[0] + 1);
      *(void *)&v47[1] -= v35;
      updated = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes((uint64_t)&v46, v39 + 16 * v36);
      unint64_t v41 = v17 >> 4;
      unint64_t v11 = *((void *)a1 + 2);
      if (v17 >> 4 >= v11 >> 4) {
        break;
      }
      unint64_t v42 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v42 >= 0x40)
      {
        uint64_t v43 = 16 * v41;
        unint64_t v44 = ~v41 + (v11 >> 4);
        int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
        while (v44)
        {
          unint64_t v16 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v43 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v45 = __clz(__rbit64(v16));
          v43 += 16;
          --v44;
          if (v45 <= 0x3F)
          {
            unint64_t v17 = v45 + v43;
            goto LABEL_31;
          }
        }
        break;
      }
      unint64_t v17 = v42 + (v17 & 0xFFFFFFFFFFFFFFF0);
      int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
LABEL_31:
      ;
    }
  }
LABEL_12:
  uint64_t v18 = *((void *)&v47[2] + 1);
  *((void *)&v47[2] + 1) = *((void *)a1 + 7);
  long long v19 = v46;
  long long v20 = v47[0];
  long long v46 = *a1;
  *(void *)&v47[0] = v11;
  long long v21 = v47[1];
  long long v22 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v47[2];
  *((void *)a1 + re::FixedArray<re::TypedArgument>::deinit((void *)this + 7) = v18;
  *(_OWORD *)((char *)&v47[1] + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v22;
  long long v23 = *(long long *)((char *)a1 + 24);
  *a1 = v19;
  a1[1] = v20;
  a1[2] = v21;
  *(_OWORD *)((char *)v47 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = v23;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v46);
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = v3 ^ *(void *)(result + 40);
  unint64_t v5 = 0xBF58476D1CE4E5B9
     * ((*(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 11) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16)) ^ ((unint64_t)*(unsigned __int8 *)(a2 + 11) >> 6));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unsigned int v7 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a2 + 12)) ^ ((73244475 * *(unsigned __int8 *)(a2 + 12)) >> 16));
  uint64_t v8 = *(void *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      - 0x61C8864680B583E9
                                      + (((v7 ^ HIWORD(v7)) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6));
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40) = v4;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v8;
  return result;
}

void re::RenderGraphExecutable::execute(re::RenderGraphExecutable *this, re::RenderGraphContext *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 5018, *(void *)(*((void *)this + 17) + 392));
  unint64_t v4 = (void *)*((void *)this + 17);
  if (v4[49])
  {
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = (void *)*(unsigned int *)(v4[51] + 4 * v5);
      *((_DWORD *)a2 + 12) = v6;
      unsigned int v7 = (void *)v4[44];
      if (v7 <= v6) {
        goto LABEL_47;
      }
      uint64_t v8 = v4[46] + 192 * v6;
      if (!*(void *)(v8 + 16)) {
        goto LABEL_48;
      }
      *((void *)a2 + 5) = **(void **)(v8 + 32);
      re::RenderGraphResourceAllocationManager::startSetup(*((void *)a2 + 4));
      re::RenderGraphContext::allocateRenderTargetsBeforeSetup(a2);
      re::RenderGraphContext::checkForReadAfterWriteDependenciesWait(a2);
      uint64_t v9 = *((void *)this + 17);
      unint64_t v6 = (void *)*((unsigned int *)a2 + 12);
      unsigned int v7 = *(void **)(v9 + 352);
      if (v7 <= v6) {
        goto LABEL_49;
      }
      uint64_t v10 = *(void *)(v9 + 368) + 192 * v6;
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11) {
        break;
      }
LABEL_25:
      re::RenderGraphContext::handleManagedForceClear(a2);
      uint64_t v29 = *((void *)this + 17);
      unint64_t v6 = (void *)*((unsigned int *)a2 + 12);
      unsigned int v7 = *(void **)(v29 + 352);
      if (v7 <= v6) {
        goto LABEL_50;
      }
      uint64_t v30 = *(void *)(v29 + 368) + 192 * v6;
      uint64_t v31 = *(void *)(v30 + 16);
      if (v31)
      {
        unint64_t v32 = *(uint64_t **)(v30 + 32);
        uint64_t v33 = 8 * v31;
        do
        {
          uint64_t v34 = *v32;
          *((void *)a2 + 5) = *v32;
          if (re::RenderGraphContext::setupUsesCustomEncoders(a2)) {
            re::RenderGraphContext::releaseManagedEncoder(a2, 1);
          }
          (*(void (**)(uint64_t, re::RenderGraphContext *))(*(void *)v34 + 104))(v34, a2);
          if ((re::RenderGraphContext::setupUsesCustomEncoders(a2) & 1) == 0
            && re::RenderGraphContext::isSetupParallel(a2))
          {
            re::RenderGraphContext::releaseManagedRenderEncodersFromParallelEncoder(a2);
          }
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      if ((re::RenderGraphContext::setupUsesCustomEncoders(a2) & 1) == 0)
      {
        if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::onceToken != -1) {
          dispatch_once(&re::GraphicsFeatureFlags::mergeComputeEncoders(void)::onceToken, &__block_literal_global_6_1);
        }
        if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders && *((_DWORD *)a2 + 296) == 1) {
          re::RenderGraphResourceAllocationManager::addCompleteFence(*((re::RenderGraphResourceAllocationManager **)a2 + 4), *((re::mtl::ComputeCommandEncoder **)a2 + 150));
        }
        else {
          re::RenderGraphContext::releaseManagedEncoder(a2, 1);
        }
      }
      re::RenderGraphContext::releaseRenderTargetsAfterSetup(a2);
      ++v5;
      unint64_t v4 = (void *)*((void *)this + 17);
      if (v5 >= v4[49]) {
        goto LABEL_42;
      }
    }
    char v12 = 0;
    unint64_t v6 = *(void **)(v10 + 32);
    unsigned int v7 = &v6[v11];
    while (1)
    {
      uint64_t v13 = *v6;
      (*(void (**)(void, re::RenderGraphContext *))(*(void *)*v6 + 96))(*v6, a2);
      if ((v12 & 1) == 0)
      {
        uint64_t v14 = *((void *)this + 17);
        unsigned __int16 v15 = (void *)*((unsigned int *)a2 + 12);
        unint64_t v16 = *(void **)(v14 + 352);
        if (v16 <= v15) {
          goto LABEL_46;
        }
        uint64_t v17 = *(void *)(v14 + 368) + 192 * v15;
        *(unsigned char *)(v17 + 171) = *(unsigned char *)(v13 + 67);
        *(void *)(v17 + 176) = *(void *)(v13 + 72);
        *(unsigned char *)(v17 + 184) = *(unsigned char *)(v13 + 80);
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13);
        if (v19) {
          break;
        }
      }
LABEL_24:
      ++v6;
      char v12 = 1;
      if (v6 == v7) {
        goto LABEL_25;
      }
    }
    uint64_t v20 = v18 + (v19 << 6);
    while (1)
    {
      uint64_t v21 = *((void *)this + 17);
      long long v22 = (void *)*((unsigned int *)a2 + 12);
      unsigned __int16 v15 = *(void **)(v21 + 352);
      if (v15 <= v22) {
        break;
      }
      uint64_t v23 = *(void *)(v21 + 368) + 192 * v22;
      uint64_t v24 = *(void *)(v23 + 56);
      if (v24)
      {
        uint64_t v25 = *(void *)(v23 + 72);
        uint64_t v26 = v24 << 6;
        do
        {
          int v27 = *(_DWORD *)(v18 + 20);
          if (v27 == *(_DWORD *)(v25 + 4) && (v27 - 1) <= 2 && *(_DWORD *)(v18 + 16) == *(_DWORD *)v25) {
            *(_OWORD *)(v25 + 16) = *(_OWORD *)(v18 + 32);
          }
          v25 += 64;
          v26 -= 64;
        }
        while (v26);
      }
      v18 += 64;
      if (v18 == v20) {
        goto LABEL_24;
      }
    }
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = v22;
    __int16 v43 = 2048;
    unint64_t v44 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = v15;
    __int16 v43 = 2048;
    unint64_t v44 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = v6;
    __int16 v43 = 2048;
    unint64_t v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_48:
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = 0;
    __int16 v43 = 2048;
    unint64_t v44 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_49:
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = v6;
    __int16 v43 = 2048;
    unint64_t v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    uint64_t v36 = 0;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v37 = 136315906;
    int v38 = "operator[]";
    __int16 v39 = 1024;
    int v40 = 789;
    __int16 v41 = 2048;
    unint64_t v42 = v6;
    __int16 v43 = 2048;
    unint64_t v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_42:
  if (*((_DWORD *)a2 + 296) != 4) {
    re::RenderGraphContext::releaseManagedEncoder(a2, 1);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
}

uint64_t re::RenderGraphExecutable::validateAttachmentsPerFrame(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 136);
  uint64_t v3 = *(void *)(v2 + 392);
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = *(unsigned int **)(v2 + 408);
    unsigned int v7 = &v6[v3];
    while (1)
    {
      uint64_t v8 = *(void *)(v5 + 136);
      unint64_t v9 = *v6;
      if (*(void *)(v8 + 352) <= v9) {
        goto LABEL_11;
      }
      uint64_t v10 = *(void *)(v8 + 368);
      uint64_t v11 = v10 + 192 * v9;
      uint64_t v12 = *(void *)(v11 + 96);
      if (v12) {
        break;
      }
LABEL_8:
      if (++v6 == v7) {
        return result;
      }
    }
    uint64_t v13 = *(void **)(v11 + 112);
    uint64_t v14 = v10 + 192 * v9;
    uint64_t v15 = 8 * v12;
    while (*(void *)(v14 + 16) > *v13)
    {
      uint64_t v16 = *(void *)(*(void *)(v14 + 32) + 8 * *v13);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 112))(v16, v5, a2);
      ++v13;
      v15 -= 8;
      if (!v15) {
        goto LABEL_8;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

unint64_t re::RenderGraphExecutable::calculateResourcePropertiesHash(re::RenderGraphExecutable *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = (unsigned int *)(*((void *)this + 2) + 44);
    unint64_t v3 = 31;
    do
    {
      unint64_t v4 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 11) ^ ((unint64_t)(int)*(v2 - 11) >> 30));
      unint64_t v5 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 10) ^ ((unint64_t)(int)*(v2 - 10) >> 30));
      unint64_t v6 = ((v3 << 6)
          - 0x61C8864680B583E9
          + (v3 >> 2)
          + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))) ^ v3;
      unint64_t v7 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
         - 0x61C8864680B583E9
         + (v6 << 6);
      unint64_t v8 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 9) ^ ((unint64_t)(int)*(v2 - 9) >> 30));
      unint64_t v9 = (v7 + (v6 >> 2)) ^ v6;
      unint64_t v10 = ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v9 << 6)
          + (v9 >> 2);
      unint64_t v11 = 0xBF58476D1CE4E5B9 * (*(v2 - 8) ^ ((unint64_t)*(v2 - 8) >> 30));
      unint64_t v12 = v10 ^ v9;
      unint64_t v13 = ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v12 << 6);
      unint64_t v14 = 0xBF58476D1CE4E5B9 * (*(v2 - 7) ^ ((unint64_t)*(v2 - 7) >> 30));
      unint64_t v15 = (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v13 + (v12 >> 2)) ^ v12) << 6)
           + (((v13 + (v12 >> 2)) ^ v12) >> 2)) ^ (v13 + (v12 >> 2)) ^ v12;
      unint64_t v16 = 0xBF58476D1CE4E5B9 * (*(v2 - 6) ^ ((unint64_t)*(v2 - 6) >> 30));
      unint64_t v17 = 0xBF58476D1CE4E5B9 * (*(v2 - 5) ^ ((unint64_t)*(v2 - 5) >> 30));
      unint64_t v18 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v15 << 6)
           + (v15 >> 2)) ^ v15;
      unint64_t v19 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v18 << 6)
          + (v18 >> 2);
      unint64_t v20 = 0xBF58476D1CE4E5B9 * (*(v2 - 4) ^ ((unint64_t)*(v2 - 4) >> 30));
      unint64_t v21 = (((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + ((v19 ^ v18) << 6)
           + ((v19 ^ v18) >> 2)) ^ v19 ^ v18;
      unint64_t v22 = 0xBF58476D1CE4E5B9 * (*(v2 - 3) ^ ((unint64_t)*(v2 - 3) >> 30));
      unint64_t v23 = 0xBF58476D1CE4E5B9 * (*(v2 - 1) ^ ((unint64_t)*(v2 - 1) >> 30));
      unint64_t v24 = (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v21 << 6)
           + (v21 >> 2)) ^ v21;
      unint64_t v25 = ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v24 << 6);
      unint64_t v26 = 0xBF58476D1CE4E5B9 * (*v2 ^ ((unint64_t)*v2 >> 30));
      unint64_t v27 = (((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v25 + (v24 >> 2)) ^ v24) << 6)
           + (((v25 + (v24 >> 2)) ^ v24) >> 2)) ^ (v25 + (v24 >> 2)) ^ v24;
      unint64_t v28 = 0xBF58476D1CE4E5B9 * ((int)v2[1] ^ ((unint64_t)(int)v2[1] >> 30));
      unint64_t v29 = 0xBF58476D1CE4E5B9 * ((int)v2[2] ^ ((unint64_t)(int)v2[2] >> 30));
      unint64_t v30 = (((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v27 << 6)
           + (v27 >> 2)) ^ v27;
      unint64_t v31 = ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) ^ ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v30 << 6);
      unint64_t v32 = 0xBF58476D1CE4E5B9 * (v2[5] ^ ((unint64_t)v2[5] >> 30));
      unint64_t v33 = (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v31 + (v30 >> 2)) ^ v30) << 6)
           + (((v31 + (v30 >> 2)) ^ v30) >> 2)) ^ (v31 + (v30 >> 2)) ^ v30;
      unint64_t v34 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((int)v2[6] ^ ((unint64_t)(int)v2[6] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((int)v2[6] ^ ((unint64_t)(int)v2[6] >> 30))) >> 27));
      unint64_t v35 = 0xBF58476D1CE4E5B9 * (*(void *)(v2 + 11) ^ (*(void *)(v2 + 11) >> 30));
      unint64_t v36 = ((v34 ^ (v34 >> 31)) - 0x61C8864680B583E9 + (v33 << 6) + (v33 >> 2)) ^ v33;
      unint64_t v37 = ((0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) ^ ((0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v36 << 6)
          + (v36 >> 2);
      if ((v2[6] & 0x70) == 0x30) {
        unint64_t v38 = 0xBF58476D1CE4E5B9;
      }
      else {
        unint64_t v38 = 0;
      }
      unint64_t v3 = (((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + ((v37 ^ v36) << 6)
          + ((v37 ^ v36) >> 2)) ^ v37 ^ v36;
      v2 += 28;
      --v1;
    }
    while (v1);
  }
  else
  {
    unint64_t v3 = 31;
  }
  uint64_t v39 = *((void *)this + 4);
  if (v39)
  {
    int v40 = (unsigned int *)(*((void *)this + 5) + 20);
    do
    {
      unint64_t v41 = 0xBF58476D1CE4E5B9 * ((int)*(v40 - 5) ^ ((unint64_t)(int)*(v40 - 5) >> 30));
      unint64_t v42 = ((v3 << 6)
           - 0x61C8864680B583E9
           + (v3 >> 2)
           + ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) ^ ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) >> 31))) ^ v3;
      unint64_t v43 = 0xBF58476D1CE4E5B9 * (*(void *)(v40 - 3) ^ (*(void *)(v40 - 3) >> 30));
      unint64_t v44 = (((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v42 << 6)
           + (v42 >> 2)) ^ v42;
      unint64_t v45 = 0xBF58476D1CE4E5B9 * (*v40 ^ ((unint64_t)*v40 >> 30));
      unint64_t v46 = (((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) ^ ((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v44 << 6)
           + (v44 >> 2)) ^ v44;
      unint64_t v47 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((int)v40[1] ^ ((unint64_t)(int)v40[1] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((int)v40[1] ^ ((unint64_t)(int)v40[1] >> 30))) >> 27));
      unint64_t v48 = ((v47 ^ (v47 >> 31)) - 0x61C8864680B583E9 + (v46 << 6) + (v46 >> 2)) ^ v46;
      unint64_t v49 = 0xBF58476D1CE4E5B9 * (*(void *)(v40 + 3) ^ (*(void *)(v40 + 3) >> 30));
      unint64_t v50 = (((0x94D049BB133111EBLL * (v49 ^ (v49 >> 27))) ^ ((0x94D049BB133111EBLL * (v49 ^ (v49 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v48 << 6)
           + (v48 >> 2)) ^ v48;
      if ((v40[1] & 0x70) == 0x30) {
        unint64_t v51 = 0xBF58476D1CE4E5B9;
      }
      else {
        unint64_t v51 = 0;
      }
      unint64_t v3 = (((0x94D049BB133111EBLL * (v51 ^ (v51 >> 27))) ^ ((0x94D049BB133111EBLL * (v51 ^ (v51 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v50 << 6)
          + (v50 >> 2)) ^ v50;
      v40 += 12;
      --v39;
    }
    while (v39);
  }
  return v3;
}

void re::RenderLayer::invalidate(re::RenderLayer *this)
{
  uint64_t v2 = *(void **)this;
  *(void *)this = 0;

  if (*((unsigned char *)this + 8)) {
    *((unsigned char *)this + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
  }
  if (*((unsigned char *)this + 20)) {
    *((unsigned char *)this + 20) = 0;
  }
}

re::RenderGraphNodeCombineProcessor *re::RenderGraphNodeCombineProcessor::RenderGraphNodeCombineProcessor(re::RenderGraphNodeCombineProcessor *this, const char *a2)
{
  *(void *)this = &unk_26E70F7D8;
  *((unsigned char *)this + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  re::RenderGraphEncoderSplitLogBuffer::RenderGraphEncoderSplitLogBuffer((re::RenderGraphNodeCombineProcessor *)((char *)this + 32), a2);
  re::Defaults::intValue((re::Defaults *)"encoderSplitLoggingPerFrame", v3, (uint64_t)v12);
  if (v12[0]) {
    BOOL v6 = v13 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    re::Defaults::intValue((re::Defaults *)"encoderSplitLoggingOnChange", v5, (uint64_t)v12);
    if (v12[0] && v13)
    {
      *((unsigned char *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = 1;
      unint64_t v9 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v12 = 0;
        unint64_t v8 = "Encoder Split: Logging OnChange.";
LABEL_14:
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, v8, v12, 2u);
      }
    }
    else
    {
      *((unsigned char *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = 0;
      unint64_t v9 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v12 = 0;
        unint64_t v8 = "Encoder Split: Logging Disabled.";
        goto LABEL_14;
      }
    }
  }
  else
  {
    *((unsigned char *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80) = 2;
    unint64_t v9 = *re::graphicsLogObjects(v4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v12 = 0;
      unint64_t v8 = "Encoder Split: Logging PerFrame.";
      goto LABEL_14;
    }
  }
  return this;
}

uint64_t re::RenderGraphNodeCombineProcessor::process(re::RenderGraphNodeCombineProcessor *this, re::RenderGraphCompiled *a2)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  memset(v105, 0, sizeof(v105));
  int v106 = 0;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  int v109 = 0;
  int v112 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  int v115 = 0;
  memset(v116, 0, sizeof(v116));
  uint64_t v117 = 0x7FFFFFFFLL;
  if (!*((void *)a2 + 49)) {
    goto LABEL_30;
  }
  if (*((unsigned char *)this + 80))
  {
    *((unsigned char *)this + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 1;
    re::RenderGraphEncoderSplitLogBuffer::clear((uint64_t)this + 32);
    if (!*((void *)a2 + 49)) {
      goto LABEL_228;
    }
  }
  unint64_t v5 = **((unsigned int **)a2 + 51);
  BOOL v6 = (unsigned int *)*((void *)a2 + 44);
  if ((unint64_t)v6 <= v5) {
    goto LABEL_220;
  }
  uint64_t v7 = *((void *)a2 + 46) + 192 * v5;
  unint64_t v104 = 0;
  v101[1] = 0;
  uint64_t v102 = 0;
  v101[0] = 0;
  int v103 = 0;
  if (!*(void *)(v7 + 16))
  {
LABEL_221:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_222:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_223:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_224;
  }
  if ((*(uint64_t (**)(void))(***(void ***)(v7 + 32) + 16))(**(void **)(v7 + 32)))
  {
    if (!*(void *)(v7 + 16))
    {
LABEL_229:
      v127[0] = 0;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v130 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v135 = 136315906;
      *(void *)&v135[4] = "operator[]";
      *(_WORD *)&v135[12] = 1024;
      *(_DWORD *)&v135[14] = 789;
      *(_WORD *)&v135[18] = 2048;
      *(void *)&v135[20] = 0;
      *(_WORD *)&v135[28] = 2048;
      *(void *)&v135[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_230;
    }
    *(void *)&long long v130 = (*(uint64_t (**)(void))(***(void ***)(v7 + 32) + 16))(**(void **)(v7 + 32));
    re::DynamicArray<re::TransitionCondition *>::add(v101, &v130);
  }
  unint64_t v100 = 0;
  v97[1] = 0;
  uint64_t v98 = 0;
  v97[0] = 0;
  int v99 = 0;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_222;
  }
  if ((*(uint64_t (**)(void))(***(void ***)(v7 + 32) + 24))(**(void **)(v7 + 32)))
  {
    if (!*(void *)(v7 + 16))
    {
LABEL_230:
      v127[0] = 0;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v130 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v135 = 136315906;
      *(void *)&v135[4] = "operator[]";
      *(_WORD *)&v135[12] = 1024;
      *(_DWORD *)&v135[14] = 789;
      *(_WORD *)&v135[18] = 2048;
      *(void *)&v135[20] = 0;
      *(_WORD *)&v135[28] = 2048;
      *(void *)&v135[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_231:
      re::internal::assertLog((re::internal *)5, v10, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType %d.", "!\"Unreachable code\"", "operator()", 131, v24);
      _os_crash();
      __break(1u);
LABEL_232:
      re::internal::assertLog((re::internal *)5, v10, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType %d.", "!\"Unreachable code\"", "operator()", 306, v35);
      _os_crash();
      __break(1u);
    }
    *(void *)&long long v130 = (*(uint64_t (**)(void))(***(void ***)(v7 + 32) + 24))(**(void **)(v7 + 32));
    re::DynamicArray<re::TransitionCondition *>::add(v97, &v130);
  }
  if (!*((void *)a2 + 49)) {
    goto LABEL_223;
  }
  re::DynamicArray<int>::add(v105, *((_DWORD **)a2 + 51));
  if (!*((void *)a2 + 59))
  {
LABEL_224:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_225;
  }
  re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v110 + 8), *((uint64_t **)a2 + 61));
  if (!*((void *)a2 + 64))
  {
LABEL_225:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_226;
  }
  re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v113 + 8), *((uint64_t **)a2 + 66));
  if (!*(void *)(v7 + 16))
  {
LABEL_226:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_227;
  }
  if (!*((void *)a2 + 49))
  {
LABEL_227:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_228:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = 0;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_229;
  }
  uint64_t v80 = this;
  unint64_t v8 = (char *)a2 + 656;
  unint64_t v9 = *(uint64_t **)(v7 + 32);
  *(void *)&long long v130 = **((unsigned int **)a2 + 51);
  re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)a2 + 656, v9, &v130);
  unint64_t v5 = *((void *)a2 + 49);
  if (v5 == 1) {
    goto LABEL_19;
  }
  unsigned int v84 = 0;
  LODWORD(v1re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
LABEL_39:
  unint64_t v18 = (v18 + 1);
  if (v5 <= v18)
  {
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v18;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    v127[0] = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v130 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v2;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_207;
  }
  unint64_t v2 = *(unsigned int *)(*((void *)a2 + 51) + 4 * v18);
  unint64_t v5 = *((void *)a2 + 44);
  if (v5 <= v2) {
    goto LABEL_206;
  }
  uint64_t v19 = *((void *)a2 + 46);
  uint64_t v20 = v19 + 192 * v2;
  unint64_t v121 = 0;
  v118[1] = 0;
  uint64_t v119 = 0;
  v118[0] = 0;
  int v120 = 0;
  uint64_t v96 = v20;
  if (*(unsigned __int8 *)(v20 + 169) | *(unsigned __int8 *)(v7 + 169))
  {
    re::RenderGraphEncoderSplitLogManager::logEntry((uint64_t)v80 + 8, 8uLL, (uint64_t)a2, v7, v20, 0, 0);
    goto LABEL_142;
  }
  uint64_t v87 = v19;
  LODWORD(v132) = 0;
  long long v130 = 0u;
  long long v131 = 0u;
  *(void *)((char *)&v132 + 4) = 0x7FFFFFFFLL;
  memset(v135, 0, 36);
  *(void *)&v135[36] = 0x7FFFFFFFLL;
  int v128 = 0;
  memset(v127, 0, sizeof(v127));
  uint64_t v129 = 0x7FFFFFFFLL;
  int v125 = 0;
  memset(v124, 0, sizeof(v124));
  uint64_t v126 = 0x7FFFFFFFLL;
  uint64_t v21 = *(void *)(v7 + 56);
  if (v21)
  {
    unint64_t v5 = 0;
    int v22 = 0;
    int v95 = 0;
    unint64_t v90 = 0;
    int v91 = 0;
    char v93 = 0;
    size_t v94 = 0;
    unint64_t v23 = *(unsigned int **)(v7 + 72);
    BOOL v6 = (unsigned int *)(v21 << 6);
    uint64_t v92 = 0xFFFFFFFFLL;
    while (2)
    {
      uint64_t v24 = v23[1];
      switch((int)v24)
      {
        case 0:
        case 10:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v124, (uint64_t *)&v123, &v122);
          goto LABEL_56;
        case 1:
          unint64_t v123 = (unsigned int *)*v23;
          uint64_t v122 = v23;
          unint64_t v25 = &v130;
          goto LABEL_52;
        case 2:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          unint64_t v5 = 1;
          size_t v94 = v23;
          goto LABEL_56;
        case 3:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          unint64_t v5 = 1;
          char v93 = v23;
          goto LABEL_56;
        case 4:
        case 11:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v124, (uint64_t *)&v123, &v122);
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          int v95 = 1;
          goto LABEL_56;
        case 5:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v124, (uint64_t *)&v123, &v122);
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          int v22 = 1;
          goto LABEL_56;
        case 6:
          unint64_t v123 = (unsigned int *)*v23;
          uint64_t v122 = v23;
          unint64_t v25 = (long long *)v135;
LABEL_52:
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v25, (uint64_t *)&v123, &v122);
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          unint64_t v5 = 1;
          goto LABEL_56;
        case 7:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          unint64_t v5 = 1;
          int v91 = v23;
          goto LABEL_56;
        case 8:
          unint64_t v123 = (unsigned int *)v23[13];
          uint64_t v122 = v23;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v127, (uint64_t *)&v123, &v122);
          unint64_t v5 = 1;
          unint64_t v90 = v23;
          goto LABEL_56;
        case 9:
          uint64_t v92 = v23[13];
LABEL_56:
          v23 += 16;
          v6 -= 16;
          if (!v6) {
            goto LABEL_60;
          }
          continue;
        default:
          goto LABEL_231;
      }
    }
  }
  char v93 = 0;
  size_t v94 = 0;
  unint64_t v90 = 0;
  int v91 = 0;
  int v95 = 0;
  int v22 = 0;
  unint64_t v5 = 0;
  uint64_t v92 = 0xFFFFFFFFLL;
LABEL_60:
  int v88 = v22;
  uint64_t v83 = v7;
  uint64_t v27 = v87 + 192 * v2;
  uint64_t v29 = *(void *)(v27 + 56);
  unint64_t v28 = (void *)(v27 + 56);
  unint64_t v81 = v2;
  if (!v29)
  {
    unint64_t v2 = 0;
    int v89 = 0;
    uint64_t v86 = 0;
    char v85 = 0;
    int v82 = 0;
LABEL_111:
    unint64_t v8 = (char *)a2 + 656;
    uint64_t v7 = v83;
    if ((v5 | v88 | v95) & 1) != 0 && ((v2 | HIDWORD(v86) | v89))
    {
      if ((v5 & v88 & v95 & 1) != 0
        || (v2 & HIDWORD(v86) & v89 & 1) != 0
        || ((v5 ^ v2) & 1) != 0
        || ((v88 ^ HIDWORD(v86)) & 1) != 0
        || ((v95 ^ v89) & 1) != 0)
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 13;
        goto LABEL_128;
      }
      if (!((v94 == 0) | v86 & 1))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 9;
        goto LABEL_128;
      }
      if (!((v93 == 0) | v85 & 1))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 10;
        goto LABEL_128;
      }
      if (*(void *)(v83 + 160) != *(void *)(v87 + 192 * v81 + 160))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 14;
        goto LABEL_128;
      }
      if ((((v92 == 0xFFFFFFFFLL) ^ v82) & 1) == 0)
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 12;
        goto LABEL_128;
      }
      if (!((*(void *)(v83 + 176) == *(void *)(v87 + 192 * v81 + 176)) | v88 & 1))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 5;
        goto LABEL_128;
      }
      if (*(unsigned char *)(v83 + 184)
        && *(unsigned char *)(v87 + 192 * v81 + 184)
        && *(unsigned __int8 *)(v83 + 184) != *(unsigned __int8 *)(v87 + 192 * v81 + 184))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 6;
LABEL_128:
        re::RenderGraphEncoderSplitLogManager::logEntry(v50, v51, (uint64_t)a2, v83, v96, 0, 0);
        goto LABEL_141;
      }
      if (*(unsigned __int8 *)(v83 + 171) != *(unsigned __int8 *)(v87 + 192 * v81 + 171))
      {
        uint64_t v50 = (uint64_t)v80 + 8;
        unint64_t v51 = 7;
        goto LABEL_128;
      }
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v124);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v127);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v135);
    v26.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v130);
    uint64_t v71 = *(void *)(v96 + 16);
    if (v71)
    {
      BOOL v6 = *(unsigned int **)(v96 + 32);
      uint64_t v72 = &v6[2 * v71];
      unint64_t v5 = v83 + 120;
      do
      {
        *(void *)&long long v130 = *(void *)v6;
        if ((*(uint64_t (**)(void, __n128))(*(void *)v130 + 16))(v130, v26))
        {
          uint64_t v73 = (*(uint64_t (**)(void))(*(void *)v130 + 16))(v130);
          if (v102)
          {
            uint64_t v74 = 8 * v102;
            int v75 = v104;
            while (*v75 != v73)
            {
              ++v75;
              v74 -= 8;
              if (!v74)
              {
                int v75 = &v104[v102];
                break;
              }
            }
          }
          else
          {
            int v75 = v104;
          }
          if (v102 == v75 - v104)
          {
            *(void *)long long v135 = *(void *)(v83 + 16);
            re::DynamicArray<unsigned long>::add((void *)(v83 + 80), v135);
            *(void *)long long v135 = (*(uint64_t (**)(void))(*(void *)v130 + 16))(v130);
            re::DynamicArray<re::TransitionCondition *>::add(v101, v135);
          }
        }
        if ((*(uint64_t (**)(void))(*(void *)v130 + 24))(v130))
        {
          uint64_t v76 = (*(uint64_t (**)(void))(*(void *)v130 + 24))(v130);
          if (v98)
          {
            uint64_t v77 = 8 * v98;
            id v78 = v100;
            while (*v78 != v76)
            {
              ++v78;
              v77 -= 8;
              if (!v77)
              {
                id v78 = &v100[v98];
                break;
              }
            }
          }
          else
          {
            id v78 = v100;
          }
          if (v98 == v78 - v100)
          {
            *(void *)long long v135 = *(void *)(v83 + 16);
            re::DynamicArray<unsigned long>::add((void *)(v83 + 120), v135);
            *(void *)long long v135 = (*(uint64_t (**)(void))(*(void *)v130 + 24))(v130);
            re::DynamicArray<re::TransitionCondition *>::add(v97, v135);
          }
        }
        re::DynamicArray<re::TransitionCondition *>::add((void *)v83, &v130);
        v6 += 2;
      }
      while (v6 != v72);
    }
    unint64_t v2 = v81;
    if (v119)
    {
      unint64_t v5 = v121;
      BOOL v6 = (unsigned int *)(8 * v119);
      do
      {
        uint64_t v79 = *(void *)v5;
        v5 += 8;
        __n128 v26 = re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(v83 + 40), v79);
        v6 -= 2;
      }
      while (v6);
    }
    *(unsigned char *)(v83 + 170) = (*(unsigned __int8 *)(v87 + 192 * v81 + 170) | *(unsigned __int8 *)(v83 + 170)) != 0;
    int v58 = 1;
    goto LABEL_143;
  }
  unsigned int v30 = v2;
  uint64_t v31 = 0;
  int v82 = 0;
  char v85 = 0;
  uint64_t v86 = 0;
  int v89 = 0;
  unint64_t v2 = 0;
  unint64_t v32 = (uint64_t *)(v87 + 192 * v30 + 72);
  unsigned int v33 = 1;
  while (1)
  {
    uint64_t v34 = *v32;
    BOOL v6 = (unsigned int *)(*v32 + (v31 << 6));
    uint64_t v35 = v6[1];
    switch((int)v35)
    {
      case 0:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E38, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF94E38))
        {
          re::Defaults::BOOLValue((re::Defaults *)"disableComputeReadAfterWrite", v48, (char *)&v123);
          if ((_BYTE)v123) {
            char v49 = BYTE1(v123);
          }
          else {
            char v49 = 0;
          }
          _MergedGlobals_386 = v49;
          __cxa_guard_release(&qword_26AF94E38);
        }
        uint64_t v36 = v34 + (v31 << 6);
        unint64_t v37 = *(unsigned int *)(v36 + 52);
        if ((v88 & (_MergedGlobals_386 == 0)) != 0
          || !re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v127, *(unsigned int *)(v36 + 52)))
        {
          unint64_t v38 = v37;
LABEL_101:
          if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v124, v38))
          {
            unint64_t v123 = v6;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v118, &v123);
          }
          goto LABEL_103;
        }
        uint64_t v52 = (uint64_t)v80 + 8;
        unint64_t v53 = 11;
LABEL_138:
        uint64_t v54 = a2;
        uint64_t v7 = v83;
        uint64_t v55 = v83;
        uint64_t v56 = v96;
        unint64_t v41 = 0;
LABEL_139:
        unint64_t v57 = v6;
LABEL_140:
        re::RenderGraphEncoderSplitLogManager::logEntry(v52, v53, (uint64_t)v54, v55, v56, v41, v57);
        unint64_t v8 = (char *)a2 + 656;
LABEL_141:
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v124);
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v127);
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v135);
        v26.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v130);
LABEL_142:
        int v58 = 0;
LABEL_143:
        if (v118[0] && v121) {
          (*(void (**)(__n128))(*(void *)v118[0] + 40))(v26);
        }
        if (v58)
        {
          unint64_t v5 = *((void *)a2 + 59);
          if (v5 > v18)
          {
            uint64_t v59 = *((void *)a2 + 61) + 40 * v18;
            uint64_t v60 = *(void *)(v59 + 16);
            if (v60)
            {
              unsigned __int8 v61 = *(int **)(v59 + 32);
              uint64_t v62 = 4 * v60;
              do
              {
                LODWORD(v130) = 0;
                int v63 = *v61++;
                LODWORD(v130) = v63;
                re::DynamicArray<int>::add((void *)(v113 + 40 * *((void *)&v111 + 1) - 40), &v130);
                v62 -= 4;
              }
              while (v62);
            }
            unint64_t v5 = *((void *)a2 + 64);
            if (v5 > v18)
            {
              uint64_t v64 = *((void *)a2 + 66) + 40 * v18;
              uint64_t v65 = *(void *)(v64 + 16);
              if (v65)
              {
                uint64_t v66 = *(int **)(v64 + 32);
                unint64_t v5 = 4 * v65;
                do
                {
                  LODWORD(v130) = 0;
                  int v67 = *v66++;
                  LODWORD(v130) = v67;
                  re::DynamicArray<int>::add((void *)(*(void *)v116 + 40 * *((void *)&v114 + 1) - 40), &v130);
                  v5 -= 4;
                }
                while (v5);
              }
              if (*(void *)(v96 + 16))
              {
                unint64_t v5 = v84;
                BOOL v6 = (unsigned int *)*((void *)a2 + 49);
                if ((unint64_t)v6 > v84)
                {
                  char v68 = *(uint64_t **)(v96 + 32);
                  int v69 = *(_DWORD *)(v7 + 16) - 1;
                  LODWORD(v130) = *(_DWORD *)(*((void *)a2 + 51) + 4 * v84);
                  DWORD1(v130) = v69;
                  re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)v8, v68, &v130);
                  goto LABEL_172;
                }
LABEL_212:
                v127[0] = 0;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v130 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)long long v135 = 136315906;
                *(void *)&v135[4] = "operator[]";
                *(_WORD *)&v135[12] = 1024;
                *(_DWORD *)&v135[14] = 789;
                *(_WORD *)&v135[18] = 2048;
                *(void *)&v135[20] = v5;
                *(_WORD *)&v135[28] = 2048;
                *(void *)&v135[30] = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_213:
                v127[0] = 0;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v130 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)long long v135 = 136315906;
                *(void *)&v135[4] = "operator[]";
                *(_WORD *)&v135[12] = 1024;
                *(_DWORD *)&v135[14] = 789;
                *(_WORD *)&v135[18] = 2048;
                *(void *)&v135[20] = v18;
                *(_WORD *)&v135[28] = 2048;
                *(void *)&v135[30] = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_214;
              }
LABEL_211:
              v127[0] = 0;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v130 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v135 = 136315906;
              *(void *)&v135[4] = "operator[]";
              *(_WORD *)&v135[12] = 1024;
              *(_DWORD *)&v135[14] = 789;
              *(_WORD *)&v135[18] = 2048;
              *(void *)&v135[20] = 0;
              *(_WORD *)&v135[28] = 2048;
              *(void *)&v135[30] = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_212;
            }
LABEL_209:
            v127[0] = 0;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v130 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v135 = 136315906;
            *(void *)&v135[4] = "operator[]";
            *(_WORD *)&v135[12] = 1024;
            *(_DWORD *)&v135[14] = 789;
            *(_WORD *)&v135[18] = 2048;
            *(void *)&v135[20] = v18;
            *(_WORD *)&v135[28] = 2048;
            *(void *)&v135[30] = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_210:
            v127[0] = 0;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v130 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v135 = 136315906;
            *(void *)&v135[4] = "operator[]";
            *(_WORD *)&v135[12] = 1024;
            *(_DWORD *)&v135[14] = 789;
            *(_WORD *)&v135[18] = 2048;
            *(void *)&v135[20] = 0;
            *(_WORD *)&v135[28] = 2048;
            *(void *)&v135[30] = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_211;
          }
LABEL_207:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = v18;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_208:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = 0;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_209;
        }
        uint64_t v102 = 0;
        ++v103;
        uint64_t v7 = v96;
        if (!*(void *)(v96 + 16)) {
          goto LABEL_208;
        }
        if ((*(uint64_t (**)(void, __n128))(***(void ***)(v96 + 32) + 16))(**(void **)(v96 + 32), v26))
        {
          if (*(void *)(v96 + 16))
          {
            *(void *)&long long v130 = (*(uint64_t (**)(void))(***(void ***)(v96 + 32) + 16))(**(void **)(v96 + 32));
            re::DynamicArray<re::TransitionCondition *>::add(v101, &v130);
            goto LABEL_162;
          }
LABEL_218:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = 0;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_219:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = 0;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_220:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = v5;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_221;
        }
LABEL_162:
        uint64_t v98 = 0;
        ++v99;
        if (!*(void *)(v96 + 16)) {
          goto LABEL_210;
        }
        if ((*(uint64_t (**)(void))(***(void ***)(v96 + 32) + 24))(**(void **)(v96 + 32)))
        {
          if (!*(void *)(v96 + 16)) {
            goto LABEL_219;
          }
          *(void *)&long long v130 = (*(uint64_t (**)(void))(***(void ***)(v96 + 32) + 24))(**(void **)(v96 + 32));
          re::DynamicArray<re::TransitionCondition *>::add(v97, &v130);
        }
        unint64_t v5 = *((void *)a2 + 49);
        if (v5 <= v18) {
          goto LABEL_213;
        }
        re::DynamicArray<int>::add(v105, (_DWORD *)(*((void *)a2 + 51) + 4 * v18));
        unint64_t v5 = *((void *)a2 + 59);
        if (v5 <= v18)
        {
LABEL_214:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = v18;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_215:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = v18;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_216:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = 0;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_217:
          v127[0] = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v135 = 136315906;
          *(void *)&v135[4] = "operator[]";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = 789;
          *(_WORD *)&v135[18] = 2048;
          *(void *)&v135[20] = v18;
          *(_WORD *)&v135[28] = 2048;
          *(void *)&v135[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_218;
        }
        re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v110 + 8), (uint64_t *)(*((void *)a2 + 61) + 40 * v18));
        unint64_t v5 = *((void *)a2 + 64);
        if (v5 <= v18) {
          goto LABEL_215;
        }
        re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v113 + 8), (uint64_t *)(*((void *)a2 + 66) + 40 * v18));
        if (!*(void *)(v96 + 16)) {
          goto LABEL_216;
        }
        unint64_t v5 = *((void *)a2 + 49);
        if (v5 <= v18) {
          goto LABEL_217;
        }
        uint64_t v70 = *(uint64_t **)(v96 + 32);
        *(void *)&long long v130 = *(unsigned int *)(*((void *)a2 + 51) + 4 * v18);
        re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)v8, v70, &v130);
        unsigned int v84 = v18;
LABEL_172:
        unint64_t v5 = *((void *)a2 + 49);
        if (v5 - 1 > v18) {
          goto LABEL_39;
        }
LABEL_19:
        uint64_t v11 = *((void *)a2 + 54);
        if (v11)
        {
          unint64_t v12 = (int *)*((void *)a2 + 56);
          uint64_t v13 = 4 * v11;
          do
          {
            int v14 = *v12++;
            LODWORD(v130) = v14;
            re::DynamicArray<int>::add((void *)&v107 + 1, &v130);
            v13 -= 4;
          }
          while (v13);
        }
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2 + 376, (uint64_t)v105);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 456, (uint64_t)&v110 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 496, (uint64_t)&v113 + 8);
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2 + 416, (uint64_t)&v107 + 8);
        re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v15);
        int v16 = *((unsigned __int8 *)v80 + 80);
        if (*((unsigned char *)v80 + 80))
        {
          *((unsigned char *)v80 + re::FunctionBase<24ul,void ()(re::RenderGraphCompiled &)>::destroyCallable((uint64_t)this + 8) = 0;
          re::RenderGraphEncoderSplitLogManager::save((re::RenderGraphNodeCombineProcessor *)((char *)v80 + 8), v16 == 2);
        }
        if (v97[0] && v100) {
          (*(void (**)(void))(*(void *)v97[0] + 40))();
        }
        if (v101[0] && v104) {
          (*(void (**)(void))(*(void *)v101[0] + 40))();
        }
LABEL_30:
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v116[8]);
        re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v113 + 8);
        re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v110 + 8);
        if (*((void *)&v107 + 1))
        {
          if ((void)v110) {
            (*(void (**)(void))(**((void **)&v107 + 1) + 40))();
          }
          *(void *)&long long v110 = 0;
          long long v108 = 0uLL;
          *((void *)&v107 + 1) = 0;
          ++v109;
        }
        uint64_t result = v105[0];
        if (v105[0])
        {
          if ((void)v107) {
            return (*(uint64_t (**)(void))(*(void *)v105[0] + 40))();
          }
        }
        return result;
      case 1:
        if (*(unsigned char *)(v34 + (v31 << 6) + 32)) {
          goto LABEL_130;
        }
        unint64_t v39 = *v6;
        int v40 = &v130;
        goto LABEL_83;
      case 2:
        unint64_t v41 = v94;
        if (!v94) {
          goto LABEL_131;
        }
        uint64_t v42 = v34 + (v31 << 6);
        if (v94[13] != *(_DWORD *)(v42 + 52)) {
          goto LABEL_129;
        }
        goto LABEL_90;
      case 3:
        unint64_t v41 = v93;
        if (!v93) {
          goto LABEL_131;
        }
        uint64_t v43 = v34 + (v31 << 6);
        if (v93[13] != *(_DWORD *)(v43 + 52)) {
          goto LABEL_129;
        }
        goto LABEL_96;
      case 4:
      case 11:
        if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v124, *(unsigned int *)(v34 + (v31 << 6) + 52)))
        {
          unint64_t v123 = v6;
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v118, &v123);
        }
        int v89 = 1;
        goto LABEL_103;
      case 5:
        if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v124, *(unsigned int *)(v34 + (v31 << 6) + 52)))
        {
          unint64_t v123 = v6;
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v118, &v123);
        }
        HIDWORD(v86) = 1;
        goto LABEL_103;
      case 6:
        if (*(unsigned char *)(v34 + (v31 << 6) + 32)) {
          goto LABEL_130;
        }
        unint64_t v39 = *v6;
        int v40 = (long long *)v135;
LABEL_83:
        uint64_t v44 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v40, v39);
        if (!v44)
        {
          uint64_t v52 = (uint64_t)v80 + 8;
          unint64_t v53 = 2;
          goto LABEL_138;
        }
        unint64_t v41 = *(unsigned int **)v44;
        if (*(_DWORD *)(*(void *)v44 + 52) != *(_DWORD *)(v34 + (v31 << 6) + 52)) {
          goto LABEL_129;
        }
        unint64_t v2 = 1;
        goto LABEL_103;
      case 7:
        unint64_t v41 = v91;
        if (!v91) {
          goto LABEL_131;
        }
        uint64_t v45 = v34 + (v31 << 6);
        if (v91[13] != *(_DWORD *)(v45 + 52)) {
          goto LABEL_129;
        }
        if (v91[9] != *(_DWORD *)(v45 + 36)) {
          goto LABEL_133;
        }
        uint64_t v42 = v34 + (v31 << 6);
LABEL_90:
        if (*(unsigned char *)(v42 + 32)) {
          goto LABEL_130;
        }
        unint64_t v2 = 1;
        LOBYTE(v86) = 1;
        goto LABEL_103;
      case 8:
        unint64_t v41 = v90;
        if (!v90)
        {
LABEL_131:
          uint64_t v52 = (uint64_t)v80 + 8;
          unint64_t v53 = 3;
          goto LABEL_134;
        }
        uint64_t v46 = v34 + (v31 << 6);
        if (v90[13] != *(_DWORD *)(v46 + 52))
        {
LABEL_129:
          uint64_t v52 = (uint64_t)v80 + 8;
          unint64_t v53 = 1;
LABEL_134:
          uint64_t v54 = a2;
          uint64_t v7 = v83;
          uint64_t v55 = v83;
          uint64_t v56 = v96;
          goto LABEL_139;
        }
        if (v90[10] != *(_DWORD *)(v46 + 40))
        {
LABEL_133:
          uint64_t v52 = (uint64_t)v80 + 8;
          unint64_t v53 = 4;
          goto LABEL_134;
        }
        uint64_t v43 = v34 + (v31 << 6);
LABEL_96:
        if (*(unsigned char *)(v43 + 32))
        {
LABEL_130:
          uint64_t v52 = (uint64_t)v80 + 8;
          unint64_t v53 = 0;
          goto LABEL_138;
        }
        unint64_t v2 = 1;
        char v85 = 1;
LABEL_103:
        uint64_t v31 = v33;
        if (*v28 <= (unint64_t)v33++) {
          goto LABEL_111;
        }
        break;
      case 9:
        if (v92 != *(_DWORD *)(v34 + (v31 << 6) + 52))
        {
          uint64_t v52 = (uint64_t)v80 + 8;
          uint64_t v7 = v83;
          unint64_t v53 = 12;
          uint64_t v54 = a2;
          uint64_t v55 = v83;
          uint64_t v56 = v96;
          unint64_t v41 = 0;
          unint64_t v57 = 0;
          goto LABEL_140;
        }
        int v82 = 1;
        goto LABEL_103;
      case 10:
        unint64_t v38 = *(unsigned int *)(v34 + (v31 << 6) + 52);
        goto LABEL_101;
      default:
        goto LABEL_232;
    }
  }
}