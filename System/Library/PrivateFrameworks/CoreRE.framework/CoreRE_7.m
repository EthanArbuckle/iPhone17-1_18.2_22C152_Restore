uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<long long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<long long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<long long>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<long long>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<long long>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  result = re::DynamicArray<float *>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<long long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<double>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<long long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<float *>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  v9 = (re::IntrospectionBase *)(*((void *)this + 4) + 8 * v8);
  *(void *)v9 = 0;
  *((void *)this + 2) = v8 + 1;
  ++*((_DWORD *)this + 6);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<long long>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<long long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateTransition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetStateTransition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetStateTransition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SMAssetStateTransition>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  unint64_t v9 = *((void *)this + 2);
  if (v9 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateTransition>::growCapacity(this, v9 + 1);
    long long v8 = 0uLL;
    unint64_t v9 = *((void *)this + 2);
  }
  uint64_t v10 = *((void *)this + 4) + 96 * v9;
  *(_OWORD *)uint64_t v10 = v8;
  long long v14 = v8;
  *(void *)(v10 + 16) = 0;
  uint64_t v15 = 0;
  *(void *)(v10 + 32) = 0;
  *((void *)&v16 + 1) = 0;
  LODWORD(v16) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(void *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = "";
  *(void *)&long long v17 = 0;
  *((void *)&v17 + 1) = "";
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = "";
  *(void *)&long long v18 = 0;
  *((void *)&v18 + 1) = "";
  *(void *)(v10 + 72) = 0;
  *(void *)(v10 + 80) = "";
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1) = "";
  int v11 = v20;
  *(unsigned char *)(v10 + 92) = BYTE4(v20);
  *(_DWORD *)(v10 + 88) = v11;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)&v19);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v17);
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)&v14);
  v12 = (re::IntrospectionBase *)(*((void *)this + 4) + 96 * *((void *)this + 2) - 96);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

void *re::DynamicArray<re::SMAssetStateTransition>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 96 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 72));
      re::StringID::destroyString((re::StringID *)(v10 + 56));
      re::StringID::destroyString((re::StringID *)(v10 + 40));
      uint64_t result = (void *)re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v10);
      ++v9;
      v8 += 96;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 96 * v4 + 48;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 - 32) = 0uLL;
        *(_OWORD *)(v7 - 16) = 0uLL;
        *(_OWORD *)(v7 - 48) = 0uLL;
        *(void *)uint64_t v7 = "";
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = "";
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = "";
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 96;
        *(unsigned char *)(v7 + 44) = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SMAssetStateTransition>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetStateTransition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateTransition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateTransition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateTransition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateTransition>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 96 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 96 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateCommand>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetStateCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::destroy(uint64_t a1, void *a2)
{
  return re::DynamicArray<re::SMAssetStateCommand>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SMAssetStateCommand>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v40 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  v41 = "";
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateCommand>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  re::SMAssetStateCommand::SMAssetStateCommand(*((void *)this + 4) + 424 * v8, (uint64_t)v23);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)((char *)&v40 + 8));
  re::DynamicArray<re::StringID>::deinit((uint64_t)&v39[2] + 8);
  re::DynamicArray<re::StringID>::deinit((uint64_t)v39);
  if (*((void *)&v36 + 1))
  {
    if (*((void *)&v38 + 1)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v36 + 1) + 40))(*((void *)&v36 + 1), *((void *)&v38 + 1), v9, v10, v11);
    }
    *((void *)&v38 + 1) = 0;
    long long v37 = 0uLL;
    *((void *)&v36 + 1) = 0;
    LODWORD(v38) = v38 + 1;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)v35);
  if (*((void *)&v32 + 1))
  {
    if (*((void *)&v34 + 1)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v32 + 1) + 40))(*((void *)&v32 + 1), *((void *)&v34 + 1), v12, v13, v14);
    }
    *((void *)&v34 + 1) = 0;
    long long v33 = 0uLL;
    *((void *)&v32 + 1) = 0;
    LODWORD(v34) = v34 + 1;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)v31);
  if (*((void *)&v28 + 1))
  {
    if (*((void *)&v30 + 1)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v28 + 1) + 40))(*((void *)&v28 + 1), *((void *)&v30 + 1), v15, v16, v17);
    }
    *((void *)&v30 + 1) = 0;
    long long v29 = 0uLL;
    *((void *)&v28 + 1) = 0;
    LODWORD(v30) = v30 + 1;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)v27);
  if (*((void *)&v24 + 1))
  {
    if (*((void *)&v26 + 1)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1), *((void *)&v26 + 1), v18, v19, v20);
    }
    *((void *)&v26 + 1) = 0;
    long long v25 = 0uLL;
    *((void *)&v24 + 1) = 0;
    LODWORD(v26) = v26 + 1;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)v23);
  v21 = (re::IntrospectionBase *)(*((void *)this + 4) + 424 * *((void *)this + 2) - 424);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v21);
  return v21;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 424 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 424 * a3;
}

void *re::DynamicArray<re::SMAssetStateCommand>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 424 * a2 + 240;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 168));
      re::DynamicArray<re::StringID>::deinit(v10 + 120);
      re::DynamicArray<re::StringID>::deinit(v10 + 80);
      re::DynamicArray<unsigned long>::deinit(v10 + 40);
      re::DynamicArray<re::StringID>::deinit(v10);
      re::DynamicArray<unsigned long>::deinit(v10 - 40);
      re::DynamicArray<re::StringID>::deinit(v10 - 80);
      re::DynamicArray<unsigned long>::deinit(v10 - 120);
      re::DynamicArray<re::StringID>::deinit(v10 - 160);
      re::DynamicArray<unsigned long>::deinit(v10 - 200);
      uint64_t result = (void *)re::DynamicArray<re::StringID>::deinit(v10 - 240);
      ++v9;
      v8 += 424;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 424 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 416) = 0;
        *(_OWORD *)(v7 + 384) = 0uLL;
        *(_OWORD *)(v7 + 400) = 0uLL;
        *(_OWORD *)(v7 + 352) = 0uLL;
        *(_OWORD *)(v7 + 368) = 0uLL;
        *(_OWORD *)(v7 + 320) = 0uLL;
        *(_OWORD *)(v7 + 336) = 0uLL;
        *(_OWORD *)(v7 + 288) = 0uLL;
        *(_OWORD *)(v7 + 304) = 0uLL;
        *(_OWORD *)(v7 + 256) = 0uLL;
        *(_OWORD *)(v7 + 272) = 0uLL;
        *(_OWORD *)(v7 + 224) = 0uLL;
        *(_OWORD *)(v7 + 240) = 0uLL;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        v6 += 424;
        *(void *)(v7 + 416) = "";
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SMAssetStateCommand>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetStateCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    re::ObjectHelper::destroy<re::SMAssetStateCommand>(*(void *)(a1 + 32), *(void *)(a1 + 32) + 424 * v8);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v9 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateCommand>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = *(char **)(a1 + 32);
      uint64_t v12 = 424 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 424;
        v12 -= 424;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 424 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 424 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetState>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetState>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetState>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetState>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetState>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetState>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetState>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetState>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SMAssetState>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SMAssetState>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SMAssetState>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetState>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v8 = 0uLL;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  unint64_t v9 = *((void *)this + 2);
  if (v9 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetState>::growCapacity(this, v9 + 1);
    long long v8 = 0uLL;
    unint64_t v9 = *((void *)this + 2);
  }
  uint64_t v10 = *((void *)this + 4) + 104 * v9;
  *(_OWORD *)uint64_t v10 = v8;
  long long v14 = v8;
  *(void *)(v10 + 16) = 0;
  uint64_t v15 = 0;
  *(void *)(v10 + 32) = 0;
  *((void *)&v16 + 1) = 0;
  LODWORD(v16) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(void *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 48) = v8;
  *(_DWORD *)(v10 + 64) = 0;
  long long v17 = v8;
  uint64_t v11 = *(void *)(v10 + 56);
  *(void *)(v10 + 56) = 0;
  *(void *)&long long v18 = v11;
  *(void *)(v10 + 72) = 0;
  *(void *)&long long v19 = 0;
  DWORD2(v18) = 1;
  ++*(_DWORD *)(v10 + 64);
  *(void *)(v10 + 80) = 0;
  *(void *)(v10 + 88) = "";
  *((void *)&v19 + 1) = 0;
  *(void *)&long long v20 = "";
  *(_DWORD *)(v10 + 96) = 0;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)((char *)&v19 + 8));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(&v17);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v14);
  uint64_t v12 = (re::IntrospectionBase *)(*((void *)this + 4) + 104 * *((void *)this + 2) - 104);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 104 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 104 * a3;
}

void *re::DynamicArray<re::SMAssetState>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 104 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v10 + 40));
      uint64_t result = (void *)re::DynamicArray<re::SMAssetStateTransition>::deinit(v10);
      ++v9;
      v8 += 104;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SMAssetState>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 104 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 88) = "";
        *(void *)(v7 + 96) = 0;
        *(_DWORD *)(v7 + 96) = 0;
        v6 += 104;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SMAssetState>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetState>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetState>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetState>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetState>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetState>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetState>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetState>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 104 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 104;
        v11 -= 104;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 104 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 104 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraph>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraph>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraph>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetStateGraph>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SMAssetStateGraph>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v8 = 0uLL;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v17 = 0u;
  unint64_t v9 = *((void *)this + 2);
  if (v9 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraph>::growCapacity(this, v9 + 1);
    long long v8 = 0uLL;
    unint64_t v9 = *((void *)this + 2);
  }
  uint64_t v10 = *((void *)this + 4) + 168 * v9;
  *(_OWORD *)uint64_t v10 = v8;
  long long v15 = v8;
  *(void *)(v10 + 16) = 0;
  uint64_t v16 = 0;
  *(void *)(v10 + 32) = 0;
  *((void *)&v17 + 1) = 0;
  LODWORD(v17) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(void *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = "";
  *(void *)&v18[0] = 0;
  *((void *)&v18[0] + 1) = "";
  *(unsigned char *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = 0;
  *(_OWORD *)(v10 + 72) = v8;
  *(_DWORD *)(v10 + 88) = 0;
  *(_OWORD *)((char *)&v18[1] + 8) = v8;
  uint64_t v11 = *(void *)(v10 + 80);
  *(void *)(v10 + 80) = 0;
  *((void *)&v18[2] + 1) = v11;
  *(void *)(v10 + 96) = 0;
  *((void *)&v19 + 1) = 0;
  LODWORD(v19) = 1;
  ++*(_DWORD *)(v10 + 88);
  *(void *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 112) = v8;
  *(_DWORD *)(v10 + 128) = 0;
  long long v20 = v8;
  uint64_t v12 = *(void *)(v10 + 120);
  *(void *)(v10 + 120) = 0;
  *(void *)&long long v21 = v12;
  *(void *)(v10 + 136) = 0;
  *(void *)&long long v22 = 0;
  DWORD2(v21) = 1;
  ++*(_DWORD *)(v10 + 128);
  *(void *)(v10 + 144) = 0;
  *(void *)(v10 + 152) = "";
  *((void *)&v22 + 1) = 0;
  *(void *)&long long v23 = "";
  *(_DWORD *)(v10 + 160) = 0;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)((char *)&v22 + 8));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(&v20);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v18[1] + 8);
  re::StringID::destroyString((re::StringID *)v18);
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)&v15);
  uint64_t v13 = (re::IntrospectionBase *)(*((void *)this + 4) + 168 * *((void *)this + 2) - 168);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 168 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 168 * a3;
}

void *re::DynamicArray<re::SMAssetStateGraph>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 168 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (void *)(v3[4] + v8);
      re::StringID::destroyString((re::StringID *)(v10 + 18));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v10 + 13);
      re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)(v10 + 8));
      re::StringID::destroyString((re::StringID *)(v10 + 5));
      uint64_t result = (void *)re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v10);
      ++v9;
      v8 += 168;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 168 * v4 + 160;
      do
      {
        unint64_t v7 = (void *)(v3[4] + v6);
        *((_OWORD *)v7 - 6) = 0uLL;
        *((_OWORD *)v7 - 5) = 0uLL;
        *((_OWORD *)v7 - 2) = 0uLL;
        *((_OWORD *)v7 - 1) = 0uLL;
        *(v7 - 1) = "";
        *unint64_t v7 = 0;
        *((_OWORD *)v7 - 8) = 0uLL;
        *((_OWORD *)v7 - 7) = 0uLL;
        *((_OWORD *)v7 - 10) = 0uLL;
        *((_OWORD *)v7 - 9) = 0uLL;
        *(v7 - 14) = "";
        *((unsigned char *)v7 - 104) = 0;
        *(v7 - 12) = 0;
        *(v7 - 11) = 0;
        *(v7 - 10) = 0;
        *((_DWORD *)v7 - 18) = 0;
        *((_OWORD *)v7 - 4) = 0uLL;
        *((_OWORD *)v7 - 3) = 0uLL;
        *((_DWORD *)v7 - 8) = 0;
        *(v7 - 3) = 0;
        *(v7 - 2) = 0;
        v6 += 168;
        *(_DWORD *)unint64_t v7 = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SMAssetStateGraph>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetStateGraph>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateGraph>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateGraph>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateGraph>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateGraph>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 168 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 168;
        v11 -= 168;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 168 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 168 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SMAssetStateGraphGroup>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v14 = 0;
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 4) + 40 * v8;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v12 = 0u;
  *(void *)(v9 + 16) = 0;
  uint64_t v13 = 0;
  *(void *)(v9 + 32) = 0;
  uint64_t v15 = 0;
  LODWORD(v14) = 1;
  *(_DWORD *)(v9 + 24) = 1;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)&v12);
  unint64_t v10 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void *re::DynamicArray<re::SMAssetStateGraphGroup>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<re::SMAssetStateGraph>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateGraphGroup>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  v11[0] = 0;
  v11[1] = "";
  v12[0] = 0;
  v12[1] = "";
  re::DynamicArray<re::StateMachineInitializationData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 48 * *((void *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::DynamicArray<re::StateMachineInitializationData>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::StateMachineInitializationData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = (unint64_t *)(v3[4] + 48 * v4);
  uint64_t v6 = *a2;
  *uint64_t v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)"";
  uint64_t v8 = a2[4];
  v5[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[5] = a2[5];
  a2[4] = 0;
  a2[5] = (uint64_t)"";
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::StateMachineInitializationData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphOutputData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphOutputData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::StateMachineInitializationData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::makeMeshPayloadWithMeshAsset(re *a1@<X0>, Device **a2@<X1>, uint64_t a3@<X2>, REMultiBufferMeshPayload **a4@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 7))
  {
    id v45 = objc_alloc_init(MEMORY[0x263EFF980]);
    v46[0] = 1;
    int v47 = 0;
    char v48 = 0;
    uint64_t v53 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
    int v52 = 0;
    char v54 = 1;
    int v55 = 0;
    char v56 = 0;
    uint64_t v61 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = 0;
    int v60 = 0;
    id v40 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v6 = *((void *)a1 + 12);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *((void *)a1 + 12);
        if (v9 <= i)
        {
          v41[0] = 0;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v69 = 136315906;
          *(void *)&v69[4] = "operator[]";
          *(_WORD *)&v69[12] = 1024;
          *(_DWORD *)&v69[14] = 797;
          *(_WORD *)&v69[18] = 2048;
          *(void *)&v69[20] = i;
          __int16 v70 = 2048;
          *(void *)v71 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unint64_t v10 = (void *)(*((void *)a1 + 14) + v7);
        long long v12 = [REAttributeDescriptor alloc];
        uint64_t v13 = [NSString stringWithUTF8String:v10[1]];
        uint64_t v14 = [(REAttributeDescriptor *)v12 initWithName:v13 payloadOffset:v11 count:*((unsigned int *)v10 + 24) stride:64];

        [v40 addObject:v14];
        v7 += 112;
      }
    }
    v39 = (_anonymous_namespace_ *)objc_alloc_init(MEMORY[0x263EFF980]);
    *(void *)&v71[2] = 0;
    memset(&v69[8], 0, 20);
    unint64_t v15 = *((void *)a1 + 2);
    uint64_t v16 = (_anonymous_namespace_ *)re::DynamicArray<re::DeformationModelData>::setCapacity(v69, v15);
    ++*(_DWORD *)&v69[24];
    uint64_t v44 = 0;
    v41[1] = 0;
    uint64_t v42 = 0;
    int v43 = 0;
    unint64_t v17 = *((void *)a1 + 2);
    ++v43;
    uint64_t v18 = *((void *)a1 + 2);
    if (v18)
    {
      uint64_t v19 = *((void *)a1 + 4);
      uint64_t v20 = v19 + (v18 << 9);
      do
      {
        bzero(buf, 0x2D0uLL);
        for (uint64_t j = 0; j != 720; j += 40)
        {
          long long v22 = &buf[j];
          *(void *)long long v22 = 0;
          *((void *)v22 + 4) = 0;
        }
        re::DynamicArray<re::DeformationModelData>::add((uint64_t)v69, (uint64_t)buf);
        for (uint64_t k = 680; k != -40; k -= 40)
          std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&buf[k]);
        uint64_t v68 = 0;
        v67[1] = 1uLL;
        long long v66 = 0u;
        long long v64 = 0u;
        *(_OWORD *)buf = 0u;
        long long v63 = 0u;
        DWORD2(v64) = 1;
        long long v65 = 0uLL;
        *(void *)&long long v66 = 0;
        DWORD2(v66) = 0;
        v67[0] = 0uLL;
        v67[2] = 0uLL;
        re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)v67);
        re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v63 + 8);
        long long v24 = [REMeshModelDescriptor alloc];
        long long v25 = [(REMeshModelDescriptor *)v24 initWithMeshAssetModel:v19 inverseBindPoseAttributes:v40 deformerBuilders:v44 + 136 * v42 - 136 payloadBuilder:&v45 deformationModelData:*(void *)&v71[2] + 720 * *(void *)&v69[16] - 720];
        [(_anonymous_namespace_ *)v39 addObject:v25];

        v19 += 512;
      }
      while (v19 != v20);
    }
    id v26 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v27 = *((void *)a1 + 7);
    if (v27)
    {
      uint64_t v28 = *((void *)a1 + 9);
      uint64_t v29 = 96 * v27;
      do
      {
        long long v30 = [[REMeshInstanceDescriptor alloc] initWithMeshAssetInstance:v28];
        [v26 addObject:v30];

        v28 += 96;
        v29 -= 96;
      }
      while (v29);
    }
    id v31 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v32 = *((void *)a1 + 12);
    if (v32)
    {
      uint64_t v33 = *((void *)a1 + 14);
      uint64_t v34 = 112 * v32;
      do
      {
        v35 = [[REMeshSkeletonDescriptor alloc] initWithMeshAssetSkeleton:v33];
        [v31 addObject:v35];

        v33 += 112;
        v34 -= 112;
      }
      while (v34);
    }

    re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)v69);

    if (v57)
    {
      if (v61) {
        (*(void (**)(void))(*(void *)v57 + 40))();
      }
      uint64_t v61 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v57 = 0;
      ++v60;
    }
    if (v49)
    {
      if (v53) {
        (*(void (**)(void))(*(void *)v49 + 40))();
      }
      uint64_t v53 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      ++v52;
    }
  }
  else
  {
    long long v36 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "Tried to make an empty mesh payload", buf, 2u);
    }
    *a4 = 0;
  }
}

void sub_23351A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  re::DynamicArray<re::DeformationModelData>::deinit(v11 - 144);

  _Unwind_Resume(a1);
}

unint64_t re::anonymous namespace'::MeshPayloadBuilder::ContiguousLayout::addBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a4 + *(unsigned int *)(a1 + 4) - 1;
  unint64_t v8 = v7 / a4 * a4;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v7 & -a4;
  if (v9.u32[0] == 1) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = v8;
  }
  if (HIDWORD(v11)) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  unint64_t v12 = a3 + v11;
  if (__CFADD__(a3, v11) || HIDWORD(v12)) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(_DWORD *)(a1 + 4) = v12;
  unint64_t v13 = *(void *)(a1 + 24);
  unint64_t v14 = *(void *)(a1 + 32);
  if (v14 >= v13)
  {
    unint64_t v15 = v14 + 1;
    if (v13 < v14 + 1)
    {
      if (*(void *)(a1 + 16))
      {
        uint64_t v16 = 2 * v13;
        BOOL v17 = v13 == 0;
        unint64_t v18 = 8;
        if (!v17) {
          unint64_t v18 = v16;
        }
        if (v18 <= v15) {
          unint64_t v19 = v15;
        }
        else {
          unint64_t v19 = v18;
        }
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)(a1 + 16), v19);
      }
      else
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)(a1 + 16), v15);
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 48) + 24 * *(void *)(a1 + 32);
  *(_DWORD *)uint64_t v20 = v11;
  *(void *)(v20 + 8) = a2;
  *(void *)(v20 + 16) = a3;
  ++*(void *)(a1 + 32);
  ++*(_DWORD *)(a1 + 40);
  *(unsigned char *)a1 = 0;
  return v11;
}

uint64_t re::DynamicArray<re::DeformationModelData>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::DeformationModelData>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::DeformationModelData>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a1 + 32) + 720 * v5;
  do
  {
    uint64_t v13 = *(void *)(a2 + v11);
    *(void *)(a2 + v11) = 0;
    *(void *)(v12 + v11) = v13;
    uint64_t result = std::__function::__value_func<void ()(void *)>::__value_func[abi:nn180100](v12 + v11 + 8, a2 + v11 + 8);
    v11 += 40;
  }
  while (v11 != 720);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::DynamicArray<re::anonymous namespace'::DeformerBuilders>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v11 = 2 * v4;
      BOOL v12 = v4 == 0;
      unint64_t v13 = 8;
      if (!v12) {
        unint64_t v13 = v11;
      }
      if (v13 <= v6) {
        unint64_t v14 = v6;
      }
      else {
        unint64_t v14 = v13;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 136 * *(void *)(a1 + 16);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(v8 + 24, (uint64_t)a2 + 24);
  uint64_t result = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(v8 + 80, (uint64_t)(a2 + 5));
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::anonymous namespace'::makeMeshPayload(REMultiBufferMeshPayload **a1, uint64_t a2, void *a3, void *a4, void *a5, Device **a6, uint64_t a7)
{
  id v13 = a3;
  id v14 = a4;
  unint64_t v15 = a5;
  uint64_t v16 = v15;
  if (!*(unsigned char *)(a2 + 16) && !*(unsigned char *)(a2 + 72))
  {
    unsigned int v18 = *(_DWORD *)(a2 + 68);
    int v19 = *(unsigned __int8 *)(a2 + 64);
    if (v18) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = 4;
    }
    int v21 = 8 * (*(_DWORD *)a7 != 0);
    if (*(unsigned char *)(a2 + 64) || !*(unsigned char *)(a2 + 8))
    {
      unint64_t v29 = v20;
      unsigned int v23 = *(_DWORD *)(a2 + 12);
      if (v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = 4;
      }
      if (v19)
      {
        long long v25 = 0;
LABEL_20:
        id v26 = [REMultiBufferMeshPayload alloc];
        LOBYTE(v28) = *(unsigned char *)(a7 + 4);
        uint64_t v27 = [(REMultiBufferMeshPayload *)v26 initWithPayload:DirectMeshPayload privatePayload:v25 parts:*(void *)a2 models:v13 instances:v14 skeletons:v16 isLimitedRenderAsset:v28];
        *a1 = v27;

        goto LABEL_6;
      }
      unint64_t v20 = v29;
    }
    else
    {
      DirectMeshPayload = 0;
    }
    goto LABEL_20;
  }
  BOOL v17 = *re::assetTypesLogObjects(v15);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_233120000, v17, OS_LOG_TYPE_FAULT, "Mesh payload buffer size overflow", buf, 2u);
  }
  *a1 = 0;
LABEL_6:
}

void sub_23351AE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *re::DynamicArray<re::anonymous namespace'::DeformerBuilders>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[4];
    if (v3)
    {
      uint64_t v4 = a1[2];
      if (v4)
      {
        uint64_t v5 = 136 * v4;
        uint64_t v6 = v3 + 80;
        do
        {
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(v6);
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(v6 - 56);
          v6 += 136;
          v5 -= 136;
        }
        while (v5);
        uint64_t v2 = *a1;
        uint64_t v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void re::anonymous namespace'::MeshPayloadBuilder::~MeshPayloadBuilder(re::_anonymous_namespace_::MeshPayloadBuilder *this)
{
  uint64_t v3 = (void *)((char *)this + 80);
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    if (*((void *)this + 14)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    *((void *)this + 14) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *uint64_t v3 = 0;
    ++*((_DWORD *)this + 26);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    if (*((void *)this + 7)) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
    *((void *)this + 7) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
}

void re::makeMeshPayloadWithMeshResourceDefinition(void *a1@<X0>, Device **a2@<X1>, uint64_t a3@<X2>, REMultiBufferMeshPayload **a4@<X8>)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  id v72 = objc_alloc_init(MEMORY[0x263EFF980]);
  v73[0] = 1;
  int v74 = 0;
  char v75 = 0;
  uint64_t v80 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = 0;
  int v79 = 0;
  char v81 = 1;
  int v82 = 0;
  char v83 = 0;
  uint64_t v88 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  int v87 = 0;
  id v56 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v57 = a1;
  if (a1[30])
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void **)(a1[32] + 8 * v5);
      uint64_t v8 = [REAttributeDescriptor alloc];
      long long v9 = [NSString stringWithUTF8String:v6[4]];
      unint64_t v10 = [(REAttributeDescriptor *)v8 initWithName:v9 payloadOffset:v7 count:*((unsigned int *)v6 + 30) stride:64];

      [v56 addObject:v10];
      a1 = v57;

      ++v5;
    }
    while (v5 < v57[30]);
  }
  uint64_t v11 = a1[10];
  if (v11)
  {
    uint64_t v12 = v57[12];
    uint64_t v13 = 144 * v11;
    do
    {
      id v14 = [[REMeshPartDescriptor alloc] initWithResourceDefinition:v57 meshPart:v12 payloadBuilder:&v72];
      [v72 addObject:v14];

      v12 += 144;
      v13 -= 144;
    }
    while (v13);
  }
  id v55 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v58 = (_anonymous_namespace_ *)objc_alloc_init(MEMORY[0x263EFF980]);
  unint64_t v15 = v57[20];
  uint64_t v71 = 0;
  v68[1] = 0;
  uint64_t v69 = 0;
  int v70 = 0;
  ++v70;
  unint64_t v17 = v57[20];
  uint64_t v67 = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  int v66 = 0;
  re::DynamicArray<re::DeformationModelData>::setCapacity(v64, v17);
  ++v66;
  uint64_t v18 = v57[20];
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v57[22];
    uint64_t v54 = v20 + 192 * v18;
    do
    {
      uint64_t v97 = 0;
      long long v95 = 1uLL;
      long long v93 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      DWORD2(v91) = 1;
      long long v92 = 0uLL;
      *(void *)&long long v93 = 0;
      DWORD2(v93) = 0;
      long long v94 = 0uLL;
      long long v96 = 0uLL;
      re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v94);
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v90 + 8);
      bzero(&v89, 0x2D0uLL);
      for (uint64_t i = 0; i != 720; i += 40)
      {
        long long v22 = (void *)((char *)&v89 + i);
        *long long v22 = 0;
        v22[4] = 0;
      }
      re::DynamicArray<re::DeformationModelData>::add((uint64_t)v64, (uint64_t)&v89);
      for (uint64_t j = 680; j != -40; j -= 40)
        std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)&v89 + j));
      unint64_t v24 = [REMeshModelDescriptor alloc];
      uint64_t v25 = v71;
      uint64_t v26 = v69;
      __dst = 0;
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      uint64_t v59 = 0;
      int v62 = 0;
      if (v57[13])
      {
        unint64_t v27 = v57[15];
        uint64_t v59 = v57[13];
        re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v59, v27);
        ++v62;
        unint64_t v28 = v57[15];
        if (v28 >= v61)
        {
          re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v59, v57[15]);
          unint64_t v29 = v61;
          if (v61)
          {
            memmove(__dst, (const void *)v57[17], 8 * v61);
            unint64_t v29 = v61;
          }
          memcpy((char *)__dst + 8 * v29, (const void *)(v57[17] + 8 * v29), 8 * v28 - 8 * v29);
        }
        else if (v28)
        {
          memmove(__dst, (const void *)v57[17], 8 * v28);
        }
        unint64_t v61 = v28;
      }
      long long v30 = [(REMeshModelDescriptor *)v24 initWithResourceDefinitionModel:v20 inverseBindPoseAttributes:v56 deformerBuilders:v25 + 136 * v26 - 136 payloadBuilder:&v72 levels:&v59 deformationModelData:v67 + 720 * v65 - 720];
      if (v59)
      {
        if (__dst) {
          (*(void (**)(void))(*(void *)v59 + 40))();
        }
        __dst = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v59 = 0;
        ++v62;
      }
      [v55 addObject:v30];
      uint64_t v31 = v57[25];
      if (v31)
      {
        uint64_t v32 = v57[27];
        uint64_t v33 = v32 + (v31 << 7);
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v89, (const re::DynamicString *)v32);
          long long v34 = *(_OWORD *)(v32 + 48);
          long long v91 = *(_OWORD *)(v32 + 32);
          long long v92 = v34;
          long long v35 = *(_OWORD *)(v32 + 64);
          long long v36 = *(_OWORD *)(v32 + 80);
          long long v37 = *(_OWORD *)(v32 + 96);
          *(void *)&long long v96 = *(void *)(v32 + 112);
          long long v94 = v36;
          long long v95 = v37;
          long long v93 = v35;
          if (v91 == v19)
          {
            long long v38 = [REMeshInstanceDescriptor alloc];
            if (BYTE8(v89)) {
              unint64_t v39 = v90;
            }
            else {
              unint64_t v39 = (unint64_t)&v89 | 9;
            }
            id v40 = [NSString stringWithUTF8String:v39];
            v41 = -[REMeshInstanceDescriptor initWithName:modelIndex:transform:lodSelectOptions:](v38, "initWithName:modelIndex:transform:lodSelectOptions:", v40, v19, (void)v96, *(double *)&v92, *(double *)&v93, *(double *)&v94, *(double *)&v95);

            [(_anonymous_namespace_ *)v58 addObject:v41];
          }
          if (void)v89 && (BYTE8(v89)) {
            (*(void (**)(void))(*(void *)v89 + 40))();
          }
          v32 += 128;
        }
        while (v32 != v33);
      }
      else
      {
        re::DynamicString::operator+((re::DynamicString *)(v20 + 40), "_instance", (re::DynamicString *)&v89);
        uint64_t v42 = [REMeshInstanceDescriptor alloc];
        if (BYTE8(v89)) {
          int v43 = (char *)v90;
        }
        else {
          int v43 = (char *)&v89 + 9;
        }
        uint64_t v44 = [NSString stringWithUTF8String:v43];
        id v45 = -[REMeshInstanceDescriptor initWithName:modelIndex:transform:lodSelectOptions:](v42, "initWithName:modelIndex:transform:lodSelectOptions:", v44, v19, 0x3F80000000000001, *MEMORY[0x263EF89A8], *(double *)(MEMORY[0x263EF89A8] + 16), *(double *)(MEMORY[0x263EF89A8] + 32), *(double *)(MEMORY[0x263EF89A8] + 48));

        [(_anonymous_namespace_ *)v58 addObject:v45];
        if (void)v89 && (BYTE8(v89)) {
          (*(void (**)(void))(*(void *)v89 + 40))();
        }
      }

      uint64_t v19 = (v19 + 1);
      v20 += 192;
    }
    while (v20 != v54);
  }
  id v46 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v47 = v57[30];
  if (v47)
  {
    char v48 = (void *)v57[32];
    uint64_t v49 = 8 * v47;
    do
    {
      uint64_t v50 = [[REMeshSkeletonDescriptor alloc] initWithMeshSkeletonDefinition:*v48];
      [v46 addObject:v50];

      ++v48;
      v49 -= 8;
    }
    while (v49);
  }

  re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)v64);

  if (v84)
  {
    if (v88) {
      (*(void (**)(void))(*(void *)v84 + 40))();
    }
    uint64_t v88 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v84 = 0;
    ++v87;
  }
  if (v76)
  {
    if (v80) {
      (*(void (**)(void))(*(void *)v76 + 40))();
    }
    uint64_t v80 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = 0;
    ++v79;
  }
}

void sub_23351B78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void re::makeMeshCollectionWithMeshPayload(id *a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  re::MeshPayload::payloadBufferSizes(a1, v71);
  for (uint64_t i = 0; i != 8; ++i)
  {
    unint64_t v6 = *(void *)((char *)v71 + i * 8);
    if (v6 && (unint64_t)objc_msgSend(a2[i], sel_length) < v6)
    {
LABEL_50:
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "payloadBuffers[i]->length() >= length", "makeMeshCollectionWithMeshPayload", 550);
      _os_crash();
      __break(1u);
    }
  }
  id v8 = *a1;
  if (objc_opt_respondsToSelector())
  {
    if (v8)
    {
      [v8 makeMeshCollection:a2];
    }
    else
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    [v8 parts];
    uint64_t v9 = 0;
    id v65 = (id)objc_claimAutoreleasedReturnValue();
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    do
    {
      unint64_t v10 = NS::SharedPtr<MTL::Texture>::operator=((id *)((char *)&v65 + v9 * 8 + 8), &a2[v9]);
      ++v9;
    }
    while (v9 != 8);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    uint64_t v11 = [v8 models];
    unint64_t v12 = [v11 count];
    re::DynamicArray<re::MeshModel>::setCapacity((void *)a3, v12);
    ++*(_DWORD *)(a3 + 24);

    uint64_t v14 = re::globalAllocators(v13)[2];
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    unint64_t v15 = [v8 models];
    obuint64_t j = v15;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v58 objects:v74 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v59;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v59 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void **)(*((void *)&v58 + 1) + 8 * j);
          uint64_t v20 = [v19 skinningModel];
          BOOL v21 = v20 == 0;

          if (!v21)
          {
            long long v22 = [v19 skinningModel];
            int v43 = [v22 inverseBindPoseAttributes];

            re::FixedArray<re::Slice<unsigned int>>::init<>(&v62, v14, [v43 count]);
            id v42 = v8;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            id v46 = v43;
            uint64_t v23 = [v46 countByEnumeratingWithState:&v54 objects:v73 count:16];
            if (!v23) {
              goto LABEL_31;
            }
            int v24 = 0;
            uint64_t v25 = *(void *)v55;
            while (1)
            {
              uint64_t v26 = 0;
              int v44 = v24;
              uint64_t v27 = v24;
              uint64_t v28 = 16 * v24;
              do
              {
                uint64_t v29 = a3;
                if (*(void *)v55 != v25) {
                  objc_enumerationMutation(v46);
                }
                long long v30 = *(void **)(*((void *)&v54 + 1) + 8 * v26);
                id v31 = *a2;
                unsigned int v32 = [v30 payloadOffset];
                LODWORD(v30) = [v30 bufferSize];
                id v52 = 0;
                id v52 = v31;
                unint64_t v53 = __PAIR64__(v30, v32);
                unint64_t v33 = v63;
                if (v63 <= v27 + v26)
                {
                  uint64_t v70 = 0;
                  memset(v71, 0, 80);
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)char v75 = 136315906;
                  *(void *)&v75[4] = "operator[]";
                  *(_WORD *)&v75[12] = 1024;
                  *(_DWORD *)&v75[14] = 468;
                  __int16 v76 = 2048;
                  uint64_t v77 = v26 + v44;
                  __int16 v78 = 2048;
                  unint64_t v79 = v33;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_50;
                }
                uint64_t v34 = v64 + v28;
                a3 = v29;
                NS::SharedPtr<MTL::Texture>::operator=((void **)(v64 + v28), &v52);
                *(void *)(v34 + 8) = v53;
                if (v52) {

                }
                if (v31) {
                ++v26;
                }
                v28 += 16;
              }
              while (v23 != v26);
              uint64_t v23 = [v46 countByEnumeratingWithState:&v54 objects:v73 count:16];
              int v24 = v27 + v26;
              if (!v23)
              {
LABEL_31:

                id v8 = v42;
                unint64_t v15 = obj;
                goto LABEL_32;
              }
            }
          }
        }
        unint64_t v15 = obj;
        uint64_t v16 = [obj countByEnumeratingWithState:&v58 objects:v74 count:16];
      }
      while (v16);
    }
LABEL_32:

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v35 = [v8 models];
    uint64_t v36 = [v35 countByEnumeratingWithState:&v48 objects:v72 count:16];
    if (v36)
    {
      uint64_t v37 = *(void *)v49;
      do
      {
        for (uint64_t k = 0; k != v36; ++k)
        {
          if (*(void *)v49 != v37) {
            objc_enumerationMutation(v35);
          }
          unint64_t v39 = *(void **)(*((void *)&v48 + 1) + 8 * k);
          *(void *)char v75 = v64;
          *(void *)&v75[8] = v63;
          if (v39) {
            [v39 meshModelWithMeshModelContext:&v65 inverseBindPoseBuffers:v75 allocator:v14];
          }
          else {
            bzero(v71, 0x330uLL);
          }
          re::DynamicArray<re::MeshModel>::add((_anonymous_namespace_ *)a3, (uint64_t *)v71);
          re::MeshModel::~MeshModel((re::MeshModel *)v71);
        }
        uint64_t v36 = [v35 countByEnumeratingWithState:&v48 objects:v72 count:16];
      }
      while (v36);
    }

    re::FixedArray<re::BufferSlice>::deinit(&v62);
    uint64_t v40 = 64;
    do
    {
      v41 = *(id *)((char *)&v65 + v40);
      if (v41)
      {

        *(id *)((char *)&v65 + v40) = 0;
      }
      v40 -= 8;
    }
    while (v40);
  }
}

void sub_23351BF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  re::FixedArray<re::BufferSlice>::deinit(&a46);
  re::DynamicArray<re::MeshModel>::deinit(v59);
  uint64_t v61 = 64;
  while (1)
  {
    uint64_t v62 = *(void **)((char *)&a49 + v61);
    if (v62)
    {

      *(void **)((char *)&a49 + v61) = 0;
    }
    v61 -= 8;
    if (!v61)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t re::DynamicArray<re::MeshModel>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MeshModel>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::MeshModel::MeshModel(*((void *)this + 4) + 816 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::registerMeshCollectionWithMeshPayload(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v17 = (re *)*a2;
  uint64_t v7 = re::globalAllocators(v17)[2];
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 72) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)(a4 + 40) = v7;
  re::DynamicArray<float *>::setCapacity((void *)(a4 + 40), 0);
  ++*(_DWORD *)(a4 + 64);
  *(void *)a4 = v7;
  re::DynamicArray<float *>::setCapacity((void *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 816 * v8;
    do
    {
      *(void *)&v18[0] = re::DataArray<re::MeshModel>::create<re::MeshModel>(a3 + 8, v9);
      re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((void *)(a4 + 40), v18);
      v9 += 102;
      v10 -= 816;
    }
    while (v10);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v11 = [(re *)v17 instances];
  uint64_t v16 = a1;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v23;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v23 != v13) {
          objc_enumerationMutation(v11);
        }
        unint64_t v15 = *(void **)(*((void *)&v22 + 1) + 8 * v14);
        if (v15)
        {
          [v15 meshInstanceWithModels:a4 meshManager:a3];
        }
        else
        {
          memset(v20, 0, sizeof(v20));
          long long v19 = 0u;
          memset(v18, 0, sizeof(v18));
        }
        unint64_t v21 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(a3 + 72, (uint64_t)v18);
        re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((void *)a4, &v21);
        re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)v20 + 1);
        if ((void)v19)
        {
          if (*((void *)&v19 + 1))
          {
            (*(void (**)(void))(*(void *)v19 + 40))();
            *((void *)&v19 + 1) = 0;
            *(void *)&v20[0] = 0;
          }
          *(void *)&long long v19 = 0;
        }
        re::StringID::destroyString((re::StringID *)v18);
        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v12);
  }

  re::DynamicArray<re::MeshModel>::deinit(v16);
}

void sub_23351C358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  re::DynamicArray<unsigned long>::deinit(v11);
  re::DynamicArray<unsigned long>::deinit(v10);

  _Unwind_Resume(a1);
}

void re::MeshInstance::~MeshInstance(re::MeshInstance *this)
{
}

void re::makeMeshAssetSkeletonsWithMeshPayload(id *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  unint64_t v4 = [v3 skeletons];
  unint64_t v5 = [v4 count];

  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
  re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a2, v5);
  ++*(_DWORD *)(a2 + 24);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v7 = [v3 skeletons];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if (v11)
        {
          [v11 meshAssetSkeleton];
        }
        else
        {
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v15 = 0u;
        }
        re::DynamicArray<re::MeshAssetSkeleton>::add((void *)a2, (uint64_t *)&v15);
        if (*((void *)&v20 + 1))
        {
          if ((void)v21)
          {
            (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v20 + 1) + 40))(*((void *)&v20 + 1), *((void *)&v21 + 1), v12, v13, v14);
            long long v21 = 0uLL;
          }
          *((void *)&v20 + 1) = 0;
        }
        if ((void)v19)
        {
          if (*((void *)&v19 + 1))
          {
            (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 40))(v19, v20, v12, v13, v14);
            *((void *)&v19 + 1) = 0;
            *(void *)&long long v20 = 0;
          }
          *(void *)&long long v19 = 0;
        }
        if (*((void *)&v17 + 1))
        {
          if ((void)v18)
          {
            (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**((void **)&v17 + 1) + 40))(*((void *)&v17 + 1), *((void *)&v18 + 1), v12, v13, v14);
            long long v18 = 0uLL;
          }
          *((void *)&v17 + 1) = 0;
        }
        re::FixedArray<re::StringID>::deinit(&v16);
        re::StringID::destroyString((re::StringID *)&v15);
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v8);
  }
}

void sub_23351C65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::MeshAssetSkeleton::~MeshAssetSkeleton(re::MeshAssetSkeleton *this)
{
}

void re::makeMeshAssetInstancesWithMeshPayload(id *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v17 = *a1;
  id v3 = [v17 skeletons];
  unint64_t v4 = [v3 count];

  unint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
  re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a2, v4);
  ++*(_DWORD *)(a2 + 24);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  unint64_t v6 = [v17 instances];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v11 = [v10 name];
        uint64_t v12 = (_anonymous_namespace_ *)[v11 UTF8String];
        v18[0] = 0;
        v18[1] = (uint64_t)"";
        [v10 transform];
        long long v19 = v13;
        long long v20 = v14;
        long long v21 = v15;
        long long v22 = v16;
        int v23 = [v10 modelIndex];
        uint64_t v24 = [v10 lodSelectOptions];

        re::DynamicArray<re::MeshAssetInstance>::add((_anonymous_namespace_ *)a2, v18);
        re::StringID::destroyString((re::StringID *)v18);
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v7);
  }
}

void sub_23351C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void re::makeBoundingBoxesWithMeshPayload(id *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  re::FixedArray<CoreIKTransform>::deinit(a2);
  re::FixedArray<CoreIKTransform>::deinit(a3);
  id v5 = *a1;
  uint64_t v6 = objc_opt_respondsToSelector();
  if (v6)
  {
    [v5 makeBoundingBoxes:a2 perPartPerInstanceBoundingBoxes:a3];
    goto LABEL_21;
  }
  uint64_t v7 = re::globalAllocators((re *)v6)[2];
  uint64_t v8 = [v5 models];
  [v8 count];

  uint64_t v9 = [v5 instances];
  unint64_t v43 = [v9 count];

  uint64_t v10 = [v5 parts];
  [v10 count];

  if (v43)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      long long v13 = [v5 instances];
      long long v14 = [v13 objectAtIndexedSubscript:v11];
      unsigned int v15 = [v14 modelIndex];

      long long v16 = [v5 models];
      id v17 = [v16 objectAtIndexedSubscript:v15];
      long long v18 = [v17 partIndices];
      v12 += [v18 count];

      ++v11;
    }
    while (v43 != v11);
  }
  else
  {
    unint64_t v12 = 0;
  }
  re::FixedArray<re::AABB>::init<>((uint64_t)a2, v7, v43);
  re::FixedArray<re::AABB>::init<>((uint64_t)a3, v7, v12);
  if (v43)
  {
    uint64_t v19 = 0;
    for (unint64_t i = 0; i != v43; ++i)
    {
      long long v20 = [v5 instances];
      long long v21 = [v20 objectAtIndexedSubscript:i];
      unsigned int v22 = [v21 modelIndex];

      int v23 = [v5 models];
      id v42 = [v23 objectAtIndexedSubscript:v22];

      [v42 boundingBoxMin];
      long long v44 = v24;
      [v42 boundingBoxMax];
      unint64_t v26 = i;
      unint64_t v27 = a2[1];
      if (v27 <= i) {
        goto LABEL_23;
      }
      long long v28 = (_OWORD *)(a2[2] + 32 * i);
      *long long v28 = v44;
      v28[1] = v25;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      uint64_t v29 = [v42 partIndices];
      uint64_t v30 = [v29 countByEnumeratingWithState:&v46 objects:v51 count:16];
      if (!v30) {
        goto LABEL_20;
      }
      unint64_t v26 = *(void *)v47;
      do
      {
        unint64_t v27 = 0;
        uint64_t v31 = v19;
        uint64_t v32 = 32 * v19;
        do
        {
          if (*(void *)v47 != v26) {
            objc_enumerationMutation(v29);
          }
          unint64_t v33 = *(void **)(*((void *)&v46 + 1) + 8 * v27);
          uint64_t v34 = [v5 parts];
          long long v35 = objc_msgSend(v34, "objectAtIndexedSubscript:", objc_msgSend(v33, "unsignedIntegerValue"));

          [v35 boundingBoxMin];
          long long v45 = v36;
          [v35 boundingBoxMax];
          unint64_t v38 = a3[1];
          if (v38 <= v31 + v27)
          {
            uint64_t v50 = 0;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v60 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v52 = 136315906;
            unint64_t v53 = "operator[]";
            __int16 v54 = 1024;
            int v55 = 468;
            __int16 v56 = 2048;
            unint64_t v57 = v31 + v27;
            __int16 v58 = 2048;
            unint64_t v59 = v38;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            uint64_t v50 = 0;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v60 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v52 = 136315906;
            unint64_t v53 = "operator[]";
            __int16 v54 = 1024;
            int v55 = 468;
            __int16 v56 = 2048;
            unint64_t v57 = v26;
            __int16 v58 = 2048;
            unint64_t v59 = v27;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          unint64_t v39 = (_OWORD *)(a3[2] + v32);
          _OWORD *v39 = v45;
          v39[1] = v37;

          ++v27;
          v32 += 32;
        }
        while (v30 != v27);
        uint64_t v30 = [v29 countByEnumeratingWithState:&v46 objects:v51 count:16];
        uint64_t v19 = v31 + v27;
      }
      while (v30);
      uint64_t v19 = v31 + v27;
LABEL_20:
    }
  }
LABEL_21:
}

void sub_23351CE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::StringID::destroyString((re::StringID *)&a9);

  _Unwind_Resume(a1);
}

void sub_23351D100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
}

id re::DynamicArray<re::NamedVertexBuffer>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::NamedVertexBuffer>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 6);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  *(void *)(v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v6;
  *(void *)(v5 + 16) = v7;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v9;
  *(void *)(a2 + 16) = v8;
  *(_WORD *)(v5 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(_WORD *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(v5 + 40) = result;
  *(void *)(v5 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 48);
  *(void *)(v5 + 56) = *(void *)(a2 + 56);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::NamedVertexBuffer::~NamedVertexBuffer(re::NamedVertexBuffer *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {

    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
  }
  re::DynamicString::deinit(this);
}

void sub_23351D804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_23351DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  re::FixedArray<re::MeshVertexAttributeBuffers::Attribute>::deinit((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23351E1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_23351E368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351E4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

REAttributeDescriptor *anonymous namespace'::makeDescriptorForSkinningAttribute(unsigned int a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a3 + 8)) {
    goto LABEL_12;
  }
  unint64_t v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v6 = *(unsigned int *)(*(void *)(a3 + 16)
                       + 4
                       * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                        % *(unsigned int *)(a3 + 32)));
  if (v6 == 0x7FFFFFFF) {
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a3 + 24);
  while (!re::StringID::operator==((void *)(v9 + 48 * v6 + 8), a2))
  {
    uint64_t v6 = *(_DWORD *)(v9 + 48 * v6) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF) {
      goto LABEL_12;
    }
  }
  uint64_t v10 = v9 + 48 * v6;
  if (*(void *)(v10 + 40))
  {
    uint64_t v11 = v10 + 32;
    uint64_t v12 = v9 + 48 * v6;
    long long v13 = [REAttributeDescriptor alloc];
    long long v14 = [NSString stringWithUTF8String:a2[1]];
    if (a1 > 4 || a1 == 2) {
      uint64_t v15 = a4 + 8;
    }
    else {
      uint64_t v15 = a4 + 64;
    }
    long long v16 = [(REAttributeDescriptor *)v13 initWithName:v14 buffer:v11 elementSize:*(void *)(v12 + 24) payloadLayout:v15];
  }
  else
  {
LABEL_12:
    long long v16 = 0;
  }
  return v16;
}

void sub_23351E6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351EA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (v15) {

  }
  re::StringID::destroyString((re::StringID *)&a11);
  re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a13);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = re::StringID::operator==((void *)(v10 + 40 * v9 + 8), a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void sub_23351EF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit((void *)(v17 + 16));

  _Unwind_Resume(a1);
}

void sub_23351F0D0(_Unwind_Exception *a1)
{
  re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit((void *)(v3 + 16));

  _Unwind_Resume(a1);
}

void sub_23351F1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351F3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

REAttributeDescriptor *anonymous namespace'::makeAttributeDescriptor(uint64_t a1, int a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  id v11 = a3;
  if (a5)
  {
    if (a2 == 1) {
      uint64_t v12 = a1 + 8;
    }
    else {
      uint64_t v12 = a1 + 64;
    }
  }
  else
  {
    long long v13 = 0;
  }

  return v13;
}

void sub_23351F518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23351F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  re::FixedArray<re::StringID>::deinit(&a16);
  uint64_t v21 = 80;
  while (1)
  {
    unsigned int v22 = *(void **)(&a19 + v21);
    if (v22)
    {

      *(void *)(&a19 + v21) = 0;
    }
    v21 -= 16;
    if (v21 == -16) {
      _Unwind_Resume(a1);
    }
  }
}

void anonymous namespace'::fillBufferSliceForAttribute(unsigned int a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  unint64_t v8 = v7;
  uint64_t v9 = 48;
  if (a1 == 1) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void **)(a4 + v9);
  if (v7)
  {
    unsigned int v11 = [v7 payloadOffset];
    unsigned int v12 = [v8 bufferSize];
    id v14 = v10;
    unint64_t v15 = __PAIR64__(v12, v11);
  }
  else
  {
    id v14 = v10;
    unint64_t v15 = 0;
  }
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 16 * a1), &v14);
  long long v13 = v14;
  *(void *)(a3 + 16 * a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v15;
  if (v13) {
}
  }

void sub_23351FA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (a9) {

  }
  _Unwind_Resume(a1);
}

void sub_23351FDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_233520158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_233520648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_233520A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_233521568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, re::StringID *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a30 && a31) {
    (*(void (**)(void))(*(void *)a30 + 40))();
  }
  for (uint64_t i = 680; i != -40; i -= 40)
    std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)&STACK[0x350] + i));
  if (a50) {
    BOOL v65 = a51 == 0;
  }
  else {
    BOOL v65 = 1;
  }
  if (!v65) {
    (*(void (**)(void))(*(void *)a50 + 40))();
  }
  re::FixedArray<re::MeshPart>::deinit(&a61);
  _Unwind_Resume(a1);
}

uint64_t *re::MeshPart::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  re::FixedArray<float>::operator=(a1 + 3, a2 + 3);
  re::BufferTable::operator=((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  re::FixedArray<float>::operator=(a1 + 42, a2 + 42);
  long long v6 = *((_OWORD *)a2 + 24);
  long long v5 = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 23) = *((_OWORD *)a2 + 23);
  *((_OWORD *)a1 + 24) = v6;
  *((_OWORD *)a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v5;
  long long v8 = *((_OWORD *)a2 + 27);
  long long v7 = *((_OWORD *)a2 + 28);
  long long v9 = *((_OWORD *)a2 + 26);
  *(_OWORD *)((char *)a1 + 460) = *(_OWORD *)((char *)a2 + 460);
  *((_OWORD *)a1 + 27) = v8;
  *((_OWORD *)a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v7;
  *((_OWORD *)a1 + 26) = v9;
  if (a1 != a2)
  {
    long long v10 = *(_OWORD *)((char *)a2 + 476);
    *(uint64_t *)((char *)a1 + 49re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(uint64_t *)((char *)a2 + 492);
    *(_OWORD *)((char *)a1 + 476) = v10;
  }
  uint64_t v11 = a2[63];
  uint64_t v12 = a2[64];
  a2[63] = 0;
  a2[64] = (uint64_t)"";
  uint64_t v13 = a1[63];
  uint64_t v14 = a1[64];
  a1[63] = v11;
  a1[64] = v12;
  v17[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v17[1] = v14;
  re::StringID::destroyString((re::StringID *)v17);
  long long v15 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)((char *)a1 + 53re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(_OWORD *)((char *)a2 + 532);
  *(_OWORD *)(a1 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v15;
  return a1;
}

void sub_233521970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233521B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_233521F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a6)
  {
    if (a7) {
      (*(void (**)(void))(*(void *)a6 + 40))();
    }
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::RestPoseComponents::RestPoseComponents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 48);
  long long v5 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 8))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (*(void *)(a1 + 8) > v12)
    {
      *(_OWORD *)(*(void *)(a1 + 16) + 16 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(_OWORD *)(*(void *)(a2 + 16) + v11);
      if (*(void *)(a2 + 8) <= v12) {
        goto LABEL_11;
      }
      if (*(void *)(a1 + 32) <= v12) {
        goto LABEL_12;
      }
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(_OWORD *)(*(void *)(a2 + 16) + v11 + 16);
      if (*(void *)(a2 + 8) <= v12) {
        goto LABEL_13;
      }
      if (*(void *)(a1 + 56) <= v12) {
        goto LABEL_14;
      }
      *(_OWORD *)(*(void *)(a1 + 64) + 16 * v12++) = *(_OWORD *)(*(void *)(a2 + 16) + v11 + 32);
      v11 += 48;
      if (v12 >= *(void *)(a2 + 8)) {
        return a1;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1;
}

void sub_2335224EC(_Unwind_Exception *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(v3);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  re::FixedArray<CoreIKTransform>::deinit(v1);
  _Unwind_Resume(a1);
}

id anonymous namespace'::makeJointNamesArray(uint64_t a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:*(void *)(a1 + 8)];
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = (void *)(*(void *)(a1 + 16) + 8);
    uint64_t v5 = 16 * v3;
    do
    {
      unint64_t v6 = [NSString stringWithUTF8String:*v4];
      [v2 addObject:v6];

      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return v2;
}

void sub_2335225BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::makeParentIndicesArray(uint64_t a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:*(void *)(a1 + 8)];
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(unsigned int **)(a1 + 16);
    uint64_t v5 = 4 * v3;
    do
    {
      unint64_t v6 = [NSNumber numberWithUnsignedInt:*v4];
      [v2 addObject:v6];

      ++v4;
      v5 -= 4;
    }
    while (v5);
  }
  return v2;
}

void sub_233522678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 anonymous namespace'::makeInverseBindPoseArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  *((void *)a1 + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  *((void *)a1 + 1) = v4;
  if (v4)
  {
    if (v4 >> 58)
    {
LABEL_14:
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, v4);
      _os_crash();
      __break(1u);
LABEL_15:
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v9 = v7;
    *((void *)a1 + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v7;
    if (!v7) {
      goto LABEL_15;
    }
    long long v10 = v7;
    if (v4 != 1)
    {
      bzero(v7, (v4 << 6) - 64);
      long long v10 = &v9[4 * v4 - 4];
    }
    result.n128_u64[0] = 0;
    uint64_t v10[2] = 0u;
    v10[3] = 0u;
    *long long v10 = 0u;
    v10[1] = 0u;
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (*(void *)(a2 + 8))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (v4 != v12)
    {
      uint64_t v13 = *(void *)(a2 + 16) + v11 * 16;
      __n128 result = *(__n128 *)v13;
      long long v14 = *(_OWORD *)(v13 + 16);
      long long v15 = *(_OWORD *)(v13 + 32);
      long long v16 = *(_OWORD *)(v13 + 48);
      uint64_t v17 = &v9[v11];
      *uint64_t v17 = result;
      v17[1] = v14;
      void v17[2] = v15;
      v17[3] = v16;
      ++v12;
      v11 += 4;
      if (v12 >= *(void *)(a2 + 8)) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

void sub_233522910(_Unwind_Exception *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::RestPoseComponents::~RestPoseComponents(_anonymous_namespace_::RestPoseComponents *this)
{
}

void sub_233522CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a6)
  {
    if (a7) {
      (*(void (**)(void))(*(void *)a6 + 40))();
    }
  }

  _Unwind_Resume(a1);
}

void sub_23352369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, re::StringID *a17, char a18)
{
  re::FixedArray<CoreIKTransform>::deinit(v20);
  re::FixedArray<CoreIKTransform>::deinit(v21);
  re::FixedArray<CoreIKTransform>::deinit(a11);

  re::FixedArray<re::StringID>::deinit(v19);
  re::StringID::destroyString(a17);

  _Unwind_Resume(a1);
}

void sub_233523890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233524274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,id a59)
{
  _Unwind_Resume(a1);
}

uint64_t re::FixedArray<re::MeshPart>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)__n128 result = a2;
  *(void *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x75075075075076)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 560, a3);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = result;
  __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 560 * a3, 16);
  *(void *)(v4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = result;
  if (!result)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    __n128 result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    *(void *)&long long v7 = 0x7F0000007FLL;
    *((void *)&v7 + 1) = 0x7F0000007FLL;
    int32x4_t v8 = vdupq_n_s32(0x7F800000u);
    do
    {
      *(_OWORD *)(result + 304) = 0uLL;
      *(_OWORD *)(result + 320) = 0uLL;
      *(_OWORD *)(result + 27re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0uLL;
      *(_OWORD *)(result + 28re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0uLL;
      *(_OWORD *)(result + 240) = 0uLL;
      *(_OWORD *)(result + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
      *(_OWORD *)(result + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0uLL;
      *(_OWORD *)(result + 224) = 0uLL;
      *(_OWORD *)(result + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
      *(_OWORD *)(result + 19re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0uLL;
      *(_OWORD *)(result + 144) = 0uLL;
      *(_OWORD *)(result + 160) = 0uLL;
      *(_OWORD *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
      *(_OWORD *)(result + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
      *(_OWORD *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
      *(_OWORD *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0uLL;
      *(_OWORD *)__n128 result = 0uLL;
      *(_DWORD *)(result + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
      *(void *)(result + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(result + 224) = 0;
      *(void *)(result + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(result + 240) = 0;
      *(void *)(result + 24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(result + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(result + 264) = 0;
      *(_DWORD *)(result + 27re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_OWORD *)(result + 280) = 0uLL;
      *(_OWORD *)(result + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
      *(_DWORD *)(result + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
      *(void *)(result + 344) = 0;
      *(void *)(result + 35re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(void *)(result + 33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_OWORD *)(result + 36re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = xmmword_23435FD50;
      *(_OWORD *)(result + 384) = xmmword_23435FD60;
      *(_OWORD *)(result + 400) = xmmword_23435FD80;
      *(_OWORD *)(result + 41re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23435FBB0;
      *(int32x4_t *)(result + 43re::FixedArray<re::StringID>::deinit((void *)this + 2) = v8;
      *(_OWORD *)(result + 44re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v7;
      *(_WORD *)(result + 474) = 0;
      *(unsigned char *)(result + 47re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(void *)(result + 464) = 0;
      *(void *)(result + 504) = 0;
      *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = "";
      *(void *)(result + 52re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(unsigned char *)(result + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 3;
      *(_DWORD *)(result + 540) = 1;
      *(_DWORD *)(result + 544) = 25172350;
      uint64_t v9 = result + 476;
      *(void *)(result + 47re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = -1;
      *(void *)(result + 484) = -1;
      result += 560;
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = -1;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 27re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(result + 28re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(result + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(result + 19re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(result + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)__n128 result = 0u;
  *(_OWORD *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(result + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  *(void *)(result + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(result + 240) = 0;
  *(void *)(result + 24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(result + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 264) = 0;
  *(_DWORD *)(result + 27re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(result + 280) = 0u;
  *(_OWORD *)(result + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(result + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(result + 344) = 0;
  *(void *)(result + 35re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(result + 33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(result + 36re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = xmmword_23435FD50;
  *(_OWORD *)(result + 384) = xmmword_23435FD60;
  *(_OWORD *)(result + 400) = xmmword_23435FD80;
  *(_OWORD *)(result + 41re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23435FBB0;
  *(void *)&long long v10 = 0x7F0000007FLL;
  *((void *)&v10 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(result + 43re::FixedArray<re::StringID>::deinit((void *)this + 2) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(result + 44re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v10;
  *(_WORD *)(result + 474) = 0;
  *(unsigned char *)(result + 47re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(result + 464) = 0;
  *(void *)(result + 504) = 0;
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = "";
  *(void *)(result + 52re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(result + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 3;
  *(_DWORD *)(result + 540) = 1;
  *(_DWORD *)(result + 544) = 25172350;
  *(void *)(result + 47re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = -1;
  *(void *)(result + 484) = -1;
  *(void *)(result + 49re::FixedArray<re::StringID>::deinit((void *)this + 2) = -1;
  return result;
}

void sub_233524974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::anonymous namespace'::MeshPayloadBuilder::ContiguousLayout::createDirectMeshPayload(re::_anonymous_namespace_::MeshPayloadBuilder::ContiguousLayout *this, unint64_t a2, unsigned int a3, Device *a4)
{
  uint64_t v5 = (void *)DRMemoryResourceCreate();
  if (!v5)
  {
LABEL_8:

    return v5;
  }
  uint64_t Bytes = DRMemoryResourceGetBytes();
  unint64_t Length = DRMemoryResourceGetLength();
  if (!*((unsigned char *)this + 8) && Length >= *((unsigned int *)this + 1))
  {
    uint64_t v9 = *((void *)this + 4);
    if (v9)
    {
      long long v10 = (unsigned int *)*((void *)this + 6);
      uint64_t v11 = &v10[6 * v9];
      do
      {
        memcpy((void *)(Bytes + *v10), *((const void **)v10 + 1), *((void *)v10 + 2));
        v10 += 6;
      }
      while (v10 != v11);
    }
    DRMemoryResourceDidUpdateBytes();
    id v12 = v5;
    goto LABEL_8;
  }
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "requiredSize.hasValue() && dest.size() >= requiredSize.value()", "copyBytes", 83);
  __n128 result = (void *)_os_crash();
  __break(1u);
  return result;
}

void sub_233524A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::DynamicArray<re::MeshModel>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::MeshModel>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x330uLL))
        {
          uint64_t v2 = 816 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 816 * a2, 16);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 816, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 816 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::MeshModel::MeshModel(v11, v8);
          re::MeshModel::~MeshModel((re::MeshModel *)v8);
          v8 += 102;
          v11 += 816;
          v10 -= 816;
        }
        while (v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::MeshModel::MeshModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  *(void *)a1 = *(void *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  long long v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = v6;
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v7 = a2[7];
  *(void *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = a2[6];
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
  a2[6] = 0;
  a2[7] = 0;
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = a2[8];
  a2[8] = v8;
  *(void *)(a1 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v9 = a2[10];
  *(void *)(a1 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = a2[9];
  *(void *)(a1 + 80) = v9;
  a2[9] = 0;
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = a2[11];
  a2[10] = 0;
  a2[11] = v10;
  do
  {
    uint64_t v11 = a2[v4 + 12];
    a2[v4 + 12] = 0;
    *(void *)(a1 + v4 * 8 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:nn180100](a1 + v4 * 8 + 104, (uint64_t)&a2[v4 + 13]);
    v4 += 5;
  }
  while (v4 != 90);
  return a1;
}

void *re::FixedArray<re::MeshVertexAttributeBuffers::Attribute>::deinit(void *result)
{
  if (*result)
  {
    v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (void *)(result[2] + 24);
      uint64_t v5 = 56 * v2;
      do
      {
        if (*v4)
        {
          if (v4[1])
          {
            (*(void (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[2]);
            v4[1] = 0;
            v4[2] = 0;
          }
          *uint64_t v4 = 0;
        }
        v4 += 7;
        v5 -= 56;
      }
      while (v5);
      __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit(void *result)
{
  if (*result)
  {
    v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 56 * v2;
      uint64_t v5 = (uint64_t *)(result[2] + 8);
      do
      {
        double v6 = re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v5);
        v5 += 7;
        v4 -= 56;
      }
      while (v4);
      __n128 result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

double re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::BufferTable::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 64, a2 + 64);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 104, a2 + 104);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=((void *)(a1 + 144), (void *)(a2 + 144));
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 200, a2 + 200);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(a1 + 240, a2 + 240);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  return a1;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    re::DynamicArray<re::BufferView>::operator=(a1 + 64, (uint64_t *)(a2 + 64));
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(a1 + 144, a2 + 144);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::copy((_anonymous_namespace_ *)a1, (uint64_t *)a2);
    re::DynamicArray<re::FixedArray<unsigned long>>::operator=(a1 + 200, (uint64_t *)(a2 + 200));
    re::DynamicArray<unsigned long>::operator=(a1 + 240, (uint64_t *)(a2 + 240));
    uint64_t v4 = *(_DWORD *)(a2 + 280);
    *(_DWORD *)(a1 + 280) = v4;
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      do
      {
        if (*(void *)(a1 + 184) > v6
          && *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, v6))
        {
          int v7 = (void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, v6);
          if (*(void *)(a1 + 80) <= v6)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(void *)(*(void *)(a1 + 96) + vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = *v7;
        }
        ++v6;
        v5 += 16;
      }
      while (v6 < *(unsigned int *)(a1 + 280));
    }
  }
  return a1;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    if (*a1)
    {
      if (*a2 && *a1 != *a2)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    re::BucketArray<RESubscriptionHandle,8ul>::swap((uint64_t)a1, (uint64_t)a2);
  }
  return (uint64_t)a1;
}

uint64_t *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = result[7];
  result[7] = a2[7];
  a2[7] = v2;
  uint64_t v3 = *result;
  void *result = *a2;
  *a2 = v3;
  uint64_t v4 = result[1];
  uint64_t v5 = result[2];
  uint64_t v6 = a2[2];
  result[1] = a2[1];
  result[2] = v6;
  a2[1] = v4;
  a2[2] = v5;
  uint64_t v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  uint64_t v8 = result[6];
  result[6] = a2[6];
  a2[6] = v8;
  uint64_t v9 = result[3];
  result[3] = a2[3];
  a2[3] = v9;
  uint64_t v10 = result[4];
  result[4] = a2[4];
  a2[4] = v10;
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(uint64_t a1)
{
  return a1;
}

void sub_233525128(_Unwind_Exception *a1)
{
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (uint64_t *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a1, i);
      uint64_t v5 = (void *)v4[17];
      if (v5)
      {

        v4[17] = 0;
      }
      uint64_t v6 = (void *)v4[13];
      if (v6)
      {

        v4[13] = 0;
      }
      re::FixedArray<CoreIKTransform>::deinit(v4 + 10);
      uint64_t v7 = (void *)v4[8];
      if (v7)
      {

        v4[8] = 0;
      }
      uint64_t v8 = (void *)v4[4];
      if (v8)
      {

        v4[4] = 0;
      }
      re::FixedArray<CoreIKTransform>::deinit(v4 + 1);
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 152 * (a2 & 3);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 152 * (a2 & 3);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(uint64_t a1)
{
  return a1;
}

void sub_2335253C8(_Unwind_Exception *a1)
{
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 88 * (a2 & 3);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 88 * (a2 & 3);
}

void re::FixedArray<simd_quatf>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 16 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    uint64_t v8 = (void *)((char *)v8 + v5 - 16);
  }
  *uint64_t v8 = 0;
  v8[1] = 0;
}

uint64_t re::DynamicArray<re::DeformationModelData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v3 + 720 * v4;
        do
        {
          uint64_t v6 = v3 + 720;
          for (uint64_t i = 680; i != -40; i -= 40)
            std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v3 + i));
          v3 += 720;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::DeformationModelData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DeformationModelData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x2D0uLL))
        {
          uint64_t v2 = 720 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 720 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 720, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 720 * v9;
        uint64_t v11 = v7;
        do
        {
          for (uint64_t i = 0; i != 90; i += 5)
          {
            uint64_t v13 = *(void *)(v8 + i * 8);
            *(void *)(v8 + i * re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
            v11[i] = v13;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:nn180100]((uint64_t)&v11[i + 1], v8 + i * 8 + 8);
          }
          uint64_t v14 = v8 + 720;
          for (uint64_t j = 680; j != -40; j -= 40)
            std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v8 + j));
          v11 += 90;
          v8 += 720;
        }
        while (v14 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void *re::DynamicArray<re::anonymous namespace'::DeformerBuilders>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          uint64_t v2 = 136 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (uint64_t)(v7 + 10);
        uint64_t v11 = 136 * v9;
        uint64_t v12 = v8 + 80;
        do
        {
          long long v13 = *(_OWORD *)(v12 - 80);
          *(void *)(v10 - 64) = *(void *)(v12 - 64);
          *(_OWORD *)(v10 - 80) = v13;
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(v10 - 56, v12 - 56);
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(v10, v12);
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(v12);
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(v12 - 56);
          v10 += 136;
          v12 += 136;
          v11 -= 136;
        }
        while (v11);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v5 = *(void *)a2;
  if (v5)
  {
    re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::init(a1, v5, *(void *)(a2 + 8));
    unint64_t v6 = *(void *)(a2 + 40);
    if (v6 >= *(void *)(a1 + 40))
    {
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v6 + 3) >> 2);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>((uint64_t)v21, a2, 0, a2, *(void *)(a1 + 40), a1, 0);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = v6 - v8;
      if (v6 != v8)
      {
        uint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + *(void *)(a1 + 40);
          if (*(void *)(a1 + 8) <= v11 >> 2)
          {
            memset(v21, 0, sizeof(v21));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v12 = v4;
          if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
            uint64_t v12 = *(void *)(a1 + 32);
          }
          uint64_t v13 = *(void *)(v12 + 8 * (v11 >> 2));
          uint64_t v14 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a2, v11);
          uint64_t v15 = v13 + 88 * (v11 & 3);
          long long v16 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
          *(_OWORD *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
          long long v17 = *(_OWORD *)(v14 + 32);
          long long v18 = *(_OWORD *)(v14 + 48);
          long long v19 = *(_OWORD *)(v14 + 64);
          *(void *)(v15 + 80) = *(void *)(v14 + 80);
          *(_OWORD *)(v15 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v18;
          *(_OWORD *)(v15 + 64) = v19;
          *(_OWORD *)(v15 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = v17;
          ++v10;
        }
        while (v9 != v10);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>((uint64_t)v21, a2, 0, a2, *(void *)(a2 + 40), a1, 0);
      if (v6 != *(void *)(a1 + 40))
      {
        unint64_t v7 = v6;
        do
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a1, v7++);
        while (v7 != *(void *)(a1 + 40));
      }
    }
    *(void *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_233525E74(_Unwind_Exception *a1)
{
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 352, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = (void *)result;
  if (a2 != a4 || a3 != a5)
  {
    unint64_t v13 = a5 - 1;
    do
    {
      do
      {
        unint64_t v14 = a3;
        uint64_t v15 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a2, a3);
        uint64_t result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a6, a7);
        long long v16 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)uint64_t result = *(_OWORD *)v15;
        *(_OWORD *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
        long long v18 = *(_OWORD *)(v15 + 48);
        long long v17 = *(_OWORD *)(v15 + 64);
        long long v19 = *(_OWORD *)(v15 + 32);
        *(void *)(result + 80) = *(void *)(v15 + 80);
        *(_OWORD *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v18;
        *(_OWORD *)(result + 64) = v17;
        *(_OWORD *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = v19;
        a3 = v14 + 1;
        ++a7;
      }
      while (a2 != a4);
    }
    while (v13 != v14);
    a3 = a5;
  }
  void *v12 = a2;
  v12[1] = a3;
  void v12[2] = a6;
  v12[3] = a7;
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v5 = *(void *)a2;
  if (v5)
  {
    re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::init(a1, v5, *(void *)(a2 + 8));
    unint64_t v6 = *(void *)(a2 + 40);
    if (v6 >= *(void *)(a1 + 40))
    {
      re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v6 + 3) >> 2);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>((void **)v22, a2, 0, a2, *(void *)(a1 + 40), a1, 0);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = v6 - v13;
      if (v6 != v13)
      {
        uint64_t v15 = 0;
        do
        {
          unint64_t v16 = v15 + *(void *)(a1 + 40);
          if (*(void *)(a1 + 8) <= v16 >> 2)
          {
            memset(v22, 0, sizeof(v22));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v17 = v4;
          if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
            uint64_t v17 = *(void *)(a1 + 32);
          }
          uint64_t v18 = *(void *)(v17 + 8 * (v16 >> 2));
          uint64_t v19 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a2, v16);
          uint64_t v20 = v18 + 152 * (v16 & 3);
          *(void *)uint64_t v20 = *(void *)v19;
          re::FixedArray<unsigned char>::FixedArray((void *)(v20 + 8), (uint64_t *)(v19 + 8));
          *(void *)(v20 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(id *)(v19 + 32);
          *(void *)(v20 + 40) = *(void *)(v19 + 40);
          *(_OWORD *)(v20 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_OWORD *)(v19 + 48);
          *(void *)(v20 + 64) = *(id *)(v19 + 64);
          *(void *)(v20 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(void *)(v19 + 72);
          re::FixedArray<unsigned char>::FixedArray((void *)(v20 + 80), (uint64_t *)(v19 + 80));
          *(void *)(v20 + 104) = *(id *)(v19 + 104);
          *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(v19 + 112);
          *(_OWORD *)(v20 + 120) = *(_OWORD *)(v19 + 120);
          *(void *)(v20 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(id *)(v19 + 136);
          *(void *)(v20 + 144) = *(void *)(v19 + 144);
          ++v15;
        }
        while (v14 != v15);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>((void **)v22, a2, 0, a2, *(void *)(a2 + 40), a1, 0);
      if (v6 != *(void *)(a1 + 40))
      {
        unint64_t v7 = v6;
        do
        {
          uint64_t v8 = (uint64_t *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a1, v7);
          uint64_t v9 = (void *)v8[17];
          if (v9)
          {

            v8[17] = 0;
          }
          uint64_t v10 = (void *)v8[13];
          if (v10)
          {

            v8[13] = 0;
          }
          re::FixedArray<CoreIKTransform>::deinit(v8 + 10);
          unint64_t v11 = (void *)v8[8];
          if (v11)
          {

            v8[8] = 0;
          }
          uint64_t v12 = (void *)v8[4];
          if (v12)
          {

            v8[4] = 0;
          }
          re::FixedArray<CoreIKTransform>::deinit(v8 + 1);
          ++v7;
        }
        while (v7 != *(void *)(a1 + 40));
      }
    }
    *(void *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_23352654C(_Unwind_Exception *a1)
{
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 608, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>(void **result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = result;
  if (a2 != a4 || a3 != a5)
  {
    unint64_t v13 = a5 - 1;
    do
    {
      do
      {
        unint64_t v14 = a3;
        uint64_t v15 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a2, a3);
        uint64_t v16 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a6, a7);
        *(void *)uint64_t v16 = *(void *)v15;
        re::FixedArray<unsigned char>::operator=((uint64_t *)(v16 + 8), (uint64_t *)(v15 + 8));
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 32), (void **)(v15 + 32));
        *(void *)(v16 + 40) = *(void *)(v15 + 40);
        *(_OWORD *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_OWORD *)(v15 + 48);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 64), (void **)(v15 + 64));
        *(void *)(v16 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(void *)(v15 + 72);
        re::FixedArray<unsigned char>::operator=((uint64_t *)(v16 + 80), (uint64_t *)(v15 + 80));
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 104), (void **)(v15 + 104));
        *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(v15 + 112);
        *(_OWORD *)(v16 + 120) = *(_OWORD *)(v15 + 120);
        uint64_t result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 136), (void **)(v15 + 136));
        *(void *)(v16 + 144) = *(void *)(v15 + 144);
        a3 = v14 + 1;
        ++a7;
      }
      while (a2 != a4);
    }
    while (v13 != v14);
    a3 = a5;
  }
  void *v12 = a2;
  v12[1] = a3;
  void v12[2] = a6;
  v12[3] = a7;
  return result;
}

void *re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 4);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::FixedArray<re::BufferSlice>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      unint64_t v4 = (id *)result[2];
      uint64_t v5 = 16 * v2;
      do
      {
        if (*v4)
        {

          *unint64_t v4 = 0;
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::DynamicArray<re::MeshModel>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshModel>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshModel>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::NamedVertexBuffer>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::NamedVertexBuffer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::NamedVertexBuffer>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v9 << 6;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          void v11[2] = v13;
          *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v15;
          *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
          *((_WORD *)v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_WORD *)(v8 + 32);
          v11[5] = *(id *)(v8 + 40);
          v11[6] = *(void *)(v8 + 48);
          v11[7] = *(void *)(v8 + 56);
          uint64_t v16 = *(void **)(v8 + 40);
          if (v16)
          {

            *(void *)(v8 + 40) = 0;
          }
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 64;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::NamedVertexBuffer>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 6;
        do
        {
          uint64_t v6 = (void *)*((void *)v3 + 5);
          if (v6)
          {

            *((void *)v3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
          }
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 64);
          v5 -= 64;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = a1[2];
        int v6 = *(_DWORD *)(v5 + v3);
        if (v6 < 0)
        {
          uint64_t v7 = v5 + v3;
          *(_DWORD *)(v5 + vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v6 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v5 + v3 + 8));
          uint64_t v8 = *(void **)(v7 + 24);
          if (v8)
          {

            *(void *)(v7 + 24) = 0;
          }
        }
        ++v4;
        v3 += 40;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v18;
          *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
          long long v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * ((*(void *)(v22 - 16) >> 31) ^ (*(void *)(v22 - 16) >> 1));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 40;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 40 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 40 * v9);
    *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 40 * v9;
  *(_DWORD *)(v25 + v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v9 + 8), a4);
  uint64_t v29 = *(void *)(a1 + 16) + 40 * v9;
  *(void *)(v29 + 24) = *(id *)a5;
  *(void *)(v29 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = *(void *)(a5 + 8);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::FixedArray<re::StringID>::deinit((void *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void sub_2335272B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

re::StringID *re::FixedArray<re::StringID>::init<re::StringID>(re::StringID *result, uint64_t a2, unint64_t a3, const StringID *a4)
{
  *(void *)double result = a2;
  *((void *)result + 1) = a3;
  if (!a3) {
    return result;
  }
  unint64_t v4 = a3;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  int v6 = result;
  double result = (re::StringID *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  *((void *)v6 + re::FixedArray<re::StringID>::deinit((void *)this + 2) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (re::StringID *)_os_crash();
    __break(1u);
    return result;
  }
  while (--v4)
    double result = (re::StringID *)((char *)re::StringID::StringID(result, a4) + 16);
  uint64_t v8 = *(void *)&a4->var0;
  *(void *)double result = *(void *)result & 0xFFFFFFFFFFFFFFFELL | *(void *)&a4->var0 & 1;
  *(void *)double result = *(void *)&a4->var0 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *((void *)result + 1) = a4->var1;
  *(void *)&a4->var0 = 0;
  a4->var1 = "";
  return result;
}

void re::FixedArray<re::MeshLodLevelInfo>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0x1555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 12, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 12 * a3;
  int v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 12 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 12);
    v8 += v5 - 12;
  }
  *(void *)uint64_t v8 = 0;
  *((_DWORD *)v8 + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
}

void *re::IKRigAssetRuntimeData::init(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (char **)(a2 + 16);
    do
    {
      unint64_t v10 = (unint64_t)*(v9 - 1);
      if (v10) {
        unint64_t v11 = *v9;
      }
      else {
        unint64_t v11 = (char *)v9 - 7;
      }
      if (v10) {
        unint64_t v12 = v10 >> 1;
      }
      else {
        unint64_t v12 = v10 >> 1;
      }
      uint64_t v13 = MEMORY[0x237DBA0C0](v11, v12);
      v15[0] = &unk_26E6D85F0;
      v15[3] = v15;
      uint64_t v16 = v13;
      v17[3] = v17;
      v17[0] = &unk_26E6D85F0;
      unint64_t v14 = *((void *)a1 + 1);
      if (v14 <= v8)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v18 = 136315906;
        unsigned int v19 = "operator[]";
        __int16 v20 = 1024;
        int v21 = 468;
        __int16 v22 = 2048;
        unint64_t v23 = v8;
        __int16 v24 = 2048;
        unint64_t v25 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::operator=[abi:nn180100]((uint64_t *)(*((void *)a1 + 2) + v7), &v16);
      std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::~unique_ptr[abi:nn180100](&v16);
      double result = std::__function::__value_func<void ()(CoreIKRig *)>::~__value_func[abi:nn180100](v15);
      ++v8;
      v7 += 40;
      v9 += 4;
    }
    while (a3 != v8);
  }
  return result;
}

uint64_t *std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(CoreIKRig *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  int v6 = a1 + 1;
  uint64_t v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v6 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  unint64_t v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      a1[4] = (uint64_t)v6;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
    }
    else
    {
      a1[4] = (uint64_t)v8;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

void *re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (uint64_t *)result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        uint64_t v4 = std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::~unique_ptr[abi:nn180100](v4) + 5;
        v5 -= 40;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t *re::IKRigAsset::assetType(re::IKRigAsset *this)
{
  {
    re::IKRigAsset::assetType(void)::type = (uint64_t)"IKRig";
    qword_26879E8A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::IKRigAsset::assetType(void)::type);
  }
  return &re::IKRigAsset::assetType(void)::type;
}

void *re::IKRigAsset::init(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v31 = a2;
  double result = re::IKRigAssetRuntimeData::init((_anonymous_namespace_ *)(a1 + 15), a2, a3);
  if (a3)
  {
    unint64_t v20 = a3;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    while (a1[1] > v23)
    {
      re::DynamicString::operator=((re::DynamicString *)(a1[2] + v21), (re::DynamicString *)(v31 + v21));
      if (a5 == v23) {
        goto LABEL_15;
      }
      if (a1[10] <= v23) {
        goto LABEL_16;
      }
      re::StringID::operator=((unint64_t *)(a1[11] + v22), (uint64_t *)(a4 + v22));
      if (a7 == v23) {
        goto LABEL_17;
      }
      if (a1[13] <= v23) {
        goto LABEL_18;
      }
      re::StringID::operator=((unint64_t *)(a1[14] + v22), (uint64_t *)(a6 + v22));
      if (a10 == v23) {
        goto LABEL_19;
      }
      if (a1[4] <= v23) {
        goto LABEL_20;
      }
      double result = re::StringID::operator=((unint64_t *)(a1[5] + v22), (uint64_t *)(a9 + v22));
      if (a12 == v23) {
        goto LABEL_21;
      }
      if (a1[7] <= v23) {
        goto LABEL_22;
      }
      *(void *)(a1[8] + 8 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a11 + 8 * v23);
      ++v23;
      v22 += 16;
      v21 += 32;
      if (v20 == v23) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a5, a5);
    _os_crash();
    __break(1u);
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a7, a7);
    _os_crash();
    __break(1u);
LABEL_18:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a10, a10);
    _os_crash();
    __break(1u);
LABEL_20:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a12, a12);
    _os_crash();
    __break(1u);
LABEL_22:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void *re::IKRigAsset::init(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  unint64_t v33 = a3;
  if (a3)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    while (a5 != v27)
    {
      unint64_t v14 = a1[1];
      if (v14 <= v27) {
        goto LABEL_17;
      }
      re::DynamicString::operator=((re::DynamicString *)(a1[2] + v24), (re::DynamicString *)(a4 + v24));
      if (a7 == v27) {
        goto LABEL_18;
      }
      unint64_t v14 = a1[10];
      if (v14 <= v27) {
        goto LABEL_19;
      }
      re::StringID::operator=((unint64_t *)(a1[11] + v25), (uint64_t *)(a6 + v25));
      if (a10 == v27) {
        goto LABEL_20;
      }
      unint64_t v14 = a1[13];
      if (v14 <= v27) {
        goto LABEL_21;
      }
      re::StringID::operator=((unint64_t *)(a1[14] + v25), (uint64_t *)(a9 + v25));
      if (a12 == v27) {
        goto LABEL_22;
      }
      unint64_t v14 = a1[4];
      if (v14 <= v27) {
        goto LABEL_23;
      }
      re::StringID::operator=((unint64_t *)(a1[5] + v25), (uint64_t *)(a11 + v25));
      if (a14 == v27) {
        goto LABEL_24;
      }
      unint64_t v14 = a1[7];
      if (v14 <= v27) {
        goto LABEL_25;
      }
      *(void *)(a1[8] + 8 * v27) = *(void *)(a13 + 8 * v27);
      uint64_t v32 = *(void *)(a2 + 8 * v27);
      v39[0] = &unk_26E6D8680;
      v39[3] = v39;
      *(void *)uint64_t v40 = v32;
      *(void *)&v44[2] = &v40[8];
      *(void *)&v40[8] = &unk_26E6D8680;
      unint64_t v14 = a1[16];
      if (v14 <= v27) {
        goto LABEL_26;
      }
      std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::operator=[abi:nn180100]((uint64_t *)(a1[17] + v26), (uint64_t *)v40);
      std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v40);
      double result = std::__function::__value_func<void ()(CoreIKRig *)>::~__value_func[abi:nn180100](v39);
      ++v27;
      v26 += 40;
      v25 += 16;
      v24 += 32;
      if (v33 == v27) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a5, a5);
    _os_crash();
    __break(1u);
LABEL_17:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v27;
    __int16 v43 = 2048;
    *(void *)long long v44 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a7, a7);
    _os_crash();
    __break(1u);
LABEL_19:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v27;
    __int16 v43 = 2048;
    *(void *)long long v44 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a10, a10);
    _os_crash();
    __break(1u);
LABEL_21:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v27;
    __int16 v43 = 2048;
    *(void *)long long v44 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a12, a12);
    _os_crash();
    __break(1u);
LABEL_23:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v27;
    __int16 v43 = 2048;
    *(void *)long long v44 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a14, a14);
    _os_crash();
    __break(1u);
LABEL_25:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 468;
    __int16 v41 = 2048;
    unint64_t v42 = v27;
    __int16 v43 = 2048;
    *(void *)long long v44 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    __int16 v46 = 1024;
    int v47 = 468;
    __int16 v48 = 2048;
    unint64_t v49 = v27;
    __int16 v50 = 2048;
    unint64_t v51 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

re *re::IKRigAssetLoader::unloadAsset(re::IKRigAssetLoader *this, void *a2)
{
  return re::internal::destroyPersistent<re::IKRigAsset>((re *)"unloadAsset", 114, a2);
}

re *re::internal::destroyPersistent<re::IKRigAsset>(re *result, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a3 + 15);
    re::FixedArray<re::StringID>::deinit(a3 + 12);
    re::FixedArray<re::StringID>::deinit(a3 + 9);
    re::FixedArray<CoreIKTransform>::deinit(a3 + 6);
    re::FixedArray<re::StringID>::deinit(a3 + 3);
    re::FixedArray<re::DynamicString>::deinit(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::IKRigAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 120)) {
    re::IKRigAssetRuntimeData::init((_anonymous_namespace_ *)(a2 + 120), *(void *)(a2 + 16), *(void *)(a2 + 8));
  }
  return 1;
}

BOOL re::IKRigAssetLoader::isSupportedSourceExtension(re::IKRigAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "ik") == 0;
}

uint64_t re::IKRigAssetLoader::introspectionType(re::IKRigAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CA68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CA68))
  {
    qword_26AF7CA60 = re::internal::getOrCreateInfo((re::internal *)"IKRigAsset", (uint64_t (*)(re::internal *))re::allocInfo_IKRigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_IKRigAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7CA58, 0);
    __cxa_guard_release(&qword_26AF7CA68);
  }
  return qword_26AF7CA60;
}

void *re::allocInfo_IKRigAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CA48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7CAE0, "IKRigAsset");
    __cxa_guard_release(&qword_26AF7CA48);
  }
  return &unk_26AF7CAE0;
}

void re::initInfo_IKRigAsset(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xE2F738A332E04;
  v25[1] = "IKRigAsset";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CA50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CA50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_rigStrings";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7CA78 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_sourceBindTargets";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7CA80 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      BOOL v15 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_targetBindTargets";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x6000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7CA88 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      unsigned int v19 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_solverNames";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7CA90 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::FixedArray<unsigned long>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_solverIDs";
      *(void *)(v23 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7CAA0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v23 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF7CA98 = v23;
      __cxa_guard_release(&qword_26AF7CA50);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CA78;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IKRigAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IKRigAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::IKRigAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IKRigAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void re::IntrospectionInfo<re::FixedArray<unsigned long>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CA70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CA70))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7CAA0);
    qword_26AF7CAA0 = (uint64_t)&unk_26E6D8700;
    __cxa_guard_release(&qword_26AF7CA70);
  }
  if ((_MergedGlobals_95 & 1) == 0)
  {
    uint64_t v2 = re::introspect_size_t((re *)1, a2);
    if ((_MergedGlobals_95 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      _MergedGlobals_95 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7CAA0, 0);
      qword_26AF7CAB0 = 0x1800000004;
      dword_26AF7CAB8 = v4;
      word_26AF7CABC = 0;
      *(void *)&xmmword_26AF7CAC0 = 0;
      *((void *)&xmmword_26AF7CAC0 + 1) = 0xFFFFFFFFLL;
      qword_26AF7CAD0 = v3;
      unk_26AF7CAD8 = 0;
      qword_26AF7CAA0 = (uint64_t)&unk_26E6D8700;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF7CAA0, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x18uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF7CAC0 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::IKRigAsset>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result = 0.0;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::IKRigAsset>(uint64_t a1, uint64_t a2, void *a3)
{
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a3 + 15);
  re::FixedArray<re::StringID>::deinit(a3 + 12);
  re::FixedArray<re::StringID>::deinit(a3 + 9);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 6);
  re::FixedArray<re::StringID>::deinit(a3 + 3);
  return re::FixedArray<re::DynamicString>::deinit(a3);
}

double re::internal::defaultConstructV2<re::IKRigAsset>(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::IKRigAsset>(void *a1)
{
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 15);
  re::FixedArray<re::StringID>::deinit(a1 + 12);
  re::FixedArray<re::StringID>::deinit(a1 + 9);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 6);
  re::FixedArray<re::StringID>::deinit(a1 + 3);
  return re::FixedArray<re::DynamicString>::deinit(a1);
}

void re::IKRigAssetLoader::~IKRigAssetLoader(re::IKRigAssetLoader *this)
{
}

void *re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  int v4 = result;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      void *result = 0;
      result[4] = 0;
      result += 5;
      --v6;
    }
    while (v6);
  }
  void *result = 0;
  result[4] = 0;
  return result;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::~__func()
{
}

void *std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26E6D85F0;
  return result;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D85F0;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::operator()()
{
}

uint64_t std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::target_type()
{
}

void *std::__function::__value_func<void ()(CoreIKRig *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(CoreIKRig *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(CoreIKRig *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(CoreIKRig *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x233529510);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::~__func()
{
}

void *std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26E6D8680;
  return result;
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D8680;
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::operator()()
{
}

uint64_t std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::target_type()
{
}

void *re::IntrospectionFixedArray<unsigned long>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned long>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<unsigned long>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned long>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

void re::IntrospectionFixedArray<unsigned long>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  re::FixedArray<unsigned long>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 8;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned long>::deinit(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<unsigned long>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned long>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<unsigned long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 8 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 8 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  re::FixedArray<unsigned long>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 8 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::BlendShapeWeightsMapping::update<re::MeshAsset>(re::BlendShapeWeightsMapping *a1, void *a2, unint64_t a3, re::MeshNameMap *a4, uint64_t a5, uint64_t a6)
{
  if (*((void *)a1 + 1) != a5)
  {
    re::BlendShapeWeightsMapping::rebuildMappingData<re::MeshAsset>(a1, a2, a3, a4, a6);
    *((void *)a1 + 1) = a5;
  }
  return re::BlendShapeWeightsMapping::updateBlendFactors(a1, a6);
}

uint64_t re::BlendShapeWeightsMapping::rebuildMappingData<re::MeshAsset>(re::BlendShapeWeightsMapping *this, void *a2, unint64_t a3, re::MeshNameMap *a4, uint64_t a5)
{
  if (!*(void *)this)
  {
    *((void *)this + 1) = -1;
  }
  re::BlendShapeWeightsMapping::clear(this);
  re::BlendShapeWeightsDefinitionAsset::constructBlendShapeWeights((uint64_t)a2, *(void *)this, a5);
  return re::BlendShapeWeightsMapping::buildMappingData<re::MeshAsset>(this, a2, a3, a4);
}

void *re::BlendShapeWeightsMapping::updateBlendFactors(void *result, uint64_t a2)
{
  uint64_t v2 = result[6];
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = result[3];
    unint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 32);
    while (v5 != v4)
    {
      uint64_t v8 = result[4];
      unint64_t v9 = *(unsigned int *)(v8 + v3);
      if (v9 == -1)
      {
        int v12 = 0;
      }
      else
      {
        if (v6 <= v9) {
          goto LABEL_12;
        }
        unint64_t v10 = *(unsigned int *)(v8 + v3 + 4);
        uint64_t v11 = v7 + 32 * v9;
        if (*(void *)(v11 + 8) <= v10) {
          goto LABEL_13;
        }
        int v12 = *(_DWORD *)(*(void *)(v11 + 16) + 4 * v10);
      }
      *(_DWORD *)(result[7] + 4 * v4++) = v12;
      v3 += 8;
      if (v2 == v4) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::BlendShapeWeightsMapping::clear(re::BlendShapeWeightsMapping *this)
{
  *((void *)this + 1) = -1;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 2);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5);
  return re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8);
}

uint64_t re::BlendShapeWeightsMapping::blendWeightValues(re::BlendShapeWeightsMapping *this, const re::MeshNameMap *a2, unsigned int a3, int a4)
{
  if (*((_DWORD *)a2 + 54) <= a3) {
    return 0;
  }
  uint64_t v7 = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3) + a4;
  if (v7 >= re::MeshNameMap::meshPartStartIndexForInstance(a2, a3 + 1)) {
    return 0;
  }
  if (*((void *)this + 9) <= (unint64_t)v7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 10) + 16 * v7);
}

uint64_t re::BlendShapeWeightsMapping::buildMappingData<re::MeshAsset>(_anonymous_namespace_ *a1, void *a2, unint64_t a3, re::MeshNameMap *a4)
{
  unint64_t v9 = (uint64_t *)a1;
  uint64_t v130 = *MEMORY[0x263EF8340];
  uint64_t v10 = *((void *)a4 + 42);
  if (v10) {
    LODWORD(v10) = *(_DWORD *)(*((void *)a4 + 43) + 4 * v10 - 4);
  }
  uint64_t v112 = 0;
  v113 = 0;
  uint64_t v114 = 0;
  int v12 = *((_DWORD *)a4 + 54);
  if (v12)
  {
    unint64_t v4 = 0;
    do
    {
      unsigned int v13 = re::MeshNameMap::modelIndex(a4, v4);
      uint64_t v14 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>((void *)a3, v13);
      started = (_anonymous_namespace_ *)re::MeshNameMap::meshPartStartIndexForInstance(a4, v4);
      uint64_t v15 = *(void *)(v14 + 96);
      if (v15) {
        uint64_t v16 = *(void *)(v15 + 40);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v14 + 56);
      if (v16 == v17 && v17 != 0)
      {
        unint64_t v19 = 0;
        uint64_t v20 = v113;
        uint64_t v21 = v114 + 4 * started;
        do
        {
          if (v15)
          {
            if (*(void *)(v15 + 40) > v19)
            {
              int v22 = *(_DWORD *)(*(void *)(v15 + 48) + 4 * v19);
              if (v22 != -1)
              {
                unint64_t v23 = started + v19;
                if ((unint64_t)v20 <= v23) {
                  goto LABEL_116;
                }
                *(_DWORD *)(v21 + 4 * v19) = v22;
              }
            }
          }
          ++v19;
        }
        while (v16 != v19);
      }
      unint64_t v4 = (v4 + 1);
    }
    while (v4 != v12);
  }
  uint64_t v24 = *((void *)a4 + 42);
  if (v24) {
    LODWORD(v24) = *(_DWORD *)(*((void *)a4 + 43) + 4 * v24 - 4);
  }
  uint64_t v109 = 0;
  v110 = 0;
  uint64_t v111 = 0;
  uint64_t v26 = a2[7];
  v107 = a4;
  v99 = v9;
  v100 = a2;
  long long v96 = (re::MeshNameMap *)a3;
  int v94 = v12;
  if (!v26)
  {
    unint64_t v53 = 0;
    uint64_t v48 = *v9;
    v9[2] = *v9;
    v9[3] = 0;
    goto LABEL_63;
  }
  unint64_t v104 = 0;
  uint64_t v27 = a2[9];
  uint64_t v28 = v27 + 48 * v26;
  do
  {
    unsigned int v29 = *(_DWORD *)(v27 + 40);
    unsigned int v30 = *(_DWORD *)(v27 + 44);
    if (v29 <= v30) {
      unint64_t v31 = v30;
    }
    else {
      unint64_t v31 = v29;
    }
    if (a2[2] <= v31)
    {
      uint64_t v5 = *re::assetsLogObjects(v25);
      uint64_t v25 = (re *)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (!v25) {
        goto LABEL_51;
      }
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v31;
      long long v44 = v5;
      long long v45 = "Blend factor asset has an invalid blend factor values index: %u.";
      uint32_t v46 = 8;
      goto LABEL_54;
    }
    re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v107, (unsigned __int8 *)v27, &buf);
    v116[0] = v96;
    v116[1] = v107;
    v116[2] = (re::MeshNameMap *)buf;
    v116[6] = (re::MeshNameMap *)v127;
    uint64_t v117 = 0;
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v116[3], (uint64_t)&buf + 8);
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf + 8);
    unint64_t v4 = (unint64_t)v116[2];
    if (!v116[2])
    {
      uint64_t v25 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v116[3]);
LABEL_50:
      uint64_t v5 = *re::assetsLogObjects(v25);
      uint64_t v25 = (re *)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (!v25) {
        goto LABEL_51;
      }
      uint64_t v47 = *(void *)(v27 + 16);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v47;
      long long v44 = v5;
      long long v45 = "Blend factor for mesh %s was not applied.";
      uint32_t v46 = 12;
LABEL_54:
      _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, v46);
      goto LABEL_51;
    }
    uint64_t v32 = 0;
    a3 = 0;
    unint64_t v33 = (char *)v116[2] - 1;
LABEL_30:
    uint64_t v34 = v32;
    do
    {
      *(void *)&unsigned long long buf = v34;
      unsigned int v35 = (*(uint64_t (**)(uint64_t, unsigned long long *))(*(void *)v117 + 16))(v117, &buf);
      *(void *)&unsigned long long buf = v34;
      uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned long long *))(*(void *)v117 + 16))(v117, &buf);
      unint64_t v23 = re::MeshNameMap::meshPartStartIndexForInstance(v107, v35) + WORD2(v5);
      long long v36 = (const DeformationModelData *)v113;
      if ((unint64_t)v113 <= v23) {
        goto LABEL_115;
      }
      if (*(_DWORD *)(v114 + 4 * v23) != -1)
      {
        a3 = (unint64_t)v110;
        if ((unint64_t)v110 <= v23) {
          goto LABEL_124;
        }
        if (*(_DWORD *)(v111 + 4 * v23) == -1)
        {
          *(void *)&unsigned long long buf = v34;
          unsigned int v37 = (*(uint64_t (**)(uint64_t, unsigned long long *))(*(void *)v117 + 16))(v117, &buf);
          unsigned int v38 = re::MeshNameMap::modelIndex(v116[1], v37);
          uint64_t v39 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(v96, v38);
          uint64_t v42 = *(void *)(v39 + 96);
          uint64_t v40 = (re::BlendShapeModelUtil *)(v39 + 96);
          uint64_t v41 = v42;
          if (v42 && *(void *)(v41 + 40) > (unint64_t)WORD2(v5)) {
            uint64_t v43 = *(unsigned int *)(*(void *)(v41 + 48) + 4 * WORD2(v5));
          }
          else {
            uint64_t v43 = 0xFFFFFFFFLL;
          }
          v104 += (re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v40, (const DeformationModelData *)v43) + 3) & 0xFFFFFFFFFFFFFFFCLL;
          a3 = (unint64_t)v110;
        }
        if (a3 <= v23)
        {
LABEL_125:
          uint64_t v115 = 0;
          unint64_t v49 = v118;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 468;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v23;
          __int16 v123 = 2048;
          v124 = (const DeformationModelData *)a3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_126;
        }
        *(_DWORD *)(v111 + 4 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v31;
        uint64_t v32 = v34 + 1;
        a3 = 1;
        if (v33 == v34)
        {
          uint64_t v25 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v116[3]);
          goto LABEL_51;
        }
        goto LABEL_30;
      }
      ++v34;
    }
    while ((char *)v4 != v34);
    uint64_t v25 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v116[3]);
    if ((a3 & 1) == 0) {
      goto LABEL_50;
    }
LABEL_51:
    v27 += 48;
    unint64_t v9 = v99;
    a2 = v100;
  }
  while (v27 != v28);
  uint64_t v48 = *v99;
  unint64_t v49 = (unsigned char *)v104;
  v99[2] = *v99;
  v99[3] = v104;
  a4 = v107;
  int v12 = v94;
  if (!v104)
  {
    unint64_t v53 = 0;
    goto LABEL_63;
  }
  if (v104 >> 61)
  {
LABEL_126:
    re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v49);
    _os_crash();
    __break(1u);
LABEL_127:
    re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  __int16 v50 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v48 + 32))(v48, 8 * v104, 4);
  v99[4] = (uint64_t)v50;
  if (!v50) {
    goto LABEL_127;
  }
  long long v52 = v50;
  if (v104 != 1)
  {
    memset(v50, 255, 8 * v104 - 8);
    v52 += v104 - 1;
  }
  *long long v52 = -1;
  uint64_t v48 = *v99;
  unint64_t v53 = v104;
LABEL_63:
  re::FixedArray<int>::init<>(v9 + 5, v48, v53);
  uint64_t v56 = *v9;
  long long v55 = v9 + 8;
  uint64_t v54 = v56;
  uint64_t v57 = *((void *)a4 + 42);
  if (v57) {
    unint64_t v58 = *(unsigned int *)(*((void *)a4 + 43) + 4 * v57 - 4);
  }
  else {
    unint64_t v58 = 0;
  }
  re::FixedArray<re::Slice<unsigned int>>::init<>(v55, v54, v58);
  if (v12)
  {
    unsigned int v59 = 0;
    unint64_t v60 = 0;
    while (1)
    {
      unsigned int v61 = re::MeshNameMap::modelIndex(v107, v59);
      uint64_t v62 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(v96, v61);
      unsigned int v95 = v59;
      unsigned int v63 = re::MeshNameMap::meshPartStartIndexForInstance(v107, v59);
      uint64_t v98 = *(void *)(v62 + 56);
      if (v98) {
        break;
      }
LABEL_105:
      unsigned int v59 = v95 + 1;
      if (v95 + 1 == v94) {
        goto LABEL_106;
      }
    }
    uint64_t v64 = 0;
    uint64_t v97 = v63;
    v108 = (re::BlendShapeModelUtil *)(v62 + 96);
    while (2)
    {
      a3 = v64 + v97;
      uint64_t v20 = v110;
      if ((unint64_t)v110 <= v64 + v97) {
        goto LABEL_117;
      }
      if (*(_DWORD *)(v111 + 4 * a3) != -1)
      {
        uint64_t v20 = v113;
        if ((unint64_t)v113 <= a3) {
          goto LABEL_118;
        }
        unint64_t v105 = *(unsigned int *)(v111 + 4 * a3);
        uint64_t v101 = v64;
        unint64_t v102 = v64 + v97;
        unint64_t v103 = v60;
        long long v36 = (const DeformationModelData *)*(unsigned int *)(v114 + 4 * a3);
        uint64_t v65 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v108, v36);
        memset(v116, 0, 36);
        *(re::MeshNameMap **)((char *)&v116[4] + 4) = (re::MeshNameMap *)0x7FFFFFFF;
        unsigned int v106 = v65;
        if (v65)
        {
          uint64_t v5 = 0;
          long long v67 = v65;
          do
          {
            re::BlendShapeModelUtil::blendShapeTargetName(v108, v36, (unint64_t)v5, (re::StringID *)&buf);
            unint64_t v68 = buf;
            unint64_t v69 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * ((v68 >> 31) ^ (v68 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                         * ((v68 >> 31) ^ (v68 >> 1))) >> 27));
            unint64_t v70 = v69 ^ (v69 >> 31);
            if (v116[0])
            {
              a3 = v70 % LODWORD(v116[3]);
              uint64_t v71 = *((unsigned int *)v116[1] + a3);
              if (v71 != 0x7FFFFFFF)
              {
                id v72 = v116[2];
                v73 = (char *)*((void *)&buf + 1);
                do
                {
                  int v74 = (char *)v72 + 32 * v71;
                  if ((*((void *)v74 + 1) ^ v68) <= 1)
                  {
                    char v75 = (const char *)*((void *)v74 + 2);
                    if (v75 == v73 || !strcmp(v75, v73)) {
                      goto LABEL_90;
                    }
                  }
                  uint64_t v71 = *((_DWORD *)v72 + 8 * v71) & 0x7FFFFFFF;
                }
                while (v71 != 0x7FFFFFFF);
              }
            }
            else
            {
              a3 = 0;
            }
            uint64_t v76 = HIDWORD(v116[4]);
            if (HIDWORD(v116[4]) == 0x7FFFFFFF)
            {
              uint64_t v76 = LODWORD(v116[4]);
              int v77 = (int)v116[4];
              if (LODWORD(v116[4]) == LODWORD(v116[3]))
              {
                re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v116, 2 * HIDWORD(v116[3]));
                int v77 = (int)v116[4];
                a3 = v70 % LODWORD(v116[3]);
              }
              LODWORD(v116[4]) = v77 + 1;
              __int16 v78 = v116[2];
              int v79 = *((_DWORD *)v116[2] + 8 * v76);
            }
            else
            {
              __int16 v78 = v116[2];
              int v79 = *((_DWORD *)v116[2] + 8 * HIDWORD(v116[4]));
              HIDWORD(v116[4]) = v79 & 0x7FFFFFFF;
            }
            uint64_t v80 = 32 * v76;
            *(_DWORD *)((char *)v78 + v80) = v79 | 0x80000000;
            *(_DWORD *)((char *)v116[2] + v80) = *((_DWORD *)v116[2] + 8 * v76) & 0x80000000 | *((_DWORD *)v116[1] + a3);
            re::StringID::StringID((re::MeshNameMap *)((char *)v116[2] + 32 * v76 + 8), (const StringID *)&buf);
            *((void *)v116[2] + 4 * v76 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v5;
            *((_DWORD *)v116[1] + are::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v76;
            ++HIDWORD(v116[3]);
            ++LODWORD(v116[5]);
LABEL_90:
            re::StringID::destroyString((re::StringID *)&buf);
            uint64_t v5 = ((char *)v5 + 1);
          }
          while (v5 != v67);
        }
        char v81 = (const DeformationModelData *)v100[2];
        unint64_t v4 = v105;
        if ((unint64_t)v81 <= v105) {
          goto LABEL_119;
        }
        uint64_t v82 = v100[4];
        uint64_t v83 = v82 + 24 * v105;
        unsigned int v85 = *(_DWORD *)(v83 + 8);
        uint64_t v84 = (unint64_t *)(v83 + 8);
        a3 = v85;
        uint64_t v5 = v103;
        if (v85)
        {
          unint64_t v23 = 0;
          uint64_t v86 = (void *)(v82 + 24 * v105 + 16);
          while (1)
          {
            unint64_t v4 = *v84;
            if (*v84 <= v23) {
              break;
            }
            int v87 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v116, (void *)(*v86 + 16 * v23));
            if (v87)
            {
              unint64_t v4 = *v87 + v103;
              long long v36 = (const DeformationModelData *)v99[3];
              if ((unint64_t)v36 <= v4) {
                goto LABEL_114;
              }
              *(void *)(v99[4] + 8 * v4) = v105 | (v23 << 32);
            }
            if (++v23 == a3) {
              goto LABEL_99;
            }
          }
          uint64_t v115 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 476;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v23;
          __int16 v123 = 2048;
          v124 = (const DeformationModelData *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_114:
          uint64_t v115 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 468;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v4;
          __int16 v123 = 2048;
          v124 = v36;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_115:
          uint64_t v115 = 0;
          uint64_t v20 = (re::MeshNameMap *)v118;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 468;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v23;
          __int16 v123 = 2048;
          v124 = v36;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_116:
          *(void *)v118 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v116[0]) = 136315906;
          *(re::MeshNameMap **)((char *)v116 + 4) = (re::MeshNameMap *)"operator[]";
          WORD2(v116[1]) = 1024;
          *(_DWORD *)((char *)&v116[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 468;
          WORD1(v116[2]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[2] + 4) = (re::MeshNameMap *)v23;
          WORD2(v116[3]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_117:
          *(void *)v118 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v116[0]) = 136315906;
          *(re::MeshNameMap **)((char *)v116 + 4) = (re::MeshNameMap *)"operator[]";
          WORD2(v116[1]) = 1024;
          *(_DWORD *)((char *)&v116[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 468;
          WORD1(v116[2]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[2] + 4) = (re::MeshNameMap *)a3;
          WORD2(v116[3]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_118:
          *(void *)v118 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          char v81 = (const DeformationModelData *)&_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v116[0]) = 136315906;
          *(re::MeshNameMap **)((char *)v116 + 4) = (re::MeshNameMap *)"operator[]";
          WORD2(v116[1]) = 1024;
          *(_DWORD *)((char *)&v116[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 468;
          WORD1(v116[2]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[2] + 4) = (re::MeshNameMap *)a3;
          WORD2(v116[3]) = 2048;
          *(re::MeshNameMap **)((char *)&v116[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v115 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          unint64_t v89 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 797;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v4;
          __int16 v123 = 2048;
          v124 = v81;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v115 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "slice";
          __int16 v119 = 1024;
          int v120 = 502;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v5;
          __int16 v123 = 2048;
          v124 = (const DeformationModelData *)v89;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_121:
          re::internal::assertLog((re::internal *)7, v66, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 508, v5, v90, v88);
          _os_crash();
          __break(1u);
LABEL_122:
          re::internal::assertLog((re::internal *)7, v66, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, v5, v90, v88);
          _os_crash();
          __break(1u);
LABEL_123:
          uint64_t v115 = 0;
          unint64_t v23 = (unint64_t)v118;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 468;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)a3;
          __int16 v123 = 2048;
          v124 = (const DeformationModelData *)v89;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_124:
          uint64_t v115 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          unsigned long long buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(void *)&v118[4] = "operator[]";
          __int16 v119 = 1024;
          int v120 = 468;
          __int16 v121 = 2048;
          v122 = (re::MeshNameMap *)v23;
          __int16 v123 = 2048;
          v124 = (const DeformationModelData *)a3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_125;
        }
LABEL_99:
        unint64_t v88 = v99[6];
        unint64_t v89 = v88 + 1;
        if (v88 + 1 <= v103) {
          goto LABEL_120;
        }
        uint64_t v90 = (v106 + 3) & 0x1FFFFFFFCLL;
        unint64_t v91 = v103 + v90;
        if (__CFADD__(v103, v90)) {
          goto LABEL_121;
        }
        if (v91 > v88) {
          goto LABEL_122;
        }
        unint64_t v89 = v99[9];
        a3 = v102;
        if (v89 <= v102) {
          goto LABEL_123;
        }
        long long v92 = (void *)(v99[10] + 16 * v102);
        *long long v92 = v99[7] + 4 * v103;
        v92[1] = v90;
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v116);
        unint64_t v60 = v91;
        uint64_t v64 = v101;
      }
      if (++v64 == v98) {
        goto LABEL_105;
      }
      continue;
    }
  }
LABEL_106:
  if (v109 && v110) {
    (*(void (**)(void))(*(void *)v109 + 40))();
  }
  uint64_t result = v112;
  if (v112)
  {
    if (v113) {
      return (*(uint64_t (**)(void))(*(void *)v112 + 40))();
    }
  }
  return result;
}

uint64_t *re::SkeletonAsset::assetType(re::SkeletonAsset *this)
{
  {
    re::SkeletonAsset::assetType(void)::type = (uint64_t)"Skeleton";
    qword_26879E8C8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SkeletonAsset::assetType(void)::type);
  }
  return &re::SkeletonAsset::assetType(void)::type;
}

uint64_t re::SkeletonAsset::SkeletonAsset(uint64_t a1, const StringID *a2)
{
  unint64_t v4 = re::StringID::StringID((re::StringID *)a1, a2);
  re::FixedArray<re::StringID>::FixedArray((unint64_t *)v4 + 2, (uint64_t)&a2[1]);
  re::FixedArray<unsigned int>::FixedArray((uint64_t *)(a1 + 40), (uint64_t)&a2[2].var1);
  re::FixedArray<re::GenericSRT<float>>::FixedArray((void *)(a1 + 64), (uint64_t)&a2[4]);
  *(void *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return a1;
}

double re::SkeletonAsset::SkeletonAsset(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *(void *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  uint64_t v3 = a2[3];
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2[2];
  *(void *)(a1 + 24) = v3;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = a2[4];
  a2[4] = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v5 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v5;
  a2[5] = 0;
  a2[6] = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2[7];
  a2[7] = v6;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v7 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = v7;
  a2[8] = 0;
  a2[9] = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = a2[10];
  a2[10] = v8;
  *(void *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return result;
}

char **re::SkeletonAssetLoader::introspectionType(re::SkeletonAssetLoader *this)
{
  int v1 = &off_268773000;
  {
    int v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::SkeletonAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"SkeletonAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletonAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletonAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletonAsset>, 0);
      int v1 = &off_268773000;
    }
  }
  return v1[354];
}

uint64_t re::SkeletonAssetLoader::allocateSampleAsset(re::SkeletonAssetLoader *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  long long v11 = 0u;
  *(_OWORD *)int v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  re::StringID::destroyString((re::StringID *)&v10);
  uint64_t v1 = re::internal::compileTimeHornerHash<15ul>(0, 0, 14);
  *(void *)&v10.var0 = 2 * v1;
  v10.var1 = "SampleSkeleton";
  if (!*((void *)&v11 + 1))
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 468;
    __int16 v21 = 2048;
    uint64_t v22 = 0;
    __int16 v23 = 2048;
    uint64_t v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = v12[0];
  re::StringID::destroyString(v12[0]);
  uint64_t v5 = re::internal::compileTimeHornerHash<12ul>(0, 0, 11);
  *(void *)uint64_t v4 = 2 * v5;
  *((void *)v4 + 1) = "SampleJoint";
  if (!(void)v13)
  {
LABEL_14:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 468;
    __int16 v21 = 2048;
    uint64_t v22 = 0;
    __int16 v23 = 2048;
    uint64_t v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 468;
    __int16 v21 = 2048;
    uint64_t v22 = 0;
    __int16 v23 = 2048;
    uint64_t v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  **((_DWORD **)&v13 + 1) = -1;
  if (!*((void *)&v14 + 1)) {
    goto LABEL_15;
  }
  uint64_t v6 = v15;
  v15[1] = 0u;
  v6[2] = 0u;
  *uint64_t v6 = 0u;
  uint64_t v7 = re::globalAllocators((re *)v5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 248, 8);
  re::SkeletonAsset::SkeletonAsset(v8, &v10);
  if ((void)v14)
  {
    if (*((void *)&v14 + 1))
    {
      (*(void (**)(void))(*(void *)v14 + 40))();
      *((void *)&v14 + 1) = 0;
      uint64_t v15 = 0;
    }
    *(void *)&long long v14 = 0;
  }
  if (v12[1])
  {
    if ((void)v13)
    {
      (*(void (**)(void))(*(void *)v12[1] + 40))();
      long long v13 = 0uLL;
    }
    v12[1] = 0;
  }
  re::FixedArray<re::StringID>::deinit(&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

BOOL re::SkeletonAssetLoader::createRuntimeData(re *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::globalAllocators(a1)[2];
  if (a2[13]) {
    re::Skeleton::deinit((re::Skeleton *)(a2 + 11));
  }
  uint64_t v4 = a2[3];
  *(void *)&long long buf = a2[4];
  *((void *)&buf + 1) = v4;
  uint64_t v5 = a2[6];
  v17[0] = a2[7];
  v17[1] = v5;
  uint64_t v6 = a2[9];
  v16[0] = a2[10];
  v16[1] = v6;
  re::Skeleton::init(a2 + 11, v3, a2, &buf, v17, (unint64_t)v16, (uint64_t)v12);
  int v8 = v12[0];
  if (!v12[0])
  {
    unint64_t v9 = *re::assetTypesLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v14) {
        long long v11 = *(unsigned char **)&v15[7];
      }
      else {
        long long v11 = v15;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid skeleton data: %s", (uint8_t *)&buf, 0xCu);
    }
    if (!v12[0] && v13 && (v14 & 1) != 0) {
      (*(void (**)(void))(*(void *)v13 + 40))();
    }
  }
  return v8 != 0;
}

uint64_t *re::SkeletonAssetLoader::unloadAsset(re::SkeletonAssetLoader *this, uint64_t *a2)
{
  double result = re::globalAllocators(this);
  if (a2)
  {
    uint64_t v4 = result[2];
    re::Skeleton::~Skeleton((re::Skeleton *)(a2 + 11));
    re::FixedArray<CoreIKTransform>::deinit(a2 + 8);
    re::FixedArray<CoreIKTransform>::deinit(a2 + 5);
    re::FixedArray<re::StringID>::deinit(a2 + 2);
    re::StringID::destroyString((re::StringID *)a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 40);
    return (uint64_t *)v5(v4, a2);
  }
  return result;
}

BOOL re::SkeletonAssetLoader::isSupportedSourceExtension(re::SkeletonAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "reskel") == 0;
}

void *re::allocInfo_SkeletonAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_96, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_96))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7CBA8, "SkeletonAssetData");
    __cxa_guard_release(&_MergedGlobals_96);
  }
  return &unk_26AF7CBA8;
}

void re::initInfo_SkeletonAssetData(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x54F97D4E1DCB899ALL;
  v21[1] = "SkeletonAssetData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CB60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CB60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "name";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7CB88 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "jointNames";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7CB90 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "parentIndices";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x2800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7CB98 = v16;
      int v17 = re::introspectionAllocator((re *)v16);
      int v18 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "localRestPose";
      *(void *)(v19 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v19 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7CBA0 = v19;
      __cxa_guard_release(&qword_26AF7CB60);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CB88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletonAssetData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletonAssetData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SkeletonAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletonAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

double re::internal::defaultConstruct<re::SkeletonAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(void *)(a3 + 80) = 0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletonAssetData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 5);
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::SkeletonAssetData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletonAssetData>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 5);
  re::FixedArray<re::StringID>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_SkeletonAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CB80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CB80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7CC20, "SkeletonAsset");
    __cxa_guard_release(&qword_26AF7CB80);
  }
  return &unk_26AF7CC20;
}

void re::initInfo_SkeletonAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x646333CF3298B506;
  v11[1] = "SkeletonAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CB78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CB78);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CB68;
      if (!qword_26AF7CB68)
      {
        uint64_t v7 = (re *)re::allocInfo_SkeletonAssetData(v5);
        qword_26AF7CB68 = (uint64_t)v7;
        re::initInfo_SkeletonAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_skeletonAssetData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CB70 = v9;
      __cxa_guard_release(&qword_26AF7CB78);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CB70;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletonAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletonAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SkeletonAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletonAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::SkeletonAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 15re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a3 + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::SkeletonAsset>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::Skeleton::~Skeleton((re::Skeleton *)(a3 + 11));
  re::FixedArray<CoreIKTransform>::deinit(a3 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 5);
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::SkeletonAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 23re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletonAsset>(uint64_t *a1)
{
  re::Skeleton::~Skeleton((re::Skeleton *)(a1 + 11));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 5);
  re::FixedArray<re::StringID>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t re::introspect_SkeletonAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletonAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletonAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletonAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletonAsset>, this);
}

void re::SkeletonAssetLoader::~SkeletonAssetLoader(re::SkeletonAssetLoader *this)
{
}

uint64_t re::internal::compileTimeHornerHash<15ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aSampleskeleton[a2] + 32 * aSampleskeleton[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aSampleskeleton[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aSampleskeleton[a2] - aSampleskeleton[a2 + 1] + 32 * aSampleskeleton[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aSampleskeleton[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aSampleskeleton[a2]
         + 961 * aSampleskeleton[a2 + 1]
         - aSampleskeleton[a2 + 2]
         + 32 * aSampleskeleton[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aSampleskeleton[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aSampleskeleton[a2]
         + 29791 * aSampleskeleton[a2 + 1]
         + 961 * aSampleskeleton[a2 + 2]
         - aSampleskeleton[a2 + 3]
         + 32 * aSampleskeleton[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aSampleskeleton[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aSampleskeleton[a2]
         + 923521 * aSampleskeleton[a2 + 1]
         + 29791 * aSampleskeleton[a2 + 2]
         + 961 * aSampleskeleton[a2 + 3]
         - aSampleskeleton[a2 + 4]
         + 32 * aSampleskeleton[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aSampleskeleton[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aSampleskeleton[a2]
         + 28629151 * aSampleskeleton[a2 + 1]
         + 923521 * aSampleskeleton[a2 + 2]
         + 29791 * aSampleskeleton[a2 + 3]
         + 961 * aSampleskeleton[a2 + 4]
         - aSampleskeleton[a2 + 5]
         + 32 * aSampleskeleton[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aSampleskeleton[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSampleskeleton[a2]
         + 887503681 * aSampleskeleton[a2 + 1]
         + 28629151 * aSampleskeleton[a2 + 2]
         + 923521 * aSampleskeleton[a2 + 3]
         + 29791 * aSampleskeleton[a2 + 4]
         + 961 * aSampleskeleton[a2 + 5]
         - aSampleskeleton[a2 + 6]
         + 32 * aSampleskeleton[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aSampleskeleton[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSampleskeleton[a2]
         + 0x667E12CDFLL * aSampleskeleton[a2 + 1]
         + 887503681 * aSampleskeleton[a2 + 2]
         + 28629151 * aSampleskeleton[a2 + 3]
         + 923521 * aSampleskeleton[a2 + 4]
         + 29791 * aSampleskeleton[a2 + 5]
         + 961 * aSampleskeleton[a2 + 6]
         - aSampleskeleton[a2 + 7]
         + 32 * aSampleskeleton[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aSampleskeleton[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSampleskeleton[a2]
         + 0xC694446F01 * aSampleskeleton[a2 + 1]
         + 0x667E12CDFLL * aSampleskeleton[a2 + 2]
         + 887503681 * aSampleskeleton[a2 + 3]
         + 28629151 * aSampleskeleton[a2 + 4]
         + 923521 * aSampleskeleton[a2 + 5]
         + 29791 * aSampleskeleton[a2 + 6]
         + 961 * aSampleskeleton[a2 + 7]
         - aSampleskeleton[a2 + 8]
         + 32 * aSampleskeleton[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aSampleskeleton[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<15ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<15ul>(aSampleskeleton[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aSampleskeleton[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<12ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v5 = 961 * a1 - aSamplejoint[a2] + 32 * aSamplejoint[a2];
      uint64_t v3 = a2 + 1;
      return v5 + aSamplejoint[v3];
    case 3:
      uint64_t v5 = 29791 * a1 + 961 * aSamplejoint[a2] - aSamplejoint[a2 + 1] + 32 * aSamplejoint[a2 + 1];
      uint64_t v3 = a2 + 2;
      return v5 + aSamplejoint[v3];
    case 4:
      uint64_t v5 = 923521 * a1
         + 29791 * aSamplejoint[a2]
         + 961 * aSamplejoint[a2 + 1]
         - aSamplejoint[a2 + 2]
         + 32 * aSamplejoint[a2 + 2];
      uint64_t v3 = a2 + 3;
      return v5 + aSamplejoint[v3];
    case 5:
      uint64_t v5 = 28629151 * a1
         + 923521 * aSamplejoint[a2]
         + 29791 * aSamplejoint[a2 + 1]
         + 961 * aSamplejoint[a2 + 2]
         - aSamplejoint[a2 + 3]
         + 32 * aSamplejoint[a2 + 3];
      uint64_t v3 = a2 + 4;
      return v5 + aSamplejoint[v3];
    case 6:
      uint64_t v5 = 887503681 * a1
         + 28629151 * aSamplejoint[a2]
         + 923521 * aSamplejoint[a2 + 1]
         + 29791 * aSamplejoint[a2 + 2]
         + 961 * aSamplejoint[a2 + 3]
         - aSamplejoint[a2 + 4]
         + 32 * aSamplejoint[a2 + 4];
      uint64_t v3 = a2 + 5;
      return v5 + aSamplejoint[v3];
    case 7:
      uint64_t v5 = 0x667E12CDFLL * a1
         + 887503681 * aSamplejoint[a2]
         + 28629151 * aSamplejoint[a2 + 1]
         + 923521 * aSamplejoint[a2 + 2]
         + 29791 * aSamplejoint[a2 + 3]
         + 961 * aSamplejoint[a2 + 4]
         - aSamplejoint[a2 + 5]
         + 32 * aSamplejoint[a2 + 5];
      uint64_t v3 = a2 + 6;
      return v5 + aSamplejoint[v3];
    case 8:
      uint64_t v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSamplejoint[a2]
         + 887503681 * aSamplejoint[a2 + 1]
         + 28629151 * aSamplejoint[a2 + 2]
         + 923521 * aSamplejoint[a2 + 3]
         + 29791 * aSamplejoint[a2 + 4]
         + 961 * aSamplejoint[a2 + 5]
         - aSamplejoint[a2 + 6]
         + 32 * aSamplejoint[a2 + 6];
      uint64_t v3 = a2 + 7;
      return v5 + aSamplejoint[v3];
    case 9:
      uint64_t v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSamplejoint[a2]
         + 0x667E12CDFLL * aSamplejoint[a2 + 1]
         + 887503681 * aSamplejoint[a2 + 2]
         + 28629151 * aSamplejoint[a2 + 3]
         + 923521 * aSamplejoint[a2 + 4]
         + 29791 * aSamplejoint[a2 + 5]
         + 961 * aSamplejoint[a2 + 6]
         - aSamplejoint[a2 + 7]
         + 32 * aSamplejoint[a2 + 7];
      uint64_t v3 = a2 + 8;
      return v5 + aSamplejoint[v3];
    case 10:
      uint64_t v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSamplejoint[a2]
         + 0xC694446F01 * aSamplejoint[a2 + 1]
         + 0x667E12CDFLL * aSamplejoint[a2 + 2]
         + 887503681 * aSamplejoint[a2 + 3]
         + 28629151 * aSamplejoint[a2 + 4]
         + 923521 * aSamplejoint[a2 + 5]
         + 29791 * aSamplejoint[a2 + 6]
         + 961 * aSamplejoint[a2 + 7]
         - aSamplejoint[a2 + 8]
         + 32 * aSamplejoint[a2 + 8];
      uint64_t v3 = a2 + 9;
      return v5 + aSamplejoint[v3];
    default:
      uint64_t v7 = a2 + (v4 >> 1);
      uint64_t v8 = re::internal::compileTimeHornerHash<12ul>(a1, a2, v7 - 1);
      uint64_t v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<12ul>(aSamplejoint[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      uint64_t v5 = 31 * a1;
      return v5 + aSamplejoint[v3];
  }
}

uint64_t *re::VertexCacheAsset::assetType(re::VertexCacheAsset *this)
{
  {
    re::VertexCacheAsset::assetType(void)::type = (uint64_t)"VertexCacheAsset";
    qword_26879E8E8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VertexCacheAsset::assetType(void)::type);
  }
  return &re::VertexCacheAsset::assetType(void)::type;
}

uint64_t re::VertexCacheAssetLoader::introspectionType(re::VertexCacheAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CCC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CCC0))
  {
    qword_26AF7CCB8 = re::internal::getOrCreateInfo((re::internal *)"VertexCacheAsset", (uint64_t (*)(re::internal *))re::allocInfo_VertexCacheAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VertexCacheAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7CCB0, 0);
    __cxa_guard_release(&qword_26AF7CCC0);
  }
  return qword_26AF7CCB8;
}

uint64_t re::VertexCacheAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (id)(a3[10] * a3[8] * a3[9]);
  if (!v3) {
    return 1;
  }
  uint64_t result = a3[14];
  if (result) {
    return v3 == objc_msgSend((id)result, sel_length)
  }
        && v3 == (id)(*(uint64_t (**)(uint64_t, id, id))(*(void *)a2 + 16))(a2, objc_msgSend((id)a3[14], sel_contents), v3);
  return result;
}

BOOL re::VertexCacheAssetLoader::createRuntimeData(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void **)(a2 + 14);
  unint64_t v4 = (void *)a2[14];
  id v6 = (id)(a2[10] * a2[8] * a2[9]);
  if (v4) {
    return v6 == objc_msgSend(v4, sel_length);
  }
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  int v18 = 0;
  uint64_t v12 = 0;
  id v13 = 0;
  uint64_t v11 = a3;
  int v14 = 0;
  re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v11, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 == v13)
  {
    if (v6)
    {
      id v10 = objc_msgSend(*(id *)(a1 + 8), sel_newBufferWithBytes_length_options_, v12, v6, 0);
      NS::SharedPtr<MTL::Texture>::operator=(v5, &v10);
      if (v10) {

      }
      id v8 = v13;
      BOOL v7 = v8 == objc_msgSend(*v5, sel_length);
    }
    else
    {
      BOOL v7 = 1;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v11);
  return v7;
}

void sub_23352D354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  if (a9) {

  }
  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&a10);
  _Unwind_Resume(a1);
}

uint64_t re::VertexCacheAssetLoader::assetByteSize(re::VertexCacheAssetLoader *this, void *a2)
{
  return (*(uint64_t (**)(re::VertexCacheAssetLoader *))(*(void *)this + 40))(this)
       + a2[9] * a2[10] * a2[8];
}

re *re::VertexCacheAssetLoader::unloadAsset(re::VertexCacheAssetLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::VertexCacheAsset>((re *)"unloadAsset", 97, a2);
}

re *re::internal::destroyPersistent<re::VertexCacheAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::VertexCacheAssetLoader::isSupportedSourceExtension(re::VertexCacheAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "revertcache") == 0;
}

uint64_t re::VertexCacheAssetLoader::shouldCompress(re::VertexCacheAssetLoader *this, void *a2)
{
  return 0;
}

double re::VertexCacheAssetLoader::allocateSampleAsset(re::VertexCacheAssetLoader *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 120, 8);
  double result = 0.0;
  *(_OWORD *)(v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)uint64_t v2 = &unk_26E6D8A48;
  *(void *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v2 + 24) = "";
  *(void *)(v2 + 40) = "";
  *(unsigned char *)(v2 + 49) = 0;
  *(_DWORD *)(v2 + 5re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1023969417;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(unsigned char *)(v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  return result;
}

void *re::allocInfo_VertexCacheAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CCA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CCA0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7CD58, "VertexCacheAsset");
    __cxa_guard_release(&qword_26AF7CCA0);
  }
  return &unk_26AF7CD58;
}

void re::initInfo_VertexCacheAsset(re *this, re::IntrospectionBase *a2)
{
  v39[0] = 0x38B77DDA5BC982E4;
  v39[1] = "VertexCacheAsset";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v40;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CCA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CCA8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      BOOL v7 = re::introspect_BOOL((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "defaultInterpolation";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7CD10 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::mtl::introspect_VertexFormat((re::mtl *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "format";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3100000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7CD18 = v12;
      id v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "frameInterval";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7CD20 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "startTime";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7CD28 = v20;
      __int16 v21 = re::introspectionAllocator((re *)v20);
      __int16 v23 = re::introspect_size_t((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "frameCount";
      *(void *)(v24 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4000000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v24 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7CD30 = v24;
      long long v25 = re::introspectionAllocator((re *)v24);
      long long v27 = re::introspect_size_t((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "vertexCount";
      *(void *)(v28 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4800000007;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7CD38 = v28;
      long long v29 = re::introspectionAllocator((re *)v28);
      unint64_t v31 = re::introspect_size_t((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "stride";
      *(void *)(v32 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5000000008;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v32 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7CD40 = v32;
      unint64_t v33 = re::introspectionAllocator((re *)v32);
      re::IntrospectionInfo<re::FixedArray<re::AABB>>::get();
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "frameAABBs";
      *(void *)(v34 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7CCD0;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5800000009;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v34 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF7CD48 = v34;
      unsigned int v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "meshIdentifier";
      *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x80000000ALL;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v37 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF7CD50 = v37;
      __cxa_guard_release(&qword_26AF7CCA8);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CD10;
  *((void *)this + 9) = re::internal::defaultConstruct<re::VertexCacheAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::VertexCacheAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::VertexCacheAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::VertexCacheAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v38 = v40;
}

void sub_23352DB5C(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::FixedArray<re::AABB>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CCC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CCC8))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7CCD0);
    qword_26AF7CCD0 = (uint64_t)&unk_26E6D8A78;
    __cxa_guard_release(&qword_26AF7CCC8);
  }
  if ((_MergedGlobals_97 & 1) == 0)
  {
    uint64_t v0 = re::introspect_AABB((re::IntrospectionBase **)1);
    if ((_MergedGlobals_97 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_97 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7CCD0, 0);
      qword_26AF7CCE0 = 0x1800000004;
      dword_26AF7CCE8 = v2;
      word_26AF7CCEC = 0;
      *(void *)&xmmword_26AF7CCF0 = 0;
      *((void *)&xmmword_26AF7CCF0 + 1) = 0xFFFFFFFFLL;
      qword_26AF7CD00 = v1;
      unk_26AF7CD08 = 0;
      qword_26AF7CCD0 = (uint64_t)&unk_26E6D8A78;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF7CCD0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      id v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x18uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7CCF0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void sub_23352DE70(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::VertexCacheAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6D8A48;
  *(unsigned char *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 24) = "";
  *(void *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 40) = "";
  *(_WORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 5re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::VertexCacheAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::VertexCacheAsset>(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D8A48;
  *(unsigned char *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 24) = "";
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = "";
  *(_WORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 5re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::VertexCacheAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void re::VertexCacheAssetLoader::~VertexCacheAssetLoader(id *this)
{
  *this = &unk_26E6D88F0;
}

{
  uint64_t vars8;

  *this = &unk_26E6D88F0;

  JUMPOUT(0x237DBCBD0);
}

void re::VertexCacheAsset::~VertexCacheAsset(re::VertexCacheAsset *this)
{
  re::VertexCacheAsset::~VertexCacheAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t *v2;

  *(void *)this = &unk_26E6D8A48;
  *((_WORD *)this + 24) = 0;
  int v2 = (uint64_t *)((char *)this + 88);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);

  *((void *)this + 14) = 0;
  re::FixedArray<CoreIKTransform>::deinit(v2);
  re::StringID::destroyString((re::VertexCacheAsset *)((char *)this + 32));
  re::StringID::destroyString((re::VertexCacheAsset *)((char *)this + 16));
}

void sub_23352E0EC(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[14];
  if (v4)
  {

    v1[14] = 0;
  }
  re::FixedArray<CoreIKTransform>::deinit(v2);
  re::StringID::destroyString((re::StringID *)(v1 + 4));
  re::StringID::destroyString((re::StringID *)(v1 + 2));
  _Unwind_Resume(a1);
}

void *re::IntrospectionFixedArray<re::AABB>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::AABB>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::AABB>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::AABB>::init(uint64_t a1, uint64_t a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result = re::FixedArray<re::AABB>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(a2 + 8) <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t result = (uint64_t)re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(*(void *)(a2 + 16) + v11));
      ++v12;
      v11 += 32;
    }
    while (a5 != v12);
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::deinit(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::AABB>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::AABB>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  uint64_t *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  uint64_t v8 = (_anonymous_namespace_ *)re::FixedArray<re::AABB>::init<>((uint64_t)a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      long long v10 = (char *)a1[2];
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 32 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::introspectionTable_GeometricObjectBaseData(re *this)
{
  if ((_MergedGlobals_98 & 1) == 0)
  {
    _MergedGlobals_98 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CDD8, memory_order_acquire) & 1) == 0)
    {
      int v1 = (re *)__cxa_guard_acquire(&qword_26AF7CDD8);
      if (v1)
      {
        qword_26AF7D0B0 = (uint64_t)"GeometricObjectData";
        uint64_t v2 = (re *)qword_26AF7CE10;
        if (!qword_26AF7CE10)
        {
          uint64_t v2 = (re *)re::allocInfo_GeometricObjectData(v1);
          qword_26AF7CE10 = (uint64_t)v2;
          re::initInfo_GeometricObjectData(v2, v3);
        }
        qword_26AF7D0B8 = (uint64_t)v2;
        qword_26AF7D0C0 = 0;
        qword_26AF7D0C8 = 1;
        dword_26AF7D0D0 = 0;
        __cxa_guard_release(&qword_26AF7CDD8);
      }
    }
    dword_26AF7CF68 = 1;
    qword_26AF7CF70 = (uint64_t)&qword_26AF7D0B0;
  }
}

void *re::allocInfo_GeometricObjectBaseData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CDE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CDE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D158, "GeometricObjectBaseData");
    __cxa_guard_release(&qword_26AF7CDE0);
  }
  return &unk_26AF7D158;
}

void re::initInfo_GeometricObjectBaseData(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0xFD63273CAECF29F6;
  v19[1] = "GeometricObjectBaseData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CDE8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CDE8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_GeometricObjectType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v8 = 3;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v7;
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 24) = 8;
      qword_26AF7D050 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::introspectionTable_GeometricObjectBaseData(v9);
      long long v10 = (re *)(*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 16, 8);
      *(_DWORD *)long long v10 = 2;
      *((void *)v10 + 1) = &dword_26AF7CF68;
      qword_26AF7D058 = (uint64_t)v10;
      uint64_t v11 = re::introspectionAllocator(v10);
      uint64_t v12 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "pose";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7D060 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "shape";
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF7D068 = v17;
      __cxa_guard_release(&qword_26AF7CDE8);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D050;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeometricObjectBaseData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeometricObjectBaseData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::GeometricObjectBaseData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeometricObjectBaseData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::internal::defaultConstruct<re::GeometricObjectBaseData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D8B10;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0x3F80000000000000;
  a3[7] = 0;
  a3[8] = 0;
  a3[6] = 0;
}

uint64_t re::internal::defaultDestruct<re::GeometricObjectBaseData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::GeometricObjectBaseData>(void *result)
{
  uint64_t *result = &unk_26E6D8B10;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0x3F80000000000000;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::GeometricObjectBaseData>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_GeometricObjectData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CDF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CDF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D1D0, "GeometricObjectData");
    __cxa_guard_release(&qword_26AF7CDF8);
  }
  return &unk_26AF7D1D0;
}

void re::initInfo_GeometricObjectData(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x871260762354B514;
  v11[1] = "GeometricObjectData";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE08);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      id v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CDF0;
      if (!qword_26AF7CDF0)
      {
        uint64_t v7 = (re *)re::allocInfo_GeometricObjectBaseData(v5);
        qword_26AF7CDF0 = (uint64_t)v7;
        re::initInfo_GeometricObjectBaseData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "GeometricObjectBaseData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CE00 = v9;
      __cxa_guard_release(&qword_26AF7CE08);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CE00;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeometricObjectData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeometricObjectData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::GeometricObjectData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeometricObjectData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::GeometricObjectData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 40) = 0x3F80000000000000;
  *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)a3 = &unk_26E6D8B40;
}

void re::internal::defaultDestruct<re::GeometricObjectData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 6));
}

uint64_t re::internal::defaultConstructV2<re::GeometricObjectData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(result + 40) = 0x3F80000000000000;
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)uint64_t result = &unk_26E6D8B40;
  return result;
}

void re::internal::defaultDestructV2<re::GeometricObjectData>(void *a1)
{
  *a1 = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
}

uint64_t re::convertToSerializable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  switch((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    case 1u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 16, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
      *(void *)uint64_t v9 = &unk_26E6D8CF8;
      return v9;
    case 2u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 16, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 2;
      *(void *)uint64_t v9 = &unk_26E6D8DA0;
      *(float *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = (*(float (**)(void *))(*a1 + 64))(a1);
      return v9;
    case 3u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 32, 16);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 3;
      *(void *)uint64_t v9 = &unk_26E6D8B78;
      *(_OWORD *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
      uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      *(void *)(v9 + 24) = v11;
      goto LABEL_31;
    case 4u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 24, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 4;
      *(void *)uint64_t v9 = &unk_26E6D8BE0;
      *(float *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = (*(float (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *))(*a1 + 72))(a1);
      goto LABEL_29;
    case 5u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 96, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 5;
      *(void *)uint64_t v9 = &unk_26E6D8C88;
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(void *)(v9 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(_OWORD *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_DWORD *)(v9 + 80) = 0;
      unint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a4;
      re::DynamicArray<re::Quaternion<float>>::setCapacity((void *)(v9 + 16), v13);
      ++*(_DWORD *)(v9 + 40);
      uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
      if (v13)
      {
        uint64_t v17 = v15;
        long long v18 = (_DWORD *)(v14 + 8);
        do
        {
          v16.n128_u64[0] = *((void *)v18 - 1);
          v16.n128_u32[2] = *v18;
          long long v18 = (_DWORD *)((char *)v18 + v17);
          __n128 v45 = v16;
          __n128 v16 = re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v9 + 16), &v45);
          --v13;
        }
        while (v13);
      }
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v9 + 56, (uint64_t)&v45);
      goto LABEL_24;
    case 6u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 48, 16);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 6;
      *(void *)uint64_t v9 = &unk_26E6D8D30;
      *(_OWORD *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_OWORD *)(*(uint64_t (**)(void *))(*a1 + 64))(a1);
      *(float *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = (*(float (**)(void *))(*a1 + 72))(a1);
      return v9;
    case 7u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 72, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 7;
      *(void *)uint64_t v9 = &unk_26E6D8C18;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      uint64_t v39 = (void *)(v9 + 48);
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v9 + 64) = 0;
      unint64_t v19 = a1[4];
      re::FixedArray<re::GeometricObjectData>::init<>((void *)(v9 + 16), a4, v19);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = 0;
      break;
    case 8u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 24, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 8;
      *(void *)uint64_t v9 = &unk_26E6D8CC0;
      *(float *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = (*(float (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *))(*a1 + 72))(a1);
      goto LABEL_29;
    case 9u:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 24, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 9;
      *(void *)uint64_t v9 = &unk_26E6D8C50;
      *(float *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = (*(float (**)(void *))(*a1 + 64))(a1);
      float v12 = (*(float (**)(void *))(*a1 + 72))(a1);
LABEL_29:
      *(float *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      return v9;
    case 0xBu:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 24, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 11;
      *(void *)uint64_t v9 = &unk_26E6D8D68;
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
LABEL_31:
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
      return v9;
    case 0xCu:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 40, 8);
      *(_DWORD *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 12;
      *(void *)uint64_t v9 = &unk_26E6D8DD8;
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      unint64_t v33 = a1[3];
      unint64_t v34 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
      unint64_t v35 = (v34 ^ (v34 >> 31)) % *(unsigned int *)(a3 + 24);
      uint64_t v36 = *(void *)(a3 + 16);
      for (uint64_t i = *(unsigned int *)(*(void *)(a3 + 8) + 4 * v35);
            *(void *)(v36 + 48 * i + 16) != v33;
      re::AssetHandle::operator=(v9 + 16, (uint64_t *)(v36 + 48 * i + 24));
      return v9;
    default:
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Unexpected shape type.", "!\"Unreachable code\"", "convertToSerializable", 267);
      _os_crash();
      __break(1u);
      JUMPOUT(0x23352FD58);
  }
  do
  {
    unint64_t v21 = a1[4];
    if (v21 <= v20)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      __n128 v45 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 476;
      __int16 v41 = 2048;
      unint64_t v42 = v20;
      __int16 v43 = 2048;
      unint64_t v44 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      __n128 v45 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 468;
      __int16 v41 = 2048;
      unint64_t v42 = v20;
      __int16 v43 = 2048;
      unint64_t v44 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v21 = *(void *)(v9 + 24);
    if (v21 <= v20) {
      goto LABEL_37;
    }
    uint64_t v22 = a1[5] + 240 * v20;
    uint64_t v23 = *(void *)(v9 + 32) + 80 * v20;
    (*(void (**)(__n128 *__return_ptr, uint64_t))(*(void *)v22 + 40))(&v45, v22);
    long long v24 = v46;
    *(__n128 *)(v23 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v45;
    *(_OWORD *)(v23 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = v24;
    unint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
    unint64_t v26 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
    unint64_t v27 = (v26 ^ (v26 >> 31)) % *(unsigned int *)(a2 + 24);
    uint64_t v28 = *(void *)(a2 + 16);
    for (uint64_t j = *(unsigned int *)(*(void *)(a2 + 8) + 4 * v27);
          *(void *)(v28 + 48 * j + 16) != v25;
    re::AssetHandle::operator=(v23 + 48, (uint64_t *)(v28 + 48 * j + 24));
    ++v20;
  }
  while (v20 != v19);
LABEL_19:
  char v30 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  *(unsigned char *)(v9 + 40) = v30;
  if (v30)
  {
                                                                                   + 192))(&v45);
    uint64_t v32 = v46;
    *(void *)long long v40 = v47;
    *(void *)&v40[8] = v46;
    if (!*v39)
    {
      if (!(void)v46)
      {
LABEL_24:
        if (v45.n128_u64[0] && (void)v47) {
          (*(void (**)(void))(*(void *)v45.n128_u64[0] + 40))();
        }
        return v9;
      }
    }
    re::FixedArray<unsigned char>::copy(v39, (const void **)v40);
    goto LABEL_24;
  }
  return v9;
}

void *re::FixedArray<re::GeometricObjectData>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  uint64_t *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x333333333333334)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 80, a3);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 80 * a3, 16);
  v4[2] = result;
  if (!result)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    uint64_t v7 = result;
    do
    {
      *((_DWORD *)result + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
      result[2] = 0;
      result[3] = 0;
      result[4] = 0;
      result[5] = 0x3F80000000000000;
      result[7] = 0;
      result[8] = 0;
      result[6] = 0;
      uint64_t *result = &unk_26E6D8B40;
      result += 10;
      v7 += 10;
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)result + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0x3F80000000000000;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  uint64_t *result = &unk_26E6D8B40;
  return result;
}

uint64_t re::convertFromSerializable(re *this, const re::CollisionShapeData *a2, re::CollisionShape **a3, re::Allocator *a4, re::Allocator *a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v5 = (int)a5;
  unint64_t v6 = a3;
  uint64_t v7 = a2;
  switch(*((_DWORD *)this + 2))
  {
    case 1:
      goto LABEL_41;
    case 2:
      goto LABEL_41;
    case 3:
      goto LABEL_41;
    case 4:
      goto LABEL_41;
    case 5:
      goto LABEL_41;
    case 6:
      goto LABEL_41;
    case 7:
      unint64_t v12 = *((void *)this + 3);
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      re::FixedArray<unsigned long>::init<>(&v45, (uint64_t)a4, v12);
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      re::FixedArray<re::Pose<float>>::init<>(&v42, (uint64_t)a4, v12);
      unint64_t v41 = v12;
      if (v12)
      {
        uint64_t v39 = v7;
        long long v40 = v6;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        LODWORD(vre::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = 0;
        unint64_t v16 = 0;
        do
        {
          unint64_t v17 = *((void *)this + 3);
          if (v17 <= v16)
          {
            uint64_t v48 = 0;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v59 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            unint64_t v23 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v49 = 136315906;
            uint64_t v50 = "operator[]";
            __int16 v51 = 1024;
            int v52 = 476;
            __int16 v53 = 2048;
            unint64_t v54 = v16;
            __int16 v55 = 2048;
            unint64_t v56 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_70:
            uint64_t v48 = 0;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v59 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v49 = 136315906;
            uint64_t v50 = "operator[]";
            __int16 v51 = 1024;
            int v52 = 468;
            __int16 v53 = 2048;
            unint64_t v54 = v16;
            __int16 v55 = 2048;
            unint64_t v56 = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_71:
            uint64_t v48 = 0;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v59 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v49 = 136315906;
            uint64_t v50 = "operator[]";
            __int16 v51 = 1024;
            int v52 = 476;
            __int16 v53 = 2048;
            unint64_t v54 = v16;
            __int16 v55 = 2048;
            unint64_t v56 = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            uint64_t v48 = 0;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v59 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v49 = 136315906;
            uint64_t v50 = "operator[]";
            __int16 v51 = 1024;
            int v52 = 468;
            __int16 v53 = 2048;
            unint64_t v54 = v16;
            __int16 v55 = 2048;
            unint64_t v56 = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v57, (const re::AssetHandle *)(*((void *)this + 4) + v14 + 48));
          if (v5)
          {
            re::AssetHandle::loadNow(*((uint64_t *)&v57 + 1), 0);
          }
          else if (*((void *)&v57 + 1))
          {
            if (!atomic_load((unsigned int *)(*((void *)&v57 + 1) + 704))) {
              re::AssetHandle::loadAsync((re::AssetHandle *)&v57);
            }
          }
          uint64_t v19 = re::AssetHandle::loadedAsset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v57);
          if (v19)
          {
            int v20 = 0;
            uint64_t v21 = *(void *)(v19 + 8);
          }
          else if (*((void *)&v57 + 1))
          {
            uint64_t v21 = 0;
            unsigned int v22 = atomic_load((unsigned int *)(*((void *)&v57 + 1) + 704));
            if (v22 == 3) {
              int v20 = 2;
            }
            else {
              int v20 = 1;
            }
          }
          else
          {
            uint64_t v21 = 0;
            int v20 = 1;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57);
          unint64_t v23 = v46;
          if (v46 <= v16) {
            goto LABEL_70;
          }
          *(void *)(v47 + 8 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v21;
          unint64_t v23 = *((void *)this + 3);
          if (v23 <= v16) {
            goto LABEL_71;
          }
          unint64_t v23 = v43;
          if (v43 <= v16) {
            goto LABEL_72;
          }
          uint64_t v24 = *((void *)this + 4) + v14;
          uint64_t v25 = v44;
          unint64_t v26 = (_OWORD *)(v44 + v13);
          long long v27 = *(_OWORD *)(v24 + 32);
          *unint64_t v26 = *(_OWORD *)(v24 + 16);
          v26[1] = v27;
          if (v20 == 2) {
            unsigned int v28 = 2;
          }
          else {
            unsigned int v28 = v15;
          }
          if (v15) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v20 == 1;
          }
          if (v29) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v28;
          }
          ++v16;
          v14 += 80;
          v13 += 32;
        }
        while (v41 != v16);
        unint64_t v6 = v40;
        if (v15)
        {
          BOOL v30 = 0;
          uint64_t v31 = 0;
          uint64_t v7 = v39;
          goto LABEL_63;
        }
        uint64_t v7 = v39;
      }
      else
      {
        uint64_t v25 = v44;
      }
      uint64_t v31 = (*(uint64_t (**)(uint64_t, re::CollisionShape **, uint64_t, uint64_t, unint64_t, void, void))(*(void *)v9 + 160))(v9, v6, v47, v25, v41, *((unsigned __int8 *)this + 40), 0);
      uint64_t v15 = 0;
      BOOL v30 = v43 == 0;
LABEL_63:
      *(void *)uint64_t v7 = v31;
      if (v42 && !v30) {
        (*(void (**)(void))(*(void *)v42 + 40))();
      }
      if (v45 && v46) {
        (*(void (**)(void))(*(void *)v45 + 40))();
      }
      return v15;
    case 8:
      goto LABEL_41;
    case 9:
      goto LABEL_41;
    case 0xB:
      goto LABEL_41;
    case 0xC:
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v57, (re *)((char *)this + 16));
      unint64_t v33 = (re::IndexedTriangleMeshAsset *)*((void *)&v57 + 1);
      if (v5)
      {
        re::AssetHandle::loadNow(*((uint64_t *)&v57 + 1), 0);
      }
      else if (*((void *)&v57 + 1))
      {
        if (!atomic_load((unsigned int *)(*((void *)&v57 + 1) + 704))) {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v57);
        }
      }
      if (!*((void *)&v57 + 1))
      {
        uint64_t v15 = 1;
LABEL_60:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57);
        uint64_t v10 = 0;
        goto LABEL_42;
      }
      unint64_t v35 = re::IndexedTriangleMeshAsset::assetType(v33);
      uint64_t v36 = re::AssetHandle::assetWithType((re::AssetHandle *)&v57, (const re::AssetType *)v35, 1);
      if (!v36
        || (uint64_t v37 = *(void *)(v36 + 8)) == 0
        || !re::IndexedTriangleMesh::isValid(*(re::IndexedTriangleMesh **)(v36 + 8)))
      {
        uint64_t v15 = 1;
        if (*((void *)&v57 + 1))
        {
          unsigned int v38 = atomic_load((unsigned int *)(*((void *)&v57 + 1) + 704));
          if (v38 == 3) {
            uint64_t v15 = 2;
          }
          else {
            uint64_t v15 = 1;
          }
        }
        goto LABEL_60;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, re::CollisionShape **, uint64_t))(*(void *)v9 + 144))(v9, v6, v37);
LABEL_41:
      uint64_t v15 = 0;
LABEL_42:
      *(void *)uint64_t v7 = v10;
      return v15;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, a4, "assertion failure: '%s' (%s:line %i) Unexpected shape type.", "!\"Unreachable code\"", "convertFromSerializable", 398);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233530800);
  }
}

uint64_t re::convertToSerializable(re *this, const re::IndexedTriangleMesh *a2, re::Allocator *a3)
{
  uint64_t v5 = (*(uint64_t (**)(const re::IndexedTriangleMesh *, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 80, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v5 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(v5 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v5 + 57) = 0u;
  re::FixedArray<int>::init<>((uint64_t *)v5, (uint64_t)a2, 12 * *((void *)this + 3));
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)(v5 + 16);
    uint64_t v8 = *((void *)this + 4);
    uint64_t v9 = (_DWORD *)(*((void *)this + 1) + 8);
    do
    {
      *uint64_t v7 = *(v9 - 2);
      v7[1] = *(v9 - 1);
      v7[2] = *v9;
      uint64_t v9 = (_DWORD *)((char *)v9 + v8);
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  int v10 = *((unsigned __int8 *)this + 58);
  if (v10 == 2) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = 2 * (v10 == 1);
  }
  re::FixedArray<unsigned short>::init<>((uint64_t *)(v5 + 24), (uint64_t)a2, (unint64_t)(v11 * *((void *)this + 5)) >> 1);
  int v12 = *((unsigned __int8 *)this + 58);
  if (v12 == 2) {
    uint64_t v13 = 4;
  }
  else {
    uint64_t v13 = 2 * (v12 == 1);
  }
  memcpy(*(void **)(v5 + 40), *((const void **)this + 2), v13 * *((void *)this + 5));
  if (*((void *)this + 2))
  {
    unint64_t v14 = *((void *)this + 5);
    re::FixedArray<unsigned short>::init<>((uint64_t *)(v5 + 48), (uint64_t)a2, v14 / 3);
    if (v14 >= 3)
    {
      unint64_t v15 = 0;
      if (v14 / 3 <= 1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = v14 / 3;
      }
      do
      {
        __int16 v17 = (*(uint64_t (**)(re *, unint64_t))(*(void *)this + 16))(this, v15);
        if (*(void *)(v5 + 56) <= v15)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_WORD *)(*(void *)(v5 + 64) + 2 * v15++) = v17;
      }
      while (v16 != v15);
    }
  }
  *(unsigned char *)(v5 + 7re::FixedArray<re::StringID>::deinit((void *)this + 2) = *((unsigned char *)this + 58) == 2;
  return v5;
}

void re::FixedArray<unsigned short>::init<>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 < 0)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 2 * a3;
  uint64_t v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 2 * a3, 2);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 2);
    uint64_t v8 = (_WORD *)((char *)v8 + v5 - 2);
  }
  *uint64_t v8 = 0;
}

uint64_t re::convertFromSerializable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    uint64_t v3 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
}

void re::introspectionTable_CollisionShapeData(re *this)
{
  if ((byte_26AF7CDD1 & 1) == 0)
  {
    byte_26AF7CDD1 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE18, memory_order_acquire) & 1) == 0)
    {
      int v1 = (re *)__cxa_guard_acquire(&qword_26AF7CE18);
      if (v1)
      {
        qword_26AF7D860 = (uint64_t)"BoxShapeData";
        uint64_t v2 = (re *)qword_26AF7CE48;
        if (!qword_26AF7CE48)
        {
          uint64_t v2 = (re *)re::allocInfo_BoxShapeData(v1);
          qword_26AF7CE48 = (uint64_t)v2;
          re::initInfo_BoxShapeData(v2, v3);
        }
        qword_26AF7D868 = (uint64_t)v2;
        qword_26AF7D870 = 0;
        qword_26AF7D878 = 3;
        dword_26AF7D880 = 0;
        qword_26AF7D888 = (uint64_t)"CapsuleShapeData";
        uint64_t v4 = (re *)qword_26AF7CE60;
        if (!qword_26AF7CE60)
        {
          uint64_t v4 = (re *)re::allocInfo_CapsuleShapeData(v1);
          qword_26AF7CE60 = (uint64_t)v4;
          re::initInfo_CapsuleShapeData(v4, v5);
        }
        qword_26AF7D890 = (uint64_t)v4;
        qword_26AF7D898 = 0;
        qword_26AF7D8A0 = 4;
        dword_26AF7D8A8 = 0;
        qword_26AF7D8B0 = (uint64_t)"CompoundShapeData";
        uint64_t v6 = (re *)qword_26AF7CE78;
        if (!qword_26AF7CE78)
        {
          uint64_t v6 = (re *)re::allocInfo_CompoundShapeData(v1);
          qword_26AF7CE78 = (uint64_t)v6;
          re::initInfo_CompoundShapeData(v6, v7);
        }
        qword_26AF7D8B8 = (uint64_t)v6;
        qword_26AF7D8C0 = 0;
        qword_26AF7D8C8 = 7;
        dword_26AF7D8D0 = 0;
        qword_26AF7D8D8 = (uint64_t)"ConeShapeData";
        uint64_t v8 = (re *)qword_26AF7CE90;
        if (!qword_26AF7CE90)
        {
          uint64_t v8 = (re *)re::allocInfo_ConeShapeData(v1);
          qword_26AF7CE90 = (uint64_t)v8;
          re::initInfo_ConeShapeData(v8, v9);
        }
        qword_26AF7D8E0 = (uint64_t)v8;
        qword_26AF7D8E8 = 0;
        qword_26AF7D8F0 = 9;
        dword_26AF7D8F8 = 0;
        qword_26AF7D900 = (uint64_t)"ConvexPolyhedronShapeData";
        int v10 = (re *)qword_26AF7CEA8;
        if (!qword_26AF7CEA8)
        {
          int v10 = (re *)re::allocInfo_ConvexPolyhedronShapeData(v1);
          qword_26AF7CEA8 = (uint64_t)v10;
          re::initInfo_ConvexPolyhedronShapeData(v10, v11);
        }
        qword_26AF7D908 = (uint64_t)v10;
        qword_26AF7D910 = 0;
        qword_26AF7D918 = 5;
        dword_26AF7D920 = 0;
        qword_26AF7D928 = (uint64_t)"CylinderShapeData";
        int v12 = (re *)qword_26AF7CEC0;
        if (!qword_26AF7CEC0)
        {
          int v12 = (re *)re::allocInfo_CylinderShapeData(v1);
          qword_26AF7CEC0 = (uint64_t)v12;
          re::initInfo_CylinderShapeData(v12, v13);
        }
        qword_26AF7D930 = (uint64_t)v12;
        qword_26AF7D938 = 0;
        qword_26AF7D940 = 8;
        dword_26AF7D948 = 0;
        qword_26AF7D950 = (uint64_t)"EmptyShapeData";
        unint64_t v14 = (re *)qword_26AF7CEE0;
        if (!qword_26AF7CEE0)
        {
          unint64_t v14 = (re *)re::allocInfo_EmptyShapeData(v1);
          qword_26AF7CEE0 = (uint64_t)v14;
          re::initInfo_EmptyShapeData(v14, v15);
        }
        qword_26AF7D958 = (uint64_t)v14;
        qword_26AF7D960 = 0;
        qword_26AF7D968 = 1;
        dword_26AF7D970 = 0;
        qword_26AF7D978 = (uint64_t)"PlaneShapeData";
        unint64_t v16 = (re *)qword_26AF7CEF8;
        if (!qword_26AF7CEF8)
        {
          unint64_t v16 = (re *)re::allocInfo_PlaneShapeData(v1);
          qword_26AF7CEF8 = (uint64_t)v16;
          re::initInfo_PlaneShapeData(v16, v17);
        }
        qword_26AF7D980 = (uint64_t)v16;
        qword_26AF7D988 = 0;
        qword_26AF7D990 = 6;
        dword_26AF7D998 = 0;
        qword_26AF7D9A0 = (uint64_t)"RectangleShapeData";
        long long v18 = (re *)qword_26AF7CF10;
        if (!qword_26AF7CF10)
        {
          long long v18 = (re *)re::allocInfo_RectangleShapeData(v1);
          qword_26AF7CF10 = (uint64_t)v18;
          re::initInfo_RectangleShapeData(v18, v19);
        }
        qword_26AF7D9A8 = (uint64_t)v18;
        qword_26AF7D9B0 = 0;
        qword_26AF7D9B8 = 11;
        dword_26AF7D9C0 = 0;
        qword_26AF7D9C8 = (uint64_t)"SphereShapeData";
        int v20 = (re *)qword_26AF7CF28;
        if (!qword_26AF7CF28)
        {
          int v20 = (re *)re::allocInfo_SphereShapeData(v1);
          qword_26AF7CF28 = (uint64_t)v20;
          re::initInfo_SphereShapeData(v20, v21);
        }
        qword_26AF7D9D0 = (uint64_t)v20;
        qword_26AF7D9D8 = 0;
        qword_26AF7D9E0 = 2;
        dword_26AF7D9E8 = 0;
        qword_26AF7D9F0 = (uint64_t)"TriangleMeshShapeData";
        unsigned int v22 = (re *)qword_26AF7CF40;
        if (!qword_26AF7CF40)
        {
          unsigned int v22 = (re *)re::allocInfo_TriangleMeshShapeData(v1);
          qword_26AF7CF40 = (uint64_t)v22;
          re::initInfo_TriangleMeshShapeData(v22, v23);
        }
        qword_26AF7D9F8 = (uint64_t)v22;
        qword_26AF7DA00 = 0;
        qword_26AF7DA08 = 12;
        dword_26AF7DA10 = 0;
        __cxa_guard_release(&qword_26AF7CE18);
      }
    }
    dword_26AF7CF78 = 11;
    qword_26AF7CF80 = (uint64_t)&qword_26AF7D860;
  }
}

void *re::allocInfo_CollisionShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D248, "CollisionShapeData");
    __cxa_guard_release(&qword_26AF7CE20);
  }
  return &unk_26AF7D248;
}

void re::initInfo_CollisionShapeData(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x139DD8F0161B0FF2;
  v12[1] = "CollisionShapeData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE28);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_ShapeType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v8 = 3;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v7;
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 24) = 8;
      qword_26AF7CF88 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::introspectionTable_CollisionShapeData(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 16, 8);
      *(_DWORD *)uint64_t v10 = 2;
      *(void *)(v10 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &dword_26AF7CF78;
      qword_26AF7CF90 = v10;
      __cxa_guard_release(&qword_26AF7CE28);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CF88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CollisionShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CollisionShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::CollisionShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CollisionShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::internal::defaultConstruct<re::CollisionShapeData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D8BC0;
}

uint64_t re::internal::defaultDestruct<re::CollisionShapeData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::CollisionShapeData>(void *result)
{
  uint64_t *result = &unk_26E6D8BC0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CollisionShapeData>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_CollisionShapeData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CollisionShapeData", (uint64_t (*)(re::internal *))re::allocInfo_CollisionShapeData, (re::IntrospectionBase *(*)(void))re::initInfo_CollisionShapeData, (void (*)(re::IntrospectionBase *))&qword_26AF7CE30, this);
}

void *re::allocInfo_BoxShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D2C0, "BoxShapeData");
    __cxa_guard_release(&qword_26AF7CE38);
  }
  return &unk_26AF7D2C0;
}

void re::initInfo_BoxShapeData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x3129063846308B00;
  v14[1] = "BoxShapeData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE40);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CF98 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "extent";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7CFA0 = v12;
      __cxa_guard_release(&qword_26AF7CE40);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CF98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BoxShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BoxShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::BoxShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BoxShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::BoxShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 3;
  *(void *)a3 = &unk_26E6D8B78;
  double result = 0.0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::BoxShapeData>(uint64_t a1)
{
  *(_DWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 3;
  *(void *)a1 = &unk_26E6D8B78;
  double result = 0.0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

void *re::allocInfo_CapsuleShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D338, "CapsuleShapeData");
    __cxa_guard_release(&qword_26AF7CE50);
  }
  return &unk_26AF7D338;
}

void re::initInfo_CapsuleShapeData(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x8B915C5BAD1E5EBCLL;
  v19[1] = "CapsuleShapeData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE58);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CFD8 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_float((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "height";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0xC00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7CFE0 = v13;
      unint64_t v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_float((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "radius";
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF7CFE8 = v17;
      __cxa_guard_release(&qword_26AF7CE58);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CFD8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CapsuleShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CapsuleShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::CapsuleShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CapsuleShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::internal::defaultConstruct<re::CapsuleShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 4;
  *(void *)a3 = &unk_26E6D8BE0;
}

uint64_t re::internal::defaultConstructV2<re::CapsuleShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 4;
  *(void *)double result = &unk_26E6D8BE0;
  return result;
}

void *re::allocInfo_CompoundShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D3B0, "CompoundShapeData");
    __cxa_guard_release(&qword_26AF7CE68);
  }
  return &unk_26AF7D3B0;
}

void re::initInfo_CompoundShapeData(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0xCA87D356D3A682C0;
  v21[1] = "CompoundShapeData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE70, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE70);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7D070 = v9;
      uint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::FixedArray<re::GeometricObjectData>>::get(v10);
      uint64_t v11 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "objects";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7D0D8;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7D078 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "useAABBTree";
      *(void *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7D080 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "bulletData";
      *(void *)(v19 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v19 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7D088 = v19;
      __cxa_guard_release(&qword_26AF7CE70);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D070;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CompoundShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CompoundShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::CompoundShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CompoundShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void re::IntrospectionInfo<re::FixedArray<re::GeometricObjectData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF58, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7CF58);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7D0D8);
      qword_26AF7D0D8 = (uint64_t)&unk_26E6D8E10;
      __cxa_guard_release(&qword_26AF7CF58);
    }
  }
  if ((byte_26AF7CDD2 & 1) == 0)
  {
    int v1 = (void *)qword_26AF7CE10;
    if (qword_26AF7CE10
      || (int v1 = re::allocInfo_GeometricObjectData(a1),
          qword_26AF7CE10 = (uint64_t)v1,
          re::initInfo_GeometricObjectData((re *)v1, v2),
          (byte_26AF7CDD2 & 1) == 0))
    {
      byte_26AF7CDD2 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7D0D8, 0);
      qword_26AF7D0E8 = 0x1800000004;
      dword_26AF7D0F0 = v3;
      word_26AF7D0F4 = 0;
      *(void *)&xmmword_26AF7D0F8 = 0;
      *((void *)&xmmword_26AF7D0F8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7D108 = (uint64_t)v1;
      qword_26AF7D110 = 0;
      qword_26AF7D0D8 = (uint64_t)&unk_26E6D8E10;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7D0D8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7D0F8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::CompoundShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 7;
  *(void *)a3 = &unk_26E6D8C18;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
}

void *re::internal::defaultDestruct<re::CompoundShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a3 + 48));
  return re::FixedArray<re::GeometricObjectData>::deinit((void *)(a3 + 16));
}

uint64_t re::internal::defaultConstructV2<re::CompoundShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 7;
  *(void *)double result = &unk_26E6D8C18;
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::CompoundShapeData>(uint64_t a1)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 48));
  return re::FixedArray<re::GeometricObjectData>::deinit((void *)(a1 + 16));
}

void *re::allocInfo_ConeShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D428, "ConeShapeData");
    __cxa_guard_release(&qword_26AF7CE80);
  }
  return &unk_26AF7D428;
}

void re::initInfo_ConeShapeData(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x99D738C6689E5D0;
  v19[1] = "ConeShapeData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CE88);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CFF0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_float((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "height";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0xC00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7CFF8 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_float((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "radius";
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF7D000 = v17;
      __cxa_guard_release(&qword_26AF7CE88);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CFF0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ConeShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ConeShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ConeShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ConeShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::internal::defaultConstruct<re::ConeShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 9;
  *(void *)a3 = &unk_26E6D8C50;
}

uint64_t re::internal::defaultConstructV2<re::ConeShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 9;
  *(void *)double result = &unk_26E6D8C50;
  return result;
}

void *re::allocInfo_ConvexPolyhedronShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CE98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CE98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D4A0, "ConvexPolyhedronShapeData");
    __cxa_guard_release(&qword_26AF7CE98);
  }
  return &unk_26AF7D4A0;
}

void re::initInfo_ConvexPolyhedronShapeData(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x55E4C92089E1199CLL;
  v18[1] = "ConvexPolyhedronShapeData";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CEA0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7D008 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v11 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "vertices";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7D010 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "bulletData";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7D018 = v16;
      __cxa_guard_release(&qword_26AF7CEA0);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D008;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ConvexPolyhedronShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ConvexPolyhedronShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ConvexPolyhedronShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ConvexPolyhedronShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::ConvexPolyhedronShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 5;
  *(void *)a3 = &unk_26E6D8C88;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)(a3 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ConvexPolyhedronShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 56);
  return re::DynamicArray<unsigned long>::deinit(a3 + 16);
}

double re::internal::defaultConstructV2<re::ConvexPolyhedronShapeData>(uint64_t a1)
{
  *(_DWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 5;
  *(void *)a1 = &unk_26E6D8C88;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ConvexPolyhedronShapeData>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 56);
  return re::DynamicArray<unsigned long>::deinit(a1 + 16);
}

void *re::allocInfo_CylinderShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CEB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D518, "CylinderShapeData");
    __cxa_guard_release(&qword_26AF7CEB0);
  }
  return &unk_26AF7D518;
}

void re::initInfo_CylinderShapeData(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x258B756EC289C72ALL;
  v19[1] = "CylinderShapeData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CEB8);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7D020 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_float((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "height";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0xC00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7D028 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::introspect_float((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "radius";
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF7D030 = v17;
      __cxa_guard_release(&qword_26AF7CEB8);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D020;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CylinderShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CylinderShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::CylinderShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CylinderShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::internal::defaultConstruct<re::CylinderShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 8;
  *(void *)a3 = &unk_26E6D8CC0;
}

uint64_t re::internal::defaultConstructV2<re::CylinderShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 8;
  *(void *)double result = &unk_26E6D8CC0;
  return result;
}

void *re::allocInfo_EmptyShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CEC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D590, "EmptyShapeData");
    __cxa_guard_release(&qword_26AF7CEC8);
  }
  return &unk_26AF7D590;
}

void re::initInfo_EmptyShapeData(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x4B9147A9A0AC107CLL;
  v11[1] = "EmptyShapeData";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CED8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CED8);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CED0 = v9;
      __cxa_guard_release(&qword_26AF7CED8);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CED0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EmptyShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EmptyShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::EmptyShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EmptyShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::EmptyShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  *(void *)a3 = &unk_26E6D8CF8;
}

uint64_t re::internal::defaultConstructV2<re::EmptyShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
  *(void *)double result = &unk_26E6D8CF8;
  return result;
}

void *re::allocInfo_PlaneShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CEE8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D608, "PlaneShapeData");
    __cxa_guard_release(&qword_26AF7CEE8);
  }
  return &unk_26AF7D608;
}

void re::initInfo_PlaneShapeData(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x49EDF1A51FB1E81ELL;
  v18[1] = "PlaneShapeData";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CEF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CEF0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7D038 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "normal";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7D040 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "distanceFromOrigin";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7D048 = v16;
      __cxa_guard_release(&qword_26AF7CEF0);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D038;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PlaneShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PlaneShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::PlaneShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::PlaneShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::PlaneShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 6;
  *(void *)a3 = &unk_26E6D8D30;
  double result = 0.0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::PlaneShapeData>(uint64_t a1)
{
  *(_DWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 6;
  *(void *)a1 = &unk_26E6D8D30;
  double result = 0.0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

void *re::allocInfo_RectangleShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CF00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D680, "RectangleShapeData");
    __cxa_guard_release(&qword_26AF7CF00);
  }
  return &unk_26AF7D680;
}

void re::initInfo_RectangleShapeData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xB21153305B1BACB8;
  v14[1] = "RectangleShapeData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CF08);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CFA8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "extent";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7CFB0 = v12;
      __cxa_guard_release(&qword_26AF7CF08);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CFA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RectangleShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RectangleShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::RectangleShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RectangleShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::RectangleShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 11;
  *(void *)a3 = &unk_26E6D8D68;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
}

uint64_t re::internal::defaultConstructV2<re::RectangleShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 11;
  *(void *)double result = &unk_26E6D8D68;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

void *re::allocInfo_SphereShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CF18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D6F8, "SphereShapeData");
    __cxa_guard_release(&qword_26AF7CF18);
  }
  return &unk_26AF7D6F8;
}

void re::initInfo_SphereShapeData(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0x51F1FDBF4C05C2FCLL;
  v15[1] = "SphereShapeData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF20, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CF20);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CFB8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_float((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "radius";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0xC00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7CFC0 = v13;
      __cxa_guard_release(&qword_26AF7CF20);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CFB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SphereShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SphereShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SphereShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SphereShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

void re::internal::defaultConstruct<re::SphereShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 2;
  *(void *)a3 = &unk_26E6D8DA0;
}

uint64_t re::internal::defaultConstructV2<re::SphereShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 2;
  *(void *)double result = &unk_26E6D8DA0;
  return result;
}

void *re::allocInfo_TriangleMeshShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CF30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D770, "TriangleMeshShapeData");
    __cxa_guard_release(&qword_26AF7CF30);
  }
  return &unk_26AF7D770;
}

void re::initInfo_TriangleMeshShapeData(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xF87ECA8D15E0C46CLL;
  v15[1] = "TriangleMeshShapeData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CF38);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7CE30;
      if (!qword_26AF7CE30)
      {
        uint64_t v7 = (re *)re::allocInfo_CollisionShapeData(v5);
        qword_26AF7CE30 = (uint64_t)v7;
        re::initInfo_CollisionShapeData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "CollisionShapeData";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7CFC8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_AssetHandle((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "mesh";
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF7CFD0 = v13;
      __cxa_guard_release(&qword_26AF7CF38);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7CFC8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TriangleMeshShapeData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TriangleMeshShapeData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::TriangleMeshShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TriangleMeshShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

void re::internal::defaultConstruct<re::TriangleMeshShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 12;
  *(void *)a3 = &unk_26E6D8DD8;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
}

void re::internal::defaultDestruct<re::TriangleMeshShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t re::internal::defaultConstructV2<re::TriangleMeshShapeData>(uint64_t result)
{
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 12;
  *(void *)double result = &unk_26E6D8DD8;
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TriangleMeshShapeData>(uint64_t a1)
{
}

void *re::allocInfo_IndexedTriangleMeshData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CF48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7D7E8, "IndexedTriangleMeshData");
    __cxa_guard_release(&qword_26AF7CF48);
  }
  return &unk_26AF7D7E8;
}

void re::initInfo_IndexedTriangleMeshData(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xDBF1A6A2E64C08A0;
  v20[1] = "IndexedTriangleMeshData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7CF50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "positions";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7D090 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::FixedArray<unsigned short>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "indices";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7D118;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x1800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7D098 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::FixedArray<unsigned short>>::get((uint64_t)v12, v13);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "materialIndices";
      *(void *)(v14 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7D118;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x3000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v14 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7D0A0 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      long long v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "has32BitIndices";
      *(void *)(v18 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x4800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7D0A8 = v18;
      __cxa_guard_release(&qword_26AF7CF50);
    }
  }
  *((void *)this + re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7D090;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IndexedTriangleMeshData>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IndexedTriangleMeshData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::IndexedTriangleMeshData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IndexedTriangleMeshData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

void re::IntrospectionInfo<re::FixedArray<unsigned short>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7CF60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7CF60))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7D118);
    qword_26AF7D118 = (uint64_t)&unk_26E6D8EA8;
    __cxa_guard_release(&qword_26AF7CF60);
  }
  if ((byte_26AF7CDD3 & 1) == 0)
  {
    uint64_t v2 = re::introspect_uint16_t((re *)1, a2);
    if ((byte_26AF7CDD3 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF7CDD3 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7D118, 0);
      qword_26AF7D128 = 0x1800000004;
      dword_26AF7D130 = v4;
      word_26AF7D134 = 0;
      *(void *)&xmmword_26AF7D138 = 0;
      *((void *)&xmmword_26AF7D138 + 1) = 0xFFFFFFFFLL;
      qword_26AF7D148 = v3;
      qword_26AF7D150 = 0;
      qword_26AF7D118 = (uint64_t)&unk_26E6D8EA8;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF7D118, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x18uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF7D138 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::IndexedTriangleMeshData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IndexedTriangleMeshData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 6);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 3);
  return re::FixedArray<CoreIKTransform>::deinit(a3);
}

double re::internal::defaultConstructV2<re::IndexedTriangleMeshData>(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::StringID>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IndexedTriangleMeshData>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 6);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 3);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::introspect_IndexedTriangleMeshData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IndexedTriangleMeshData", (uint64_t (*)(re::internal *))re::allocInfo_IndexedTriangleMeshData, (re::IntrospectionBase *(*)(void))re::initInfo_IndexedTriangleMeshData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::IndexedTriangleMeshData>, this);
}

uint64_t re::AssetHandle::loadedAsset<re::CollisionShapeAsset>(re::CollisionShapeAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::CollisionShapeAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::GeometricObjectBaseData::~GeometricObjectBaseData(re::GeometricObjectBaseData *this)
{
  *(void *)this = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::GeometricObjectBaseData *)((char *)this + 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::GeometricObjectBaseData *)((char *)this + 48));
  JUMPOUT(0x237DBCBD0);
}

void re::GeometricObjectData::~GeometricObjectData(re::GeometricObjectData *this)
{
  *(void *)this = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::GeometricObjectData *)((char *)this + 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D8B10;
  re::AssetHandle::~AssetHandle((re::GeometricObjectData *)((char *)this + 48));
  JUMPOUT(0x237DBCBD0);
}

void re::BoxShapeData::~BoxShapeData(re::BoxShapeData *this)
{
}

void re::CollisionShapeData::~CollisionShapeData(re::CollisionShapeData *this)
{
}

void re::CapsuleShapeData::~CapsuleShapeData(re::CapsuleShapeData *this)
{
}

void re::CompoundShapeData::~CompoundShapeData(re::CompoundShapeData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6);
  re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2);
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<re::GeometricObjectData>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = 80 * v2;
      uint64_t v6 = (re::AssetHandle *)(v4 + 48);
      do
      {
        *((void *)v6 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &unk_26E6D8B10;
        re::AssetHandle::~AssetHandle(v6);
        uint64_t v6 = (re::AssetHandle *)(v7 + 80);
        v4 += 80;
        v5 -= 80;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::ConeShapeData::~ConeShapeData(re::ConeShapeData *this)
{
}

void re::ConvexPolyhedronShapeData::~ConvexPolyhedronShapeData(re::ConvexPolyhedronShapeData *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 56);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 16);
  JUMPOUT(0x237DBCBD0);
}

void re::CylinderShapeData::~CylinderShapeData(re::CylinderShapeData *this)
{
}

void re::EmptyShapeData::~EmptyShapeData(re::EmptyShapeData *this)
{
}

void re::PlaneShapeData::~PlaneShapeData(re::PlaneShapeData *this)
{
}

void re::RectangleShapeData::~RectangleShapeData(re::RectangleShapeData *this)
{
}

void re::SphereShapeData::~SphereShapeData(re::SphereShapeData *this)
{
}

void re::TriangleMeshShapeData::~TriangleMeshShapeData(re::TriangleMeshShapeData *this)
{
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::TriangleMeshShapeData *)((char *)this + 16));
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<re::Pose<float>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  uint64_t *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 16);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      uint64_t *result = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = 0x3F80000000000000;
      result += 4;
      --v6;
    }
    while (v6);
  }
  uint64_t *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

void *re::IntrospectionFixedArray<re::GeometricObjectData>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::GeometricObjectData>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::GeometricObjectData>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::GeometricObjectData>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::GeometricObjectData>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::GeometricObjectData>::init(uint64_t a1, void *a2, re *a3, int a4, unint64_t a5)
{
  double result = re::FixedArray<re::GeometricObjectData>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      double result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 80;
    }
    while (a5 != v12);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::GeometricObjectData>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::GeometricObjectData>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::GeometricObjectData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::GeometricObjectData>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::GeometricObjectData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 80 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 80 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::GeometricObjectData>::deinit(a1);
  return re::FixedArray<re::GeometricObjectData>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(void *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::GeometricObjectData>::deinit(a1);
  uint64_t v8 = (_anonymous_namespace_ *)re::FixedArray<re::GeometricObjectData>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 80 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 80;
        v11 -= 80;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 80 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionFixedArray<unsigned short>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned short>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<unsigned short>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned short>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

void re::IntrospectionFixedArray<unsigned short>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, uint64_t a5)
{
  re::FixedArray<unsigned short>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 2;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned short>::deinit(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<unsigned short>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned short>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<unsigned short>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 2 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 2 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, uint64_t a4)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  re::FixedArray<unsigned short>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 2 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 2 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::allocInfo_DrawableQueueService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_99, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_99))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DA20, "DrawableQueueService");
    __cxa_guard_release(&_MergedGlobals_99);
  }
  return &unk_26AF7DA20;
}

void re::initInfo_DrawableQueueService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x6C98752D9BDC5884;
  v5[1] = "DrawableQueueService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &re::initInfo_DrawableQueueService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_DrawableQueueService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueService", (uint64_t (*)(re::internal *))re::allocInfo_DrawableQueueService, (re::IntrospectionBase *(*)(void))re::initInfo_DrawableQueueService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DrawableQueueService>, this);
}

uint64_t *re::SkeletalPoseDefinitionAsset::assetType(re::SkeletalPoseDefinitionAsset *this)
{
  {
    re::SkeletalPoseDefinitionAsset::assetType(void)::type = (uint64_t)"SkeletalPose";
    qword_26879E908 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SkeletalPoseDefinitionAsset::assetType(void)::type);
  }
  return &re::SkeletalPoseDefinitionAsset::assetType(void)::type;
}

void *re::SkeletalPoseDefinitionAsset::init(re::SkeletalPoseDefinitionAsset *this, re::Allocator *a2)
{
  uint64_t v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *((void *)this + re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)this + 15, 0);
  ++*((_DWORD *)this + 36);
  *((void *)this + 20) = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)this + 20, 0);
  *((void *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v2;
  long long v4 = (char *)this + 200;
  ++*((_DWORD *)v4 - 4);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  *((void *)v4 + 10) = v2;
  uint64_t result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)v4 + 10, 0);
  ++*((_DWORD *)v4 + 26);
  return result;
}

void re::SkeletalPoseDefinitionAsset::init(re::SkeletalPoseDefinitionAsset *this, const re::MeshAsset *a2, re::Allocator *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!*((void *)a2 + 55))
  {
    long long v6 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Mesh Asset doesn't have a mesh manager.", buf, 2u);
    }
    return;
  }
  unint64_t v3 = a2;
  re::SkeletalPoseDefinitionAsset::init(this, a3);
  if (!*((void *)v3 + 55)) {
    return;
  }
  unint64_t v5 = *((void *)v3 + 117);
  if (*((void *)this + 16) >= v5)
  {
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)this + 15, *((void *)v3 + 117));
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = re::MeshAsset::skeletonAtIndex(v3, v8);
    re::StringID::StringID((re::StringID *)&v34, (const StringID *)v9);
    uint64_t v10 = *(void *)(v9 + 24);
    *(void *)long long buf = *(void *)(v9 + 32);
    *(void *)&buf[8] = v10;
    uint64_t v11 = *(void *)(v9 + 72);
    *(void *)uint64_t v36 = *(void *)(v9 + 80);
    *(void *)&v36[8] = v11;
    if (v8 >= *((void *)v3 + 28)) {
      memset(v33, 0, sizeof(v33));
    }
    else {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(*((void *)v3 + 30) + v7));
    }
    re::SkeletalPoseDefinitionAsset::addDefaultSkeletalPose(this, &v34, (uint64_t)buf, v36, (uint64_t)&re::SkeletalPoseDefinitionAsset::init(re::MeshAsset const&,re::Allocator *)::emptyJointNameMap, v33);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
    re::StringID::destroyString((re::StringID *)&v34);
    ++v8;
    v7 += 24;
  }
  while (v5 != v8);
LABEL_13:
  BOOL v30 = (re::SkeletalPoseDefinitionAsset *)((char *)this + 280);
  unint64_t v12 = *((unsigned int *)v3 + 178);
  if (*((void *)this + 36) < v12) {
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v30, v12);
  }
  if (*((unsigned char *)v3 + 952)) {
    uint64_t v13 = (uint64_t *)((char *)v3 + 416);
  }
  else {
    uint64_t v13 = (uint64_t *)((char *)v3 + 24);
  }
  uint64_t v28 = *v13;
  if (*v13)
  {
    unint64_t v14 = 0;
    uint64_t v27 = *((void *)v3 + 55) + 8;
    uint64_t v32 = v3;
    do
    {
      unint64_t v15 = *((void *)v3 + 52);
      if (v15 <= v14) {
        goto LABEL_35;
      }
      unint64_t v29 = v14;
      uint64_t v16 = re::DataArray<re::MeshModel>::get(v27, *(void *)(*((void *)v3 + 54) + 8 * v14));
      uint64_t v17 = *(void *)(v16 + 176);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 8);
        if (v18)
        {
          uint64_t v19 = v16;
          unint64_t v14 = 0;
          uint64_t v20 = 504;
          unint64_t v15 = 4;
          uint64_t v31 = *(void *)(v17 + 8);
          do
          {
            uint64_t v21 = *(void *)(v19 + 176);
            if (v21 && *(void *)(v21 + 8) > v14) {
              unint64_t v22 = *(unsigned int *)(*(void *)(v21 + 16) + v15);
            }
            else {
              unint64_t v22 = 0xFFFFFFFFLL;
            }
            if (v5 > v22)
            {
              unint64_t v23 = v5;
              unint64_t v24 = *(void *)(v19 + 56);
              if (v24 <= v14)
              {
                uint64_t v35 = 0;
                long long v44 = 0u;
                long long v45 = 0u;
                long long v42 = 0u;
                long long v43 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v36 = 136315906;
                *(void *)&v36[4] = "operator[]";
                *(_WORD *)&v36[12] = 1024;
                *(_DWORD *)&v36[14] = 476;
                __int16 v37 = 2048;
                unint64_t v38 = v14;
                __int16 v39 = 2048;
                unint64_t v40 = v24;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_35:
                uint64_t v35 = 0;
                long long v44 = 0u;
                long long v45 = 0u;
                long long v42 = 0u;
                long long v43 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v36 = 136315906;
                *(void *)&v36[4] = "operator[]";
                *(_WORD *)&v36[12] = 1024;
                *(_DWORD *)&v36[14] = 797;
                __int16 v37 = 2048;
                unint64_t v38 = v14;
                __int16 v39 = 2048;
                unint64_t v40 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              uint64_t v25 = *(void *)(v19 + 64);
              unint64_t v26 = (const StringID *)re::MeshAsset::skeletonAtIndex(v32, v22);
              buf[0] = 2;
              re::StringID::StringID((re::StringID *)&buf[8], (const StringID *)v19);
              re::StringID::StringID((re::StringID *)((char *)&v42 + 8), (const StringID *)(v25 + v20));
              re::StringID::StringID((re::StringID *)((char *)&v43 + 8), v26);
              BYTE8(v44) = 0;
              HIDWORD(v44) = v22;
              re::DynamicArray<re::SkeletalPoseMeshMap>::add(v30, (uint64_t)buf);
              re::StringID::destroyString((re::StringID *)((char *)&v43 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v42 + 8));
              re::StringID::destroyString((re::StringID *)&buf[8]);
              uint64_t v18 = v31;
              unint64_t v5 = v23;
            }
            ++v14;
            v15 += 72;
            v20 += 560;
          }
          while (v18 != v14);
        }
      }
      unint64_t v14 = v29 + 1;
      unint64_t v3 = v32;
    }
    while (v29 + 1 != v28);
  }
}

uint64_t re::SkeletalPoseDefinitionAsset::addDefaultSkeletalPose(void *a1, StringID *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v11 = a1 + 15;
  long long v36 = 0uLL;
  *(void *)&long long v37 = 0;
  unint64_t v12 = *(void *)(a3 + 8);
  if (v12)
  {
    re::FixedArray<re::StringID>::copy((unint64_t *)&v36, (uint64_t **)a3);
  }
  re::DynamicArray<re::FixedArray<re::StringID>>::add(v11, &v36);
  re::FixedArray<re::StringID>::deinit(&v36);
  uint64_t v35 = a1;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 5), a2);
  if (a4[1])
  {
    unint64_t v13 = a1[27];
    unint64_t v14 = a1[17];
    if (v13 < v14)
    {
      re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(a1 + 25, v14);
      unint64_t v14 = a1[17];
      unint64_t v13 = a1[27];
    }
    unint64_t v15 = v14 - 1;
    if (v13 <= v14 - 1) {
      goto LABEL_24;
    }
    uint64_t v16 = a1[29];
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v16 + 24 * v15));
    re::FixedArray<re::GenericSRT<float>>::init<>((void *)(v16 + 24 * v15), v35[25], *(void *)(a3 + 8));
    if (*(_DWORD *)(a5 + 28))
    {
      uint64_t v18 = *(void *)(a3 + 8);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16 + 24 * v15;
        unint64_t v23 = (unint64_t *)(v22 + 8);
        unint64_t v24 = (void *)(v22 + 16);
        while (1)
        {
          unint64_t v25 = *(void *)(a3 + 8);
          if (v25 <= v21) {
            break;
          }
          unint64_t v26 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a5, (void *)(*(void *)a3 + v19));
          if (v26)
          {
            unint64_t v27 = *v26;
            unint64_t v28 = a4[1];
            if (v28 <= v27) {
              goto LABEL_22;
            }
            if (*v23 <= v21) {
              goto LABEL_23;
            }
            unint64_t v29 = (long long *)(*a4 + 48 * v27);
            BOOL v30 = (_OWORD *)(*v24 + v20);
            long long v31 = *v29;
            long long v32 = v29[2];
            v30[1] = v29[1];
            v30[2] = v32;
            *BOOL v30 = v31;
          }
          ++v21;
          v20 += 48;
          v19 += 16;
          if (v18 == v21) {
            goto LABEL_18;
          }
        }
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v25);
        _os_crash();
        __break(1u);
LABEL_22:
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v28);
        _os_crash();
        __break(1u);
LABEL_23:
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_24:
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    else
    {
      re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v16 + 24 * v15), (uint64_t)a4);
    }
  }
LABEL_18:
  if (a6[1])
  {
    re::DynamicArray<re::AssetHandle>::resize((uint64_t)v35, v35[17]);
    re::AssetHandle::operator=(v35[4] + 24 * v35[2] - 24, a6);
  }
  return v35[17] - 1;
}

void *re::DynamicArray<re::SkeletalPoseMeshMap>::add(void *this, uint64_t a2)
{
  unint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalPoseMeshMap>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + (v4 << 6);
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16);
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 24) = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(v5 + 40) = *(void *)(v5 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(void *)(v5 + 40) = *(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(void *)(v5 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  *(void *)(v5 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 56);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::SkeletalPoseDefinitionAsset::deinit(re::SkeletalPoseDefinitionAsset *this)
{
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 160);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 240);
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)this + 280);
}

void re::SkeletalPoseDefinitionAsset::constructSkeletalPoses(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unint64_t v9 = a1[17];
  re::DynamicArray<re::SkeletalPose>::resize(a3, v9);
  unint64_t v33 = v9;
  if (v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 8;
    while (1)
    {
      unint64_t v14 = (uint64_t *)a1[17];
      if (v14 <= v12) {
        break;
      }
      unint64_t v4 = *(uint64_t **)(a3 + 16);
      if (v4 <= v12) {
        goto LABEL_37;
      }
      uint64_t v5 = *(uint64_t **)(a1[19] + v13);
      unint64_t v4 = *(uint64_t **)(*(void *)(a3 + 32) + v11 + 24);
      if ((unint64_t)v12 >= a1[2])
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v10 = (re *)re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(a1[4] + v13 - 8));
        if (v10) {
          uint64_t v6 = (uint64_t *)((char *)v10 + 88);
        }
        else {
          uint64_t v6 = 0;
        }
        unint64_t v14 = (uint64_t *)a1[17];
      }
      if (v14 <= v12) {
        goto LABEL_38;
      }
      uint64_t v15 = a1[19];
      uint64_t v16 = re::globalAllocators(v10);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 256, 8);
      uint64_t v18 = *(void *)(v15 + v13);
      *(void *)&long long v46 = *(void *)(v15 + v13 + 8);
      *((void *)&v46 + 1) = v18;
      uint64_t v36 = v17;
      uint64_t v19 = *(uint64_t **)(a3 + 16);
      if (v19 <= v12) {
        goto LABEL_39;
      }
      re::SkeletalPose::reset((void *)(*(void *)(a3 + 32) + v11), &v36);
      if (v6)
      {
        re::StringID::StringID((re::StringID *)&v34, (const StringID *)v6);
      }
      else
      {
        uint64_t v34 = 0x12712E227DDD53ALL;
        uint64_t v35 = "/noSkeleton";
      }
      uint64_t v6 = *(uint64_t **)(a3 + 16);
      if (v6 <= v12) {
        goto LABEL_40;
      }
      re::StringID::operator=((unint64_t *)(*(void *)(a3 + 32) + v11), &v34);
      re::StringID::destroyString((re::StringID *)&v34);
      if (v5 != v4 && (unint64_t)v12 < a1[27])
      {
        uint64_t v20 = (uint64_t **)(a1[29] + v13);
        uint64_t v22 = *v20;
        uint64_t v21 = (uint64_t)(v20 - 1);
        if (v5 == v22)
        {
          unint64_t v4 = *(uint64_t **)(a3 + 16);
          if (v4 <= v12) {
            goto LABEL_43;
          }
          uint64_t v10 = (re *)re::FixedArray<re::GenericSRT<float>>::operator=((void *)(*(void *)(a3 + 32) + v11 + 16), v21);
        }
      }
      if (v17) {

      }
      unint64_t v12 = (uint64_t *)((char *)v12 + 1);
      v13 += 24;
      v11 += 88;
      if ((uint64_t *)v33 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 797;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_37:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_38:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    uint64_t v19 = (uint64_t *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 797;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_39:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_40:
    uint64_t v37 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 797;
    __int16 v42 = 2048;
    long long v43 = v5;
    __int16 v44 = 2048;
    long long v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v5;
    __int16 v44 = 2048;
    long long v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    uint64_t v34 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v12;
    __int16 v44 = 2048;
    long long v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    uint64_t v37 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    long long v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    long long v43 = v5;
    __int16 v44 = 2048;
    long long v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_25:
  unint64_t v23 = a1[22];
  unint64_t v12 = a4;
  re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(a4, v23);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v4 = (uint64_t *)a1[22];
      if (v4 <= v5) {
        goto LABEL_41;
      }
      unint64_t v4 = (uint64_t *)a4[2];
      if (v4 <= v5) {
        goto LABEL_42;
      }
      unint64_t v26 = *(void *)(a1[24] + v24 + 8);
      uint64_t v27 = a4[4] + v25;
      uint64_t v28 = *(void *)(v27 + 16);
      re::DynamicArray<re::Matrix4x4<float>>::resize(v27, v26);
      if (v26 != v28 && (unint64_t)v5 < a1[32])
      {
        uint64_t v29 = a1[34] + v24;
        if (v26 == *(void *)(v29 + 8))
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v31 = v29 + 8;
          BOOL v30 = *(const char **)(v29 + 8);
          uint64_t v34 = *(void *)(v31 + 8);
          uint64_t v35 = v30;
          unint64_t v4 = (uint64_t *)a4[2];
          if (v4 <= v5) {
            goto LABEL_44;
          }
          re::DynamicArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a4[4] + v25), (uint64_t)&v34);
        }
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + 1);
      v25 += 40;
      v24 += 24;
      if ((uint64_t *)v23 == v5) {
        return;
      }
    }
  }
}

void re::DynamicArray<re::SkeletalPose>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 88 * a2;
    unint64_t v9 = a2;
    do
    {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 88;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 88 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(_OWORD *)(v7 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(void *)(v7 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
        *(_DWORD *)(v7 + 64) = 0;
        *(void *)(v7 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
        *(void *)(v7 + 80) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
        *(void *)(v7 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
        *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Matrix4x4<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Matrix4x4<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Matrix4x4<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

re *re::SkeletalPoseDefinitionAssetLoader::unloadAsset(re::SkeletalPoseDefinitionAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SkeletalPoseDefinitionAsset>((re *)"unloadAsset", 208, a2);
}

re *re::internal::destroyPersistent<re::SkeletalPoseDefinitionAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 280);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 240);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 200);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 160);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 120);
    re::DynamicArray<re::StringID>::deinit(a3 + 80);
    re::DynamicArray<re::StringID>::deinit(a3 + 40);
    re::DynamicArray<re::AssetHandle>::deinit(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::SkeletalPoseDefinitionAssetLoader::isSupportedSourceExtension(re::SkeletalPoseDefinitionAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reskeletalposes") == 0;
}

uint64_t re::SkeletalPoseDefinitionAssetLoader::introspectionType(re::SkeletalPoseDefinitionAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAE8))
  {
    qword_26AF7DAE0 = re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseDefinitionAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7DAD8, 0);
    __cxa_guard_release(&qword_26AF7DAE8);
  }
  return qword_26AF7DAE0;
}

void re::introspect_SkeletalPoseType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF7DAA0);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      unint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)unint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LocalSpaceSRTs";
      qword_26AF7DB08 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
      *(void *)(v28 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "ModelSpaceMatrix4x4s";
      qword_26AF7DB10 = v28;
      __cxa_guard_release(&qword_26AF7DAA0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAA8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7DC28, "SkeletalPoseType", 1, 1, 1, 1);
    qword_26AF7DC28 = (uint64_t)&unk_26E715E00;
    qword_26AF7DC68 = (uint64_t)&re::introspect_SkeletalPoseType(BOOL)::enumTable;
    dword_26AF7DC38 = 9;
    __cxa_guard_release(&qword_26AF7DAA8);
  }
  if ((_MergedGlobals_100 & 1) == 0)
  {
    _MergedGlobals_100 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7DC28, a2);
    uint64_t v30 = 0x3447792674AFC288;
    uint64_t v31 = "SkeletalPoseType";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF7DC68;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF7DC48 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SkeletalPoseType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_SkeletalPoseMeshMap(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DC70, "SkeletalPoseMeshMap");
    __cxa_guard_release(&qword_26AF7DAB0);
  }
  return &unk_26AF7DC70;
}

void re::initInfo_SkeletalPoseMeshMap(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xC96B6221C8DF5BCALL;
  v20[1] = "SkeletalPoseMeshMap";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DAB8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "meshIdentifier";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7DB18 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletonName";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7DB20 = v11;
      unint64_t v12 = (re *)re::introspectionAllocator((re *)v11);
      re::introspect_SkeletalPoseType(v12, v13);
      uint64_t v14 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletalPoseType";
      *(void *)(v14 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7DC28;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3800000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v14 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7DB28 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::introspect_uint32_t((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "poseIndex";
      *(void *)(v18 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3C00000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7DB30 = v18;
      __cxa_guard_release(&qword_26AF7DAB8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DB18;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseMeshMap>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseMeshMap>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SkeletalPoseMeshMap>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseMeshMap>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

void re::internal::defaultConstruct<re::SkeletalPoseMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  *(unsigned char *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a3 + 60) = 0;
}

void re::internal::defaultDestruct<re::SkeletalPoseMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::SkeletalPoseMeshMap>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(result + 40) = 0;
  *(void *)(result + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "";
  *(unsigned char *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseMeshMap>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void *re::allocInfo_SkeletalPoseDefinitionAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DCE8, "SkeletalPoseDefinitionAsset");
    __cxa_guard_release(&qword_26AF7DAC8);
  }
  return &unk_26AF7DCE8;
}

void re::initInfo_SkeletalPoseDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x97599FFE2F080A26;
  v24[1] = "SkeletalPoseDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAD0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DAD0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletons";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7DB38 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletalPoseJoints";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7DB40 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletalPoseModelSpaceTransformJoints";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xA000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7DB48 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::GenericSRT<float>>>>::get();
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "defaultPoseTransforms";
      *(void *)(v18 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = qword_26AF7DB68;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xC800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7DB50 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::Matrix4x4<float>>>>::get();
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "defaultModelSpacePoseTransforms";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7DBA8;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xF000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7DB58 = v20;
      long long v21 = (re *)re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseMeshMap>>::get(v21);
      uint64_t v22 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "skeletalMeshPoses";
      *(void *)(v22 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7DBE8;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x11800000006;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v22 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF7DB60 = v22;
      __cxa_guard_release(&qword_26AF7DAD0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DB38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseDefinitionAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseDefinitionAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SkeletalPoseDefinitionAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

void re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::GenericSRT<float>>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAF0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF7DB68);
    qword_26AF7DB68[0] = (uint64_t)&unk_26E6D9098;
    __cxa_guard_release(&qword_26AF7DAF0);
  }
  if ((byte_26AF7DA99 & 1) == 0)
  {
    uint64_t v0 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
    if ((byte_26AF7DA99 & 1) == 0)
    {
      int v1 = v0;
      byte_26AF7DA99 = 1;
      int v2 = *((_DWORD *)v0 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF7DB68, 0);
      unk_26AF7DB78 = 0x2800000003;
      unk_26AF7DB80 = v2;
      unk_26AF7DB84 = 0;
      *(void *)&xmmword_26AF7DB88 = 0;
      *((void *)&xmmword_26AF7DB88 + 1) = 0xFFFFFFFFLL;
      *(void *)algn_26AF7DB98 = v1;
      qword_26AF7DBA0 = 0;
      qword_26AF7DB68[0] = (uint64_t)&unk_26E6D9098;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)qword_26AF7DB68, (const re::IntrospectionBase *)&v13);
      if (v14) {
        unint64_t v5 = *(const char **)&v15[7];
      }
      else {
        unint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *((_OWORD *)v1 + 2);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7DB88 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::Matrix4x4<float>>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DAF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DAF8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7DBA8);
    qword_26AF7DBA8 = (uint64_t)&unk_26E6D9130;
    __cxa_guard_release(&qword_26AF7DAF8);
  }
  if ((byte_26AF7DA9A & 1) == 0)
  {
    uint64_t v0 = re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(1);
    if ((byte_26AF7DA9A & 1) == 0)
    {
      uint64_t v1 = (uint64_t)v0;
      byte_26AF7DA9A = 1;
      int v2 = *((_DWORD *)v0 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7DBA8, 0);
      qword_26AF7DBB8 = 0x2800000003;
      dword_26AF7DBC0 = v2;
      word_26AF7DBC4 = 0;
      *(void *)&xmmword_26AF7DBC8 = 0;
      *((void *)&xmmword_26AF7DBC8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7DBD8 = v1;
      unk_26AF7DBE0 = 0;
      qword_26AF7DBA8 = (uint64_t)&unk_26E6D9130;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF7DBA8, (const re::IntrospectionBase *)&v13);
      if (v14) {
        unint64_t v5 = *(const char **)&v15[7];
      }
      else {
        unint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7DBC8 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseMeshMap>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DB00, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7DB00);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7DBE8);
      qword_26AF7DBE8 = (uint64_t)&unk_26E6D91C8;
      __cxa_guard_release(&qword_26AF7DB00);
    }
  }
  if ((byte_26AF7DA9B & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7DAC0;
    if (qword_26AF7DAC0
      || (uint64_t v1 = re::allocInfo_SkeletalPoseMeshMap(a1),
          qword_26AF7DAC0 = (uint64_t)v1,
          re::initInfo_SkeletalPoseMeshMap((re *)v1, v2),
          (byte_26AF7DA9B & 1) == 0))
    {
      byte_26AF7DA9B = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7DBE8, 0);
      qword_26AF7DBF8 = 0x2800000003;
      dword_26AF7DC00 = v3;
      word_26AF7DC04 = 0;
      *(void *)&xmmword_26AF7DC08 = 0;
      *((void *)&xmmword_26AF7DC08 + 1) = 0xFFFFFFFFLL;
      qword_26AF7DC18 = (uint64_t)v1;
      unk_26AF7DC20 = 0;
      qword_26AF7DBE8 = (uint64_t)&unk_26E6D91C8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7DBE8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7DC08 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::SkeletalPoseDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a3 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 28re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 280);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 240);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 200);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 160);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 120);
  re::DynamicArray<re::StringID>::deinit(a3 + 80);
  re::DynamicArray<re::StringID>::deinit(a3 + 40);
  return re::DynamicArray<re::AssetHandle>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SkeletalPoseDefinitionAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 28re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SkeletalPoseDefinitionAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 280);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 240);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 200);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1 + 160);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1 + 120);
  re::DynamicArray<re::StringID>::deinit(a1 + 80);
  re::DynamicArray<re::StringID>::deinit(a1 + 40);
  return re::DynamicArray<re::AssetHandle>::deinit(a1);
}

void re::SkeletalPoseDefinitionAssetLoader::~SkeletalPoseDefinitionAssetLoader(re::SkeletalPoseDefinitionAssetLoader *this)
{
}

void *re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = &v8[8 * v9];
        long long v11 = v7;
        do
        {
          *(unsigned char *)long long v11 = *(unsigned char *)v8;
          long long v13 = (re::StringID *)(v8 + 1);
          char v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          uint64_t v11[2] = v8[2];
          v8[2] = "";
          v8[1] = 0;
          char v15 = (re::StringID *)(v8 + 3);
          char v14 = v8[3];
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v8[3] & 1;
          v11[3] = v8[3] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          v11[4] = v8[4];
          v8[4] = "";
          v8[3] = 0;
          uint64_t v17 = v8[5];
          uint64_t v16 = (re::StringID *)(v8 + 5);
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[5] = *(void *)v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[6] = *((void *)v16 + 1);
          *(void *)uint64_t v16 = 0;
          *((void *)v16 + 1) = "";
          v11[7] = *((void *)v16 + 2);
          re::StringID::destroyString(v16);
          re::StringID::destroyString(v15);
          re::StringID::destroyString(v13);
          uint64_t v8 = (void *)((char *)v16 + 24);
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::SkeletalPoseMeshMap>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Matrix4x4<float>>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  BOOL v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 1024;
    HIWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + (a2 << 6)), __src, a4 << 6);
  }
  else
  {
    re::DynamicArray<re::Matrix4x4<float>>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    long long v11 = &__src[64 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + (v5 << 6)), __src, v10 << 6);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + (v5 << 6)), v11, &__src[64 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  char v15 = (void *)(*(void *)(a4 + 32) + 24 * v9);
  *char v15 = 0;
  v15[1] = 0;
  void v15[2] = 0;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      unint64_t v9 = *(uint64_t **)(a1 + 32);
      uint64_t v10 = 24 * v8;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v9);
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 24 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 24;
        v14 -= 24;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  char v15 = (void *)(*(void *)(a4 + 32) + 24 * v9);
  *char v15 = 0;
  v15[1] = 0;
  void v15[2] = 0;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      unint64_t v9 = *(uint64_t **)(a1 + 32);
      uint64_t v10 = 24 * v8;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v9);
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 24 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 24;
        v14 -= 24;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::SkeletalPoseMeshMap>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v13[0] = 0;
  uint64_t v13[2] = 0;
  long long v10 = 0u;
  v12[0] = 0;
  uint64_t v11 = "";
  v12[1] = "";
  v13[1] = "";
  re::DynamicArray<re::SkeletalPoseMeshMap>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + (*((void *)this + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::SkeletalPoseMeshMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = (a2 << 6) | 0x28;
    unint64_t v9 = a2;
    do
    {
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      ++v9;
      v8 += 64;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (v4 << 6) | 0x3C;
      do
      {
        unint64_t v7 = (_DWORD *)(*(void *)(a1 + 32) + v6);
        *((unsigned char *)v7 - 60) = 0;
        *(void *)(v7 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
        *(void *)(v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = "";
        *(void *)(v7 - 9) = 0;
        *(void *)(v7 - 7) = "";
        *(void *)(v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
        *(void *)(v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = "";
        *((unsigned char *)v7 - 4) = 0;
        *unint64_t v7 = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        long long v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SkeletalPoseMeshMap>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Client::createRuntimeData(re::AudioAssetLoadStrategy_Base *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  task_id_token_t token = 0;
  uint64_t v6 = (re *)task_create_identity_token(*MEMORY[0x263EF8960], &token);
  mach_error_t v7 = (int)v6;
  if (v6)
  {
    uint64_t v8 = (id)*re::audioLogObjects(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = mach_error_string(v7);
      *(_DWORD *)long long buf = 136315138;
      long long v21 = v18;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Could not retrieve task id from app. Failed with KERN error code: %s", buf, 0xCu);
    }
  }
  *(_DWORD *)(a2 + 13re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = token;
  if (re::audio::CanStreamAudioFiles(v6)) {
    BOOL v9 = *(unsigned char *)(a2 + 100) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  id v10 = *(id *)(*(void *)(a2 + 8) + 16);

  if (!v10)
  {
    if (!a3)
    {
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 8) + 48) + 64))();
      uint64_t v13 = *(void *)(a2 + 8);
      if (!v12)
      {
        id v15 = *(id *)(v13 + 184);

        if (!v15)
        {
          RuntimeDataWithAudioFile = (re *)re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(a1, (re::AudioFileAsset *)a2);
          if ((RuntimeDataWithAudioFile & 1) == 0)
          {
            uint64_t v17 = *re::audioLogObjects(RuntimeDataWithAudioFile);
            uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            *(_WORD *)long long buf = 0;
LABEL_24:
            _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to createSharablePCMBuffer.", buf, 2u);
            return 0;
          }
        }
LABEL_15:
        if (v9) {
          goto LABEL_17;
        }
        SharablePCMBuffer = (re *)re::AudioFileAsset::createSharablePCMBuffer((re::AudioFileAsset *)a2);
        if (SharablePCMBuffer) {
          goto LABEL_17;
        }
        uint64_t v17 = *re::audioLogObjects(SharablePCMBuffer);
        uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        *(_WORD *)long long buf = 0;
        goto LABEL_24;
      }
      a3 = v13 + 48;
    }
    if (((*(uint64_t (**)(re::AudioAssetLoadStrategy_Base *, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a3, a2) & 1) == 0)return 0; {
    goto LABEL_15;
    }
  }
  uint64_t result = re::AudioFileAsset::createSharablePCMBuffer((re::AudioFileAsset *)a2);
  if (result)
  {
LABEL_17:
    uint64_t result = 1;
    *(_WORD *)(a2 + 15re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 1;
  }
  return result;
}

void sub_23353AF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Client::resourceDidUpdate(int a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v9 = *a3;
  LOBYTE(v10[0]) = 0;
  char v11 = 0;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate(a1, a2, &v9, a4, a5, (uint64_t)v10);
  if (v11) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v10);
  }
}

void sub_23353B058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&a11);
  }

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Client::~AudioAssetLoadStrategy_Client(re::AudioAssetLoadStrategy_Client *this)
{
}

void *re::allocInfo_ImageBasedLightFile(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_101, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_101))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DDB8, "ImageBasedLightFile");
    __cxa_guard_release(&_MergedGlobals_101);
  }
  return &unk_26AF7DDB8;
}

void re::initInfo_ImageBasedLightFile(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x97870A1F04E56B4;
  v22[1] = "ImageBasedLightFile";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DD68, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DD68);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      mach_error_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "sourceTexture";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7DD98 = v8;
      id v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "diffuseTexture";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7DDA0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      id v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "specularTexture";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7DDA8 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "colorSpace";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7DDB0 = v20;
      __cxa_guard_release(&qword_26AF7DD68);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DD98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ImageBasedLightFile>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ImageBasedLightFile>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ImageBasedLightFile>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ImageBasedLightFile>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void *re::internal::defaultConstruct<re::ImageBasedLightFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return re::DynamicString::setCapacity((void *)(a3 + 72), 0);
}

void re::internal::defaultDestruct<re::ImageBasedLightFile>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

void *re::internal::defaultConstructV2<re::ImageBasedLightFile>(uint64_t a1)
{
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return re::DynamicString::setCapacity((void *)(a1 + 72), 0);
}

void re::internal::defaultDestructV2<re::ImageBasedLightFile>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_ImageBasedLightFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightFile", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightFile, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightFile, (void (*)(re::IntrospectionBase *))&qword_26AF7DD70, this);
}

void *re::allocInfo_ImageBasedLightAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DD78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DD78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DE30, "ImageBasedLightAsset");
    __cxa_guard_release(&qword_26AF7DD78);
  }
  return &unk_26AF7DE30;
}

void re::initInfo_ImageBasedLightAsset(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x2595A39C18F8E1A4;
  v13[1] = "ImageBasedLightAsset";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DD80, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DD80);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      mach_error_t v7 = (re *)qword_26AF7DD70;
      if (!qword_26AF7DD70)
      {
        mach_error_t v7 = (re *)re::allocInfo_ImageBasedLightFile(v5);
        qword_26AF7DD70 = (uint64_t)v7;
        re::initInfo_ImageBasedLightFile(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "iblFile";
      *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7DD88 = v9;
      id v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 64, 8);
      *(_DWORD *)uint64_t v11 = 6;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 1;
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      *(unsigned char *)(v11 + 40) = 1;
      *(_DWORD *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 2;
      qword_26AF7DD90 = v11;
      __cxa_guard_release(&qword_26AF7DD80);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DD88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ImageBasedLightAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ImageBasedLightAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ImageBasedLightAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ImageBasedLightAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

uint64_t re::anonymous namespace'::downgradeIBLAssetFromFall2023@<X0>(re::_anonymous_namespace_ *this@<X0>, unsigned char *a2@<X8>)
{
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)*MEMORY[0x263F00230], 0x8000100u);
  re::DynamicString::operator=((re::_anonymous_namespace_ *)((char *)this + 72), (re::DynamicString *)&v8);
  uint64_t result = v8;
  if (v8 && (v9 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v8 + 40))();
  }
  *a2 = 1;
  return result;
}

void *re::internal::defaultConstruct<re::ImageBasedLightAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return re::DynamicString::setCapacity((void *)(a3 + 72), 0);
}

void re::internal::defaultDestruct<re::ImageBasedLightAsset>(int a1, int a2, re::ImageBasedLightAsset *this)
{
}

void *re::internal::defaultConstructV2<re::ImageBasedLightAsset>(uint64_t a1)
{
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  return re::DynamicString::setCapacity((void *)(a1 + 72), 0);
}

uint64_t re::introspect_ImageBasedLightAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightAsset", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImageBasedLightAsset>, this);
}

uint64_t *re::ImageBasedLightAsset::assetType(re::ImageBasedLightAsset *this)
{
  {
    re::ImageBasedLightAsset::assetType(void)::type = (uint64_t)"ImageBasedLight";
    qword_26879E928 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ImageBasedLightAsset::assetType(void)::type);
  }
  return &re::ImageBasedLightAsset::assetType(void)::type;
}

re *re::ImageBasedLightAssetLoader::unloadAsset(re::ImageBasedLightAssetLoader *this, re::ImageBasedLightAsset *a2)
{
  return re::internal::destroyPersistent<re::ImageBasedLightAsset>((re *)"unloadAsset", 59, a2);
}

re *re::internal::destroyPersistent<re::ImageBasedLightAsset>(re *result, uint64_t a2, re::ImageBasedLightAsset *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::ImageBasedLightAsset::~ImageBasedLightAsset(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, re::ImageBasedLightAsset *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::ImageBasedLightAssetLoader::isSupportedSourceExtension(re::ImageBasedLightAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reibl") == 0;
}

char **re::ImageBasedLightAssetLoader::introspectionType(re::ImageBasedLightAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::ImageBasedLightAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightAsset", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImageBasedLightAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[358];
}

re::AssetHandle *re::ImageBasedLightAssetLoader::findDependencies@<X0>(re::ImageBasedLightAssetLoader *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  re::DynamicArray<re::AssetHandle>::setCapacity((void *)a3, 3uLL);
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)a2);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 24));
  return re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 48));
}

void re::ImageBasedLightAssetLoader::~ImageBasedLightAssetLoader(re::ImageBasedLightAssetLoader *this)
{
}

void re::ImageBasedLightAsset::~ImageBasedLightAsset(re::ImageBasedLightAsset *this)
{
  re::DynamicString::deinit((re::ImageBasedLightAsset *)((char *)this + 72));
  re::AssetHandle::~AssetHandle((re::ImageBasedLightAsset *)((char *)this + 48));
  re::AssetHandle::~AssetHandle((re::ImageBasedLightAsset *)((char *)this + 24));
  re::AssetHandle::~AssetHandle(this);
}

void sub_23353C160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23353C2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::anonymous namespace'::validatePayload(void *a1)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = v1;
  int v52 = v1;
  if (v1)
  {
    [v1 payloadBufferSizes];
  }
  else
  {
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
  }
  int v3 = [v2 models];
  uint64_t v51 = [v3 count];

  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v4 = [v52 parts];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v70 objects:v85 count:16];
  if (v5)
  {
    uint64_t v7 = *(void *)v71;
    char v8 = 1;
    *(void *)&long long v6 = 138412546;
    long long v48 = v6;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v71 != v7) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v70 + 1) + 8 * i);
        id v69 = 0;
        char v11 = objc_msgSend(v10, "validateWithPayloadSize:error:", &v74, &v69, v48);
        long long v12 = (re *)v69;
        uint64_t v13 = v12;
        if ((v11 & 1) == 0)
        {
          long long v14 = *re::assetTypesLogObjects(v12);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v48;
            uint64_t v82 = v10;
            __int16 v83 = 2112;
            uint64_t v84 = v13;
            _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Mesh part descriptor %@ is invalid: %@", buf, 0x16u);
          }
          char v8 = 0;
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v70 objects:v85 count:16];
    }
    while (v5);
  }
  else
  {
    char v8 = 1;
  }

  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  id v15 = [v52 models];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v65 objects:v80 count:16];
  if (v16)
  {
    uint64_t v18 = *(void *)v66;
    *(void *)&long long v17 = 138412546;
    long long v49 = v17;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v66 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v65 + 1) + 8 * j);
        long long v21 = objc_msgSend(v52, "parts", v49);
        v64[0] = v74;
        v64[1] = v75;
        void v64[2] = v76;
        v64[3] = v77;
        id v63 = 0;
        char v22 = [v20 validateWithParts:v21 payloadSize:v64 error:&v63];
        long long v23 = (re *)v63;

        if ((v22 & 1) == 0)
        {
          long long v25 = *re::assetTypesLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v49;
            uint64_t v82 = v20;
            __int16 v83 = 2112;
            uint64_t v84 = v23;
            _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Mesh model descriptor %@ is invalid: %@", buf, 0x16u);
          }
          char v8 = 0;
        }
      }
      uint64_t v16 = [v15 countByEnumeratingWithState:&v65 objects:v80 count:16];
    }
    while (v16);
  }

  long long v62 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  unint64_t v26 = [v52 instances];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v59 objects:v79 count:16];
  if (v27)
  {
    uint64_t v29 = *(void *)v60;
    *(void *)&long long v28 = 138412546;
    long long v50 = v28;
    do
    {
      for (uint64_t k = 0; k != v27; ++k)
      {
        if (*(void *)v60 != v29) {
          objc_enumerationMutation(v26);
        }
        uint64_t v31 = *(void **)(*((void *)&v59 + 1) + 8 * k);
        id v58 = 0;
        char v32 = objc_msgSend(v31, "validateWithModelCount:error:", v51, &v58, v50);
        unint64_t v33 = (re *)v58;
        uint64_t v34 = v33;
        if ((v32 & 1) == 0)
        {
          uint64_t v35 = *re::assetTypesLogObjects(v33);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v50;
            uint64_t v82 = v31;
            __int16 v83 = 2112;
            uint64_t v84 = v34;
            _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "Mesh instance descriptor %@ is invalid: %@", buf, 0x16u);
          }
          char v8 = 0;
        }
      }
      uint64_t v27 = [v26 countByEnumeratingWithState:&v59 objects:v79 count:16];
    }
    while (v27);
  }

  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v36 = [v52 skeletons];
  uint64_t v37 = [v36 countByEnumeratingWithState:&v54 objects:v78 count:16];
  if (v37)
  {
    uint64_t v38 = *(void *)v55;
    do
    {
      for (uint64_t m = 0; m != v37; ++m)
      {
        if (*(void *)v55 != v38) {
          objc_enumerationMutation(v36);
        }
        __int16 v40 = *(void **)(*((void *)&v54 + 1) + 8 * m);
        id v53 = 0;
        char v41 = [v40 validateWithError:&v53];
        __int16 v42 = (re *)v53;
        long long v43 = v42;
        if ((v41 & 1) == 0)
        {
          __int16 v44 = *re::assetTypesLogObjects(v42);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v82 = v40;
            __int16 v83 = 2112;
            uint64_t v84 = v43;
            _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, "Mesh skeleton descriptor %@ is invalid: %@", buf, 0x16u);
          }
          char v8 = 0;
        }
      }
      uint64_t v37 = [v36 countByEnumeratingWithState:&v54 objects:v78 count:16];
    }
    while (v37);
  }

  if ((v8 & 1) == 0)
  {
    long long v46 = *re::assetTypesLogObjects(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_233120000, v46, OS_LOG_TYPE_FAULT, "Mesh payload is invalid", buf, 2u);
    }
  }

  return v8 & 1;
}

void sub_23353C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t re::anonymous namespace'::validatePrivateData(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v304 = *MEMORY[0x263EF8340];
  id v298 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268799C28, memory_order_acquire) & 1) == 0) {
    goto LABEL_321;
  }
  while (1)
  {
    if (!_MergedGlobals_11)
    {
      uint64_t v239 = 1;
      goto LABEL_300;
    }
    unint64_t v296 = a3;
    long long v299 = 0u;
    long long v300 = 0u;
    long long v301 = 0u;
    long long v302 = 0u;
    uint64_t v5 = [v298 parts];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v299 objects:v303 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v300;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v300 != v7) {
            objc_enumerationMutation(v5);
          }
          char v9 = *(void **)(*((void *)&v299 + 1) + 8 * i);
          if ([v9 isIndexed]
            && (MEMORY[0x237DBA910]([v9 indexType], a2 + objc_msgSend(v9, "indexPayloadOffset"), objc_msgSend(v9, "indexBufferSize"), objc_msgSend(v9, "vertexCount")) & 1) == 0)
          {

            goto LABEL_299;
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v299 objects:v303 count:16];
      }
      while (v6);
    }

    id v10 = v298;
    long long v299 = 0u;
    long long v300 = 0u;
    long long v301 = 0u;
    long long v302 = 0u;
    id v284 = v10;
    obuint64_t j = [v10 parts];
    uint64_t v276 = [obj countByEnumeratingWithState:&v299 objects:v303 count:16];
    if (v276)
    {
      uint64_t v280 = *(void *)v300;
      do
      {
        for (uint64_t j = 0; j != v276; ++j)
        {
          if (*(void *)v300 != v280) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(id *)(*((void *)&v299 + 1) + 8 * j);
          long long v12 = [v11 customAttributes];
          uint64_t v13 = [NSString stringWithUTF8String:"accumulatedVertexValence"];
          uint64_t v14 = [v12 objectForKeyedSubscript:v13];

          id v15 = [v11 customAttributes];
          uint64_t v16 = [NSString stringWithUTF8String:"vertexAdjacencies"];
          uint64_t v17 = [v15 objectForKeyedSubscript:v16];

          if (v14 | v17)
          {
            if (!v14) {
              goto LABEL_294;
            }
            if (!v17) {
              goto LABEL_294;
            }
            if ([(id)v14 format] != 36) {
              goto LABEL_294;
            }
            if ([(id)v14 stride] != 4) {
              goto LABEL_294;
            }
            if ([(id)v17 format] != 36) {
              goto LABEL_294;
            }
            if ([(id)v17 stride] != 4) {
              goto LABEL_294;
            }
            unsigned int v18 = [(id)v14 payloadOffset];
            unsigned int v19 = [(id)v14 count];
            unsigned int v20 = [(id)v17 payloadOffset];
            unsigned int v21 = [(id)v17 count];
            unsigned int v22 = [v11 indexCount];
            if (v19 != [v11 vertexCount]) {
              goto LABEL_294;
            }
            if (v19)
            {
              long long v23 = (unsigned int *)(a2 + v18);
              uint64_t v24 = 4 * v19;
              while (v21 >= *v23)
              {
                ++v23;
                v24 -= 4;
                if (!v24) {
                  goto LABEL_29;
                }
              }
LABEL_294:

              goto LABEL_299;
            }
LABEL_29:
            if (v21)
            {
              long long v25 = (unsigned int *)(a2 + v20);
              uint64_t v26 = 4 * v21;
              while (*v25 < v22 / 3)
              {
                ++v25;
                v26 -= 4;
                if (!v26) {
                  goto LABEL_33;
                }
              }
              goto LABEL_294;
            }
          }
LABEL_33:

          id v27 = v11;
          long long v28 = [v27 customAttributes];
          uint64_t v29 = [NSString stringWithUTF8String:"cotangentLaplacianEndIndices"];
          uint64_t v14 = [v28 objectForKeyedSubscript:v29];

          uint64_t v30 = [v27 customAttributes];
          uint64_t v31 = [NSString stringWithUTF8String:"cotangentLaplacianIndices"];
          uint64_t v17 = [v30 objectForKeyedSubscript:v31];

          if (v14 | v17)
          {
            if (!v14) {
              goto LABEL_294;
            }
            if (!v17) {
              goto LABEL_294;
            }
            if ([(id)v14 format] != 36) {
              goto LABEL_294;
            }
            if ([(id)v14 stride] != 4) {
              goto LABEL_294;
            }
            if ([(id)v17 format] != 36) {
              goto LABEL_294;
            }
            if ([(id)v17 stride] != 4) {
              goto LABEL_294;
            }
            unsigned int v32 = [(id)v14 payloadOffset];
            unsigned int v33 = [(id)v14 count];
            unsigned int v34 = [(id)v17 payloadOffset];
            unsigned int v35 = [(id)v17 count];
            unsigned int v36 = [v27 vertexCount];
            if (v33 != [v27 vertexCount]) {
              goto LABEL_294;
            }
            if (v33)
            {
              uint64_t v37 = (unsigned int *)(a2 + v32);
              uint64_t v38 = 4 * v33;
              while (v35 >= *v37)
              {
                ++v37;
                v38 -= 4;
                if (!v38) {
                  goto LABEL_45;
                }
              }
              goto LABEL_294;
            }
LABEL_45:
            if (v35)
            {
              long long v39 = (unsigned int *)(a2 + v34);
              uint64_t v40 = 4 * v35;
              while (*v39 < v36)
              {
                ++v39;
                v40 -= 4;
                if (!v40) {
                  goto LABEL_49;
                }
              }
              goto LABEL_294;
            }
          }
LABEL_49:
        }
        uint64_t v276 = [obj countByEnumeratingWithState:&v299 objects:v303 count:16];
      }
      while (v276);
    }

    id v41 = v284;
    id v267 = v41;
    v277 = [v41 parts];
    long long v301 = 0u;
    long long v302 = 0u;
    long long v299 = 0u;
    long long v300 = 0u;
    __int16 v42 = [v41 models];
    uint64_t v43 = [v42 countByEnumeratingWithState:&v299 objects:v303 count:16];
    if (v43)
    {
      id v261 = v42;
      uint64_t v264 = *(void *)v300;
      do
      {
        uint64_t v259 = v43;
        for (uint64_t k = 0; k != v259; ++k)
        {
          if (*(void *)v300 != v264) {
            objc_enumerationMutation(v261);
          }
          long long v45 = *(void **)(*((void *)&v299 + 1) + 8 * k);
          v285 = [v45 partIndices];
          v293 = [v45 skinningModel];
          if (v293)
          {
            long long v46 = [v293 skinningParts];
            uint64_t v270 = [v46 count];

            if (v270)
            {
              for (uint64_t m = 0; m != v270; ++m)
              {
                long long v48 = [v293 skinningParts];
                long long v49 = [v48 objectAtIndexedSubscript:m];

                long long v50 = [v41 skeletons];
                v281 = objc_msgSend(v50, "objectAtIndexedSubscript:", objc_msgSend(v49, "skeletonIndex"));

                uint64_t v51 = [v281 jointNames];
                unint64_t v52 = [v51 count];

                v273 = [v285 objectAtIndexedSubscript:m];
                objc_msgSend(v277, "objectAtIndexedSubscript:", objc_msgSend(v273, "unsignedLongLongValue"));
                id obja = (id)objc_claimAutoreleasedReturnValue();
                id v53 = [v49 skinningInfluences];
                int v54 = [v49 packedInfluence];
                unint64_t v55 = [v53 bufferSize];
                if (v54) {
                  char v56 = 2;
                }
                else {
                  char v56 = 3;
                }
                unsigned int v57 = [v53 payloadOffset];
                a3 = v55 >> v56;
                if ([v49 influencePerVertex])
                {
                  int v58 = [v49 influencePerVertex];
                  if (a3 != [obja vertexCount] * v58)
                  {
                    re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) ", "influenceCount == skinningPartDesc.influencePerVertex * meshPartDescriptor.vertexCount", "validateMeshSkinningInfluences", 292);
                    _os_crash();
                    __break(1u);
LABEL_305:
                    re::internal::assertLog((re::internal *)4, v241, "assertion failure: '%s' (%s:line %i) ", "influencesDesc.payloadOffset + influenceCount * sizeof(SkinningInfluence) <= payloadLength", "validateMeshSkinningInfluences", 306);
                    _os_crash();
                    __break(1u);
LABEL_306:
                    re::internal::assertLog((re::internal *)4, v72, "assertion failure: '%s' (%s:line %i) ", "influencesDesc.payloadOffset + influenceCount * sizeof(PackedSkinningInfluence) <= payloadLength", "validateMeshSkinningInfluences", 297);
                    _os_crash();
                    __break(1u);
LABEL_307:
                    re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "endInfluencesDesc.payloadOffset + meshPartDescriptor.vertexCount * sizeof(int) <= payloadLength", "validateMeshSkinningInfluences", 281);
                    _os_crash();
                    __break(1u);
LABEL_308:
                    re::internal::assertLog((re::internal *)4, v95, "assertion failure: '%s' (%s:line %i) ", "bufferIndex < blendShapeModel.blendShapeBuffers.count", "validateBlendShape", 606);
                    _os_crash();
                    __break(1u);
LABEL_309:
                    re::internal::assertLog((re::internal *)4, v99, "assertion failure: '%s' (%s:line %i) ", "blendShapeConstantsDesc.payloadOffset + blendShapeConstantsDesc.bufferSize <= payloadLength", "validateBlendShape", 500);
                    _os_crash();
                    __break(1u);
LABEL_310:
                    re::internal::assertLog((re::internal *)4, v83, "assertion failure: '%s' (%s:line %i) ", "blendShapeModel.perMeshPartBlendShapeBufferIndex.count <= parts.count", "validateBlendShape", 595);
                    _os_crash();
                    __break(1u);
                    goto LABEL_311;
                  }
                }
                else
                {
                  long long v60 = [v49 influenceEndIndices];
                  unsigned int v61 = [v60 payloadOffset];
                  if (4 * [obja vertexCount] + (unint64_t)v61 > v296) {
                    goto LABEL_307;
                  }
                  unsigned int v63 = [v60 payloadOffset];
                  unsigned int v64 = [obja vertexCount];
                  if (v64)
                  {
                    int v65 = 0;
                    long long v66 = (unsigned int *)(a2 + v63);
                    uint64_t v67 = 4 * v64;
                    while (1)
                    {
                      unint64_t v68 = *v66;
                      if ((int)v68 < v65 || a3 < v68) {
                        break;
                      }
                      ++v66;
                      int v65 = v68;
                      v67 -= 4;
                      if (!v67) {
                        goto LABEL_74;
                      }
                    }

                    id v41 = v267;
LABEL_298:

                    goto LABEL_299;
                  }
LABEL_74:
                }
                long long v70 = (unsigned int *)(a2 + v57);
                if ([v49 packedInfluence])
                {
                  unsigned int v71 = [v53 payloadOffset];
                  uint64_t v73 = 4 * a3;
                  if (4 * a3 + v71 > v296) {
                    goto LABEL_306;
                  }
                  id v41 = v267;
                  if (a3)
                  {
                    while (v52 > (unint64_t)*v70 >> 22)
                    {
                      ++v70;
                      v73 -= 4;
                      if (!v73) {
                        goto LABEL_86;
                      }
                    }
                    goto LABEL_298;
                  }
                }
                else
                {
                  unsigned int v74 = [v53 payloadOffset];
                  uint64_t v75 = 8 * a3;
                  if (8 * a3 + v74 > v296) {
                    goto LABEL_305;
                  }
                  id v41 = v267;
                  if (a3)
                  {
                    do
                    {
                      unint64_t v76 = *v70;
                      if ((v76 & 0x80000000) != 0 || v52 <= v76) {
                        goto LABEL_298;
                      }
                      v70 += 2;
                      v75 -= 8;
                    }
                    while (v75);
                  }
                }
LABEL_86:
              }
            }
          }
        }
        __int16 v42 = v261;
        uint64_t v43 = [v261 countByEnumeratingWithState:&v299 objects:v303 count:16];
      }
      while (v43);
    }

    id v256 = v41;
    v253 = [v256 parts];
    long long v301 = 0u;
    long long v302 = 0u;
    long long v299 = 0u;
    long long v300 = 0u;
    long long v77 = [v256 models];
    v254 = v77;
    uint64_t v78 = [v77 countByEnumeratingWithState:&v299 objects:v303 count:16];
    if (!v78)
    {
LABEL_222:

      id v184 = v256;
      long long v299 = 0u;
      long long v300 = 0u;
      long long v301 = 0u;
      long long v302 = 0u;
      id v283 = v184;
      v185 = [v184 parts];
      v287 = v185;
      uint64_t v186 = [v185 countByEnumeratingWithState:&v299 objects:v303 count:16];
      if (v186)
      {
        uint64_t v187 = *(void *)v300;
        uint64_t v272 = *(void *)v300;
        do
        {
          uint64_t v188 = 0;
          uint64_t v275 = v186;
          do
          {
            if (*(void *)v300 != v187) {
              objc_enumerationMutation(v185);
            }
            id v297 = *(id *)(*((void *)&v299 + 1) + 8 * v188);
            v189 = [v297 customAttributes];
            v190 = [NSString stringWithUTF8String:"controlIndices"];
            uint64_t v279 = v188;
            v191 = [v189 objectForKeyedSubscript:v190];

            v192 = [v297 customAttributes];
            v193 = [NSString stringWithUTF8String:"stencilSizes"];
            v295 = [v192 objectForKeyedSubscript:v193];

            v194 = [v297 customAttributes];
            v195 = [NSString stringWithUTF8String:"stencilIndices"];
            v196 = [v194 objectForKeyedSubscript:v195];

            v197 = [v297 customAttributes];
            v198 = [NSString stringWithUTF8String:"stencilOffsets"];
            v199 = [v197 objectForKeyedSubscript:v198];

            v200 = [v297 customAttributes];
            v201 = [NSString stringWithUTF8String:"stencilWeights"];
            v202 = [v200 objectForKeyedSubscript:v201];

            v203 = [v297 customAttributes];
            v204 = [NSString stringWithUTF8String:"patchParams"];
            v205 = [v203 objectForKeyedSubscript:v204];

            id objc = v191;
            int v206 = [v297 patchCount];
            if (v191 || v295 || v196 || v199 || v202 || v205)
            {
              if (!v191) {
                goto LABEL_301;
              }
              if (!v295) {
                goto LABEL_301;
              }
              if (!v196) {
                goto LABEL_301;
              }
              if (!v199) {
                goto LABEL_301;
              }
              if (!v202) {
                goto LABEL_301;
              }
              if (!v205) {
                goto LABEL_301;
              }
              if ([v191 format] != 36) {
                goto LABEL_301;
              }
              if ([v191 stride] != 4) {
                goto LABEL_301;
              }
              if ([v191 count] != 16 * v206) {
                goto LABEL_301;
              }
              if ([v295 format] != 36) {
                goto LABEL_301;
              }
              if ([v295 stride] != 4) {
                goto LABEL_301;
              }
              if ([v196 format] != 36) {
                goto LABEL_301;
              }
              if ([v196 stride] != 4) {
                goto LABEL_301;
              }
              if ([v199 format] != 36) {
                goto LABEL_301;
              }
              if ([v199 stride] != 4) {
                goto LABEL_301;
              }
              if ([v202 format] != 28) {
                goto LABEL_301;
              }
              if ([v202 stride] != 4) {
                goto LABEL_301;
              }
              if ([v205 format] != 34) {
                goto LABEL_301;
              }
              if ([v205 stride] != 12) {
                goto LABEL_301;
              }
              if ([v205 count] != v206) {
                goto LABEL_301;
              }
              unsigned int v221 = [v191 payloadOffset];
              unsigned int v222 = [v191 count];
              int v223 = [v295 count];
              unsigned int v224 = [v297 preSplitVertexCount];
              if (v223 != [v199 count]) {
                goto LABEL_301;
              }
              if (v222)
              {
                v225 = (_DWORD *)(a2 + v221);
                uint64_t v226 = 4 * v222;
                while (*v225 < v224 + v223)
                {
                  ++v225;
                  v226 -= 4;
                  if (!v226) {
                    goto LABEL_277;
                  }
                }
LABEL_301:

                v210 = objc;
LABEL_302:

                uint64_t v239 = 0;
                v185 = v287;
                goto LABEL_304;
              }
LABEL_277:
              unsigned int v269 = [v295 payloadOffset];
              int v227 = [v295 count];
              unsigned int v266 = [v199 payloadOffset];
              unsigned int v228 = [v199 count];
              unsigned int v263 = [v196 payloadOffset];
              unsigned int v229 = [v196 count];
              unsigned int v230 = [v202 count];
              unsigned int v231 = [v196 count];
              if (v231 >= v230) {
                unsigned int v232 = v230;
              }
              else {
                unsigned int v232 = v231;
              }
              if (v228 != v227) {
                goto LABEL_301;
              }
              if (v227)
              {
                v233 = (_DWORD *)(a2 + v269);
                uint64_t v234 = 4 * v228;
                v235 = (_DWORD *)(a2 + v266);
                while (*v233 + *v235 <= v232)
                {
                  ++v235;
                  ++v233;
                  v234 -= 4;
                  if (!v234) {
                    goto LABEL_285;
                  }
                }
                goto LABEL_301;
              }
LABEL_285:
              if (v229)
              {
                v236 = (unsigned int *)(a2 + v263);
                uint64_t v237 = 4 * v229;
                while (*v236 < v224)
                {
                  ++v236;
                  v237 -= 4;
                  if (!v237) {
                    goto LABEL_233;
                  }
                }
                goto LABEL_301;
              }
            }
LABEL_233:

            id v207 = v297;
            v208 = [v207 customAttributes];
            v209 = [NSString stringWithUTF8String:"vertexUV|values"];
            v210 = [v208 objectForKeyedSubscript:v209];

            v211 = [v207 customAttributes];
            v212 = [NSString stringWithUTF8String:"vertexUV|indices"];
            v295 = [v211 objectForKeyedSubscript:v212];

            v213 = [v207 customAttributes];
            v214 = [NSString stringWithUTF8String:"vertexUV|patchParams"];
            v196 = [v213 objectForKeyedSubscript:v214];

            if (v210 || v295 || v196)
            {
              if (!v210) {
                goto LABEL_302;
              }
              if (!v295) {
                goto LABEL_302;
              }
              if (!v196) {
                goto LABEL_302;
              }
              if ([v210 format] != 29) {
                goto LABEL_302;
              }
              if ([v210 stride] != 8) {
                goto LABEL_302;
              }
              if ([v295 format] != 36) {
                goto LABEL_302;
              }
              if ([v295 stride] != 4) {
                goto LABEL_302;
              }
              if ([v196 format] != 34) {
                goto LABEL_302;
              }
              if ([v196 stride] != 12) {
                goto LABEL_302;
              }
              int v215 = [v196 count];
              if (v215 != [v207 patchCount]) {
                goto LABEL_302;
              }
              unsigned int v216 = [v210 count];
              unsigned int v217 = [v295 payloadOffset];
              unsigned int v218 = [v295 count];
              if (v218)
              {
                v219 = (unsigned int *)(a2 + v217);
                uint64_t v220 = 4 * v218;
                while (*v219 < v216)
                {
                  ++v219;
                  v220 -= 4;
                  if (!v220) {
                    goto LABEL_250;
                  }
                }
                goto LABEL_302;
              }
            }
LABEL_250:

            uint64_t v188 = v279 + 1;
            v185 = v287;
            uint64_t v187 = v272;
          }
          while (v279 + 1 != v275);
          uint64_t v238 = [v287 countByEnumeratingWithState:&v299 objects:v303 count:16];
          uint64_t v186 = v238;
          uint64_t v239 = 1;
        }
        while (v238);
      }
      else
      {
        uint64_t v239 = 1;
      }
LABEL_304:

      goto LABEL_300;
    }
    uint64_t v252 = *(void *)v300;
LABEL_91:
    uint64_t v258 = 0;
    uint64_t v251 = v78;
    while (1)
    {
      if (*(void *)v300 != v252) {
        objc_enumerationMutation(v77);
      }
      int v79 = *(void **)(*((void *)&v299 + 1) + 8 * v258);
      v255 = [v79 partIndices];
      uint64_t v80 = [v79 blendShapeModel];
      if (v80) {
        break;
      }
LABEL_220:

      ++v258;
      long long v77 = v254;
      if (v258 == v251)
      {
        uint64_t v78 = [v254 countByEnumeratingWithState:&v299 objects:v303 count:16];
        if (!v78) {
          goto LABEL_222;
        }
        goto LABEL_91;
      }
    }
    id v250 = v80;
    id v81 = v80;
    id v265 = v253;
    id v260 = v255;
    v294 = v81;
    unint64_t v257 = [v81 blendShapeIndexType];
    if (v257 > 1) {
      goto LABEL_297;
    }
    a3 = [v81 perMeshPartBlendShapeBufferIndex];
    unint64_t v82 = [(id)a3 count];
    LODWORD(v8re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v82 > [v265 count];

    if (v82) {
      goto LABEL_310;
    }
    a3 = [v294 blendShapeBuffers];
    uint64_t v84 = [(id)a3 count];
    unsigned int v85 = [v294 blendShapeGroupNames];
    LODWORD(v84) = v84 == [v85 count];

    if (v84) {
      break;
    }
LABEL_311:
    re::internal::assertLog((re::internal *)4, v86, "assertion failure: '%s' (%s:line %i) ", "blendShapeModel.blendShapeBuffers.count == blendShapeModel.blendShapeGroupNames.count", "validateBlendShape", 596);
    _os_crash();
    __break(1u);
LABEL_312:
    re::internal::assertLog((re::internal *)4, v143, "assertion failure: '%s' (%s:line %i) ", "blendShapeConstantsDesc.payloadOffset + blendShapeConstantsDesc.bufferSize <= payloadLength", "validateBlendShape", 500);
    _os_crash();
    __break(1u);
LABEL_313:
    re::internal::assertLog((re::internal *)4, v106, "assertion failure: '%s' (%s:line %i) ", "floatSliceDesc.payloadOffset + floatSliceDesc.bufferSize <= payloadLength", "validateBlendShape", 524);
    _os_crash();
    __break(1u);
LABEL_314:
    re::internal::assertLog((re::internal *)4, v108, "assertion failure: '%s' (%s:line %i) ", "indexDesc.payloadOffset + indexDesc.bufferSize <= payloadLength", "validateBlendShape", 525);
    _os_crash();
    __break(1u);
LABEL_315:
    re::internal::assertLog((re::internal *)4, v110, "assertion failure: '%s' (%s:line %i) ", "coefficientIndexDesc.payloadOffset + coefficientIndexDesc.bufferSize <= payloadLength", "validateBlendShape", 526);
    _os_crash();
    __break(1u);
LABEL_316:
    re::internal::assertLog((re::internal *)4, v112, "assertion failure: '%s' (%s:line %i) ", "renormalizationDesc.payloadOffset + renormalizationDesc.bufferSize <= payloadLength", "validateBlendShape", 528);
    _os_crash();
    __break(1u);
LABEL_317:
    re::internal::assertLog((re::internal *)4, v150, "assertion failure: '%s' (%s:line %i) ", "floatSliceDesc.payloadOffset + floatSliceDesc.bufferSize <= payloadLength", "validateBlendShape", 524);
    _os_crash();
    __break(1u);
LABEL_318:
    re::internal::assertLog((re::internal *)4, v152, "assertion failure: '%s' (%s:line %i) ", "indexDesc.payloadOffset + indexDesc.bufferSize <= payloadLength", "validateBlendShape", 525);
    _os_crash();
    __break(1u);
LABEL_319:
    re::internal::assertLog((re::internal *)4, v154, "assertion failure: '%s' (%s:line %i) ", "coefficientIndexDesc.payloadOffset + coefficientIndexDesc.bufferSize <= payloadLength", "validateBlendShape", 526);
    _os_crash();
    __break(1u);
LABEL_320:
    re::internal::assertLog((re::internal *)4, v156, "assertion failure: '%s' (%s:line %i) ", "renormalizationDesc.payloadOffset + renormalizationDesc.bufferSize <= payloadLength", "validateBlendShape", 528);
    _os_crash();
    __break(1u);
LABEL_321:
    if (__cxa_guard_acquire(&qword_268799C28))
    {
      re::Defaults::BOOLValue((re::Defaults *)"validatePayloadContents", v242, v303);
      if (v303[0]) {
        char v243 = v303[1];
      }
      else {
        char v243 = 1;
      }
      _MergedGlobals_11 = v243;
      __cxa_guard_release(&qword_268799C28);
    }
  }
  for (objb = 0; ; ++objb)
  {
    int v87 = [v294 perMeshPartBlendShapeBufferIndex];
    BOOL v88 = (unint64_t)objb < [v87 count];

    if (!v88)
    {

      uint64_t v80 = v250;
      goto LABEL_220;
    }
    unint64_t v89 = [v260 objectAtIndexedSubscript:objb];
    v268 = objc_msgSend(v265, "objectAtIndexedSubscript:", objc_msgSend(v89, "unsignedLongLongValue"));

    uint64_t v90 = [v294 perMeshPartBlendShapeBufferIndex];
    unint64_t v91 = [v90 objectAtIndexedSubscript:objb];
    unsigned int v92 = [v91 unsignedIntValue];

    if (v92 == -1) {
      goto LABEL_218;
    }
    long long v93 = [v294 blendShapeBuffers];
    a3 = v92;
    BOOL v94 = [v93 count] > (unint64_t)v92;

    if (!v94) {
      goto LABEL_308;
    }
    long long v96 = [v294 blendShapeBuffers];
    id v262 = [v96 objectAtIndexedSubscript:a3];

    if (!v257) {
      break;
    }
    unsigned int v97 = [v268 vertexCount];
    id v98 = v262;
    v282 = [v98 floatSliceBuffer];
    v274 = [v98 indexBuffer];
    v286 = [v98 coefficientIndexBuffer];
    v271 = [v98 renormalizationBuffer];
    v278 = [v98 blendShapeConstantsBuffer];
    if ((v282 != 0) == (v274 == 0) || (v282 != 0) != (v286 != 0) || !v278) {
      goto LABEL_295;
    }
    a3 = [v278 payloadOffset];
    if ([v278 bufferSize] + (unint64_t)a3 > v296) {
      goto LABEL_309;
    }
    uint64_t v100 = a2 + [v278 payloadOffset];
    unint64_t v101 = *(void *)v100;
    uint64_t v102 = *(unsigned int *)(v100 + 8);
    unint64_t v103 = [v98 floatDeltaBuffer];
    unint64_t v104 = [v103 bufferSize];

    if (![v278 count]) {
      goto LABEL_295;
    }
    if ([v278 stride] != 12) {
      goto LABEL_295;
    }
    a3 = v104 >> 2;
    if (v282)
    {
      unsigned int v105 = [v282 payloadOffset];
      if ([v282 bufferSize] + (unint64_t)v105 > v296) {
        goto LABEL_313;
      }
      unsigned int v107 = [v274 payloadOffset];
      if ([v274 bufferSize] + (unint64_t)v107 > v296) {
        goto LABEL_314;
      }
      unsigned int v109 = [v286 payloadOffset];
      if ([v286 bufferSize] + (unint64_t)v109 > v296) {
        goto LABEL_315;
      }
      if (v271)
      {
        unsigned int v111 = [v271 payloadOffset];
        if ([v271 bufferSize] + (unint64_t)v111 > v296) {
          goto LABEL_316;
        }
      }
      if ([v282 stride] != 4
        || [v274 stride] != 4
        || [v286 stride] != 4
        || v271 && [v271 stride] != 4)
      {
        goto LABEL_295;
      }
      int v113 = [v98 hasNormals];
      int v114 = [v98 hasTangents];
      int v115 = [v98 hasBitangents];
      uint64_t v116 = v113 ? v102 : 0;
      uint64_t v117 = v114 ? v102 : 0;
      uint64_t v118 = v115 ? v102 : 0;
      int v119 = [v274 count];
      if (v119 + 1 != [v282 count] || a3 != objc_msgSend(v286, "count")) {
        goto LABEL_295;
      }
      unsigned int v120 = [v274 payloadOffset];
      unsigned int v121 = [v274 count];
      unsigned int v246 = [v282 payloadOffset];
      unsigned int v122 = [v282 count];
      unsigned int v244 = [v286 payloadOffset];
      unsigned int v248 = [v286 count];
      unint64_t v123 = v116 + v102 + v117 + v118;
      if (v271)
      {
        unsigned int v124 = [v271 payloadOffset];
        unsigned int v125 = [v271 count];
        if (v125)
        {
          long long v126 = (_DWORD *)(a2 + v124);
          uint64_t v127 = 4 * v125;
          while (v123 > (*v126 + 2))
          {
            ++v126;
            v127 -= 4;
            if (!v127) {
              goto LABEL_137;
            }
          }
          goto LABEL_295;
        }
      }
LABEL_137:
      if (v121)
      {
        long long v128 = (unsigned int *)(a2 + v120);
        uint64_t v129 = 4 * v121;
        while (v123 > *v128)
        {
          ++v128;
          v129 -= 4;
          if (!v129) {
            goto LABEL_141;
          }
        }
        goto LABEL_295;
      }
LABEL_141:
      if (v122)
      {
        unsigned int v130 = 0;
        v131 = (unsigned int *)(a2 + v246);
        uint64_t v132 = 4 * v122;
        do
        {
          unint64_t v133 = *v131;
          if (v133 < v130 || a3 < v133) {
            goto LABEL_295;
          }
          ++v131;
          unsigned int v130 = v133;
          v132 -= 4;
        }
        while (v132);
      }
      v135 = [v98 blendShapeNames];
      unint64_t v136 = [v135 count];
      if (v248)
      {
        v137 = (unsigned int *)(a2 + v244);
        uint64_t v138 = 4 * v248 - 4;
        do
        {
          unsigned int v139 = *v137++;
          BOOL v140 = v136 > v139;
          BOOL v141 = v136 <= v139 || v138 == 0;
          v138 -= 4;
        }
        while (!v141);
      }
      else
      {
        BOOL v140 = 1;
      }
LABEL_215:

      goto LABEL_216;
    }
    BOOL v140 = v271 == 0;
LABEL_216:

    if (!v140) {
      goto LABEL_296;
    }

LABEL_218:
  }
  unsigned int v142 = [v268 vertexCount];
  id v98 = v262;
  v282 = [v98 floatSliceBuffer];
  v274 = [v98 indexBuffer];
  v286 = [v98 coefficientIndexBuffer];
  v271 = [v98 renormalizationBuffer];
  v278 = [v98 blendShapeConstantsBuffer];
  if ((v282 != 0) == (v274 == 0) || (v282 != 0) != (v286 != 0) || !v278) {
    goto LABEL_295;
  }
  a3 = [v278 payloadOffset];
  if ([v278 bufferSize] + (unint64_t)a3 > v296) {
    goto LABEL_312;
  }
  uint64_t v144 = a2 + [v278 payloadOffset];
  unint64_t v145 = *(void *)v144;
  uint64_t v146 = *(unsigned int *)(v144 + 8);
  v147 = [v98 floatDeltaBuffer];
  unint64_t v148 = [v147 bufferSize];

  if (![v278 count]) {
    goto LABEL_295;
  }
  if ([v278 stride] != 12) {
    goto LABEL_295;
  }
  a3 = v148 >> 2;
  if (!v282)
  {
    BOOL v140 = v271 == 0;
    goto LABEL_216;
  }
  unsigned int v149 = [v282 payloadOffset];
  if ([v282 bufferSize] + (unint64_t)v149 > v296) {
    goto LABEL_317;
  }
  unsigned int v151 = [v274 payloadOffset];
  if ([v274 bufferSize] + (unint64_t)v151 > v296) {
    goto LABEL_318;
  }
  unsigned int v153 = [v286 payloadOffset];
  if ([v286 bufferSize] + (unint64_t)v153 > v296) {
    goto LABEL_319;
  }
  if (v271)
  {
    unsigned int v155 = [v271 payloadOffset];
    if ([v271 bufferSize] + (unint64_t)v155 > v296) {
      goto LABEL_320;
    }
  }
  if ([v282 stride] != 2
    || [v274 stride] != 2
    || [v286 stride] != 2
    || v271 && [v271 stride] != 2)
  {
    goto LABEL_295;
  }
  int v157 = [v98 hasNormals];
  int v158 = [v98 hasTangents];
  int v159 = [v98 hasBitangents];
  uint64_t v160 = v157 ? v146 : 0;
  uint64_t v161 = v158 ? v146 : 0;
  uint64_t v162 = v159 ? v146 : 0;
  int v163 = [v274 count];
  if (v163 + 1 != [v282 count] || a3 != objc_msgSend(v286, "count")) {
    goto LABEL_295;
  }
  unsigned int v164 = [v274 payloadOffset];
  unsigned int v165 = [v274 count];
  unsigned int v247 = [v282 payloadOffset];
  unsigned int v166 = [v282 count];
  unsigned int v245 = [v286 payloadOffset];
  unsigned int v249 = [v286 count];
  unint64_t v167 = v160 + v146 + v161 + v162;
  if (!v271 || (unsigned int v168 = [v271 payloadOffset], (v169 = objc_msgSend(v271, "count")) == 0))
  {
LABEL_191:
    if (v165)
    {
      v172 = (unsigned __int16 *)(a2 + v164);
      uint64_t v173 = 2 * v165;
      while (v167 > *v172)
      {
        ++v172;
        v173 -= 2;
        if (!v173) {
          goto LABEL_195;
        }
      }
      goto LABEL_295;
    }
LABEL_195:
    if (v166)
    {
      unsigned __int16 v174 = 0;
      v175 = (unsigned __int16 *)(a2 + v247);
      uint64_t v176 = 2 * v166;
      do
      {
        unint64_t v177 = *v175;
        if (v177 < v174 || a3 < v177) {
          goto LABEL_295;
        }
        ++v175;
        unsigned __int16 v174 = v177;
        v176 -= 2;
      }
      while (v176);
    }
    v135 = [v98 blendShapeNames];
    unint64_t v179 = [v135 count];
    if (v249)
    {
      v180 = (unsigned __int16 *)(a2 + v245);
      uint64_t v181 = 2 * v249 - 2;
      do
      {
        unsigned int v182 = *v180++;
        BOOL v140 = v179 > v182;
        BOOL v183 = v179 <= v182 || v181 == 0;
        v181 -= 2;
      }
      while (!v183);
    }
    else
    {
      BOOL v140 = 1;
    }
    goto LABEL_215;
  }
  v170 = (unsigned __int16 *)(a2 + v168);
  uint64_t v171 = 2 * v169;
  while ((unint64_t)*v170 + 2 < v167)
  {
    ++v170;
    v171 -= 2;
    if (!v171) {
      goto LABEL_191;
    }
  }
LABEL_295:

LABEL_296:
LABEL_297:

LABEL_299:
  uint64_t v239 = 0;
LABEL_300:

  return v239;
}

void sub_23353EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_23353F330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_23353F4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23353F6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, id a12)
{
  if (a11) {

  }
  if (a12) {
  _Unwind_Resume(a1);
  }
}

void sub_23353FB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::MeshPayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v5 = *this;
  if ([v5 conformsToProtocol:&unk_26E74BAB0]) {
    id v4 = v5;
  }
  else {
    id v4 = 0;
  }
  *a2 = v4;
}

void sub_23353FE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::MeshPayload::makeMeshPayloadBuffers(id *this@<X0>, id *a2@<X1>, _OWORD *a3@<X8>)
{
  id v6 = *this;
  id v5 = *a2;
  if (v6)
  {
    [v6 meshPayloadBuffersWithDevice:v5];
  }
  else
  {
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
}

void sub_23353FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::MeshPayload::payloadBufferSizes(id *this@<X0>, _OWORD *a2@<X8>)
{
  id v3 = *this;
  id v4 = v3;
  if (v3)
  {
    [v3 payloadBufferSizes];
  }
  else
  {
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
}

void sub_23353FF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL re::anonymous namespace'::validateBlendShapeConstants(unint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = (4 * a1);
  if (a7 % v7) {
    return 0;
  }
  uint64_t v8 = v7 * a6;
  uint64_t v9 = 1;
  if (a3) {
    uint64_t v9 = 2;
  }
  BOOL v10 = v8 * (v9 + a4 + (unint64_t)a5) > a7 || HIDWORD(a1) > a2;
  return !v10 && a2 == ((a2 + 3) & 0x1FFFFFFFCLL) && HIDWORD(a1) >= (unint64_t)(3 * a6);
}

void re::AudioFileAssetLoader::~AudioFileAssetLoader(re::AudioFileAssetLoader *this)
{
  *((void *)this + 1) = 0;
}

{
  *((void *)this + 1) = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AudioFileAssetLoader::registerAsset()
{
  return 0;
}

void re::AudioFileAssetLoader::unregisterAsset(re *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      id v3 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v3, v4);
    }
    operator new();
  }
  id v5 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot unregister asset with a null audioFileAsset", buf, 2u);
  }
}

void sub_2335401A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAssetLoader::serializeAssetBlob(int a1, uint64_t a2, id **this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!re::AudioFileAsset::shouldSkipCompressionOnExport((re::AudioFileAsset *)this)
    || !re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(a2, (re::AudioFileAsset *)this))
  {
    re::AudioFileAsset::pcmBuffer((re::AudioFileAsset *)this);
    id v6 = (re::audio *)objc_claimAutoreleasedReturnValue();
    if (v6) {
      goto LABEL_22;
    }
    unint64_t v7 = re::AudioFileAsset::audioFormat((re::AudioFileAsset *)this);
    uint64_t v8 = (re *)*this[1];
    uint64_t v9 = v8;
    if (v7)
    {
      if (v8)
      {
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        BOOL v10 = (re::audio *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v7 frameCapacity:*((unsigned int *)this + 34)];
        [(re *)v9 setFramePosition:0];
        id v23 = 0;
        char v11 = [(re *)v9 readIntoBuffer:v10 error:&v23];
        id v12 = v23;
        uint64_t v13 = re::internal::enableSignposts(0, 0);
        if (v13)
        {
          [(re *)v9 length];
          re::audio::pcmBufferSize(v10, v14);
          uint64_t v13 = kdebug_trace();
        }
        if (v11)
        {
          id v6 = v10;
        }
        else
        {
          uint64_t v17 = *re::audioLogObjects((re *)v13);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v12;
            _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] AudioFileAsset could not be read into a buffer. %@", (uint8_t *)&buf, 0xCu);
          }
          id v6 = 0;
        }

LABEL_21:
        if (!v6)
        {
          unsigned int v19 = 0;
          goto LABEL_27;
        }
LABEL_22:
        unsigned int v19 = v6;
        *(void *)&long long buf = v19;
        *((void *)&buf + 1) = a2;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        __p = 0;
        BOOL v20 = re::audio::AudioFileAssetWriter::writeToStreamWithDefaultCompression((id *)&buf);
        if (__p)
        {
          uint64_t v26 = __p;
          operator delete(__p);
        }

        if (v20)
        {
          BOOL v5 = 1;
LABEL_30:

          return v5;
        }
LABEL_27:
        unsigned int v21 = *re::audioLogObjects(v18);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] serializeAssetBlob failed to compress the asset and will serialize it as is.", (uint8_t *)&buf, 2u);
        }
        BOOL v5 = re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(a2, (re::AudioFileAsset *)this);
        goto LABEL_30;
      }
      id v15 = *re::audioLogObjects(0);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_16:
        id v6 = 0;
        goto LABEL_21;
      }
      LOWORD(buf) = 0;
      uint64_t v16 = "[CoreRE] [AudioFileAssetLoader] AudioFileAsset cannot be read into a buffer if it has no underlying AVAudioFile.";
    }
    else
    {
      id v15 = *re::audioLogObjects(v8);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      LOWORD(buf) = 0;
      uint64_t v16 = "[CoreRE] [AudioFileAssetLoader] AudioFileAsset cannot be read into a buffer if it has no format.";
    }
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, 2u);
    goto LABEL_16;
  }
  return 1;
}

void sub_23354050C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(uint64_t a1, re::AudioFileAsset *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = *(id *)(*((void *)a2 + 1) + 32);

  uint64_t v5 = *((void *)a2 + 1);
  if (v4)
  {
    id v6 = *(id *)(v5 + 32);
    if (v6)
    {
      id v7 = [MEMORY[0x263EFF8F8] dataWithContentsOfURL:v6];
      BOOL v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, [v7 bytes], objc_msgSend(v7, "length")) != 0;
    }
    else
    {
      BOOL v8 = 0;
    }

    return v8;
  }
  if (!(*(uint64_t (**)(void))(*(void *)(v5 + 48) + 64))())
  {
    id v12 = (id)*re::audioLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 64))();
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Asset's mappedDataStream length (%zu) must be greater than 0. Attempting to serialize from an in memory pcm buffer.", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v14 = re::AudioFileAsset::pcmBuffer(a2);
    id v15 = v14;
    if (v14)
    {
      id v16 = v14;
      *(void *)&long long buf = v16;
      *((void *)&buf + 1) = a1;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __p = 0;
      uint64_t v17 = [v16 format];
      uint64_t v18 = [v17 streamDescription];
      long long v19 = *(_OWORD *)v18;
      long long v20 = *(_OWORD *)(v18 + 16);
      *(void *)&v25.mBitsPerChannel = *(void *)(v18 + 32);
      *(_OWORD *)&v25.mSampleRate = v19;
      *(_OWORD *)&v25.mBytesPerPacket = v20;

      v25.mBytesPerFrame *= v25.mChannelsPerFrame;
      v25.mFormatFlags &= ~0x20u;
      v25.mBytesPerPacket *= v25.mChannelsPerFrame;
      BOOL v21 = re::audio::AudioFileAssetWriter::writeToStreamWithCustomOutputDescription((id *)&buf, &v25, 0);
      if (__p)
      {
        uint64_t v28 = __p;
        operator delete(__p);
      }

      if (v21)
      {
        BOOL v8 = 1;
LABEL_23:

        return v8;
      }
      id v23 = *re::audioLogObjects(v22);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
LABEL_22:
        BOOL v8 = 0;
        goto LABEL_23;
      }
      LOWORD(buf) = 0;
      uint64_t v24 = "[CoreRE] [AudioFileAssetLoader] Failed to serialize asset blob without compression.";
    }
    else
    {
      id v23 = *re::audioLogObjects(0);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      LOWORD(buf) = 0;
      uint64_t v24 = "[CoreRE] [AudioFileAssetLoader] Failed to serialize asset blob without compression. pcmBuffer is nil.";
    }
    _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, 2u);
    goto LABEL_22;
  }
  (*(void (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 40))();
  if (!(*(unsigned int (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 56))()) {
    return 0;
  }
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v10 = *(void *)(v9 + 48);
  *(void *)&long long buf = &unk_26E714DC0;
  *((void *)&buf + 1) = v9 + 48;
  __p = 0;
  LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v29 = 0;
  uint64_t v30 = (*(uint64_t (**)(void))(v10 + 40))();
  char v31 = 0;
  BOOL v8 = re::AssetHelper::readerToWriterStream((uint64_t)&buf, a1);
  (*(void (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 56))();
  if (v28) {
    (*(void (**)(void))(**((void **)&buf + 1) + 24))(*((void *)&buf + 1));
  }
  return v8;
}

void sub_233540970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::audio::AudioFileAssetWriter::~AudioFileAssetWriter(re::audio::AudioFileAssetWriter *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t re::AudioFileAssetLoader::createRuntimeData(re *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      id v3 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v3, v4);
    }
    operator new();
  }
  uint64_t v5 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot create runtime data with a null audioFileAsset", buf, 2u);
  }
  return 0;
}

void sub_233540BB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::allocateSampleAsset(re::AudioFileAssetLoader *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 168, 8);
  re::AudioFileAsset::AudioFileAsset((re::AudioFileAsset *)v2);
  id v3 = (void *)[objc_alloc(MEMORY[0x263EF9388]) initStandardFormatWithSampleRate:1 channels:48000.0];
  id v4 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v3 frameCapacity:1024];
  [(AVAudioPCMBuffer *)v4 setFrameLength:1024];
  uint64_t v5 = [(AVAudioPCMBuffer *)v4 mutableAudioBufferList];
  uint64_t v6 = 0;
  int32x4_t v7 = (int32x4_t)xmmword_234378DD0;
  uint64_t v8 = *(void *)(v5 + 16);
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3F50000000000000uLL);
  float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  do
  {
    int32x4_t v23 = v7;
    v9.i64[0] = v7.u32[0];
    v9.i64[1] = v7.u32[1];
    float64x2_t v10 = vcvtq_f64_u64(v9);
    v9.i64[0] = v23.u32[2];
    v9.i64[1] = v23.u32[3];
    float64x2_t v11 = vcvtq_f64_u64(v9);
    float64x2_t v22 = vmulq_f64(vmulq_f64(vaddq_f64(v11, v11), v18), v17);
    float64x2_t __x = vmulq_f64(vmulq_f64(vaddq_f64(v10, v10), v18), v17);
    long double v20 = sin(__x.f64[1]);
    v12.f64[0] = sin(__x.f64[0]);
    v12.f64[1] = v20;
    float64x2_t v21 = v12;
    __x.f64[0] = sin(v22.f64[1]);
    v13.f64[0] = sin(v22.f64[0]);
    v13.f64[1] = __x.f64[0];
    *(float32x4_t *)(v8 + vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v21, v16)), vmulq_f64(v13, v16));
    v14.i64[0] = 0x400000004;
    v14.i64[1] = 0x400000004;
    int32x4_t v7 = vaddq_s32(v23, v14);
    v6 += 16;
  }
  while (v6 != 4096);
  *(void *)(v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0x100000000001;
  re::AudioFileAsset::loadBuffer((re::AudioFileAsset *)v2, v4);
  *(unsigned char *)(v2 + 5re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(v2 + 101) = 0;
  *(_DWORD *)(v2 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 6553601;
  *(_DWORD *)(v2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;

  return v2;
}

void sub_233540DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::shouldCompress(re::AudioFileAssetLoader *this, void *a2)
{
  return 0;
}

void re::AudioFileAssetLoader::unloadAsset(re::AudioFileAssetLoader *this, re::AudioFileAsset *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v3 = (os_log_t *)re::audioLogObjects(this);
  id v4 = *v3;
  if (a2)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*((void *)a2 + 1) + 24);
      int v9 = 134217984;
      uint64_t v10 = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAsset] Unloaded audio asset: %llu", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v8 = re::globalAllocators(v7)[2];
    re::AudioFileAsset::~AudioFileAsset(a2);
    (*(void (**)(uint64_t, re::AudioFileAsset *))(*(void *)v8 + 40))(v8, a2);
  }
  else if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot unload asset with a null audioFileAsset", (uint8_t *)&v9, 2u);
  }
}

BOOL re::AudioFileAssetLoader::isSupportedSourceExtension(re::AudioFileAssetLoader *this, char *a2)
{
  re::AudioFileAsset::supportedExtensions((uint64_t)&v14);
  id v3 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  if ((v13 & 0x80u) == 0) {
    id v4 = (void **)((char *)__p + v13);
  }
  else {
    id v4 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if ((v13 & 0x80u) != 0) {
    id v3 = (void **)__p[0];
  }
  while (v3 != v4)
  {
    *(unsigned char *)id v3 = __tolower(*(char *)v3);
    id v3 = (void **)((char *)v3 + 1);
  }
  if (v15)
  {
    uint64_t v5 = v16;
    uint64_t v6 = 8 * v15 - 8;
    do
    {
      int32x4_t v7 = *v5++;
      int v8 = strcmp(a2, v7);
      BOOL v9 = v8 == 0;
      if (v8) {
        BOOL v10 = v6 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      v6 -= 8;
    }
    while (!v10);
  }
  else
  {
    BOOL v9 = 0;
  }
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (v14 && v16) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v9;
}

void sub_233541038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15)
  {
    if (a19) {
      (*(void (**)(void))(*(void *)a15 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

void re::AudioFileAssetLoader::makeSharedResourcePayload(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 72)) {
      uint64_t v4 = *(void *)(a1 + 80);
    }
    else {
      uint64_t v4 = a1 + 73;
    }
    uint64_t v5 = [NSString stringWithUTF8String:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = *(id *)(*(void *)(a1 + 8) + 176);

  if (v6)
  {
    id v7 = *(id *)(*(void *)(a1 + 8) + 176);
    int v8 = re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a1);
    HIDWORD(v14) = *(_DWORD *)(a1 + 128);
    LODWORD(v14) = *(_DWORD *)(a1 + 108);
    re::AudioPayload::makeBufferPayloadWithProperties(v7, v8, *(unsigned int *)(a1 + 136), *(unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 96), v5, *(unsigned char *)(a1 + 100), *(_DWORD *)(a1 + 104), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), v14, *(_DWORD *)(a1 + 132), *(void *)(*(void *)(a1 + 8) + 24));
LABEL_13:
    uint64_t v12 = *(void *)buf;
    *(void *)long long buf = 0;
    *a2 = v12;

    goto LABEL_14;
  }
  id v9 = *(id *)(*(void *)(a1 + 8) + 32);

  if (v9)
  {
    id v7 = *(id *)(*(void *)(a1 + 8) + 32);
    int v8 = [v7 path];
    re::AudioPayload::makeFilePayloadWithProperties((uint64_t)v8, *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 96), v5, *(unsigned __int8 *)(a1 + 100), *(unsigned int *)(a1 + 104), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 128), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), *(double *)(a1 + 120), *(_DWORD *)(a1 + 132), *(void *)(*(void *)(a1 + 8) + 24));
    goto LABEL_13;
  }
  id v10 = *(id *)(*(void *)(a1 + 8) + 184);

  if (v10)
  {
    id v7 = *(id *)(*(void *)(a1 + 8) + 184);
    int v8 = re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a1);
    re::AudioPayload::makeFileBufferPayloadWithProperties(v7, v8, *(unsigned int *)(a1 + 136), *(void *)(*(void *)(a1 + 8) + 40), *(unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 96), v5, *(unsigned char *)(a1 + 100), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), *(void *)(a1 + 104), HIDWORD(*(void *)(a1 + 104)), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132), *(void *)(*(void *)(a1 + 8) + 24));
    goto LABEL_13;
  }
  unsigned __int8 v13 = *re::audioLogObjects(v11);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] makeSharedResourcePayload was unexpectedly called on an asset without playback data.", buf, 2u);
  }
  *a2 = 0;
LABEL_14:
}

void sub_2335412E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  re::AudioPayload::dynamicCast(a2, &v118);
  if (!*a2 || !v118)
  {
    long long v47 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_WORD *)long long buf = 0;
    long long v50 = "[CoreRE] [AudioFileAssetLoader] Cannot make AudioFileAsset with bad payload.";
LABEL_55:
    _os_log_error_impl(&dword_233120000, v47, OS_LOG_TYPE_ERROR, v50, buf, 2u);
    goto LABEL_28;
  }
  if (!a3)
  {
    long long v47 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_WORD *)long long buf = 0;
    long long v50 = "[CoreRE] [AudioFileAssetLoader] Invalid asset pointer when initializing asset from payload.";
    goto LABEL_55;
  }
  id v7 = v118;
  *(unsigned char *)(a3 + 5re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = [v7 inputMode];

  id v8 = v118;
  [v8 referenceLevel];
  *(_DWORD *)(a3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v9;

  id v10 = v118;
  *(_DWORD *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = [v10 loopCount];

  id v11 = v118;
  *(unsigned char *)(a3 + 100) = [v11 streaming];

  id v12 = v118;
  *(_DWORD *)(a3 + 104) = [v12 normalizationMode];

  id v13 = v118;
  *(_DWORD *)(a3 + 10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = [v13 calibrationMode];

  id v14 = v118;
  [v14 calibrationLevel];
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v15;

  id v16 = v118;
  *(_DWORD *)(a3 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = [v16 layoutTag];

  id v17 = v118;
  [v17 targetLUFS];
  *(void *)(a3 + 120) = v18;

  id v19 = v118;
  *(void *)(*(void *)(a3 + 8) + 24) = [v19 audioAssetID];

  mach_port_name_t v20 = [v118 taskToken];
  float64x2_t v21 = (re *)mach_port_mod_refs(*MEMORY[0x263EF8960], v20, 0, 1);
  mach_error_t v22 = (int)v21;
  if (v21)
  {
    int32x4_t v23 = (id)*re::audioLogObjects(v21);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      long long v96 = mach_error_string(v22);
      *(_DWORD *)long long buf = 136315138;
      *(void *)unsigned int v120 = v96;
      _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Failed to increment the taskToken ref count, with KERN error: %s", buf, 0xCu);
    }
  }
  *(_DWORD *)(a3 + 13re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v20;
  uint64_t v24 = [v118 mixGroupName];
  BOOL v25 = v24 == 0;

  if (!v25)
  {
    id v26 = v118;
    id v27 = [v26 mixGroupName];
    uint64_t v28 = (_anonymous_namespace_ *)[v27 UTF8String];
    buf[0] = 1;
    *(void *)&v120[4] = *(void *)&v117[0];
    *(void *)&v120[28] = *((void *)&v117[1] + 1);
    *(_OWORD *)&v120[12] = *(_OWORD *)((char *)v117 + 8);
    memset(v117, 0, sizeof(v117));
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a3 + 56), buf);
    if (buf[0] && *(void *)&v120[4])
    {
      if (v120[12]) {
        (*(void (**)(void))(**(void **)&v120[4] + 40))();
      }
      memset(&v120[4], 0, 32);
    }
    if (*(void *)&v117[0])
    {
      if (BYTE8(v117[0])) {
        (*(void (**)(void))(**(void **)&v117[0] + 40))();
      }
      memset(v117, 0, sizeof(v117));
    }
  }
  uint64_t v29 = [v118 pcmBuffer];
  BOOL v30 = v29 == 0;

  if (v30)
  {
    uint64_t v51 = [v118 filePath];
    BOOL v52 = v51 == 0;

    if (v52)
    {
      uint64_t v75 = [v118 fileBuffer];
      BOOL v76 = v75 == 0;

      if (!v76)
      {
        id v78 = v118;
        int v79 = [v78 fileBuffer];
        objc_storeStrong((id *)(*(void *)(a3 + 8) + 184), v79);

        id v80 = v118;
        id v81 = [v80 bufferSize];
        *(void *)(*(void *)(a3 + 8) + 40) = [v81 unsignedLongLongValue];

        id v82 = v118;
        uint64_t v83 = [v82 length];
        *(void *)(a3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = [v83 longLongValue];

        id v84 = v118;
        unsigned int v85 = [v84 format];
        objc_storeStrong((id *)(*(void *)(a3 + 8) + 8), v85);

        uint64_t v38 = (id)*re::audioLogObjects(v86);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          re::AudioFileAsset::sharableFileBuffer((re::AudioFileAsset *)a3);
          id v116 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v87 = *(void *)(*(void *)(a3 + 8) + 40);
          re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a3);
          BOOL v88 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
          uint64_t v89 = *(void *)(a3 + 136);
          int v90 = *(unsigned __int8 *)(a3 + 52);
          double v91 = *(float *)(a3 + 48);
          int v92 = *(_DWORD *)(a3 + 96);
          long long v93 = (char *)v117 + 8;
          if (*(unsigned char *)(a3 + 56)) {
            long long v93 = (unsigned char *)(a3 + 72);
          }
          if (*v93)
          {
            if (*(unsigned char *)(a3 + 56)) {
              unsigned int v105 = (char **)(a3 + 80);
            }
            else {
              unsigned int v105 = (char **)&v117[1];
            }
            BOOL v94 = *v105;
          }
          else if (*(unsigned char *)(a3 + 56))
          {
            BOOL v94 = (char *)(a3 + 73);
          }
          else
          {
            BOOL v94 = (char *)v117 + 9;
          }
          uint64_t v106 = *(void *)(*(void *)(a3 + 8) + 24);
          int v107 = *(_DWORD *)(a3 + 128);
          uint64_t v109 = *(void *)(a3 + 112);
          uint64_t v108 = *(void *)(a3 + 120);
          int v111 = *(_DWORD *)(a3 + 104);
          int v110 = *(_DWORD *)(a3 + 108);
          int v112 = *(unsigned __int8 *)(a3 + 100);
          *(_DWORD *)long long buf = 138415874;
          *(void *)unsigned int v120 = v116;
          *(_WORD *)&v120[8] = 2048;
          *(void *)&v120[10] = v87;
          *(_WORD *)&v120[18] = 2112;
          *(void *)&v120[20] = v88;
          *(_WORD *)&v120[28] = 2048;
          *(void *)&v120[30] = v89;
          *(_WORD *)&v120[38] = 1024;
          *(_DWORD *)&v120[40] = v90;
          *(_WORD *)&v120[44] = 2048;
          *(double *)unsigned int v121 = v91;
          *(_WORD *)&v121[8] = 1024;
          *(_DWORD *)&v121[10] = v92;
          *(_WORD *)unsigned int v122 = 2080;
          *(void *)&v122[2] = v94;
          *(_WORD *)&v122[10] = 1024;
          *(_DWORD *)&v122[12] = v112;
          *(_WORD *)&v122[16] = 1024;
          *(_DWORD *)&v122[18] = v111;
          *(_WORD *)&v122[22] = 1024;
          *(_DWORD *)&v122[24] = v110;
          *(_WORD *)&v122[28] = 2048;
          *(void *)&v122[30] = v109;
          *(_WORD *)&v122[38] = 1024;
          *(_DWORD *)&v122[40] = v107;
          __int16 v123 = 2048;
          uint64_t v124 = v108;
          __int16 v125 = 2048;
          uint64_t v126 = v106;
          _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered file buffer asset with buffer=%@, bufferSize=%zu, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x80u);
          if (*(void *)&v117[0] && (BYTE8(v117[0]) & 1) != 0) {
            (*(void (**)(void))(**(void **)&v117[0] + 40))();
          }
        }
        goto LABEL_49;
      }
      uint64_t v95 = *re::audioLogObjects(v77);
      uint64_t v48 = 0;
      if (!os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v95, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Cannot make asset from payload that contains neither buffer nor file path.", buf, 2u);
    }
    else
    {
      id v53 = v118;
      id v54 = [v53 filePath];
      BOOL v55 = re::AudioFileAsset::prepareToLoadFrom((re::AudioFileAsset *)a3, (const char *)[v54 UTF8String]);

      unsigned int v57 = (id)*re::audioLogObjects(v56);
      uint64_t v38 = v57;
      if (v55)
      {
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          re::AudioFileAsset::localFileURL((re::AudioFileAsset *)a3);
          int v58 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
          int v59 = *(unsigned __int8 *)(a3 + 52);
          double v60 = *(float *)(a3 + 48);
          int v61 = *(_DWORD *)(a3 + 96);
          uint64_t v62 = (char *)v117 + 8;
          if (*(unsigned char *)(a3 + 56)) {
            uint64_t v62 = (unsigned char *)(a3 + 72);
          }
          if (*v62)
          {
            if (*(unsigned char *)(a3 + 56)) {
              unsigned int v97 = (char **)(a3 + 80);
            }
            else {
              unsigned int v97 = (char **)&v117[1];
            }
            unsigned int v63 = *v97;
          }
          else if (*(unsigned char *)(a3 + 56))
          {
            unsigned int v63 = (char *)(a3 + 73);
          }
          else
          {
            unsigned int v63 = (char *)v117 + 9;
          }
          uint64_t v98 = *(void *)(*(void *)(a3 + 8) + 24);
          int v99 = *(_DWORD *)(a3 + 128);
          uint64_t v101 = *(void *)(a3 + 112);
          uint64_t v100 = *(void *)(a3 + 120);
          int v103 = *(_DWORD *)(a3 + 104);
          int v102 = *(_DWORD *)(a3 + 108);
          int v104 = *(unsigned __int8 *)(a3 + 100);
          *(_DWORD *)long long buf = 138415106;
          *(void *)unsigned int v120 = v58;
          *(_WORD *)&v120[8] = 1024;
          *(_DWORD *)&v120[10] = v59;
          *(_WORD *)&v120[14] = 2048;
          *(double *)&v120[16] = v60;
          *(_WORD *)&v120[24] = 1024;
          *(_DWORD *)&v120[26] = v61;
          *(_WORD *)&v120[30] = 2080;
          *(void *)&v120[32] = v63;
          *(_WORD *)&v120[40] = 1024;
          *(_DWORD *)&v120[42] = v104;
          *(_WORD *)unsigned int v121 = 1024;
          *(_DWORD *)&v121[2] = v103;
          *(_WORD *)&v121[6] = 1024;
          *(_DWORD *)&v121[8] = v102;
          *(_WORD *)&v121[12] = 2048;
          *(void *)unsigned int v122 = v101;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = v99;
          *(_WORD *)&v122[14] = 2048;
          *(void *)&v122[16] = v100;
          *(_WORD *)&v122[24] = 2048;
          *(void *)&v122[26] = v98;
          _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered file asset with path=%@, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x62u);
          if (*(void *)&v117[0] && (BYTE8(v117[0]) & 1) != 0) {
            (*(void (**)(void))(**(void **)&v117[0] + 40))();
          }
        }
        goto LABEL_49;
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        id v113 = v118;
        id v114 = [v113 filePath];
        uint64_t v115 = [v114 UTF8String];
        *(_DWORD *)long long buf = 136315138;
        *(void *)unsigned int v120 = v115;
        _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Failed to load audio file at '%s'", buf, 0xCu);
      }
    }
LABEL_28:
    uint64_t v48 = 0;
    goto LABEL_29;
  }
  id v31 = v118;
  uint64_t v32 = [v31 pcmBuffer];
  objc_storeStrong((id *)(*(void *)(a3 + 8) + 176), v32);

  id v33 = v118;
  unsigned int v34 = [v33 format];
  objc_storeStrong((id *)(*(void *)(a3 + 8) + 8), v34);

  id v35 = v118;
  unsigned int v36 = [v35 length];
  *(void *)(a3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = [v36 longLongValue];

  uint64_t v38 = (id)*re::audioLogObjects(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    id v39 = *(id *)(*(void *)(a3 + 8) + 176);
    re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a3);
    uint64_t v40 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = *(void *)(a3 + 136);
    int v42 = *(unsigned __int8 *)(a3 + 52);
    double v43 = *(float *)(a3 + 48);
    int v44 = *(_DWORD *)(a3 + 96);
    long long v45 = (char *)v117 + 8;
    if (*(unsigned char *)(a3 + 56)) {
      long long v45 = (unsigned char *)(a3 + 72);
    }
    if (*v45)
    {
      if (*(unsigned char *)(a3 + 56)) {
        unsigned int v64 = (char **)(a3 + 80);
      }
      else {
        unsigned int v64 = (char **)&v117[1];
      }
      long long v46 = *v64;
    }
    else if (*(unsigned char *)(a3 + 56))
    {
      long long v46 = (char *)(a3 + 73);
    }
    else
    {
      long long v46 = (char *)v117 + 9;
    }
    uint64_t v65 = *(void *)(*(void *)(a3 + 8) + 24);
    int v66 = *(_DWORD *)(a3 + 128);
    uint64_t v68 = *(void *)(a3 + 112);
    uint64_t v67 = *(void *)(a3 + 120);
    int v70 = *(_DWORD *)(a3 + 104);
    int v69 = *(_DWORD *)(a3 + 108);
    int v71 = *(unsigned __int8 *)(a3 + 100);
    *(_DWORD *)long long buf = 138415618;
    *(void *)unsigned int v120 = v39;
    *(_WORD *)&v120[8] = 2112;
    *(void *)&v120[10] = v40;
    *(_WORD *)&v120[18] = 2048;
    *(void *)&v120[20] = v41;
    *(_WORD *)&v120[28] = 1024;
    *(_DWORD *)&v120[30] = v42;
    *(_WORD *)&v120[34] = 2048;
    *(double *)&v120[36] = v43;
    *(_WORD *)&v120[44] = 1024;
    *(_DWORD *)unsigned int v121 = v44;
    *(_WORD *)&v121[4] = 2080;
    *(void *)&v121[6] = v46;
    *(_WORD *)unsigned int v122 = 1024;
    *(_DWORD *)&v122[2] = v71;
    *(_WORD *)&v122[6] = 1024;
    *(_DWORD *)&v122[8] = v70;
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = v69;
    *(_WORD *)&v122[18] = 2048;
    *(void *)&v122[20] = v68;
    *(_WORD *)&v122[28] = 1024;
    *(_DWORD *)&v122[30] = v66;
    *(_WORD *)&v122[34] = 2048;
    *(void *)&v122[36] = v67;
    __int16 v123 = 2048;
    uint64_t v124 = v65;
    _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered pcm buffer asset with buffer=%@, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x76u);
    if (*(void *)&v117[0] && (BYTE8(v117[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v117[0] + 40))();
    }
  }
LABEL_49:

  uint64_t v72 = (re *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), *(void *)(*(void *)(a3 + 8) + 24));
  if (v72)
  {
    uint64_t v73 = (id)*re::audioLogObjects(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v74 = *(void *)(*(void *)(a3 + 8) + 24);
      *(_DWORD *)long long buf = 134217984;
      *(void *)unsigned int v120 = v74;
      _os_log_impl(&dword_233120000, v73, OS_LOG_TYPE_DEFAULT, "Audio asset with ID %llu has already been registered in PHASE. Marking as completely loaded.", buf, 0xCu);
    }

    uint64_t v48 = 1;
    *(_WORD *)(a3 + 15re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 1;
  }
  else
  {
    re::AudioFileAsset::completeLoad((re::AudioFileAsset *)a3, *(AudioSceneService **)(a1 + 8));
    uint64_t v48 = 1;
  }
LABEL_29:

  return v48;
}

void sub_233541F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void re::AudioFileAssetLoader::resourceDidUpdate(re *a1, uint64_t a2, void *a3)
{
  if (a2 && *a3)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3)
    {
      uint64_t v4 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v4, v5);
    }
    operator new();
  }
  id v6 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot update shared AudioFileAsset with bad arguments.", buf, 2u);
  }
}

void sub_233542290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::introspectionType(re::AudioFileAssetLoader *this)
{
  {
    re::introspect<re::AudioFileAsset>(void)::info = re::introspect_AudioFileAsset(0);
  }
  return re::introspect<re::AudioFileAsset>(void)::info;
}

void sub_23354232C(_Unwind_Exception *a1)
{
}

uint64_t re::AudioFileAssetLoader::assetNonIntrospectionNonSharedDataByteSize(re::AudioFileAssetLoader *this, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (id)*re::audioLogObjects(this);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a2[1] + 24);
    uint64_t v5 = a2[20];
    int v7 = 134218240;
    uint64_t v8 = v4;
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Asset: %llu has an in memory byte size of: %lu", (uint8_t *)&v7, 0x16u);
  }

  return a2[20];
}

void sub_2335424D0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_233542630(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_233542794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233542890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233542948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2335429FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233542AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10) {

  }
  uint64_t v13 = 56;
  while (1)
  {
    id v14 = *(void **)(v10 + v13);
    if (v14)
    {

      *(void *)(v10 + v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    }
    v13 -= 8;
    if (v13 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_233542CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233542E10(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_233542F70(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_233543084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::DirectMeshPayload::connectionId(id *this)
{
  id v1 = [*this clientObject];
  uint64_t v4 = v1;
  uint64_t v2 = re::directMeshConnectionId(&v4);

  return v2;
}

void *re::DirectMeshPayload::directMesh(id *this)
{
  id v1 = [*this directMesh];

  return v1;
}

void re::DirectMeshPayload::make(uint64_t a1@<X0>, REDirectMeshPayload **a2@<X8>)
{
  uint64_t v3 = [[REDirectMeshPayload alloc] initWithDirectMesh:a1];
  *a2 = v3;
}

void re::DirectMeshPayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    uint64_t v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_23354322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *re::DirectTexturePayload::directTexture(id *this)
{
  id v1 = [*this directTexture];

  return v1;
}

void re::DirectTexturePayload::make(uint64_t a1@<X0>, REDirectTexturePayload **a2@<X8>)
{
  uint64_t v3 = [[REDirectTexturePayload alloc] initWithDirectTexture:a1];
  *a2 = v3;
}

void re::DirectTexturePayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    uint64_t v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_233543340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *re::TimelineAsset::assetType(re::TimelineAsset *this)
{
  {
    re::TimelineAsset::assetType(void)::type = (uint64_t)"Timeline";
    qword_26879E948 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::TimelineAsset::assetType(void)::type);
  }
  return &re::TimelineAsset::assetType(void)::type;
}

void *re::allocInfo_TimelineAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DEC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DEC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DF10, "TimelineAsset");
    __cxa_guard_release(&qword_26AF7DEC0);
  }
  return &unk_26AF7DF10;
}

void re::initInfo_TimelineAsset(re *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v15 = 0x79041F6188FFAE1ELL;
  *((void *)&v15 + 1) = "TimelineAsset";
  re::StringID::destroyString((re::StringID *)&v15);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DEB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DEB8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DEC8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7DEC8))
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF7DED0);
        __cxa_guard_release(&qword_26AF7DEC8);
      }
      if ((_MergedGlobals_102 & 1) == 0)
      {
        _MergedGlobals_102 = 1;
        uint64_t v6 = re::introspect_TimelineAssetData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7DED0, 0);
        qword_26AF7DEE0 = 0x800000001;
        dword_26AF7DEE8 = 8;
        word_26AF7DEEC = 0;
        *(void *)&xmmword_26AF7DEF0 = 0;
        *((void *)&xmmword_26AF7DEF0 + 1) = 0xFFFFFFFFLL;
        qword_26AF7DED0 = (uint64_t)&unk_26E6CDA08;
        qword_26AF7DF00 = v6;
        unk_26AF7DF08 = 0;
        re::IntrospectionRegistry::add(v7, v8);
        re::getPrettyTypeName((re *)&qword_26AF7DED0, (const re::IntrospectionBase *)&v15);
        if (BYTE8(v15)) {
          __int16 v9 = v16;
        }
        else {
          __int16 v9 = (char *)&v15 + 9;
        }
        if (void)v15 && (BYTE8(v15)) {
          (*(void (**)(void))(*(void *)v15 + 40))();
        }
        if (v17 >> 1 == 94623636 && (v18 == "char*" || !strcmp(v18, "char*")))
        {
          long long v10 = v15;
        }
        else
        {
          long long v15 = *(_OWORD *)(v6 + 32);
          long long v10 = v14;
        }
        xmmword_26AF7DEF0 = v10;
        re::StringID::destroyString((re::StringID *)&v17);
      }
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "m_timelineData";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7DED0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7DEB0 = v11;
      __cxa_guard_release(&qword_26AF7DEB8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DEB0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TimelineAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TimelineAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::TimelineAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TimelineAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v13;
}

void re::internal::defaultConstruct<re::TimelineAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
}

uint64_t re::internal::defaultConstructV2<re::TimelineAsset>(uint64_t result)
{
  *(void *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::introspect_TimelineAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineAsset", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimelineAsset>, this);
}

char **re::TimelineAssetLoader::introspectionType(re::TimelineAssetLoader *this)
{
  id v1 = &off_268773000;
  {
    id v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::TimelineAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"TimelineAsset", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimelineAsset>, 0);
      id v1 = &off_268773000;
    }
  }
  return v1[372];
}

uint64_t re::TimelineAssetLoader::registerAsset(re::TimelineAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4 = re::globalAllocators(this);
  uint64_t v6 = (const re::TimelineAssetData *)*((void *)a2 + 2);
  if (!v6)
  {
    uint64_t v6 = (const re::TimelineAssetData *)re::internal::convertToTimeline(*((re::internal **)a2 + 1), (const re::TimelineAssetData *)v4[2], v5);
    *((void *)a2 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
    *(void *)a2 = v6;
  }
  id v7 = (re::internal *)*((void *)a2 + 1);
  return re::internal::registerAndResolveTimelineDependencies(v7, v6, v5);
}

re **re::TimelineAssetLoader::allocateSampleAsset(re::TimelineAssetLoader *this)
{
  id v1 = re::globalAllocators(this);
  uint64_t v2 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 120, 8);
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData((uint64_t)v2, 11);
  *(unsigned char *)(v3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(v3 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(v3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(v3 + 104) = 0;
  *(void *)(v3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(void *)uint64_t v3 = &unk_26E6D3618;
  uint64_t v4 = re::globalAllocators((re *)v3);
  uint64_t v6 = (re *)re::internal::convertToTimeline(v2, (const re::TimelineAssetData *)v4[2], v5);
  id v7 = re::globalAllocators(v6);
  uint64_t result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 24, 8);
  void *result = v6;
  result[1] = v2;
  result[2] = v6;
  return result;
}

re *re::TimelineAssetLoader::unregisterAsset(re *this, void *a2, const re::ExistingAssetInformation *a3)
{
  if (a2[2])
  {
    uint64_t v4 = re::globalAllocators(this);
    this = (re *)re::internal::destroy(a2[2], (re::Timeline *)v4[2], v5);
    a2[2] = 0;
  }
  *a2 = 0;
  return this;
}

uint64_t re::TimelineAssetLoader::unloadAsset(re::TimelineAssetLoader *this, void *a2)
{
  uint64_t v3 = (void (***)(void))a2[1];
  if (v3)
  {
    (**v3)(v3);
  }
  a2[1] = 0;
  if (a2[2])
  {
    uint64_t v5 = re::globalAllocators(v4);
    uint64_t v4 = (re *)re::internal::destroy(a2[2], (re::Timeline *)v5[2], v6);
    a2[2] = 0;
    *a2 = 0;
  }
  id v7 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(v4)[2] + 40);
  return v7();
}

BOOL re::TimelineAssetLoader::isSupportedSourceExtension(re::TimelineAssetLoader *this, const char *__s1)
{
  return !strcmp(__s1, "retimeline") || strcmp(__s1, "bvh") == 0;
}

uint64_t re::TimelineAssetLoader::findDependencies@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1[1];
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a2);
  }
  return result;
}

uint64_t re::TimelineAssetLoader::internalFindAssetHandleFields@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1[1];
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, a2);
  }
  return result;
}

void re::TimelineAssetLoader::~TimelineAssetLoader(re::TimelineAssetLoader *this)
{
}

void re::MeshDeformationRuntimeData::update<re::MeshAsset>(re::MeshDeformationRuntimeData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t a5, re::MeshNameMap *a6, uint64_t a7)
{
  if (*((void *)this + 1))
  {
    uint64_t v13 = *((void *)this + 2);
  }
  else
  {
    long long v14 = (uint64_t *)*a4;
    *(void *)this = a2;
    if (!v14)
    {
    }
    *((void *)this + 1) = v14;
    *((_OWORD *)this + 1) = xmmword_234378E20;
    uint64_t v13 = -1;
  }
  if (v13 != a7)
  {
    re::MeshDeformationRuntimeData::clear(this);
    re::MeshDeformationRuntimeData::rebuildRuntimeData<re::MeshAsset>((unint64_t)this, a3, a4, a5, a6);
    *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a7;
  }
}

void *re::MeshDeformationRuntimeData::clear(re::MeshDeformationRuntimeData *this)
{
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (_DWORD *)(*((void *)this + 6) + 4);
    do
    {
      if ((*v4 & 0xFFFFFF) != 0) {
        re::DeformationManager::removeDeformationStack(*(re **)this, *(void *)(v4 - 1));
      }
      v4 += 2;
      v3 -= 8;
    }
    while (v3);
  }
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 4);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 7);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  uint64_t result = re::FixedArray<re::MeshDeformationRuntimeData::DeformationMapping>::deinit((void *)this + 16);
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  return result;
}

uint64_t re::MeshDeformationRuntimeData::rebuildRuntimeData<re::MeshAsset>(unint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, re::MeshNameMap *a5)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  re::MeshDeformationAssetLoader::initializeUsedDeformers(a2, (uint64_t)a3);
  int v119 = a5;
  uint64_t v9 = *((void *)a5 + 27);
  unint64_t v10 = v9;
  unint64_t v11 = a1 + 56;
  unsigned int v113 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  unint64_t v11 = 0;
  uint64_t v14 = 0;
  do
  {
    unint64_t v15 = *(void *)(a1 + 64);
    if (v15 <= v11) {
      goto LABEL_143;
    }
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = v14;
    unsigned int v16 = re::MeshNameMap::modelIndex(v119, v11);
    v14 += *(void *)(re::MeshAssetBaseInfo::meshModel<re::MeshAsset>((void *)a4, v16) + 56);
    ++v11;
  }
  while (v9 != v11);
  unint64_t v15 = *(void *)(a1 + 64);
  if (v15 <= v9) {
    goto LABEL_152;
  }
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v9) = v14;
  if (HIDWORD(v14))
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The total number of mesh parts for a mesh collection exceeds the maximum supported count.", "m_meshPartStartIndex[meshBaseCount] == meshPartCount", "rebuildRuntimeData", 203);
    _os_crash();
    __break(1u);
LABEL_8:
    unint64_t v15 = *(void *)(a1 + 64);
    if (v15 <= v9) {
      goto LABEL_152;
    }
    uint64_t v14 = 0;
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v9) = 0;
  }
  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>((void *)(a1 + 32), *(void *)(a1 + 8), a3[2]);
  uint64_t v18 = (_anonymous_namespace_ *)re::FixedArray<unsigned long>::init<unsigned long const&>((void *)(a1 + 80), *(void *)(a1 + 8), v14, &re::MeshDeformationRuntimeData::kInvalidMeshDeformationHandle);
  if (!v19) {
    goto LABEL_153;
  }
  float64x2_t v21 = v19;
  bzero(v19, 0x558uLL);
  for (uint64_t i = 0; i != 171; i += 9)
  {
    unint64_t started = (unint64_t)&v21[i + 3];
  }
  unint64_t v98 = v14;
  unint64_t v99 = v10;
  uint64_t v117 = v21;
  id v118 = (uint64_t *)a1;
  id v27 = a3;
  unint64_t v28 = a3[7];
  if (v28)
  {
    unint64_t v11 = a3[9];
    unint64_t v10 = v11 + 48 * v28;
    uint64_t v109 = (re::MeshDeformationRuntimeData::DeformationMappingCounter *)(v21 + 162);
    unsigned int v103 = 136315138;
    unint64_t started = (unint64_t)"simplifiedVertexPositions";
    unint64_t v104 = v10;
    do
    {
      int v29 = *(unsigned __int8 *)v11;
      if (v29 == 1)
      {
        BOOL v30 = (_DWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v119 + 16, (void *)(v11 + 8));
        if (!v30 || *v30 == 0xFFFF) {
          goto LABEL_79;
        }
        int v29 = *(unsigned __int8 *)v11;
      }
      if (v29 != 2 || re::MeshNameMap::modelIndex(v119, (const re::StringID *)(v11 + 8)) != 0xFFFF)
      {
        unint64_t v31 = *(void *)(v11 + 40);
        unint64_t v15 = v27[2];
        if (v15 <= v31) {
          goto LABEL_148;
        }
        unint64_t v111 = *(void *)(v11 + 40);
        re::DynamicArray<re::DeformationDefinition>::DynamicArray((uint64_t)v120, (uint64_t *)(v27[4] + 40 * v31));
        if (v121)
        {
          unint64_t v32 = 0;
          do
          {
            id v33 = (void *)(v122 + 40 * v32);
            unsigned int v34 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(*(void *)a1 + 1368, v33);
            if (v34)
            {
              a1 = *v34;
              uint64_t v14 = v11;
              re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v119, (unsigned __int8 *)v11, buf);
              *(void *)uint64_t v124 = a4;
              *(void *)&v124[8] = v119;
              *(void *)&v124[16] = *(void *)buf;
              uint64_t v127 = v138;
              uint64_t v128 = 0;
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v124[24], (uint64_t)&buf[8]);
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
              unint64_t v11 = *(void *)&v124[16];
              if (*(void *)&v124[16])
              {
                uint64_t v35 = 0;
                while (2)
                {
                  *(void *)long long buf = v35;
                  unsigned int v36 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v128 + 16))(v128, buf);
                  unint64_t v5 = re::MeshNameMap::modelIndex(*(re::MeshNameMap **)&v124[8], v36);
                  *(void *)long long buf = v35;
                  unint64_t v37 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v128 + 16))(v128, buf);
                  uint64_t v38 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>((void *)a4, v5);
                  switch((char)a1)
                  {
                    case 0:
                      uint64_t v42 = *(void *)(v38 + 96);
                      if (v42)
                      {
                        unint64_t v43 = *(void *)(v42 + 40);
                        BOOL v44 = v43 <= WORD2(v37) || v43 > *(void *)(v38 + 56);
                        if (!v44 && *(_DWORD *)(*(void *)(v42 + 48) + 4 * WORD2(v37)) != -1) {
                          goto LABEL_40;
                        }
                      }
                      unint64_t v5 = *re::assetsLogObjects((re *)v38);
                      if (!os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_48;
                      }
                      *(_DWORD *)long long buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = WORD2(v37);
                      long long v50 = v5;
                      uint64_t v51 = "Invalid deformation stack - Blend shape not specified for mesh part: %u.";
                      goto LABEL_62;
                    case 2:
                    case 4:
                      uint64_t v39 = *(void *)(v38 + 176);
                      if (v39 && *(void *)(v39 + 8) > (unint64_t)WORD2(v37)) {
                        goto LABEL_40;
                      }
                      unint64_t v5 = *re::assetsLogObjects((re *)v38);
                      if (!os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_48;
                      }
                      *(_DWORD *)long long buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = WORD2(v37);
                      long long v50 = v5;
                      uint64_t v51 = "Invalid deformation stack - Mesh part index is not skinned: %u.";
                      goto LABEL_62;
                    case 6:
                    case 7:
                      unint64_t v40 = HIDWORD(v37);
                      unint64_t v41 = WORD2(v37);
                      unint64_t v10 = *(void *)(v38 + 56);
                      if (v10 <= (unsigned __int16)v40) {
                        goto LABEL_137;
                      }
                      if (*(_DWORD *)(*(void *)(v38 + 64) + 560 * v41 + 532)) {
                        goto LABEL_40;
                      }
                      BOOL v52 = *re::assetsLogObjects((re *)v38);
                      if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_48;
                      }
                      *(_DWORD *)long long buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v41;
                      long long v50 = v52;
                      uint64_t v51 = "Invalid deformation stack - Mesh part does not have open subdiv data: %u";
                      goto LABEL_62;
                    case 8:
                      unint64_t v45 = HIDWORD(v37);
                      unint64_t v41 = WORD2(v37);
                      unint64_t v10 = *(void *)(v38 + 56);
                      if (v10 <= (unsigned __int16)v45) {
                        goto LABEL_139;
                      }
                      uint64_t v46 = *(void *)(v38 + 64) + 560 * v41;
                      uint64_t v47 = *(void *)(v46 + 344);
                      if (!v47) {
                        goto LABEL_47;
                      }
                      uint64_t v48 = 16 * v47;
                      unint64_t v5 = *(void *)(v46 + 352) + 8;
                      break;
                    default:
                      goto LABEL_40;
                  }
                  while (1)
                  {
                    uint64_t v38 = strcmp(*(const char **)v5, "simplifiedVertexPositions");
                    if (!v38) {
                      break;
                    }
                    v5 += 16;
                    v48 -= 16;
                    if (!v48)
                    {
LABEL_47:
                      long long v49 = *re::assetsLogObjects((re *)v38);
                      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)long long buf = 67109120;
                        *(_DWORD *)&uint8_t buf[4] = v41;
                        long long v50 = v49;
                        uint64_t v51 = "Invalid deformation stack - Mesh does not contain simplified mesh buffer: %u.";
LABEL_62:
                        _os_log_error_impl(&dword_233120000, v50, OS_LOG_TYPE_ERROR, v51, buf, 8u);
                      }
LABEL_48:
                      re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v124[24]);
                      a1 = (unint64_t)v118;
                      unint64_t v11 = v14;
                      goto LABEL_51;
                    }
                  }
LABEL_40:
                  if (++v35 != v11) {
                    continue;
                  }
                  break;
                }
              }
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v124[24]);
              ++v32;
              a1 = (unint64_t)v118;
              unint64_t v11 = v14;
            }
            else
            {
              unint64_t v5 = *re::assetsLogObjects(0);
              if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
              {
                uint64_t v54 = v33[1];
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = v54;
                _os_log_error_impl(&dword_233120000, (os_log_t)v5, OS_LOG_TYPE_ERROR, "Unknown deformer name specified in deformation stack: %s.", buf, 0xCu);
              }
LABEL_51:
              re::DynamicArray<re::DeformationDefinition>::removeStableAt((uint64_t)v120, v32);
            }
          }
          while (v32 < v121);
          id v27 = a3;
          unint64_t v10 = v104;
          if (v121)
          {
            unint64_t v55 = re::DeformationManager::addDeformationStack(*(void *)a1, (uint64_t)v120);
            if ((v55 & 0xFFFFFF00000000) != 0)
            {
              unint64_t v15 = *(void *)(a1 + 40);
              char v56 = (uint64_t *)v111;
              if (v15 <= v111) {
                goto LABEL_151;
              }
              int v57 = v55;
              *(void *)(*(void *)(a1 + 48) + 8 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = v55;
              unint64_t v100 = v11;
              re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v119, (unsigned __int8 *)v11, buf);
              *(void *)uint64_t v124 = a4;
              *(void *)&v124[8] = v119;
              *(void *)&v124[16] = *(void *)buf;
              uint64_t v127 = v138;
              uint64_t v128 = 0;
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v124[24], (uint64_t)&buf[8]);
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
              if (*(void *)&v124[16])
              {
                uint64_t v14 = *(void *)&v124[16];
                unint64_t v15 = 0;
                while (1)
                {
                  *(void *)long long buf = v15;
                  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v128 + 16))(v128, buf);
                  *(void *)long long buf = v15;
                  unint64_t v11 = (unint64_t)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v128 + 16))(v128, buf) >> 32;
                  int v58 = (unsigned char *)re::DataArray<re::DeformationStack>::get(*(void *)a1 + 1416, v57);
                  a1 = *v58;
                  if (*v58)
                  {
                    int v59 = 0;
                    do
                    {
                      unint64_t v5 = *(unsigned int *)(re::DataArray<re::DeformationStack>::get(*v118 + 1416, v57)
                                           + 4 * (void)v59
                                           + 4);
                      if (v5 >= 0x13) {
                        goto LABEL_133;
                      }
                      re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping((re::MeshDeformationRuntimeData::DeformationMappingCounter *)&v117[9 * v5], v119, v10, (unsigned __int16)v11, (char)v59);
                      int v59 = (uint64_t *)((char *)v59 + 1);
                    }
                    while ((uint64_t *)a1 != v59);
                  }
                  re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping(v109, v119, v10, (unsigned __int16)v11, 255);
                  a1 = v10;
                  unint64_t v5 = v118[8];
                  if (v5 <= v10) {
                    goto LABEL_144;
                  }
                  unint64_t v11 = *(_DWORD *)(v118[9] + 4 * v10) + (unsigned __int16)v11;
                  unint64_t v10 = v118[11];
                  if (v10 <= v11) {
                    break;
                  }
                  a1 = (unint64_t)v118;
                  uint64_t v60 = v118[12];
                  uint64_t v61 = v118[3];
                  if (*(void *)(v60 + 8 * v11) == -1) {
                    ++v61;
                  }
                  v118[3] = v61;
                  *(void *)(v60 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = v111;
                  if (++v15 == v14) {
                    goto LABEL_77;
                  }
                }
LABEL_145:
                uint64_t v123 = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v129 = 136315906;
                *(void *)&v129[4] = "operator[]";
                __int16 v130 = 1024;
                int v131 = 468;
                __int16 v132 = 2048;
                unint64_t v133 = v11;
                __int16 v134 = 2048;
                uint64_t v135 = v10;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_146:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 476;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = a4;
                __int16 v125 = 2048;
                uint64_t v126 = v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_147:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 468;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v5;
                __int16 v125 = 2048;
                uint64_t v126 = v14;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_148:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                unint64_t v65 = v31;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 797;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v65;
                __int16 v125 = 2048;
                uint64_t v126 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_149:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 468;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v11;
                __int16 v125 = 2048;
                uint64_t v126 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_150:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 468;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v15;
                __int16 v125 = 2048;
                uint64_t v126 = v65;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_151:
                *(void *)uint64_t v129 = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                unint64_t v13 = (unint64_t)v56;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 468;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v13;
                __int16 v125 = 2048;
                uint64_t v126 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_152:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 468;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v10;
                __int16 v125 = 2048;
                uint64_t v126 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_153:
                re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                _os_crash();
                __break(1u);
LABEL_154:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 476;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v11;
                __int16 v125 = 2048;
                uint64_t v126 = v13;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_155:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 476;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v11;
                __int16 v125 = 2048;
                uint64_t v126 = a4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_156:
                v120[0] = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                long long v137 = 0u;
                long long v138 = 0u;
                *(_OWORD *)long long buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v124 = 136315906;
                *(void *)&v124[4] = "operator[]";
                *(_WORD *)&v124[12] = 1024;
                *(_DWORD *)&v124[14] = 476;
                *(_WORD *)&v124[18] = 2048;
                *(void *)&v124[20] = v13;
                __int16 v125 = 2048;
                uint64_t v126 = a4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_157:
                re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                _os_crash();
                __break(1u);
                goto LABEL_158;
              }
LABEL_77:
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v124[24]);
              id v27 = a3;
              unint64_t v11 = v100;
              unint64_t v10 = v104;
            }
          }
        }
        re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v120);
      }
LABEL_79:
      v11 += 48;
    }
    while (v11 != v10);
  }
  uint64_t v62 = *(void *)(a1 + 8);
  *(void *)(a1 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v62;
  *(void *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 19;
  unsigned int v63 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 1824, 8);
  *(void *)(a1 + 144) = v63;
  if (!v63) {
    goto LABEL_157;
  }
  bzero(v63, 0x720uLL);
  unint64_t v11 = 0;
  unint64_t v10 = 72;
  a4 = 96;
  do
  {
    unint64_t v65 = (unint64_t)v117;
    int v66 = &v117[9 * v11];
    unsigned int v67 = v113;
    if (v113)
    {
      uint64_t v68 = 0;
      unsigned int v69 = 0;
      unsigned int v67 = 0;
      unint64_t v41 = v66[1];
      do
      {
        if (v41 == v68) {
          goto LABEL_138;
        }
        v69 += *(unsigned __int16 *)(v66[2] + 2 * v68);
        if (*(_WORD *)(v66[2] + 2 * v68)) {
          ++v67;
        }
        ++v68;
      }
      while (v99 != v68);
    }
    else
    {
      unsigned int v69 = 0;
    }
    unint64_t v15 = *(void *)(a1 + 136);
    if (v15 <= v11) {
      goto LABEL_149;
    }
    id v114 = &v117[9 * v11];
    uint64_t v70 = *(void *)(a1 + 144);
    uint64_t v14 = v70 + 96 * v11;
    re::FixedArray<unsigned short>::init<>((uint64_t *)v14, *(void *)(a1 + 8), v67);
    re::FixedArray<int>::init<>((uint64_t *)(v14 + 24), *(void *)(a1 + 8), v69 + 1);
    unint64_t started = v69;
    re::FixedArray<unsigned short>::init<>((uint64_t *)(v14 + 48), *(void *)(a1 + 8), v69);
    uint64_t v112 = v14;
    re::FixedArray<BOOL>::init<>((void *)(v14 + 72), *(void *)(a1 + 8), v69);
    uint64_t v101 = v70;
    unint64_t v102 = v11;
    if (v113)
    {
      unsigned int v72 = 0;
      unint64_t v5 = 0;
      unsigned int v73 = 0;
      uint64_t v74 = (void *)(v70 + 96 * v11);
      uint64_t v108 = v74 + 5;
      int v110 = (re::MeshDeformationRuntimeData::DeformationMappingCounter *)(v74 + 4);
      uint64_t v75 = &v117[9 * v11];
      BOOL v76 = (unint64_t *)(v75 + 4);
      unint64_t v11 = (unint64_t)(v75 + 5);
      a1 = (unint64_t)(v75 + 7);
      uint64_t v14 = (uint64_t)(v74 + 10);
      long long v77 = v75 + 8;
      a4 = (unint64_t)(v74 + 11);
      id v78 = v114;
      unsigned int v105 = v74 + 8;
      uint64_t v106 = v74 + 7;
      while (1)
      {
        unint64_t v10 = v72;
        unint64_t started = v78[1];
        if (started <= v72) {
          goto LABEL_140;
        }
        if (*(_WORD *)(v78[2] + 2 * v72))
        {
          unint64_t started = v73;
          unint64_t v79 = *(void *)(v112 + 8);
          if (v79 <= v73) {
            goto LABEL_141;
          }
          *(_WORD *)(*(void *)(v112 + 16) + 2 * v7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v72;
          unint64_t v79 = *(void *)v110;
          if (*(void *)v110 <= (unint64_t)v73) {
            goto LABEL_142;
          }
          unsigned int v115 = v73;
          *(_DWORD *)(*v108 + 4 * v7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v5;
          unint64_t started = re::MeshNameMap::meshPartStartIndexForInstance(v119, v72);
          unsigned int v80 = v10 + 1;
          unsigned int v81 = re::MeshNameMap::meshPartStartIndexForInstance(v119, (int)v10 + 1);
          if (started < v81)
          {
            unint64_t v10 = 0;
            unsigned int v103 = started;
            uint64_t v82 = started;
            unint64_t v83 = started - (unint64_t)v81;
            id v78 = v114;
            unsigned int v72 = v80;
            while (1)
            {
              unint64_t started = *v76;
              if (*v76 <= v82 + v10) {
                break;
              }
              if (*(unsigned char *)(*(void *)v11 + v82 + v10))
              {
                unint64_t started = v5;
                uint64_t v84 = *v106;
                if (*v106 <= (unint64_t)v5) {
                  goto LABEL_134;
                }
                *(_WORD *)(*v105 + 2 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v10;
                uint64_t v84 = *(void *)a1;
                if (*(void *)a1 <= v82 + v10) {
                  goto LABEL_135;
                }
                uint64_t v84 = *(void *)v14;
                if (*(void *)v14 <= (unint64_t)v5) {
                  goto LABEL_136;
                }
                *(unsigned char *)(*(void *)a4 + vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = *(unsigned char *)(*v77 + v82 + v10);
                unint64_t v5 = (v5 + 1);
              }
              ++v10;
              if (!(v83 + v10)) {
                goto LABEL_109;
              }
            }
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 476;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = v10 + v103;
            __int16 v125 = 2048;
            uint64_t v126 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_133:
            uint64_t v123 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            uint64_t v84 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v129 = 136315906;
            *(void *)&v129[4] = "operator[]";
            __int16 v130 = 1024;
            int v131 = 468;
            __int16 v132 = 2048;
            unint64_t v133 = v5;
            __int16 v134 = 2048;
            uint64_t v135 = 19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_134:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 468;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = started;
            __int16 v125 = 2048;
            uint64_t v126 = v84;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_135:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 476;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = v10 + v103;
            __int16 v125 = 2048;
            uint64_t v126 = v84;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_136:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            unint64_t v41 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 468;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = started;
            __int16 v125 = 2048;
            uint64_t v126 = v84;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_137:
            uint64_t v123 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v129 = 136315906;
            *(void *)&v129[4] = "operator[]";
            __int16 v130 = 1024;
            int v131 = 476;
            __int16 v132 = 2048;
            unint64_t v133 = v41;
            __int16 v134 = 2048;
            uint64_t v135 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_138:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 476;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = v41;
            __int16 v125 = 2048;
            uint64_t v126 = v41;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_139:
            uint64_t v123 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v129 = 136315906;
            *(void *)&v129[4] = "operator[]";
            __int16 v130 = 1024;
            int v131 = 476;
            __int16 v132 = 2048;
            unint64_t v133 = v41;
            __int16 v134 = 2048;
            uint64_t v135 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_140:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            unint64_t v79 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 476;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = v10;
            __int16 v125 = 2048;
            uint64_t v126 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_141:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 468;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = started;
            __int16 v125 = 2048;
            uint64_t v126 = v79;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_142:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            unint64_t v15 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 468;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = started;
            __int16 v125 = 2048;
            uint64_t v126 = v79;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_143:
            v120[0] = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v124 = 136315906;
            *(void *)&v124[4] = "operator[]";
            *(_WORD *)&v124[12] = 1024;
            *(_DWORD *)&v124[14] = 468;
            *(_WORD *)&v124[18] = 2048;
            *(void *)&v124[20] = v11;
            __int16 v125 = 2048;
            uint64_t v126 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_144:
            uint64_t v123 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            *(_OWORD *)long long buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v129 = 136315906;
            *(void *)&v129[4] = "operator[]";
            __int16 v130 = 1024;
            int v131 = 468;
            __int16 v132 = 2048;
            unint64_t v133 = a1;
            __int16 v134 = 2048;
            uint64_t v135 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_145;
          }
          id v78 = v114;
          unsigned int v72 = v10 + 1;
LABEL_109:
          unsigned int v73 = v115 + 1;
        }
        else
        {
          ++v72;
        }
        if (v72 == v113) {
          goto LABEL_113;
        }
      }
    }
    unsigned int v73 = 0;
    unint64_t v5 = 0;
LABEL_113:
    unint64_t v15 = v73;
    unint64_t v11 = v102;
    a4 = 96;
    unint64_t v65 = *(void *)(v101 + 96 * v102 + 32);
    if (v65 <= v73) {
      goto LABEL_150;
    }
    *(_DWORD *)(*(void *)(v101 + 96 * v102 + 40) + 4 * v7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v5;
    unint64_t v11 = v102 + 1;
    a1 = (unint64_t)v118;
    unint64_t v10 = 72;
  }
  while (v102 != 18);
  uint64_t v85 = v118[17];
  uint64_t v14 = (uint64_t)v117;
  if (!v85)
  {
LABEL_158:
    re::internal::assertLog((re::internal *)4, v71, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 454);
    _os_crash();
    __break(1u);
  }
  uint64_t v86 = v118[18];
  uint64_t v87 = v85 - 1;
  uint64_t v88 = v86 + 96 * (v85 - 1);
  unint64_t v15 = *(void *)(v88 + 8);
  uint64_t v89 = v118[1];
  *(_DWORD *)long long buf = -1;
  re::FixedArray<unsigned int>::init<unsigned int>(v118 + 13, v89, v98, buf);
  if (v15)
  {
    unint64_t v13 = 0;
    int v90 = (unint64_t *)(v86 + 96 * v87);
    double v91 = v90 + 4;
    unint64_t v10 = (unint64_t)(v90 + 5);
    id v116 = v90 + 7;
    int v92 = v90 + 8;
    while (1)
    {
      unint64_t v11 = v13;
      unint64_t v13 = *(void *)(v88 + 8);
      if (v13 <= v11) {
        goto LABEL_154;
      }
      int v93 = re::MeshNameMap::meshPartStartIndexForInstance(v119, *(unsigned __int16 *)(*(void *)(v88 + 16) + 2 * v11));
      a4 = *v91;
      if (*v91 <= v11) {
        goto LABEL_155;
      }
      unint64_t v13 = v11 + 1;
      if (a4 <= v11 + 1) {
        goto LABEL_156;
      }
      unint64_t v94 = *(unsigned int *)(*(void *)v10 + 4 * v11);
      uint64_t v95 = *(unsigned int *)(*(void *)v10 + 4 * v13);
      if (v94 < v95) {
        break;
      }
LABEL_128:
      if (v13 == v15) {
        goto LABEL_129;
      }
    }
    unint64_t v11 = *v116;
    if (*v116 <= v94) {
      a4 = v94;
    }
    else {
      a4 = *v116;
    }
    while (a4 != v94)
    {
      unint64_t v5 = v93 + *(unsigned __int16 *)(*v92 + 2 * v94);
      uint64_t v14 = v118[14];
      if (v14 <= v5) {
        goto LABEL_147;
      }
      *(_DWORD *)(v118[15] + 4 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v94++;
      uint64_t v14 = (uint64_t)v117;
      if (v95 == v94) {
        goto LABEL_128;
      }
    }
    goto LABEL_146;
  }
LABEL_129:
  for (uint64_t j = 0; j != 1368; j += 72)
  {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v14 + j + 48));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v14 + j + 24));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v14 + j));
  }
}

void *re::FixedArray<re::MeshDeformationRuntimeData::DeformationMapping>::deinit(void *result)
{
  if (*result)
  {
    id v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (uint64_t *)result[2];
      uint64_t v5 = 96 * v2;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v4 + 9);
        re::FixedArray<CoreIKTransform>::deinit(v4 + 6);
        re::FixedArray<CoreIKTransform>::deinit(v4 + 3);
        re::FixedArray<CoreIKTransform>::deinit(v4);
        v4 += 12;
        v5 -= 96;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(re::MeshDeformationRuntimeData *this, unsigned int a2)
{
  if (*((void *)this + 14) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 15) + 4 * a2);
}

uint64_t re::MeshDeformationRuntimeData::meshDeformationHandle(re::MeshDeformationRuntimeData *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = a2 + 1;
  unint64_t v4 = *((void *)this + 8);
  if (v4 > v3)
  {
    if (v4 <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v5 = *((void *)this + 9);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * a2);
    unint64_t v7 = *(unsigned int *)(v5 + 4 * v3);
    unint64_t v8 = v6 + a3;
    if (v8 < v7)
    {
      if (*((void *)this + 11) > v8) {
        return *(void *)(*((void *)this + 12) + 8 * v8);
      }
LABEL_9:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return -1;
}

uint64_t re::MeshDeformationRuntimeData::deformationStackHandle(re::MeshDeformationRuntimeData *this, unint64_t a2)
{
  if (*((void *)this + 5) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 6) + 8 * a2);
}

uint64_t re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping(re::MeshDeformationRuntimeData::DeformationMappingCounter *this, const re::MeshNameMap *a2, unsigned int a3, int a4, char a5)
{
  uint64_t result = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3);
  unint64_t v10 = (result + a4);
  if (*((void *)this + 4) <= v10)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = *((void *)this + 5);
  if (*(unsigned char *)(v11 + v10)) {
    return result;
  }
  *(unsigned char *)(v11 + v10) = 1;
  if (*((void *)this + 1) <= (unint64_t)a3) {
    goto LABEL_8;
  }
  ++*(_WORD *)(*((void *)this + 2) + 2 * a3);
  if (*((void *)this + 7) <= v10) {
    goto LABEL_9;
  }
  *(unsigned char *)(*((void *)this + 8) + v10) = a5;
  return result;
}

void *re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result++ = 0xFFFFFFFFLL;
      --v6;
    }
    while (v6);
  }
  void *result = 0xFFFFFFFFLL;
  return result;
}

void re::DynamicArray<re::DeformationDefinition>::removeStableAt(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)v6, (uint64_t *)(*(void *)(a1 + 32) + 40 * a2 + 40), (uint64_t *)(*(void *)(a1 + 32) + 40 * v2), (uint64_t *)(*(void *)(a1 + 32) + 40 * a2));
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(void *)(a1 + 32) + 40 * v2;
  uint64_t v5 = (re::StringID *)(v4 - 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v4 - 24));
  re::StringID::destroyString(v5);
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

void *re::FixedArray<unsigned int>::init<unsigned int>(void *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  void *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v6 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 4 * a3, 4);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)uint64_t result = *a4;
      uint64_t result = (void *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)uint64_t result = *a4;
  return result;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DeformationDefinition>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::DeformationDefinition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DeformationDefinition>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * a1[2]), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = 5 * v8;
      uint64_t v10 = *(void *)(a2 + 32) + 8 * v9;
      uint64_t v11 = (re::StringID *)(a1[4] + 8 * v9);
      uint64_t v12 = 40 * v4 - 8 * v9;
      do
      {
        re::StringID::StringID(v11, (const StringID *)v10);
        re::FixedArray<unsigned char>::FixedArray((void *)v11 + 2, (uint64_t *)(v10 + 16));
        v10 += 40;
        uint64_t v11 = (re::StringID *)((char *)v11 + 40);
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)&v13, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * v4), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      unint64_t v6 = (uint64_t *)(a1[4] + 40 * v4);
      uint64_t v7 = 40 * v5 - 40 * v4;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v6 + 2);
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 5;
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a4, v5);
      re::FixedArray<unsigned char>::operator=((uint64_t *)(a4 + 16), v5 + 2);
      v5 += 5;
      a4 += 40;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  unint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    *uint64_t v5 = 0;
    v5[1] = (uint64_t)"";
    uint64_t v9 = *a4;
    uint64_t v10 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    v12[0] = v7 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
    v12[1] = v10;
    re::StringID::destroyString((re::StringID *)v12);
    re::FixedArray<float>::operator=(a4 + 2, v5 + 2);
    a4 += 5;
    v5 += 5;
  }
  while (v5 != v6);
  return v6;
}

void re::AnimationLibraryMeshMapping::rebuildRuntimeData(void **this, const re::MeshAsset *a2, const re::AnimationLibraryAsset *a3)
{
  unint64_t v4 = (re::AnimationLibraryMeshMapping *)this;
  uint64_t v52 = *MEMORY[0x263EF8340];
  this[7] = (void *)-1;
  if (*((_DWORD *)this + 7))
  {
    uint64_t v5 = *((unsigned int *)this + 6);
    if (v5) {
      memset_pattern16(this[1], &unk_2343655D0, 4 * v5);
    }
    if (*((_DWORD *)v4 + 8))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        this = (void **)re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(*((void *)v4 + 2) + v6);
        ++v7;
        v6 += 80;
      }
      while (v7 < *((unsigned int *)v4 + 8));
    }
    *((_DWORD *)v4 + 7) = 0;
    *((_DWORD *)v4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    int v8 = *((_DWORD *)v4 + 10) + 1;
    *((_DWORD *)v4 + 9) = 0x7FFFFFFF;
    *((_DWORD *)v4 + 10) = v8;
  }
  if (!*((void *)v4 + 6))
  {
    *((void *)v4 + 7) = -1;
  }
  if (*((void *)a3 + 2))
  {
    unint64_t v9 = 0;
    unsigned int v34 = 0;
    while (1)
    {
      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a2 + 448, (unsigned __int8 *)(*((void *)a3 + 4) + 120 * v9), &v38);
      unint64_t v32 = *((void *)a2 + 117);
      if (v32) {
        break;
      }
LABEL_54:
      re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v39);
      unint64_t v9 = ++v34;
      if (*((void *)a3 + 2) <= (unint64_t)v34) {
        return;
      }
    }
    unint64_t v10 = 0;
    unsigned int v36 = 0;
    while (1)
    {
      uint64_t v11 = (void *)re::MeshAsset::skeletonAtIndex(a2, v10);
      unint64_t v12 = *((void *)a3 + 2);
      if (v12 <= v9) {
        goto LABEL_57;
      }
      if (re::StringID::operator==(v11, (void *)(*((void *)a3 + 4) + 120 * v9 + 40)))
      {
        uint64_t v35 = v38;
        if (v38) {
          break;
        }
      }
LABEL_53:
      unint64_t v10 = ++v36;
      if (v32 <= v36) {
        goto LABEL_54;
      }
    }
    uint64_t v13 = 0;
    while (1)
    {
      *(void *)&long long v47 = v13;
      v37[0] = __PAIR64__((*(uint64_t (**)(uint64_t, long long *))(*(void *)v40 + 16))(v40, &v47), v34);
      LODWORD(v37[1]) = v36;
      unint64_t v12 = *((void *)a3 + 2);
      if (v12 <= v9)
      {
        v37[2] = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        *(void *)uint64_t v42 = "operator[]";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 797;
        __int16 v43 = 2048;
        unint64_t v44 = v9;
        __int16 v45 = 2048;
        unint64_t v46 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        v37[0] = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        *(void *)uint64_t v42 = "operator[]";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 797;
        __int16 v43 = 2048;
        unint64_t v44 = v9;
        __int16 v45 = 2048;
        unint64_t v46 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v41, (const re::AssetHandle *)(*((void *)a3 + 4) + 120 * v9 + 72));
      if (*(void *)v4)
      {
        uint64_t v14 = *(void *)&v42[4] ? *(void *)(*(void *)&v42[4] + 664) : 0;
        unint64_t v15 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*(void *)&v42[4] ^ (*(void *)&v42[4] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * (*(void *)&v42[4] ^ (*(void *)&v42[4] >> 30))) >> 27));
        uint64_t v16 = *(unsigned int *)(*((void *)v4 + 1) + 4 * ((v14 ^ (v15 >> 31) ^ v15) % *((unsigned int *)v4 + 6)));
        if (v16 != 0x7FFFFFFF)
        {
          uint64_t v17 = *((void *)v4 + 2);
          while (*(void *)(v17 + 80 * v16 + 24) != *(void *)&v42[4])
          {
            uint64_t v16 = *(_DWORD *)(v17 + 80 * v16 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF) {
              goto LABEL_27;
            }
          }
          unint64_t v28 = (void *)(v17 + 80 * v16);
          uint64_t v29 = v28[7];
          if (v29)
          {
            uint64_t v30 = 12 * v29;
            unint64_t v31 = (void *)(v28[9] + 4);
            while (*((_DWORD *)v31 - 1) != LODWORD(v37[0]) || *v31 != *(uint64_t *)((char *)v37 + 4))
            {
              unint64_t v31 = (void *)((char *)v31 + 12);
              v30 -= 12;
              if (!v30) {
                goto LABEL_51;
              }
            }
          }
          else
          {
LABEL_51:
            re::DynamicArray<re::MeshLodLevelInfo>::add(v28 + 5, v37);
          }
          goto LABEL_52;
        }
      }
LABEL_27:
      *(void *)&long long v49 = 0;
      *(void *)&long long v48 = 0;
      long long v47 = 0uLL;
      DWORD2(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      re::DynamicArray<re::MeshLodLevelInfo>::add(&v47, v37);
      if (*(void *)&v42[4]) {
        uint64_t v18 = *(void *)(*(void *)&v42[4] + 664);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(void *)&v42[4] ^ (*(void *)&v42[4] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * (*(void *)&v42[4] ^ (*(void *)&v42[4] >> 30))) >> 27));
      unint64_t v20 = v18 ^ (v19 >> 31) ^ v19;
      if (*(void *)v4)
      {
        unint64_t v21 = v20 % *((unsigned int *)v4 + 6);
        uint64_t v22 = *(unsigned int *)(*((void *)v4 + 1) + 4 * v21);
        if (v22 != 0x7FFFFFFF)
        {
          uint64_t v23 = *((void *)v4 + 2);
          while (*(void *)(v23 + 80 * v22 + 24) != *(void *)&v42[4])
          {
            uint64_t v22 = *(_DWORD *)(v23 + 80 * v22 + 8) & 0x7FFFFFFF;
            if (v22 == 0x7FFFFFFF) {
              goto LABEL_37;
            }
          }
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v21 = 0;
      }
LABEL_37:
      uint64_t v24 = *((unsigned int *)v4 + 9);
      if (v24 == 0x7FFFFFFF)
      {
        uint64_t v24 = *((unsigned int *)v4 + 8);
        int v25 = v24;
        if (v24 == *((_DWORD *)v4 + 6))
        {
          re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity((uint64_t)v4, 2 * *((_DWORD *)v4 + 7));
          unint64_t v21 = v20 % *((unsigned int *)v4 + 6);
          int v25 = *((_DWORD *)v4 + 8);
        }
        *((_DWORD *)v4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v25 + 1;
        uint64_t v26 = *((void *)v4 + 2);
        int v27 = *(_DWORD *)(v26 + 80 * v24 + 8);
      }
      else
      {
        uint64_t v26 = *((void *)v4 + 2);
        int v27 = *(_DWORD *)(v26 + 80 * v24 + 8);
        *((_DWORD *)v4 + 9) = v27 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v26 + 80 * v24 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v27 | 0x80000000;
      *(_DWORD *)(*((void *)v4 + 2) + 80 * v24 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*((void *)v4 + 2) + 80 * v24 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 1) + 4 * v21);
      *(void *)(*((void *)v4 + 2) + 80 * v24) = v20;
      re::AssetHandle::AssetHandle((re::AssetHandle *)(*((void *)v4 + 2) + 80 * v24 + 16), (const re::AssetHandle *)&v41);
      re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(*((void *)v4 + 2) + 80 * v24 + 40, (uint64_t *)&v47);
      *(_DWORD *)(*((void *)v4 + 1) + 4 * v21) = v24;
      ++*((_DWORD *)v4 + 7);
      ++*((_DWORD *)v4 + 10);
LABEL_43:
      if ((void)v47)
      {
        if ((void)v49) {
          (*(void (**)(void))(*(void *)v47 + 40))();
        }
      }
LABEL_52:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v41);
      if (++v13 == v35) {
        goto LABEL_53;
      }
    }
  }
}

uint64_t re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(int a1, uint64_t a2, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 32);
    uint64_t v6 = 12 * v4;
    do
    {
      re::DynamicArray<re::MeshLodLevelInfo>::add(v8, v5);
      uint64_t v5 = (uint64_t *)((char *)v5 + 12);
      v6 -= 12;
    }
    while (v6);
  }
  re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(this, v8);
  uint64_t result = v8[0];
  if (v8[0])
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v8[0] + 40))();
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(*((void *)this + 4) + 40 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::AnimationLibraryMeshMapping::processForFirstSkeletalQueryEntry(int a1, uint64_t a2, uint64_t a3, _anonymous_namespace_ *this, _anonymous_namespace_ *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  v24[0] = 0;
  int v26 = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    goto LABEL_26;
  }
  int v8 = *(uint64_t **)(a2 + 32);
  uint64_t v23 = (uint64_t *)((char *)v8 + 12 * v5);
  do
  {
    unint64_t v9 = *(unsigned int *)v8;
    unint64_t v10 = *(void *)(a3 + 16);
    if (v10 <= v9)
    {
      uint64_t v28 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      *(_OWORD *)__s1 = 0u;
      *(_OWORD *)uint64_t v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "operator[]";
      __int16 v31 = 1024;
      int v32 = 797;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      __int16 v35 = 2048;
      unint64_t v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = (unsigned __int8 *)(*(void *)(a3 + 32) + 120 * v9);
    unint64_t v12 = *((void *)this + 2);
    if (v12)
    {
      char v13 = 0;
      uint64_t v14 = 40 * v12 - 40;
      unint64_t v15 = (const StringID *)(*((void *)this + 4) + 24);
      do
      {
        LOBYTE(v37) = v15[-2].var1;
        re::StringID::StringID((re::StringID *)((char *)&v37 + 8), v15 - 1);
        re::StringID::StringID((re::StringID *)&__s1[1], v15);
        if (v37 == *v11
          && (*((void *)v11 + 1) ^ *((void *)&v37 + 1)) <= 1
          && ((uint64_t v16 = (char *)*((void *)v11 + 2), __s1[0] == v16) || !strcmp(__s1[0], v16))
          && (*((void *)v11 + 3) ^ (uint64_t)__s1[1]) <= 1uLL
          && ((uint64_t v17 = (char *)*((void *)v11 + 4), v39[0] == v17) || !strcmp(v39[0], v17)))
        {
          char v13 = 1;
          char v18 = 1;
        }
        else
        {
          char v18 = 0;
        }
        re::StringID::destroyString((re::StringID *)&__s1[1]);
        re::StringID::destroyString((re::StringID *)((char *)&v37 + 8));
        if (v18) {
          break;
        }
        uint64_t v19 = v14;
        v14 -= 40;
        unint64_t v15 = (const StringID *)((char *)v15 + 40);
      }
      while (v19);
      if (v13) {
        goto LABEL_23;
      }
      unint64_t v12 = *((void *)this + 2);
    }
    if (v12 >= *((void *)this + 1))
    {
      re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(this, v12 + 1);
      unint64_t v12 = *((void *)this + 2);
    }
    unint64_t v20 = (unsigned char *)(*((void *)this + 4) + 40 * v12);
    *unint64_t v20 = *v11;
    re::StringID::StringID((re::StringID *)(v20 + 8), (const StringID *)(v11 + 8));
    re::StringID::StringID((re::StringID *)(v20 + 24), (const StringID *)(v11 + 24));
    ++*((void *)this + 2);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::MeshLodLevelInfo>::add(v24, v8);
LABEL_23:
    int v8 = (uint64_t *)((char *)v8 + 12);
  }
  while (v8 != v23);
  if (v25) {
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(a5, v24);
  }
LABEL_26:
  uint64_t result = v24[0];
  if (v24[0])
  {
    if (v27) {
      return (*(uint64_t (**)(void))(*(void *)v24[0] + 40))();
    }
  }
  return result;
}

BOOL re::AnimationLibraryMeshMapping::getFirstSkeletalAnimation(uint64_t a1, uint64_t a2, _anonymous_namespace_ *a3)
{
  int SkeletalQueryEntry = re::DynamicArray<re::DynamicArray<unsigned char>>::clear((uint64_t)a3);
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v10 = *v9;
      v9 += 20;
      if (v10 < 0) {
        break;
      }
      if (v7 == ++v8)
      {
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  }
  uint64_t v19 = 0;
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  if (v7 != v8)
  {
    uint64_t v11 = v8;
    do
    {
      int SkeletalQueryEntry = re::AnimationLibraryMeshMapping::processForFirstSkeletalQueryEntry(SkeletalQueryEntry, *(void *)(a1 + 16) + 80 * v11 + 40, a2, (_anonymous_namespace_ *)v17, a3);
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      if (v12 <= (int)v8 + 1) {
        int v13 = v8 + 1;
      }
      else {
        int v13 = *(_DWORD *)(a1 + 32);
      }
      int v14 = v8;
      while (1)
      {
        uint64_t v11 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v11;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 80 * v11 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v13;
LABEL_17:
      ;
    }
    while (v12 != v8);
  }
  BOOL v15 = *((void *)a3 + 2) != 0;
  re::DynamicArray<re::MeshIdentifierAsset>::deinit((uint64_t)v17);
  return v15;
}

BOOL re::AnimationLibraryMeshMapping::getNamedSkeletalAnimation(uint64_t a1, void *a2, uint64_t a3, _anonymous_namespace_ *a4)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::clear((uint64_t)a4);
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 20;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v8 != v9)
  {
    uint64_t v13 = v9;
    do
    {
      re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v23, (uint64_t *)(*(void *)(a1 + 16) + 80 * v13 + 40));
      if (v23[2]
        && (unint64_t v14 = *v24, *(void *)(a3 + 16) > v14)
        && re::StringID::operator==((void *)(*(void *)(a3 + 32) + 120 * v14 + 56), a2))
      {
        int v15 = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v20, (uint64_t *)(*(void *)(a1 + 16) + 80 * v13 + 40));
        re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(v15, (uint64_t)v20, a4);
        if (v20[0])
        {
          if (v22) {
            (*(void (**)(void))(*(void *)v20[0] + 40))();
          }
          int v16 = 0;
          uint64_t v22 = 0;
          memset(v20, 0, sizeof(v20));
          ++v21;
        }
        else
        {
          int v16 = 0;
        }
      }
      else
      {
        int v16 = 1;
      }
      if (v23[0] && v24) {
        (*(void (**)(void))(*(void *)v23[0] + 40))();
      }
      if (!v16) {
        break;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 32);
      int v18 = v17 <= (int)v9 + 1 ? v9 + 1 : *(_DWORD *)(a1 + 32);
      while (1)
      {
        uint64_t v13 = (v9 + 1);
        if (v18 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v19 = v13;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 80 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_29;
        }
      }
      int v19 = v18;
LABEL_29:
      LODWORD(v9) = v19;
    }
    while (v17 != v19);
  }
  return *((void *)a4 + 2) != 0;
}

BOOL re::AnimationLibraryMeshMapping::getAllSkeletalAnimations(uint64_t a1, _anonymous_namespace_ *a2)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::clear((uint64_t)a2);
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 20;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      int v9 = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v14, (uint64_t *)(*(void *)(a1 + 16) + 80 * v8 + 40));
      re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(v9, (uint64_t)v14, a2);
      if (v14[0])
      {
        if (v16) {
          (*(void (**)(void))(*(void *)v14[0] + 40))();
        }
        uint64_t v16 = 0;
        memset(v14, 0, sizeof(v14));
        ++v15;
      }
      unsigned int v10 = *(_DWORD *)(a1 + 32);
      if (v10 <= (int)v5 + 1) {
        int v11 = v5 + 1;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v11 - 1 == v5) {
          break;
        }
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v5 + 1;
        int v12 = v8;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 80 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_20;
        }
      }
      int v12 = v11;
LABEL_20:
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v12;
    }
    while (v10 != v12);
  }
  return *((void *)a2 + 2) != 0;
}

uint64_t re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(result + 16));
    return re::DynamicArray<unsigned long>::deinit(v2 + 40);
  }
  return result;
}

void re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)int v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unint64_t v14 = (void *)(v6 + 72);
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 9);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
              *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 80 * v18 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 80 * v18 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 80 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v15;
            re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 80 * v18 + 16), (const re::AssetHandle *)(v14 - 7));
            uint64_t v22 = *(void *)(a1 + 16) + 80 * v18;
            *(void *)(v22 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
            *(_DWORD *)(v22 + 64) = 0;
            *(void *)(v22 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v22 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
            *(void *)(v22 + 40) = 0;
            *(void *)(v22 + 40) = *(v14 - 4);
            *(v14 - 4) = 0;
            *(void *)(v22 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = *(v14 - 3);
            *(v14 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
            uint64_t v23 = *(void *)(v22 + 56);
            *(void *)(v22 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(v14 - 2);
            *(v14 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v23;
            uint64_t v24 = *(void *)(v22 + 72);
            *(void *)(v22 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *v14;
            *unint64_t v14 = v24;
            ++*((_DWORD *)v14 - 2);
            ++*(_DWORD *)(v22 + 64);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = v12;
          }
          ++v11;
          v14 += 10;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

double re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void sub_2335482B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26AF7DFA0);

  _Unwind_Resume(a1);
}

void sub_233548414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2335484DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::anonymous namespace'::validationError(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  unint64_t v4 = *re::assetTypesLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unint64_t v7 = 138543362;
    *(void *)&v7[4] = v3;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Mesh payload validation error: %{public}@", v7, 0xCu);
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (a1)
  {
LABEL_3:
    uint64_t v5 = *MEMORY[0x263F07F80];
    BOOL v6 = v3;
    re::makeResourceSharingError((__CFString *)0x1F6, [NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1], v7);
    *a1 = *(id *)v7;
  }
LABEL_4:
}

void sub_233548664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354889C(_Unwind_Exception *a1)
{
  BOOL v6 = v5;

  _Unwind_Resume(a1);
}

void sub_233548C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

id re::anonymous namespace'::extractAttributeWithName(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 objectForKeyedSubscript:v4];
  if (v5) {
    [v3 removeObjectForKey:v4];
  }

  return v5;
}

void sub_233548D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233549378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL validateMTLIndexType(re *a1, MTLIndexType *a2)
{
  if ((unint64_t)a1 > 1)
  {
    if (a2) {
      *a2 = -1;
    }
    id v3 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid MTLIndexType when decoding REMeshPartDescriptor", v5, 2u);
    }
  }
  else if (a2)
  {
    *a2 = (MTLIndexType)a1;
  }
  return (unint64_t)a1 < 2;
}

BOOL validateMeshPartOptionalFlag(re *a1, char *a2)
{
  if ((unint64_t)a1 < 3)
  {
    if (a1 == (re *)2)
    {
      char v4 = 2;
    }
    else
    {
      if (a1 != (re *)1)
      {
        *a2 = 0;
        return (unint64_t)a1 < 3;
      }
      char v4 = 1;
    }
    *a2 = v4;
    return (unint64_t)a1 < 3;
  }
  id v3 = *re::assetTypesLogObjects(a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v6 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid MeshPartOptionalFlag when decoding REMeshAttributeDescriptor", v6, 2u);
  }
  return (unint64_t)a1 < 3;
}

void sub_2335496D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_233549894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233549C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t re::FixedInlineArray<unsigned long,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  if (a2 < 8) {
    return a1 + 8 * a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, a2, 8, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void sub_23354A1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354A3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354A4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354A7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_23354A9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354AD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354AEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354B018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_23354B624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_23354BA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354BB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::validateAttribute(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = 48;
    if (a2 == 1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = [v7 validateWithPayloadSize:*(void *)(a3 + v9) error:a4];
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_23354BCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354BF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354C0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354C2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354C60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354C980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354CB44(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23354CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354CDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354D16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354D2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_23354D948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354DAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354DE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23354DF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23354E358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  char v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v20 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    uint64_t v20 = &v4[16 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 60) {
    abort();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 3;
  if (v9 >> 3 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  int v12 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v11);
  uint64_t v13 = &v12[16 * v5];
  unint64_t v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  unint64_t v16 = &v13[16 * v6];
  uint64_t v18 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      long long v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v13 - 1) = v19;
      v13 -= 16;
    }
    while (v17 != v18);
    unint64_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

void sub_23354E810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t validateLocalRestPoseFloat3(unint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  if (a3 != 16 * a1) {
    return 0;
  }
  unint64_t v5 = a1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  if (!a1) {
    goto LABEL_12;
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__p, a1);
  uint64_t v8 = (char *)__p[1];
  bzero(__p[1], a3);
  uint64_t v9 = 0;
  __p[1] = &v8[a3];
  char v10 = 1;
  do
  {
    long long v11 = *(_OWORD *)(a2 + v9);
    int v12 = HIDWORD(*(void *)(a2 + v9));
    int v13 = *(void *)(a2 + v9 + 8);
    *(_OWORD *)((char *)__p[0] + v9) = v11;
    BOOL v14 = (v12 & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v13 & 0x7FFFFFFFu) < 0x7F800000;
    BOOL v15 = (v11 & 0x7FFFFFFF) <= 0x7F7FFFFF && v14;
    v10 &= v15;
    v9 += 16;
    --v5;
  }
  while (v5);
  if ((v10 & 1) == 0)
  {
    uint64_t v17 = 0;
    if (a4) {
      a4[1] = *a4;
    }
  }
  else
  {
LABEL_12:
    if (a4)
    {
      unint64_t v16 = (void *)*a4;
      if (*a4)
      {
        a4[1] = v16;
        operator delete(v16);
      }
      *(_OWORD *)a4 = *(_OWORD *)__p;
      a4[2] = v20;
      return 1;
    }
    uint64_t v17 = 1;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

void sub_23354EA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23354EDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a1 << 6);
}

void *re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 3 || (v7 & 1) == 0))
    {
      if (a2 < 4)
      {
        BOOL v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          unint64_t v16 = v4 + 3;
        }
        else {
          unint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        char v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            int v13 = v4 + 3;
          }
          else {
            int v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,3ul>::resize(_anonymous_namespace_ *result, unint64_t a2, void *a3)
{
  uint64_t v4 = result;
  unint64_t v5 = *((void *)result + 1);
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = re::DynamicOverflowArray<unsigned long long,3ul>::reserve(result, a2);
    unint64_t v7 = *((void *)v4 + 1);
    if (v7 < a2)
    {
      do
      {
        uint64_t v8 = (char *)v4 + 24;
        if ((*((unsigned char *)v4 + 16) & 1) == 0) {
          uint64_t v8 = (char *)*((void *)v4 + 4);
        }
        *(void *)&v8[8 * v7++] = *a3;
      }
      while (a2 != v7);
    }
  }
  *((void *)v4 + 1) = a2;
  *((_DWORD *)v4 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,3ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      unint64_t v4 = *((void *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v3, a2);
    int v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }
  unint64_t v4 = 3;
LABEL_6:
  if (v4 < a2)
  {
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v3, a2);
  }
  return result;
}

void *re::allocInfo_AudioFileGroupAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_104, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_104))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7DFE8, "AudioFileGroupAsset");
    __cxa_guard_release(&_MergedGlobals_104);
  }
  return &unk_26AF7DFE8;
}

void re::initInfo_AudioFileGroupAsset(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xFE91415CC2D84746;
  v10[1] = "AudioFileGroupAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DFC8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7DFC8);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = "assets";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7DFC0 = v8;
      __cxa_guard_release(&qword_26AF7DFC8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = &qword_26AF7DFC0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioFileGroupAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioFileGroupAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AudioFileGroupAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioFileGroupAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void sub_23354F590(_Unwind_Exception *a1)
{
}

re::AudioFileGroupAsset *re::internal::defaultConstruct<re::AudioFileGroupAsset>(int a1, int a2, re::AudioFileGroupAsset *this)
{
  return re::AudioFileGroupAsset::AudioFileGroupAsset(this);
}

uint64_t re::internal::defaultDestruct<re::AudioFileGroupAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a3 + 8);
}

uint64_t re::internal::defaultDestructV2<re::AudioFileGroupAsset>(uint64_t a1)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a1 + 8);
}

re::AudioFileGroupAsset *re::AudioFileGroupAsset::AudioFileGroupAsset(re::AudioFileGroupAsset *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26E6D96E0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8) = 0;
  for (__long long buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = __buf;
  return this;
}

void sub_23354F644(_Unwind_Exception *a1)
{
  re::DynamicArray<re::AssetHandle>::deinit(v1);
  _Unwind_Resume(a1);
}

void re::AudioFileGroupAsset::~AudioFileGroupAsset(re::AudioFileGroupAsset *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AudioFileGroupAsset::assetType(re::AudioFileGroupAsset *this)
{
  {
    re::AudioFileGroupAsset::assetType(void)::type = (uint64_t)"AudioFileGroup";
    qword_26879E968 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioFileGroupAsset::assetType(void)::type);
  }
  return &re::AudioFileGroupAsset::assetType(void)::type;
}

uint64_t re::AudioFileGroupAsset::isCompletelyLoaded(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(re::AudioFileAsset **)(this + 40);
  uint64_t v3 = 24 * v1;
  while (1)
  {
    uint64_t v4 = *((void *)v2 + 1);
    if (!v4) {
      break;
    }
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 != 2) {
      break;
    }
    uint64_t v6 = *((void *)v2 + 1);
    if (!v6)
    {
      re::AudioFileAsset::assetType((re::AudioFileAsset *)this);
      return 0;
    }
    unint64_t v7 = *(uint64_t **)(v6 + 264);
    if (v7 != re::AudioFileAsset::assetType((re::AudioFileAsset *)this)) {
      return 0;
    }
    this = re::AssetHandle::loadedAsset<re::AudioFileAsset>(v2);
    if (!this) {
      return this;
    }
    if (!*(unsigned char *)(this + 153)) {
      return 0;
    }
    uint64_t v2 = (re::AudioFileAsset *)((char *)v2 + 24);
    v3 -= 24;
    if (!v3) {
      return 1;
    }
  }
  return 0;
}

void re::AudioFileGroupAsset::completeLoad(re::AudioFileGroupAsset *this, AudioSceneService *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v4 = (re::AudioFileAsset *)*((void *)this + 5);
    uint64_t v5 = 24 * v2;
    do
    {
      uint64_t v6 = *((void *)v4 + 1);
      if (v6)
      {
        unint64_t v7 = *(re::AudioFileGroupAsset **)(v6 + 264);
        this = (re::AudioFileGroupAsset *)re::AudioFileAsset::assetType(this);
        if (v7 == this)
        {
          ++*(_DWORD *)(*((void *)v4 + 1) + 260);
          this = (re::AudioFileGroupAsset *)re::AssetHandle::loadedAsset<re::AudioFileAsset>(v4);
          if (this) {
            re::AudioFileAsset::completeLoad(this, a2);
          }
        }
      }
      else
      {
        this = (re::AudioFileGroupAsset *)re::AudioFileAsset::assetType(this);
      }
      uint64_t v4 = (re::AudioFileAsset *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
}

void re::AudioFileGroupAssetLoader::~AudioFileGroupAssetLoader(re::AudioFileGroupAssetLoader *this)
{
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
}

{
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  JUMPOUT(0x237DBCBD0);
}

re *re::AudioFileGroupAssetLoader::unloadAsset(re *this, void *a2)
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    re::DynamicArray<re::AssetHandle>::deinit((uint64_t)a2 + 8);
    uint64_t v4 = *(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

uint64_t re::AudioFileGroupAssetLoader::isSupportedSourceExtension(re::AudioFileGroupAssetLoader *this, const char *a2)
{
  return 0;
}

uint64_t re::AudioFileGroupAssetLoader::introspectionType(re::AudioFileGroupAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7DFE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7DFE0))
  {
    qword_26AF7DFD8 = re::internal::getOrCreateInfo((re::internal *)"AudioFileGroupAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileGroupAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileGroupAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7DFD0, 0);
    __cxa_guard_release(&qword_26AF7DFE0);
  }
  return qword_26AF7DFD8;
}

void re::AudioFileGroupAssetLoader::unregisterAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 184);
      v4();
    }
    else
    {
      uint64_t v5 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a2 + 48);
        int v7 = 134217984;
        uint64_t v8 = v6;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileGroupAssetLoader] Cannot unregister asset %llu without a valid audio scene service.", (uint8_t *)&v7, 0xCu);
      }
    }
  }
}

uint64_t *re::RenderGraphAsset::assetType(re::RenderGraphAsset *this)
{
  {
    re::RenderGraphAsset::assetType(void)::type = (uint64_t)"RenderGraph";
    qword_26879E988 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RenderGraphAsset::assetType(void)::type);
  }
  return &re::RenderGraphAsset::assetType(void)::type;
}

char **re::RenderGraphAssetLoader::introspectionType(re::RenderGraphAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::RenderGraphAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RenderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[374];
}

re *re::RenderGraphAssetLoader::unloadAsset(re::RenderGraphAssetLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::RenderGraphAsset>((re *)"unloadAsset", 45, a2);
}

re *re::internal::destroyPersistent<re::RenderGraphAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::RenderGraphAssetLoader::registerAsset(re::RenderGraphAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((void *)a2 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = re::ServiceLocator::service<re::AssetService>(*((void *)this + 1));
  if (*((void *)a3 + 13)) {
    uint64_t v6 = (const char *)*((void *)a3 + 14);
  }
  else {
    uint64_t v6 = (char *)a3 + 105;
  }
  long long v11 = v6;
  size_t v12 = strlen(v6);
  re::DynamicString::operator=((re::DynamicString *)(a2 + 376), (uint64_t)&v11);
  if (a2[384]) {
    int v7 = (const char *)*((void *)a2 + 49);
  }
  else {
    int v7 = a2 + 385;
  }
  size_t v8 = strlen(v7);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)v7, v8, 0, (unint64_t *)&v11);
    unint64_t v9 = (v12 + ((void)v11 << 6) + ((unint64_t)v11 >> 2) - 0x61C8864680B583E9) ^ (unint64_t)v11;
  }
  else
  {
    unint64_t v9 = 0;
  }
  *((void *)a2 + 51) = v9;
  return re::AssetLoader::registerAsset(this, a2, a3);
}

BOOL re::RenderGraphAssetLoader::isSupportedSourceExtension(re::RenderGraphAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rerendergraph") || !strcasecmp(a2, "rendergraph") || strcasecmp(a2, "hmrendergraph") == 0;
}

uint64_t re::RenderGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re::RenderGraphFile *)(a2 + 8);
  if (*(void *)(a2 + 144) == *(_DWORD *)(a2 + 772))
  {
LABEL_5:
    re::RenderGraphFile::initConnectionSourceDataList((BOOL)v2);
    return 1;
  }
  uint64_t v4 = re::RenderGraphFile::calculateValidity((re::RenderGraphFile *)(a2 + 8), (uint64_t)v13);
  if (!v13[0])
  {
    int v7 = *re::assetTypesLogObjects((re *)v4);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    if (*(unsigned char *)(a2 + 24)) {
      uint64_t v8 = *(void *)(a2 + 32);
    }
    else {
      uint64_t v8 = a2 + 25;
    }
    if (v15) {
      char v10 = v17;
    }
    else {
      char v10 = v16;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)long long v19 = v8;
    *(_WORD *)&v19[8] = 2080;
    *(void *)&v19[10] = v10;
    long long v11 = "Failed to calculate validity of render graph asset %s: %s";
    goto LABEL_31;
  }
  re::RenderGraphFile::initRuntimeNodeSettings(v2, (uint64_t)buf);
  uint64_t v5 = (re *)re::Result<re::Unit,re::DynamicString>::operator=((uint64_t)v13, (uint64_t)buf);
  if (!buf[0])
  {
    uint64_t v5 = *(re **)&v19[4];
    if (*(void *)&v19[4])
    {
      if (v19[12]) {
        uint64_t v5 = (re *)(*(uint64_t (**)(void))(**(void **)&v19[4] + 40))();
      }
    }
  }
  if (v13[0]) {
    goto LABEL_5;
  }
  int v7 = *re::assetTypesLogObjects(v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (*(unsigned char *)(a2 + 24)) {
      uint64_t v9 = *(void *)(a2 + 32);
    }
    else {
      uint64_t v9 = a2 + 25;
    }
    if (v15) {
      size_t v12 = v17;
    }
    else {
      size_t v12 = v16;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)long long v19 = v9;
    *(_WORD *)&v19[8] = 2080;
    *(void *)&v19[10] = v12;
    long long v11 = "Failed to initialize runtime node settings for render graph asset %s: %s";
LABEL_31:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
  }
LABEL_13:
  if (!v13[0] && v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return 0;
}

uint64_t re::Result<re::Unit,re::DynamicString>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (!*(unsigned char *)a2)
    {
      *(_OWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 32);
      uint64_t v3 = *(void *)(a2 + 16);
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v3;
      *(void *)(a1 + 24) = v4;
      *(unsigned char *)a1 = 0;
      *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(a2 + 24) = v5;
    }
  }
  else if (*(unsigned char *)a2)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
    *(unsigned char *)a1 = 1;
  }
  else
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + 8), (re::DynamicString *)(a2 + 8));
  }
  return a1;
}

void *re::allocInfo_RenderGraphAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_105, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_105))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E078, "RenderGraphAsset");
    __cxa_guard_release(&_MergedGlobals_105);
  }
  return &unk_26AF7E078;
}

void re::initInfo_RenderGraphAsset(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xD47C10C081B17130;
  v9[1] = "RenderGraphAsset";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E070, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E070);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphFile((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "provider";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E068 = v7;
      __cxa_guard_release(&qword_26AF7E070);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x36800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E068;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::RenderGraphAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphAsset *re::internal::defaultConstruct<re::RenderGraphAsset>(int a1, int a2, re::RenderGraphAsset *this)
{
  return re::RenderGraphAsset::RenderGraphAsset(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAsset>, this);
}

void re::RenderGraphAssetLoader::~RenderGraphAssetLoader(re::RenderGraphAssetLoader *this)
{
}

uint64_t re::RenderGraphAssetLoader::deferUnregister(re::RenderGraphAssetLoader *this, void *a2)
{
  return 1;
}

re::RenderGraphAsset *re::RenderGraphAsset::RenderGraphAsset(re::RenderGraphAsset *this)
{
  *(void *)this = &unk_26E6D99C0;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_26E6D52C8;
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *((void *)this + 1) = &unk_26E6D4A70;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)((char *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0u;
  *((_DWORD *)this + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 5re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = 0u;
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 6re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 7re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)v2 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  re::DynamicString::setCapacity((void *)v2 + 46, 0);
  *(_OWORD *)(v2 + 42re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v2 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0u;
  *((_OWORD *)v2 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)((char *)this + 45re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 0;
  *(void *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *((_OWORD *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_DWORD *)this + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)((char *)this + 54re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0u;
  *((_OWORD *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 14re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)((char *)this + 59re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 160) = 0;
  *((_OWORD *)this + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(void *)((char *)this + 644) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 4re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *((_DWORD *)this + 17re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)((char *)this + 69re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7FFFFFFFLL;
  *((void *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 1;
  *((_OWORD *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0u;
  *((_OWORD *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 764) = 0u;
  *(void *)((char *)this + 780) = 0x7FFFFFFFLL;
  *((void *)this + 101) = 0;
  *((_DWORD *)this + 204) = 0;
  *((_OWORD *)v2 + 49) = 0u;
  *((void *)this + 10re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 214) = 0;
  *((_OWORD *)v2 + 51) = 0u;
  *((_OWORD *)v2 + 5re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  return this;
}

void re::RenderGraphAsset::~RenderGraphAsset(re::RenderGraphAsset *this)
{
  *(void *)this = &unk_26E6D99C0;
  re::RenderGraphFile::~RenderGraphFile((re::RenderGraphAsset *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D99C0;
  re::RenderGraphFile::~RenderGraphFile((re::RenderGraphAsset *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationLibraryAsset::assetType(re::AnimationLibraryAsset *this)
{
  {
    re::AnimationLibraryAsset::assetType(void)::type = (uint64_t)"AnimationLibraryAsset";
    qword_26879E9A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AnimationLibraryAsset::assetType(void)::type);
  }
  return &re::AnimationLibraryAsset::assetType(void)::type;
}

uint64_t re::AnimationLibraryAsset::buildAsset(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v2 = *((void *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    while (1)
    {
      *(void *)&v20.char var0 = 0;
      v20.var1 = "";
      memset(v21, 0, sizeof(v21));
      if (v2 <= v6) {
        break;
      }
      uint64_t v8 = *((void *)a1 + 4) + v5;
      if (*(unsigned char *)(v8 + 8)) {
        uint64_t v9 = *(const char **)(v8 + 16);
      }
      else {
        uint64_t v9 = (const char *)(v8 + 9);
      }
      *(void *)uint64_t v23 = 0;
      *(void *)&v23[8] = "";
      uint64_t v10 = *(void *)v23;
      long long v11 = *(char **)&v23[8];
      *(void *)uint64_t v23 = 0;
      *(void *)&v23[8] = "";
      char var0 = (char)v20.var0;
      var1 = v20.var1;
      *(void *)&v20.char var0 = v10;
      v20.var1 = v11;
      *(void *)&long long v28 = v10 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *((void *)&v28 + 1) = var1;
      re::StringID::destroyString((re::StringID *)&v28);
      re::StringID::destroyString((re::StringID *)v23);
      unint64_t v2 = *(void *)(a2 + 16);
      if (v2 <= v6) {
        goto LABEL_18;
      }
      uint64_t v15 = *(void *)(a2 + 32) + v5;
      if (*(unsigned char *)(v15 + 8)) {
        unint64_t v16 = *(re::AssetPath **)(v15 + 16);
      }
      else {
        unint64_t v16 = (re::AssetPath *)(v15 + 9);
      }
      if (!v7)
      {
        uint64_t v18 = re::globalAllocators(v17);
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 224, 8);
        *(_OWORD *)(v7 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v7 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
        *(_OWORD *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
        *(_OWORD *)(v7 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_DWORD *)(v7 + 19re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
        *(void *)(v7 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(void *)(v7 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
        re::AnimationLibraryAsset::init((re::AnimationLibraryAsset *)v7, 0);
      }
      re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v7 + 40), &v20);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
      re::StringID::destroyString((re::StringID *)&v20);
      ++v6;
      unint64_t v2 = *((void *)a1 + 2);
      v5 += 32;
      if (v6 >= v2) {
        return v7;
      }
    }
    uint64_t v22 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&void v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 797;
    __int16 v24 = 2048;
    unint64_t v25 = v6;
    __int16 v26 = 2048;
    unint64_t v27 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    uint64_t v22 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&void v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 797;
    __int16 v24 = 2048;
    unint64_t v25 = v6;
    __int16 v26 = 2048;
    unint64_t v27 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0;
}

void re::AnimationLibraryAsset::init(re::AnimationLibraryAsset *this, re::Allocator *a2)
{
  unint64_t v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(void *)this = v2;
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v2;
  re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)this + 5, 0);
  *((void *)this + re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = v2;
  uint64_t v4 = (char *)this + 120;
  ++*((_DWORD *)v4 - 14);
  re::DynamicArray<re::AssetHandle>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v4 + 40), (uint64_t)v2, 3);
}

re::AssetHandle *re::DynamicArray<re::NamedAnimationLibraryEntry>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = re::StringID::StringID((re::StringID *)(*((void *)this + 4) + 40 * v4), a2);
  uint64_t result = re::AssetHandle::AssetHandle((re::StringID *)((char *)v5 + 16), (const re::AssetHandle *)&a2[1]);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 120 * v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16);
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 24) = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(v5 + 40) = *(void *)(v5 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(void *)(v5 + 40) = *(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(void *)(v5 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(v5 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(v5 + 56) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(void *)(v5 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(void *)(v5 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 64) = "";
  *(void *)(v5 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v5 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v10 = *(void *)(v5 + 72);
  *(void *)(v5 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(v5 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 72);
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  uint64_t v11 = *(void *)(v5 + 88);
  *(void *)(v5 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v11;
  *(void *)(v5 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(v5 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v12 = *(void *)(v5 + 96);
  *(void *)(v5 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v5 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 96);
  *(void *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
  uint64_t v13 = *(void *)(v5 + 112);
  *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a2 + 112);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v13;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::AnimationLibraryAsset::buildAsset(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v42 = a4;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = (char *)&v51 + 8;
  long long v50 = a1;
  uint64_t v9 = (re::DynamicString *)((char *)&v55 + 8);
  do
  {
    uint64_t v40 = a1[2];
    if (v40)
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = (char *)a1[2];
        if ((unint64_t)v11 <= v10) {
          goto LABEL_41;
        }
        unint64_t v41 = v10;
        uint64_t v12 = (uint64_t *)(a1[4] + (v10 << 9));
        uint64_t v13 = v12 + 21;
        uint64_t v14 = v12[21];
        if (v14)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          int v17 = v12 + 23;
          long long v48 = v12 + 28;
          long long v49 = (char **)(v12 + 26);
          uint64_t v18 = 72;
          unint64_t v46 = v12 + 21;
          long long v47 = (uint64_t *)(a1[4] + (v10 << 9));
          unint64_t v44 = v12 + 23;
          uint64_t v45 = v12[21];
          while (1)
          {
            unint64_t v19 = *v13;
            if (*v13 <= (unint64_t)v16) {
              break;
            }
            unint64_t v19 = *(void *)(a4 + 16);
            if (v19 <= v7) {
              goto LABEL_36;
            }
            uint64_t v11 = (char *)*(unsigned int *)(*v17 + v15);
            if (*(char **)(*(void *)(a4 + 32) + 8 * v7) == v11 && a1[12] > (unint64_t)v11)
            {
              uint64_t v21 = a2;
              *((void *)&v51 + 1) = 0;
              *(void *)&long long v52 = "";
              *((void *)&v52 + 1) = 0;
              *(void *)&long long v53 = "";
              *((void *)&v53 + 1) = 0;
              *(void *)&long long v54 = "";
              *((void *)&v54 + 1) = 0;
              *(void *)&long long v55 = "";
              *(_OWORD *)uint64_t v9 = 0u;
              *((_OWORD *)v9 + 1) = 0u;
              uint64_t v22 = v9;
              *((_OWORD *)v9 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
              LOBYTE(v51) = 2;
              re::StringID::operator=((unint64_t *)&v51 + 1, v12);
              uint64_t v8 = *v49;
              if (*v49 <= v16) {
                goto LABEL_37;
              }
              uint64_t v23 = re::StringID::operator=((unint64_t *)&v52 + 1, (uint64_t *)(*v48 + v18));
              uint64_t v8 = *(char **)(v21 + 16);
              unint64_t v24 = v7;
              if ((unint64_t)v8 <= v7) {
                goto LABEL_38;
              }
              uint64_t v25 = *(void *)(v21 + 32) + 32 * v7;
              if (*(unsigned char *)(v25 + 8)) {
                __int16 v26 = *(const char **)(v25 + 16);
              }
              else {
                __int16 v26 = (const char *)(v25 + 9);
              }
              *(void *)int v57 = 0;
              *(void *)&v57[8] = "";
              uint64_t v27 = *(void *)v57;
              uint64_t v28 = *(void *)&v57[8];
              *(void *)int v57 = 0;
              *(void *)&v57[8] = "";
              char v29 = BYTE8(v54);
              uint64_t v30 = v55;
              *((void *)&v54 + 1) = v27;
              *(void *)&long long v55 = v28;
              v62[0] = v27 & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
              v62[1] = v30;
              re::StringID::destroyString((re::StringID *)v62);
              re::StringID::destroyString((re::StringID *)v57);
              uint64_t v8 = (char *)v50[12];
              if (v8 <= v11) {
                goto LABEL_39;
              }
              long long v31 = re::StringID::operator=((unint64_t *)&v53 + 1, (uint64_t *)(v50[14] + 112 * v11));
              uint64_t v11 = *(char **)(a5 + 16);
              unint64_t v32 = v7;
              if ((unint64_t)v11 <= v7) {
                goto LABEL_40;
              }
              uint64_t v33 = *(void *)(a5 + 32) + 32 * v7;
              if (*(unsigned char *)(v33 + 8)) {
                unint64_t v34 = *(re::AssetPath **)(v33 + 16);
              }
              else {
                unint64_t v34 = (re::AssetPath *)(v33 + 9);
              }
              uint64_t v12 = v47;
              if (!v6)
              {
                unint64_t v36 = re::globalAllocators(v35);
                uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36[2] + 32))(v36[2], 224, 8);
                *(_OWORD *)(v6 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
                *(_OWORD *)(v6 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
                *(_OWORD *)uint64_t v6 = 0u;
                *(_OWORD *)(v6 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
                *(_OWORD *)(v6 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
                *(_OWORD *)(v6 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
                *(_OWORD *)(v6 + 64) = 0u;
                *(_OWORD *)(v6 + 80) = 0u;
                *(_OWORD *)(v6 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
                *(_OWORD *)(v6 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
                *(_OWORD *)(v6 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
                *(_OWORD *)(v6 + 144) = 0u;
                *(_OWORD *)(v6 + 160) = 0u;
                *(_DWORD *)(v6 + 19re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
                *(void *)(v6 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
                *(void *)(v6 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
                re::AnimationLibraryAsset::init((re::AnimationLibraryAsset *)v6, 0);
              }
              re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add((void *)v6, (uint64_t)&v51);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v56);
              re::AssetHandle::~AssetHandle(v22);
              re::StringID::destroyString((re::StringID *)((char *)&v54 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v53 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v52 + 8));
              uint64_t v8 = (char *)&v51 + 8;
              re::StringID::destroyString((re::StringID *)((char *)&v51 + 8));
              a2 = v21;
              a4 = v42;
              a1 = v50;
              uint64_t v9 = v22;
              uint64_t v14 = v45;
              uint64_t v13 = v46;
              int v17 = v44;
            }
            ++v16;
            v18 += 256;
            v15 += 144;
            if ((char *)v14 == v16) {
              goto LABEL_29;
            }
          }
          *(void *)int v57 = 0;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v51 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(void *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(void *)((char *)&v62[2] + 4) = v16;
          WORD2(v62[3]) = 2048;
          *(void *)((char *)&v62[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_36:
          *(void *)int v57 = 0;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v51 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(void *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(void *)((char *)&v62[2] + 4) = v7;
          WORD2(v62[3]) = 2048;
          *(void *)((char *)&v62[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_37:
          long long v63 = 0u;
          long long v64 = 0u;
          memset(v62, 0, sizeof(v62));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v57 = 136315906;
          *(void *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          __int16 v58 = 2048;
          int v59 = v16;
          __int16 v60 = 2048;
          uint64_t v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          uint64_t v11 = v57;
          long long v63 = 0u;
          long long v64 = 0u;
          memset(v62, 0, sizeof(v62));
          uint64_t v38 = (char *)v24;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v57 = 136315906;
          *(void *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          __int16 v58 = 2048;
          int v59 = v38;
          __int16 v60 = 2048;
          uint64_t v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_39:
          long long v63 = 0u;
          long long v64 = 0u;
          memset(v62, 0, sizeof(v62));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v57 = 136315906;
          *(void *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          __int16 v58 = 2048;
          int v59 = v11;
          __int16 v60 = 2048;
          uint64_t v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_40:
          long long v63 = 0u;
          long long v64 = 0u;
          memset(v62, 0, sizeof(v62));
          unint64_t v10 = &_os_log_internal;
          uint64_t v39 = (char *)v32;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v57 = 136315906;
          *(void *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          __int16 v58 = 2048;
          int v59 = v39;
          __int16 v60 = 2048;
          uint64_t v61 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(void *)int v57 = 0;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v51 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(void *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(void *)((char *)&v62[2] + 4) = v10;
          WORD2(v62[3]) = 2048;
          *(void *)((char *)&v62[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_29:
        unint64_t v10 = v41 + 1;
      }
      while (v41 + 1 != v40);
      unint64_t v5 = *(void *)(a2 + 16);
    }
    ++v7;
  }
  while (v7 < v5);
  return v6;
}

uint64_t re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 120 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 96));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 72));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 56));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 40));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 24));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 8));
          v5 += 120;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::AnimationLibraryAsset::insertEntry(uint64_t a1, re::AssetHandle *a2, unint64_t a3)
{
  if (*(void *)(a1 + 136) <= a3)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "entryIndex < animationLibraryEntries.size()", "insertEntry", 213);
    _os_crash();
    __break(1u);
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::insert((_anonymous_namespace_ *)(a1 + 120), a3, a2);
    int v19 = 0;
    memset(v18, 0, sizeof(v18));
    uint64_t v20 = 0x7FFFFFFFLL;
    uint64_t v5 = *(unsigned int *)(a1 + 192);
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = *(int **)(a1 + 176);
      while (1)
      {
        int v8 = *v7;
        v7 += 8;
        if (v8 < 0) {
          break;
        }
        if (v5 == ++v6)
        {
          LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a1 + 192);
          break;
        }
      }
    }
    else
    {
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    }
    if (v5 != v6)
    {
      uint64_t v9 = v6;
      do
      {
        uint64_t v10 = *(void *)(a1 + 176) + 32 * v9;
        unint64_t v13 = *(void *)(v10 + 24);
        uint64_t v11 = (void *)(v10 + 24);
        unint64_t v12 = v13;
        uint64_t v14 = (StringID *)(v11 - 2);
        if (v13 >= a3)
        {
          unint64_t v17 = v12 + 1;
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v18, v14, &v17);
        }
        else
        {
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v18, v14, v11);
        }
        if (*(_DWORD *)(a1 + 192) <= (v6 + 1)) {
          int v15 = v6 + 1;
        }
        else {
          int v15 = *(_DWORD *)(a1 + 192);
        }
        while (1)
        {
          uint64_t v9 = (v6 + 1);
          if (v15 - 1 == v6) {
            break;
          }
          LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6 + 1;
          int v16 = v9;
          if ((*(_DWORD *)(*(void *)(a1 + 176) + 32 * v9) & 0x80000000) != 0) {
            goto LABEL_20;
          }
        }
        int v16 = v15;
LABEL_20:
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
      }
      while (v5 != v16);
    }
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(a1 + 160, (uint64_t)v18);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v18);
  }
}

uint64_t re::DynamicArray<re::AssetHandle>::insert(_anonymous_namespace_ *this, unint64_t a2, re::AssetHandle *a3)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AssetHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v7 = *((void *)this + 4);
  int v8 = (re::AssetHandle *)(v7 + 24 * v4);
  if (v4 <= a2)
  {
    uint64_t result = (uint64_t)re::AssetHandle::AssetHandle(v8, a3);
  }
  else
  {
    uint64_t v9 = v7 + 24 * v4;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    uint64_t v10 = *(void *)(v9 - 16);
    *(void *)int v8 = *(void *)(v9 - 24);
    *(void *)(v9 - 24) = 0;
    *(void *)(v9 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 - 8);
    *(void *)(v9 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v10;
    *(void *)(v9 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
    *(void *)(v9 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v11;
    uint64_t v13 = 3 * a2;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>((void *)(*((void *)this + 4) + 8 * v13), (void *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24), (void *)(*((void *)this + 4) + 24 * *((void *)this + 2)));
    uint64_t result = re::AssetHandle::operator=(*((void *)this + 4) + 8 * v13, (uint64_t *)a3);
  }
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

double re::AnimationLibraryAsset::removeEntry(re::AnimationLibraryAsset *this, unint64_t a2)
{
  int v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v24 = 0x7FFFFFFFLL;
  uint64_t v4 = (char *)this + 160;
  uint64_t v5 = *((unsigned int *)this + 48);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int *)*((void *)this + 22);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((_DWORD *)this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  }
  if (v5 != v6)
  {
    uint64_t v9 = v6;
    do
    {
      uint64_t v10 = *((void *)this + 22) + 32 * v9;
      unint64_t v13 = *(void *)(v10 + 24);
      uint64_t v11 = (void *)(v10 + 24);
      unint64_t v12 = v13;
      uint64_t v14 = (StringID *)(v11 - 2);
      BOOL v15 = v13 > a2;
      if (v13 >= a2)
      {
        if (v15)
        {
          v25[0] = v12 - 1;
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v22, v14, v25);
        }
      }
      else
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v22, v14, v11);
      }
      if (*((_DWORD *)this + 48) <= (v6 + 1)) {
        int v16 = v6 + 1;
      }
      else {
        int v16 = *((_DWORD *)this + 48);
      }
      while (1)
      {
        uint64_t v9 = (v6 + 1);
        if (v16 - 1 == v6) {
          break;
        }
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6 + 1;
        int v17 = v9;
        if ((*(_DWORD *)(*((void *)this + 22) + 32 * v9) & 0x80000000) != 0) {
          goto LABEL_21;
        }
      }
      int v17 = v16;
LABEL_21:
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
    }
    while (v5 != v17);
  }
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)v4, (uint64_t)v22);
  re::DynamicArray<re::AssetHandle>::removeStableAt((uint64_t)this + 120, a2);
  if ((*((void *)this + 26) > 1uLL || (uint64_t v18 = (unsigned char *)*((void *)this + 27)) == 0 || *v18)
    && !re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, (void *)this + 26))
  {
    v21[0] = 0;
    v21[1] = "";
    uint64_t v19 = *((void *)this + 27);
    v25[0] = *((void *)this + 26) & 1;
    v25[1] = v19;
    *((void *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *((void *)this + 27) = "";
    re::StringID::destroyString((re::StringID *)v25);
    re::StringID::destroyString((re::StringID *)v21);
  }
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v22);
}

void re::DynamicArray<re::AssetHandle>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>((uint64_t *)(*(void *)(a1 + 32) + 24 * a2 + 24), (uint64_t *)(*(void *)(a1 + 32) + 24 * v2), (uint64_t *)(*(void *)(a1 + 32) + 24 * a2));
    unint64_t v2 = *(void *)(a1 + 16);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(void *)(a1 + 32) + 24 * v2 - 24));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::AnimationLibraryAsset::setEntry(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned int *)(a1 + 192);
  if (v6)
  {
    uint64_t v7 = 0;
    int v8 = *(int **)(a1 + 176);
    while (1)
    {
      int v9 = *v8;
      v8 += 8;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 192);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    do
    {
      uint64_t v11 = *(void *)(v5 + 176);
      if (*(void *)(v11 + 32 * v10 + 24) == a2)
      {
        unint64_t v12 = *re::animationLogObjects((re *)a1);
        a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          uint64_t v13 = *(void *)(v11 + 32 * v10 + 16);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Animation library asset - entry has an associated key. Changing they asset associated with key %s", buf, 0xCu);
        }
      }
      unsigned int v14 = *(_DWORD *)(v5 + 192);
      if (v14 <= (int)v7 + 1) {
        unsigned int v14 = v7 + 1;
      }
      while (1)
      {
        uint64_t v10 = (v7 + 1);
        if (v14 - 1 == v7) {
          break;
        }
        LODWORD(v7) = v7 + 1;
        unsigned int v15 = v10;
        if ((*(_DWORD *)(*(void *)(v5 + 176) + 32 * v10) & 0x80000000) != 0) {
          goto LABEL_18;
        }
      }
      unsigned int v15 = v14;
LABEL_18:
      LODWORD(v7) = v15;
    }
    while (v6 != v15);
  }
  if (*(void *)(v5 + 136) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::AssetHandle::operator=(*(void *)(v5 + 152) + 24 * a2, a3);
}

re *re::AnimationLibraryAssetLoader::unloadAsset(re::AnimationLibraryAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::AnimationLibraryAsset>((re *)"unloadAsset", 259, a2);
}

re *re::internal::destroyPersistent<re::AnimationLibraryAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(a3 + 208));
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 160));
    re::DynamicArray<re::AssetHandle>::deinit(a3 + 120);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 80);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 40);
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::AnimationLibraryAssetLoader::isSupportedSourceExtension(re::AnimationLibraryAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reanimationlibrary") == 0;
}

char **re::AnimationLibraryAssetLoader::introspectionType(re::AnimationLibraryAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::AnimationLibraryAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AnimationLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationLibraryAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[376];
}

void *re::allocInfo_TransformAnimationLibraryEntry(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E0F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E0F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E2B0, "TransformAnimationLibraryEntry");
    __cxa_guard_release(&qword_26AF7E0F8);
  }
  return &unk_26AF7E2B0;
}

void re::initInfo_TransformAnimationLibraryEntry(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x72E8C42152E0C5ELL;
  v14[1] = "TransformAnimationLibraryEntry";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E100, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E100);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationName";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7E168 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationHandle";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7E170 = v12;
      __cxa_guard_release(&qword_26AF7E100);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E168;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TransformAnimationLibraryEntry>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TransformAnimationLibraryEntry>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::TransformAnimationLibraryEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TransformAnimationLibraryEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::TransformAnimationLibraryEntry>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::TransformAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::TransformAnimationLibraryEntry>(void *result)
{
  re::AssetHandle *result = 0;
  result[1] = "";
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TransformAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_SkeletalAnimationLibraryEntry(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E110))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E328, "SkeletalAnimationLibraryEntry");
    __cxa_guard_release(&qword_26AF7E110);
  }
  return &unk_26AF7E328;
}

void re::initInfo_SkeletalAnimationLibraryEntry(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x893CCA30395019C4;
  v21[1] = "SkeletalAnimationLibraryEntry";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E118, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E118);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "meshIdentifier";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E190 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "skeletonName";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7E198 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unsigned int v14 = re::IntrospectionInfo<re::StringID>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationName";
      *(void *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7E1A0 = v15;
      int v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationHandle";
      *(void *)(v19 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7E1A8 = v19;
      __cxa_guard_release(&qword_26AF7E118);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E190;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalAnimationLibraryEntry>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalAnimationLibraryEntry>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::SkeletalAnimationLibraryEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalAnimationLibraryEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

double re::internal::defaultConstruct<re::SkeletalAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 64) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::StringID::destroyString((re::StringID *)(a3 + 56));
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

double re::internal::defaultConstructV2<re::SkeletalAnimationLibraryEntry>(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 64) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::StringID::destroyString((re::StringID *)(a1 + 56));
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void *re::allocInfo_NamedAnimationLibraryEntry(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E128, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E128))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E3A0, "NamedAnimationLibraryEntry");
    __cxa_guard_release(&qword_26AF7E128);
  }
  return &unk_26AF7E3A0;
}

void re::initInfo_NamedAnimationLibraryEntry(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x618480047777F904;
  v19[1] = "NamedAnimationLibraryEntry";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E130, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E130);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationName";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7E178 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationHandle";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7E180 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      unsigned int v14 = v13;
      uint64_t v15 = (re *)qword_26AF7E108;
      if (!qword_26AF7E108)
      {
        uint64_t v15 = (re *)re::allocInfo_TransformAnimationLibraryEntry(v13);
        qword_26AF7E108 = (uint64_t)v15;
        re::initInfo_TransformAnimationLibraryEntry(v15, v16);
      }
      uint64_t v17 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 64, 8);
      *(_DWORD *)uint64_t v17 = 6;
      *(void *)(v17 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = re::TransformEntryUpgrade;
      *(unsigned char *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(_DWORD *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      qword_26AF7E188 = v17;
      __cxa_guard_release(&qword_26AF7E130);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E178;
  *((void *)this + 9) = re::internal::defaultConstruct<re::NamedAnimationLibraryEntry>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::NamedAnimationLibraryEntry>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::NamedAnimationLibraryEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::NamedAnimationLibraryEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

uint64_t re::TransformEntryUpgrade(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = re::StringID::operator=(a3, a2);
  re::AssetHandle::operator=((uint64_t)(v4 + 2), a2 + 2);
  return 1;
}

void re::internal::defaultConstruct<re::NamedAnimationLibraryEntry>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::NamedAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::NamedAnimationLibraryEntry>(void *result)
{
  re::AssetHandle *result = 0;
  result[1] = "";
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::NamedAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_AnimationLibraryAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E140))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E418, "AnimationLibraryAsset");
    __cxa_guard_release(&qword_26AF7E140);
  }
  return &unk_26AF7E418;
}

void re::initInfo_AnimationLibraryAsset(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0x72B9F762ED1258F2;
  v23[1] = "AnimationLibraryAsset";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E148, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E148);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalAnimationLibraryEntry>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "skeletalAnimationLibrary";
      *(void *)(v6 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E1E0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v6 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7E1B0 = v6;
      uint64_t v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "transformAnimationLibrary";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E220;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7E1B8 = v8;
      int v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationSceneLibrary";
      *(void *)(v10 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E220;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5000000003;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7E1C0 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "animationLibraryEntries";
      *(void *)(v14 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7800000004;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v14 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7E1C8 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v15, v16);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "entryKeyMap";
      *(void *)(v17 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E260;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xA000000005;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v17 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF7E1D0 = v17;
      long long v18 = re::introspectionAllocator((re *)v17);
      long long v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "defaultEntryKey";
      *(void *)(v21 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xD000000006;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v21 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF7E1D8 = v21;
      __cxa_guard_release(&qword_26AF7E148);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xE000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E1B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AnimationLibraryAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AnimationLibraryAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AnimationLibraryAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AnimationLibraryAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalAnimationLibraryEntry>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E150, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7E150);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7E1E0);
      qword_26AF7E1E0 = (uint64_t)&unk_26E6D9B48;
      __cxa_guard_release(&qword_26AF7E150);
    }
  }
  if ((_MergedGlobals_106 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7E120;
    if (qword_26AF7E120
      || (uint64_t v1 = re::allocInfo_SkeletalAnimationLibraryEntry(a1),
          qword_26AF7E120 = (uint64_t)v1,
          re::initInfo_SkeletalAnimationLibraryEntry((re *)v1, v2),
          (_MergedGlobals_106 & 1) == 0))
    {
      _MergedGlobals_106 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7E1E0, 0);
      qword_26AF7E1F0 = 0x2800000003;
      dword_26AF7E1F8 = v3;
      word_26AF7E1FC = 0;
      *(void *)&xmmword_26AF7E200 = 0;
      *((void *)&xmmword_26AF7E200 + 1) = 0xFFFFFFFFLL;
      qword_26AF7E210 = (uint64_t)v1;
      unk_26AF7E218 = 0;
      qword_26AF7E1E0 = (uint64_t)&unk_26E6D9B48;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7E1E0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7E200 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E158, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7E158);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7E220);
      qword_26AF7E220 = (uint64_t)&unk_26E6D9BE0;
      __cxa_guard_release(&qword_26AF7E158);
    }
  }
  if ((byte_26AF7E0F1 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7E138;
    if (qword_26AF7E138
      || (uint64_t v1 = re::allocInfo_NamedAnimationLibraryEntry(a1),
          qword_26AF7E138 = (uint64_t)v1,
          re::initInfo_NamedAnimationLibraryEntry((re *)v1, v2),
          (byte_26AF7E0F1 & 1) == 0))
    {
      byte_26AF7E0F1 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7E220, 0);
      qword_26AF7E230 = 0x2800000003;
      dword_26AF7E238 = v3;
      word_26AF7E23C = 0;
      *(void *)&xmmword_26AF7E240 = 0;
      *((void *)&xmmword_26AF7E240 + 1) = 0xFFFFFFFFLL;
      qword_26AF7E250 = (uint64_t)v1;
      unk_26AF7E258 = 0;
      qword_26AF7E220 = (uint64_t)&unk_26E6D9BE0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7E220, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7E240 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E160))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF7E260);
    qword_26AF7E260 = (uint64_t)&unk_26E6D9C78;
    __cxa_guard_release(&qword_26AF7E160);
  }
  if ((byte_26AF7E0F2 & 1) == 0)
  {
    unint64_t v2 = re::IntrospectionInfo<re::StringID>::get(1, a2);
    uint64_t v4 = re::introspect_size_t((re *)1, v3);
    if ((byte_26AF7E0F2 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      byte_26AF7E0F2 = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7E260, 0);
      qword_26AF7E270 = 0x3000000007;
      dword_26AF7E278 = v6;
      word_26AF7E27C = 0;
      *(void *)&xmmword_26AF7E280 = 0;
      *((void *)&xmmword_26AF7E280 + 1) = 0xFFFFFFFFLL;
      qword_26AF7E290 = (uint64_t)v2;
      unk_26AF7E298 = 0;
      qword_26AF7E2A0 = v5;
      unk_26AF7E2A8 = 0;
      qword_26AF7E260 = (uint64_t)&unk_26E6D9C78;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF7E260, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        __int16 v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.char var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          char v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (int v16 = *v31,
              uint64_t v25 = v14,
              __int16 v26 = v16,
              LODWORD(v27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF7E280 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::AnimationLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a3 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 180) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 19re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(void *)(a3 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  return result;
}

uint64_t re::internal::defaultDestruct<re::AnimationLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 208));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 160));
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 120);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 80);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 40);
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a3);
}

double re::internal::defaultConstructV2<re::AnimationLibraryAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 19re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(void *)(a1 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AnimationLibraryAsset>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 208));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 160));
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 120);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1 + 80);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1 + 40);
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a1);
}

uint64_t re::introspect_AnimationLibraryAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationLibraryAsset>, this);
}

void re::AnimationLibraryAssetLoader::~AnimationLibraryAssetLoader(re::AnimationLibraryAssetLoader *this)
{
}

void *re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = (void *)(v8 + 40 * v9);
        long long v11 = (re::AssetHandle *)(v8 + 16);
        uint64_t v12 = v7;
        do
        {
          char v13 = *((void *)v11 - 2);
          unint64_t *v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *((void *)v11 - 2) & 1;
          unint64_t *v12 = *((void *)v11 - 2) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *((void *)v11 - 1);
          *((void *)v11 - 1) = "";
          *((void *)v11 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
          uint64_t v12[2] = 0;
          v12[3] = 0;
          v12[4] = 0;
          v12[3] = *((void *)v11 + 1);
          *((void *)v11 + 1) = 0;
          unint64_t v14 = v12[2];
          uint64_t v12[2] = 0;
          uint64_t v12[2] = *(void *)v11;
          *(void *)long long v11 = v14;
          unint64_t v15 = v12[4];
          v12[4] = *((void *)v11 + 2);
          *((void *)v11 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
          re::AssetHandle::~AssetHandle(v11);
          re::StringID::destroyString((re::AssetHandle *)((char *)v11 - 16));
          int v16 = (void *)((char *)v11 + 24);
          long long v11 = (re::AssetHandle *)((char *)v11 + 40);
          v12 += 5;
        }
        while (v16 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x78uLL))
        {
          uint64_t v2 = 120 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            uint64_t v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SkeletalAnimationLibraryEntry>((void *)v5[4], (void *)(v5[4] + 120 * v5[2]), v7);
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        double result = (void *)re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::SkeletalAnimationLibraryEntry>(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 12;
    do
    {
      *(unsigned char *)a3 = *((unsigned char *)v5 - 96);
      char v6 = *(v5 - 11);
      *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 11) & 1;
      *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(v5 - 11) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(v5 - 10);
      *(v5 - 10) = "";
      *(v5 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
      char v7 = *(v5 - 9);
      *(void *)(a3 + 24) = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 9) & 1;
      *(void *)(a3 + 24) = *(v5 - 9) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
      *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(v5 - 8);
      *(v5 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
      *(v5 - 9) = 0;
      char v8 = *(v5 - 7);
      *(void *)(a3 + 40) = *(void *)(a3 + 40) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 7) & 1;
      *(void *)(a3 + 40) = *(v5 - 7) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(v5 - 6);
      *(v5 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
      *(v5 - 7) = 0;
      char v9 = *(v5 - 5);
      *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 56) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 5) & 1;
      *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(v5 - 5) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
      *(void *)(a3 + 64) = *(v5 - 4);
      *(v5 - 4) = "";
      *(v5 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = 0;
      *(void *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(a3 + 80) = *(v5 - 2);
      *(v5 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      uint64_t v10 = *(void *)(a3 + 72);
      *(void *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      *(void *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(v5 - 3);
      *(v5 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v10;
      uint64_t v11 = *(void *)(a3 + 88);
      *(void *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(v5 - 1);
      *(v5 - 1) = v11;
      *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
      *(void *)(a3 + 104) = v5[1];
      v5[1] = 0;
      uint64_t v12 = *(void *)(a3 + 96);
      *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *v5;
      *uint64_t v5 = v12;
      uint64_t v13 = *(void *)(a3 + 112);
      *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v5[2];
      void v5[2] = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v5 - 3));
      re::StringID::destroyString((re::StringID *)(v5 - 5));
      re::StringID::destroyString((re::StringID *)(v5 - 7));
      re::StringID::destroyString((re::StringID *)(v5 - 9));
      re::StringID::destroyString((re::StringID *)(v5 - 11));
      unint64_t v14 = v5 + 3;
      v5 += 15;
      a3 += 120;
    }
    while (v14 != a2);
  }
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(void *a1, void *a2, void *a3)
{
  if (a2 != a1)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v4 = *(a3 - 2);
      *(a3 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(v3 - 2);
      *(v3 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v4;
      uint64_t v6 = *(a3 - 3);
      a3 -= 3;
      uint64_t v5 = v6;
      *a3 = 0;
      uint64_t v7 = *(v3 - 3);
      v3 -= 3;
      *a3 = v7;
      *uint64_t v3 = v5;
      uint64_t v8 = a3[2];
      a3[2] = v3[2];
      v3[2] = v8;
    }
    while (v3 != a1);
  }
  return a2;
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (void *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    do
    {
      uint64_t v3 = a3[1];
      a3[1] = result[1];
      result[1] = v3;
      uint64_t v4 = *a3;
      *a3 = 0;
      *a3 = *result;
      re::AssetHandle *result = v4;
      uint64_t v5 = a3[2];
      a3[2] = result[2];
      result[2] = v5;
      result += 3;
      a3 += 3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  v11[0] = 0;
  v11[1] = "";
  v12[0] = 0;
  v12[1] = "";
  v13[0] = 0;
  v13[1] = "";
  v14[0] = 0;
  v14[1] = "";
  memset(v15, 0, sizeof(v15));
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add(this, (uint64_t)&v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v15[1] + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 120 * *((void *)this + 2) - 120);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 120 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 120 * a3;
}

void re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 120 * a2 + 56;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 40));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      re::StringID::destroyString((re::StringID *)(v10 - 16));
      re::StringID::destroyString((re::StringID *)(v10 - 32));
      re::StringID::destroyString((re::StringID *)(v10 - 48));
      ++v9;
      v8 += 120;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 120 * v4 + 72;
      do
      {
        uint64_t v7 = (_OWORD *)(*(void *)(a1 + 32) + v6);
        *((unsigned char *)v7 - 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
        *((void *)v7 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *((void *)v7 - 7) = "";
        *((void *)v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *((void *)v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = "";
        *((void *)v7 - 4) = 0;
        *((void *)v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = "";
        *((void *)v7 - re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
        *((void *)v7 - 1) = "";
        *uint64_t v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 120;
        v7[2] = 0uLL;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 120 * v8;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + v9 + 96));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + v9 + 72));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 56));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 40));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 24));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 8));
        v9 += 120;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      unint64_t v14 = *(char **)(a1 + 32);
      uint64_t v15 = 120 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 120;
        v15 -= 120;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 120 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 120 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  memset(v11, 0, sizeof(v11));
  re::DynamicArray<re::NamedAnimationLibraryEntry>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = (void *)(*(void *)(a1 + 32) + v6);
        *uint64_t v7 = 0;
        v7[1] = "";
        v7[3] = 0;
        v7[4] = 0;
        v7[2] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::NamedAnimationLibraryEntry>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  unint64_t v5 = (unint64_t *)(v3[4] + 40 * v4);
  uint64_t v6 = *a2;
  *unint64_t v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  void v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v5[3] = a2[3];
  a2[3] = 0;
  unint64_t v7 = v5[2];
  void v5[2] = 0;
  void v5[2] = a2[2];
  a2[2] = v7;
  unint64_t v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::NamedAnimationLibraryEntry>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v10 = 0;
  unint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = v10;
          *((_DWORD *)a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void introspect_REMeshIdentifierType(BOOL a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E498, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF7E498);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      __int16 v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)__int16 v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Invalid";
      qword_26AF7E4D0 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Instance";
      qword_26AF7E4D8 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      StringID v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)StringID v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Model";
      qword_26AF7E4E0 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 3;
      *(void *)(v32 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "All";
      qword_26AF7E4E8 = v32;
      __cxa_guard_release(&qword_26AF7E498);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E4A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E4A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7E4F0, "REMeshIdentifierType", 1, 1, 1, 1);
    qword_26AF7E4F0 = (uint64_t)&unk_26E715E00;
    qword_26AF7E530 = (uint64_t)&introspect_REMeshIdentifierType(BOOL)::enumTable;
    dword_26AF7E500 = 9;
    __cxa_guard_release(&qword_26AF7E4A0);
  }
  if ((_MergedGlobals_107 & 1) == 0)
  {
    _MergedGlobals_107 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7E4F0, a2);
    uint64_t v34 = 0xD5C6F6D094C2E4C6;
    __int16 v35 = "REMeshIdentifierType";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      int v4 = (unsigned int *)qword_26AF7E530;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unsigned int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unsigned int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.char var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.char var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF7E510 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REMeshIdentifierType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModelIndex(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = a1[1];
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), &v5);
  return re::MeshNameMap::modelIndex(*(re::MeshNameMap **)(*a1 + 8), v3);
}

uint64_t re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(uint64_t **a1)
{
  uint64_t v2 = **a1;
  unsigned int v3 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModelIndex(a1);
  if (*(void *)(v2 + 416) <= (unint64_t)v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(*(void *)(v2 + 432) + 8 * v3);
  uint64_t v5 = *(void *)(**a1 + 440) + 8;
  return re::DataArray<re::MeshModel>::tryGet(v5, v4);
}

void *re::allocInfo_MeshIdentifierAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E4A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E4A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E538, "MeshIdentifierAsset");
    __cxa_guard_release(&qword_26AF7E4A8);
  }
  return &unk_26AF7E538;
}

void re::initInfo_MeshIdentifierAsset(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x35C48431124203F4;
  v17[1] = "MeshIdentifierAsset";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E4B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E4B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      introspect_REMeshIdentifierType((BOOL)v5, v6);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "type";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E4F0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E4B8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7E4C0 = v11;
      unsigned int v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<re::StringID>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "partName";
      *(void *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7E4C8 = v15;
      __cxa_guard_release(&qword_26AF7E4B0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E4B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshIdentifierAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshIdentifierAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::MeshIdentifierAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshIdentifierAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::MeshIdentifierAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
}

void re::internal::defaultDestruct<re::MeshIdentifierAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshIdentifierAsset>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  return result;
}

void re::internal::defaultDestructV2<re::MeshIdentifierAsset>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t re::introspect_MeshIdentifierAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshIdentifierAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshIdentifierAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshIdentifierAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshIdentifierAsset>, this);
}

uint64_t *re::assetTypesLogObjects(re *this)
{
  {
    re::assetTypesLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "AssetTypes");
  }
  return &re::assetTypesLogObjects(void)::logObjects;
}

uint64_t *re::RigAsset::assetType(re::RigAsset *this)
{
  {
    re::RigAsset::assetType(void)::type = (uint64_t)"Rig";
    qword_26879E9D8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RigAsset::assetType(void)::type);
  }
  return &re::RigAsset::assetType(void)::type;
}

void *re::RigAsset::init(re::RigAsset *this, re::Allocator *a2)
{
  uint64_t v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(void *)this = v2;
  re::DynamicArray<re::RigDefinition>::setCapacity(this, 0);
  *((void *)this + 10) = v2;
  uint64_t v4 = (char *)this + 80;
  ++*((_DWORD *)v4 - 14);
  uint64_t result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::RigAsset::init(re::RigAsset *this, const re::MeshAsset *a2, re::Allocator *a3)
{
  unsigned int v3 = (uint64_t *)a3;
  if (!a3)
  {
  }
  unint64_t v6 = *((unsigned int *)a2 + 234);
  *(void *)this = v3;
  re::DynamicArray<re::RigDefinition>::setCapacity(this, v6);
  ++*((_DWORD *)this + 6);
  *((void *)this + 10) = v3;
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)this + 10, v6);
  ++*((_DWORD *)this + 26);
  re::RigAsset::addDefaultSkeletonRigs(this, a2);
}

void re::RigAsset::addDefaultSkeletonRigs(re::RigAsset *this, const re::MeshAsset *a2)
{
  uint64_t v2 = a2;
  uint64_t v50 = *MEMORY[0x263EF8340];
  int v33 = *((_DWORD *)this + 4);
  unint64_t v35 = *((void *)a2 + 117);
  if (v35)
  {
    unint64_t v3 = 0;
    while (1)
    {
      unint64_t v32 = v3;
      uint64_t v4 = (void *)re::MeshAsset::skeletonAtIndex(v2, v3);
      unint64_t v5 = v4[3];
      unint64_t v7 = v4[6];
      unint64_t v6 = v4[7];
      unint64_t v8 = v4[9];
      unsigned int v9 = (long long *)v4[10];
      bzero(&v41, 0x478uLL);
      re::DynamicArray<re::RigDefinition>::add((uint64_t)this, (uint64_t)&v41);
      re::RigDefinition::~RigDefinition((re::RigDefinition *)&v41);
      uint64_t v10 = *((void *)this + 4) + 1144 * *((void *)this + 2);
      uint64_t v11 = (_anonymous_namespace_ *)(v10 - 280);
      *(void *)(v10 - 280) = *(void *)this;
      re::DynamicArray<re::RigTransform>::setCapacity((void *)(v10 - 280), v5);
      *(void *)(v10 - 120) = *(void *)this;
      uint64_t v12 = v10 - 120;
      ++*(_DWORD *)(v12 - 136);
      re::DynamicArray<re::RigNode>::setCapacity((void *)v12, v5);
      ++*(_DWORD *)(v12 + 24);
      if (v5) {
        break;
      }
LABEL_13:
      unint64_t v3 = v32 + 1;
      uint64_t v2 = a2;
      if (v32 + 1 == v35) {
        goto LABEL_14;
      }
    }
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      if (v14 >= v8)
      {
        *(void *)uint64_t v39 = 0x3F8000003F800000;
        *(void *)&v39[8] = 1065353216;
        *(void *)&v39[16] = 0;
        *(void *)&v39[24] = 0x3F80000000000000;
        *(_OWORD *)&v39[32] = 0uLL;
      }
      else
      {
        long long v15 = *v9;
        long long v16 = v9[2];
        *(_OWORD *)&v39[16] = v9[1];
        *(_OWORD *)&v39[32] = v16;
        *(_OWORD *)uint64_t v39 = v15;
      }
      __n128 v41 = *(__n128 *)&v39[32];
      *(_OWORD *)uint64_t v45 = 0u;
      re::convertQuaternionsToIntrinsicEulers<float>((uint64_t)&v39[16], 1, 0, (uint64_t)v45, 1);
      long long v42 = *(_OWORD *)v45;
      v43[0] = *(_OWORD *)v39;
      LOBYTE(v43[1]) = 0;
      *(void *)&double v18 = re::DynamicArray<re::RigTransform>::add(v11, (uint64_t)&v41).n128_u64[0];
      unint64_t v19 = v4[3];
      if (v19 <= v14) {
        break;
      }
      re::StringID::StringID((re::StringID *)&v41, (const StringID *)(v4[4] + v13));
      LOBYTE(v4re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *((void *)&v42 + 1) = v14;
      if (v7 == v14) {
        goto LABEL_35;
      }
      uint64_t v21 = *(unsigned int *)(v6 + 4 * v14);
      if (v21 == -1) {
        uint64_t v21 = -1;
      }
      *(void *)&v43[0] = v21;
      *(_OWORD *)((char *)v43 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = xmmword_234361D10;
      re::DynamicArray<re::RigNode>::add((_anonymous_namespace_ *)v12, &v41);
      re::StringID::destroyString((re::StringID *)&v41);
      ++v14;
      v13 += 16;
      v9 += 3;
      if (v5 == v14) {
        goto LABEL_13;
      }
    }
    re::internal::assertLog((re::internal *)6, v17, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v19);
    _os_crash();
    __break(1u);
LABEL_35:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v7);
    _os_crash();
    __break(1u);
LABEL_36:
    long long v44 = 0u;
    memset(v43, 0, sizeof(v43));
    __n128 v41 = 0u;
    long long v42 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&unsigned char v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    __int16 v46 = 2048;
    unint64_t v47 = v7;
    __int16 v48 = 2048;
    long long v49 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_37:
    *(void *)uint64_t v45 = 0;
    long long v44 = 0u;
    memset(v43, 0, sizeof(v43));
    __n128 v41 = 0u;
    long long v42 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v39 = 136315906;
    *(void *)&void v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 797;
    *(_WORD *)&v39[18] = 2048;
    *(void *)&v39[20] = v8;
    *(_WORD *)&v39[28] = 2048;
    *(void *)&v39[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_14:
  uint64_t v22 = *((void *)v2 + 55);
  if (v22)
  {
    uint64_t v23 = *((unsigned char *)v2 + 952) ? (const re::MeshAsset *)((char *)v2 + 416) : (const re::MeshAsset *)((char *)v2 + 24);
    uint64_t v37 = *(void *)v23;
    if (*(void *)v23)
    {
      unint64_t v8 = 0;
      uint64_t v36 = v22 + 8;
      while (1)
      {
        unint64_t v6 = *((void *)v2 + 52);
        if (v6 <= v8) {
          goto LABEL_37;
        }
        unint64_t v38 = v8;
        uint64_t v24 = re::DataArray<re::MeshModel>::get(v36, *(void *)(*((void *)v2 + 54) + 8 * v8));
        uint64_t v25 = *(void *)(v24 + 176);
        if (v25)
        {
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26)
          {
            uint64_t v27 = v24;
            unint64_t v7 = 0;
            unint64_t v6 = 504;
            uint64_t v28 = 4;
            do
            {
              uint64_t v29 = *(void *)(v27 + 176);
              if (v29 && *(void *)(v29 + 8) > v7) {
                unint64_t v8 = *(unsigned int *)(*(void *)(v29 + 16) + v28);
              }
              else {
                unint64_t v8 = 0xFFFFFFFFLL;
              }
              if (v35 > v8)
              {
                v39[0] = 2;
                re::StringID::StringID((re::StringID *)&v39[8], (const StringID *)v27);
                uint64_t v11 = *(_anonymous_namespace_ **)(v27 + 56);
                if ((unint64_t)v11 <= v7) {
                  goto LABEL_36;
                }
                re::StringID::StringID((re::StringID *)&v39[24], (const StringID *)(*(void *)(v27 + 64) + v6));
                StringID v30 = (const StringID *)re::MeshAsset::skeletonAtIndex(a2, v8);
                re::StringID::StringID((re::StringID *)&v39[40], v30);
                int v40 = v8 + v33;
                re::DynamicArray<re::MeshRigGraphIndex>::add((re::RigAsset *)((char *)this + 80), (uint64_t)v39);
                re::StringID::destroyString((re::StringID *)&v39[40]);
                re::StringID::destroyString((re::StringID *)&v39[24]);
                re::StringID::destroyString((re::StringID *)&v39[8]);
              }
              ++v7;
              v28 += 72;
              v6 += 560;
            }
            while (v26 != v7);
          }
        }
        unint64_t v8 = v38 + 1;
        uint64_t v2 = a2;
        if (v38 + 1 == v37) {
          return;
        }
      }
    }
  }
}

uint64_t re::DynamicArray<re::RigDefinition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(re::RigDefinition **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 1144 * v4;
        do
        {
          re::RigDefinition::~RigDefinition(v3);
          unint64_t v3 = (re::RigDefinition *)((char *)v3 + 1144);
          v5 -= 1144;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(re::RigDefinition **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::RigDefinition *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RigDefinition>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::RigDefinition>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigDefinition>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t result = re::RigDefinition::RigDefinition(*(void *)(a1 + 32) + 1144 * v5, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re *re::RigAssetLoader::unloadAsset(re::RigAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::RigAsset>((re *)"unloadAsset", 120, a2);
}

re *re::internal::destroyPersistent<re::RigAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 80);
    re::DynamicArray<re::StringID>::deinit(a3 + 40);
    re::DynamicArray<re::RigDefinition>::deinit(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::RigAssetLoader::isSupportedSourceExtension(re::RigAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "rerig") == 0;
}

char **re::RigAssetLoader::introspectionType(re::RigAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::RigAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RigAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[380];
}

void *re::allocInfo_MeshRigIndex(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E5B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E6A0, "MeshRigIndex");
    __cxa_guard_release(&qword_26AF7E5B8);
  }
  return &unk_26AF7E6A0;
}

void re::initInfo_MeshRigIndex(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x38AFE38B67FC759ELL;
  v17[1] = "MeshRigIndex";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E5C0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "meshIdentifier";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E5F0 = v7;
      BOOL v8 = re::introspectionAllocator((re *)v7);
      unint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "skeletonName";
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7E5F8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "rigIndex";
      *(void *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7E600 = v15;
      __cxa_guard_release(&qword_26AF7E5C0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E5F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshRigIndex>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshRigIndex>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::MeshRigIndex>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshRigIndex>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::MeshRigIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
}

void re::internal::defaultDestruct<re::MeshRigIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshRigIndex>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "";
  *(void *)(result + 40) = 0;
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshRigIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void *re::allocInfo_RigAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E5D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E718, "RigAsset");
    __cxa_guard_release(&qword_26AF7E5D0);
  }
  return &unk_26AF7E718;
}

void re::initInfo_RigAsset(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x44758379FC0;
  v14[1] = "RigAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E5D8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::RigDefinition>>::get();
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "rigDefinitions";
      *(void *)(v6 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E620;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v6 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7E608 = v6;
      uint64_t v7 = re::introspectionAllocator((re *)v6);
      unint64_t v9 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v8);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "basePoseNames";
      *(void *)(v10 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7E610 = v10;
      uint64_t v11 = (re *)re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::DynamicArray<re::MeshRigIndex>>::get(v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "meshRigs";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7E660;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5000000003;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7E618 = v12;
      __cxa_guard_release(&qword_26AF7E5D8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E608;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RigAsset>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RigAsset>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::RigAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RigAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::IntrospectionInfo<re::DynamicArray<re::RigDefinition>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E5E0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7E620);
    qword_26AF7E620 = (uint64_t)&unk_26E6D9E70;
    __cxa_guard_release(&qword_26AF7E5E0);
  }
  if ((_MergedGlobals_108 & 1) == 0)
  {
    uint64_t v0 = re::introspect_RigDefinition((re::IntrospectionBase **)1);
    if ((_MergedGlobals_108 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_108 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7E620, 0);
      qword_26AF7E630 = 0x2800000003;
      dword_26AF7E638 = v2;
      word_26AF7E63C = 0;
      *(void *)&xmmword_26AF7E640 = 0;
      *((void *)&xmmword_26AF7E640 + 1) = 0xFFFFFFFFLL;
      qword_26AF7E650 = v1;
      unk_26AF7E658 = 0;
      qword_26AF7E620 = (uint64_t)&unk_26E6D9E70;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF7E620, (const re::IntrospectionBase *)&v13);
      if (v14) {
        unint64_t v5 = *(const char **)&v15[7];
      }
      else {
        unint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7E640 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshRigIndex>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E5E8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7E5E8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7E660);
      qword_26AF7E660 = (uint64_t)&unk_26E6D9F08;
      __cxa_guard_release(&qword_26AF7E5E8);
    }
  }
  if ((byte_26AF7E5B1 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7E5C8;
    if (qword_26AF7E5C8
      || (uint64_t v1 = re::allocInfo_MeshRigIndex(a1),
          qword_26AF7E5C8 = (uint64_t)v1,
          re::initInfo_MeshRigIndex((re *)v1, v2),
          (byte_26AF7E5B1 & 1) == 0))
    {
      byte_26AF7E5B1 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7E660, 0);
      *(void *)&algn_26AF7E668[8] = 0x2800000003;
      *(_DWORD *)&algn_26AF7E668[16] = v3;
      *(_WORD *)&algn_26AF7E668[20] = 0;
      *(void *)&xmmword_26AF7E680 = 0;
      *((void *)&xmmword_26AF7E680 + 1) = 0xFFFFFFFFLL;
      *(void *)algn_26AF7E690 = v1;
      *(void *)&algn_26AF7E690[8] = 0;
      qword_26AF7E660 = (uint64_t)&unk_26E6D9F08;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7E660, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7E680 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::RigAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 80);
  re::DynamicArray<re::StringID>::deinit(a3 + 40);
  return re::DynamicArray<re::RigDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 80);
  re::DynamicArray<re::StringID>::deinit(a1 + 40);
  return re::DynamicArray<re::RigDefinition>::deinit(a1);
}

uint64_t re::introspect_RigAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigAsset>, this);
}

void re::RigAssetLoader::~RigAssetLoader(re::RigAssetLoader *this)
{
}

void *re::DynamicArray<re::RigDefinition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RigDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x478uLL))
        {
          uint64_t v2 = 1144 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 1144 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (re::RigDefinition *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 1144 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::RigDefinition::RigDefinition(v11, (uint64_t)v8);
          re::RigDefinition::~RigDefinition(v8);
          uint64_t v8 = (re::RigDefinition *)((char *)v8 + 1144);
          v11 += 1144;
          v10 -= 1144;
        }
        while (v10);
        uint64_t v8 = (re::RigDefinition *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::RigDefinition *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RigDefinition::RigDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(a1 + 24);
  *(void *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 56);
  *(void *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v8;
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 72);
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v9;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 64);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v10;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 96);
  *(void *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
  uint64_t v12 = *(void *)(a1 + 112);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a2 + 112);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v12;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(a1 + 104);
  *(void *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v13;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v14 = *(void *)(a1 + 136);
  *(void *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 136);
  *(void *)(a2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  uint64_t v15 = *(void *)(a1 + 152);
  *(void *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 152);
  *(void *)(a2 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(a1 + 144);
  *(void *)(a1 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  uint64_t v16 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v16;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v17 = *(void *)(a1 + 176);
  *(void *)(a1 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 176);
  *(void *)(a2 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
  uint64_t v18 = *(void *)(a1 + 192);
  *(void *)(a1 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 192);
  *(void *)(a2 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v18;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(a1 + 184);
  re::DynamicRegisterTable::DynamicRegisterTable(a1 + 200, a2 + 200);
  *(void *)(a1 + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 52re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  *(void *)(a1 + 52re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 528);
  *(void *)(a2 + 52re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v19 = *(void *)(a1 + 536);
  *(void *)(a1 + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 536);
  *(void *)(a2 + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
  uint64_t v20 = *(void *)(a1 + 552);
  *(void *)(a1 + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 552);
  *(void *)(a2 + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v20;
  ++*(_DWORD *)(a2 + 544);
  ++*(_DWORD *)(a1 + 544);
  long long v21 = *(_OWORD *)(a2 + 560);
  long long v22 = *(_OWORD *)(a2 + 576);
  long long v23 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 59re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 60re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v23;
  *(_OWORD *)(a1 + 560) = v21;
  *(_OWORD *)(a1 + 57re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v22;
  *(void *)(a1 + 65re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 63re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 64re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a2 + 624) = 0;
  *(void *)(a1 + 63re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 632);
  *(void *)(a2 + 63re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v24 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a2 + 640) = v24;
  uint64_t v25 = *(void *)(a1 + 656);
  *(void *)(a1 + 65re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 656);
  *(void *)(a2 + 65re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v25;
  ++*(_DWORD *)(a2 + 648);
  ++*(_DWORD *)(a1 + 648);
  *(void *)(a1 + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 67re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 68re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  *(void *)(a1 + 67re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 672);
  *(void *)(a2 + 67re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v26 = *(void *)(a1 + 680);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a2 + 680) = v26;
  uint64_t v27 = *(void *)(a1 + 696);
  *(void *)(a1 + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 696);
  *(void *)(a2 + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v27;
  ++*(_DWORD *)(a2 + 688);
  ++*(_DWORD *)(a1 + 688);
  *(void *)(a1 + 73re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 72re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a2 + 704) = 0;
  *(void *)(a1 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a2 + 712);
  *(void *)(a2 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  uint64_t v28 = *(void *)(a1 + 720);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = v28;
  uint64_t v29 = *(void *)(a1 + 736);
  *(void *)(a1 + 73re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 736);
  *(void *)(a2 + 73re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v29;
  ++*(_DWORD *)(a2 + 728);
  ++*(_DWORD *)(a1 + 728);
  *(void *)(a1 + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 75re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 76re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a2 + 744) = 0;
  *(void *)(a1 + 75re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 752);
  *(void *)(a2 + 75re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v30 = *(void *)(a1 + 760);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a2 + 760) = v30;
  uint64_t v31 = *(void *)(a1 + 776);
  *(void *)(a1 + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 776);
  *(void *)(a2 + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v31;
  ++*(_DWORD *)(a2 + 768);
  ++*(_DWORD *)(a1 + 768);
  *(void *)(a1 + 81re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 80re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a2 + 784) = 0;
  *(void *)(a1 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 792);
  *(void *)(a2 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v32 = *(void *)(a1 + 800);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(void *)(a2 + 800) = v32;
  uint64_t v33 = *(void *)(a1 + 816);
  *(void *)(a1 + 81re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 816);
  *(void *)(a2 + 81re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v33;
  ++*(_DWORD *)(a2 + 808);
  ++*(_DWORD *)(a1 + 808);
  *(void *)(a1 + 85re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 83re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 84re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(void *)(a2 + 824) = 0;
  *(void *)(a1 + 83re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 832);
  *(void *)(a2 + 83re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v34 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(void *)(a2 + 840) = v34;
  uint64_t v35 = *(void *)(a1 + 856);
  *(void *)(a1 + 85re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 856);
  *(void *)(a2 + 85re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v35;
  ++*(_DWORD *)(a2 + 848);
  ++*(_DWORD *)(a1 + 848);
  *(void *)(a1 + 89re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 87re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 88re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a2 + 864) = 0;
  *(void *)(a1 + 87re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 872);
  *(void *)(a2 + 87re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v36 = *(void *)(a1 + 880);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a2 + 880) = v36;
  uint64_t v37 = *(void *)(a1 + 896);
  *(void *)(a1 + 89re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 896);
  *(void *)(a2 + 89re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v37;
  ++*(_DWORD *)(a2 + 888);
  ++*(_DWORD *)(a1 + 888);
  *(void *)(a1 + 93re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 92re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a2 + 904) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a2 + 912);
  *(void *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  uint64_t v38 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(void *)(a2 + 920) = v38;
  uint64_t v39 = *(void *)(a1 + 936);
  *(void *)(a1 + 93re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 936);
  *(void *)(a2 + 93re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v39;
  ++*(_DWORD *)(a2 + 928);
  ++*(_DWORD *)(a1 + 928);
  *(void *)(a1 + 97re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 95re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 96re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a2 + 944) = 0;
  *(void *)(a1 + 95re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 952);
  *(void *)(a2 + 95re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v40 = *(void *)(a1 + 960);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = v40;
  uint64_t v41 = *(void *)(a1 + 976);
  *(void *)(a1 + 97re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 976);
  *(void *)(a2 + 97re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v41;
  ++*(_DWORD *)(a2 + 968);
  ++*(_DWORD *)(a1 + 968);
  *(void *)(a1 + 101re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 99re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 100re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a2 + 984) = 0;
  *(void *)(a1 + 99re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 992);
  *(void *)(a2 + 99re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v42 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a2 + 1000) = v42;
  uint64_t v43 = *(void *)(a1 + 1016);
  *(void *)(a1 + 101re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 1016);
  *(void *)(a2 + 101re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v43;
  ++*(_DWORD *)(a2 + 1008);
  ++*(_DWORD *)(a1 + 1008);
  *(void *)(a1 + 105re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 103re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 104re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  *(void *)(a1 + 103re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 1032);
  *(void *)(a2 + 103re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v44 = *(void *)(a1 + 1040);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a2 + 1040) = v44;
  uint64_t v45 = *(void *)(a1 + 1056);
  *(void *)(a1 + 105re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 1056);
  *(void *)(a2 + 105re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v45;
  ++*(_DWORD *)(a2 + 1048);
  ++*(_DWORD *)(a1 + 1048);
  *(void *)(a1 + 109re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 107re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 108re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a2 + 1064) = 0;
  *(void *)(a1 + 107re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a2 + 1072);
  *(void *)(a2 + 107re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v46 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = v46;
  uint64_t v47 = *(void *)(a1 + 1096);
  *(void *)(a1 + 109re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 1096);
  *(void *)(a2 + 109re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v47;
  ++*(_DWORD *)(a2 + 1088);
  ++*(_DWORD *)(a1 + 1088);
  *(void *)(a1 + 113re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 112re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a2 + 1104) = 0;
  *(void *)(a1 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a2 + 1112);
  *(void *)(a2 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  uint64_t v48 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a2 + 1120) = v48;
  uint64_t v49 = *(void *)(a1 + 1136);
  *(void *)(a1 + 113re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 1136);
  *(void *)(a2 + 113re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v49;
  ++*(_DWORD *)(a2 + 1128);
  ++*(_DWORD *)(a1 + 1128);
  return a1;
}

void *re::IntrospectionDynamicArray<re::RigDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RigDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDefinition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RigDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigDefinition>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::RigDefinition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigDefinition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RigDefinition>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigDefinition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  bzero(v10, 0x478uLL);
  re::DynamicArray<re::RigDefinition>::add(a4, (uint64_t)v10);
  re::RigDefinition::~RigDefinition((re::RigDefinition *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 1144 * *(void *)(a4 + 16) - 1144);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 1144 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 1144 * a3;
}

void re::DynamicArray<re::RigDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 1144 * a2;
    unint64_t v9 = a2;
    do
    {
      re::RigDefinition::~RigDefinition((re::RigDefinition *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 1144;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigDefinition>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 1144 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *(void *)(v7 + 113re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *(_OWORD *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        *(_OWORD *)(v7 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 144) = 0;
        *(_OWORD *)(v7 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 184) = 0;
        *(_OWORD *)(v7 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 224) = 0;
        *(_DWORD *)(v7 + 264) = 0;
        *(_OWORD *)(v7 + 24re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v7 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 304) = 0;
        *(_OWORD *)(v7 + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 28re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 344) = 0;
        *(_OWORD *)(v7 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        *(_OWORD *)(v7 + 32re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 384) = 0;
        *(_OWORD *)(v7 + 35re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 36re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 424) = 0;
        *(_OWORD *)(v7 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 40re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v7 + 43re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 44re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 464) = 0;
        *(_DWORD *)(v7 + 504) = 0;
        *(_OWORD *)(v7 + 47re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 48re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 544) = 0;
        *(_OWORD *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        *(_OWORD *)(v7 + 52re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 64re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 61re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 63re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 584) = 0uLL;
        *(_OWORD *)(v7 + 600) = 0uLL;
        *(_OWORD *)(v7 + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 56re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 68re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 65re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 67re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 72re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        *(_DWORD *)(v7 + 76re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 73re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 75re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 80re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 84re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 81re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 83re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 88re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 85re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 87re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 92re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 89re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        *(_DWORD *)(v7 + 96re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 93re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 95re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 100re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 97re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 99re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 104re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 101re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 103re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_DWORD *)(v7 + 108re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v7 + 107re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 105re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_DWORD *)(v7 + 112re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        v6 += 1144;
        *(_OWORD *)(v7 + 109re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0uLL;
        *(_OWORD *)(v7 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0uLL;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::RigDefinition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      unint64_t v9 = *(re::RigDefinition **)(a1 + 32);
      uint64_t v10 = 1144 * v8;
      do
      {
        re::RigDefinition::~RigDefinition(v9);
        unint64_t v9 = (re::RigDefinition *)(v11 + 1144);
        v10 -= 1144;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigDefinition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigDefinition>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = *(char **)(a1 + 32);
      uint64_t v15 = 1144 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 1144;
        v15 -= 1144;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 1144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 1144 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshRigIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshRigIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshRigGraphIndex>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshRigIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  v13[0] = 0;
  void v13[2] = 0;
  long long v10 = 0u;
  v12[0] = 0;
  uint64_t v11 = "";
  v12[1] = "";
  v13[1] = "";
  re::DynamicArray<re::MeshRigGraphIndex>::add(a4, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)a4 + 4) + (*((void *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        long long v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t *re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType()
{
  {
    re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type = (uint64_t)"BlendTreeDefinition";
    qword_268773958 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type;
}

uint64_t *re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType()
{
  {
    re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type = (uint64_t)"BlendShapeGroupDefinition";
    qword_268773978 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type;
}

void *re::allocInfo_BlendTreeDefinitionAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_109, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_109))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E7C0, "BlendTreeDefinitionAsset");
    __cxa_guard_release(&_MergedGlobals_109);
  }
  return &unk_26AF7E7C0;
}

void re::initInfo_BlendTreeDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x18BAB4A9C8CC2BDCLL;
  v9[1] = "BlendTreeDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E7A0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E7A0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_BlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "data";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E798 = v7;
      __cxa_guard_release(&qword_26AF7E7A0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x14800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E798;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a3 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 180) = 0u;
  *(_DWORD *)(a3 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a3 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a3 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::~BasicAsset(a3);
}

double re::internal::defaultConstructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_DWORD *)(a1 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  return result;
}

uint64_t re::introspect_BlendTreeDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendTreeDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendTreeDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendTreeDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>, this);
}

void *re::allocInfo_BlendShapeGroupDefinitionAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E7A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E7A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E838, "BlendShapeGroupDefinitionAsset");
    __cxa_guard_release(&qword_26AF7E7A8);
  }
  return &unk_26AF7E838;
}

void re::initInfo_BlendShapeGroupDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE28673731F806DDCLL;
  v9[1] = "BlendShapeGroupDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E7B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7E7B8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_BlendShapeGroupDefinition((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "data";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7E7B0 = v7;
      __cxa_guard_release(&qword_26AF7E7B8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E7B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(a3 + 44) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t result)
{
  *(void *)double result = 0;
  *(void *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "";
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(result + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t re::introspect_BlendShapeGroupDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeGroupDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeGroupDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeGroupDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>, this);
}

void *re::allocInfo_DRContextService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_110))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E8D8, "DRContextService");
    __cxa_guard_release(&_MergedGlobals_110);
  }
  return &unk_26AF7E8D8;
}

void re::initInfo_DRContextService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x2476733B9AD5F468;
  v5[1] = "DRContextService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x100000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &re::initInfo_DRContextService(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DRContextService>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DRContextService>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::DRContextService>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DRContextService>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_DRContextService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DRContextService", (uint64_t (*)(re::internal *))re::allocInfo_DRContextService, (re::IntrospectionBase *(*)(void))re::initInfo_DRContextService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DRContextService>, this);
}

void *re::allocInfo_DirectResourceAssetTracker(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E8B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E8B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E950, "DirectResourceAssetTracker");
    __cxa_guard_release(&qword_26AF7E8B8);
  }
  return &unk_26AF7E950;
}

void re::initInfo_DirectResourceAssetTracker(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB00CC27AC4BE4DFELL;
  v5[1] = "DirectResourceAssetTracker";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &re::initInfo_DirectResourceAssetTracker(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DirectResourceAssetTracker>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DirectResourceAssetTracker>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::DirectResourceAssetTracker>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DirectResourceAssetTracker>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::DirectResourceAssetTracker>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_DWORD *)(a3 + 120) = 0;
  *(void *)(a3 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_DWORD *)(a3 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 17re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::DirectResourceAssetTracker>(int a1, int a2, re::DirectResourceAssetTracker *this)
{
}

double re::internal::defaultConstructV2<re::DirectResourceAssetTracker>(uint64_t a1)
{
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 17re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_DirectResourceAssetTracker(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectResourceAssetTracker", (uint64_t (*)(re::internal *))re::allocInfo_DirectResourceAssetTracker, (re::IntrospectionBase *(*)(void))re::initInfo_DirectResourceAssetTracker, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DirectResourceAssetTracker>, this);
}

void *re::IntrospectionInfo<unsigned char [16]>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v3 = re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v3) {
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      uint64_t v11 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v11);
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized = 1;
  uint64_t v7 = (const re::IntrospectionBase *)re::introspect_uint8_t((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info, v7, 16);
  re::IntrospectionRegistry::add(v8, v9);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
  if (BYTE8(v14)) {
    long long v10 = v15;
  }
  else {
    long long v10 = (char *)&v14 + 9;
  }
  if (void)v14 && (BYTE8(v14)) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  long long v14 = *((_OWORD *)v7 + 2);
  xmmword_268773C30 = v13;
  re::StringID::destroyString((re::StringID *)v16);
  if ((a1 & 1) == 0) {
    goto LABEL_14;
  }
  return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
}

void *re::allocInfo_DirectResourceId(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E8D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7E8D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7E9C8, "DirectResourceId");
    __cxa_guard_release(&qword_26AF7E8D0);
  }
  return &unk_26AF7E9C8;
}

void re::initInfo_DirectResourceId(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x3F9727A418475D64;
  v10[1] = "DirectResourceId";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7E8C8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF7E8C8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<unsigned char [16]>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "m_value";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7E8C0 = v8;
      __cxa_guard_release(&qword_26AF7E8C8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7E8C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DirectResourceId>;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DirectResourceId>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::DirectResourceId>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DirectResourceId>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::internal::defaultConstruct<re::DirectResourceId>(int a1, int a2, uuid_t dst)
{
}

void re::internal::defaultConstructV2<re::DirectResourceId>(unsigned __int8 *a1)
{
}

uint64_t re::introspect_DirectResourceId(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectResourceId", (uint64_t (*)(re::internal *))re::allocInfo_DirectResourceId, (re::IntrospectionBase *(*)(void))re::initInfo_DirectResourceId, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DirectResourceId>, this);
}

uint64_t re::DirectResourceAssetTracker::DirectResourceAssetTracker(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = *a3;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a4;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a5;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 17re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7FFFFFFFLL;
  if (a2) {
    DRContextSetChangeObserver();
  }
  return a1;
}

void ___ZN2re26DirectResourceAssetTrackerC2EP11DRContext_sRKNS_3mtl6DeviceEPNS_11MeshManagerEPNS_12AssetServiceEPNS_14TextureManagerE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)src = 0;
  *(void *)long long v53 = 0;
  DRResourceGetIdentifier();
  unint64_t ClientIdentifier = DRResourceGetClientIdentifier();
  uuid_copy((unsigned __int8 *)&v57, src);
  *(void *)long long v54 = 0;
  uint64_t v55 = 0;
  switch(a3)
  {
    case 2:
      if (!*(void *)(v6 + 88)) {
        goto LABEL_48;
      }
      unint64_t v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (ClientIdentifier ^ (ClientIdentifier >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                      * (ClientIdentifier ^ (ClientIdentifier >> 30))) >> 27));
      unint64_t v13 = ((((v58 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2)) ^ v57)
            - 0x61C8864680B583E9
            + ((v12 ^ (v12 >> 31)) << 6)
            + ((v12 ^ (v12 >> 31)) >> 2)) ^ v12 ^ (v12 >> 31))
          % *(unsigned int *)(v6 + 112);
      uint64_t v14 = *(unsigned int *)(*(void *)(v6 + 96) + 4 * v13);
      if (v14 == 0x7FFFFFFF) {
        goto LABEL_48;
      }
      uint64_t v15 = *(void *)(v6 + 104);
      uint64_t v16 = 0x7FFFFFFFLL;
      while (1)
      {
        if (*(void *)(v15 + 48 * v14 + 16) == ClientIdentifier)
        {
          if (!uuid_compare((const unsigned __int8 *)(v15 + 48 * v14 + 24), (const unsigned __int8 *)&v57))
          {
            uint64_t v33 = *(void *)(v6 + 104);
            int v34 = *(_DWORD *)(v33 + 48 * v14 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF) {
              *(_DWORD *)(*(void *)(v6 + 96) + 4 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v34;
            }
            else {
              *(_DWORD *)(v33 + 48 * v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v33 + 48 * v16 + 8) & 0x80000000 | v34;
            }
            uint64_t v35 = *(void *)(v6 + 104);
            uint64_t v36 = v35 + 48 * v14;
            int v39 = *(_DWORD *)(v36 + 8);
            uint64_t v38 = (int *)(v36 + 8);
            int v37 = v39;
            if (v39 < 0)
            {
              *uint64_t v38 = v37 & 0x7FFFFFFF;
              uint64_t v35 = *(void *)(v6 + 104);
              int v37 = *(_DWORD *)(v35 + 48 * v14 + 8);
            }
            *(_DWORD *)(v35 + 48 * v14 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v6 + 124) | v37 & 0x80000000;
            --*(_DWORD *)(v6 + 116);
            int v40 = *(_DWORD *)(v6 + 128) + 1;
            *(_DWORD *)(v6 + 124) = v14;
            *(_DWORD *)(v6 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v40;
LABEL_48:
            DRResourceGetIdentifier();
            uuid_copy(src, v54);
            if (*(void *)(v6 + 40))
            {
              unint64_t v41 = ((unint64_t)(*(void *)v53
                                      - 0x61C8864680B583E9
                                      + (*(void *)src << 6)
                                      + (*(void *)src >> 2)) ^ *(void *)src)
                  % *(unsigned int *)(v6 + 64);
              uint64_t v42 = *(unsigned int *)(*(void *)(v6 + 48) + 4 * v41);
              if (v42 != 0x7FFFFFFF)
              {
                if (uuid_compare((const unsigned __int8 *)(*(void *)(v6 + 56) + 40 * v42 + 12), src))
                {
                  while (1)
                  {
                    unsigned int v43 = v42;
                    uint64_t v44 = *(void *)(v6 + 56);
                    int v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
                    uint64_t v42 = v45 & 0x7FFFFFFF;
                    if ((v45 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                      break;
                    }
                    if (!uuid_compare((const unsigned __int8 *)(v44 + 40 * v42 + 12), src))
                    {
                      *(_DWORD *)(*(void *)(v6 + 56) + 40 * v43 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v6 + 56)
                                                                                     + 40 * v43
                                                                                     + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v6 + 56) + 40 * v42 + 8) & 0x7FFFFFFF;
                      goto LABEL_55;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(*(void *)(v6 + 48) + 4 * v41) = *(_DWORD *)(*(void *)(v6 + 56)
                                                                          + 40 * v42
                                                                          + 8) & 0x7FFFFFFF;
LABEL_55:
                  uint64_t v46 = *(void *)(v6 + 56);
                  uint64_t v47 = v46 + 40 * v42;
                  int v50 = *(_DWORD *)(v47 + 8);
                  uint64_t v49 = (int *)(v47 + 8);
                  int v48 = v50;
                  if (v50 < 0)
                  {
                    *uint64_t v49 = v48 & 0x7FFFFFFF;
                    uint64_t v46 = *(void *)(v6 + 56);
                    int v48 = *(_DWORD *)(v46 + 40 * v42 + 8);
                  }
                  *(_DWORD *)(v46 + 40 * v42 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v6 + 76) | v48 & 0x80000000;
                  --*(_DWORD *)(v6 + 68);
                  int v51 = *(_DWORD *)(v6 + 80) + 1;
                  *(_DWORD *)(v6 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v42;
                  *(_DWORD *)(v6 + 80) = v51;
                }
              }
            }
            *(void *)src = ClientIdentifier;
            uuid_copy(v53, (const unsigned __int8 *)&v57);
            uint64_t v17 = v6;
            uint64_t v18 = 0;
LABEL_59:
            char v19 = 0;
LABEL_60:
            re::DirectResourceAssetTracker::setResourceAndUpdate(v17, src, v18, v19);
            return;
          }
          uint64_t v15 = *(void *)(v6 + 104);
        }
        uint64_t v16 = v14;
        uint64_t v14 = *(_DWORD *)(v15 + 48 * v14 + 8) & 0x7FFFFFFF;
        if (v14 == 0x7FFFFFFF) {
          goto LABEL_48;
        }
      }
    case 1:
      *(void *)src = ClientIdentifier;
      uuid_copy(v53, (const unsigned __int8 *)&v57);
      uint64_t v17 = v6;
      uint64_t v18 = a4;
      char v19 = 1;
      goto LABEL_60;
    case 0:
      unint64_t v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (ClientIdentifier ^ (ClientIdentifier >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                     * (ClientIdentifier ^ (ClientIdentifier >> 30))) >> 27));
      unint64_t v8 = (((v58 + (v57 << 6) + (v57 >> 2) - 0x61C8864680B583E9) ^ v57)
          + ((v7 ^ (v7 >> 31)) << 6)
          + ((v7 ^ (v7 >> 31)) >> 2)
          - 0x61C8864680B583E9) ^ v7 ^ (v7 >> 31);
      if (*(void *)(v6 + 88))
      {
        unint64_t v9 = v8 % *(unsigned int *)(v6 + 112);
        uint64_t v10 = *(unsigned int *)(*(void *)(v6 + 96) + 4 * v9);
        if (v10 != 0x7FFFFFFF)
        {
          uint64_t v11 = *(void *)(v6 + 104);
          do
          {
            if (*(void *)(v11 + 48 * v10 + 16) == ClientIdentifier)
            {
              if (!uuid_compare((const unsigned __int8 *)(v11 + 48 * v10 + 24), (const unsigned __int8 *)&v57)) {
                goto LABEL_28;
              }
              uint64_t v11 = *(void *)(v6 + 104);
            }
            uint64_t v10 = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
          }
          while (v10 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      uint64_t v20 = *(unsigned int *)(v6 + 124);
      if (v20 == 0x7FFFFFFF)
      {
        uint64_t v20 = *(unsigned int *)(v6 + 120);
        int v21 = v20;
        if (v20 == *(_DWORD *)(v6 + 112))
        {
          re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(v6 + 88, 2 * *(_DWORD *)(v6 + 116));
          LODWORD(v9) = v8 % *(unsigned int *)(v6 + 112);
          int v21 = *(_DWORD *)(v6 + 120);
        }
        *(_DWORD *)(v6 + 120) = v21 + 1;
        uint64_t v22 = *(void *)(v6 + 104);
        int v23 = *(_DWORD *)(v22 + 48 * v20 + 8);
      }
      else
      {
        uint64_t v22 = *(void *)(v6 + 104);
        int v23 = *(_DWORD *)(v22 + 48 * v20 + 8);
        *(_DWORD *)(v6 + 124) = v23 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v22 + 48 * v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
      *(_DWORD *)(*(void *)(v6 + 104) + 48 * v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v6 + 104) + 48 * v20 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v6 + 96) + 4 * v9);
      *(void *)(*(void *)(v6 + 104) + 48 * v20) = v8;
      uint64_t v24 = *(void *)(v6 + 104) + 48 * v20;
      *(void *)(v24 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = ClientIdentifier;
      uuid_copy((unsigned __int8 *)(v24 + 24), (const unsigned __int8 *)&v57);
      *(void *)(*(void *)(v6 + 104) + 48 * v20 + 40) = a4;
      *(_DWORD *)(*(void *)(v6 + 96) + 4 * v9) = v20;
      ++*(_DWORD *)(v6 + 116);
      ++*(_DWORD *)(v6 + 128);
LABEL_28:
      DRResourceGetIdentifier();
      uuid_copy(src, v54);
      unint64_t v25 = (*(void *)v53 - 0x61C8864680B583E9 + (*(void *)src << 6) + (*(void *)src >> 2)) ^ *(void *)src;
      if (*(void *)(v6 + 40))
      {
        unint64_t v26 = v25 % *(unsigned int *)(v6 + 64);
        uint64_t v27 = *(unsigned int *)(*(void *)(v6 + 48) + 4 * v26);
        if (v27 != 0x7FFFFFFF)
        {
          uint64_t v28 = *(void *)(v6 + 56);
          while (uuid_compare((const unsigned __int8 *)(v28 + 40 * v27 + 12), src))
          {
            uint64_t v28 = *(void *)(v6 + 56);
            uint64_t v27 = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
            if (v27 == 0x7FFFFFFF) {
              goto LABEL_35;
            }
          }
          goto LABEL_41;
        }
      }
      else
      {
        LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      }
LABEL_35:
      uint64_t v29 = *(unsigned int *)(v6 + 76);
      if (v29 == 0x7FFFFFFF)
      {
        uint64_t v29 = *(unsigned int *)(v6 + 72);
        int v30 = v29;
        if (v29 == *(_DWORD *)(v6 + 64))
        {
          re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(v6 + 40, 2 * *(_DWORD *)(v6 + 68));
          LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v25 % *(unsigned int *)(v6 + 64);
          int v30 = *(_DWORD *)(v6 + 72);
        }
        *(_DWORD *)(v6 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v30 + 1;
        uint64_t v31 = *(void *)(v6 + 56);
        int v32 = *(_DWORD *)(v31 + 40 * v29 + 8);
      }
      else
      {
        uint64_t v31 = *(void *)(v6 + 56);
        int v32 = *(_DWORD *)(v31 + 40 * v29 + 8);
        *(_DWORD *)(v6 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v32 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v31 + 40 * v29 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v32 | 0x80000000;
      *(_DWORD *)(*(void *)(v6 + 56) + 40 * v29 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v6 + 56) + 40 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v6 + 48) + 4 * v26);
      *(void *)(*(void *)(v6 + 56) + 40 * v29) = v25;
      uuid_copy((unsigned __int8 *)(*(void *)(v6 + 56) + 40 * v29 + 12), src);
      *(void *)(*(void *)(v6 + 56) + 40 * v29 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a4;
      *(_DWORD *)(*(void *)(v6 + 48) + 4 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v29;
      ++*(_DWORD *)(v6 + 68);
      ++*(_DWORD *)(v6 + 80);
LABEL_41:
      *(void *)src = ClientIdentifier;
      uuid_copy(v53, (const unsigned __int8 *)&v57);
      uint64_t v17 = v6;
      uint64_t v18 = a4;
      goto LABEL_59;
  }
}

void re::DirectResourceAssetTracker::~DirectResourceAssetTracker(re::DirectResourceAssetTracker *this)
{
}

void re::DirectResourceAssetTracker::setResourceAndUpdate(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v38 = *(void *)a2;
  uuid_copy(v39, a2 + 8);
  uint64_t v6 = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(a1 + 136, (uint64_t)&v38);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 32);
      uint64_t v9 = 8 * v7;
      while (1)
      {
        uint64_t v10 = (re::MeshAsset *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 120))(&v33);
        if ((_BYTE)v33) {
          break;
        }
LABEL_32:
        v8 += 8;
        v9 -= 8;
        if (!v9) {
          return;
        }
      }
      if (v35)
      {
        uint64_t v11 = (uint64_t *)*((void *)v35 + 33);
        unint64_t v12 = re::MeshAsset::assetType(v10);
        if (v11 == v12)
        {
          uint64_t v13 = DRResourceAsMesh();
          uint64_t v14 = v35;
          if (!v35) {
            goto LABEL_30;
          }
          uint64_t v15 = v13;
          uint64_t v16 = (os_unfair_lock_s *)*((void *)v35 + 3);
          if (v16)
          {
            re::AssetManager::convertToMutable(v16, (const re::AssetHandle *)&v34);
            uint64_t v14 = v35;
            if (!v35) {
              goto LABEL_30;
            }
          }
          unsigned int v17 = atomic_load((unsigned int *)v14 + 176);
          if (v17 != 2) {
            goto LABEL_30;
          }
          re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v34);
          ++*((_DWORD *)v35 + 65);
          uint64_t v18 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)&v34);
          if (!v18) {
            goto LABEL_30;
          }
          char v19 = (re::MeshAsset *)v18;
          re::DirectMeshPayload::dynamicCast((id *)(v18 + 288), v36);
          if (v36[0])
          {
            if ((a4 & 1) == 0) {
              [(os_unfair_lock_s *)v36[0] setDirectMesh:v15];
            }
            re::MeshAsset::replaceContentsWithPayload(v19, (id *)v36, (id *)a1, *(re::MeshManager **)(a1 + 8));
            re::MeshAsset::registerRuntimeData((uint64_t)v19, *(void *)(a1 + 8));
            uint64_t v20 = v36[0];
          }
          else
          {
            uint64_t v20 = 0;
          }

          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v12 = re::MeshAsset::assetType(v10);
      }
      if (!v35)
      {
        re::TextureAsset::assetType((re::TextureAsset *)v12);
        goto LABEL_30;
      }
      int v21 = (uint64_t *)*((void *)v35 + 33);
      if (v21 != re::TextureAsset::assetType((re::TextureAsset *)v12)) {
        goto LABEL_30;
      }
      uint64_t v22 = DRResourceAsTexture();
      int v23 = v35;
      if (!v35) {
        goto LABEL_30;
      }
      uint64_t v24 = v22;
      unint64_t v25 = (os_unfair_lock_s *)*((void *)v35 + 3);
      if (v25)
      {
        re::AssetManager::convertToMutable(v25, (const re::AssetHandle *)&v34);
        int v23 = v35;
        if (!v35) {
          goto LABEL_30;
        }
      }
      unsigned int v26 = atomic_load((unsigned int *)v23 + 176);
      if (v26 != 2) {
        goto LABEL_30;
      }
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v34);
      ++*((_DWORD *)v35 + 65);
      uint64_t v27 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v34);
      if (!v27) {
        goto LABEL_30;
      }
      uint64_t v28 = (void *)v27;
      uint64_t v29 = *(void **)(v27 + 112);
      if (v29)
      {
        if ((a4 & 1) == 0) {
          [v29 setDirectTexture:v24];
        }
        if (v24) {
          id v30 = (id)DRTextureReadTexture();
        }
        else {
          id v30 = 0;
        }
        id v37 = v30;
        if (v28[7] && v28[6])
        {
          re::TextureHandle::setMetalTexture((const re::TextureHandle *)(v28 + 6), &v37);
        }
        else
        {
          uint64_t v31 = *(os_unfair_lock_s **)(a1 + 24);
          if (v31)
          {
            re::TextureManager::registerTexture(v31, &v37, v36);
            re::TextureHandle::operator=((re::TextureHandle *)(v28 + 6), (re::TextureHandle *)v36);
            re::TextureHandle::invalidate((re::TextureHandle *)v36);
          }
        }
        re::TextureHandle::setMetalTexture((const re::TextureHandle *)(v28 + 17), &v37);
        if (v37) {
      }
        }
LABEL_44:
      int v32 = (os_unfair_lock_s *)v35;
      *((unsigned char *)v35 + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
      re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v32);
      re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v35);
LABEL_30:
      if ((_BYTE)v33) {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
      }
      goto LABEL_32;
    }
  }
}

void *re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a3;
  uint64_t v7 = 0;
  memset(v5, 0, sizeof(v5));
  int v6 = 0;
  int v3 = (void *)re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::add(a1 + 136, a2, (uint64_t)v5);
  if (v5[0] && v7) {
    (*(void (**)(void))(*(void *)v5[0] + 40))();
  }
  return re::DynamicArray<re::TransitionCondition *>::add(v3, &v8);
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v15, (void *)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_9;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_9:
    unsigned int v12 = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 80 * v12;
    return v13 + 40;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    if (*(void *)(v10 + 80 * v9 + 16) == *(void *)a2)
    {
      int v11 = uuid_compare((const unsigned __int8 *)(v10 + 80 * v9 + 24), (const unsigned __int8 *)(a2 + 8));
      uint64_t v10 = *(void *)(a1 + 16);
      if (!v11) {
        break;
      }
    }
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  uint64_t v13 = v10 + 80 * v9;
  return v13 + 40;
}

uint64_t re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v4 = a1 + 136;
  uint64_t result = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(a1 + 136, a2);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = re::DynamicArray<unsigned long long>::remove(result, &v7);
    if (!*(void *)(v6 + 16)) {
      return re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::remove(v4, a2);
    }
  }
  return result;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v9, (void *)a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    if (*(void *)(v6 + 80 * v5 + 16) == *(void *)a2)
    {
      int v7 = uuid_compare((const unsigned __int8 *)(v6 + 80 * v5 + 24), (const unsigned __int8 *)(a2 + 8));
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v7) {
        break;
      }
    }
    uint64_t v5 = *(_DWORD *)(v6 + 80 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 80 * v5 + 40;
}

BOOL re::DynamicArray<unsigned long long>::remove(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = *(void **)(a1 + 32);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        uint64_t v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 32);
  }
  uint64_t v6 = (uint64_t)v5 - v2;
  uint64_t v7 = v6 >> 3;
  if (v6 >> 3 != v3) {
    re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt(a1, v6 >> 3);
  }
  return v7 != v3;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v18, (void *)a2);
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v5);
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = 0x7FFFFFFFLL;
  while (*(void *)(v7 + 80 * v6 + 16) != *(void *)a2)
  {
LABEL_7:
    uint64_t v8 = v6;
    uint64_t v6 = *(_DWORD *)(v7 + 80 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF) {
      return 0;
    }
  }
  if (uuid_compare((const unsigned __int8 *)(v7 + 80 * v6 + 24), (const unsigned __int8 *)(a2 + 8)))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(v10 + 80 * v6 + 8) & 0x7FFFFFFF;
  if (v8 == 0x7FFFFFFF) {
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v11;
  }
  else {
    *(_DWORD *)(v10 + 80 * v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v10 + 80 * v8 + 8) & 0x80000000 | v11;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 80 * v6;
  int v16 = *(_DWORD *)(v13 + 8);
  char v15 = (int *)(v13 + 8);
  int v14 = v16;
  if (v16 < 0)
  {
    *char v15 = v14 & 0x7FFFFFFF;
    re::DynamicArray<unsigned long>::deinit(v12 + 80 * v6 + 40);
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 80 * v6 + 8);
  }
  int v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 80 * v6 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::DirectResourceAssetTracker::findResource(uint64_t a1, uint64_t a2, unsigned __int8 *src)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 88;
  uint64_t v5 = a2;
  uuid_copy(v6, src);
  uint64_t result = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(v3, (uint64_t)&v5);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v9, (void *)a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    if (*(void *)(v6 + 48 * v5 + 16) == *(void *)a2)
    {
      int v7 = uuid_compare((const unsigned __int8 *)(v6 + 48 * v5 + 24), (const unsigned __int8 *)(a2 + 8));
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v7) {
        break;
      }
    }
    uint64_t v5 = *(_DWORD *)(v6 + 48 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 48 * v5 + 40;
}

uint64_t re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet(uint64_t a1, unsigned __int8 *uu2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((unint64_t)(*((void *)uu2 + 1)
                                            + (*(void *)uu2 << 6)
                                            + (*(void *)uu2 >> 2)
                                            - 0x61C8864680B583E9) ^ *(void *)uu2)
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (1)
  {
    int v6 = uuid_compare((const unsigned __int8 *)(v5 + 40 * v4 + 12), uu2);
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v6) {
      break;
    }
    uint64_t v4 = *(_DWORD *)(v5 + 40 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 40 * v4 + 32;
}

double re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 40);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 80;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  return (((a2[2] + (a2[1] << 6) + (a2[1] >> 2) - 0x61C8864680B583E9) ^ a2[1])
        + (v3 << 6)
        + (v3 >> 2)
        - 0x61C8864680B583E9) ^ v3;
}

void re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = v6 + 24;
        do
        {
          if ((*(_DWORD *)(v14 - 16) & 0x80000000) != 0)
          {
            unint64_t v15 = *(void *)(v14 - 24);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
              *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 48 * v18 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 48 * v1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 48 * v18;
            *(void *)(v22 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(v14 - 8);
            uuid_copy((unsigned __int8 *)(v22 + 24), (const unsigned __int8 *)v14);
            *(void *)(*(void *)(a1 + 16) + 48 * v18 + 40) = *(void *)(v14 + 16);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * vre::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)this + 17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v12;
          }
          ++v11;
          v14 += 48;
        }
        while (v11 < v10);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(const unsigned __int8 **)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((*((_DWORD *)v6 + 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *(void *)v6 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
              *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 40 * v17 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v17 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 40 * vre::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)this + 17) = v14;
            uuid_copy((unsigned __int8 *)(*(void *)(a1 + 16) + 40 * v17 + 12), v6 + 12);
            *(void *)(*(void *)(a1 + 16) + 40 * v17 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *((void *)v6 + 4);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v12;
          }
          ++v11;
          v6 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v32, v14, v13);
          long long v16 = *(_OWORD *)v32;
          *(_OWORD *)int v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v32[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v18;
          *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
          long long v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0) {
                re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(a1, *(void *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 40), v23 - 24, v23);
              }
              ++v22;
              v23 += 80;
            }
            while (v22 < v21);
          }
          re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 80 * v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v10) = a3;
  uint64_t v27 = *(void *)(a1 + 16) + 80 * v10;
  *(void *)(v27 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)a4;
  uuid_copy((unsigned __int8 *)(v27 + 24), (const unsigned __int8 *)(a4 + 8));
  uint64_t v28 = *(void *)(a1 + 16) + 80 * v10;
  *(void *)(v28 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(v28 + 64) = 0;
  *(void *)(v28 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v28 + 40) = 0;
  *(void *)(v28 + 40) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v28 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a5 + 8);
  *(void *)(a5 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v29 = *(void *)(v28 + 56);
  *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a5 + 16);
  *(void *)(a5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v29;
  uint64_t v30 = *(void *)(v28 + 72);
  *(void *)(v28 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a5 + 32);
  *(void *)(a5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v30;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v28 + 64);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::AudioEngineRunnableManager::addReason(float *a1, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v5 = (id)*re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_264BE2BB0[a2]);
    uint64_t v6 = v36 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v38 = v6;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[RE] [Sleep/Wake] Added reason %s to REAudioEngineRunnableManager reasons.", buf, 0xCu);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v7 = a2;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v8 <= a2) {
        unint64_t v2 = a2 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & a2;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  signed int v13 = operator new(0x18uLL);
  *signed int v13 = 0;
  v13[1] = a2;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  *((_DWORD *)v13 + 4) = a2;
  float v15 = a1[8];
  if ((((float)(v15 * (float)v8) >= v14) & ~(v8 == 0)) == 0)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_35;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v20 = operator new(8 * *(void *)&prime);
          unint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_60;
                  }
                  *uint64_t v23 = *v29;
                  *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_60:
                uint64_t v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_64;
        }
        uint64_t v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_64:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v31 = *(void **)a1;
  int v32 = *(void **)(*(void *)a1 + 8 * v2);
  if (v32)
  {
    *signed int v13 = *v32;
LABEL_77:
    *int v32 = v13;
    goto LABEL_78;
  }
  *signed int v13 = *((void *)a1 + 2);
  *((void *)a1 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v13;
  v31[v2] = a1 + 4;
  if (*v13)
  {
    unint64_t v33 = *(void *)(*v13 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    int v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_77;
  }
LABEL_78:
  ++*((void *)a1 + 3);
}

void sub_23355D460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioEngineRunnableManager::removeReason(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = std::__hash_table<REAudioEngineRunnableReason,std::hash<REAudioEngineRunnableReason>,std::equal_to<REAudioEngineRunnableReason>,std::allocator<REAudioEngineRunnableReason>>::find<REAudioEngineRunnableReason>(a1, a2);
  if (!v4) {
    return;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v5) {
      v7 %= *(void *)&v5;
    }
  }
  else
  {
    v7 &= *(void *)&v5 - 1;
  }
  uint8x8_t v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    uint64_t v10 = v9;
    uint8x8_t v9 = (uint64_t *)*v9;
  }
  while (v9 != v4);
  if (v10 == a1 + 2) {
    goto LABEL_19;
  }
  unint64_t v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
  }
  else
  {
    v11 &= *(void *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_19:
    if (v6)
    {
      unint64_t v12 = *(void *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(v6 + 8);
        if (v12 >= *(void *)&v5) {
          unint64_t v13 = v12 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v13 = v12 & (*(void *)&v5 - 1);
      }
      if (v13 == v7) {
        goto LABEL_23;
      }
    }
    *(void *)(*a1 + 8 * v7) = 0;
    uint64_t v6 = *v4;
  }
  if (v6)
  {
    unint64_t v12 = *(void *)(v6 + 8);
LABEL_23:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(void *)(*a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v10;
      uint64_t v6 = *v4;
    }
  }
  *uint64_t v10 = v6;
  *uint64_t v4 = 0;
  --a1[3];
  operator delete(v4);
  float v15 = (id)*re::audioLogObjects(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_264BE2BB0[a2]);
    if (v18 >= 0) {
      BOOL v16 = __p;
    }
    else {
      BOOL v16 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v20 = v16;
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "[RE] [Sleep/Wake] Removed reason %s from REAudioEngineRunnableManager reasons.", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23355D69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t *std::__hash_table<REAudioEngineRunnableReason,std::hash<REAudioEngineRunnableReason>,std::equal_to<REAudioEngineRunnableReason>,std::allocator<REAudioEngineRunnableReason>>::find<REAudioEngineRunnableReason>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int8x8_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t re::audio::getMediaserverdPID(re::audio *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v4, 2555, 0);
  uint64_t v1 = [MEMORY[0x263F28D90] auxiliarySession];
  uint64_t v2 = [v1 opaqueSessionID] >> 12;

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v4);
  return v2 | 0x100000000;
}

void sub_23355D808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_23355D990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23355DBFC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(v4 - 128);
  _Unwind_Resume(a1);
}

void sub_23355DE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_23355DFC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_23355E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void sub_23355E30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23355E6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,void *>>>::operator()[abi:ne180100](1, v14);

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_23355EA20(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23355ECD4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23355EFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_23355F30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a14);
  }

  _Unwind_Resume(a1);
}

void sub_23355F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_23355F664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_23355FA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)va);

  _Unwind_Resume(a1);
}

void sub_23355FB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23355FD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::audio::meshID<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 152);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26E6DA060[v1])(&v4, a1);
}

uint64_t re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  unsigned __int8 v3 = -1;
  v4[0] = &v3;
  v4[1] = &v3;
  v4[2] = &v3;
  v4[3] = &v3;
  uint64_t v1 = *(unsigned int *)(a1 + 152);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int8x8_t v5 = v4;
  ((void (*)(void **, uint64_t))off_26E6DA110[v1])(&v5, a1);
  return v3;
}

uint64_t re::audio::entityID<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 152);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26E6DA080[v1])(&v4, a1);
}

void sub_2335600BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  re::DynamicArray<re::audio::PHASEOccluderData>::deinit(v12);
  _Unwind_Resume(a1);
}

void sub_233560254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2335603B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(v14);
  _Unwind_Resume(a1);
}

void sub_2335605F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_233560B34(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>::operator()[abi:ne180100](1, v3);
  int8x8_t v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2335610B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a13 && a14 && (a15 & 1) != 0) {
    (*(void (**)(void))(*(void *)a14 + 40))();
  }
  os_unfair_lock_unlock(v16);
  _Unwind_Resume(a1);
}

void sub_233561F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_233562138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_2335621FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233562504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v24);

  _Unwind_Resume(a1);
}

void sub_2335627A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233562F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a31);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a33);
  }

  if (a41) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a41);
  }
  objc_destroyWeak(v41);
  objc_destroyWeak((id *)(v44 - 184));
  _Unwind_Resume(a1);
}

void sub_233563478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void sub_233563A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  if (a39 && a40 && (a41 & 1) != 0) {
    (*(void (**)(void))(*(void *)a40 + 40))();
  }

  _Unwind_Resume(a1);
}

void sub_233563D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_233563DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_233564624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_233564B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_233564E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void sub_233565628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

void sub_233565918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2335659A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233565ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  os_unfair_lock_unlock(v11);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

void sub_233565E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  os_unfair_lock_unlock(v17);
  os_unfair_lock_unlock(v16);

  _Unwind_Resume(a1);
}

void sub_2335662AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  operator delete(v12);
  os_unfair_lock_unlock(v11);
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_2335666F8(_Unwind_Exception *a1)
{
  operator delete(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233566924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233566E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233566F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233566FD8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233567060(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233567268(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2335673D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23356744C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2335675D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2335676B8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(id ***a1, uint64_t a2)
{
  return [***a1 applyMeshRemovals:a2];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(uint64_t a1, uint64_t a2)
{
  return [**(id **)(*(void *)a1 + 8) applyOccluderAdditions:a2];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(uint64_t a1, uint64_t a2)
{
  return [**(id **)(*(void *)a1 + 16) applyOccluderUpdates:a2];
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext createPHASEShape:]::$_3,-[REPHASEContext createPHASEShape:]::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,std::__variant_detail::_Trait::AcousticARKitMeshData> const&>(void ****a1, uint64_t *a2)
{
  char v3 = *a1;
  uint64_t v4 = ***a1;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v11, a2 + 4);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v10, a2 + 9);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v9, a2 + 14);
  int8x8_t v5 = [v4 createAcousticMaterialsArrayWithAbsorption:v11 scattering:v10 soundReduction:v9];
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v9);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)v10);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)v11);
  uint64_t v6 = [**v3 createPhaseShapeWithMeshID:a2[2] materials:v5 mdlMesh:a2[3] arkitMesh:0 meshType:255];
  unint64_t v7 = v3[1];
  uint8x8_t v8 = *v7;
  *unint64_t v7 = (void *)v6;
}

void sub_2335679F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233567A14(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v2 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)va1);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(v1 - 72);
  JUMPOUT(0x233567A00);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext createPHASEShape:]::$_3,-[REPHASEContext createPHASEShape:]::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,std::__variant_detail::_Trait::AcousticARKitMeshData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **(void **)(*a1 + 24);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v10 = [(id)v4 engine];
  uint64_t v6 = re::REPHASEMaterialCache::getMaterials((re::REPHASEMaterialCache *)(v4 + 264), v10, *(MDLMesh **)(a2 + 24));
  uint64_t v7 = [(id)v4 createPhaseShapeWithMeshID:v5 materials:v6 mdlMesh:*(void *)(a2 + 24) arkitMesh:1 meshType:*(unsigned __int8 *)(a2 + 32)];
  uint8x8_t v8 = *(void ***)(v3 + 16);
  uint8x8_t v9 = *v8;
  *uint8x8_t v8 = (void *)v7;
}

void sub_233567AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 112 * v8;
      uint64_t v12 = 112 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 32, (uint64_t *)(v9 + v11 + 32));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 72, (uint64_t *)(v9 + v11 + 72));
        v9 += 112;
        v12 -= 112;
        v10 += 112;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v13, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = (re::DynamicString *)(*(void *)(a1 + 32) + 112 * v4);
      uint64_t v7 = -112 * v4 + 112 * v5;
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 72);
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 32);
        re::DynamicString::deinit(v6);
        uint64_t v6 = (re::DynamicString *)((char *)v6 + 112);
        v7 -= 112;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
}

void *re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 112 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::AcousticAbsorptionMaterial>(v8, v11);
          v8 += 112;
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::AcousticAbsorptionMaterial>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 40) = v8;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a1 + 48);
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a2 + 56);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v11 = a1 + 72;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v12;
  *(void *)(a2 + 80) = v13;
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v14 = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(v11 + 16);
  *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = *(void *)(v11 + 32);
  *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  ++*(_DWORD *)(v11 + 24);
  ++*(_DWORD *)(a2 + 96);
  re::DynamicArray<unsigned long>::deinit(v11);
  re::DynamicArray<unsigned long>::deinit(v7);
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t v5 = (uint64_t *)a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<float>::operator=((uint64_t)this + 32, v5 + 4);
      re::DynamicArray<float>::operator=((uint64_t)this + 72, v5 + 9);
      v5 += 14;
      this = (re::DynamicString *)((char *)this + 112);
    }
    while (v5 != (uint64_t *)a3);
    return (uint64_t *)a3;
  }
  return v5;
}

uint64_t re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticScatteringMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::AcousticScatteringMaterial>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 112 * v8;
      uint64_t v12 = 112 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 32, (uint64_t *)(v9 + v11 + 32));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 72, (uint64_t *)(v9 + v11 + 72));
        v9 += 112;
        v12 -= 112;
        v10 += 112;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v13, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = (re::DynamicString *)(*(void *)(a1 + 32) + 112 * v4);
      uint64_t v7 = -112 * v4 + 112 * v5;
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 72);
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 32);
        re::DynamicString::deinit(v6);
        uint64_t v6 = (re::DynamicString *)((char *)v6 + 112);
        v7 -= 112;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
}

void *re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 112 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::AcousticScatteringMaterial>(v8, v11);
          v8 += 112;
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::AcousticScatteringMaterial>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 40) = v8;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a1 + 48);
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a2 + 56);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v11 = a1 + 72;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v12;
  *(void *)(a2 + 80) = v13;
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v14 = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(v11 + 16);
  *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = *(void *)(v11 + 32);
  *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  ++*(_DWORD *)(v11 + 24);
  ++*(_DWORD *)(a2 + 96);
  re::DynamicArray<unsigned long>::deinit(v11);
  re::DynamicArray<unsigned long>::deinit(v7);
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticSoundReductionMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::AcousticSoundReductionMaterial>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 112 * v8;
      uint64_t v12 = 112 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 32, (uint64_t *)(v9 + v11 + 32));
        re::DynamicArray<float>::DynamicArray(v10 + v11 + 72, (uint64_t *)(v9 + v11 + 72));
        v9 += 112;
        v12 -= 112;
        v10 += 112;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v13, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 112 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = (re::DynamicString *)(*(void *)(a1 + 32) + 112 * v4);
      uint64_t v7 = -112 * v4 + 112 * v5;
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 72);
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 32);
        re::DynamicString::deinit(v6);
        uint64_t v6 = (re::DynamicString *)((char *)v6 + 112);
        v7 -= 112;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
}

void *re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 112 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::AcousticSoundReductionMaterial>(v8, v11);
          v8 += 112;
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::AcousticSoundReductionMaterial>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 40) = v8;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a1 + 48);
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a2 + 56);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v11 = a1 + 72;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v12;
  *(void *)(a2 + 80) = v13;
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v14 = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(v11 + 16);
  *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = *(void *)(v11 + 32);
  *(void *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v15;
  ++*(_DWORD *)(v11 + 24);
  ++*(_DWORD *)(a2 + 96);
  re::DynamicArray<unsigned long>::deinit(v11);
  re::DynamicArray<unsigned long>::deinit(v7);
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::AcousticScatteringMaterial>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
          re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio6meshIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio6meshIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7mdlMeshINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 24);
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7mdlMeshINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS8_5audio19lastUpdateTimestampINS_7variantIJNSB_16AcousticMeshDataENSB_21AcousticARKitMeshDataEEEEEEDaRKT_EUlRKSE_E_ZNSC_ISG_EESH_SK_EUlRKSF_E_ZNSC_ISG_EESH_SK_EUlRKNSB_22AcousticMeshUpdateDataEE_ZNSC_ISG_EESH_SK_EUlRKNSB_27AcousticARKitMeshUpdateDataEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_(uint64_t **a1, uint64_t a2)
{
  double result = *(double *)(a2 + 40);
  uint64_t v3 = **a1;
  *(double *)uint64_t v3 = result;
  *(unsigned char *)(v3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9oldMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9oldMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9newMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9newMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS8_5audio19lastUpdateTimestampINS_7variantIJNSB_22AcousticMeshUpdateDataENSB_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlRKNSB_16AcousticMeshDataEE_ZNSC_ISG_EESH_SK_EUlRKNSB_21AcousticARKitMeshDataEE_ZNSC_ISG_EESH_SK_EUlRKSE_E_ZNSC_ISG_EESH_SK_EUlRKSF_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 48);
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  *(double *)uint64_t v3 = result;
  *(unsigned char *)(v3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 152);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26E6DA100[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 112);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2 + 72);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__deallocate_node(*(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      BOOL v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * vre::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * vre::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  size_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  double result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

unsigned char ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshUpdateData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshUpdateData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&>(unsigned char ***result)
{
  **void *result = -1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshUpdateData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshUpdateData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&>(uint64_t result, uint64_t a2)
{
  **(unsigned char **)(*(void *)result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(unsigned char *)(a2 + 32);
  return result;
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        uint64_t v6 = (void **)(v3 + 24);
        do
        {
          unint64_t v7 = *v6;
          v6 += 6;

          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint8x8_t v10 = &v8[3 * v9];
        unint64_t v11 = v7;
        do
        {
          long long v12 = *v8;
          uint64_t v11[2] = *((void *)v8 + 2);
          *(_OWORD *)unint64_t v11 = v12;
          uint64_t v13 = *((void *)v8 + 3);
          *((void *)v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
          void v11[3] = v13;
          *((_OWORD *)v11 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v8[2];

          v8 += 3;
          v11 += 6;
        }
        while (v8 != v10);
        uint64_t v8 = (long long *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        uint64_t v6 = (void **)(v3 + 32);
        do
        {
          unint64_t v7 = *v6;
          v6 += 7;

          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 56 * v9;
        unint64_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v8;
          *((_OWORD *)v11 + 1) = v12;
          uint64_t v13 = *(void *)(v8 + 32);
          *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
          v11[4] = v13;
          *(_OWORD *)(v11 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = *(_OWORD *)(v8 + 40);

          v8 += 56;
          v11 += 7;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,REPHASESoundAsset>>>::__deallocate_node(char *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = *(char **)v1;
      if (v1[56]) {
        re::DynamicString::deinit((re::DynamicString *)(v1 + 64));
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    if (__p[56]) {
      re::DynamicString::deinit((re::DynamicString *)(__p + 64));
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unsigned int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t i = *v19;
LABEL_38:
    *unsigned int v19 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = i;
  *(void *)(v18 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unsigned int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_233569AF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  }
}

BOOL std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(os_unfair_lock_s *a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_lock(a1);
  for (BOOL result = os_unfair_lock_trylock(a2); !result; BOOL result = os_unfair_lock_trylock(a2))
  {
    os_unfair_lock_unlock(a1);
    sched_yield();
    os_unfair_lock_lock(a2);
    BOOL result = os_unfair_lock_trylock(a1);
    if (result) {
      break;
    }
    os_unfair_lock_unlock(a2);
    sched_yield();
    os_unfair_lock_lock(a1);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(a1, a2);
  if (!v3) {
    return;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v4) {
      v6 %= *(void *)&v4;
    }
  }
  else
  {
    v6 &= *(void *)&v4 - 1;
  }
  unint64_t v8 = *(uint64_t **)(*a1 + 8 * v6);
  do
  {
    uint8x8_t v9 = v8;
    unint64_t v8 = (uint64_t *)*v8;
  }
  while (v8 != v3);
  if (v9 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v10 = v9[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
  }
  else
  {
    v10 &= *(void *)&v4 - 1;
  }
  if (v10 != v6)
  {
LABEL_20:
    if (v5)
    {
      unint64_t v11 = *(void *)(v5 + 8);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v12 = *(void *)(v5 + 8);
        if (v11 >= *(void *)&v4) {
          unint64_t v12 = v11 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v12 = v11 & (*(void *)&v4 - 1);
      }
      if (v12 == v6) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v5 = *v3;
  }
  if (v5)
  {
    unint64_t v11 = *(void *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= *(void *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(void *)(*a1 + 8 * v_ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = v9;
      uint64_t v5 = *v3;
    }
  }
  uint64_t *v9 = v5;
  *unint64_t v3 = 0;
  --a1[3];
  operator delete(v3);
}

void sub_23356A0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23356A1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23356A308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)REAudioStateHandler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *re::allocInfo_AcousticAbsorptionMaterial(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EA48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7EB30, "AcousticAbsorptionMaterial");
    __cxa_guard_release(&qword_26AF7EA48);
  }
  return &unk_26AF7EB30;
}

void re::initInfo_AcousticAbsorptionMaterial(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x5CD9F51973CC76B2;
  v18[1] = "AcousticAbsorptionMaterial";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA50, memory_order_acquire) & 1) == 0)
  {
    int8x8_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7EA50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint8x8_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "identifier";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7EA88 = v8;
      uint8x8_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "frequencies";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7EA90 = v12;
      float v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "absorptionCoefficients";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7EA98 = v16;
      __cxa_guard_release(&qword_26AF7EA50);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7EA88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AcousticAbsorptionMaterial>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AcousticAbsorptionMaterial>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AcousticAbsorptionMaterial>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AcousticAbsorptionMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void sub_23356A66C(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AcousticAbsorptionMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticAbsorptionMaterial>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 32);
  return re::DynamicString::deinit(a3);
}

double re::internal::defaultConstructV2<re::AcousticAbsorptionMaterial>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticAbsorptionMaterial>(re::DynamicString *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 32);
  return re::DynamicString::deinit(a1);
}

uint64_t re::introspect_AcousticAbsorptionMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticAbsorptionMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticAbsorptionMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticAbsorptionMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticAbsorptionMaterial>, this);
}

void *re::allocInfo_AcousticScatteringMaterial(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EA58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7EBA8, "AcousticScatteringMaterial");
    __cxa_guard_release(&qword_26AF7EA58);
  }
  return &unk_26AF7EBA8;
}

void re::initInfo_AcousticScatteringMaterial(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x8A5EEC5268CFFFDCLL;
  v18[1] = "AcousticScatteringMaterial";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA60, memory_order_acquire) & 1) == 0)
  {
    int8x8_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7EA60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint8x8_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "identifier";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7EAA0 = v8;
      uint8x8_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "frequencies";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7EAA8 = v12;
      float v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "scatteringCoefficients";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7EAB0 = v16;
      __cxa_guard_release(&qword_26AF7EA60);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7EAA0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AcousticScatteringMaterial>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AcousticScatteringMaterial>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AcousticScatteringMaterial>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AcousticScatteringMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void sub_23356AB54(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AcousticScatteringMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticScatteringMaterial>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 32);
  return re::DynamicString::deinit(a3);
}

double re::internal::defaultConstructV2<re::AcousticScatteringMaterial>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticScatteringMaterial>(re::DynamicString *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 32);
  return re::DynamicString::deinit(a1);
}

uint64_t re::introspect_AcousticScatteringMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticScatteringMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticScatteringMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticScatteringMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticScatteringMaterial>, this);
}

void *re::allocInfo_AcousticSoundReductionMaterial(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EA68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7EC20, "AcousticSoundReductionMaterial");
    __cxa_guard_release(&qword_26AF7EA68);
  }
  return &unk_26AF7EC20;
}

void re::initInfo_AcousticSoundReductionMaterial(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xC6694DCC9D0B805CLL;
  v18[1] = "AcousticSoundReductionMaterial";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA70, memory_order_acquire) & 1) == 0)
  {
    int8x8_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7EA70);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint8x8_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "identifier";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7EAB8 = v8;
      uint8x8_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "frequencies";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7EAC0 = v12;
      float v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "soundReductionIndices";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7EAC8 = v16;
      __cxa_guard_release(&qword_26AF7EA70);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7EAB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AcousticSoundReductionMaterial>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AcousticSoundReductionMaterial>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AcousticSoundReductionMaterial>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AcousticSoundReductionMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void sub_23356B03C(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AcousticSoundReductionMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticSoundReductionMaterial>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 32);
  return re::DynamicString::deinit(a3);
}

double re::internal::defaultConstructV2<re::AcousticSoundReductionMaterial>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticSoundReductionMaterial>(re::DynamicString *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 32);
  return re::DynamicString::deinit(a1);
}

uint64_t re::introspect_AcousticSoundReductionMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticSoundReductionMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticSoundReductionMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticSoundReductionMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticSoundReductionMaterial>, this);
}

uint64_t *re::introspect_SpatialSceneClassificationType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EA78);
    if (v31)
    {
      int v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "SpatialSceneClassUnknown";
      qword_26AF7EAD0 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      uint64_t v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "SpatialSceneClassIndoor";
      qword_26AF7EAD8 = (uint64_t)v35;
      char v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "SpatialSceneClassOutdoor";
      qword_26AF7EAE0 = v37;
      __cxa_guard_release(&qword_26AF7EA78);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EA80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EA80))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7EAE8, "SpatialSceneClassificationType", 1, 1, 1, 1);
    qword_26AF7EAE8 = (uint64_t)&unk_26E715E00;
    qword_26AF7EB28 = (uint64_t)&re::introspect_SpatialSceneClassificationType(BOOL)::enumTable;
    dword_26AF7EAF8 = 9;
    __cxa_guard_release(&qword_26AF7EA80);
  }
  if (v2)
  {
    if (_MergedGlobals_111) {
      return &qword_26AF7EAE8;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    char v3 = _MergedGlobals_111;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    if (v3) {
      return &qword_26AF7EAE8;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_111)
    {
LABEL_34:
      uint64_t v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7EAE8;
    }
  }
  _MergedGlobals_111 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7EAE8, a2);
  uint64_t v39 = 0x8E339AC29DD900D0;
  uint64_t v40 = "SpatialSceneClassificationType";
  v44[0] = 0x31CD534126;
  v44[1] = "uint8_t";
  uint8x8_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v44);
    uint8x8_t v9 = (unsigned int *)qword_26AF7EB28;
    v43[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v44, &v39, 1, 1, (uint64_t)v43);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          BOOL v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                long long v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v42.char var0 = 2 * v15;
          v42.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v19, &v42);
          re::StringID::destroyString((re::StringID *)&v42);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v42.char var0 = 2 * v23;
            v42.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v27, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v28);
    xmmword_26AF7EB08 = v41;
    re::StringID::destroyString((re::StringID *)&v39);
    if (v2) {
      return &qword_26AF7EAE8;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v44);
  re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SpatialSceneClassificationType", v39, v40);
  double result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_23356B644(_Unwind_Exception *a1)
{
}

BOOL re::GainController::isFadeInProcess(re::GainController *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v1 = *((void *)this + 1);
  if (*(_DWORD *)v1 == *(_DWORD *)(*(void *)this + 16)) {
    return *(double *)(v1 + 16) > 0.0;
  }
  double v4 = *(double *)(v2 + 8);
  if (v4 > 0.0) {
    return 1;
  }
  if (v4 != 0.0 && *(float *)v2 == *(float *)(v2 + 4)) {
    return *(double *)(v1 + 16) > 0.0;
  }
  return 0;
}

float re::GainController::updateGainStatus(re::GainController *this, float a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(_DWORD *)v2 == *(_DWORD *)(*(void *)this + 16))
  {
    double v4 = *(double *)(v2 + 16);
    float v5 = fmin(a2, v4);
    *(float *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(float *)(v2 + 8) + (float)(v5 * *(float *)(v2 + 12));
    double v6 = v4 - v5;
    *(double *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
    if (v6 <= 0.0)
    {
      *(_DWORD *)(v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = LODWORD(v6);
    }
  }
  else
  {
    double v6 = *(double *)(v3 + 8);
    float v7 = *(float *)v3;
    if (v6 == 0.0 || v7 != *(float *)(v3 + 4))
    {
      *(float *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7;
      *(_DWORD *)(v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
    }
    if (v6 > 0.0)
    {
      float v8 = (float)(*(float *)(v3 + 4) - *(float *)(v2 + 8)) / v6;
      *(float *)(v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v8;
      *(double *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
    }
  }
  return *(float *)&v6;
}

id ___ZN2re24AudioManager_PHASE_Async22getREAudioStateHandlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v2)
  {
    uint64_t v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9[0]) = 0;
      _os_log_debug_impl(&dword_233120000, v3, OS_LOG_TYPE_DEBUG, "Aborting callback since the engine was shut down.", (uint8_t *)v9, 2u);
    }
    id v4 = 0;
  }
  else
  {
    float v5 = [MEMORY[0x263EFF9A0] dictionary];
    float v7 = *(pthread_rwlock_t **)(v1 + 232);
    uint64_t v6 = v1 + 232;
    v9[0] = v6 + 16;
    v9[1] = v6;
    pthread_rwlock_rdlock(v7);
    objc_msgSend(*(id *)(v6 + 16), "fillOutDebugInformation:", v5, v6 + 16, v6);
    id v4 = v5;
    pthread_rwlock_unlock(*(pthread_rwlock_t **)v6);
  }
  return v4;
}

void sub_23356B850(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

REPHASEContext *re::AudioManager_PHASE_Async::createPhaseContext(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [MEMORY[0x263EFFA40] standardUserDefaults];
  float v5 = [v4 objectForKey:@"com.apple.re.audioMaxGain"];
  uint64_t v6 = v5;
  if (v5)
  {
    [v5 floatValue];
    *(double *)&sMaxGainDecibels = v7;
  }
  float v8 = [v4 objectForKey:@"com.apple.re.audio.normalizationMode"];
  uint8x8_t v9 = v8;
  if (v8)
  {
    unint64_t v10 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v27 = (const char *)v9;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Setting sDefaultNormalizationMode from user defaults = %@", buf, 0xCu);
    }
    [(re *)v9 integerValue];
  }
  unint64_t v11 = [v4 objectForKey:@"com.apple.re.audio.phaseStopOnIdle"];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = (re *)[v11 BOOLValue];
    *(unsigned char *)(a1 + 340) = (_BYTE)v13;
    BOOL v14 = *re::audioLogObjects(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 340)) {
      uint64_t v15 = "true";
    }
    else {
      uint64_t v15 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v27 = v15;
    char v16 = "Setting phaseStopOnIdle from user defaults = %s";
  }
  else
  {
    BOOL v14 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 340)) {
      long long v17 = "true";
    }
    else {
      long long v17 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v27 = v17;
    char v16 = "Using default phaseStopOnIdle from user defaults = %s";
  }
  _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
LABEL_19:
  int v18 = [REPHASEContext alloc];
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 568);
  uint64_t v24 = *(void *)(a1 + 560);
  uint8x8_t v25 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = [(REPHASEContext *)v18 initWithSampleRate:v3 phaseQueue:&v24 audioEngineRunnableManager:48000.0];
  uint64_t v21 = (re *)v25;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  }
  uint64_t v22 = *re::audioLogObjects(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    uint64_t v27 = (const char *)v20;
    __int16 v28 = 2048;
    uint64_t v29 = sMaxGainDecibels;
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "REPHASEContext %@ created, maximumGainDbSpl = %f", buf, 0x16u);
  }

  return v20;
}

void sub_23356BB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::AudioManager_PHASE_Async(uint64_t a1, void *a2, void *a3)
{
  a2;
  id v5 = a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 766030772;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a1 + 32;
  *(void *)(a1 + 240) = a1 + 32;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 32), 0);
  *(void *)(a1 + 24re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 25re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1065353216;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 32re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(a1 + 340) = 1;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 35re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 36re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_DWORD *)(a1 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  uint64_t v6 = MEMORY[0x263EF83A0];
  id v7 = MEMORY[0x263EF83A0];
  *(void *)(a1 + 40re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  *(void *)(a1 + 41re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 43re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 44re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(void *)(a1 + 47re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 52re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 48re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 53re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  float v8 = (re::audio::SoundAssetRegistrarFactory *)v5;
  *(void *)(a1 + 544) = v8;
  re::audio::SoundAssetRegistrarFactory::createRegistrar(v8);
}

void sub_23356BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pthread_rwlock_t **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  std::lock_guard<re::ReadWriteLock::Writer>::~lock_guard[abi:ne180100](&a12);
  uint8x8_t v25 = *(std::__shared_weak_count **)(v18 + 568);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  }
  uint64_t v26 = *v22;
  *uint64_t v22 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }

  re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit(v21);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table(v17 + 184);

  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(v17 + 104);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a9);

  re::ReadWriteLock::~ReadWriteLock(v20);
  re::PhaseEnginePrimer::~PhaseEnginePrimer((id *)v18);

  _Unwind_Resume(a1);
}

void re::PhaseEnginePrimer::~PhaseEnginePrimer(id *this)
{
}

void re::AudioManager_PHASE_Async::~AudioManager_PHASE_Async(re::AudioManager_PHASE_Async *this)
{
  pthread_rwlock_wrlock(*((pthread_rwlock_t **)this + 30));
  id v2 = *((id *)this + 31);
  id v3 = [v2 maybeEngine];
  [v3 stop];

  id v4 = *((id *)this + 31);
  [v4 stopAllAndReset];

  id v5 = (void *)*((void *)this + 31);
  *((void *)this + 31) = 0;

  [*((id *)this + 39) invalidate];
  uint64_t v6 = (void *)*((void *)this + 39);
  *((void *)this + 39) = 0;

  float v8 = *re::audioLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] AudioManager_PHASE destroyed", v11, 2u);
  }
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 30));
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  uint64_t v10 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }

  re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit((uint64_t *)this + 61);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)this + 432);

  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table((uint64_t)this + 352);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 264);

  re::ReadWriteLock::~ReadWriteLock((re::AudioManager_PHASE_Async *)((char *)this + 32));
}

id re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v7 = a2;
  id v3 = this + 86;
  os_unfair_lock_lock(this + 86);
  id v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[88]._os_unfair_lock_opaque, &v7);
  if (v4) {
    id v5 = _Block_copy((const void *)v4[3]);
  }
  else {
    id v5 = 0;
  }
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_23356C1DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setPlaybackStateChangeHandlerForToken(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v8 = a2;
  id v4 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 344));
  if (v4)
  {
    id v5 = _Block_copy(v4);
    uint8x8_t v9 = &v8;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(a1 + 352), &v8, (uint64_t)&std::piecewise_construct, &v9);
    unint64_t v7 = (void *)v6[3];
    v6[3] = v5;
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__erase_unique<unsigned long long>((void *)(a1 + 352), &v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 344));
}

void sub_23356C294(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::playbackStateDidChangeForToken(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken(a1, a2);
  uint64_t v6 = (void (**)(id, uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
  if (v6) {
    v6[2](v6, a3, a4);
  }
}

void sub_23356C314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::playbackHostConnectionIdentifier(re::AudioManager_PHASE_Async *this)
{
  id v2 = (os_unfair_lock_s *)((char *)this + 336);
  os_unfair_lock_lock((os_unfair_lock_t)this + 84);
  uint64_t v3 = [*((id *)this + 40) connectionIdentifier];
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_23356C36C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::joinPlaybackHostingServiceAtEndpoint(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 408);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  if (*(void *)(a1 + 320))
  {
    uint64_t v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Audio service closing existing connection to playback hosting service", buf, 2u);
    }
    unint64_t v7 = *(void **)(a1 + 320);
    *(void *)(a1 + 320) = 0;

    id v8 = *(id *)(a1 + 544);
    uint8x8_t v9 = v8;
    if (v4)
    {
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 3221225472;
      void v13[2] = ___ZN2re24AudioManager_PHASE_Async36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
      void v13[3] = &unk_264BE2C48;
      uint64_t v15 = a1;
      id v14 = v8;
      dispatch_async(v4, v13);
    }
  }
  if (v3)
  {
    uint64_t v10 = [[REAudioPlaybackClientService alloc] initWithXPCEndpoint:v3 queue:*(void *)(a1 + 408) service:*(void *)(a1 + 544)];
    unint64_t v11 = *(void **)(a1 + 320);
    *(void *)(a1 + 320) = v10;

    float v12 = 0.0;
    if (!*(void *)(a1 + 320)) {
      float v12 = REAudioEngineShutdownTimerLength();
    }
    atomic_store(LODWORD(v12), (unsigned int *)(a1 + 396));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
}

void sub_23356C4FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 40);
  id v2 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v2)
  {
    id v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Engine cancelled, not calling completion", v4, 2u);
    }
  }
  else
  {
    re::AudioManager_PHASE_Async::triggerPlaybackConnectionDisconnectCallbacks(v1);
  }
}

uint64_t re::AudioManager_PHASE_Async::triggerPlaybackConnectionDisconnectCallbacks(os_unfair_lock_s *this)
{
  long long v6 = 0u;
  long long v7 = 0u;
  int os_unfair_lock_opaque = 1065353216;
  id v2 = this + 106;
  os_unfair_lock_lock(this + 106);
  if (&v6 != (long long *)&this[108])
  {
    int os_unfair_lock_opaque = this[116]._os_unfair_lock_opaque;
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *> *>>(&v6, *(void **)&this[112]._os_unfair_lock_opaque, 0);
  }
  os_unfair_lock_unlock(v2);
  for (unint64_t i = (void *)v7; i; unint64_t i = (void *)*i)
    (*(void (**)(void, uint64_t))(i[3] + 16))(i[3], v3);
  return std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)&v6);
}

void sub_23356C64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::copyOrCreateEndpointForPlaybackHostingService(re::AudioManager_PHASE_Async *this)
{
  id v2 = (os_unfair_lock_s *)((char *)this + 336);
  os_unfair_lock_lock((os_unfair_lock_t)this + 84);
  uint64_t v3 = (void *)*((void *)this + 41);
  if (!v3)
  {
    id v4 = objc_alloc_init(REAudioPlaybackHostingService);
    id v5 = (void *)*((void *)this + 41);
    *((void *)this + 41) = v4;

    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke;
    v9[3] = &__block_descriptor_40_e11_v20__0Q8B16l;
    v9[4] = this;
    [*((id *)this + 41) setDidConnectBlock:v9];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    v8[2] = ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke_29;
    uint64_t v8[3] = &__block_descriptor_40_e8_v16__0Q8l;
    v8[4] = this;
    [*((id *)this + 41) setDidDisconnectBlock:v8];
    uint64_t v3 = (void *)*((void *)this + 41);
  }
  long long v6 = [v3 endpoint];
  os_unfair_lock_unlock(v2);
  return v6;
}

void sub_23356C798(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  if (a3)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(a1 + 32);
    id v4 = v3 + 76;
    os_unfair_lock_lock(v3 + 76);
    id v5 = (re *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v3[66], &v7, &v7);
    long long v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v9 = v7;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Connection Identifier %llu added to sensitivePlaybackHostConnectionIdentifiers set.", buf, 0xCu);
    }
    os_unfair_lock_unlock(v4);
  }
}

void sub_23356C87C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke_29(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  id v2 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v3 = v2 + 76;
  os_unfair_lock_lock(v2 + 76);
  id v4 = v2 + 66;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(v4, &v7))
  {
    id v5 = std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__erase_unique<unsigned long long>(v4, &v7);
    long long v6 = *re::audioLogObjects((re *)v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v9 = v7;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Connection Identifier %llu removed from sensitivePlaybackHostConnectionIdentifiers set.", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v3);
}

void sub_23356C96C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereLost(uint64_t this)
{
  if (*(void *)(this + 328))
  {
    uint64_t v1 = this;
    long long v12 = 0u;
    long long v13 = 0u;
    int v14 = 1065353216;
    uint64_t v3 = this + 232;
    id v2 = *(pthread_rwlock_t **)(this + 232);
    uint64_t v10 = v3 + 16;
    uint64_t v11 = v3;
    pthread_rwlock_rdlock(v2);
    id v4 = *(id *)(v3 + 16);
    id v5 = v4;
    if (v4)
    {
      [v4 playbackClientsWithPreparedOrPreparingSounds];
    }
    else
    {
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v12, (uint64_t *)&v7);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v7);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
    for (unint64_t i = (void *)v13; i; unint64_t i = (void *)*i)
      objc_msgSend(*(id *)(v1 + 328), "connectionIdentifierLostMediaServices:", i[2], v7, v8, v9);
    return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v12);
  }
  return this;
}

void sub_23356CA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereReset(uint64_t this)
{
  if (*(void *)(this + 328))
  {
    uint64_t v1 = this;
    long long v12 = 0u;
    long long v13 = 0u;
    int v14 = 1065353216;
    uint64_t v3 = this + 232;
    id v2 = *(pthread_rwlock_t **)(this + 232);
    uint64_t v10 = v3 + 16;
    uint64_t v11 = v3;
    pthread_rwlock_rdlock(v2);
    id v4 = *(id *)(v3 + 16);
    id v5 = v4;
    if (v4)
    {
      [v4 playbackClientsWithPreparedOrPreparingSounds];
    }
    else
    {
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v12, (uint64_t *)&v7);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v7);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
    for (unint64_t i = (void *)v13; i; unint64_t i = (void *)*i)
      objc_msgSend(*(id *)(v1 + 328), "connectionIdentifierResetMediaServices:", i[2], v7, v8, v9);
    return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v12);
  }
  return this;
}

void sub_23356CB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL re::AudioManager_PHASE_Async::isPlaybackHostConnectionIdentifierSensitive(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v6 = a2;
  uint64_t v3 = this + 76;
  os_unfair_lock_lock(this + 76);
  BOOL v4 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(&this[66]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

id re::AudioManager_PHASE_Async::swapPhaseContext(re::AudioManager_PHASE_Async *this, REPHASEContext *a2)
{
  BOOL v4 = a2;
  pthread_rwlock_wrlock(*((pthread_rwlock_t **)this + 30));
  id v5 = (void *)*((void *)this + 31);
  this = (re::AudioManager_PHASE_Async *)((char *)this + 248);
  id v6 = v5;
  objc_storeStrong((id *)this, a2);
  atomic_store(0, (unint64_t *)this + 21);
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this - 1));

  return v6;
}

void sub_23356CC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getAudioEnginePHASE(pthread_rwlock_t **this)
{
  uint64_t v1 = (id *)(this + 29);
  BOOL v4 = (char *)(this + 31);
  id v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  id v2 = objc_msgSend(v1[2], "maybeEngine", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_23356CCE8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getPHASEOccluderForSceneAndEntity(re::AudioManager_PHASE_Async *this, uint64_t a2, unint64_t a3)
{
  id v6 = (id *)((char *)this + 232);
  id v5 = (pthread_rwlock_t *)*((void *)this + 29);
  uint64_t v15 = (char *)(v6 + 2);
  char v16 = v6;
  pthread_rwlock_rdlock(v5);
  id v7 = v6[2];
  long long v8 = v7;
  if (v7)
  {
    [v7 sceneForID:a2];
  }
  else
  {
    long long v13 = 0;
    int v14 = 0;
  }

  if (v13)
  {
    re::audio::REPHASEAudioScene::getEntity((os_unfair_lock_s *)v13, a3, &v11);
    if (v11) {
      id v9 = *(id *)(v11 + 24);
    }
    else {
      id v9 = 0;
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v12);
    }
  }
  else
  {
    id v9 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v14);
  }
  pthread_rwlock_unlock((pthread_rwlock_t *)*v6);
  return v9;
}

void sub_23356CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a5);
  }
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::createSamplerDefinitionForToken(pthread_rwlock_t **this, uint64_t a2)
{
  uint64_t v3 = (id *)(this + 29);
  id v6 = (char *)(this + 31);
  id v7 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  BOOL v4 = objc_msgSend(v3[2], "createSamplerDefinitionForToken:", a2, v6, v7);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
  return v4;
}

void sub_23356CE90(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::afterFrameUpdate(uint64_t a1, int a2, uint64_t a3, float a4)
{
  re::audio::getPhase3AcousticMeshEventSignpostData(a3, (uint64_t)&block);
  re::audio::emitPhase3AcousticMeshEventSignposts((uint64_t)&block);
  long long v8 = (id *)(a1 + 248);
  uint64_t v24 = (pthread_rwlock_t **)(a1 + 232);
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  [*(id *)(a1 + 248) applyMeshEvents:a3];
  [*(id *)(a1 + 248) update];
  id v9 = (re::AudioManagerTelemetryReporter *)[*(id *)(a1 + 248) engineShouldBeRunning];
  char v10 = v9 ^ 1;
  if (a2 >= 1) {
    char v10 = 0;
  }
  if (v10)
  {
    float v12 = *(float *)(a1 + 392);
    if (v12 <= 0.0)
    {
      id v13 = *v8;
      [v13 engine];

      *(_DWORD *)(a1 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      id v14 = *(id *)(a1 + 248);
      uint64_t v15 = [v14 maybeEngine];
      re::AudioManager_PHASE_Async::idlePhaseEngine((re::AudioManager_PHASE_Async *)a1, v15);
    }
    else
    {
      *(float *)(a1 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v12 - a4;
    }
  }
  else
  {
    unsigned int v11 = atomic_load((unsigned int *)(a1 + 396));
    *(_DWORD *)(a1 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11;
    long long v8 = (id *)(a1 + 248);
  }
  uint64_t Instance = re::AudioManagerTelemetryReporter::getInstance(v9);
  id v17 = *v8;
  int v18 = [v17 getPlayingSoundEventsCount];
  blocuint64_t k = MEMORY[0x263EF8330];
  uint64_t v26 = 3221225472;
  uint64_t v27 = ___ZN2re29AudioManagerTelemetryReporter25updateConcurrentPlayCountEj_block_invoke;
  __int16 v28 = &__block_descriptor_44_e5_v8__0l;
  uint64_t v29 = Instance;
  int v30 = v18;
  dispatch_async((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &block);

  uint64_t v20 = re::AudioManagerTelemetryReporter::getInstance(v19);
  id v21 = *v8;
  int v22 = [v21 getPreparingSoundEventsCount];
  blocuint64_t k = MEMORY[0x263EF8330];
  uint64_t v26 = 3221225472;
  uint64_t v27 = ___ZN2re29AudioManagerTelemetryReporter28updateConcurrentPrepareCountEj_block_invoke;
  __int16 v28 = &__block_descriptor_44_e5_v8__0l;
  uint64_t v29 = v20;
  int v30 = v22;
  dispatch_async((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &block);

  return pthread_rwlock_unlock(*v24);
}

void sub_23356D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  id v31 = *(id *)(a1 + 248);
  uint64_t v23 = a1;
  BOOL v4 = (re *)pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
  uint64_t v30 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  int v29 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v5 = a2[2];
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = a2[5] + 48 * ((unint64_t)(i + a2[3]) % a2[1]);
      *(void *)long long buf = &v26;
      *(void *)&uint8_t buf[8] = &v27;
      *(void *)&uint8_t buf[16] = &v25;
      uint64_t v34 = &v27;
      uint64_t v35 = &v31;
      char v36 = &v24;
      uint64_t v37 = &v27;
      uint64_t v38 = &v31;
      uint64_t v8 = *(unsigned int *)(v7 + 40);
      if (v8 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      int v32 = buf;
      BOOL v4 = (re *)((uint64_t (*)(unsigned char **))off_26E6DA158[v8])(&v32);
    }
  }
  id v9 = re::audioLogObjects(v4);
  char v10 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v9);
  if (v10)
  {
    int v22 = *re::audioLogObjects(v10);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v34 = v24;
      _os_log_debug_impl(&dword_233120000, v22, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE_Async::afterFrameSlowMeshEvents() processed %lu removals, %lu additions, and %lu updates", buf, 0x20u);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 480));
  unint64_t v13 = *(void *)(a1 + 496);
  uint64_t v12 = *(void *)(a1 + 504);
  unint64_t v14 = v12 + 1;
  if (v12 + 1 >= v13)
  {
    if (v13 < v14)
    {
      uint64_t v15 = (uint64_t *)(a1 + 504);
      if (*(void *)(v23 + 488))
      {
        unint64_t v16 = 2 * v13;
        if (!v13) {
          unint64_t v16 = 8;
        }
        if (v16 <= v14) {
          unint64_t v17 = v14;
        }
        else {
          unint64_t v17 = v16;
        }
        re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity((void *)(v23 + 488), v17);
        uint64_t v12 = *v15;
      }
      else
      {
        re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity((void *)(v23 + 488), v14);
        uint64_t v12 = 0;
        *uint64_t v15 = 0;
        *(void *)(v23 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
        *(_DWORD *)(v23 + 520) = 0;
      }
    }
    unint64_t v13 = *(void *)(v23 + 496);
  }
  uint64_t v18 = *(void *)(v23 + 528) + 48 * ((*(void *)(v23 + 512) + v12) % v13);
  *(void *)(v18 + 40) = 0;
  *(_DWORD *)(v18 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)uint64_t v18 = v27;
  *(void *)&long long v27 = 0;
  *(void *)(v18 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *((void *)&v27 + 1);
  *((void *)&v27 + 1) = 0;
  uint64_t v19 = *(void *)(v18 + 16);
  *(void *)(v18 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v28;
  *(void *)&long long v28 = v19;
  uint64_t v20 = *(void *)(v18 + 40);
  *(void *)(v18 + 40) = v30;
  uint64_t v30 = v20;
  uint64_t v21 = *(void *)(v18 + 24);
  *(void *)(v18 + 24) = *((void *)&v28 + 1);
  *((void *)&v28 + 1) = v21;
  ++*(void *)(v23 + 504);
  ++*(_DWORD *)(v23 + 520);
  os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 480));
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit((uint64_t *)&v27);
}

void sub_23356D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  os_unfair_lock_unlock(v19);
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(&a13);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::fadeSourceToGain(pthread_rwlock_t **this, uint64_t a2, float a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v7 = (id *)(this + 29);
  unint64_t v16 = (char *)(this + 31);
  unint64_t v17 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  uint64_t v8 = objc_msgSend(v7[2], "eventFor:", a2, v16, v17);
  id v9 = v8;
  if (v8)
  {
    [v8 prepareState];
    char v10 = *(std::__shared_weak_count **)&buf[8];
    *(float *)(*(void *)buf + 200) = a3;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    }
    unsigned int v11 = [v9 paramForKey:@"gain"];
    uint64_t v12 = *re::audioLogObjects(v11);
    if (v11)
    {
      double v13 = a3;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218496;
        *(double *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = a4;
        __int16 v19 = 2048;
        double v20 = *(double *)&a2;
        _os_log_debug_impl(&dword_233120000, v12, OS_LOG_TYPE_DEBUG, "[RE/PHASE] [Playback] Gain=%.2f over duration=%.2fs for token=%llu", buf, 0x20u);
      }
      [(re *)v11 fadeToValue:v13 duration:a4];
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Could not find gain param for token %llu", buf, 0xCu);
    }
  }
  else
  {
    unint64_t v14 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218496;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      __int16 v19 = 2048;
      double v20 = a4;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::fadeSourceToGain(token=%llu, gain=%1.8e, duration=%1.16e) could not find sound event", buf, 0x20u);
    }
  }

  return pthread_rwlock_unlock((pthread_rwlock_t *)*v7);
}

void sub_23356D648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getListener(pthread_rwlock_t **this)
{
  uint64_t v1 = (id *)(this + 29);
  BOOL v4 = (char *)(this + 31);
  uint64_t v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  id v2 = objc_msgSend(v1[2], "getListener", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_23356D70C(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::createListenerInScene(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v21) = 134217984;
    *(void *)((char *)&v21 + 4) = a3;
    _os_log_debug_impl(&dword_233120000, v7, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE_Async::createListenerInScene(sceneID=%llu)", (uint8_t *)&v21, 0xCu);
  }
  id v9 = (pthread_rwlock_t **)(a1 + 232);
  uint64_t v8 = *(pthread_rwlock_t **)(a1 + 232);
  char v10 = (id *)(a1 + 248);
  *(void *)&long long v21 = a1 + 248;
  *((void *)&v21 + 1) = a1 + 232;
  pthread_rwlock_rdlock(v8);
  id v11 = *(id *)(a1 + 248);
  uint64_t v12 = v11;
  if (v11)
  {
    [v11 sceneForID:a3];
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }

  if (v17)
  {
    int v14 = [*v10 engineShouldBeRunning];
    re::audio::REPHASEAudioScene::createListener(v17, a4);
    if ((v14 | [*v10 engineShouldBeRunning] ^ 1)) {
      atomic_store(1u, (unsigned __int8 *)(a1 + 536));
    }
    else {
      re::AudioManager_PHASE_Async::configureAndStartEngine(a1);
    }
  }
  else
  {
    uint64_t v15 = *re::audioLogObjects(v13);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v20 = a3;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::createListenerInScene failed to get scene for sceneID=%llu", buf, 0xCu);
    }
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }
  return pthread_rwlock_unlock(*v9);
}

void sub_23356D8CC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a3);
  }
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::removeListenerFromScene(re::AudioManager_PHASE_Async *this)
{
  id v2 = (os_unfair_lock_s *)((char *)this + 256);
  os_unfair_lock_lock((os_unfair_lock_t)this + 64);
  *((_DWORD *)this + 6re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0;
  os_unfair_lock_unlock(v2);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(*((id *)this + 31), "removeListener", (char *)this + 248, (char *)this + 232);
  atomic_store(1u, (unsigned __int8 *)this + 536);
  return pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));
}

void sub_23356D9A0(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::isListenerCreatedInScene(pthread_rwlock_t **this)
{
  uint64_t v1 = (id *)(this + 29);
  BOOL v4 = (char *)(this + 31);
  uint64_t v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  uint64_t v2 = objc_msgSend(v1[2], "isListenerCreatedInScene", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_23356DA18(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::applyListenerTransformAndLevel(re::AudioManager_PHASE_Async *this, const simd_float4x4 *a2, float a3)
{
  re::AudioManager_PHASE_Async::getListener((pthread_rwlock_t **)this);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  simd_float4 v6 = a2->columns[1];
  simd_float4 v7 = a2->columns[2];
  simd_float4 v8 = a2->columns[3];
  v13[0] = (float32x4_t)a2->columns[0];
  v13[1] = (float32x4_t)v6;
  void v13[2] = (float32x4_t)v7;
  void v13[3] = (float32x4_t)v8;
  re::audio::cleanUpTransformForPHASE(v13, v9, v10, v11, (uint64_t)&v14);
  objc_msgSend(v12, "setTransform:", *(double *)&v14, *(double *)&v15, *(double *)&v16, *(double *)&v17);
  os_unfair_lock_lock((os_unfair_lock_t)this + 64);
  if (*((float *)this + 65) != a3)
  {
    [v12 setGain:a3];
    *((float *)this + 6re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = a3;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0)) {
    kdebug_trace();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 64);
}

void sub_23356DB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setSpatialSceneClassification(unsigned __int8 *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  BOOL v4 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::setSpatialSceneClassification(spatialSceneClassification=%hhu), received scene classification, but dropping due to missing PHASE API", (uint8_t *)v5, 8u);
  }
  atomic_store(1u, a1 + 536);
}

uint64_t re::AudioManager_PHASE_Async::getSpatialSceneClassification(re::AudioManager_PHASE_Async *this)
{
  uint64_t v1 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::getSpatialSceneClassification returning unknown scene due to missing PHASE API", v3, 2u);
  }
  return 0;
}

void re::AudioManager_PHASE_Async::setSpatialSceneRoomIdentifier(re::AudioManager_PHASE_Async *this, NSUUID *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  BOOL v4 = (id)*re::audioLogObjects((re *)v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v5 = [(NSUUID *)v3 UUIDString];
    int v6 = 136315138;
    uint64_t v7 = [v5 UTF8String];
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::setSpatialSceneRoomIdentifier(roomIdentifier=%s), received room identifier, but dropping due to missing PHASE API", (uint8_t *)&v6, 0xCu);
  }
  atomic_store(1u, (unsigned __int8 *)this + 536);
}

void sub_23356DD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::getReverbPreset(pthread_rwlock_t **this)
{
  uint64_t v1 = (id *)(this + 29);
  BOOL v4 = (char *)(this + 31);
  id v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  uint64_t v2 = objc_msgSend(v1[2], "getReverbPreset", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_23356DDE8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::createSessionRootInScene(pthread_rwlock_t **this, unint64_t a2, uint64_t a3, NSUUID *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v6 = a4;
  uint64_t v7 = this + 29;
  uint64_t v8 = (id *)(this + 31);
  pthread_rwlock_rdlock(this[29]);
  id v9 = this[31];
  char v10 = v9;
  if (v9)
  {
    [(pthread_rwlock_t *)v9 sceneForID:a3];
  }
  else
  {
    uint64_t v14 = 0;
    long long v15 = 0;
  }

  if (v14)
  {
    int v12 = [*v8 engineShouldBeRunning];
    if (((v12 | [*v8 engineShouldBeRunning] ^ 1) & 1) == 0) {
      re::AudioManager_PHASE_Async::configureAndStartEngine((uint64_t)this);
    }
  }
  else
  {
    double v13 = *re::audioLogObjects(v11);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v17 = a3;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::createSessionRootInScene failed to get scene for sceneID=%llu", buf, 0xCu);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  pthread_rwlock_unlock(*v7);
}

void sub_23356DF48(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a3);
  }
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);

  _Unwind_Resume(a1);
}

re *re::AudioManager_PHASE_Async::removeSessionRootFromScene(re *this, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = this;
    BOOL v4 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 134217984;
      *(void *)((char *)&v7 + 4) = a2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Removing audio session root %llu", (uint8_t *)&v7, 0xCu);
    }
    int v6 = (pthread_rwlock_t *)*((void *)v3 + 29);
    id v5 = (id *)((char *)v3 + 232);
    *(void *)&long long v7 = v5 + 2;
    *((void *)&v7 + 1) = v5;
    pthread_rwlock_rdlock(v6);
    [v5[2] removeSessionRoot:a2];
    return (re *)pthread_rwlock_unlock((pthread_rwlock_t *)*v5);
  }
  return this;
}

void sub_23356E080(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::AudioManager_PHASE_Async::setSessionRootTransform(pthread_rwlock_t **this, uint64_t a2, const simd_float4x4 *a3)
{
  id v5 = (id *)(this + 29);
  id v9 = (char *)(this + 31);
  char v10 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  int v6 = objc_msgSend(v5[2], "getSessionRoot:", a2, v9, v10);
  long long v7 = v6;
  if (v6) {
    objc_msgSend(v6, "setTransform:", *(double *)a3->columns[0].i64, *(double *)a3->columns[1].i64, *(double *)a3->columns[2].i64, *(double *)a3->columns[3].i64);
  }

  return pthread_rwlock_unlock((pthread_rwlock_t *)*v5);
}

void sub_23356E128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setSceneReverbPreset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 232;
  uint64_t v6 = a1 + 248;
  uint64_t v7 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  objc_msgSend(*(id *)(v4 + 16), "setReverbPreset:allowingSpaceBlend:", a2, 0, v6, v7);
  atomic_store(1u, (unsigned __int8 *)(a1 + 536));
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_23356E1C8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setSpaceBlendTargetPresetOrientation(re::AudioManager_PHASE_Async *this, simd_quatf a2)
{
  double v5 = *(double *)a2.vector.i64;
  uint64_t v3 = (id *)((char *)this + 232);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  [v3[2] setSpaceBlendTargetPresetOrientation:v5];
  atomic_store(1u, (unsigned __int8 *)this + 536);
  return pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));
}

void sub_23356E250(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadFile(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v23 = a2;
  uint64_t v33 = a6;
  id v24 = a3;
  uint64_t v22 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", a6);
  double v13 = *(pthread_rwlock_t **)(a1 + 232);
  uint64_t v31 = a1 + 248;
  uint64_t v32 = a1 + 232;
  pthread_rwlock_rdlock(v13);
  uint64_t v14 = *a4;
  long long v15 = [*(id *)(a1 + 248) engine];
  long long v21 = a7;
  long long v16 = [v15 assetRegistry];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async8loadFileEP5NSURLP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_264BE2CB0;
  uint64_t v28 = a6;
  id v17 = v23;
  id v26 = v17;
  id v18 = v22;
  id v27 = v18;
  uint64_t v29 = v14;
  int v30 = a5;
  __int16 v19 = (void (**)(void *, void *, id, unsigned __int8 *, void))_Block_copy(aBlock);
  uint64_t v20 = v24;
  v19[2](v19, v16, v24, a4, *(void *)(a1 + 552));
  [*(id *)(a1 + 248) addAudioAssetID:a6 configuration:a4];
  atomic_store(1u, (unsigned __int8 *)(a1 + 536));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v19, v20, (uint64_t)a4, &v33);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_23356E434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async8loadFileEP5NSURLP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v22 = a2;
  id v23 = a3;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 56);
  int v12 = *(_DWORD *)(a4 + 4);
  double v13 = [NSNumber numberWithDouble:*(double *)(a4 + 24)];
  int v14 = *(_DWORD *)(a1 + 64);
  id v24 = 0;
  long long v15 = (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, void, id, BOOL, void *, int, id *))(*(void *)a5 + 24))(a5, v22, v9, v10, v11, 0, v23, v12 == 1, v13, v14, &v24);
  long long v16 = (char *)v24;

  uint64_t v17 = re::internal::enableSignposts(0, 0);
  if (v17) {
    uint64_t v17 = kdebug_trace();
  }
  id v18 = *re::audioLogObjects((re *)v17);
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = "streaming";
      if (!*(unsigned char *)a4) {
        uint64_t v20 = "preloaded";
      }
      *(_DWORD *)long long buf = 134218242;
      uint64_t v26 = v19;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from a fileURL.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v16;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }
}

void sub_23356E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadFileData(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v23 = a2;
  id v24 = a3;
  uint64_t v33 = a6;
  id v22 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", a6);
  uint64_t v13 = *a4;
  int v14 = *(pthread_rwlock_t **)(a1 + 232);
  uint64_t v31 = a1 + 248;
  uint64_t v32 = a1 + 232;
  pthread_rwlock_rdlock(v14);
  long long v15 = [*(id *)(a1 + 248) engine];
  uint64_t v21 = a7;
  long long v16 = [v15 assetRegistry];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async12loadFileDataEP6NSDataP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_264BE2CB0;
  uint64_t v28 = a6;
  id v17 = v23;
  id v26 = v17;
  id v18 = v22;
  id v27 = v18;
  uint64_t v29 = v13;
  int v30 = a5;
  uint64_t v19 = (void (**)(void *, void *, id, unsigned __int8 *, void))_Block_copy(aBlock);
  uint64_t v20 = v24;
  v19[2](v19, v16, v24, a4, *(void *)(a1 + 552));
  [*(id *)(a1 + 248) addAudioAssetID:a6 configuration:a4];
  atomic_store(1u, (unsigned __int8 *)(a1 + 536));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v19, v20, (uint64_t)a4, &v33);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_23356E924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async12loadFileDataEP6NSDataP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v22 = a2;
  id v23 = a3;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 56);
  int v12 = *(_DWORD *)(a4 + 4);
  uint64_t v13 = [NSNumber numberWithDouble:*(double *)(a4 + 24)];
  int v14 = *(_DWORD *)(a1 + 64);
  id v24 = 0;
  long long v15 = (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, void, id, BOOL, void *, int, id *))(*(void *)a5 + 16))(a5, v22, v9, v10, v11, 0, v23, v12 == 1, v13, v14, &v24);
  long long v16 = (char *)v24;

  uint64_t v17 = re::internal::enableSignposts(0, 0);
  if (v17)
  {
    [*(id *)(a1 + 32) length];
    uint64_t v17 = kdebug_trace();
  }
  id v18 = *re::audioLogObjects((re *)v17);
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = "streaming";
      if (!*(unsigned char *)a4) {
        uint64_t v20 = "preloaded";
      }
      *(_DWORD *)long long buf = 134218242;
      uint64_t v26 = v19;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from fileData.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v16;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }
}

void sub_23356EC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadBuffer(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v11 = a2;
  uint64_t v38 = a5;
  uint64_t v31 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", a5);
  int v12 = [v11 format];
  int v13 = [v12 channelCount];

  if (v13 == 1)
  {
    int v14 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", *objc_msgSend(v11, "floatChannelData"), 4 * objc_msgSend(v11, "frameLength"));
    int v30 = a6;
LABEL_3:
    long long v15 = *(pthread_rwlock_t **)(a1 + 232);
    *(void *)&long long buf = a1 + 248;
    *((void *)&buf + 1) = a1 + 232;
    pthread_rwlock_rdlock(v15);
    long long v16 = [*(id *)(a1 + 248) engine];
    uint64_t v17 = [v16 assetRegistry];

    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re24AudioManager_PHASE_Async10loadBufferEP16AVAudioPCMBufferRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
    aBlock[3] = &unk_264BE2CD8;
    uint64_t v36 = a5;
    id v18 = v14;
    id v33 = v18;
    id v34 = v31;
    id v35 = v11;
    int v37 = a4;
    uint64_t v19 = _Block_copy(aBlock);
    (*((void (**)(void *, void *, void, uint64_t, void))v19 + 2))(v19, v17, 0, a3, *(void *)(a1 + 552));
    [*(id *)(a1 + 248) addAudioAssetID:a5 configuration:a3];
    atomic_store(1u, (unsigned __int8 *)(a1 + 536));
    std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v30, v19, a3, &v38);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
    goto LABEL_8;
  }
  uint64_t v20 = [v11 format];
  int v21 = [v20 isInterleaved];

  if (!v21)
  {
    id v24 = objc_alloc(MEMORY[0x263EFF990]);
    unsigned int v25 = [v11 frameLength];
    uint64_t v26 = [v11 format];
    int v30 = a6;
    int v14 = objc_msgSend(v24, "initWithLength:", 4 * v25 * objc_msgSend(v26, "channelCount"));

    for (unint64_t i = 0; ; ++i)
    {
      uint64_t v28 = [v11 format];
      unsigned int v29 = [v28 channelCount];

      if (i >= v29) {
        break;
      }
      memcpy((void *)([v14 mutableBytes]+ 4 * objc_msgSend(v11, "frameLength") * i), *(const void **)(objc_msgSend(v11, "floatChannelData") + 8 * i), 4 * objc_msgSend(v11, "frameLength"));
    }
    goto LABEL_3;
  }
  id v23 = *re::audioLogObjects(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] can't load interleaved audio buffers: %@", (uint8_t *)&buf, 0xCu);
  }
  *a6 = 0;
  a6[1] = 0;
LABEL_8:
}

void sub_23356EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async10loadBufferEP16AVAudioPCMBufferRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v9 = a2;
  id v24 = a3;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  int v12 = [*(id *)(a1 + 48) format];
  int v13 = *(_DWORD *)(a4 + 4);
  int v14 = [NSNumber numberWithDouble:*(double *)(a4 + 24)];
  uint64_t v15 = *(unsigned int *)(a1 + 64);
  id v25 = 0;
  long long v16 = (*(void (**)(uint64_t, id, uint64_t, uint64_t, void *, BOOL, void *, uint64_t, id *))(*(void *)a5 + 32))(a5, v9, v11, v10, v12, v13 == 1, v14, v15, &v25);
  uint64_t v17 = (char *)v25;

  uint64_t v18 = re::internal::enableSignposts(0, 0);
  if (v18)
  {
    re::audio::pcmBufferSize(*(re::audio **)(a1 + 48), v19);
    uint64_t v18 = kdebug_trace();
  }
  uint64_t v20 = *re::audioLogObjects((re *)v18);
  if (v16)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 56);
      id v22 = "streaming";
      if (!*(unsigned char *)a4) {
        id v22 = "preloaded";
      }
      *(_DWORD *)long long buf = 134218242;
      uint64_t v27 = v21;
      __int16 v28 = 2080;
      unsigned int v29 = v22;
      _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from a pcmBuffer.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v27 = v23;
    __int16 v28 = 2112;
    unsigned int v29 = v17;
    _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }
}

void sub_23356F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadBuffer(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v13 = a2;
  id v23 = a3;
  uint64_t v32 = a6;
  id v22 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", a6);
  uint64_t v21 = a7;
  int v14 = *(pthread_rwlock_t **)(a1 + 232);
  uint64_t v30 = a1 + 248;
  uint64_t v31 = a1 + 232;
  pthread_rwlock_rdlock(v14);
  uint64_t v15 = [*(id *)(a1 + 248) engine];
  long long v16 = [v15 assetRegistry];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async10loadBufferEP6NSDataP13AVAudioFormatRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_264BE2CD8;
  uint64_t v28 = a6;
  id v17 = v13;
  id v25 = v17;
  id v18 = v22;
  id v26 = v18;
  id v19 = v23;
  id v27 = v19;
  int v29 = a5;
  uint64_t v20 = _Block_copy(aBlock);
  (*((void (**)(void *, void *, void, uint64_t, void))v20 + 2))(v20, v16, 0, a4, *(void *)(a1 + 552));
  [*(id *)(a1 + 248) addAudioAssetID:a6 configuration:a4];
  atomic_store(1u, (unsigned __int8 *)(a1 + 536));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v20, a4, &v32);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_23356F538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v23 - 96));
  _Unwind_Resume(a1);
}

void sub_23356F5A4()
{
}

void sub_23356F5AC()
{
}

void ___ZN2re24AudioManager_PHASE_Async10loadBufferEP6NSDataP13AVAudioFormatRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v23 = a2;
  id v22 = a3;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(_DWORD *)(a4 + 4);
  id v13 = [NSNumber numberWithDouble:*(double *)(a4 + 24)];
  uint64_t v14 = *(unsigned int *)(a1 + 64);
  id v24 = 0;
  uint64_t v15 = (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, BOOL, void *, uint64_t, id *))(*(void *)a5 + 32))(a5, v23, v9, v10, v11, v12 == 1, v13, v14, &v24);
  long long v16 = (char *)v24;

  uint64_t v17 = re::internal::enableSignposts(0, 0);
  if (v17)
  {
    [*(id *)(a1 + 32) length];
    uint64_t v17 = kdebug_trace();
  }
  id v18 = *re::audioLogObjects((re *)v17);
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = "streaming";
      if (!*(unsigned char *)a4) {
        uint64_t v20 = "preloaded";
      }
      *(_DWORD *)long long buf = 134218242;
      uint64_t v26 = v19;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from an NSData buffer.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v16;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }
}

void sub_23356F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::loadExternalStreamController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 232;
  uint64_t v7 = a1 + 248;
  uint64_t v8 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  objc_msgSend(*(id *)(v5 + 16), "addAudioAssetID:configuration:", a2, a3, v7, v8);
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v5);
}

void sub_23356F8DC(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::getConfigurationForExternalStreamController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 232;
  uint64_t v8 = a1 + 248;
  uint64_t v9 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  uint64_t v6 = objc_msgSend(*(id *)(v5 + 16), "getConfigurationForAudioAssetID:configuration:", a2, a3, v8, v9);
  pthread_rwlock_unlock(*(pthread_rwlock_t **)v5);
  return v6;
}

void sub_23356F964(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::prepareSourceAsync(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = *(pthread_rwlock_t **)(a1 + 232);
  uint64_t v24 = a1 + 248;
  uint64_t v25 = a1 + 232;
  pthread_rwlock_rdlock(v11);
  id v12 = *(id *)(a1 + 248);
  objc_msgSend(v12, "setPreparingWithData:forToken:", *(void *)(*a2 + 56), *(void *)(*a2 + 48), *(void *)(*a2 + 24));
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3321888768;
  void v17[2] = ___ZN2re24AudioManager_PHASE_Async18prepareSourceAsyncENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSStringPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  void v17[3] = &unk_26E6DA128;
  uint64_t v14 = *a2;
  id v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = a1;
  uint64_t v21 = v14;
  id v22 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v15 = v12;
  id v18 = v15;
  uint64_t v23 = a3;
  id v16 = v9;
  id v19 = v16;
  dispatch_async(v10, v17);

  if (v22) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v22);
  }

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_23356FAC8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async18prepareSourceAsyncENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSStringPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(void *a1)
{
  v52[3] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = a1[6];
  uint64_t v3 = a1 + 7;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 2534, *(void *)(a1[7] + 24));
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)*v3;
  uint64_t v6 = (std::__shared_weak_count *)a1[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (void *)a1[9];
  uint64_t v8 = (void *)a1[5];
  id v9 = v4;
  uint64_t v10 = v8;
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v10 = (re *)[v9 sceneForID:v5[4]];
    if (v45)
    {
      uint64_t v36 = v11;
      id v12 = [v9 maybeEngine];
      BOOL v13 = v12 == 0;

      if (v13)
      {
        uint64_t v14 = [v9 engine];
        id v15 = *re::audioLogObjects(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::prepareSource created engine %@", buf, 0xCu);
        }
      }
      re::audio::REPHASEAudioScene::createListenerIfPending(v45);
      id v37 = *(id *)(v2 + 408);
      re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v45, v5[5], &v43);
      objc_storeStrong((id *)(v43 + 32), v8);
      id v16 = (void *)v5[3];
      uint64_t v17 = [v9 humanDirectivity];
      id v18 = (void *)v5[22];
      v5[22] = v17;

      id v19 = re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken((os_unfair_lock_s *)v2, (unint64_t)v16);
      if (!v19)
      {
        uint64_t v20 = *re::audioLogObjects(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v7;
          _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "stream %llu from connection %llu does not have playback state change handler", buf, 0x16u);
        }
      }
      objc_initWeak(&location, *(id *)(v2 + 328));
      id v21 = *(id *)(v2 + 544);
      *(void *)long long buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke;
      int v48 = &unk_264BE2D28;
      objc_copyWeak(v52, &location);
      v52[1] = v7;
      v52[2] = v16;
      id v22 = v37;
      id v49 = v22;
      id v23 = v19;
      id v51 = v23;
      id v24 = v21;
      id v50 = v24;
      uint64_t v25 = _Block_copy(buf);
      uint64_t v26 = (void *)v5[41];
      v5[41] = v25;

      uint64_t v40 = v5;
      long long v41 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      objc_msgSend(v9, "prepare:", &v40, v52);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v41);
      }
      int v27 = [v9 engineShouldBeRunning];
      unint64_t v28 = atomic_load((unint64_t *)(v2 + 416));
      if (v28 == 1) {
        int v29 = 0;
      }
      else {
        int v29 = v27;
      }
      if (v29 == 1) {
        re::AudioManager_PHASE_Async::configureAndStartEngine(v2);
      }

      objc_destroyWeak(v35);
      objc_destroyWeak(&location);

      if (v44) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v44);
      }

      uint64_t v11 = v36;
      goto LABEL_27;
    }
  }
  else
  {
    int v45 = 0;
    uint64_t v46 = 0;
  }
  uint64_t v30 = *re::audioLogObjects(v10);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    uint64_t v34 = v5[3];
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v34;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v7;
    _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::prepareSource cannot prepare asset that is not in a scene. token=%llu, connection=%llu", buf, 0x16u);
  }
LABEL_27:
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v46);
  }

  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  uint64_t Instance = re::AudioManagerTelemetryReporter::getInstance(v31);
  id v33 = (std::__shared_weak_count *)a1[8];
  v38[0] = a1[7];
  v38[1] = (uint64_t)v33;
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    re::AudioManagerTelemetryReporter::addPreparedSourceState(Instance, v38);
    std::__shared_weak_count::__release_shared[abi:nn180100](v33);
  }
  else
  {
    re::AudioManagerTelemetryReporter::addPreparedSourceState(Instance, v38);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
}

void sub_23356FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a22);
  }

  if (v29) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v29);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a14);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_56c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v7 = WeakRetained;
  if (WeakRetained && (a3 < 4 || a3 == 5)) {
    [WeakRetained connectionIdentifier:*(void *)(a1 + 64) streamToken:*(void *)(a1 + 72) didChangeFromState:a2 toState:a3];
  }
  uint64_t v8 = *(NSObject **)(a1 + 32);
  if (v8 && *(void *)(a1 + 48))
  {
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke_2;
    v9[3] = &unk_264BE2D00;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = a2;
    unint64_t v13 = a3;
    dispatch_async(v8, v9);
  }
}

void sub_23357013C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v2)
  {
    uint64_t v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Engine cancelled, ignoring state change", v5, 2u);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
}

id re::AudioManager_PHASE_Async::createAcousticMaterialsArray(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 232;
  uint64_t v7 = *(pthread_rwlock_t **)(a1 + 232);
  uint64_t v15 = v8 + 16;
  uint64_t v16 = v8;
  pthread_rwlock_rdlock(v7);
  id v9 = *(id *)(v8 + 16);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v14, a2);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v13, a3);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v12, a4);
  id v10 = [v9 createAcousticMaterialsArrayWithAbsorption:v14 scattering:v13 soundReduction:v12];
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v12);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)v13);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)v14);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v8);
  return v10;
}

void sub_2335702E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)va1);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)va2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::createPhaseShape(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  id v12 = a4;
  uint64_t v13 = *(pthread_rwlock_t **)(a1 + 232);
  a1 += 232;
  pthread_rwlock_rdlock(v13);
  objc_msgSend(*(id *)(a1 + 16), "createPhaseShapeWithMeshID:materials:mdlMesh:arkitMesh:meshType:", a2, v11, v12, a5, a6, a1 + 16, a1);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock(*(pthread_rwlock_t **)a1);

  return v14;
}

void sub_2335703EC(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::prepareMeshAsset(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  id v9 = a2;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v19, a3);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v18, a4);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v17, a5);
  uint64_t v10 = re::AudioManager_PHASE_Async::createAcousticMaterialsArray(a1, v19, v18, v17);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v17);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)v18);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)v19);
  if (v10)
  {
    __buf[0] = 0;
    do
    {
      arc4random_buf(__buf, 8uLL);
      uint64_t v11 = __buf[0];
    }
    while (__buf[0] < 0x3E8uLL);
    id v12 = re::AudioManager_PHASE_Async::createPhaseShape(a1, __buf[0], v10, v9, 0, 1);
    if (v12)
    {
      id v14 = *(pthread_rwlock_t **)(a1 + 232);
      uint64_t v13 = a1 + 232;
      __buf[0] = v13 + 16;
      __buf[1] = v13;
      pthread_rwlock_rdlock(v14);
      [*(id *)(v13 + 16) addPhaseShapeToCache:v12 meshID:v11 mesh:v9];
      pthread_rwlock_unlock(*(pthread_rwlock_t **)v13);
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_23357055C(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v4);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::prepareMeshAsset(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v11[0] = 0;
  do
  {
    arc4random_buf(v11, 8uLL);
    uint64_t v6 = v11[0];
  }
  while (v11[0] < 0x3E8uLL);
  uint64_t v7 = re::AudioManager_PHASE_Async::createPhaseShape(a1, v11[0], 0, v5, 1, a3);
  if (v7)
  {
    id v9 = *(pthread_rwlock_t **)(a1 + 232);
    uint64_t v8 = a1 + 232;
    v11[0] = v8 + 16;
    v11[1] = v8;
    pthread_rwlock_rdlock(v9);
    [*(id *)(v8 + 16) addPhaseShapeToCache:v7 meshID:v6 mesh:v5];
    pthread_rwlock_unlock(*(pthread_rwlock_t **)v8);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_23357069C(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::removeMeshAsset(pthread_rwlock_t **this, uint64_t a2)
{
  uint64_t v3 = (id *)(this + 29);
  id v5 = (char *)(this + 31);
  uint64_t v6 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v3[2], "removePhaseShapeFromCacheWithMeshID:", a2, v5, v6);
  return pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
}

void sub_233570730(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setMeshesForEntity(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  if (a2 == -1 || !a3)
  {
    id v21 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Can't add mesh to invalid entity/scene", buf, 2u);
    }
  }
  else
  {
    id v9 = (pthread_rwlock_t **)(a1 + 232);
    uint64_t v8 = *(pthread_rwlock_t **)(a1 + 232);
    uint64_t v10 = (id *)(v9 + 2);
    unint64_t v83 = v9 + 2;
    uint64_t v84 = v9;
    pthread_rwlock_rdlock(v8);
    id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v13 = *(void *)(a4 + 8);
    if (v13)
    {
      id v14 = *(unint64_t **)(a4 + 16);
      uint64_t v15 = 8 * v13;
      *(void *)&long long v12 = 134217984;
      long long v72 = v12;
      do
      {
        unint64_t v16 = *v14;
        id v17 = *v10;
        id v18 = [v17 getPhaseShapeFromCacheWithMeshID:v16];

        if (v18)
        {
          [v11 addObject:v18];
        }
        else
        {
          uint64_t v20 = *re::audioLogObjects(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v72;
            unint64_t v86 = v16;
            _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Mesh %llu is not registered with PHASE", buf, 0xCu);
          }
        }

        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    id v22 = *v10;
    id v23 = v22;
    if (v22)
    {
      [v22 sceneForID:a2];
    }
    else
    {
      unsigned int v81 = 0;
      uint64_t v82 = 0;
    }

    re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v81, a3, &v79);
    uint64_t v25 = re::audioLogObjects(v24);
    uint64_t v26 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v25);
    if (v26)
    {
      uint64_t v61 = *re::audioLogObjects(v26);
      uint64_t v26 = (re *)os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
      uint64_t v27 = v79;
      if (v26)
      {
        uint64_t v62 = *(void *)(v79 + 32);
        *(_DWORD *)long long buf = 134218498;
        unint64_t v86 = a2;
        __int16 v87 = 2048;
        *(void *)uint64_t v88 = a3;
        *(_WORD *)&v88[8] = 2112;
        uint64_t v89 = v62;
        _os_log_impl(&dword_233120000, v61, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() sceneID=%llu entityID=%llu entityName='%@'", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v27 = v79;
    }
    if (*(void *)(v27 + 16))
    {
      unint64_t v28 = re::audioLogObjects(v26);
      int v29 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v28);
      if (v29)
      {
        long long v63 = *re::audioLogObjects(v29);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v64 = *(void *)(v27 + 16);
          *(_DWORD *)long long buf = 138412290;
          unint64_t v86 = v64;
          _os_log_impl(&dword_233120000, v63, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() Removing source: %@", buf, 0xCu);
        }
      }
      uint64_t v30 = objc_msgSend(*(id *)(v27 + 16), "parent", v72);
      [v30 removeChild:*(void *)(v27 + 16)];

      uint64_t v31 = *(void **)(v27 + 16);
      *(void *)(v27 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    }
    if (*(void *)(v27 + 24))
    {
      uint64_t v32 = re::audioLogObjects(v26);
      id v33 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v32);
      if (v33)
      {
        uint64_t v65 = *re::audioLogObjects(v33);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v66 = *(void *)(v27 + 24);
          *(_DWORD *)long long buf = 138412290;
          unint64_t v86 = v66;
          _os_log_impl(&dword_233120000, v65, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() Removing occluder: %@", buf, 0xCu);
        }
      }
      uint64_t v34 = objc_msgSend(*(id *)(v27 + 24), "parent", v72);
      [v34 removeChild:*(void *)(v27 + 24)];

      id v35 = *(void **)(v27 + 24);
      *(void *)(v27 + 24) = 0;
    }
    uint64_t v36 = (re *)objc_msgSend(v11, "count", v72);
    if (v36)
    {
      id v37 = re::audioLogObjects(v36);
      uint64_t v38 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v37);
      if (v38)
      {
        unsigned int v67 = *re::audioLogObjects(v38);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218496;
          unint64_t v86 = a3;
          __int16 v87 = 1024;
          *(_DWORD *)uint64_t v88 = a6;
          *(_WORD *)&v88[4] = 1024;
          *(_DWORD *)&v88[6] = a5;
          _os_log_impl(&dword_233120000, v67, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu projects=%d occludes=%d", buf, 0x18u);
        }
      }
      uint64_t v39 = [*v10 engine];
      uint64_t v40 = [v39 rootObject];

      if (a6)
      {
        id v41 = objc_alloc(MEMORY[0x263F149A8]);
        id v42 = *v10;
        uint64_t v43 = [v42 engine];
        uint64_t v44 = [v41 initWithEngine:v43 shapes:v11];
        int v45 = *(void **)(v27 + 16);
        *(void *)(v27 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v44;

        uint64_t v46 = *(void *)(v27 + 16);
        id v78 = 0;
        [v40 addChild:v46 error:&v78];
        uint64_t v47 = (re *)v78;
        int v48 = re::audioLogObjects(v47);
        id v49 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v48);
        if (v49)
        {
          uint64_t v68 = *re::audioLogObjects(v49);
          id v49 = (re *)os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
          if (v49)
          {
            uint64_t v69 = *(void *)(v27 + 16);
            *(_DWORD *)long long buf = 134218242;
            unint64_t v86 = a3;
            __int16 v87 = 2112;
            *(void *)uint64_t v88 = v69;
            _os_log_impl(&dword_233120000, v68, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu created PHASESource: %@", buf, 0x16u);
          }
        }
        if (v47)
        {
          id v50 = *re::audioLogObjects(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134218242;
            unint64_t v86 = a3;
            __int16 v87 = 2112;
            *(void *)uint64_t v88 = v47;
            _os_log_error_impl(&dword_233120000, v50, OS_LOG_TYPE_ERROR, "Could not add PHASESource for entity %llu. Error %@", buf, 0x16u);
          }
        }
      }
      if (a5)
      {
        id v51 = objc_alloc(MEMORY[0x263F14970]);
        id v52 = *v10;
        long long v53 = [v52 engine];
        uint64_t v54 = [v51 initWithEngine:v53 shapes:v11];
        uint64_t v55 = *(void **)(v27 + 24);
        *(void *)(v27 + 24) = v54;

        uint64_t v56 = *(void *)(v27 + 24);
        id v77 = 0;
        [v40 addChild:v56 error:&v77];
        unint64_t v57 = (re *)v77;
        uint64_t v58 = re::audioLogObjects(v57);
        uint64_t v59 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v58);
        if (v59)
        {
          uint64_t v70 = *re::audioLogObjects(v59);
          uint64_t v59 = (re *)os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
          if (v59)
          {
            uint64_t v71 = *(void *)(v27 + 24);
            *(_DWORD *)long long buf = 134218242;
            unint64_t v86 = a3;
            __int16 v87 = 2112;
            *(void *)uint64_t v88 = v71;
            _os_log_impl(&dword_233120000, v70, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu created PHASEOccluder: %@", buf, 0x16u);
          }
        }
        if (v57)
        {
          __int16 v60 = *re::audioLogObjects(v59);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134218242;
            unint64_t v86 = a3;
            __int16 v87 = 2112;
            *(void *)uint64_t v88 = v57;
            _os_log_error_impl(&dword_233120000, v60, OS_LOG_TYPE_ERROR, "Could not add PHASEOccluder for entity %llu. Error %@", buf, 0x16u);
          }
        }
      }
      else
      {
        unint64_t v57 = 0;
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 536));
    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 536));
    }
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v80);
    }
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v82);
    }

    pthread_rwlock_unlock(*v9);
  }
}

void sub_233570E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, ...)
{
  va_start(va, a14);

  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a13);
  }

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setTransformForEntity(re::AudioManager_PHASE_Async *this, uint64_t a2, unint64_t a3, simd_float4x4 a4, simd_float4x4 a5, int a6)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  simd_float4x4 v67 = a4;
  simd_float4x4 v66 = a5;
  id v11 = (id *)((char *)this + 232);
  uint64_t v10 = (pthread_rwlock_t *)*((void *)this + 29);
  unint64_t v64 = (char *)(v11 + 2);
  uint64_t v65 = v11;
  pthread_rwlock_rdlock(v10);
  id v12 = v11[2];
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 sceneForID:a2];
  }
  else
  {
    uint64_t v62 = 0;
    long long v63 = 0;
  }

  if (v62)
  {
    re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v62, a3, &v60);
    id v14 = v60;
    float32x4_t v50 = v60[3];
    float32x4_t v51 = v60[4];
    float32x4_t v52 = v60[5];
    float32x4_t v53 = v60[6];
    simd_float4 v15 = v67.columns[1];
    v60[3] = (float32x4_t)v67.columns[0];
    v14[4] = (float32x4_t)v15;
    simd_float4 v16 = v67.columns[3];
    v14[5] = (float32x4_t)v67.columns[2];
    v14[6] = (float32x4_t)v16;
    objc_msgSend((id)v14[1].i64[0], "setTransform:", *(double *)a4.columns[0].i64, *(double *)a4.columns[1].i64, *(double *)a4.columns[2].i64, *(double *)a4.columns[3].i64);
    objc_msgSend((id)v14[1].i64[1], "setTransform:", *(double *)a4.columns[0].i64, *(double *)a4.columns[1].i64, *(double *)a4.columns[2].i64, *(double *)a4.columns[3].i64);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[1], v51)), (int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[0], v50))), vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[2], v52)), (int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[3], v53))))) & 0x80000000) != 0)goto LABEL_55; {
    snprintf(__str, 0x64uLL, "setTransform%llu", a3);
    }
    unsigned int v18 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a4.columns[1], (float32x4_t)a5.columns[1]), (int8x16_t)vceqq_f32((float32x4_t)a4.columns[0], (float32x4_t)a5.columns[0])), vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a4.columns[2], (float32x4_t)a5.columns[2]), (int8x16_t)vceqq_f32((float32x4_t)a4.columns[3], (float32x4_t)a5.columns[3]))));
    if (a6)
    {
      if ((v18 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, __str);
        id v19 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (long long *)__p);
        int v20 = (int)v19;
        if (SHIBYTE(v71) < 0)
        {
          operator delete(*(void **)__p);
          if (!v20) {
            goto LABEL_55;
          }
        }
        else if (!v19)
        {
          goto LABEL_55;
        }
        uint64_t v26 = (id)*re::audioLogObjects(v19);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = v14[1].i64[0];
          uint64_t v36 = v14[1].i64[1];
          re::audio::stringFromMatrix((re::audio *)&v67, v58);
          int v38 = v59;
          uint64_t v39 = (void **)v58[0];
          re::audio::stringFromMatrix((re::audio *)&v66, v56);
          uint64_t v40 = v58;
          if (v38 < 0) {
            uint64_t v40 = v39;
          }
          if (v57 >= 0) {
            id v41 = v56;
          }
          else {
            id v41 = (void **)v56[0];
          }
          *(_DWORD *)__p = 134219011;
          *(void *)&__p[4] = a3;
          __int16 v69 = 2112;
          uint64_t v70 = v37;
          __int16 v71 = 2112;
          uint64_t v72 = v36;
          __int16 v73 = 2085;
          uint64_t v74 = v40;
          __int16 v75 = 2085;
          BOOL v76 = v41;
          id v42 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occlud"
                "er: %@) to:\n"
                "%{sensitive}s,\n"
                "before cleanup:\n"
                "%{sensitive}s";
LABEL_50:
          _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, v42, __p, 0x34u);
          if (v57 < 0) {
            operator delete(v56[0]);
          }
          goto LABEL_52;
        }
        goto LABEL_54;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __str);
      id v24 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (long long *)__p);
      int v25 = (int)v24;
      if (SHIBYTE(v71) < 0) {
        operator delete(*(void **)__p);
      }
      if (!v25) {
        goto LABEL_55;
      }
      uint64_t v26 = (id)*re::audioLogObjects(v24);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      uint64_t v28 = v14[1].i64[0];
      uint64_t v27 = v14[1].i64[1];
      re::audio::stringFromMatrix((re::audio *)&v67, v58);
      if (v59 >= 0) {
        int v29 = v58;
      }
      else {
        int v29 = (void **)v58[0];
      }
      *(_DWORD *)__p = 134218755;
      *(void *)&__p[4] = a3;
      __int16 v69 = 2112;
      uint64_t v70 = v28;
      __int16 v71 = 2112;
      uint64_t v72 = v27;
      __int16 v73 = 2085;
      uint64_t v74 = v29;
      uint64_t v30 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occluder: "
            "%@) to:\n"
            "%{sensitive}s";
    }
    else
    {
      if ((v18 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, __str);
        id v22 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (long long *)__p);
        int v23 = (int)v22;
        if (SHIBYTE(v71) < 0)
        {
          operator delete(*(void **)__p);
          if (!v23) {
            goto LABEL_55;
          }
        }
        else if (!v22)
        {
LABEL_55:
          atomic_store(1u, (unsigned __int8 *)this + 536);
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v61);
          }
          goto LABEL_57;
        }
        uint64_t v26 = (id)*re::audioLogObjects(v22);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = v14[1].i64[0];
          uint64_t v43 = v14[1].i64[1];
          re::audio::stringFromMatrix((re::audio *)&v67, v58);
          int v45 = v59;
          uint64_t v46 = (void **)v58[0];
          re::audio::stringFromMatrix((re::audio *)&v66, v56);
          uint64_t v47 = v58;
          if (v45 < 0) {
            uint64_t v47 = v46;
          }
          if (v57 >= 0) {
            int v48 = v56;
          }
          else {
            int v48 = (void **)v56[0];
          }
          *(_DWORD *)__p = 134219010;
          *(void *)&__p[4] = a3;
          __int16 v69 = 2112;
          uint64_t v70 = v44;
          __int16 v71 = 2112;
          uint64_t v72 = v43;
          __int16 v73 = 2080;
          uint64_t v74 = v47;
          __int16 v75 = 2080;
          BOOL v76 = v48;
          id v42 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occlud"
                "er: %@) to:\n"
                "%s,\n"
                "before cleanup:\n"
                "%s";
          goto LABEL_50;
        }
LABEL_54:

        goto LABEL_55;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __str);
      uint64_t v31 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (long long *)__p);
      int v32 = (int)v31;
      if (SHIBYTE(v71) < 0) {
        operator delete(*(void **)__p);
      }
      if (!v32) {
        goto LABEL_55;
      }
      uint64_t v26 = (id)*re::audioLogObjects(v31);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      uint64_t v34 = v14[1].i64[0];
      uint64_t v33 = v14[1].i64[1];
      re::audio::stringFromMatrix((re::audio *)&v67, v58);
      if (v59 >= 0) {
        id v35 = v58;
      }
      else {
        id v35 = (void **)v58[0];
      }
      *(_DWORD *)__p = 134218754;
      *(void *)&__p[4] = a3;
      __int16 v69 = 2112;
      uint64_t v70 = v34;
      __int16 v71 = 2112;
      uint64_t v72 = v33;
      __int16 v73 = 2080;
      uint64_t v74 = v35;
      uint64_t v30 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occluder: %@) to:\n%s";
    }
    _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, v30, __p, 0x2Au);
LABEL_52:
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    goto LABEL_54;
  }
  id v21 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__str = 134217984;
    uint64_t v78 = a2;
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Can't set entity transform for unknown scene %llu", (uint8_t *)__str, 0xCu);
  }
LABEL_57:
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v63);
  }
  return pthread_rwlock_unlock((pthread_rwlock_t *)*v11);
}

void sub_23357153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,pthread_rwlock_t **a46)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a42);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a44);
  }
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::unloadAsset(re::AudioManager_PHASE_Async *this, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_rwlock_t **)((char *)this + 232);
  id v5 = (id *)((char *)this + 248);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(NSString, "stringWithFormat:", @"%llu", a2);
  uint64_t v6 = (re *)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = *re::audioLogObjects(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v14 = a2;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Unregistering audio asset (%llu).", buf, 0xCu);
  }
  uint64_t v8 = (re *)[*v5 removeAudioAssetID:a2];
  if (v6)
  {
    id v9 = [*v5 maybeEngine];
    uint64_t v10 = [v9 assetRegistry];
    [v10 unregisterAssetWithIdentifier:v6 completion:0];

    atomic_store(1u, (unsigned __int8 *)this + 536);
  }
  else
  {
    id v11 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = 0;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Unregistering audio asset (%@) which is not registered with PHASE", buf, 0xCu);
    }
  }

  return pthread_rwlock_unlock(*v4);
}

void sub_2335717BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getPHASEAssetForIdentifier(pthread_rwlock_t **this, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = (id *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  uint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", a2);
  if (v4)
  {
    id v5 = [v3[2] maybeEngine];
    uint64_t v6 = [v5 assetRegistry];
    uint64_t v7 = [v6 assetForIdentifier:v4];
  }
  else
  {
    uint64_t v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v11 = a2;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "could not create phase ID for asset %llu", buf, 0xCu);
    }
    uint64_t v7 = 0;
  }

  pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
  return v7;
}

void sub_233571958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::configureAndStartEngine(uint64_t this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v1 = atomic_load((unint64_t *)(this + 416));
  if (v1 != 1)
  {
    uint64_t v2 = this;
    uint64_t v4 = this + 232;
    uint64_t v3 = *(pthread_rwlock_t **)(this + 232);
    id v5 = (id *)(v4 + 16);
    id v19 = (id *)(v4 + 16);
    int v20 = (pthread_rwlock_t **)v4;
    uint64_t v6 = (re *)pthread_rwlock_rdlock(v3);
    uint64_t v7 = *re::audioLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Starting PHASEEngine", buf, 2u);
    }
    pthread_t v8 = pthread_self();
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 2524, (uint64_t)v8);
    id v9 = *v5;
    uint64_t v10 = [v9 engine];
    id v18 = 0;
    int v11 = [v10 startAndReturnError:&v18];
    id v12 = v18;

    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
    if (v11)
    {
      unsigned int v14 = atomic_load((unsigned int *)(v2 + 396));
      *(_DWORD *)(v2 + 39re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v14;
      atomic_store(1uLL, (unint64_t *)(v2 + 416));
      id v5 = v19;
    }
    else
    {
      uint64_t v15 = *re::audioLogObjects(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v22 = v12;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Could not start audio engine: %@", buf, 0xCu);
      }
      atomic_store(0, (unint64_t *)(v2 + 416));
    }
    [*v5 createListenerIfPending];
    if (*(void *)(v2 + 328)) {
      int v16 = v11;
    }
    else {
      int v16 = 0;
    }
    if (v16 == 1)
    {
      id v17 = *v5;
      [v17 engine];
    }
    return pthread_rwlock_unlock(*v20);
  }
  return this;
}

void sub_233571B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::forceAudioOutputType(uint64_t a1, int a2)
{
  uint64_t v4 = (id *)(a1 + 248);
  uint64_t v7 = a1 + 248;
  uint64_t v8 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  if (a2 == 2)
  {
    id v5 = objc_msgSend(*v4, "engine", v7, v8);
    [v5 setOutputSpatializationMode:2];
  }
  else
  {
    objc_msgSend(*v4, "engine", v7, v8);
    if (a2 == 1) {
      id v5 = {;
    }
      [v5 setOutputSpatializationMode:1];
    }
    else {
      id v5 = {;
    }
      [v5 setOutputSpatializationMode:0];
    }
  }

  atomic_store(1u, (unsigned __int8 *)(a1 + 536));
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_233571CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::currentAudioOutputType(pthread_rwlock_t **this)
{
  unint64_t v1 = (id *)(this + 29);
  id v5 = (char *)(this + 31);
  uint64_t v6 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  uint64_t v2 = objc_msgSend(v1[2], "engine", v5, v6);
  uint64_t v3 = [v2 outputSpatializationMode];

  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  if (v3 == 2) {
    return 2;
  }
  else {
    return v3 == 1;
  }
}

void sub_233571DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::applyCustomHRIR(re::AudioManager_PHASE_Async *this, NSURL *a2)
{
  uint64_t v3 = a2;
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  [*((id *)this + 31) setCustomHRIRURL:v3];
  atomic_store(1u, (unsigned __int8 *)this + 536);
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));
}

void sub_233571E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::registerMixGroup(re::AudioManager_PHASE_Async *this, PHASEGroup *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  uint64_t v4 = (pthread_rwlock_t **)((char *)this + 232);
  id v5 = (id *)((char *)this + 248);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  uint64_t v6 = objc_msgSend(*((id *)this + 31), "engine", (char *)this + 248, (char *)this + 232);

  if (v6)
  {
    id v8 = *v5;
    id v9 = [v8 engine];
    uint64_t v10 = [v9 groups];
    int v11 = [(PHASEGroup *)v3 identifier];
    id v12 = [v10 objectForKey:v11];

    if (v12)
    {
      unsigned int v14 = *re::audioLogObjects(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v15 = "[RE/PHASE] [MixGroup] [AudioManager_PHASE_Async] -> registerMixGroup : Phase Mix Group is already register"
              "ed with this engine";
LABEL_7:
        _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
      }
    }
    else
    {
      id v16 = *v5;
      id v17 = [v16 engine];
      [(PHASEGroup *)v3 registerWithEngine:v17];

      atomic_store(1u, (unsigned __int8 *)this + 536);
      id v19 = (id)*re::audioLogObjects(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        int v20 = [(PHASEGroup *)v3 identifier];
        *(_DWORD *)long long buf = 138412290;
        id v22 = v20;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Registered PHASEGroup. PhaseID: %@ (sceneID - connectionID - name).", buf, 0xCu);
      }
    }
  }
  else
  {
    unsigned int v14 = *re::audioLogObjects(v7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v15 = "[RE/PHASE] [MixGroup] [AudioManager_PHASE_Async] -> registerMixGroup : Phase Engine is nil";
      goto LABEL_7;
    }
  }
  pthread_rwlock_unlock(*v4);
}

void sub_2335720A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

pthread_rwlock_t ***std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](pthread_rwlock_t ***a1)
{
  return a1;
}

pthread_rwlock_t ***std::lock_guard<re::ReadWriteLock::Writer>::~lock_guard[abi:ne180100](pthread_rwlock_t ***a1)
{
  return a1;
}

void re::ReadWriteLock::~ReadWriteLock(re::ReadWriteLock *this)
{
  *(void *)this = 766030772;
  *(_OWORD *)((char *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 16re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    id v8 = (id *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        int v11 = (const void *)v4[3];
        v8[2] = (id)v4[2];
        id v12 = _Block_copy(v11);
        id v13 = v8[3];
        uint64_t v8[3] = v12;

        uint64_t v10 = (id *)*v8;
        unint64_t v14 = (unint64_t)v8[2];
        v8[1] = (id)v14;
        inserted = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare((uint64_t)a1, v14, v8 + 2);
        std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(a1, v8, inserted);
        uint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        id v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__emplace_multi<std::pair<unsigned long long const,void({block_pointer} {__strong})(void)> const&>(a1, v4 + 2);
    uint64_t v4 = (void *)*v4;
  }
}

void sub_233572380(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_233572398(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  id v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    double result = v16;
    id v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__emplace_multi<std::pair<unsigned long long const,void({block_pointer} {__strong})(void)> const&>(void *a1, unint64_t *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *int8x8_t v4 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = (const void *)a2[1];
  v4[2] = *a2;
  v4[3] = _Block_copy(v5);
  v4[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare((uint64_t)a1, v6, v4 + 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_233572934(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(void *a1, uint64_t *a2)
{
  uint64_t v2 = (void **)*a1;
  **(void **)*a1 += a2[2];
  uint64_t v3 = (uint64_t)v2[1];
  re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)v5, a2);
  v5[10] = 0;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)v5);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5);
}

void sub_233572A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  **(void **)(*a1 + 16) += *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  int8x8_t v4 = **(void ***)(v2 + 32);
  if (v4)
  {
    [v4 createPHASEOccluders:a2];
    uint64_t v5 = v10;
    long long v6 = v11;
    uint64_t v7 = v13;
    int v8 = v12 + 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    uint64_t v12 = 0;
    long long v6 = 0uLL;
    int v8 = 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v5;
  long long v15 = v6;
  long long v11 = 0uLL;
  uint64_t v10 = 0;
  uint64_t v17 = v7;
  LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v8;
  int v16 = 1;
  int v18 = 1;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)&v14);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
  return re::DynamicArray<re::audio::PHASEOccluderData>::deinit((uint64_t)&v10);
}

void sub_233572AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  re::DynamicArray<re::audio::PHASEOccluderData>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  **(void **)(*a1 + 40) += *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 + 48);
  int8x8_t v4 = **(void ***)(v2 + 56);
  if (v4)
  {
    [v4 updatePHASEOccluders:a2];
    uint64_t v5 = v10;
    long long v6 = v11;
    uint64_t v7 = v13;
    int v8 = v12 + 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    uint64_t v12 = 0;
    long long v6 = 0uLL;
    int v8 = 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v5;
  long long v15 = v6;
  long long v11 = 0uLL;
  uint64_t v10 = 0;
  uint64_t v17 = v7;
  LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v8;
  int v16 = 1;
  int v18 = 2;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)&v14);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
  return re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit((uint64_t)&v10);
}

void sub_233572BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v4 + 1;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v4 + 1 >= v7)
  {
    if (v7 < v6)
    {
      if (*(void *)a1)
      {
        unint64_t v8 = 2 * v7;
        if (!v7) {
          unint64_t v8 = 8;
        }
        if (v8 <= v6) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = v8;
        }
        re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity((void *)a1, v9);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      else
      {
        re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity((void *)a1, v6);
        uint64_t v4 = 0;
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(_DWORD *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      }
    }
    unint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)(a1 + 40) + 48 * ((*(void *)(a1 + 24) + v4) % v7), a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void *re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = result + 2;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(v5, a2);
        *unint64_t v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v8 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        uint64_t v9 = 0;
        uint64_t v10 = v5[3];
        do
        {
          uint64_t v11 = v5[5] + 48 * ((unint64_t)(v9 + v5[3]) % v5[1]);
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v8[6 * v10], v11);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
          if (v10 + 1 < a2) {
            ++v10;
          }
          else {
            uint64_t v10 = 0;
          }
          ++v9;
        }
        while (v9 != v5[2]);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E6DA170[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6DA188[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::audio::PHASEOccluderData>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

uint64_t re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 40 * (void)v5);
      unint64_t v5 = v3[2];
    }
    uint64_t result = (void **)memcpy((char *)v3[4] + 40 * (void)v5, (const void *)(*(void *)(a2 + 32) + 40 * (void)v5), 40 * v4 - 40 * (void)v5);
  }
  else if (v4)
  {
    uint64_t result = (void **)memmove(result[4], *(const void **)(a2 + 32), 40 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26E6DA170[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

double re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      if (a1[2])
      {
        uint64_t v4 = 0;
        do
        {
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit((uint64_t *)(a1[5] + 48 * ((v4 + a1[3]) % (unint64_t)a1[1])));
          ++v4;
        }
        while (v4 != a1[2]);
        uint64_t v2 = *a1;
        uint64_t v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  double result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = a1[1];
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v20 = operator new(8 * *(void *)&prime);
          BOOL v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v13;
          if (*v13)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v13;
            int v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *uint64_t v23 = *v29;
                  *int v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v30) = v29;
                  int v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                int v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        id v35 = (void *)*a1;
        *a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v31 = *a1;
  int v32 = *(void **)(*a1 + 8 * v4);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *int v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v31 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    int v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_2335738A8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v8;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v_ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

double re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      if (a1[2])
      {
        uint64_t v4 = 0;
        do
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(a1[5] + 48 * ((v4 + a1[3]) % (unint64_t)a1[1]));
          ++v4;
        }
        while (v4 != a1[2]);
        uint64_t v2 = *a1;
        uint64_t v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  }
  return result;
}

void *re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = result + 2;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity(v5, a2);
        *uint64_t v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v8 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        uint64_t v9 = 0;
        uint64_t v10 = v5[3];
        do
        {
          unint64_t v11 = (uint64_t *)(v5[5] + 48 * ((unint64_t)(v9 + v5[3]) % v5[1]));
          unint64_t v12 = &v8[6 * v10];
          v12[5] = 0;
          *((_DWORD *)v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
          *(_OWORD *)unint64_t v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          uint64_t v13 = v11[1];
          uint64_t *v12 = *v11;
          v12[1] = v13;
          *unint64_t v11 = 0;
          v11[1] = 0;
          uint64_t v14 = v12[2];
          void v12[2] = v11[2];
          uint64_t v11[2] = v14;
          uint64_t v15 = v12[5];
          v12[5] = v11[5];
          v11[5] = v15;
          uint64_t v16 = v12[3];
          v12[3] = v11[3];
          void v11[3] = v16;
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(v11);
          if (v10 + 1 < a2) {
            ++v10;
          }
          else {
            uint64_t v10 = 0;
          }
          ++v9;
        }
        while (v9 != *v6);
      }
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(uint64_t *a1, const void *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = operator new(0x88uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = &unk_26E6DA1B0;
  uint64_t v11 = (uint64_t)(v10 + 3);
  long long v12 = *(_OWORD *)(a4 + 16);
  v16[0] = *(_OWORD *)a4;
  v16[1] = v12;
  char v17 = *(unsigned char *)(a4 + 32);
  if (v17) {
    re::DynamicString::DynamicString((re::DynamicString *)&v18, (const re::DynamicString *)(a4 + 40));
  }
  if (*(unsigned char *)(a4 + 72)) {
    int v22 = *(_DWORD *)(a4 + 76);
  }
  char v23 = *(unsigned char *)(a4 + 80);
  uint64_t result = re::PersistedAssetData::PersistedAssetData(v11, a2, a3, (uint64_t)v16, *a5);
  if (v17)
  {
    uint64_t result = v18;
    if (v18)
    {
      if (v19) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 40))(v18, v20, v14, v15);
      }
    }
  }
  *a1 = v11;
  a1[1] = (uint64_t)v10;
  return result;
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 80));
  }

  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t re::PersistedAssetData::PersistedAssetData(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  *(void *)a1 = _Block_copy(a2);
  id v10 = v9;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v10;
  long long v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11;
  int v12 = *(unsigned __int8 *)(a4 + 32);
  *(unsigned char *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v12;
  if (v12) {
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a4 + 40));
  }
  int v13 = *(unsigned __int8 *)(a4 + 72);
  *(unsigned char *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v13;
  if (v13) {
    *(_DWORD *)(a1 + 9re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_DWORD *)(a4 + 76);
  }
  *(unsigned char *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(unsigned char *)(a4 + 80);
  *(void *)(a1 + 104) = a5;

  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(uint64_t *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = operator new(0x88uLL);
  v8[1] = 0;
  v8[2] = 0;
  *unint64_t v8 = &unk_26E6DA1B0;
  uint64_t v9 = (uint64_t)(v8 + 3);
  long long v10 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v10;
  char v15 = *(unsigned char *)(a3 + 32);
  if (v15) {
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a3 + 40));
  }
  if (*(unsigned char *)(a3 + 72)) {
    int v20 = *(_DWORD *)(a3 + 76);
  }
  char v21 = *(unsigned char *)(a3 + 80);
  uint64_t result = re::PersistedAssetData::PersistedAssetData(v9, a2, 0, (uint64_t)v14, *a4);
  if (v15)
  {
    uint64_t result = v16;
    if (v16)
    {
      if (v17) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v18, v12, v13);
      }
    }
  }
  *a1 = v9;
  a1[1] = (uint64_t)v8;
  return result;
}

void *re::allocInfo_AudioGainChange(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_112, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_112))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7ECC8, "AudioGainChange");
    __cxa_guard_release(&_MergedGlobals_112);
  }
  return &unk_26AF7ECC8;
}

void re::initInfo_AudioGainChange(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x61497D543298CALL;
  v22[1] = "AudioGainChange";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7ECA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7ECA0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "currentGain";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7ECA8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "targetGain";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7ECB0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::introspect_double((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "fadeDuration";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7ECB8 = v16;
      char v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_uint32_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "currentGainChangeID";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7ECC0 = v20;
      __cxa_guard_release(&qword_26AF7ECA0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7ECA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioGainChange>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioGainChange>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AudioGainChange>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioGainChange>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void sub_2335744D4(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AudioGainChange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a3 = result;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  return result;
}

double re::internal::defaultConstructV2<re::AudioGainChange>(uint64_t a1)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  return result;
}

uint64_t re::introspect_AudioGainChange(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGainChange", (uint64_t (*)(re::internal *))re::allocInfo_AudioGainChange, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGainChange, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioGainChange>, this);
}

void *re::allocInfo_AudioMixGroup(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7ED50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7ED50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7EE10, "AudioMixGroup");
    __cxa_guard_release(&qword_26AF7ED50);
  }
  return &unk_26AF7EE10;
}

void re::initInfo_AudioMixGroup(re *this, re::IntrospectionBase *a2)
{
  unint64_t v75 = 0xE1E5FF0EF545E6B2;
  v76[0] = "AudioMixGroup";
  re::StringID::destroyString((re::StringID *)&v75);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v70;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7ED48, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7ED48);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "ID";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7EDA0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_uint64_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "parentID";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7EDA8 = v12;
      uint64_t v14 = re::introspectionAllocator((re *)v12);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7ED58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7ED58))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7ED60);
        qword_26AF7ED60 = (uint64_t)&unk_26E6DA200;
        __cxa_guard_release(&qword_26AF7ED58);
      }
      if ((_MergedGlobals_113 & 1) == 0)
      {
        char v15 = re::introspect_uint64_t((re *)1, v13);
        if ((_MergedGlobals_113 & 1) == 0)
        {
          uint64_t v16 = (uint64_t)v15;
          _MergedGlobals_113 = 1;
          int v17 = v15[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7ED60, 0);
          qword_26AF7ED70 = 0x2800000003;
          dword_26AF7ED78 = v17;
          word_26AF7ED7C = 0;
          *(void *)&xmmword_26AF7ED80 = 0;
          *((void *)&xmmword_26AF7ED80 + 1) = 0xFFFFFFFFLL;
          qword_26AF7ED90 = v16;
          unk_26AF7ED98 = 0;
          qword_26AF7ED60 = (uint64_t)&unk_26E6DA200;
          re::IntrospectionRegistry::add(v18, v19);
          re::getPrettyTypeName((re *)&qword_26AF7ED60, (const re::IntrospectionBase *)&v75);
          if (v76[0]) {
            uint64_t v20 = (const char *)v76[1];
          }
          else {
            uint64_t v20 = (char *)v76 + 1;
          }
          if (v75 && (v76[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v75 + 40))();
          }
          long long v72 = *(_OWORD *)(v16 + 32);
          long long v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v73);
          if (v21)
          {
            uint64_t v22 = *v21;
            *((void *)&v71 + 1) = v22;
          }
          else
          {
            long long v74 = v72;
            re::TypeBuilder::beginListType((uint64_t)&v75, v73, 1, 0x28uLL, 8uLL, &v74);
            re::TypeBuilder::setConstructor((uint64_t)&v75, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v75, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v75, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v75, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v75, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v75, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v75, v23);
          }
          xmmword_26AF7ED80 = v71;
          re::StringID::destroyString((re::StringID *)v73);
        }
      }
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "children";
      *(void *)(v24 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7ED60;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3000000003;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v24 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7EDB0 = v24;
      uint8x8_t v25 = re::introspectionAllocator((re *)v24);
      uint8x8_t v27 = re::IntrospectionInfo<re::DynamicString>::get(1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v28 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 4;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7EDB8 = v28;
      int v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_float((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "gain_dB";
      *(void *)(v32 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7000000005;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v32 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7EDC0 = v32;
      unint64_t v33 = re::introspectionAllocator((re *)v32);
      id v35 = re::introspect_BOOL((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "muteState";
      *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5800000006;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v36 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF7EDC8 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      uint64_t v39 = re::introspect_BOOL((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "soloState";
      *(void *)(v40 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5900000007;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v40 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF7EDD0 = v40;
      id v41 = re::introspectionAllocator((re *)v40);
      uint64_t v43 = re::introspect_float((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "rampRate";
      *(void *)(v44 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6400000008;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v44 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF7EDD8 = v44;
      int v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::introspect_float((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "speed";
      *(void *)(v48 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6800000009;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v48 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF7EDE0 = v48;
      id v49 = re::introspectionAllocator((re *)v48);
      float32x4_t v51 = re::introspect_float((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "highFrequencyGain_dB";
      *(void *)(v52 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5C0000000ALL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v52 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF7EDE8 = v52;
      float32x4_t v53 = re::introspectionAllocator((re *)v52);
      uint64_t v55 = re::introspect_float((re *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "lowFrequencyGain_dB";
      *(void *)(v56 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x600000000BLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v56 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26AF7EDF0 = v56;
      char v57 = re::introspectionAllocator((re *)v56);
      char v59 = re::introspect_float((re *)1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "groupFadeDuration";
      *(void *)(v60 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v59;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6C0000000CLL;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v60 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_26AF7EDF8 = v60;
      uint64_t v61 = re::introspectionAllocator((re *)v60);
      long long v63 = re::introspect_int((re *)1, v62);
      uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 72, 8);
      *(_DWORD *)uint64_t v64 = 1;
      *(void *)(v64 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "currentGainChangeID";
      *(void *)(v64 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v63;
      *(void *)(v64 + 24) = 0;
      *(void *)(v64 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7C0000000DLL;
      *(_DWORD *)(v64 + 40) = 0;
      *(void *)(v64 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v64 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_26AF7EE00 = v64;
      uint64_t v65 = re::introspectionAllocator((re *)v64);
      simd_float4x4 v67 = re::introspect_float((re *)1, v66);
      uint64_t v68 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v65 + 32))(v65, 72, 8);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "targetGain_dB";
      *(void *)(v68 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v67;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x740000000ELL;
      *(_DWORD *)(v68 + 40) = 0;
      *(void *)(v68 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v68 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_26AF7EE08 = v68;
      __cxa_guard_release(&qword_26AF7ED48);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7EDA0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioMixGroup>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioMixGroup>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AudioMixGroup>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioMixGroup>;
  re::IntrospectionRegistry::add(this, v3);
  long long v69 = v70;
}

void sub_233575070(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AudioMixGroup>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 80) = 0;
  *(_WORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  double result = 0.0;
  *(_OWORD *)(a3 + 9re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = xmmword_23435FBB0;
  *(void *)(a3 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 10re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 124) = 1;
  return result;
}

double re::internal::defaultDestruct<re::AudioMixGroup>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 48);
  return re::DynamicString::deinit(a3);
}

double re::internal::defaultConstructV2<re::AudioMixGroup>(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  double result = 0.0;
  *(_OWORD *)(a1 + 9re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = xmmword_23435FBB0;
  *(void *)(a1 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 10re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 124) = 1;
  return result;
}

double re::internal::defaultDestructV2<re::AudioMixGroup>(re::DynamicString *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 48);
  return re::DynamicString::deinit(a1);
}

uint64_t re::introspect_AudioMixGroup(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixGroup", (uint64_t (*)(re::internal *))re::allocInfo_AudioMixGroup, (re::IntrospectionBase *(*)(void))re::initInfo_AudioMixGroup, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioMixGroup>, this);
}

float *re::AudioMixGroup::applyRamp(float *this, double a2)
{
  float v2 = this[29];
  float v3 = this[30];
  if (a2 > 0.0 && v3 != v2)
  {
    float v5 = this[25];
    float v6 = this[29];
    if (v5 != 0.0)
    {
      double v7 = this[27] - a2;
      if (v7 < 0.0) {
        double v7 = 0.0;
      }
      float v8 = v7;
      this[27] = v8;
      float v6 = v3 + v5 * a2;
    }
    this[30] = v6;
    BOOL v9 = v5 >= 0.0 || v6 > v2;
    if (!v9 || (v5 > 0.0 ? (BOOL v10 = v6 < v2) : (BOOL v10 = 1), !v10)) {
      this[30] = v2;
    }
  }
  return this;
}

uint64_t re::AudioMixGroup::fadeToGainWithDuration(uint64_t this, float a2, double a3, int a4)
{
  if (a3 < 0.0) {
    a3 = 0.0;
  }
  if (a2 > 15.0) {
    a2 = 15.0;
  }
  float v4 = fmaxf(a2, -60.0);
  if (*(float *)(this + 116) == v4 && *(float *)(this + 108) == 0.0) {
    a3 = 0.0;
  }
  if (!a4 || a3 == 0.0 || *(float *)(this + 108) != 0.0) {
    *(float *)(this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v4;
  }
  *(float *)(this + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  float v5 = a3;
  *(float *)(this + 10re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v5;
  float v6 = 0.0;
  if (a3 > 0.0) {
    float v6 = (float)(v4 - *(float *)(this + 120)) / a3;
  }
  *(float *)(this + 100) = v6;
  ++*(_DWORD *)(this + 124);
  return this;
}

void *re::IntrospectionDynamicArray<unsigned long long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<unsigned long long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<unsigned long long>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<unsigned long long>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<float *>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<unsigned long long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<double>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<unsigned long long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(this, &v10);
  float v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 8 * *((void *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<float *>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::eventReceived(uint64_t result)
{
  *(unsigned char *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 1;
  return result;
}

uint64_t re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::isCompleted(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this)
{
  return *((unsigned __int8 *)this + 12);
}

void re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::stepDescription(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this@<X0>, std::string *a2@<X8>)
{
  re::nameForAudioManagerStateMachineEvent(*((_DWORD *)this + 2), &v8);
  unint64_t v4 = std::string::append(&v8, ": ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (*((unsigned char *)this + 12)) {
    float v6 = "completed";
  }
  else {
    float v6 = "pending";
  }
  double v7 = std::string::append(&v9, v6);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_233575D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::copy(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this)
{
}

void re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::~AudioManager_PHASE_StateMachine_GlobalRecoveryStep(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this)
{
}

uint64_t re::AudioManager_PHASE_StateMachine_RecoveryStep::getStateMachineEvent(re::AudioManager_PHASE_StateMachine_RecoveryStep *this)
{
  return *((unsigned int *)this + 2);
}

re *REAudioCreatePHASEEngine(void)
{
  int v0 = [(id)objc_opt_class() instancesRespondToSelector:sel_initWithUpdateMode_spatialMode_];
  id v1 = objc_alloc(MEMORY[0x263F14920]);
  if (v0) {
    uint64_t v2 = (re *)[v1 initWithUpdateMode:1 spatialMode:1];
  }
  else {
    uint64_t v2 = (re *)[v1 initWithUpdateMode:1];
  }
  int v3 = v2;
  unint64_t v4 = *re::audioLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 0;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Initializing Phase audio engine complete.", (uint8_t *)v6, 2u);
  }
  return v3;
}

uint64_t re::AudioManager_PHASE_State_Disconnected::handleStateChangeEvent(re *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((a2 - 2) < 8)
  {
    unint64_t v4 = (id)*re::audioLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, re *))(*(void *)a1 + 8))(v11, a1);
      int v5 = v12;
      float v6 = (void **)v11[0];
      re::nameForAudioManagerStateMachineEvent(a2, __p);
      double v7 = v11;
      if (v5 < 0) {
        double v7 = v6;
      }
      if (v14 >= 0) {
        std::string v8 = __p;
      }
      else {
        std::string v8 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v16 = v7;
      __int16 v17 = 2080;
      uint64_t v18 = v8;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] Invalid state change event. Current state : %s, event '%s'", buf, 0x16u);
      if (v14 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  if (a2 == 1) {
    return 0x100000001;
  }
  if (!a2)
  {
    unint64_t v4 = (id)*re::audioLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, re *))(*(void *)a1 + 8))(v11, a1);
      if (v12 >= 0) {
        std::string v9 = v11;
      }
      else {
        std::string v9 = (void **)v11[0];
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v9;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] AudioManager_PHASE_State is already %s", __p, 0xCu);
LABEL_17:
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }
LABEL_19:
  }
  return 0;
}

void sub_2335760A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void *re::AudioManager_PHASE_State_Disconnected::stateDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Disconnected");
}

uint64_t re::AudioManager_PHASE_State_Disconnected::stateType(re::AudioManager_PHASE_State_Disconnected *this)
{
  return 0;
}

void re::AudioManager_PHASE_State_Disconnected::~AudioManager_PHASE_State_Disconnected(re::AudioManager_PHASE_State_Disconnected *this)
{
}

uint64_t *introspect_REAudioInputMode(int a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EE90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EE90);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioInputModePointSource";
      qword_26AF7EEE0 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioInputModeStereoBypass";
      qword_26AF7EEE8 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "REAudioInputModeAmbientBed";
      qword_26AF7EEF0 = v37;
      __cxa_guard_release(&qword_26AF7EE90);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EE98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EE98))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7EF78, "REAudioInputMode", 1, 1, 1, 1);
    qword_26AF7EF78 = (uint64_t)&unk_26E715E00;
    qword_26AF7EFB8 = (uint64_t)&introspect_REAudioInputMode(BOOL)::enumTable;
    dword_26AF7EF88 = 9;
    __cxa_guard_release(&qword_26AF7EE98);
  }
  if (a1)
  {
    if (_MergedGlobals_114) {
      return &qword_26AF7EF78;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    char v3 = _MergedGlobals_114;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    if (v3) {
      return &qword_26AF7EF78;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_114)
    {
LABEL_34:
      int v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7EF78;
    }
  }
  _MergedGlobals_114 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7EF78, a2);
  uint64_t v39 = 0xF873BB5B608C0CD4;
  uint64_t v40 = "REAudioInputMode";
  v44[0] = 0x31CD534126;
  v44[1] = "uint8_t";
  double v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v44);
    std::string v9 = (unsigned int *)qword_26AF7EFB8;
    v43[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v44, &v39, 1, 1, (uint64_t)v43);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          char v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                __int16 v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v42.char var0 = 2 * v15;
          v42.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v19, &v42);
          re::StringID::destroyString((re::StringID *)&v42);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v42.char var0 = 2 * v23;
            v42.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v27, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v28);
    xmmword_26AF7EF98 = v41;
    re::StringID::destroyString((re::StringID *)&v39);
    if (a1) {
      return &qword_26AF7EF78;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v44);
  re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioInputMode", v39, v40);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_233576558(_Unwind_Exception *a1)
{
}

uint64_t *introspect_REAudioPlaybackState(int a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EEA0);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioPlaybackState_Stopped";
      qword_26AF7EF48 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioPlaybackState_Playing";
      qword_26AF7EF50 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *((void *)v37 + 1) = 2;
      *((void *)v37 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioPlaybackState_Completed";
      qword_26AF7EF58 = (uint64_t)v37;
      uint64_t v38 = re::introspectionAllocator(v37);
      uint64_t v39 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 24, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *((void *)v39 + 1) = 3;
      *((void *)v39 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioPlaybackState_Paused";
      qword_26AF7EF60 = (uint64_t)v39;
      uint64_t v40 = re::introspectionAllocator(v39);
      long long v41 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 24, 8);
      *(_DWORD *)long long v41 = 1;
      *((void *)v41 + 1) = 9;
      *((void *)v41 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioPlaybackState_Initial";
      qword_26AF7EF68 = (uint64_t)v41;
      StringID v42 = re::introspectionAllocator(v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 24, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 4;
      *(void *)(v43 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "REAudioPlaybackState_Prepared";
      qword_26AF7EF70 = v43;
      __cxa_guard_release(&qword_26AF7EEA0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EEA8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7EFC0, "REAudioPlaybackState", 8, 8, 1, 1);
    qword_26AF7EFC0 = (uint64_t)&unk_26E715E00;
    qword_26AF7F000 = (uint64_t)&introspect_REAudioPlaybackState(BOOL)::enumTable;
    dword_26AF7EFD0 = 9;
    __cxa_guard_release(&qword_26AF7EEA8);
  }
  if (a1)
  {
    if (byte_26AF7EE89) {
      return &qword_26AF7EFC0;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v50);
    char v3 = byte_26AF7EE89;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v50);
    if (v3) {
      return &qword_26AF7EFC0;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (byte_26AF7EE89)
    {
LABEL_34:
      int v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7EFC0;
    }
  }
  byte_26AF7EE89 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7EFC0, a2);
  uint64_t v45 = 0x6E6EE0AE8D82AD26;
  uint64_t v46 = "REAudioPlaybackState";
  v50[0] = 0x607DD11CB1ALL;
  v50[1] = "uint64_t";
  double v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v50);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v50);
    std::string v9 = (unsigned int *)qword_26AF7F000;
    v49[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v50, &v45, 1, 1, (uint64_t)v49);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          char v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                __int16 v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v48.char var0 = 2 * v15;
          v48.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v50, v19, &v48);
          re::StringID::destroyString((re::StringID *)&v48);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v48.char var0 = 2 * v23;
            v48.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v50, v27, &v48);
            re::StringID::destroyString((re::StringID *)&v48);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v50, v28);
    xmmword_26AF7EFE0 = v47;
    re::StringID::destroyString((re::StringID *)&v45);
    if (a1) {
      return &qword_26AF7EFC0;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v50);
  re::internal::assertLog((re::internal *)5, v44, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioPlaybackState", v45, v46);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_233576AC4(_Unwind_Exception *a1)
{
}

uint64_t *introspect_REAudioSourceDirectivityMode(int a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EEB0);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioSourceDirectivityModeOmnidirectional";
      qword_26AF7EF28 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioSourceDirectivityModeBeam";
      qword_26AF7EF30 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *((void *)v37 + 1) = 2;
      *((void *)v37 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioSourceDirectivityModeHuman";
      qword_26AF7EF38 = (uint64_t)v37;
      uint64_t v38 = re::introspectionAllocator(v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 24, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 3;
      *(void *)(v39 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "REAudioSourceDirectivityModeSphericalCap";
      qword_26AF7EF40 = v39;
      __cxa_guard_release(&qword_26AF7EEB0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EEB8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7F008, "REAudioSourceDirectivityMode", 4, 4, 1, 1);
    qword_26AF7F008 = (uint64_t)&unk_26E715E00;
    qword_26AF7F048 = (uint64_t)&introspect_REAudioSourceDirectivityMode(BOOL)::enumTable;
    dword_26AF7F018 = 9;
    __cxa_guard_release(&qword_26AF7EEB8);
  }
  if (a1)
  {
    if (byte_26AF7EE8A) {
      return &qword_26AF7F008;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    char v3 = byte_26AF7EE8A;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if (v3) {
      return &qword_26AF7F008;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (byte_26AF7EE8A)
    {
LABEL_34:
      int v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7F008;
    }
  }
  byte_26AF7EE8A = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7F008, a2);
  uint64_t v41 = 0x4BCB4D54408DF13ALL;
  StringID v42 = "REAudioSourceDirectivityMode";
  v46[0] = 208862;
  v46[1] = "int";
  double v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v46);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v46);
    std::string v9 = (unsigned int *)qword_26AF7F048;
    v45[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v46, &v41, 1, 1, (uint64_t)v45);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          char v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                __int16 v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v44.char var0 = 2 * v15;
          v44.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v19, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v44.char var0 = 2 * v23;
            v44.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v27, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v28);
    xmmword_26AF7F028 = v43;
    re::StringID::destroyString((re::StringID *)&v41);
    if (a1) {
      return &qword_26AF7F008;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v46);
  re::internal::assertLog((re::internal *)5, v40, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioSourceDirectivityMode", v41, v42);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_233576FA0(_Unwind_Exception *a1)
{
}

uint64_t *introspect_REAudioNormalizationMode(int a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EEC0);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioNormalizationModeNone";
      qword_26AF7EEF8 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioNormalizationModeDynamic";
      qword_26AF7EF00 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "REAudioNormalizationModeStatic";
      qword_26AF7EF08 = v37;
      __cxa_guard_release(&qword_26AF7EEC0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EEC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EEC8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7F050, "REAudioNormalizationMode", 4, 4, 1, 1);
    qword_26AF7F050 = (uint64_t)&unk_26E715E00;
    qword_26AF7F090 = (uint64_t)&introspect_REAudioNormalizationMode(BOOL)::enumTable;
    dword_26AF7F060 = 9;
    __cxa_guard_release(&qword_26AF7EEC8);
  }
  if (a1)
  {
    if (byte_26AF7EE8B) {
      return &qword_26AF7F050;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    char v3 = byte_26AF7EE8B;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    if (v3) {
      return &qword_26AF7F050;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (byte_26AF7EE8B)
    {
LABEL_34:
      int v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7F050;
    }
  }
  byte_26AF7EE8B = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7F050, a2);
  uint64_t v39 = 0xCFA8E1CC2B40CB7ALL;
  uint64_t v40 = "REAudioNormalizationMode";
  v44[0] = 208862;
  v44[1] = "int";
  double v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v44);
    std::string v9 = (unsigned int *)qword_26AF7F090;
    v43[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v44, &v39, 1, 1, (uint64_t)v43);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          char v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                __int16 v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v42.char var0 = 2 * v15;
          v42.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v19, &v42);
          re::StringID::destroyString((re::StringID *)&v42);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v42.char var0 = 2 * v23;
            v42.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v27, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v28);
    xmmword_26AF7F070 = v41;
    re::StringID::destroyString((re::StringID *)&v39);
    if (a1) {
      return &qword_26AF7F050;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v44);
  re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioNormalizationMode", v39, v40);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_233577428(_Unwind_Exception *a1)
{
}

uint64_t *introspect_REAudioCalibrationMode(int a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EED0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7EED0);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioCalibrationModeNone";
      qword_26AF7EF10 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "REAudioCalibrationModeRelativeSpl";
      qword_26AF7EF18 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "REAudioCalibrationModeAbsoluteSpl";
      qword_26AF7EF20 = v37;
      __cxa_guard_release(&qword_26AF7EED0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7EED8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7EED8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7F098, "REAudioCalibrationMode", 4, 4, 1, 1);
    qword_26AF7F098 = (uint64_t)&unk_26E715E00;
    qword_26AF7F0D8 = (uint64_t)&introspect_REAudioCalibrationMode(BOOL)::enumTable;
    dword_26AF7F0A8 = 9;
    __cxa_guard_release(&qword_26AF7EED8);
  }
  if (a1)
  {
    if (byte_26AF7EE8C) {
      return &qword_26AF7F098;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    char v3 = byte_26AF7EE8C;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    if (v3) {
      return &qword_26AF7F098;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (byte_26AF7EE8C)
    {
LABEL_34:
      int v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7F098;
    }
  }
  byte_26AF7EE8C = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7F098, a2);
  uint64_t v39 = 0x72177D22AD933D94;
  uint64_t v40 = "REAudioCalibrationMode";
  v44[0] = 208862;
  v44[1] = "int";
  double v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v44);
    std::string v9 = (unsigned int *)qword_26AF7F0D8;
    v43[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v44, &v39, 1, 1, (uint64_t)v43);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          char v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                __int16 v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v42.char var0 = 2 * v15;
          v42.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v19, &v42);
          re::StringID::destroyString((re::StringID *)&v42);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  uint8x8_t v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v42.char var0 = 2 * v23;
            v42.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v27, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v28);
    xmmword_26AF7F0B8 = v41;
    re::StringID::destroyString((re::StringID *)&v39);
    if (a1) {
      return &qword_26AF7F098;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v44);
  re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioCalibrationMode", v39, v40);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2335778AC(_Unwind_Exception *a1)
{
}

void sub_233577978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233577B6C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_233577C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233577CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233577EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

re::AudioSessionCache *re::AudioSessionCache::AudioSessionCache(NSObject **this)
{
  *(_OWORD *)((char *)this + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(NSObject **)((char *)this + 44) = 0x7FFFFFFF;
  this[7] = 0;
  this[8] = 54000;
  uint64_t v5 = 0x100000001;
  int v6 = 0;
  uint64_t v7 = 0;
  re::dispatch::Queue::make("com.apple.re.AudioSessionCache", (int *)&v5, &v8);
  if (&v8 != this)
  {
    uint64_t v2 = v8;
    uint64_t v8 = 0;
    char v3 = *this;
    *this = v2;
  }
  return (re::AudioSessionCache *)this;
}

void re::AudioSessionCache::sessionForID(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v12 = a2;
  if (a2)
  {
    uint64_t v5 = this + 14;
    os_unfair_lock_lock(this + 14);
    uint64_t v6 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v12);
    if (v6)
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3, v6);
      os_unfair_lock_unlock(v5);
    }
    else
    {
      int v10 = 1;
      uint64_t v11 = *(void *)&this[16]._os_unfair_lock_opaque;
      re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)&this[2], &v12, (uint64_t)v9);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
      os_unfair_lock_unlock(v5);
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 3221225472;
      v7[2] = ___ZN2re17AudioSessionCache12sessionForIDEj_block_invoke;
      v7[3] = &__block_descriptor_44_e5_v8__0l;
      v7[4] = this;
      unsigned int v8 = v12;
      dispatch_async(*(dispatch_queue_t *)&this->_os_unfair_lock_opaque, v7);
      *(_DWORD *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
    }
  }
  else
  {
    *(_DWORD *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  }
}

void sub_23357819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = *a2;
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v6 + 40 * v4 + 12) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(_DWORD *)(v6 + 40 * v4 + 12) == v2) {
        return v6 + 40 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 40 * v4 + 16;
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(_DWORD *)(v11 + 40 * v10 + 12) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 16;
}

void ___ZN2re17AudioSessionCache12sessionForIDEj_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  unint64_t v3 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v4;
    LOWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1024;
    *(_DWORD *)((char *)&v16 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v4;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Calling [AVAudioSession retrieveSessionWithID:%u(0x%x)]", buf, 0xEu);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = (unsigned int *)(a1 + 40);
  id v13 = [MEMORY[0x263F28D90] retrieveSessionWithID:v6];
  unint64_t v7 = v2 + 14;
  os_unfair_lock_lock(v2 + 14);
  uint64_t v8 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&v2[2], v5);
  uint64_t v12 = v8;
  if (v8)
  {
    *(void *)long long buf = &v13;
    char v16 = v5;
    __int16 v17 = &v13;
    int v18 = v5;
    uint64_t v19 = &v12;
    uint64_t v20 = v5;
    uint64_t v21 = v5;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if (v9 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    char v14 = buf;
    ((void (*)(uint8_t **))off_26E6DA3C8[v9])(&v14);
  }
  else
  {
    uint64_t v10 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = *v5;
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v11;
      LOWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1024;
      *(_DWORD *)((char *)&v16 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] removed from cache before retrieval finished", buf, 0xEu);
    }
  }
  os_unfair_lock_unlock(v7);
}

void sub_233578530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

uint64_t re::AudioSessionCache::addSession(os_unfair_lock_s *this, AVAudioSession *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  unsigned int v17 = [(AVAudioSession *)v3 opaqueSessionID];
  if (!v17)
  {
    int v4 = this[15]._os_unfair_lock_opaque + 1;
    do
    {
      unsigned int v5 = v4;
      int v4 = 1;
    }
    while (!v5);
    this[15]._int os_unfair_lock_opaque = v5;
    unsigned int v17 = v5;
  }
  unsigned int v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  unint64_t v7 = (re *)re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v17);
  if (!v7 || *((_DWORD *)v7 + 2) != 3)
  {
    *(void *)long long buf = v3;
    v19[0] = 3;
    uint64_t v20 = *(void *)&this[16]._os_unfair_lock_opaque;
    unint64_t v9 = 0xBF58476D1CE4E5B9 * (v17 ^ ((unint64_t)v17 >> 30));
    unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
    if (*(void *)&this[2]._os_unfair_lock_opaque)
    {
      unint64_t v11 = v10 % this[8]._os_unfair_lock_opaque;
      uint64_t v12 = *(unsigned int *)(*(void *)&this[4]._os_unfair_lock_opaque + 4 * v11);
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)&this[6]._os_unfair_lock_opaque;
        if (*(_DWORD *)(v13 + 40 * v12 + 12) == v17)
        {
LABEL_14:
          std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(v13 + 40 * v12 + 16, (void **)(v13 + 40 * v12 + 16), (void **)buf);
          *(void *)(v13 + 40 * v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v20;
LABEL_17:
          ++this[12]._os_unfair_lock_opaque;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
          goto LABEL_18;
        }
        while (1)
        {
          int v14 = *(_DWORD *)(v13 + 40 * v12 + 8);
          uint64_t v12 = v14 & 0x7FFFFFFF;
          if ((v14 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(_DWORD *)(v13 + 40 * v12 + 12) == v17) {
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      LODWORD(v_ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
    }
    re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)&this[2], v11, v10, &v17, (uint64_t)buf);
    goto LABEL_17;
  }
  uint64_t v8 = *re::audioLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v17;
    LOWORD(v19[0]) = 1024;
    *(_DWORD *)((char *)v19 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v17;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_INFO, "[RE] AudioSessionCache::addSession: session with known sessionID=%u(0x%x)! Not replacing", buf, 0xEu);
  }
LABEL_18:
  uint64_t v15 = v17;
  os_unfair_lock_unlock(v6);

  return v15;
}

void sub_23357879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void re::AudioSessionCache::keepSessionAlive(os_unfair_lock_s *this, unsigned int a2)
{
  unsigned int v5 = a2;
  unint64_t v3 = this + 14;
  os_unfair_lock_lock(this + 14);
  uint64_t v4 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v5);
  if (v4) {
    *(void *)(v4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)&this[16]._os_unfair_lock_opaque;
  }
  os_unfair_lock_unlock(v3);
}

void sub_23357883C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioSessionCache::update(re::AudioSessionCache *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2335790A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  operator delete(v20);
  os_unfair_lock_unlock(lock);
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove(uint64_t result, unsigned int a2)
{
  if (*(void *)result)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
    unint64_t v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
       % *(unsigned int *)(result + 24);
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(result + 16);
      if (*(_DWORD *)(v7 + 40 * v6 + 12) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v10 = *(void *)(result + 16);
        uint64_t v11 = v10 + 40 * v6;
        int v14 = *(_DWORD *)(v11 + 8);
        uint64_t v13 = (int *)(v11 + 8);
        int v12 = v14;
        if (v14 < 0)
        {
          *uint64_t v13 = v12 & 0x7FFFFFFF;
          uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v10 + 40 * v6 + 16);
          uint64_t v10 = *(void *)(v2 + 16);
          int v12 = *(_DWORD *)(v10 + 40 * v6 + 8);
        }
        int v15 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(v10 + 40 * v6 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v2 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
        *(_DWORD *)(v2 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 40 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(_DWORD *)(v7 + 40 * v6 + 12) == a2)
          {
            *(_DWORD *)(v7 + 40 * v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(v7 + 40 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t a1)
{
  return std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100]((uint64_t *)(a1 + 48));
}

uint64_t ___ZN2re17AudioSessionCache6updateEv_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(v1 + 48) + 16);
  if (v2)
  {
    do
    {
      int v4 = *((_DWORD *)v2 + 4);
      uint64_t v5 = (re *)(id)v2[3];
      uint64_t v6 = *re::audioLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        int v9 = v4;
        __int16 v10 = 1024;
        int v11 = v4;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "[RE] AudioSessionCache::update: deleting unused audio session %u (0x%x)", buf, 0xEu);
      }

      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
    uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  return std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100]((uint64_t *)(v1 + 48));
}

uint64_t std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void re::AudioSessionCache::clear(os_unfair_lock_s *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t MediaserverdPID = re::audio::getMediaserverdPID((re::audio *)this);
  os_unfair_lock_lock(this + 14);
  uint64_t os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)&this[6]._os_unfair_lock_opaque + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 10;
      if (v6 < 0) {
        break;
      }
      if (os_unfair_lock_opaque == ++v4)
      {
        LODWORD(v4) = this[10];
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (os_unfair_lock_opaque == v4)
  {
    os_unfair_lock_unlock(this + 14);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = v4;
    do
    {
      uint64_t v11 = *(void *)&this[6]._os_unfair_lock_opaque + 40 * v10;
      uint64_t v12 = (unsigned int *)(v11 + 12);
      if (*(_DWORD *)(v11 + 24) == 2
        || (MediaserverdPID & 0xFF00000000) == 0
        || *v12 >> 12 != MediaserverdPID)
      {
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v13 = v7 - v9;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v8 - (void)v9) >> 1 > v14) {
            unint64_t v14 = (uint64_t)(v8 - (void)v9) >> 1;
          }
          if (v8 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v2 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v2 = v14;
          }
          if (v2) {
            unint64_t v2 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2);
          }
          else {
            uint64_t v15 = 0;
          }
          char v16 = (unsigned int *)(v2 + 4 * v13);
          *char v16 = *v12;
          unsigned int v17 = v16 + 1;
          while (v7 != v9)
          {
            unsigned int v18 = *--v7;
            *--char v16 = v18;
          }
          unint64_t v8 = v2 + 4 * v15;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v7 = v17;
          int v9 = v16;
        }
        else
        {
          *v7++ = *v12;
        }
      }
      if (this[10]._os_unfair_lock_opaque <= (v4 + 1)) {
        uint32_t v19 = v4 + 1;
      }
      else {
        uint32_t v19 = this[10]._os_unfair_lock_opaque;
      }
      while (1)
      {
        uint64_t v10 = (v4 + 1);
        if (v19 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        uint32_t v20 = v10;
        if ((*(_DWORD *)(*(void *)&this[6]._os_unfair_lock_opaque + 40 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_40;
        }
      }
      uint32_t v20 = v19;
LABEL_40:
      LODWORD(v4) = v20;
    }
    while (os_unfair_lock_opaque != v20);
    if (v9 != v7)
    {
      uint64_t v21 = v9;
      do
      {
        unsigned int v22 = *v21;
        uint64_t v23 = *re::audioLogObjects((re *)v2);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109376;
          unsigned int v26 = v22;
          __int16 v27 = 1024;
          unsigned int v28 = v22;
          _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_INFO, "[RE] AudioSessionCache::clear: removing unused audio session ID %u (0x%x) from cache", buf, 0xEu);
        }
        unint64_t v2 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove((uint64_t)&this[2], v22);
        ++v21;
      }
      while (v21 != v7);
    }
    os_unfair_lock_unlock(this + 14);
    if (v9) {
      operator delete(v9);
    }
  }
}

void sub_2335796F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_23357974C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, id *a2)
{
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = **(_DWORD **)(v1 + 48);
    v4[0] = 67109376;
    v4[1] = v3;
    __int16 v5 = 1024;
    int v6 = v3;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] unexpected state 'InvalidSessionID'. Expected 'RetrievingSession'", (uint8_t *)v4, 0xEu);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = **(void **)(*(void *)a1 + 16);
  int v3 = (os_log_t *)re::audioLogObjects(a1);
  char v4 = *v3;
  if (v2)
  {
    __int16 v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = **(_DWORD **)(v1 + 24);
      uint64_t v7 = **(void ***)(v1 + 16);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v6;
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 2112;
      unint64_t v14 = v7;
      __int16 v15 = 1024;
      int v16 = [v7 opaqueSessionID];
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] returned %@ opaqueSessionID(%u)", (uint8_t *)&v10, 0x1Eu);
    }

    id v10 = **(id **)(v1 + 16);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(**(void **)(v1 + 32), **(void ****)(v1 + 32), &v10);
  }
  else
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = **(_DWORD **)(v1 + 24);
      LODWORD(v10) = 67109376;
      HIDWORD(v10) = v9;
      __int16 v11 = 1024;
      int v12 = v9;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] returned nil", (uint8_t *)&v10, 0xEu);
    }
    uint64_t v8 = **(void **)(v1 + 32);
    if (*(_DWORD *)(v8 + 8) != 2) {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__emplace[abi:ne180100]<2ul,re::audiosession_state::SessionUnavailable>(v8);
    }
  }
}

void sub_233579AE4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = **(_DWORD **)(v1 + 40);
    v4[0] = 67109376;
    v4[1] = v3;
    __int16 v5 = 1024;
    int v6 = v3;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] unexpected state 'SessionUnavailable'. Expected 'RetrievingSession'", (uint8_t *)v4, 0xEu);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(id ***a1, id *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v3 = *a1;
  char v4 = (re *)*a2;
  if (*a2 == **v3 && (char v4 = (re *)[(re *)v4 opaqueSessionID], v4 == *(_DWORD *)v3[1]))
  {
    __int16 v5 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)v3[1];
      int v13 = 67109376;
      int v14 = v6;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] session was added with 'addSession' call before retrieval finished", (uint8_t *)&v13, 0xEu);
    }
  }
  else
  {
    uint64_t v7 = (id)*re::audioLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)v3[1];
      id v9 = **v3;
      int v10 = [*a2 opaqueSessionID];
      int v11 = [*a2 opaqueSessionID];
      id v12 = *a2;
      int v13 = 67110402;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2112;
      id v18 = v9;
      __int16 v19 = 1024;
      int v20 = v10;
      __int16 v21 = 1024;
      int v22 = v11;
      __int16 v23 = 2112;
      id v24 = v12;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] different session was added with 'addSession' call before retrieval finished.\nRetrieved session: %@\nSession found in cache: %u(0x%x) %@", (uint8_t *)&v13, 0x2Eu);
    }
  }
}

void sub_233579D68(_Unwind_Exception *exception_object)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__emplace[abi:ne180100]<2ul,re::audiosession_state::SessionUnavailable>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v9, a1);
LABEL_7:
    int v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 3;
    return;
  }
  int v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
}

double re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v7 & 0x7FFFFFFF;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v6 + v5 + 8);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          *(void *)&v31[16] = *(void *)(a1 + 16);
          *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v17;
          long long v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          unsigned int v20 = v18;
          if (v18)
          {
            uint64_t v21 = 0;
            unint64_t v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(void *)&v31[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(void *)(*(void *)&v31[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v31[16] + v21), *(void *)&v31[16] + v21 + 12, *(void *)&v31[16] + v21 + 16);
                unsigned int v20 = *(_DWORD *)&v31[32];
              }
              ++v22;
              v21 += 40;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 40 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 40 * v10 + 8);
    *(_DWORD *)(a1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 40 * v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v10) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v10 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *a4;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = v26 + 40 * v10;
  *(unsigned char *)(v27 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v28 = v27 + 16;
  *(_DWORD *)(v28 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
  uint64_t v29 = *(unsigned int *)(a5 + 8);
  if (v29 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_26E6DA3E8[v29])(v31, v28, a5);
    *(_DWORD *)(v28 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v29;
  }
  *(void *)(v26 + 40 * v10 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a5 + 16);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void sub_23357A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

uint64_t *re::introspect_ReverbPreset(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F0E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF7F0E8);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = -1;
      *((void *)v33 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Invalid";
      qword_26AF7F140 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      id v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)id v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumRoom";
      qword_26AF7F148 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      uint64_t v37 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *((void *)v37 + 1) = 3;
      *((void *)v37 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumHall";
      qword_26AF7F150 = (uint64_t)v37;
      uint64_t v38 = re::introspectionAllocator(v37);
      uint64_t v39 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 24, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *((void *)v39 + 1) = 4;
      *((void *)v39 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeHall";
      qword_26AF7F158 = (uint64_t)v39;
      uint64_t v40 = re::introspectionAllocator(v39);
      long long v41 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 24, 8);
      *(_DWORD *)long long v41 = 1;
      *((void *)v41 + 1) = 5;
      *((void *)v41 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Plate";
      qword_26AF7F160 = (uint64_t)v41;
      StringID v42 = re::introspectionAllocator(v41);
      long long v43 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 24, 8);
      *(_DWORD *)long long v43 = 1;
      *((void *)v43 + 1) = 6;
      *((void *)v43 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumChamber";
      qword_26AF7F168 = (uint64_t)v43;
      StringID v44 = re::introspectionAllocator(v43);
      uint64_t v45 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 24, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *((void *)v45 + 1) = 7;
      *((void *)v45 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeChamber";
      qword_26AF7F170 = (uint64_t)v45;
      uint64_t v46 = re::introspectionAllocator(v45);
      long long v47 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 24, 8);
      *(_DWORD *)long long v47 = 1;
      *((void *)v47 + 1) = 8;
      *((void *)v47 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Cathedral";
      qword_26AF7F178 = (uint64_t)v47;
      StringID v48 = re::introspectionAllocator(v47);
      id v49 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 24, 8);
      *(_DWORD *)id v49 = 1;
      *((void *)v49 + 1) = 9;
      *((void *)v49 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeRoom2";
      qword_26AF7F180 = (uint64_t)v49;
      float32x4_t v50 = re::introspectionAllocator(v49);
      float32x4_t v51 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v50 + 32))(v50, 24, 8);
      *(_DWORD *)float32x4_t v51 = 1;
      *((void *)v51 + 1) = 10;
      *((void *)v51 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumHall2";
      qword_26AF7F188 = (uint64_t)v51;
      uint64_t v52 = re::introspectionAllocator(v51);
      float32x4_t v53 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 24, 8);
      *(_DWORD *)float32x4_t v53 = 1;
      *((void *)v53 + 1) = 11;
      *((void *)v53 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumHall3";
      qword_26AF7F190 = (uint64_t)v53;
      uint64_t v54 = re::introspectionAllocator(v53);
      uint64_t v55 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v54 + 32))(v54, 24, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *((void *)v55 + 1) = 12;
      *((void *)v55 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeHall2";
      qword_26AF7F198 = (uint64_t)v55;
      uint64_t v56 = re::introspectionAllocator(v55);
      char v57 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 24, 8);
      *(_DWORD *)char v57 = 1;
      *((void *)v57 + 1) = 100;
      *((void *)v57 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Anechoic";
      qword_26AF7F1A0 = (uint64_t)v57;
      uint64_t v58 = re::introspectionAllocator(v57);
      char v59 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 24, 8);
      *(_DWORD *)char v59 = 1;
      *((void *)v59 + 1) = 101;
      *((void *)v59 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Outside";
      qword_26AF7F1A8 = (uint64_t)v59;
      uint64_t v60 = re::introspectionAllocator(v59);
      uint64_t v61 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 24, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *((void *)v61 + 1) = 102;
      *((void *)v61 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Museum";
      qword_26AF7F1B0 = (uint64_t)v61;
      uint64_t v62 = re::introspectionAllocator(v61);
      long long v63 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 24, 8);
      *(_DWORD *)long long v63 = 1;
      *((void *)v63 + 1) = 103;
      *((void *)v63 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeRoom3";
      qword_26AF7F1B8 = (uint64_t)v63;
      uint64_t v64 = re::introspectionAllocator(v63);
      uint64_t v65 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 24, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *((void *)v65 + 1) = 104;
      *((void *)v65 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeRoom4";
      qword_26AF7F1C0 = (uint64_t)v65;
      simd_float4x4 v66 = re::introspectionAllocator(v65);
      simd_float4x4 v67 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 24, 8);
      *(_DWORD *)simd_float4x4 v67 = 1;
      *((void *)v67 + 1) = 105;
      *((void *)v67 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Cinema";
      qword_26AF7F1C8 = (uint64_t)v67;
      uint64_t v68 = re::introspectionAllocator(v67);
      long long v69 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 24, 8);
      *(_DWORD *)long long v69 = 1;
      *((void *)v69 + 1) = 106;
      *((void *)v69 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "ListeningRoom";
      qword_26AF7F1D0 = (uint64_t)v69;
      long long v70 = re::introspectionAllocator(v69);
      long long v71 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 24, 8);
      *(_DWORD *)long long v71 = 1;
      *((void *)v71 + 1) = 107;
      *((void *)v71 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LivingRoom";
      qword_26AF7F1D8 = (uint64_t)v71;
      long long v72 = re::introspectionAllocator(v71);
      __int16 v73 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 24, 8);
      *(_DWORD *)__int16 v73 = 1;
      *((void *)v73 + 1) = 108;
      *((void *)v73 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Kitchen";
      qword_26AF7F1E0 = (uint64_t)v73;
      long long v74 = re::introspectionAllocator(v73);
      unint64_t v75 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v74 + 32))(v74, 24, 8);
      *(_DWORD *)unint64_t v75 = 1;
      *((void *)v75 + 1) = 109;
      *((void *)v75 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Bathroom";
      qword_26AF7F1E8 = (uint64_t)v75;
      BOOL v76 = re::introspectionAllocator(v75);
      id v77 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v76 + 32))(v76, 24, 8);
      *(_DWORD *)id v77 = 1;
      *((void *)v77 + 1) = 201;
      *((void *)v77 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "ConcertHall";
      qword_26AF7F1F0 = (uint64_t)v77;
      uint64_t v78 = re::introspectionAllocator(v77);
      uint64_t v79 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v78 + 32))(v78, 24, 8);
      *(_DWORD *)uint64_t v79 = 1;
      *((void *)v79 + 1) = 202;
      *((void *)v79 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "VeryLargeRoom";
      qword_26AF7F1F8 = (uint64_t)v79;
      unsigned int v80 = re::introspectionAllocator(v79);
      unsigned int v81 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v80 + 32))(v80, 24, 8);
      *(_DWORD *)unsigned int v81 = 1;
      *((void *)v81 + 1) = 203;
      *((void *)v81 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeRoom";
      qword_26AF7F200 = (uint64_t)v81;
      uint64_t v82 = re::introspectionAllocator(v81);
      unint64_t v83 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v82 + 32))(v82, 24, 8);
      *(_DWORD *)unint64_t v83 = 1;
      *((void *)v83 + 1) = 204;
      *((void *)v83 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "LargeRoomTreated";
      qword_26AF7F208 = (uint64_t)v83;
      uint64_t v84 = re::introspectionAllocator(v83);
      uint64_t v85 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v84 + 32))(v84, 24, 8);
      *(_DWORD *)uint64_t v85 = 1;
      *((void *)v85 + 1) = 205;
      *((void *)v85 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumRoomDry";
      qword_26AF7F210 = (uint64_t)v85;
      unint64_t v86 = re::introspectionAllocator(v85);
      __int16 v87 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v86 + 32))(v86, 24, 8);
      *(_DWORD *)__int16 v87 = 1;
      *((void *)v87 + 1) = 206;
      *((void *)v87 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "MediumRoomTreated";
      qword_26AF7F218 = (uint64_t)v87;
      uint64_t v88 = re::introspectionAllocator(v87);
      uint64_t v89 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v88 + 32))(v88, 24, 8);
      *(_DWORD *)uint64_t v89 = 1;
      *((void *)v89 + 1) = 207;
      *((void *)v89 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "SmallRoom";
      qword_26AF7F220 = (uint64_t)v89;
      uint64_t v90 = re::introspectionAllocator(v89);
      double v91 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v90 + 32))(v90, 24, 8);
      *(_DWORD *)double v91 = 1;
      *((void *)v91 + 1) = 208;
      *((void *)v91 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "SmallRoomBright";
      qword_26AF7F228 = (uint64_t)v91;
      int v92 = re::introspectionAllocator(v91);
      int v93 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v92 + 32))(v92, 24, 8);
      *(_DWORD *)int v93 = 1;
      *((void *)v93 + 1) = 209;
      *((void *)v93 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "VerySmallRoomBright";
      qword_26AF7F230 = (uint64_t)v93;
      unint64_t v94 = re::introspectionAllocator(v93);
      uint64_t v95 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v94 + 32))(v94, 24, 8);
      *(_DWORD *)uint64_t v95 = 1;
      *((void *)v95 + 1) = 1001;
      *((void *)v95 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment01";
      qword_26AF7F238 = (uint64_t)v95;
      long long v96 = re::introspectionAllocator(v95);
      unsigned int v97 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v96 + 32))(v96, 24, 8);
      *(_DWORD *)unsigned int v97 = 1;
      *((void *)v97 + 1) = 1002;
      *((void *)v97 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment02";
      qword_26AF7F240 = (uint64_t)v97;
      unint64_t v98 = re::introspectionAllocator(v97);
      unint64_t v99 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v98 + 32))(v98, 24, 8);
      *(_DWORD *)unint64_t v99 = 1;
      *((void *)v99 + 1) = 1003;
      *((void *)v99 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment03";
      qword_26AF7F248 = (uint64_t)v99;
      unint64_t v100 = re::introspectionAllocator(v99);
      uint64_t v101 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v100 + 32))(v100, 24, 8);
      *(_DWORD *)uint64_t v101 = 1;
      *((void *)v101 + 1) = 1004;
      *((void *)v101 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment04";
      qword_26AF7F250 = (uint64_t)v101;
      unint64_t v102 = re::introspectionAllocator(v101);
      unsigned int v103 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v102 + 32))(v102, 24, 8);
      *(_DWORD *)unsigned int v103 = 1;
      *((void *)v103 + 1) = 1005;
      *((void *)v103 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment05";
      qword_26AF7F258 = (uint64_t)v103;
      unint64_t v104 = re::introspectionAllocator(v103);
      unsigned int v105 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v104 + 32))(v104, 24, 8);
      *(_DWORD *)unsigned int v105 = 1;
      *((void *)v105 + 1) = 1006;
      *((void *)v105 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment06";
      qword_26AF7F260 = (uint64_t)v105;
      uint64_t v106 = re::introspectionAllocator(v105);
      int v107 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v106 + 32))(v106, 24, 8);
      *(_DWORD *)int v107 = 1;
      *((void *)v107 + 1) = 1007;
      *((void *)v107 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment07";
      qword_26AF7F268 = (uint64_t)v107;
      uint64_t v108 = re::introspectionAllocator(v107);
      uint64_t v109 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v108 + 32))(v108, 24, 8);
      *(_DWORD *)uint64_t v109 = 1;
      *((void *)v109 + 1) = 1008;
      *((void *)v109 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment08";
      qword_26AF7F270 = (uint64_t)v109;
      int v110 = re::introspectionAllocator(v109);
      unint64_t v111 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v110 + 32))(v110, 24, 8);
      *(_DWORD *)unint64_t v111 = 1;
      *((void *)v111 + 1) = 1009;
      *((void *)v111 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment09";
      qword_26AF7F278 = (uint64_t)v111;
      uint64_t v112 = re::introspectionAllocator(v111);
      unsigned int v113 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v112 + 32))(v112, 24, 8);
      *(_DWORD *)unsigned int v113 = 1;
      *((void *)v113 + 1) = 1010;
      *((void *)v113 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment10";
      qword_26AF7F280 = (uint64_t)v113;
      id v114 = re::introspectionAllocator(v113);
      unsigned int v115 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v114 + 32))(v114, 24, 8);
      *(_DWORD *)unsigned int v115 = 1;
      *((void *)v115 + 1) = 1012;
      *((void *)v115 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Environment12";
      qword_26AF7F288 = (uint64_t)v115;
      id v116 = re::introspectionAllocator(v115);
      uint64_t v117 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v116 + 32))(v116, 24, 8);
      *(_DWORD *)uint64_t v117 = 1;
      *(void *)(v117 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 941;
      *(void *)(v117 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "Simulated";
      qword_26AF7F290 = v117;
      __cxa_guard_release(&qword_26AF7F0E8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7F0F0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7F0F8, "ReverbPreset", 8, 8, 1, 1);
    qword_26AF7F0F8 = (uint64_t)&unk_26E715E00;
    qword_26AF7F138 = (uint64_t)&re::introspect_ReverbPreset(BOOL)::enumTable;
    dword_26AF7F108 = 9;
    __cxa_guard_release(&qword_26AF7F0F0);
  }
  if (v2)
  {
    if (_MergedGlobals_115) {
      return &qword_26AF7F0F8;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v124);
    char v3 = _MergedGlobals_115;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v124);
    if (v3) {
      return &qword_26AF7F0F8;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_115)
    {
LABEL_34:
      uint64_t v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF7F0F8;
    }
  }
  _MergedGlobals_115 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7F0F8, a2);
  uint64_t v119 = 0x3C372182BEBBCEE2;
  unsigned int v120 = "ReverbPreset";
  v124[0] = 0x2CE93EC744;
  v124[1] = "int64_t";
  int v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v124);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v124);
    char v9 = (unsigned int *)qword_26AF7F138;
    v123[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v124, &v119, 1, 1, (uint64_t)v123);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          uint64_t v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                uint64_t v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v122.char var0 = 2 * v15;
          v122.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v124, v19, &v122);
          re::StringID::destroyString((re::StringID *)&v122);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            unint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  signed int v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v122.char var0 = 2 * v23;
            v122.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v124, v27, &v122);
            re::StringID::destroyString((re::StringID *)&v122);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v124, v28);
    xmmword_26AF7F118 = v121;
    re::StringID::destroyString((re::StringID *)&v119);
    if (v2) {
      return &qword_26AF7F0F8;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v124);
  re::internal::assertLog((re::internal *)5, v118, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReverbPreset", v119, v120);
  double result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_23357B254(_Unwind_Exception *a1)
{
}

uint64_t re::audio::getPhase1AcousticMeshEventSignpostData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a2 + 24) = xmmword_234379280;
  *(_OWORD *)(a2 + 40) = xmmword_234379280;
  *(_OWORD *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_234379280;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v4 = (void *)result;
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v6 = v4[5] + 48 * ((unint64_t)(i + v4[3]) % v4[1]);
      v8[0] = a2;
      v8[1] = a2;
      v8[2] = a2;
      uint64_t v7 = *(unsigned int *)(v6 + 40);
      if (v7 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      char v9 = v8;
      double result = ((uint64_t (*)(void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio38getPhase1AcousticMeshEventSignpostDataERKNS6_5QueueINS_7variantIJNS6_12DynamicArrayINS9_23AcousticMeshRemovalDataEEENSC_INSB_IJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEENSC_INSB_IJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEEEEEEE3__0ZNS9_38getPhase1AcousticMeshEventSignpostDataESQ_E3__1ZNS9_38getPhase1AcousticMeshEventSignpostDataESQ_E3__2EEEEEJRKNS0_6__implIJSE_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v9);
    }
  }
  return result;
}

uint64_t re::audio::emitPhase1AcousticMeshEventSignposts(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)result)
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result) {
      double result = kdebug_trace();
    }
  }
  if (*(void *)(v1 + 8))
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result) {
      double result = kdebug_trace();
    }
  }
  if (*(void *)(v1 + 16))
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t re::audio::getPhase3AcousticMeshEventSignpostData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a2 + 24) = xmmword_234379280;
  *(_OWORD *)(a2 + 40) = xmmword_234379280;
  *(_OWORD *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_234379280;
  uint64_t v14 = *(void *)(result + 16);
  uint64_t v15 = (void *)result;
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      unint64_t v4 = (unint64_t)(v15[3] + i) % v15[1];
      uint64_t v5 = v15[5];
      uint64_t v6 = *(void *)(v5 + 48 * v4 + 16);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (void *)(v5 + 48 * v4);
        char v9 = v8 + 3;
        uint64_t v10 = v8 + 1;
        unint64_t v11 = v8 + 5;
        do
        {
          uint64_t v12 = *v11 + 48 * ((unint64_t)(v7 + *v9) % *v10);
          v16[0] = a2;
          v16[1] = a2;
          _OWORD v16[2] = a2;
          uint64_t v13 = *(unsigned int *)(v12 + 40);
          if (v13 == -1) {
            std::__throw_bad_variant_access[abi:ne180100]();
          }
          uint64_t v17 = v16;
          double result = ((uint64_t (*)(void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio38getPhase3AcousticMeshEventSignpostDataERKNS6_5QueueINSA_INS_7variantIJNS6_12DynamicArrayINS9_23AcousticMeshRemovalDataEEENSC_INS9_17PHASEOccluderDataEEENSC_INS9_23PHASEOccluderUpdateDataEEEEEEEEEEE3__0ZNS9_38getPhase3AcousticMeshEventSignpostDataESN_E3__1ZNS9_38getPhase3AcousticMeshEventSignpostDataESN_E3__2EEEEEJRKNS0_6__implIJSE_SG_SI_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v17);
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  return result;
}

uint64_t re::audio::emitPhase3AcousticMeshEventSignposts(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)result)
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result) {
      double result = kdebug_trace();
    }
  }
  if (*(void *)(v1 + 8))
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result) {
      double result = kdebug_trace();
    }
  }
  if (*(void *)(v1 + 16))
  {
    double result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t re::audio::convertToAcousticMeshAddition@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(_OWORD *)((char *)a2 + 140) = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v4[0] = a2;
  v4[1] = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 160);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = v4;
  return ((uint64_t (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio29convertToAcousticMeshAdditionERKNS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE3__0ZNS9_29convertToAcousticMeshAdditionESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v5, a1);
}

void sub_23357B730(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t **result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = **result;
    uint64_t v4 = 40 * v2;
    uint64_t v5 = *(void *)(a2 + 32) + 24;
    do
    {
      if (*(unsigned char *)(v5 + 8))
      {
        ++*(void *)v3;
        double v6 = *(double *)v5;
        double v7 = *(double *)(v3 + 32);
        if (*(double *)v5 >= *(double *)(v3 + 24)) {
          double v6 = *(double *)(v3 + 24);
        }
        *(double *)(v3 + 24) = v6;
        double v8 = *(double *)v5;
        if (v7 >= *(double *)v5) {
          double v8 = v7;
        }
        *(double *)(v3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v8;
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    uint64_t v4 = *(void *)(*(void *)result + 8);
    uint64_t v5 = 160 * v2;
    do
    {
      if (v3 && *(_DWORD *)(v3 + 152) == 1)
      {
        ++*(void *)(v4 + 8);
        double v6 = *(double *)(v3 + 40);
        double v7 = *(double *)(v4 + 48);
        if (v6 >= *(double *)(v4 + 40)) {
          double v6 = *(double *)(v4 + 40);
        }
        *(double *)(v4 + 40) = v6;
        double v8 = *(double *)(v3 + 40);
        if (v7 >= v8) {
          double v8 = v7;
        }
        *(double *)(v4 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v8;
      }
      v3 += 160;
      v5 -= 160;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    uint64_t v4 = *(void *)(*(void *)result + 16);
    uint64_t v5 = 168 * v2;
    do
    {
      if (v3 && *(_DWORD *)(v3 + 160) == 1)
      {
        ++*(void *)(v4 + 16);
        double v6 = *(double *)(v3 + 48);
        double v7 = *(double *)(v4 + 64);
        if (v6 >= *(double *)(v4 + 56)) {
          double v6 = *(double *)(v4 + 56);
        }
        *(double *)(v4 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
        double v8 = *(double *)(v3 + 48);
        if (v7 >= v8) {
          double v8 = v7;
        }
        *(double *)(v4 + 64) = v8;
      }
      v3 += 168;
      v5 -= 168;
    }
    while (v5);
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t **result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = **result;
    uint64_t v4 = 40 * v2;
    uint64_t v5 = *(void *)(a2 + 32) + 24;
    do
    {
      if (*(unsigned char *)(v5 + 8))
      {
        ++*(void *)v3;
        double v6 = *(double *)v5;
        double v7 = *(double *)(v3 + 32);
        if (*(double *)v5 >= *(double *)(v3 + 24)) {
          double v6 = *(double *)(v3 + 24);
        }
        *(double *)(v3 + 24) = v6;
        double v8 = *(double *)v5;
        if (v7 >= *(double *)v5) {
          double v8 = v7;
        }
        *(double *)(v3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v8;
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)result + 8);
    uint64_t v4 = 48 * v2;
    uint64_t v5 = *(void *)(a2 + 32) + 32;
    do
    {
      if (*(unsigned char *)(v5 + 8))
      {
        ++*(void *)(v3 + 8);
        double v6 = *(double *)v5;
        double v7 = *(double *)(v3 + 48);
        if (*(double *)v5 >= *(double *)(v3 + 40)) {
          double v6 = *(double *)(v3 + 40);
        }
        *(double *)(v3 + 40) = v6;
        double v8 = *(double *)v5;
        if (v7 >= *(double *)v5) {
          double v8 = v7;
        }
        *(double *)(v3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v8;
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)result + 16);
    uint64_t v4 = 56 * v2;
    uint64_t v5 = *(void *)(a2 + 32) + 40;
    do
    {
      if (*(unsigned char *)(v5 + 8))
      {
        ++*(void *)(v3 + 16);
        double v6 = *(double *)v5;
        double v7 = *(double *)(v3 + 64);
        if (*(double *)v5 >= *(double *)(v3 + 56)) {
          double v6 = *(double *)(v3 + 56);
        }
        *(double *)(v3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
        double v8 = *(double *)v5;
        if (v7 >= *(double *)v5) {
          double v8 = v7;
        }
        *(double *)(v3 + 64) = v8;
      }
      v5 += 56;
      v4 -= 56;
    }
    while (v4);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_0,re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&>(void **a1, __n128 *a2)
{
  uint64_t v3 = *a1;
  __n128 v22 = *a2;
  uint64_t v4 = (void *)a2[2].n128_u64[0];
  unint64_t v23 = a2[1].n128_u64[1];
  id v24 = v4;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)&v25, &a2[2].n128_i64[1]);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)&v29, (uint64_t *)&a2[5]);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)&v33, &a2[7].n128_i64[1]);
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(*v3 + 152);
  if (v6 == -1) {
    goto LABEL_20;
  }
  if (v6)
  {
    ((void (*)(char *, void))off_26E6DA448[v6])(&v37, *v3);
LABEL_20:
    *(_DWORD *)(v5 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
    std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData>((__n128 *)v5, &v22);
    *(_DWORD *)(v5 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    goto LABEL_21;
  }
  __n128 v7 = v22;
  *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
  *(__n128 *)uint64_t v5 = v7;
  id v8 = v24;
  id v24 = 0;
  char v9 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v8;

  if ((__n128 *)v5 == &v22) {
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(v5 + 32);
  if (v11) {
    BOOL v12 = v25 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || v11 == v25)
  {
    *(void *)(v5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v25;
    uint64_t v25 = v11;
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(v5 + 40) = v26;
    uint64_t v16 = *(void *)(v5 + 64);
    uint64_t v15 = *(void *)(v5 + 72);
    *(void *)(v5 + 64) = v28;
    long long v26 = v14;
    uint64_t v28 = v16;
    ++v27;
    ++*(_DWORD *)(v5 + 56);
    if (v15 && v29 && v15 != v29) {
      goto LABEL_22;
    }
    *(void *)(v5 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v29;
    uint64_t v29 = v15;
    long long v17 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v5 + 80) = v30;
    uint64_t v19 = *(void *)(v5 + 104);
    uint64_t v18 = *(void *)(v5 + 112);
    *(void *)(v5 + 104) = v32;
    long long v30 = v17;
    uint64_t v32 = v19;
    ++v31;
    ++*(_DWORD *)(v5 + 96);
    if (v18 && v33 && v18 != v33) {
      goto LABEL_23;
    }
    *(void *)(v5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v33;
    uint64_t v33 = v18;
    long long v20 = *(_OWORD *)(v5 + 120);
    *(_OWORD *)(v5 + 120) = v34;
    long long v34 = v20;
    uint64_t v21 = *(void *)(v5 + 144);
    *(void *)(v5 + 144) = v36;
    uint64_t v36 = v21;
    ++v35;
    ++*(_DWORD *)(v5 + 136);
LABEL_21:
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v33);
    re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)&v29);
    re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)&v25);

    return;
  }
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
LABEL_22:
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
LABEL_23:
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_0,re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a2[3];
  id v7 = (id)a2[4];
  id v8 = v7;
  char v9 = *((unsigned char *)a2 + 40);
  uint64_t v10 = a2[6];
  uint64_t v11 = *(void *)(v3 + 8);
  uint64_t v12 = *(unsigned int *)(v11 + 152);
  if (v12 != -1)
  {
    if (v12 == 1)
    {
      *(void *)uint64_t v11 = v5;
      *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
      uint64_t v13 = *(void **)(v11 + 24);
      *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v11 + 24) = v7;

      *(unsigned char *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v9;
      *(void *)(v11 + 40) = v10;
      return;
    }
    ((void (*)(char *, void))off_26E6DA448[v12])(&v14, *(void *)(v3 + 8));
  }
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
  *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
  *(void *)(v11 + 24) = v8;
  *(unsigned char *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v9;
  *(void *)(v11 + 40) = v10;
  *(_DWORD *)(v11 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
}

__n128 std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  unint64_t v3 = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[1].n128_u64[1] = v3;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u32[2] = 0;
  unint64_t v4 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v4;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  unint64_t v5 = a1[3].n128_u64[0];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v5;
  unint64_t v6 = a1[4].n128_u64[0];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v6;
  ++a2[3].n128_u32[2];
  ++a1[3].n128_u32[2];
  a1[6].n128_u64[1] = 0;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[1] = 0;
  a1[6].n128_u32[0] = 0;
  unint64_t v7 = a2[5].n128_u64[0];
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a1[5].n128_u64[0] = v7;
  a2[4].n128_u64[1] = 0;
  a2[5].n128_u64[0] = 0;
  unint64_t v8 = a1[5].n128_u64[1];
  a1[5].n128_u64[1] = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = v8;
  unint64_t v9 = a1[6].n128_u64[1];
  a1[6].n128_u64[1] = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = v9;
  ++a2[6].n128_u32[0];
  ++a1[6].n128_u32[0];
  a1[9].n128_u64[0] = 0;
  a1[7].n128_u64[1] = 0;
  a1[8].n128_u64[0] = 0;
  a1[7].n128_u64[0] = 0;
  a1[8].n128_u32[2] = 0;
  unint64_t v10 = a2[7].n128_u64[1];
  a1[7].n128_u64[0] = a2[7].n128_u64[0];
  a1[7].n128_u64[1] = v10;
  a2[7].n128_u64[0] = 0;
  a2[7].n128_u64[1] = 0;
  unint64_t v11 = a1[8].n128_u64[0];
  a1[8].n128_u64[0] = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = v11;
  unint64_t v12 = a1[9].n128_u64[0];
  a1[9].n128_u64[0] = a2[9].n128_u64[0];
  a2[9].n128_u64[0] = v12;
  ++a2[8].n128_u32[2];
  ++a1[8].n128_u32[2];
  return result;
}

void re::audio::SoundAssetRegistrarFactory::createRegistrar(re::audio::SoundAssetRegistrarFactory *this)
{
}

void re::audio::REPHASESoundPrepareState::create(re::audio::REPHASESoundPrepareState *this)
{
}

void re::audio::REPHASESoundPrepareState::setCompletionHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = ___ZN2re5audio24REPHASESoundPrepareState20setCompletionHandlerEU13block_pointerFvP7NSErrorE_block_invoke;
  v7[3] = &unk_264BE2DC0;
  id v8 = v3;
  uint64_t v9 = a1;
  id v4 = v3;
  unint64_t v5 = _Block_copy(v7);
  unint64_t v6 = *(void **)(a1 + 352);
  *(void *)(a1 + 35re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
}

void ___ZN2re5audio24REPHASESoundPrepareState20setCompletionHandlerEU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v3 + 344))
  {
    if (!v4) {
      *(unsigned char *)(v3 + 344) = 1;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_23357C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id re::audio::REPHASESoundPrepareState::getChannelLayout(re::audio::REPHASESoundPrepareState *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = [v2 channelLayout];
  }
  else
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:*((unsigned int *)this + 46)];
  }
  return v3;
}

void sub_23357C218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357C3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23357C554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23357C774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_23357C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_23357CA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  std::__shared_weak_count::__release_shared[abi:nn180100](v26);
  _Unwind_Resume(a1);
}

void sub_23357D2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::MultipleCallbackManager<REPHASESoundEvent>::complete(atomic_ullong *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a2;
  unint64_t v5 = v4;
  uint64_t add = atomic_fetch_add(a1, 0xFFFFFFFFFFFFFFFFLL);
  if (add <= 0)
  {
    unint64_t v11 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      atomic_ullong v13 = a1[4];
      int v14 = 138412290;
      atomic_ullong v15 = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "callback manager with context %@ called too many times", (uint8_t *)&v14, 0xCu);
    }
    atomic_fetch_add(a1, 1uLL);
  }
  else
  {
    uint64_t v7 = add - 1;
    objc_storeStrong((id *)(a1[1] + 8 * (add - 1)), a2);
    if (!v7)
    {
      id v8 = (id *)a1[1];
      uint64_t v9 = (id *)a1[2];
      while (1)
      {
        if (v8 == v9)
        {
          unint64_t v12 = 0;
          (*(void (**)(void))(a1[5] + 16))();
          goto LABEL_12;
        }
        id v10 = *v8;
        if (v10) {
          break;
        }
        ++v8;
      }
      unint64_t v12 = v10;
      (*(void (**)(void))(a1[5] + 16))();
LABEL_12:
    }
  }
}

void sub_23357D46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_56c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void sub_23357D620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void sub_23357D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)REPHASESoundEvent;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_23357DA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_23357DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_23357E184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void sub_23357E850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357ED4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357EE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357F018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357F23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23357F564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357F610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23357F674(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23358013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id *location, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a42);

  _Unwind_Resume(a1);
}

void sub_23358061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a14);
  }

  if (a18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_2335807A8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_233580834(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2335808AC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23358090C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233580A2C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233580B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233580D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a18);
  }

  _Unwind_Resume(a1);
}

void std::deque<REPHASESoundEventCommandState>::emplace_back<REPHASESoundEventCommand>(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REPHASESoundEventCommandState>::__add_back_capacity(a1);
    uint64_t v7 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8;
  *(_DWORD *)uint64_t v9 = *a2;
  *(void *)(v9 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  a1[5] = v7 + 1;
}

void std::deque<REPHASESoundEventCommandState>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      StringID v42 = &v39[8 * v41];
      long long v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    long long v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  long long v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  __n128 v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0x1000uLL);
    long long v26 = v25;
    if (v19 != v20)
    {
      *(void *)long long v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      float32x4_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v49);
      __n128 v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      float32x4_t v53 = (uint64_t *)a1[1];
      uint64_t v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        uint64_t v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        char v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)char v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      char v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        __n128 v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      StringID v42 = &v39[8 * v83];
      uint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        __int16 v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)__int16 v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      StringID v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0x1000uLL);
  uint64_t v33 = &v29[8 * v23];
  long long v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v61);
      uint64_t v33 = &v62[8 * (v61 >> 2)];
      long long v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)uint64_t v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        long long v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v70);
        __int16 v73 = v71;
        uint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          id v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)id v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        long long v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        uint64_t v33 = &v29[8 * (v67 >> 1)];
        long long v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          long long v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  unsigned int v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_2335815B0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::shared_ptr<re::audio::REPHASESoundPrepareState>::shared_ptr[abi:ne180100]<re::audio::REPHASESoundPrepareState,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_233581698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<re::audio::REPHASESoundPrepareState>::reset[abi:ne180100]((id **)va, 0);
  _Unwind_Resume(a1);
}

void std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

id *std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(id **)(a1 + 24);
  if (result)
  {
    re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(id *this)
{
  if (*((unsigned char *)this + 272) && *((char *)this + 271) < 0) {
    operator delete(this[31]);
  }

  id v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }

  BOOL v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

id *std::unique_ptr<re::audio::REPHASESoundPrepareState>::reset[abi:ne180100](id **a1, id *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::__on_zero_shared(void **a1)
{
  id v2 = a1 + 4;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

re::REPHASEMaterialCache *re::REPHASEMaterialCache::REPHASEMaterialCache(re::REPHASEMaterialCache *this)
{
  *(_DWORD *)this = 1036831949;
  *((void *)this + 1) = 0;
  id v2 = objc_alloc_init(MEMORY[0x263EFF8E0]);
  BOOL v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v2;

  [*((id *)this + 1) setTotalCostLimit:200];
  unint64_t v4 = [MEMORY[0x263EFFA40] standardUserDefaults];
  uint64_t v5 = [v4 objectForKey:@"com.apple.re.audio.meshConfidenceThreshold"];
  uint64_t v6 = v5;
  if (v5)
  {
    [v5 floatValue];
    if (v7 >= 0.0)
    {
      [v6 floatValue];
      if (v8 <= 1.0)
      {
        [v6 floatValue];
        *(_DWORD *)this = v9;
      }
    }
  }

  return this;
}

void sub_233581AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::getMaterials(re::REPHASEMaterialCache *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  isInputValid = a2;
  BOOL v12 = isInputValid;
  unint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a5 + 16);
  BOOL v16 = v13 == v15 && v13 == v14;
  if (!v16 || v15 == 0) {
    goto LABEL_11;
  }
  unint64_t v22 = 0;
  LOBYTE(isInputValid) = 1;
  do
  {
    uint64_t v23 = 112 * v22;
    while ((isInputValid & 1) == 0)
    {
      isInputValid = 0;
      ++v22;
      v23 += 112;
      if (v13 <= v22) {
        goto LABEL_11;
      }
    }
    unint64_t v24 = *(void *)(a4 + 16);
    if (v24 <= v22)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v22;
      __int16 v59 = 2048;
      unint64_t v60 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v22;
      __int16 v59 = 2048;
      unint64_t v60 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v5;
      __int16 v59 = 2048;
      unint64_t v60 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v51;
      __int16 v59 = 2048;
      unint64_t v60 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v24 = *(void *)(a5 + 16);
    if (v24 <= v22) {
      goto LABEL_41;
    }
    unint64_t v13 = *(void *)(a3 + 16);
    ++v22;
  }
  while (v13 > v22);
  if (isInputValid)
  {
    long long v20 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:");
    if (*(void *)(a3 + 16))
    {
      uint64_t v25 = 0;
      unint64_t v5 = 0;
      uint64_t v52 = v12;
      do
      {
        unint64_t v22 = *(void *)(a4 + 16);
        if (v22 <= v5) {
          goto LABEL_42;
        }
        unint64_t v22 = *(void *)(a5 + 16);
        unint64_t v51 = v5;
        if (v22 <= v5) {
          goto LABEL_43;
        }
        uint64_t v49 = *(void *)(a3 + 32);
        uint64_t v48 = *(void *)(a4 + 32);
        uint64_t v26 = v48 + v25;
        uint64_t v27 = (const AcousticScatteringMaterial *)(*(void *)(a5 + 32) + v25);
        unint64_t v28 = v52;
        *(void *)uint64_t v54 = v28;
        uint64_t v46 = v27;
        uint64_t v47 = v49 + v25;
        if (v30)
        {
          uint64_t v31 = v49 + v25;
          uint64_t v32 = *(void *)(v49 + v25 + 8);
          uint64_t v44 = *(void *)(v49 + v25 + 16);
          uint64_t v45 = NSString;
          uint64_t v50 = v25;
          uint64_t v43 = v48 + v25;
          uint64_t v34 = *(void *)(v26 + 8);
          uint64_t v33 = *(void *)(v26 + 16);
          uint64_t v35 = [(PHASEEngine *)v28 hash];
          uint64_t v36 = v48 + v50 + 9;
          if (v34) {
            uint64_t v36 = v33;
          }
          uint64_t v37 = v31 + 9;
          if (v32) {
            uint64_t v37 = v44;
          }
          unint64_t v38 = objc_msgSend(v45, "stringWithFormat:", @"Absorption: %s. Scattering: %s. Engine hash: %lu.", v37, v36, v35);
          uint64_t v25 = v50;
          *((void *)&v62 + 1) = 0;
          BOOL v12 = v52;
          uint64_t v39 = operator new(0x30uLL);
          void *v39 = &unk_26E6DA5A0;
          v39[1] = a1;
          void v39[2] = v47;
          v39[3] = v43;
          void v39[4] = v46;
          _OWORD v39[5] = v54;
          *((void *)&v62 + 1) = v39;
          uint64_t v40 = re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)a1, v38, (uint64_t)buf);
          std::__function::__value_func<PHASEMaterial * ()(void)>::~__value_func[abi:ne180100](buf);

          unint64_t v41 = v51;
          unint64_t v28 = *(PHASEEngine **)v54;
        }
        else
        {
          StringID v42 = *re::audioLogObjects(v30);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterials was called with invalid arguments. Returning the default material.", buf, 2u);
          }
          BOOL v12 = v52;
          re::REPHASEMaterialCache::defaultMaterial(a1, v28);
          uint64_t v40 = v41 = v51;
        }

        [v20 addObject:v40];
        unint64_t v5 = v41 + 1;
        v25 += 112;
      }
      while (*(void *)(a3 + 16) > v5);
    }
  }
  else
  {
LABEL_11:
    int64_t v18 = *re::audioLogObjects((re *)isInputValid);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterials was called with invalid arguments. Returning the default material.", buf, 2u);
    }
    uint64_t v19 = re::REPHASEMaterialCache::defaultMaterial(a1, v12);
    float32x4_t v53 = v19;
    long long v20 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v53 count:1];
  }
  return v20;
}

void sub_2335821C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::defaultMaterial(re::REPHASEMaterialCache *this, PHASEEngine *a2)
{
  void v7[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  BOOL v3 = objc_msgSend(NSString, "stringWithFormat:", @"Default material. Engine hash: %lu.", -[PHASEEngine hash](v6, "hash"));
  v7[0] = &unk_26E6DA6F0;
  v7[1] = &v6;
  v7[3] = v7;
  unint64_t v4 = re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)this, v3, (uint64_t)v7);
  std::__function::__value_func<PHASEMaterial * ()(void)>::~__value_func[abi:ne180100](v7);

  return v4;
}

void sub_23358233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<PHASEMaterial * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::isInputValid(_anonymous_namespace_ *this, const AcousticAbsorptionMaterial *a2, const AcousticScatteringMaterial *a3, const AcousticSoundReductionMaterial *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 6);
  BOOL v8 = v4 == *((void *)a2 + 6)
    && v4 == *((void *)a3 + 6)
    && v4 == *((void *)this + 11)
    && v4 == *((void *)a2 + 11)
    && v4 == *((void *)a3 + 11);
  uint64_t v9 = v8;
  if (!v8)
  {
    unint64_t v13 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      if (*((void *)this + 1)) {
        uint64_t v15 = (char *)*((void *)this + 2);
      }
      else {
        uint64_t v15 = (char *)this + 9;
      }
      if (*((void *)a2 + 1)) {
        BOOL v16 = (char *)*((void *)a2 + 2);
      }
      else {
        BOOL v16 = (char *)a2 + 9;
      }
      if (*((void *)a3 + 1)) {
        long long v17 = (char *)*((void *)a3 + 2);
      }
      else {
        long long v17 = (char *)a3 + 9;
      }
      int v18 = 136315650;
      uint64_t v19 = v15;
      __int16 v20 = 2080;
      uint64_t v21 = v16;
      __int16 v22 = 2080;
      uint64_t v23 = v17;
      _os_log_fault_impl(&dword_233120000, v13, OS_LOG_TYPE_FAULT, "Absorption %s, scattering %s, and sound reduction %s materials have inconsistent frequency counts and/or coefficients count.", (uint8_t *)&v18, 0x20u);
    }
  }
  return v9;
}

id re::REPHASEMaterialCache::getFromCacheOrCreateAndCache(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [*(id *)(a1 + 8) objectForKey:v5];
  if (!v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v6 = (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
    if (v6) {
      [*(id *)(a1 + 8) setObject:v6 forKey:v5 cost:1];
    }
  }
  id v8 = v6;

  return v8;
}

void sub_233582574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::getMaterials(re::REPHASEMaterialCache *this, PHASEEngine *a2, MDLMesh *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v35 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x263EFF980];
  uint64_t v32 = v5;
  uint64_t v7 = [(MDLMesh *)v5 submeshes];
  objc_msgSend(v6, "arrayWithCapacity:", objc_msgSend(v7, "count"));
  id v34 = (id)objc_claimAutoreleasedReturnValue();

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v8 = [(MDLMesh *)v32 submeshes];
  obunint64_t j = v8;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v36 objects:v43 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v37;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(obj);
        }
        BOOL v12 = *(void **)(*((void *)&v36 + 1) + 8 * v11);
        unint64_t v13 = v35;
        StringID v42 = v13;
        id v14 = v12;
        uint64_t v15 = [v14 material];
        BOOL v16 = [v15 propertyNamed:@"ARMeshGeometryClassification"];
        id v41 = v16;

        long long v17 = [v14 material];
        int v18 = [v17 propertyNamed:@"ARMeshGeometryMaterial"];
        id v40 = v18;

        uint64_t v19 = [v14 material];
        __int16 v20 = [v19 propertyNamed:@"ARMeshGeometryConfidence"];

        if (v16 && v18)
        {
          if (v20) {
            [v20 floatValue];
          }
          else {
            float v22 = 1.0;
          }
          if (v22 > *(float *)this)
          {
            uint64_t v24 = NSString;
            [v16 floatValue];
            float v26 = v25;
            [v18 floatValue];
            unint64_t v28 = objc_msgSend(v24, "stringWithFormat:", @"ARMeshGeometryClassification: %.02f. ARMeshGeometryMaterial: %.02f. Engine hash: %lu.", v26, v27, -[PHASEEngine hash](v13, "hash"));
            uint64_t v45 = 0;
            uint64_t v29 = operator new(0x28uLL);
            *uint64_t v29 = &unk_26E6DA630;
            v29[1] = &v41;
            v29[2] = &v40;
            v29[3] = &v42;
            v29[4] = this;
            uint64_t v45 = v29;
            uint64_t v30 = re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)this, v28, (uint64_t)buf);
            std::__function::__value_func<PHASEMaterial * ()(void)>::~__value_func[abi:ne180100](buf);

            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v23 = *re::audioLogObjects(v21);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterial was called for a submesh missing ARMeshGeometryClassification and/or ARMeshGeometryMaterial. Returning the default material.", buf, 2u);
          }
        }
        uint64_t v30 = re::REPHASEMaterialCache::defaultMaterial(this, v13);
LABEL_17:

        if (v30) {
          [v34 addObject:v30];
        }

        ++v11;
      }
      while (v9 != v11);
      id v8 = obj;
      uint64_t v9 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
    }
    while (v9);
  }

  return v34;
}

void sub_233582920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::createSubbands(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [MEMORY[0x263EFF980] array];
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      id v6 = objc_alloc(MEMORY[0x263F149C8]);
      if (*(void *)(a1 + 16) <= v5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(a2 + 16) <= v5) {
        goto LABEL_10;
      }
      LODWORD(v7) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v5);
      LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a2 + 32) + 4 * v5);
      uint64_t v9 = (void *)[v6 initWithFrequency:v7 value:v8];
      [v4 addObject:v9];

      ++v5;
    }
    while (*(void *)(a1 + 16) > v5);
  }
  return v4;
}

void sub_233582C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x30uLL);
  *(void *)id v2 = &unk_26E6DA5A0;
  *(_OWORD *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DA5A0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  id v2 = re::REPHASEMaterialCache::createSubbands(*(void *)(a1 + 16) + 32, *(void *)(a1 + 16) + 72);
  long long v3 = re::REPHASEMaterialCache::createSubbands(*(void *)(a1 + 24) + 32, *(void *)(a1 + 24) + 72);
  uint64_t v4 = re::REPHASEMaterialCache::createSubbands(*(void *)(a1 + 32) + 32, *(void *)(a1 + 32) + 72);
  id v5 = objc_alloc(MEMORY[0x263F14958]);
  uint64_t v6 = **(void **)(a1 + 40);
  id v7 = objc_alloc(MEMORY[0x263F149A0]);
  LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1036831949;
  uint64_t v9 = (void *)[v7 initWithAttenuationCoefficients:v4 measuredDepth:v8];
  uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263F148F0]) initWithAbsorptionCoefficients:v2];
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x263F14988]) initWithScatteringCoefficients:v3];
  BOOL v12 = (void *)[v5 initWithEngine:v6 soundReductionIndex:v9 absorptionData:v10 scatteringData:v11];

  return v12;
}

void sub_233582E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

void *std::__function::__value_func<PHASEMaterial * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x28uLL);
  *(void *)id v2 = &unk_26E6DA630;
  *(_OWORD *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DA630;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  id v2 = *(re::REPHASEMaterialCache **)(a1 + 32);
  v12[0] = *MEMORY[0x263F149D0];
  long long v3 = NSNumber;
  [**(id **)(a1 + 8) floatValue];
  uint64_t v4 = objc_msgSend(v3, "numberWithFloat:");
  v12[1] = *MEMORY[0x263F149D8];
  v13[0] = v4;
  id v5 = NSNumber;
  [**(id **)(a1 + 16) floatValue];
  uint64_t v6 = objc_msgSend(v5, "numberWithFloat:");
  v13[1] = v6;
  id v7 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];

  double v8 = (void *)[objc_alloc(MEMORY[0x263F14958]) initWithEngine:**(void **)(a1 + 24) semantics:v7];
  if (!v8)
  {
    uint64_t v9 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterial failed to initialize a PHASEMaterial with the provided semantics. Returning the default material.", v11, 2u);
    }
    double v8 = re::REPHASEMaterialCache::defaultMaterial(v2, **(PHASEEngine ***)(a1 + 24));
  }

  return v8;
}

void sub_2335831D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
}

void *std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6DA6F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DA6F0;
  a2[1] = v2;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  v7[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *MEMORY[0x263F149D8];
  v6[0] = *MEMORY[0x263F149D0];
  v6[1] = v2;
  v7[0] = &unk_26E749E00;
  v7[1] = &unk_26E749E00;
  uint64_t v3 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x263F14958]) initWithEngine:**(void **)(a1 + 8) semantics:v3];

  return v4;
}

void sub_233583438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

void *re::nameForAudioManagerStateMachineEvent@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_264BE2F20[a1]);
}

void removeOldLogsAtMaxCapacity(unsigned int a1, unsigned int a2, uint64_t a3, double a4, double a5)
{
  if (a1 > a2 && *(void *)(a3 + 24) == a1)
  {
    unsigned int v8 = a2;
    uint64_t v9 = v20;
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v19 = v20;
    for (uint64_t i = a3 + 16; ; std::string::operator=((std::string *)(v11 + 5), (const std::string *)(i + 16)))
    {
      uint64_t i = *(void *)i;
      if (!i) {
        break;
      }
      uint64_t v21 = (uint64_t *)(i + 40);
      uint64_t v11 = std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>((uint64_t **)&v19, (double *)(i + 40), (uint64_t)&std::piecewise_construct, &v21);
    }
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::clear(a3);
    if (v8 && v20 != v19)
    {
      do
      {
        BOOL v12 = *v9;
        unint64_t v13 = v9;
        if (*v9)
        {
          do
          {
            id v14 = v12;
            BOOL v12 = (char *)*((void *)v12 + 1);
          }
          while (v12);
        }
        else
        {
          do
          {
            id v14 = v13[2];
            BOOL v15 = *(void *)v14 == (void)v13;
            unint64_t v13 = (char **)v14;
          }
          while (v15);
        }
        double v16 = *((double *)v14 + 4);
        if (a4 - v16 >= a5) {
          break;
        }
        uint64_t v21 = (uint64_t *)(v14 + 40);
        *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v14 + 40, (uint64_t)&std::piecewise_construct, (long long **)&v21)+ re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v16;
        long long v17 = (uint64_t *)*v9;
        if (*v9)
        {
          do
          {
            int v18 = v17;
            long long v17 = (uint64_t *)v17[1];
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = (uint64_t *)v9[2];
            BOOL v15 = *v18 == (void)v9;
            uint64_t v9 = (char **)v18;
          }
          while (v15);
        }
        if (!--v8) {
          break;
        }
        uint64_t v9 = (char **)v18;
      }
      while (v18 != (uint64_t *)v19);
    }
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy((uint64_t)&v19, v20[0]);
  }
}

void sub_23358363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t re::audio::throttledLog(os_log_type_t a1, long long *a2)
{
  {
    re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs = 0u;
    unk_26879E9F8 = 0u;
    dword_26879EA08 = 1065353216;
  }
  {
    re::audio::throttledLog(os_log_type_t,std::string const&)::logLocuint64_t k = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::logLock);
  id v5 = re::audioLogObjects(v4);
  if (os_log_type_enabled((os_log_t)*v5, a1)
    && ((double Current = CFAbsoluteTimeGetCurrent(),
         (id v7 = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, (unsigned __int8 *)a2)) == 0)|| Current - *((double *)v7 + 5) >= 2.0))
  {
    uint64_t v10 = a2;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v10)+ re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = Current;
    removeOldLogsAtMaxCapacity(0x64u, 0xAu, (uint64_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, Current, 2.0);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::logLock);
  return v8;
}

void sub_2335837BC(_Unwind_Exception *a1)
{
}

uint64_t re::audio::matrix3x3_to_string(float *a1)
{
  return [NSString stringWithFormat:@"[%.9g, %.9g, %.9g]\n[%.9g, %.9g, %.9g]\n[%.9g, %.9g, %.9g]\nscale [%.9g, %.9g, %.9g]\n", *a1, a1[4], a1[8], a1[1], a1[5], a1[9], a1[2], a1[6], a1[10], *a1, a1[5], a1[10]];
}

void *re::audio::nameForPlaybackState@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_264BE2F98[a1]);
}

void *re::audio::stringFromPose@<X0>(re::audio *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x100uLL, "<pos=[% 3.2f,% 3.2f,% 3.2f],fwd=[% 3.2f,% 3.2f,% 3.2f],up=[% 3.2f,% 3.2f,% 3.2f]>", *((float *)this + 12), *((float *)this + 13), *((float *)this + 14), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10), *((float *)this + 4), *((float *)this + 5), *((float *)this + 6));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void *re::audio::stringFromMatrix@<X0>(re::audio *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x100uLL, "<c0=[% 3.2f,% 3.2f,% 3.2f,% 3.2f],c1=[% 3.2f,% 3.2f,% 3.2f,% 3.2f],c2=[% 3.2f,% 3.2f,% 3.2f,% 3.2f],c3=[% 3.2f,% 3.2f,% 3.2f,% 3.2f]>", *(float *)this, *((float *)this + 1), *((float *)this + 2), *((float *)this + 3), *((float *)this + 4), *((float *)this + 5), *((float *)this + 6), *((float *)this + 7), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10), *((float *)this + 11), *((float *)this + 12), *((float *)this + 13), *((float *)this + 14),
    *((float *)this + 15));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void re::audio::debugStringFromDeactivatedEntityState(re::audio **this@<X0>, const re::ecs2::Entity *__val@<X1>, std::string *a3@<X8>)
{
  std::to_string(&v59, (unint64_t)__val);
  id v5 = std::string::insert(&v59, 0, "Token ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  id v7 = std::string::append(&v60, " with ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  re::ecs2::Entity::debugDescription((re::ecs2::Entity *)this, (re::DynamicString *)&v51);
  if (v52) {
    uint64_t v9 = v54;
  }
  else {
    uint64_t v9 = v53;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  BOOL v12 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v51 && (v52 & 1) != 0) {
    (*(void (**)(void))(*(void *)v51 + 40))();
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  int v14 = *((_DWORD *)this + 72);
  if ((v14 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    if ((this[36] & 0xA) == 8)
    {
      BOOL v15 = this[3];
      if (!v15 || (*((unsigned char *)v15 + 288) & 0x80) != 0)
      {
LABEL_29:
        std::string::append(&v47, "No parent with isSelfEnabled = false");
      }
      else
      {
        int v16 = 1;
        while ((*((unsigned char *)v15 + 288) & 8) != 0)
        {
          BOOL v15 = (re::audio *)*((void *)v15 + 3);
          if (v15)
          {
            ++v16;
            if ((*((unsigned char *)v15 + 288) & 0x80) == 0) {
              continue;
            }
          }
          goto LABEL_29;
        }
        std::to_string(&__p, v16);
        long long v36 = std::string::insert(&__p, 0, "First parent with isSelfEnabled = false is ");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        long long v38 = std::string::append(&v59, " levels up with ");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        re::ecs2::Entity::debugDescription(v15, (re::DynamicString *)&v51);
        if (v52) {
          id v40 = v54;
        }
        else {
          id v40 = v53;
        }
        std::string::basic_string[abi:ne180100]<0>(&v55, v40);
        if ((v57 & 0x80u) == 0) {
          id v41 = (const std::string::value_type *)&v55;
        }
        else {
          id v41 = (const std::string::value_type *)v55;
        }
        if ((v57 & 0x80u) == 0) {
          std::string::size_type v42 = v57;
        }
        else {
          std::string::size_type v42 = v56;
        }
        uint64_t v43 = std::string::append(&v60, v41, v42);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v61;
        }
        else {
          uint64_t v45 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v61.__r_.__value_.__l.__size_;
        }
        std::string::append(&v47, (const std::string::value_type *)v45, v46);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if ((char)v57 < 0) {
          operator delete(v55);
        }
        if (v51 && (v52 & 1) != 0) {
          (*(void (**)(void))(*(void *)v51 + 40))();
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    std::operator+<char>();
    if ((v50 & 0x80u) == 0) {
      long long v17 = (const std::string::value_type *)&v48;
    }
    else {
      long long v17 = (const std::string::value_type *)v48;
    }
    if ((v50 & 0x80u) == 0) {
      std::string::size_type v18 = v50;
    }
    else {
      std::string::size_type v18 = v49;
    }
    std::string::append(a3, v17, v18);
    if ((char)v50 < 0) {
      operator delete(v48);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    int v14 = *((_DWORD *)this + 72);
  }
  if ((v14 & 0xA) == 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    if (((_BYTE)this[36] & 1) == 0)
    {
      uint64_t v19 = this[3];
      if (v19)
      {
        int v20 = 0;
        do
        {
          uint64_t v21 = v19;
          int v22 = *((_DWORD *)v19 + 72);
          if ((v22 & 0x80) != 0) {
            break;
          }
          if (v22)
          {
            std::to_string(&__p, v20);
            float v25 = std::string::insert(&__p, 0, "Last parent with isActive = false is ");
            long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            float v27 = std::string::append(&v59, " levels up with ");
            long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            re::ecs2::Entity::debugDescription((re::ecs2::Entity *)this, (re::DynamicString *)&v51);
            if (v52) {
              uint64_t v29 = v54;
            }
            else {
              uint64_t v29 = v53;
            }
            std::string::basic_string[abi:ne180100]<0>(&v55, v29);
            if ((v57 & 0x80u) == 0) {
              uint64_t v30 = (const std::string::value_type *)&v55;
            }
            else {
              uint64_t v30 = (const std::string::value_type *)v55;
            }
            if ((v57 & 0x80u) == 0) {
              std::string::size_type v31 = v57;
            }
            else {
              std::string::size_type v31 = v56;
            }
            uint64_t v32 = std::string::append(&v60, v30, v31);
            long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            v61.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v33;
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v34 = &v61;
            }
            else {
              id v34 = (std::string *)v61.__r_.__value_.__r.__words[0];
            }
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v35 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v35 = v61.__r_.__value_.__l.__size_;
            }
            std::string::append(&v47, (const std::string::value_type *)v34, v35);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v61.__r_.__value_.__l.__data_);
            }
            if ((char)v57 < 0) {
              operator delete(v55);
            }
            if (v51 && (v52 & 1) != 0) {
              (*(void (**)(void))(*(void *)v51 + 40))();
            }
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_49;
          }
          ++v20;
          uint64_t v19 = (re::audio *)*((void *)v21 + 3);
          this = (re::audio **)v21;
        }
        while (v19);
      }
      std::string::append(&v47, "No parent with isActive = true");
    }
LABEL_49:
    std::operator+<char>();
    if ((v50 & 0x80u) == 0) {
      uint64_t v23 = (const std::string::value_type *)&v48;
    }
    else {
      uint64_t v23 = (const std::string::value_type *)v48;
    }
    if ((v50 & 0x80u) == 0) {
      std::string::size_type v24 = v50;
    }
    else {
      std::string::size_type v24 = v49;
    }
    std::string::append(a3, v23, v24);
    if ((char)v50 < 0) {
      operator delete(v48);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
}

void sub_233584008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v43 - 57) < 0) {
    operator delete(*(void **)(v43 - 80));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a21 && (a22 & 1) != 0) {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  if (*(char *)(v43 - 89) < 0) {
    operator delete(*(void **)(v43 - 112));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v42 + 23) < 0) {
    operator delete(*(void **)v42);
  }
  _Unwind_Resume(exception_object);
}

__n128 re::audio::cleanUpTransformForPHASE@<Q0>(float32x4_t *a1@<X0>, double *a2@<X4>, double *a3@<X5>, double *a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  float32x4_t v7 = *a1;
  float32x4_t v6 = a1[1];
  float32x4_t v9 = a1[2];
  float32x4_t v8 = a1[3];
  float32x4_t v10 = vmulq_f32(v7, v7);
  int32x2_t v11 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u64[0];
  *(float *)v11.i32 = sqrtf(*(float *)v11.i32);
  if (*(float *)v11.i32 == 0.0
    || (float32x4_t v12 = vmulq_f32(v6, v6),
        v13 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u64[0], *(float *)v13.i32 = sqrtf(*(float *)v13.i32), *(float *)v13.i32 == 0.0)|| (float32x4_t v14 = vmulq_f32(v9, v9), v15 = vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1)), v15.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v15).f32[0]), v15.f32[0] == 0.0))
  {
    result.n128_u64[0] = 1065353216;
    result.n128_u32[2] = 0;
    result.n128_u32[3] = HIDWORD(*(unsigned long long *)a1);
    *(void *)&long long v30 = 0x3F80000000000000;
    DWORD2(v30) = 0;
    HIDWORD(v30) = HIDWORD(*(_OWORD *)&a1[1]);
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = __PAIR64__(v9.u32[3], 1.0);
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v30;
    *(_OWORD *)(a5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v31;
LABEL_18:
    *(float32x4_t *)(a5 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v8;
    return result;
  }
  __n128 result = (__n128)vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(v11, 0));
  float32x4_t v18 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(v13, 0));
  __n128 v52 = result;
  float32x4_t v53 = v18;
  float32x4_t v19 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0));
  float32x4_t v20 = vmulq_f32((float32x4_t)result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)v19, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL)));
  float32x4_t v54 = v19;
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0] < 0.0)
  {
    float32x4_t v18 = vnegq_f32(v18);
    float32x4_t v53 = v18;
  }
  int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL).u64[0];
  uint64_t v22 = 0;
  int32x4_t v23 = vzip1q_s32((int32x4_t)result, (int32x4_t)v19);
  int32x4_t v55 = vzip1q_s32(v23, (int32x4_t)v18);
  int32x4_t v56 = vzip2q_s32(v23, vdupq_lane_s32(*(int32x2_t *)v18.f32, 1));
  int32x4_t v57 = vzip1q_s32(vzip2q_s32((int32x4_t)result, (int32x4_t)v19), vdupq_laneq_s32((int32x4_t)v18, 2));
  do
  {
    *(float32x4_t *)&buf[v22] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)result, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v22))), v18, *(float32x2_t *)&v55.i8[v22], 1), v19, *(float32x4_t *)((char *)&v55 + v22), 2);
    v22 += 16;
  }
  while (v22 != 48);
  float32x4_t v24 = *(float32x4_t *)buf;
  v24.i32[0] = 0;
  float32x4_t v25 = vmulq_f32(v24, v24);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) < 1.0e-10)
  {
    float32x4_t v26 = v59;
    v26.i32[1] = 0;
    float32x4_t v27 = vmulq_f32(v26, v26);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]) < 1.0e-10)
    {
      float32x4_t v28 = v60;
      v28.i32[2] = 0;
      float32x4_t v29 = vmulq_f32(v28, v28);
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]) < 1.0e-10)
      {
        v19.i32[3] = result.n128_i32[2];
LABEL_17:
        result.n128_u64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v7, *(int8x16_t *)&v7, 8uLL).u32[1], v19.u32[3]);
        v6.i64[0] = __PAIR64__(v21.u32[0], v18.u32[0]);
        v6.i32[2] = v21.i32[1];
        v19.i32[3] = v9.i32[3];
        *(__n128 *)a5 = result;
        *(float32x4_t *)(a5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
        *(float32x4_t *)(a5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v19;
        goto LABEL_18;
      }
    }
  }
  float32x4_t v41 = v7;
  __int32 v42 = v6.i32[3];
  __int32 v43 = v9.i32[3];
  float32x4_t v44 = v8;
  float32x4_t v50 = 0u;
  float32x4_t v51 = 0u;
  int32x4_t v48 = 0u;
  float32x4_t v49 = 0u;
  int32x4_t v46 = 0u;
  int32x4_t v47 = 0u;
  long long v45 = 0u;
  re::computeSVD3x3((float32x2_t *)&v52, &v49, &v45, &v46, a2, a3, a4);
  if (v32)
  {
    uint64_t v33 = 0;
    float32x4_t v34 = v49;
    float32x4_t v35 = v50;
    float32x4_t v36 = v51;
    int32x4_t v55 = v46;
    int32x4_t v56 = v47;
    int32x4_t v57 = v48;
    do
    {
      *(float32x4_t *)&buf[v33] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v33))), v35, *(float32x2_t *)&v55.i8[v33], 1), v36, *(float32x4_t *)((char *)&v55 + v33), 2);
      v33 += 16;
    }
    while (v33 != 48);
    result.n128_u64[0] = *(void *)buf;
    float32x4_t v18 = v59;
    float32x4_t v19 = v60;
    v19.i32[3] = *(_DWORD *)&buf[8];
    int8x8_t v21 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
    v9.i32[3] = v43;
    float32x4_t v8 = v44;
    float32x4_t v7 = v41;
    v6.i32[3] = v42;
    goto LABEL_17;
  }
  long long v37 = (id)*re::audioLogObjects(v32);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
  {
    id v40 = re::audio::matrix3x3_to_string((float *)&v52);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_fault_impl(&dword_233120000, v37, OS_LOG_TYPE_FAULT, "cleanUpTransformForPHASE() Invalid transformation submatrix:\n%@", buf, 0xCu);
  }
  float32x4_t v38 = a1[1];
  *(float32x4_t *)a5 = *a1;
  *(float32x4_t *)(a5 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v38;
  __n128 result = (__n128)a1[2];
  float32x4_t v39 = a1[3];
  *(__n128 *)(a5 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
  *(float32x4_t *)(a5 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v39;
  return result;
}

void sub_23358456C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::audio::layoutTagFromFormat(re::audio *this, AVAudioFormat *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = [(re::audio *)v2 channelLayout];

  if (v3)
  {
    uint64_t v4 = [(re::audio *)v2 channelLayout];
    uint64_t v5 = [v4 layoutTag];
  }
  else
  {
    float32x4_t v6 = (re *)[(re::audio *)v2 channelCount];
    int v7 = (int)v6;
    if (v6 >= 3)
    {
      float32x4_t v8 = *re::audioLogObjects(v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)float32x4_t v10 = 0;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "AudioFileAsset layout tag was not set, but audio has >2 channels. Folding audio to mono!", v10, 2u);
      }
      uint64_t v5 = v7 | 0x930000u;
    }
    else
    {
      uint64_t v5 = dword_2343798B4[(int)v6];
    }
  }

  return v5;
}

void sub_233584664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFBundleRef REAudioCopyTestDataBundle(void)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  float32x4_t v18 = [MEMORY[0x263EFF980] array];
  int v0 = [MEMORY[0x263F08AB0] processInfo];
  uint64_t v1 = [v0 environment];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___Z25REAudioCopyTestDataBundlev_block_invoke;
  aBlock[3] = &unk_264BE2F78;
  id v17 = v1;
  id v26 = v17;
  id v2 = v18;
  id v27 = v2;
  uint64_t v3 = (void (**)(void *, __CFString *))_Block_copy(aBlock);
  v3[2](v3, @"__XCODE_BUILT_PRODUCTS_DIR_PATHS");
  v3[2](v3, @"DYLD_FRAMEWORK_PATH");
  bufstd::string::size_type size = 1023;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int32x4_t v23 = 0;
      _os_log_error_impl(&dword_233120000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to get current executable path", v23, 2u);
    }
  }
  else
  {
    buf[bufsize] = 0;
    uint64_t v4 = NSURL;
    uint64_t v5 = [NSString stringWithUTF8String:buf];
    float32x4_t v6 = [v4 fileURLWithPath:v5];

    int v7 = [v6 URLByDeletingLastPathComponent];
    [v2 addObject:v7];
  }
  float32x4_t v8 = [NSURL fileURLWithPath:@"/AppleInternal/Library/Bundles"];
  [v2 addObject:v8];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v9 = v2;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v28 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v20;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (2)
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v9);
        }
        CFURLRef v14 = [*(id *)(*((void *)&v19 + 1) + 8 * v13) URLByAppendingPathComponent:@"REAudioTestData.bundle"];
        CFBundleRef v15 = CFBundleCreate(v12, v14);

        if (v15)
        {

          goto LABEL_17;
        }
        ++v13;
      }
      while (v10 != v13);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v28 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int32x4_t v23 = 0;
    _os_log_error_impl(&dword_233120000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to load REAudioTestData.bundle", v23, 2u);
  }
  CFBundleRef v15 = 0;
LABEL_17:

  return v15;
}

void sub_2335849E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void ___Z25REAudioCopyTestDataBundlev_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = [*(id *)(a1 + 32) objectForKey:a2];
  uint64_t v4 = v3;
  if (v3)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v5 = objc_msgSend(v3, "componentsSeparatedByString:", @":", 0);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(a1 + 40);
          uint64_t v10 = [NSURL fileURLWithPath:*(void *)(*((void *)&v11 + 1) + 8 * v8)];
          [v9 addObject:v10];

          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
  }
}

void sub_233584BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFBundleRef REAudioCopyTestDataBundleNextTo(CFURLRef url)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], url);
  CFURLRef v3 = CFURLCreateCopyAppendingPathComponent(v1, PathComponent, @"REAudioTestData.bundle", 1u);
  CFBundleRef v4 = CFBundleCreate(v1, v3);
  if (!v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    CFURLRef v7 = v3;
    _os_log_error_impl(&dword_233120000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to load REAudioTestData.bundle from %@", (uint8_t *)&v6, 0xCu);
  }
  CFRelease(v3);
  CFRelease(PathComponent);
  return v4;
}

uint64_t REAudioShouldRedactSensitiveInfoFromLogs(void)
{
  if (qword_26AF7F2A0 != -1) {
    dispatch_once(&qword_26AF7F2A0, &__block_literal_global_70);
  }
  return _MergedGlobals_116;
}

void ___Z40REAudioShouldRedactSensitiveInfoFromLogsv_block_invoke()
{
  cf[1] = *(CFTypeRef *)MEMORY[0x263EF8340];
  int v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    CFAllocatorRef v1 = v0;
    cf[0] = 0;
    id v2 = (void *)SecTaskCopyValueForEntitlement(v0, @"com.apple.re.should-redact-sensitive-info-from-logs", (CFErrorRef *)cf);
    char v3 = 0;
    CFTypeRef v4 = cf[0];
    if (v2 && !cf[0])
    {
      id v5 = v2;
      if (objc_opt_respondsToSelector()) {
        char v3 = [v5 BOOLValue];
      }
      else {
        char v3 = 0;
      }

      CFTypeRef v4 = cf[0];
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v2) {
      CFRelease(v2);
    }
    CFRelease(v1);
  }
  else
  {
    char v3 = 0;
  }
  _MergedGlobals_116 = v3;
  int v6 = *re::audioLogObjects(v0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(cf[0]) = 67109120;
    HIDWORD(cf[0]) = _MergedGlobals_116;
    _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Entitlement shouldRedactSensitiveInfoFromLogs set %d.", (uint8_t *)cf, 8u);
  }
}

void sub_233584EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t REAudioEnableAudioEngineRunnableAutomationSupport(void)
{
  if (qword_26AF7F2A8 != -1) {
    dispatch_once(&qword_26AF7F2A8, &__block_literal_global_75);
  }
  return byte_26AF7F299;
}

void ___Z49REAudioEnableAudioEngineRunnableAutomationSupportv_block_invoke()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  CFAllocatorRef v1 = [v0 objectForKey:@"com.apple.re.enableAudioEngineRunnableAutomation"];

  if (v1)
  {
    uint64_t v2 = objc_opt_respondsToSelector();
    if (v2)
    {
      uint64_t v2 = [v1 BOOLValue];
      byte_26AF7F299 = v2;
    }
  }
  char v3 = *re::audioLogObjects((re *)v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = byte_26AF7F299;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[RE] [Sleep/Wake] User Defaults set enableAudioEngineRunnableAutomationSupport=%d", (uint8_t *)v4, 8u);
  }
}

void sub_233584FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t REAudioShouldConfigureTuningForSTSLabels(void)
{
  if (REAudioShouldConfigureTuningForSTSLabels(void)::onceToken != -1) {
    dispatch_once(&REAudioShouldConfigureTuningForSTSLabels(void)::onceToken, &__block_literal_global_81);
  }
  return g_shouldConfigureTuningForSTSLabels;
}

void ___Z40REAudioShouldConfigureTuningForSTSLabelsv_block_invoke()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  CFAllocatorRef v1 = [v0 objectForKey:@"com.apple.re.shouldConfigureTuningForSTSLabels"];

  if (v1)
  {
    uint64_t v2 = objc_opt_respondsToSelector();
    if (v2)
    {
      uint64_t v2 = [v1 BOOLValue];
      g_shouldConfigureTuningForSTSLabels = v2;
    }
  }
  char v3 = *re::audioLogObjects((re *)v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = g_shouldConfigureTuningForSTSLabels;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "REAudioShouldConfigureTuningForSTSLabels=%d", (uint8_t *)v4, 8u);
  }
}

void sub_233585158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float REAudioEngineShutdownTimerLength(void)
{
  if (REAudioEngineShutdownTimerLength(void)::onceToken != -1) {
    dispatch_once(&REAudioEngineShutdownTimerLength(void)::onceToken, &__block_literal_global_86);
  }
  return *(float *)&REAudioEngineShutdownTimerLength(void)::audioEngineShutdownTimerLengthFrames / 90.0;
}

void ___Z32REAudioEngineShutdownTimerLengthv_block_invoke()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  CFAllocatorRef v1 = [v0 objectForKey:@"com.apple.re.audioEngineShutdownTimerLengthFrames"];

  uint64_t v2 = objc_opt_respondsToSelector();
  if (v2)
  {
    uint64_t v2 = [v1 floatValue];
    REAudioEngineShutdownTimerLength(void)::audioEngineShutdownTimerLengthFrames = v3;
  }
  CFTypeRef v4 = *re::audioLogObjects((re *)v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    double v6 = *(float *)&REAudioEngineShutdownTimerLength(void)::audioEngineShutdownTimerLengthFrames;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "audioEngineShutdownTimerLengthFrames=%f", (uint8_t *)&v5, 0xCu);
  }
}

void sub_2335852C4(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void REAudioComputePHASEMixGroupID(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::to_string(&v20, a1);
  uint64_t v7 = std::string::append(&v20, "-");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v11 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  long long v13 = std::string::append(&v22, "-");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  float32x4_t v18 = std::string::append(&v23, v16, v17);
  *a4 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_233585444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t re::audio::pcmBufferSize(re::audio *this, AVAudioPCMBuffer *a2)
{
  uint64_t v2 = this;
  unsigned int v3 = [(re::audio *)v2 frameCapacity];
  CFTypeRef v4 = [(re::audio *)v2 format];
  unint64_t v5 = *(unsigned int *)([v4 streamDescription] + 24) * (unint64_t)v3;

  return v5;
}

void sub_23358551C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        double v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x40uLL);
    v11[4] = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[5] = 0;
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unsigned int v3 = (uint64_t *)v2[2];
      CFTypeRef v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            id v9 = (uint64_t **)a2[2];
          }
          else
          {
            id v9 = (uint64_t **)v2[1];
            double v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unsigned int v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            unsigned int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unsigned int v3 = v13;
          if (v13) {
            *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v2;
            unsigned int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unsigned int v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *std::string v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_233585B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13, char a14)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,double>,void *>>>::operator()[abi:ne180100](a14, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *int v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  *(unsigned char *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
}

void sub_233585C14(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,double>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,double>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      int v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void std::__shared_ptr_emplace<re::AudioManager_PHASE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioManager_PHASE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::AudioManager_PHASE>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<re::AudioSharedSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioSharedSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<re::AudioSharedSceneManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<re::AudioMultiSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioMultiSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DA840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<re::AudioMultiSceneManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *re::allocInfo_AudioFileAssetConfiguration(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_117, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_117))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7F310, "AudioFileAssetConfiguration");
    __cxa_guard_release(&_MergedGlobals_117);
  }
  return &unk_26AF7F310;
}

void re::initInfo_AudioFileAssetConfiguration(re *this, re::IntrospectionBase *a2)
{
  v46[0] = 0xC6CB289492F5ABB0;
  v46[1] = "AudioFileAssetConfiguration";
  re::StringID::destroyString((re::StringID *)v46);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v47;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F2B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7F2B8);
    if (v4)
    {
      int8x8_t v5 = re::introspectionAllocator(v4);
      uint8x8_t v7 = re::introspect_BOOL((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "stream";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7F2C0 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "loop";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x100000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7F2C8 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      int v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "randomizeStartTime";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x200000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7F2D0 = v16;
      float v17 = re::introspectionAllocator((re *)v16);
      BOOL v19 = introspect_REAudioNormalizationMode(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "normalizationMode";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x400000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7F2D8 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      std::string v23 = introspect_REAudioCalibrationMode(1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "calibrationMode";
      *(void *)(v24 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v24 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7F2E0 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      id v27 = re::introspect_double((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "calibrationLevel";
      *(void *)(v28 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7F2E8 = v28;
      float32x4_t v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "mixGroupName";
      *(void *)(v32 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v32 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7F2F0 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      float32x4_t v35 = re::IntrospectionInfo<re::Optional<unsigned int>>::get(1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "layoutTag";
      *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v36 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF7F2F8 = v36;
      long long v37 = re::introspectionAllocator((re *)v36);
      float32x4_t v39 = introspect_REAudioInputMode(1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "inputMode";
      *(void *)(v40 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5000000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v40 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF7F300 = v40;
      float32x4_t v41 = re::introspectionAllocator((re *)v40);
      __int32 v43 = re::introspect_double((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "targetLUFS";
      *(void *)(v44 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x180000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v44 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF7F308 = v44;
      __cxa_guard_release(&qword_26AF7F2B8);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7F2C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioFileAssetConfiguration>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioFileAssetConfiguration>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AudioFileAssetConfiguration>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioFileAssetConfiguration>;
  re::IntrospectionRegistry::add(this, v3);
  long long v45 = v47;
}

void sub_2335866B8(_Unwind_Exception *a1)
{
}

uint64_t *re::IntrospectionInfo<re::Optional<unsigned int>>::get(char a1, const re::IntrospectionBase *a2)
{
  {
    *(void *)re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info) = &unk_26E6DA8E0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info;
    }
    int8x8_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  unint64_t v6 = (re *)re::introspect_uint32_t((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint8x8_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info, 0);
    qword_268773D50 = 0x80000000DLL;
    dword_268773D58 = v10;
    word_268773D5C = 0;
    *(void *)&xmmword_268773D60 = 0;
    *((void *)&xmmword_268773D60 + 1) = 0xFFFFFFFFLL;
    qword_268773D70 = v9;
    unk_268773D78 = 0;
    re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info = (uint64_t)&unk_26E6DA8E0;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      unint64_t v13 = v16;
    }
    else {
      unint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773D60 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<unsigned int>>::get(BOOL)::info;
}

void sub_2335868FC(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AudioFileAssetConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 0;
  *(unsigned char *)(a3 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_234377550;
  *(unsigned char *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AudioFileAssetConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 32)) {
    return re::DynamicString::deinit((re::DynamicString *)(a3 + 40));
  }
  return result;
}

double re::internal::defaultConstructV2<re::AudioFileAssetConfiguration>(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_234377550;
  *(unsigned char *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AudioFileAssetConfiguration>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  }
  return result;
}

uint64_t re::introspect_AudioFileAssetConfiguration(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioFileAssetConfiguration", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAssetConfiguration, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAssetConfiguration, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAssetConfiguration>, this);
}

void re::TypeBuilderHelper::registerOptional<unsigned int>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 8uLL, 4uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<unsigned int>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<unsigned int>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<unsigned int>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<unsigned int>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<unsigned int>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<unsigned int>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

uint64_t *re::audioLogObjects(re *this)
{
  {
    re::audioLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Audio");
  }
  return &re::audioLogObjects(void)::logObjects;
}

uint64_t re::AudioLogObjects::loggingEnabled(re::AudioLogObjects *this)
{
  CFAllocatorRef v1 = (unsigned __int8 *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
  {
    CFAllocatorRef v1 = (unsigned char *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"audio.log.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::AudioLogObjects::loggingEnabled(void)::value = v5;
      CFAllocatorRef v1 = (unsigned char *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
    }
  }
  return v1[2616];
}

void re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::eventReceived(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    std::__tree<unsigned long long>::__erase_unique<unsigned long long>((void **)(a1 + 16), a2);
  }
}

BOOL re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::isCompleted(re::AudioManager_PHASE_StateMachine_SceneRecoveryStep *this)
{
  return *((void *)this + 4) == 0;
}

void re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::unregisterScene(void **this, unint64_t a2)
{
}

uint64_t *re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::registerScene(uint64_t **this, uint64_t a2)
{
  uint64_t v3 = a2;
  return std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(this + 2, (unint64_t *)&v3, &v3);
}

void re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::stepDescription(re::AudioManager_PHASE_StateMachine_SceneRecoveryStep *this@<X0>, std::string *a2@<X8>)
{
  if (*((void *)this + 4))
  {
    re::nameForAudioManagerStateMachineEvent(*((_DWORD *)this + 2), &v16);
    unint64_t v4 = std::string::append(&v16, ": ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((void *)this + 4));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v18, " remaining");
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v11 = (void *)v16.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v11);
    }
  }
  else
  {
    re::nameForAudioManagerStateMachineEvent(*((_DWORD *)this + 2), &v17);
    uint64_t v12 = std::string::append(&v17, ": ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v18, "completed");
    *a2 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v11 = (void *)v17.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void sub_233586F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::copy(re::AudioManager_PHASE_StateMachine_SceneRecoveryStep *this)
{
}

void sub_233587034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<unsigned long long>::destroy((uint64_t)&a10, a11);
  MEMORY[0x237DBCBD0](v11, 0x10A1C40C3D8C859);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_StateMachine_SceneRecoveryStep::~AudioManager_PHASE_StateMachine_SceneRecoveryStep(re::AudioManager_PHASE_StateMachine_SceneRecoveryStep *this)
{
  *(void *)this = &unk_26E6DA960;
  std::__tree<unsigned long long>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DA960;
  std::__tree<unsigned long long>::destroy((uint64_t)this + 16, *((void **)this + 3));
  JUMPOUT(0x237DBCBD0);
}

void std::__tree<unsigned long long>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned long long>::destroy(a1, *a2);
    std::__tree<unsigned long long>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::set<unsigned long long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2335871B0(_Unwind_Exception *a1)
{
  std::__tree<unsigned long long>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      double result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v5, v6, v4 + 4, v4 + 4);
      uint8x8_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint8x8_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<unsigned long long>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  uint8x8_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint8x8_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long long>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    std::string v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          std::string v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          std::string v16 = (void *)*v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        std::string v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      std::string v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<unsigned long long>::__erase_unique<unsigned long long>(void **a1, unint64_t a2)
{
  uint64_t v3 = a1 + 1;
  int v2 = a1[1];
  if (!v2) {
    return;
  }
  long long v5 = a1 + 1;
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v6[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v6;
    }
    else {
      BOOL v9 = v6 + 1;
    }
    if (v8) {
      long long v5 = v6;
    }
    unint64_t v6 = (void *)*v9;
  }
  while (*v9);
  if (v5 == v3 || v5[4] > a2) {
    return;
  }
  uint64_t v10 = (void *)v5[1];
  if (v10)
  {
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v12 = v5;
    do
    {
      uint64_t v11 = (void *)v12[2];
      BOOL v32 = *v11 == (void)v12;
      uint64_t v12 = v11;
    }
    while (!v32);
  }
  if (*a1 == v5) {
    *a1 = v11;
  }
  a1[2] = (char *)a1[2] - 1;
  uint64_t v13 = *v5;
  BOOL v14 = v5;
  if (*v5)
  {
    unint64_t v15 = (void *)v5[1];
    if (!v15)
    {
      BOOL v14 = v5;
      goto LABEL_27;
    }
    do
    {
      BOOL v14 = v15;
      unint64_t v15 = (void *)*v15;
    }
    while (v15);
  }
  uint64_t v13 = v14[1];
  if (v13)
  {
LABEL_27:
    int v16 = 0;
    *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14[2];
    goto LABEL_28;
  }
  int v16 = 1;
LABEL_28:
  std::string v17 = (void *)v14[2];
  unint64_t v18 = (void *)*v17;
  if ((void *)*v17 == v14)
  {
    *std::string v17 = v13;
    if (v14 == v2)
    {
      unint64_t v18 = 0;
      int v2 = (void *)v13;
    }
    else
    {
      unint64_t v18 = (void *)v17[1];
    }
  }
  else
  {
    v17[1] = v13;
  }
  int v19 = *((unsigned __int8 *)v14 + 24);
  if (v14 != v5)
  {
    uint64_t v20 = v5[2];
    _OWORD v14[2] = v20;
    *(void *)(v20 + 8 * (*(void *)v5[2] != (void)v5)) = v14;
    uint64_t v22 = *v5;
    uint64_t v21 = v5[1];
    *(void *)(v22 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
    *BOOL v14 = v22;
    v14[1] = v21;
    if (v21) {
      *(void *)(v21 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
    }
    *((unsigned char *)v14 + 24) = *((unsigned char *)v5 + 24);
    if (v2 == v5) {
      int v2 = v14;
    }
  }
  if (!v19 || !v2) {
    goto LABEL_71;
  }
  if (!v16)
  {
    *(unsigned char *)(v13 + 24) = 1;
    goto LABEL_71;
  }
  while (1)
  {
    uint64_t v23 = v18[2];
    if (*(void **)v23 != v18) {
      break;
    }
    if (!*((unsigned char *)v18 + 24))
    {
      *((unsigned char *)v18 + 24) = 1;
      *(unsigned char *)(v23 + 24) = 0;
      uint64_t v29 = v18[1];
      *(void *)uint64_t v23 = v29;
      if (v29) {
        *(void *)(v29 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
      }
      void v18[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v18;
      v18[1] = v23;
      *(void *)(v23 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
      if (v2 == (void *)v23) {
        int v2 = v18;
      }
      unint64_t v18 = *(void **)v23;
    }
    uint64_t v30 = (unsigned char *)*v18;
    if (*v18 && !v30[24]) {
      goto LABEL_88;
    }
    long long v31 = (uint64_t *)v18[1];
    if (v31 && !*((unsigned char *)v31 + 24))
    {
      if (v30 && !v30[24])
      {
LABEL_88:
        long long v31 = v18;
      }
      else
      {
        *((unsigned char *)v31 + 24) = 1;
        *((unsigned char *)v18 + 24) = 0;
        uint64_t v37 = *v31;
        v18[1] = *v31;
        if (v37) {
          *(void *)(v37 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
        }
        _OWORD v31[2] = v18[2];
        *(void *)(v18[2] + 8 * (*(void *)v18[2] != (void)v18)) = v31;
        *long long v31 = (uint64_t)v18;
        void v18[2] = v31;
        uint64_t v30 = v18;
      }
      uint64_t v34 = v31[2];
      *((unsigned char *)v31 + 24) = *(unsigned char *)(v34 + 24);
      *(unsigned char *)(v34 + 24) = 1;
      v30[24] = 1;
      float32x4_t v35 = *(uint64_t **)v34;
      uint64_t v38 = *(void *)(*(void *)v34 + 8);
      *(void *)uint64_t v34 = v38;
      if (v38) {
        *(void *)(v38 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v34;
      }
      _OWORD v35[2] = *(void *)(v34 + 16);
      *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v35;
      v35[1] = v34;
      goto LABEL_92;
    }
    *((unsigned char *)v18 + 24) = 0;
    uint64_t v28 = (unsigned char *)v18[2];
    if (v28[24]) {
      BOOL v32 = v28 == (unsigned char *)v2;
    }
    else {
      BOOL v32 = 1;
    }
    if (v32) {
      goto LABEL_73;
    }
LABEL_69:
    unint64_t v18 = *(void **)(*((void *)v28 + 2) + 8 * (**((void **)v28 + 2) == (void)v28));
  }
  if (!*((unsigned char *)v18 + 24))
  {
    *((unsigned char *)v18 + 24) = 1;
    *(unsigned char *)(v23 + 24) = 0;
    uint64_t v24 = *(uint64_t **)(v23 + 8);
    uint64_t v25 = *v24;
    *(void *)(v23 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *v24;
    if (v25) {
      *(void *)(v25 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
    }
    uint64_t v24[2] = *(void *)(v23 + 16);
    *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
    *uint64_t v24 = v23;
    *(void *)(v23 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v24;
    if (v2 == (void *)*v18) {
      int v2 = v18;
    }
    unint64_t v18 = *(void **)(*v18 + 8);
  }
  uint64_t v26 = (void *)*v18;
  if (!*v18 || *((unsigned char *)v26 + 24))
  {
    id v27 = (void *)v18[1];
    if (v27 && !*((unsigned char *)v27 + 24)) {
      goto LABEL_79;
    }
    *((unsigned char *)v18 + 24) = 0;
    uint64_t v28 = (unsigned char *)v18[2];
    if (v28 == (unsigned char *)v2)
    {
      uint64_t v28 = v2;
LABEL_73:
      v28[24] = 1;
      goto LABEL_71;
    }
    if (!v28[24]) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  id v27 = (void *)v18[1];
  if (v27 && !*((unsigned char *)v27 + 24))
  {
LABEL_79:
    uint64_t v26 = v18;
  }
  else
  {
    *((unsigned char *)v26 + 24) = 1;
    *((unsigned char *)v18 + 24) = 0;
    uint64_t v33 = v26[1];
    *unint64_t v18 = v33;
    if (v33) {
      *(void *)(v33 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
    }
    v26[2] = v18[2];
    *(void *)(v18[2] + 8 * (*(void *)v18[2] != (void)v18)) = v26;
    v26[1] = v18;
    void v18[2] = v26;
    id v27 = v18;
  }
  uint64_t v34 = v26[2];
  *((unsigned char *)v26 + 24) = *(unsigned char *)(v34 + 24);
  *(unsigned char *)(v34 + 24) = 1;
  *((unsigned char *)v27 + 24) = 1;
  float32x4_t v35 = *(uint64_t **)(v34 + 8);
  uint64_t v36 = *v35;
  *(void *)(v34 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *v35;
  if (v36) {
    *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v34;
  }
  _OWORD v35[2] = *(void *)(v34 + 16);
  *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v35;
  uint64_t *v35 = v34;
LABEL_92:
  *(void *)(v34 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v35;
LABEL_71:
  operator delete(v5);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void re::AudioManager_PHASE::AudioManager_PHASE(re::AudioManager_PHASE *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  re::AudioManager::AudioManager(this);
}

void sub_233587E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::~AudioManager_PHASE(re::AudioManager_PHASE *this)
{
  id v2 = **((id **)this + 39);
  [v2 cancel];

  int v3 = atomic_load((unsigned int *)this + 139);
  if (v3 >= 1)
  {
    do
    {
      re::AudioManager_PHASE::stopEngine((atomic_uint *)this);
      int v4 = atomic_load((unsigned int *)this + 139);
    }
    while (v4 > 0);
  }
  dispatch_sync(*((dispatch_queue_t *)this + 67), &__block_literal_global_5);
  dispatch_sync(*((dispatch_queue_t *)this + 68), &__block_literal_global_11);
  if (re::AudioManagerTelemetryReporter::m_managerQueue) {
    dispatch_sync((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &__block_literal_global_124);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
  std::unique_ptr<re::DisplayStateNotificationManager>::reset[abi:ne180100]((re::DisplayStateNotificationManager **)this + 108, 0);
  std::unique_ptr<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>,std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>>::reset[abi:ne180100]((uint64_t *)this + 90, 0);
  std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::~__value_func[abi:ne180100]((void *)this + 91);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 616);
  std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::~__hash_table((uint64_t)this + 576);

  std::unique_ptr<re::AudioManager_PHASE_StateMachine>::reset[abi:ne180100]((re::AudioManager_PHASE_StateMachine **)this + 66, 0);
  std::unique_ptr<re::AudioManager_PHASE_Async>::reset[abi:ne180100]((re::AudioManager_PHASE_Async **)this + 65, 0);

  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  re::AudioManager::~AudioManager(this);
}

{
  uint64_t vars8;

  re::AudioManager_PHASE::~AudioManager_PHASE(this);
  JUMPOUT(0x237DBCBD0);
}

void re::AudioManager_PHASE::stopEngine(atomic_uint *this)
{
  if ((int)atomic_fetch_add(this + 139, 0xFFFFFFFF) <= 0)
  {
    uint64_t v1 = *re::audioLogObjects((re *)this);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v2 = 0;
      _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "unbalanced call to AudioManager_PHASE::stopEngine()", v2, 2u);
    }
  }
}

void re::AudioManager_PHASE::addAudioEngineRunnableReason(uint64_t a1, int a2)
{
  id v2 = *(float **)(a1 + 872);
  if (v2) {
    re::AudioEngineRunnableManager::addReason(v2, a2);
  }
}

void re::AudioManager_PHASE::removeAudioEngineRunnableReason(uint64_t a1, int a2)
{
  id v2 = *(void **)(a1 + 872);
  if (v2) {
    re::AudioEngineRunnableManager::removeReason(v2, a2);
  }
}

void re::AudioManager_PHASE::setEngineQueue(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(a1 + 8), a2);
  uint64_t v5 = *(void *)(a1 + 520);
  unint64_t v6 = *(void **)(v5 + 408);
  *(void *)(v5 + 40re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
}

void re::AudioManager_PHASE::triggerNotification(re::AudioManager *this, int a2)
{
  switch(a2)
  {
    case 0:
      re::AudioManager::configureSTS(this);
      break;
    case 1:
      re::AudioManager_PHASE::configureAndStartEngine(this);
      break;
    case 2:
      re::AudioManager_PHASE::triggerServiceLost(this);
      break;
    case 3:
      re::AudioManager_PHASE::triggerServiceReset(this);
      break;
    default:
      return;
  }
}

uint64_t re::AudioManager_PHASE::handlesPlaybackForFileAndBufferResources(re::AudioManager_PHASE *this)
{
  return 1;
}

void re::AudioManager_PHASE::configureAndStartEngine(re::AudioManager_PHASE *this)
{
  if (*(void *)(*((void *)this + 109) + 24))
  {
    uint64_t v1 = *((void *)this + 67);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN2re18AudioManager_PHASE23configureAndStartEngineEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_async(v1, block);
  }
}

void re::AudioManager_PHASE::triggerServiceLost(re::AudioManager_PHASE *this)
{
  re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(*((void *)this + 66), 0, 0, 0);
  uint64_t Instance = re::AudioManagerTelemetryReporter::getInstance(v2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re29AudioManagerTelemetryReporter23mediaServicesResetEventEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = Instance;
  dispatch_async((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, block);
  re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereLost(*((void *)this + 65));
  re::AudioManager::triggerServiceLost(this);
}

void re::AudioManager_PHASE::triggerServiceReset(re::AudioManager_PHASE *this)
{
  re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(*((void *)this + 66), 1, 0, 0);
  re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereReset(*((void *)this + 65));
  re::AudioManager::triggerServiceReset(this);
}

void re::AudioManager_PHASE::setPlaybackStateChangeHandlerForToken(uint64_t a1, unint64_t a2, void *a3)
{
}

void re::AudioManager_PHASE::playbackStateDidChangeForToken(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t re::AudioManager_PHASE::playbackHostConnectionIdentifier(re::AudioManager_PHASE_Async **this)
{
  return re::AudioManager_PHASE_Async::playbackHostConnectionIdentifier(this[65]);
}

void re::AudioManager_PHASE::joinPlaybackHostingServiceAtEndpoint(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 536);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  char v6[2] = ___ZN2re18AudioManager_PHASE36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
  v6[3] = &unk_264BE2C48;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void ___ZN2re18AudioManager_PHASE36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1)
{
}

id re::AudioManager_PHASE::copyOrCreateEndpointForPlaybackHostingService(void **this)
{
  uint64_t Instance = re::AudioManagerTelemetryReporter::getInstance((re::AudioManagerTelemetryReporter *)this);
  re::AudioManagerTelemetryReporter::initializeTimerWith(Instance, (uint64_t)this, this[1]);
  id v3 = (re::AudioManager_PHASE_Async *)this[65];
  return re::AudioManager_PHASE_Async::copyOrCreateEndpointForPlaybackHostingService(v3);
}

uint64_t re::AudioManager_PHASE::addPlaybackConnectionDisconnectCallback(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 520);
  id v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 424));
  uint64_t v5 = *(void *)(v3 + 472) + 1;
  do
  {
    unint64_t v6 = v5;
    uint64_t v5 = 1;
  }
  while (!v6);
  *(void *)(v3 + 47re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  id v7 = _Block_copy(v4);
  unint64_t v8 = *(void *)(v3 + 440);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v8 <= v6) {
        unint64_t v2 = v6 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v6;
    }
    uint64_t v10 = *(void **)(*(void *)(v3 + 432) + 8 * v2);
    if (v10)
    {
      for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v6)
        {
          if (i[2] == v6) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  BOOL v14 = (void *)(v3 + 448);
  *uint64_t v13 = 0;
  v13[1] = v6;
  void v13[2] = v6;
  void v13[3] = v7;
  float v15 = (float)(unint64_t)(*(void *)(v3 + 456) + 1);
  float v16 = *(float *)(v3 + 464);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v6 = v2;
    goto LABEL_66;
  }
  BOOL v17 = 1;
  if (v8 >= 3) {
    BOOL v17 = (v8 & (v8 - 1)) != 0;
  }
  unint64_t v18 = v17 | (2 * v8);
  unint64_t v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19) {
    int8x8_t prime = (int8x8_t)v19;
  }
  else {
    int8x8_t prime = (int8x8_t)v18;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v8 = *(void *)(v3 + 440);
  }
  if (*(void *)&prime <= v8)
  {
    if (*(void *)&prime >= v8) {
      goto LABEL_62;
    }
    unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 456) / *(float *)(v3 + 464));
    if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      unint64_t v27 = std::__next_prime(v27);
    }
    else
    {
      uint64_t v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2) {
        unint64_t v27 = v29;
      }
    }
    if (*(void *)&prime <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *(void *)(v3 + 440);
      goto LABEL_62;
    }
    if (!*(void *)&prime)
    {
      uint64_t v38 = *(void **)(v3 + 432);
      *(void *)(v3 + 43re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      if (v38) {
        operator delete(v38);
      }
      unint64_t v8 = 0;
      *(void *)(v3 + 440) = 0;
      goto LABEL_62;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v21 = operator new(8 * *(void *)&prime);
  uint64_t v22 = *(void **)(v3 + 432);
  *(void *)(v3 + 43re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v21;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = 0;
  *(int8x8_t *)(v3 + 440) = prime;
  do
    *(void *)(*(void *)(v3 + 432) + 8 * v23++) = 0;
  while (*(void *)&prime != v23);
  uint64_t v24 = (void *)*v14;
  if (*v14)
  {
    unint64_t v25 = v24[1];
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      if (v25 >= *(void *)&prime) {
        v25 %= *(void *)&prime;
      }
    }
    else
    {
      v25 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(v3 + 432) + 8 * v2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v14;
    uint64_t v30 = (void *)*v24;
    if (*v24)
    {
      do
      {
        unint64_t v31 = v30[1];
        if (v26.u32[0] > 1uLL)
        {
          if (v31 >= *(void *)&prime) {
            v31 %= *(void *)&prime;
          }
        }
        else
        {
          v31 &= *(void *)&prime - 1;
        }
        if (v31 != v25)
        {
          uint64_t v32 = *(void *)(v3 + 432);
          if (!*(void *)(v32 + 8 * v31))
          {
            *(void *)(v32 + 8 * v31) = v24;
            goto LABEL_58;
          }
          *uint64_t v24 = *v30;
          *uint64_t v30 = **(void **)(*(void *)(v3 + 432) + 8 * v31);
          **(void **)(*(void *)(v3 + 432) + 8 * v31) = v30;
          uint64_t v30 = v24;
        }
        unint64_t v31 = v25;
LABEL_58:
        uint64_t v24 = v30;
        uint64_t v30 = (void *)*v30;
        unint64_t v25 = v31;
      }
      while (v30);
    }
  }
  unint64_t v8 = (unint64_t)prime;
LABEL_62:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v6) {
      v6 %= v8;
    }
  }
  else
  {
    v6 &= v8 - 1;
  }
LABEL_66:
  uint64_t v33 = *(void *)(v3 + 432);
  uint64_t v34 = *(void **)(v33 + 8 * v6);
  if (v34)
  {
    *uint64_t v13 = *v34;
LABEL_74:
    *uint64_t v34 = v13;
    goto LABEL_75;
  }
  *uint64_t v13 = *v14;
  *BOOL v14 = v13;
  *(void *)(v33 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  if (*v13)
  {
    unint64_t v35 = *(void *)(*v13 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)(v3 + 432) + 8 * v35);
    goto LABEL_74;
  }
LABEL_75:
  id v7 = 0;
  ++*(void *)(v3 + 456);
LABEL_76:

  uint64_t v36 = *(void *)(v3 + 472);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 424));

  return v36;
}

void sub_23358890C(_Unwind_Exception *a1)
{
  operator delete(v3);
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::removePlaybackConnectionDisconnectCallback(re::AudioManager_PHASE *this, unint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 424));
  int8x8_t v4 = *(int8x8_t *)(v3 + 440);
  if (!*(void *)&v4) {
    goto LABEL_47;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (*(void *)&v4 <= a2) {
      unint64_t v6 = a2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & a2;
  }
  uint64_t v7 = *(void *)(v3 + 432);
  unint64_t v8 = *(void ***)(v7 + 8 * v6);
  if (!v8) {
    goto LABEL_47;
  }
  uint8x8_t v9 = *v8;
  if (!*v8) {
    goto LABEL_47;
  }
  uint64_t v10 = *(void *)&v4 - 1;
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == a2) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= v10;
    }
    if (v11 != v6) {
      goto LABEL_47;
    }
LABEL_17:
    uint8x8_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_47;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_17;
  }
  unint64_t v12 = (void *)*v9;
  if (v5.u32[0] > 1uLL)
  {
    if (*(void *)&v4 <= a2) {
      a2 %= *(void *)&v4;
    }
  }
  else
  {
    a2 &= v10;
  }
  uint64_t v13 = *(void **)(v7 + 8 * a2);
  do
  {
    BOOL v14 = v13;
    uint64_t v13 = (void *)*v13;
  }
  while (v13 != v9);
  if (v14 == (void *)(v3 + 448)) {
    goto LABEL_36;
  }
  unint64_t v15 = v14[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v15 >= *(void *)&v4) {
      v15 %= *(void *)&v4;
    }
  }
  else
  {
    v15 &= v10;
  }
  if (v15 == a2)
  {
LABEL_38:
    if (v12)
    {
      unint64_t v16 = v12[1];
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v12) {
      goto LABEL_37;
    }
    unint64_t v16 = v12[1];
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v17 = v12[1];
      if (v16 >= *(void *)&v4) {
        unint64_t v17 = v16 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v17 = v16 & v10;
    }
    if (v17 != a2)
    {
LABEL_37:
      *(void *)(v7 + 8 * are::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      unint64_t v12 = (void *)*v9;
      goto LABEL_38;
    }
LABEL_40:
    if (v5.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v4) {
        v16 %= *(void *)&v4;
      }
    }
    else
    {
      v16 &= v10;
    }
    if (v16 != a2)
    {
      *(void *)(*(void *)(v3 + 432) + 8 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
      unint64_t v12 = (void *)*v9;
    }
  }
  *BOOL v14 = v12;
  void *v9 = 0;
  --*(void *)(v3 + 456);

  operator delete(v9);
LABEL_47:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 424));
}

uint64_t re::AudioManager_PHASE::playbackConnectionDidDisconnect(os_unfair_lock_s **this)
{
  return re::AudioManager_PHASE_Async::triggerPlaybackConnectionDisconnectCallbacks(this[65]);
}

uint64_t re::AudioManager_PHASE::setIsHostingSharedSimulation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2;
  return this;
}

uint64_t re::AudioManager_PHASE::getIsHostingSharedSimulation(re::AudioManager_PHASE *this)
{
  return *((unsigned __int8 *)this + 552);
}

uint64_t re::AudioManager_PHASE::controlsPlaybackForGeneratorResources(re::AudioManager_PHASE *this)
{
  return 1;
}

void re::AudioManager_PHASE::setExternalSourceControl(re::AudioManager_PHASE *this, char a2)
{
  *((unsigned char *)this + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2;
  unint64_t v2 = *((void *)this + 67);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = this;
  char v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke(uint64_t result)
{
  return result;
}

void *re::AudioManager_PHASE::loadAssetsOnReset(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(NSObject **)(a1 + 536);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  _DWORD v4[2] = ___ZN2re18AudioManager_PHASE17loadAssetsOnResetENSt3__18functionIFNS1_13unordered_mapIyNS1_10shared_ptrINS_18PersistedAssetDataEEENS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorINS1_4pairIKyS6_EEEEEEvEEE_block_invoke;
  v4[3] = &__block_descriptor_72_ea8_40c152_ZTSKNSt3__18functionIFNS_13unordered_mapIyNS_10shared_ptrIN2re18PersistedAssetDataEEENS_4hashIyEENS_8equal_toIyEENS_9allocatorINS_4pairIKyS5_EEEEEEvEEE_e5_v8__0l;
  void v4[4] = a1;
  std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  dispatch_async(v2, v4);
  return std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100](v5);
}

void ___ZN2re18AudioManager_PHASE17loadAssetsOnResetENSt3__18functionIFNS1_13unordered_mapIyNS1_10shared_ptrINS_18PersistedAssetDataEEENS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorINS1_4pairIKyS6_EEEEEEvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  (*(void (**)(void *__return_ptr))(*(void *)v2 + 48))(v4);
  re::AudioManager_PHASE::loadAssetsFromGenerator(v3, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)v4);
  re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(*(void *)(v3 + 528), 3, 0, 0);
}

void sub_233588D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE::loadAssetsFromGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 520);
  unint64_t v6 = *(pthread_rwlock_t **)(v4 + 232);
  uint64_t v5 = v4 + 232;
  uint64_t v27 = v5 + 16;
  uint64_t v28 = v5;
  pthread_rwlock_rdlock(v6);
  uint64_t v7 = [*(id *)(v5 + 16) engine];
  unint64_t v8 = [v7 assetRegistry];

  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v11 = i[3];
    uint64_t v10 = (std::__shared_weak_count *)i[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = _Block_copy(*(const void **)v11);
    long long v13 = *(_OWORD *)(v11 + 32);
    v19[0] = *(_OWORD *)(v11 + 16);
    v19[1] = v13;
    char v20 = *(unsigned char *)(v11 + 48);
    if (v20) {
      re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)(v11 + 56));
    }
    if (*(unsigned char *)(v11 + 88)) {
      int v25 = *(_DWORD *)(v11 + 92);
    }
    char v26 = *(unsigned char *)(v11 + 96);
    id v14 = *(id *)(v11 + 8);
    (*((void (**)(void *, void *, id, _OWORD *, void))v12 + 2))(v12, v8, v14, v19, *(void *)(*(void *)(a1 + 520) + 552));

    id v15 = *(id *)(v5 + 16);
    [v15 addAudioAssetID:i[2] configuration:v19];

    if (v20 && v21 && (v22 & 1) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 40))(v21, v23, v16, v17);
    }

    if (v10) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    }
  }

  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v5);
}

void sub_233588EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c152_ZTSKNSt3__18functionIFNS_13unordered_mapIyNS_10shared_ptrIN2re18PersistedAssetDataEEENS_4hashIyEENS_8equal_toIyEENS_9allocatorINS_4pairIKyS5_EEEEEEvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_ea8_40c152_ZTSKNSt3__18functionIFNS_13unordered_mapIyNS_10shared_ptrIN2re18PersistedAssetDataEEENS_4hashIyEENS_8equal_toIyEENS_9allocatorINS_4pairIKyS5_EEEEEEvEEE(uint64_t a1)
{
  return std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *re::AudioManager_PHASE::loadAssetsOnSceneRegister(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(NSObject **)(a1 + 536);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  _DWORD v4[2] = ___ZN2re18AudioManager_PHASE25loadAssetsOnSceneRegisterENSt3__18functionIFNS1_13unordered_mapIyNS1_10shared_ptrINS_18PersistedAssetDataEEENS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorINS1_4pairIKyS6_EEEEEEvEEE_block_invoke;
  v4[3] = &__block_descriptor_72_ea8_40c152_ZTSKNSt3__18functionIFNS_13unordered_mapIyNS_10shared_ptrIN2re18PersistedAssetDataEEENS_4hashIyEENS_8equal_toIyEENS_9allocatorINS_4pairIKyS5_EEEEEEvEEE_e5_v8__0l;
  void v4[4] = a1;
  std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  dispatch_async(v2, v4);
  return std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100](v5);
}

uint64_t ___ZN2re18AudioManager_PHASE25loadAssetsOnSceneRegisterENSt3__18functionIFNS1_13unordered_mapIyNS1_10shared_ptrINS_18PersistedAssetDataEEENS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorINS1_4pairIKyS6_EEEEEEvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  (*(void (**)(void *__return_ptr))(*(void *)v2 + 48))(v5);
  re::AudioManager_PHASE::loadAssetsFromGenerator(v3, (uint64_t)v5);
  return std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)v5);
}

void sub_2335890C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::systemFinishedRecovery(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 5) {
    re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(*(void *)(a1 + 528), dword_23437A4AC[a2], a3, a4);
  }
}

void re::AudioManager_PHASE::registerSceneForSystemRecovery(re *a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 6;
      goto LABEL_9;
    case 2:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 5;
      goto LABEL_9;
    case 3:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 7;
      goto LABEL_9;
    case 4:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 8;
      goto LABEL_9;
    case 5:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 9;
LABEL_9:
      int v14 = v6;
      uint64_t v12 = v4;
      uint64_t v13 = a3;
      dispatch_async(v5, &v8);
      break;
    default:
      uint64_t v7 = *re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 67109120;
        HIDWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[RE/MediaServices] [EngineState] Invalid system registered for system recovery, system id %d", (uint8_t *)&v8, 8u);
      }
      break;
  }
}

void re::AudioManager_PHASE::unregisterSceneFromSystemRecovery(re *a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 6;
      goto LABEL_9;
    case 2:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 5;
      goto LABEL_9;
    case 3:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 7;
      goto LABEL_9;
    case 4:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 8;
      goto LABEL_9;
    case 5:
      uint64_t v4 = *((void *)a1 + 66);
      uint64_t v5 = *(NSObject **)(v4 + 40);
      uint64_t v8 = MEMORY[0x263EF8330];
      uint64_t v9 = 3221225472;
      uint64_t v10 = ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke;
      uint64_t v11 = &__block_descriptor_52_e5_v8__0l;
      int v6 = 9;
LABEL_9:
      int v14 = v6;
      uint64_t v12 = v4;
      uint64_t v13 = a3;
      dispatch_async(v5, &v8);
      break;
    default:
      uint64_t v7 = *re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 67109120;
        HIDWORD(vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[RE/MediaServices] [EngineState] Invalid system unregistered from system recovery, system id %d", (uint8_t *)&v8, 8u);
      }
      break;
  }
}

BOOL re::AudioManager_PHASE::isAudioManagerStateReady(re::AudioManager_PHASE *this)
{
  uint64_t v1 = (os_unfair_lock_s *)*((void *)this + 66);
  return !v1 || re::AudioManager_PHASE_StateMachine::getCurrentStateType(v1) == 2;
}

void re::AudioManager_PHASE::clearAllRenderingState(re::AudioManager_PHASE *this)
{
  re::AudioManager::clearAllRenderingState(this);
  long long v5 = *((_OWORD *)this + 42);
  long long v12 = *((_OWORD *)this + 43);
  uint64_t v13 = *((void *)this + 88);
  uint64_t v2 = re::AudioManager_PHASE_Async::createPhaseContext(*((void *)this + 65), *((void **)this + 67));
  atomic_store(0, (unint64_t *)(*((void *)this + 65) + 416));
  uint64_t v3 = *((void *)this + 67);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re18AudioManager_PHASE22clearAllRenderingStateEv_block_invoke;
  block[3] = &unk_26E6DAE10;
  id v8 = v2;
  uint64_t v9 = this;
  long long v10 = v12;
  uint64_t v11 = v13;
  long long v7 = v5;
  id v4 = v2;
  dispatch_async(v3, block);
}

void ___ZN2re18AudioManager_PHASE22clearAllRenderingStateEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  re::AudioManager_PHASE_Async::swapPhaseContext(*(re::AudioManager_PHASE_Async **)(v2 + 520), *(REPHASEContext **)(a1 + 48));
  uint64_t v3 = (re *)objc_claimAutoreleasedReturnValue();
  id v4 = *re::audioLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] Clearing old phase context and resetting state on new context.", v9, 2u);
  }
  [(re *)v3 stopAllAndReset];
  re::AudioManager::setSceneReverbPreset((void *)v2, *(void *)(a1 + 80), *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  re::AudioManager_PHASE_Async::setSceneReverbPreset(*(void *)(v2 + 520), *(void *)(a1 + 64));
  simd_quatf v5 = *(simd_quatf *)(a1 + 32);
  re::AudioManager_PHASE_Async::setSpaceBlendTargetPresetOrientation(*(re::AudioManager_PHASE_Async **)(v2 + 520), v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 568));
  if (*(void *)(v2 + 600))
  {
    std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__deallocate_node(v2 + 576, *(void **)(v2 + 592));
    *(void *)(v2 + 59re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    uint64_t v6 = *(void *)(v2 + 584);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)(v2 + 576) + 8 * i) = 0;
    }
    *(void *)(v2 + 600) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 568));
  int v8 = atomic_load((unsigned int *)(v2 + 556));
  if (v8 >= 1 && *(void *)(*(void *)(v2 + 872) + 24)) {
    re::AudioManager_PHASE_Async::configureAndStartEngine(*(void *)(v2 + 520));
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear((void *)(v2 + 616));
  re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(*(void *)(v2 + 528), 4, 0, 0);
}

void sub_23358988C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::recoverSTS(re::AudioManager_PHASE *this)
{
  uint64_t v1 = *((void *)this + 67);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re18AudioManager_PHASE10recoverSTSEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = this;
  dispatch_async(v1, block);
}

void ___ZN2re18AudioManager_PHASE10recoverSTSEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(re::AudioManager **)(a1 + 32);
  re::AudioManager::configureSTS(v1);
  uint64_t v2 = *((void *)v1 + 66);
  re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(v2, 2, 0, 0);
}

void re::AudioManager_PHASE::startEngine(re::AudioManager_PHASE *this)
{
  if (!atomic_fetch_add((atomic_uint *volatile)this + 139, 1u)) {
    re::AudioManager_PHASE::configureAndStartEngine(this);
  }
}

uint64_t re::AudioManager_PHASE::getStartEngineCount(re::AudioManager_PHASE *this)
{
  return atomic_load((unsigned int *)this + 139);
}

uint64_t re::AudioManager_PHASE::updateEngine(re::AudioManager_PHASE *this)
{
  uint64_t v1 = *((void *)this + 65);
  uint64_t v2 = *(pthread_rwlock_t **)(v1 + 232);
  v1 += 232;
  pthread_rwlock_rdlock(v2);
  objc_msgSend(*(id *)(v1 + 16), "update", v1 + 16, v1);
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v1);
}

void sub_2335899D8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::getAudioEnginePHASE(re::AudioManager_PHASE *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  int v8 = __Block_byref_object_copy__4;
  uint64_t v9 = __Block_byref_object_dispose__4;
  id v10 = 0;
  uint64_t v1 = *((void *)this + 67);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___ZNK2re18AudioManager_PHASE19getAudioEnginePHASEEv_block_invoke;
  v4[3] = &unk_264BE3030;
  void v4[4] = &v5;
  void v4[5] = this;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void ___ZNK2re18AudioManager_PHASE19getAudioEnginePHASEEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = re::AudioManager_PHASE_Async::getAudioEnginePHASE(*(pthread_rwlock_t ***)(*(void *)(a1 + 40) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

__n128 re::AudioManager_PHASE::getPHASESourceTransformForToken(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  id v4 = *(pthread_rwlock_t **)(v3 + 232);
  v3 += 232;
  pthread_rwlock_rdlock(v4);
  uint64_t v5 = [*(id *)(v3 + 16) eventFor:a2];
  [v5 sourcePose];
  long long v8 = v6;

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
  return (__n128)v8;
}

void sub_233589BB8(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v2 - 24));
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::getAudioObjectPHASE(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v5 = *(pthread_rwlock_t **)(v3 + 232);
  uint64_t v4 = v3 + 232;
  pthread_rwlock_rdlock(v5);
  long long v6 = objc_msgSend(*(id *)(v4 + 16), "eventFor:", a2, v4 + 16, v4);
  uint64_t v7 = [v6 externalStreamController];

  if (v7) {
    [v6 externalStreamController];
  }
  else {
  id v8 = [v6 soundEvent];
  }

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v4);
  return v8;
}

void sub_233589C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::getPHASESourceForEntityID(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v4 = *(pthread_rwlock_t **)(v3 + 232);
  v3 += 232;
  pthread_rwlock_rdlock(v4);
  uint64_t v5 = objc_msgSend(*(id *)(v3 + 16), "sourceObjectForEntityID:", a2, v3 + 16, v3);
  pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
  return v5;
}

void sub_233589D38(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::getPHASEGroups(os_unfair_lock_s *this)
{
  id v2 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v3 = this + 142;
  os_unfair_lock_lock(this + 142);
  for (uint64_t i = this + 148; ; [v2 addObject:*(void *)&i[12]._os_unfair_lock_opaque])
  {
    uint64_t i = *(os_unfair_lock_s **)&i->_os_unfair_lock_opaque;
    if (!i) {
      break;
    }
  }
  os_unfair_lock_unlock(v3);
  return v2;
}

void sub_233589DC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::createSamplerDefinitionForToken(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = __Block_byref_object_copy__4;
  id v10 = __Block_byref_object_dispose__4;
  id v11 = 0;
  id v2 = *((void *)this + 67);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZNK2re18AudioManager_PHASE31createSamplerDefinitionForTokenEy_block_invoke;
  block[3] = &unk_264BE3058;
  void block[4] = &v6;
  void block[5] = this;
  block[6] = a2;
  dispatch_sync(v2, block);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void ___ZNK2re18AudioManager_PHASE31createSamplerDefinitionForTokenEy_block_invoke(void *a1)
{
  uint64_t v2 = re::AudioManager_PHASE_Async::createSamplerDefinitionForToken(*(pthread_rwlock_t ***)(a1[5] + 520), a1[6]);
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t re::AudioManager_PHASE::playbackStateForToken(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v4 = *(pthread_rwlock_t **)(v3 + 232);
  v3 += 232;
  pthread_rwlock_rdlock(v4);
  uint64_t v5 = objc_msgSend(*(id *)(v3 + 16), "eventFor:", a2, v3 + 16, v3);
  uint64_t v6 = [v5 state];

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
  return v6;
}

void sub_233589F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE::audioSessionForToken(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v4 = *(pthread_rwlock_t **)(v3 + 232);
  v3 += 232;
  pthread_rwlock_rdlock(v4);
  uint64_t v5 = objc_msgSend(*(id *)(v3 + 16), "eventFor:", a2, v3 + 16, v3);
  uint64_t v6 = [v5 audioSession];

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
  return v6;
}

void sub_23358A044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

BOOL re::AudioManager_PHASE::isReady(re::AudioManager_PHASE *this)
{
  unint64_t v1 = atomic_load((unint64_t *)(*((void *)this + 65) + 416));
  return v1 == 1;
}

_anonymous_namespace_ *re::AudioManager_PHASE::addAcousticMeshEvent(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = *((void *)result + 90);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = v4 + 1;
  unint64_t v6 = *(void *)(v3 + 8);
  if (v4 + 1 >= v6)
  {
    if (v6 < v5)
    {
      if (*(void *)v3)
      {
        unint64_t v7 = 2 * v6;
        if (!v6) {
          unint64_t v7 = 8;
        }
        if (v7 <= v5) {
          unint64_t v8 = v5;
        }
        else {
          unint64_t v8 = v7;
        }
        double result = (_anonymous_namespace_ *)re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>::setCapacity(*((void **)result + 90), v8);
        uint64_t v4 = *(void *)(v3 + 16);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>::setCapacity((void *)v3, v5);
        uint64_t v4 = 0;
        *(void *)(v3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *(void *)(v3 + 24) = 0;
        *(_DWORD *)(v3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      }
    }
    unint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v9 = *(void *)(v3 + 40) + 48 * ((*(void *)(v3 + 24) + v4) % v6);
  *(unsigned char *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 40) = -1;
  uint64_t v10 = *(unsigned int *)(a2 + 40);
  if (v10 != -1)
  {
    double result = (_anonymous_namespace_ *)((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6DB108[v10])(&v11, v9, a2);
    *(_DWORD *)(v9 + 40) = v10;
  }
  ++*(void *)(v3 + 16);
  ++*(_DWORD *)(v3 + 32);
  return result;
}

void sub_23358A19C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::beforeFrameUpdate(re::AudioManager_PHASE *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v2, 2500, (uint64_t)this);
  re::AudioManager::beforeFrameUpdate(this);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v2);
}

void re::AudioManager_PHASE::afterFrameUpdate(re::AudioManager_PHASE *this, float a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  ++*((void *)this + 70);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v4, 2502, (uint64_t)this);
  re::AudioManager::afterFrameUpdate(this, a2);
}

void sub_23358A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a27, 8);
  re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit(v39);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a39);
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__15(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  uint64_t v3 = a2[7];
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2[6];
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v3;
  a2[6] = 0;
  a2[7] = 0;
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = a2[8];
  a2[8] = v4;
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a2[11];
  a2[11] = v5;
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2[9];
  a2[9] = v6;
  return result;
}

double __Block_byref_object_dispose__16(uint64_t a1)
{
  return re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit((uint64_t *)(a1 + 48));
}

void ___ZN2re18AudioManager_PHASE16afterFrameUpdateEf_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v5, 2520, *(void *)(v2 + 520));
  uint64_t v3 = *(void *)(v2 + 520);
  int v4 = atomic_load((unsigned int *)(v2 + 556));
  re::AudioManager_PHASE_Async::afterFrameUpdate(v3, v4, *(void *)(*(void *)(a1 + 32) + 8) + 48, *(float *)(a1 + 56));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v5);
}

void sub_23358AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::unique_ptr<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>,std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  unsigned __int8 *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void ___ZN2re18AudioManager_PHASE16afterFrameUpdateEf_block_invoke_18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 2541, *(void *)(v2 + 520));
  re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(*(void *)(v2 + 520), *(void **)(a1 + 48));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

void sub_23358AA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_ea8_32c55_ZTSKZN2re18AudioManager_PHASE16afterFrameUpdateEfE3__0(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c55_ZTSKZN2re18AudioManager_PHASE16afterFrameUpdateEfE3__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t re::AudioManager_PHASE::fadeSourceToGain(pthread_rwlock_t ***this, const re::AudioSourceState *a2, float a3, double a4)
{
  return re::AudioManager_PHASE_Async::fadeSourceToGain(this[65], *((void *)a2 + 85), a3, a4);
}

float re::AudioManager_PHASE::currentGainForSource(re::AudioManager_PHASE *this, const re::AudioSourceState *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 65);
  uint64_t v5 = *(pthread_rwlock_t **)(v3 + 232);
  uint64_t v4 = v3 + 232;
  pthread_rwlock_rdlock(v5);
  id v6 = *(id *)(v4 + 16);
  unint64_t v7 = objc_msgSend(v6, "eventFor:", *((void *)a2 + 85), v4 + 16, v4);

  if (v7)
  {
    uint64_t v9 = [v7 paramForKey:@"gain"];
    uint64_t v10 = v9;
    if (v9)
    {
      char v11 = [v9 value];
      [v11 floatValue];
      float v13 = v12;
    }
    else
    {
      char v22 = (id)*re::audioLogObjects(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = (char *)*((void *)a2 + 85);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v27 = v24;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Could not find gain param for token %llu", buf, 0xCu);
      }

      uint64_t v10 = 0;
      float v13 = 0.0;
    }
  }
  else
  {
    uint64_t v10 = (id)*re::audioLogObjects(v8);
    float v13 = 0.0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v14 = re::AssetHandle::assetInfo((const re::AudioSourceState *)((char *)a2 + 32));
      if (v14[17]) {
        uint64_t v15 = (char *)v14[18];
      }
      else {
        uint64_t v15 = (char *)v14 + 137;
      }
      uint64_t v16 = *((void *)a2 + 85);
      uint64_t v17 = *((void *)a2 + 56);
      uint64_t v18 = *((void *)a2 + 62);
      uint64_t v19 = *((void *)a2 + 60);
      if (v19 && (uint64_t v20 = *(void *)(v19 + 16)) != 0) {
        uint64_t v21 = *(const char **)(v20 + 280);
      }
      else {
        uint64_t v21 = "";
      }
      uint64_t v25 = *((void *)a2 + 93);
      *(_DWORD *)long long buf = 136316418;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      uint64_t v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      __int16 v32 = 2048;
      uint64_t v33 = v18;
      __int16 v34 = 2080;
      unint64_t v35 = v21;
      __int16 v36 = 2048;
      uint64_t v37 = v25;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "AudioManager_PHASE::currentGainForSource(asset='%s', token=%llu, sceneID=%llu, entity(%llu, '%s'), sourceID=%llu) could not find sound event", buf, 0x3Eu);
    }
  }

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v4);
  return v13;
}

void sub_23358AD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v4;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

unint64_t *re::AudioManager_PHASE::createListenerInScene(re *a1, unint64_t a2, char a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v6 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    unint64_t v13 = a2;
    _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE::createListenerInScene(sceneID=%llu)", buf, 0xCu);
  }
  ListenerInScene = re::AudioManager::createListenerInScene((uint64_t)a1, a2);
  unint64_t v8 = *((void *)a1 + 67);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = ___ZN2re18AudioManager_PHASE21createListenerInSceneEy19REAudioListenerType_block_invoke;
  v10[3] = &__block_descriptor_57_e5_v8__0l;
  void v10[4] = a1;
  v10[5] = a2;
  v10[6] = ListenerInScene;
  char v11 = a3;
  dispatch_async(v8, v10);
  return ListenerInScene;
}

void ___ZN2re18AudioManager_PHASE21createListenerInSceneEy19REAudioListenerType_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 2504, v2);
  re::AudioManager_PHASE_Async::createListenerInScene(*(void *)(v2 + 520), *(void *)(a1 + 48), *(void *)(a1 + 40), *(unsigned char *)(a1 + 56));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

void sub_23358AEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::AudioManager_PHASE::removeListenerFromScene(re::AudioManager_PHASE *this, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
    {
      if (i[3] == a2) {
        i[3] = 0;
      }
    }
    uint64_t v3 = *((void *)this + 67);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN2re18AudioManager_PHASE23removeListenerFromSceneEy_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = this;
    dispatch_async(v3, block);
  }
}

uint64_t ___ZN2re18AudioManager_PHASE23removeListenerFromSceneEy_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::removeListenerFromScene(*(re::AudioManager_PHASE_Async **)(*(void *)(a1 + 32)
                                                                                                + 520));
}

uint64_t re::AudioManager_PHASE::setListenerTransformAndLevel(uint64_t this, uint64_t a2, const simd_float4x4 *a3, float a4, uint64_t a5)
{
  uint64_t v9 = this;
  uint64_t v10 = (uint64_t **)(this + 32);
  while (1)
  {
    uint64_t v10 = (uint64_t **)*v10;
    if (!v10) {
      break;
    }
    this = [v10[12] count];
    if (this) {
      goto LABEL_6;
    }
  }
  if (!*(void *)(v9 + 456)) {
    goto LABEL_9;
  }
LABEL_6:
  if (*(unsigned char *)(v9 + 56))
  {
    simd_float4 v11 = a3->columns[0];
    simd_float4 v17 = a3->columns[1];
    simd_float4 v12 = a3->columns[2];
    simd_float4 v18 = a3->columns[3];
    int v13 = *(unsigned __int8 *)(v9 + 208);
    *(void *)(v9 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a5;
    *(void *)(v9 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(simd_float4 *)(v9 + 144) = v11;
    *(simd_float4 *)(v9 + 160) = v17;
    *(simd_float4 *)(v9 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
    *(simd_float4 *)(v9 + 19re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v18;
    if (!v13) {
      *(unsigned char *)(v9 + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
    }
  }
LABEL_9:
  *(void *)(v9 + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  simd_float4 v14 = a3->columns[0];
  simd_float4 v15 = a3->columns[1];
  simd_float4 v16 = a3->columns[3];
  *(simd_float4 *)(v9 + 81re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a3->columns[2];
  *(simd_float4 *)(v9 + 83re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v16;
  *(simd_float4 *)(v9 + 784) = v14;
  *(simd_float4 *)(v9 + 800) = v15;
  *(float *)(v9 + 84re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a4;
  *(void *)(v9 + 85re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a5;
  return this;
}

__n128 re::AudioManager_PHASE::getListenerTransform(pthread_rwlock_t ***this)
{
  uint64_t v1 = re::AudioManager_PHASE_Async::getListener(this[65]);
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 transform];
    long long v5 = v3;
  }
  else
  {
    long long v5 = *MEMORY[0x263EF89A8];
  }

  return (__n128)v5;
}

void sub_23358B124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float re::AudioManager_PHASE::getListenerLevel(pthread_rwlock_t ***this)
{
  uint64_t v1 = re::AudioManager_PHASE_Async::getListener(this[65]);
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 gain];
    float v4 = v3;
  }
  else
  {
    float v4 = 0.0;
  }

  return v4;
}

void sub_23358B188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE::createSessionRootInScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 == -1) {
    return 0;
  }
  if (*(unsigned char *)(a3 + 8)) {
    uint64_t v6 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v6 = a3 + 9;
  }
  unint64_t v8 = [NSString stringWithUTF8String:v6];
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v8];
  if (v9)
  {
    *(void *)__long long buf = 0;
    do
    {
      arc4random_buf(__buf, 8uLL);
      uint64_t v7 = *(void *)__buf;
    }
    while (*(void *)__buf < 0x3E8uLL);
    uint64_t v10 = *(NSObject **)(a1 + 536);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    _OWORD v14[2] = ___ZN2re18AudioManager_PHASE24createSessionRootInSceneEyNS_13DynamicStringE_block_invoke;
    void v14[3] = &unk_264BE30C8;
    uint64_t v16 = a1;
    uint64_t v17 = a2;
    uint64_t v18 = *(void *)__buf;
    id v15 = v9;
    dispatch_async(v10, v14);
  }
  else
  {
    simd_float4 v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a3 + 8)) {
        uint64_t v13 = *(void *)(a3 + 16);
      }
      else {
        uint64_t v13 = a3 + 9;
      }
      *(_DWORD *)__long long buf = 136315138;
      *(void *)&__uint8_t buf[4] = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "invalid UUID string %s", __buf, 0xCu);
    }
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_23358B358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2re18AudioManager_PHASE24createSessionRootInSceneEyNS_13DynamicStringE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 2528, v2);
  re::AudioManager_PHASE_Async::createSessionRootInScene(*(pthread_rwlock_t ***)(v2 + 520), *(void *)(a1 + 56), *(void *)(a1 + 48), *(NSUUID **)(a1 + 32));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

void sub_23358B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::AudioManager_PHASE::removeSessionRootFromScene(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 67);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE26removeSessionRootFromSceneEy_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = this;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

re *___ZN2re18AudioManager_PHASE26removeSessionRootFromSceneEy_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::removeSessionRootFromScene(*(re **)(*(void *)(a1 + 32) + 520), *(void *)(a1 + 40));
}

uint64_t re::AudioManager_PHASE::setSessionRootTransform(pthread_rwlock_t ***this, uint64_t a2, const simd_float4x4 *a3)
{
  return re::AudioManager_PHASE_Async::setSessionRootTransform(this[65], a2, a3);
}

void re::AudioManager_PHASE::setSceneReverbPreset(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  re::AudioManager::setSceneReverbPreset((void *)a1, a2, a3, a4);
  if (*(void *)(a1 + 688) != a3 || *(unsigned __int8 *)(a1 + 696) != a4)
  {
    *(void *)(a1 + 68re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a3;
    *(unsigned char *)(a1 + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a4;
    uint64_t v7 = *(NSObject **)(a1 + 536);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN2re18AudioManager_PHASE20setSceneReverbPresetEyNS_12ReverbPresetEb_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    void block[4] = a1;
    void block[5] = a3;
    char v9 = a4;
    dispatch_async(v7, block);
  }
}

uint64_t ___ZN2re18AudioManager_PHASE20setSceneReverbPresetEyNS_12ReverbPresetEb_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::setSceneReverbPreset(*(void *)(*(void *)(a1 + 32) + 520), *(void *)(a1 + 40));
}

void re::AudioManager_PHASE::setSpaceBlendTargetPresetOrientation(float32x4_t *this, float32x4_t a2)
{
  if ((vminvq_u32((uint32x4_t)vceqq_f32(this[42], a2)) & 0x80000000) == 0)
  {
    uint64_t v2 = this[33].i64[1];
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = ___ZN2re18AudioManager_PHASE36setSpaceBlendTargetPresetOrientationE10simd_quatf_block_invoke;
    v3[3] = &__block_descriptor_56_e5_v8__0l;
    long long v5 = this;
    float32x4_t v4 = a2;
    dispatch_async(v2, v3);
  }
}

uint64_t ___ZN2re18AudioManager_PHASE36setSpaceBlendTargetPresetOrientationE10simd_quatf_block_invoke(simd_quatf *a1)
{
  simd_quatf v1 = a1[2];
  return re::AudioManager_PHASE_Async::setSpaceBlendTargetPresetOrientation(*(re::AudioManager_PHASE_Async **)(a1[3].vector.i64[0] + 520), v1);
}

uint64_t re::AudioManager_PHASE::loadAudio(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v7, *a2);
  v9[0] = a2;
  v9[1] = a3;
  void v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  void v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  unsigned char v9[8] = a1;
  if (v8 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v10 = v9;
  ((void (*)(void **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNKS6_18AudioManager_PHASE9loadAudioENS_10shared_ptrINS6_17AudioAssetPayloadEEENS_8functionIFvNSA_INS6_18PersistedAssetDataEEEEEEE3__0ZNKS9_9loadAudioESC_SH_E3__1ZNKS9_9loadAudioESC_SH_E3__2EEEEEJNS0_6__implIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEEEEDcOT_DpOT0____fmatrix[v8])(&v10, &v7);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v7);
}

void sub_23358B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::AudioManager_PHASE::loadExternalStreamController(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v6 = a3[1];
  long long v17 = *a3;
  long long v18 = v6;
  char v19 = *((unsigned char *)a3 + 32);
  if (v19) {
    re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)((char *)a3 + 40));
  }
  unsigned __int8 v22 = *((unsigned char *)a3 + 72);
  int v7 = v22;
  if (v22) {
    int v23 = *((_DWORD *)a3 + 19);
  }
  char v24 = *((unsigned char *)a3 + 80);
  int v8 = *(NSObject **)(a1 + 536);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re18AudioManager_PHASE28loadExternalStreamControllerEyRKNS_27AudioFileAssetConfigurationE_block_invoke;
  block[3] = &__block_descriptor_136_ea8_48c38_ZTSN2re27AudioFileAssetConfigurationE_e5_v8__0l;
  void block[4] = a1;
  void block[5] = a2;
  long long v10 = v17;
  long long v11 = v18;
  char v12 = v19;
  if (v19)
  {
    re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)&v20);
    int v7 = v22;
  }
  char v14 = v7;
  if (v7) {
    int v15 = v23;
  }
  char v16 = v24;
  dispatch_async(v8, block);
  if (v12 && v13[0])
  {
    if (v13[1]) {
      (*(void (**)(void))(*(void *)v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  if (v19 && v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
}

uint64_t ___ZN2re18AudioManager_PHASE28loadExternalStreamControllerEyRKNS_27AudioFileAssetConfigurationE_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::loadExternalStreamController(*(void *)(*(void *)(a1 + 32) + 520), *(void *)(a1 + 40), a1 + 48);
}

re::DynamicString *__copy_helper_block_ea8_48c38_ZTSN2re27AudioFileAssetConfigurationE(re::DynamicString *result, uint64_t a2)
{
  double v3 = result;
  long long v4 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)result + 4) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 80);
  *((unsigned char *)result + 80) = v5;
  if (v5) {
    double result = re::DynamicString::DynamicString((re::DynamicString *)((char *)result + 88), (const re::DynamicString *)(a2 + 88));
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *((unsigned char *)v3 + 120) = v6;
  if (v6) {
    *((_DWORD *)v3 + 31) = *(_DWORD *)(a2 + 124);
  }
  *((unsigned char *)v3 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(unsigned char *)(a2 + 128);
  return result;
}

double __destroy_helper_block_ea8_48c38_ZTSN2re27AudioFileAssetConfigurationE(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  return result;
}

uint64_t re::AudioManager_PHASE::getConfigurationForExternalStreamController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  double v3 = *(NSObject **)(a1 + 536);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  char v6[2] = ___ZN2re18AudioManager_PHASE43getConfigurationForExternalStreamControllerEyRNS_27AudioFileAssetConfigurationE_block_invoke;
  v6[3] = &unk_264BE30F0;
  void v6[4] = &v7;
  _OWORD v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN2re18AudioManager_PHASE43getConfigurationForExternalStreamControllerEyRNS_27AudioFileAssetConfigurationE_block_invoke(void *a1)
{
  uint64_t result = re::AudioManager_PHASE_Async::getConfigurationForExternalStreamController(*(void *)(a1[5] + 520), a1[6], a1[7]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void re::AudioManager_PHASE::setSpatialSceneClassification(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 536);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE29setSpatialSceneClassificationENS_30SpatialSceneClassificationTypeE_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void ___ZN2re18AudioManager_PHASE29setSpatialSceneClassificationENS_30SpatialSceneClassificationTypeE_block_invoke(uint64_t a1)
{
}

void re::AudioManager_PHASE::setSpatialSceneRoomIdentifier(re::AudioManager_PHASE *this, unsigned __int8 *a2)
{
  double v3 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a2];
  char v4 = *((void *)this + 67);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  char v6[2] = ___ZN2re18AudioManager_PHASE29setSpatialSceneRoomIdentifierEPh_block_invoke;
  v6[3] = &unk_264BE2C48;
  id v7 = v3;
  int v8 = this;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void ___ZN2re18AudioManager_PHASE29setSpatialSceneRoomIdentifierEPh_block_invoke(uint64_t a1)
{
}

uint64_t re::AudioManager_PHASE::getSpatialSceneClassification(re::AudioManager_PHASE_Async **this)
{
  return re::AudioManager_PHASE_Async::getSpatialSceneClassification(this[65]);
}

void *re::AudioManager_PHASE::updateExternalSpatialSourcePhase(id **this, simd_float4x4 *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  re::AudioManager_PHASE::updateSourceStateInternal((re::AudioManager_PHASE *)this, a2);
  unint64_t v25 = a2[10].columns[2].u64[1];
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(this + 77, &v25);
  if (!result)
  {
    id v5 = this[65];
    id v7 = (pthread_rwlock_t *)v5[29];
    int v6 = v5 + 29;
    int v23 = v6 + 2;
    char v24 = v6;
    pthread_rwlock_rdlock(v7);
    int v8 = [v6[2] eventFor:v25];
    if (!v8)
    {
      uint64_t v9 = (id)*re::audioLogObjects(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = a2[10].columns[2].i64[1];
        uint64_t v18 = a2[7].columns[0].i64[0];
        uint64_t v19 = a2[7].columns[3].i64[0];
        uint64_t v20 = a2[7].columns[2].i64[0];
        if (v20 && (uint64_t v21 = *(void *)(v20 + 16)) != 0) {
          unsigned __int8 v22 = *(const char **)(v21 + 280);
        }
        else {
          unsigned __int8 v22 = "";
        }
        int buf = 134218754;
        *(void *)buf_4 = v17;
        __int16 v28 = 2048;
        uint64_t v29 = v18;
        __int16 v30 = 2048;
        uint64_t v31 = v19;
        __int16 v32 = 2080;
        uint64_t v33 = v22;
        _os_log_debug_impl(&dword_233120000, v9, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE::updateExternalSpatialSourcePhase(token=%llu, sceneID=%llu, entity(%llu, '%s'))", (uint8_t *)&buf, 0x2Au);
      }

      id v10 = *this[39];
      long long v11 = this[1];
      if (v11)
      {
        char v12 = v11;
      }
      else
      {
        char v12 = (id *)MEMORY[0x263EF83A0];
        id v13 = MEMORY[0x263EF83A0];
      }
      re::AudioSourceState::playbackHostConnectionIdentifier((re::AudioSourceState *)a2);
      char v14 = re::AudioSourceSyncState::externalStreamUUID((re::AudioSourceSyncState *)&a2->columns[1].u32[2]);
      int v15 = (re::audio::REPHASESoundPrepareState *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(this + 77), &v25, &v25);
      if (a2[7].columns[3].i64[0]) {
        re::audio::REPHASESoundPrepareState::create(v15);
      }
      char v16 = *re::audioLogObjects(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "updateExternalSpatialSourcePhase failed because sourceState has no entityID", (uint8_t *)&buf, 2u);
      }
    }
    return (void *)pthread_rwlock_unlock((pthread_rwlock_t *)*v6);
  }
  return result;
}

void sub_23358BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,pthread_rwlock_t **a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v30);
  }

  if (a26) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a26);
  }

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE::updateSourceStateInternal(re::AudioManager_PHASE *this, simd_float4x4 *a2)
{
  uint64_t v2 = a2[7].columns[0].i64[0];
  if (v2 != -1)
  {
    uint64_t v5 = a2[10].columns[2].i64[1];
    if (a2[11].columns[2].i64[1] != v5) {
      a2[11].columns[2].i64[1] = v5;
    }
    int v6 = (os_unfair_lock_s *)*((void *)this + 65);
    unint64_t v7 = re::AudioSourceState::playbackHostConnectionIdentifier((re::AudioSourceState *)a2);
    BOOL isPlaybackHostConnectionIdentifierSensitive = re::AudioManager_PHASE_Async::isPlaybackHostConnectionIdentifierSensitive(v6, v7);
    re::AudioManager_PHASE_Async::setTransformForEntity(*((re::AudioManager_PHASE_Async **)this + 65), v2, a2[7].columns[3].u64[0], a2[5], a2[6], isPlaybackHostConnectionIdentifierSensitive);
    uint64_t v9 = *((void *)this + 67);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN2re18AudioManager_PHASE25updateSourceStateInternalERKNS_16AudioSourceStateE_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    void block[4] = this;
    void block[5] = v5;
    void block[6] = a2;
    dispatch_async(v9, block);
  }
}

id re::AudioSourceSyncState::externalStreamUUID(re::AudioSourceSyncState *this)
{
  _DWORD v4[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 27);
  if (*((_OWORD *)this + 13) == 0)
  {
    uint64_t v2 = 0;
  }
  else
  {
    v4[0] = *((void *)this + 26);
    v4[1] = v1;
    uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v4];
  }
  return v2;
}

void ___ZN2re18AudioManager_PHASE32updateExternalSpatialSourcePhaseERKNS_16AudioSourceStateE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re18AudioManager_PHASE32updateExternalSpatialSourcePhaseERKNS_16AudioSourceStateE_block_invoke_2;
  block[3] = &unk_264BE31B0;
  uint64_t v18 = v4;
  uint64_t v5 = *(NSObject **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 64);
  id v17 = v6;
  uint64_t v19 = v7;
  dispatch_async(v5, block);
  uint64_t v9 = *re::audioLogObjects(v8);
  if (v3)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = *(void *)(a1 + 72);
      *(_DWORD *)int buf = 138413058;
      uint64_t v21 = v10;
      __int16 v22 = 2048;
      uint64_t v23 = v11;
      __int16 v24 = 2048;
      uint64_t v25 = v12;
      __int16 v26 = 2112;
      id v27 = v3;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Could not prepare external stream UUID %@ for source state token %llu from connection %llu: %@", buf, 0x2Au);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 72);
    *(_DWORD *)int buf = 138412802;
    uint64_t v21 = v13;
    __int16 v22 = 2048;
    uint64_t v23 = v14;
    __int16 v24 = 2048;
    uint64_t v25 = v15;
    _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Prepared and started external stream UUID %@ for source state token %llu from connection %llu", buf, 0x20u);
  }
}

void ___ZN2re18AudioManager_PHASE32updateExternalSpatialSourcePhaseERKNS_16AudioSourceStateE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v3)
  {
    uint64_t v4 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Engine cancelled, preparation completion", v5, 2u);
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__erase_unique<unsigned long long>((void *)(v2 + 616), (unint64_t *)(a1 + 48));
  }
}

void re::AudioManager_PHASE::prepareSource(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v6 = a4;
  BOOL isSourcePrepared = re::AudioManager_PHASE::isSourcePrepared((re::AudioManager_PHASE *)a1, (const re::AudioSourceState *)a2);
  BOOL v8 = isSourcePrepared;
  uint64_t v9 = (re::AssetHandle *)(a2 + 4);
  uint64_t v10 = (id)*re::audioLogObjects((re *)isSourcePrepared);
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a2[85];
      uint64_t v13 = a2[56];
      uint64_t v14 = a2[62];
      uint64_t v15 = a2[60];
      if (v15 && (uint64_t v16 = *(void *)(v15 + 16)) != 0) {
        id v17 = *(const char **)(v16 + 280);
      }
      else {
        id v17 = "";
      }
      __int16 v30 = re::AssetHandle::assetInfo(v9);
      if (v30[17]) {
        uint64_t v31 = (char *)v30[18];
      }
      else {
        uint64_t v31 = (char *)v30 + 137;
      }
      buf[0] = 134219010;
      *(void *)&buf[1] = v12;
      __int16 v39 = 2048;
      uint64_t v40 = v13;
      __int16 v41 = 2048;
      uint64_t v42 = v14;
      __int16 v43 = 2080;
      uint64_t v44 = v17;
      __int16 v45 = 2080;
      int32x4_t v46 = v31;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE::prepareSource(token=%llu, sceneID=%llu, entity(%llu, '%s')), Asset = '%s' redundant prepare calls", (uint8_t *)buf, 0x34u);
    }

    if (v6) {
      v6[2](v6, 0);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = a2[85];
      uint64_t v34 = a2[56];
      uint64_t v35 = a2[62];
      __int16 v36 = re::AssetHandle::assetInfo((re::AssetHandle *)(a2 + 4));
      if (v36[17]) {
        uint64_t v37 = (const char *)v36[18];
      }
      else {
        uint64_t v37 = (char *)v36 + 137;
      }
      buf[0] = 134218754;
      *(void *)&buf[1] = v33;
      __int16 v39 = 2048;
      uint64_t v40 = v34;
      __int16 v41 = 2048;
      uint64_t v42 = v35;
      __int16 v43 = 2080;
      uint64_t v44 = v37;
      _os_log_debug_impl(&dword_233120000, v11, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE::prepareSource(token=%llu, sceneID=%llu, entityID=%llu), Asset = '%s'", (uint8_t *)buf, 0x2Au);
    }

    uint64_t v19 = a2[5];
    if (v19)
    {
      unsigned int v20 = atomic_load((unsigned int *)(v19 + 704));
      if (v20 == 2)
      {
        re::AudioManager_PHASE::updateSourceStateInternal((re::AudioManager_PHASE *)a1, (simd_float4x4 *)a2);
        uint64_t v21 = **(id **)(a1 + 312);
        __int16 v22 = (re::audio::REPHASESoundPrepareState *)*(id *)(a1 + 8);
        uint64_t v23 = v22;
        if (a2[62]) {
          re::audio::REPHASESoundPrepareState::create(v22);
        }
        __int16 v32 = *re::audioLogObjects(v22);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "AudioManager_PHASE::prepareSource failed because sourceState has no entityID", (uint8_t *)buf, 2u);
        }
      }
      else
      {
        uint64_t v21 = (id)*re::audioLogObjects(v18);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          __int16 v24 = re::AssetHandle::assetInfo((re::AssetHandle *)(a2 + 4));
          uint64_t v26 = v24[17];
          uint64_t v25 = (char *)v24[18];
          uint64_t v27 = a2[85];
          uint64_t v28 = re::AudioSourceState::playbackHostConnectionIdentifier((re::AudioSourceState *)a2);
          uint64_t v29 = (char *)v24 + 137;
          buf[0] = 136315650;
          if (v26) {
            uint64_t v29 = v25;
          }
          *(void *)&buf[1] = v29;
          __int16 v39 = 2048;
          uint64_t v40 = v27;
          __int16 v41 = 2048;
          uint64_t v42 = v28;
          _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "AudioManager_PHASE::prepareSource cannot prepare asset that is not loaded. Asset='%s', token=%llu, connection=%llu", (uint8_t *)buf, 0x20u);
        }
      }
    }
  }
}

void sub_23358D1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44)
{
  std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::~__value_func[abi:nn180100]((void *)(v46 - 240));
  re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0::~$_0((uint64_t)&a15);

  int32x4_t v48 = *(std::__shared_weak_count **)(v46 - 248);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v48);
  }

  _Unwind_Resume(a1);
}

BOOL re::AudioManager_PHASE::isSourcePrepared(re::AudioManager_PHASE *this, const re::AudioSourceState *a2)
{
  re::AudioGeneratorAsset::assetType(this);
  if (*((void *)a2 + 5))
  {
    if (*((void *)a2 + 87))
    {
LABEL_3:
      uint64_t v4 = *((void *)this + 65);
      uint64_t v5 = *(pthread_rwlock_t **)(v4 + 232);
      v4 += 232;
      pthread_rwlock_rdlock(v5);
      id v6 = *(id *)(v4 + 16);
      uint64_t v7 = objc_msgSend(v6, "eventFor:", *((void *)a2 + 85), v4 + 16, v4);

      pthread_rwlock_unlock(*(pthread_rwlock_t **)v4);
      return v7 != 0;
    }
  }
  else
  {
    if (*((void *)a2 + 29)) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = *((void *)a2 + 30) == 0;
    }
    if (!v9 || *((void *)a2 + 87) != 0) {
      goto LABEL_3;
    }
  }
  return 0;
}

void sub_23358D428(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN2re18AudioManager_PHASE13prepareSourceERNS_16AudioSourceStateE6CMTimeU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = *re::audioLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)int buf = 134217984;
    uint64_t v12 = v6;
    _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Prepare completed for %llu", buf, 0xCu);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = ___ZN2re18AudioManager_PHASE13prepareSourceERNS_16AudioSourceStateE6CMTimeU13block_pointerFvP7NSErrorE_block_invoke_31;
      block[3] = &unk_264BE3140;
      id v8 = *(id *)(a1 + 40);
      id v10 = *(id *)(a1 + 48);
      BOOL v9 = v3;
      dispatch_async(v5, block);
    }
  }
}

void ___ZN2re18AudioManager_PHASE13prepareSourceERNS_16AudioSourceStateE6CMTimeU13block_pointerFvP7NSErrorE_block_invoke_31(uint64_t a1)
{
  uint64_t v2 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v2)
  {
    id v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Engine cancelled, preparation completion", v5, 2u);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
}

unsigned __int8 *re::AudioManager_PHASE::mixGroupStateFor(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  REAudioComputePHASEMixGroupID(a2, a3, a4, &v28);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 75), (uint64_t)&v28);
  int8x8_t v6 = (int8x8_t)a1[73];
  if (v6)
  {
    unint64_t v7 = v5;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v5 >= *(void *)&v6) {
        unint64_t v10 = v5 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v6 - 1) & v5;
    }
    uint64_t v11 = *(unsigned __int8 ***)(a1[72] + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 76), i + 16, (unsigned __int8 *)&v28))goto LABEL_30; {
        }
          }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= *(void *)&v6) {
              v13 %= *(void *)&v6;
            }
          }
          else
          {
            v13 &= *(void *)&v6 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  id v14 = objc_alloc(MEMORY[0x263F14948]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v28;
  }
  else {
    uint64_t v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  uint64_t v16 = [NSString stringWithUTF8String:v15];
  id v17 = (void *)[v14 initWithIdentifier:v16];

  *(void *)int buf = &v28;
  uint64_t i = std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 72), (unsigned __int8 *)&v28, (long long **)buf);
  objc_storeStrong((id *)i + 6, v17);
  uint64_t v19 = *re::audioLogObjects(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    unsigned int v20 = &v28;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v20;
    _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Will register PHASEGroup in the phase queue. PhaseID: %s (sceneID - connectionID - name).", buf, 0xCu);
  }
  uint64_t v21 = a1[67];
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3321888768;
  uint64_t v24[2] = ___ZN2re18AudioManager_PHASE16mixGroupStateForEyyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v24[3] = &unk_26E6DAEA8;
  uint64_t v26 = a1;
  id v22 = v17;
  id v25 = v22;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v28;
  }
  dispatch_async(v21, v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

LABEL_30:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return i + 40;
}

void sub_23358D920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(uint64_t a1, char *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    MEMORY[0x237DBC5F0](a1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>(re::AudioFileGroupAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::AudioFileGroupAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::DynamicArray<re::AssetHandle>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>(re::AudioGeneratorAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::AudioGeneratorAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t std::function<void ()(AUAudioUnit *,NSError *)>::function<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v4 = &unk_26E6DB298;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *((void *)v4 + 9) = v7;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  return a1;
}

uint64_t re::AudioManager_PHASE::scheduleSourceState(re::AudioManager_PHASE *this, const re::AudioSourceState *a2, int a3, double a4, uint64_t a5, CMTime *a6)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((void *)this + 65);
  unint64_t v13 = *(pthread_rwlock_t **)(v11 + 232);
  uint64_t v12 = v11 + 232;
  uint64_t v38 = v12 + 16;
  uint64_t v39 = v12;
  pthread_rwlock_rdlock(v13);
  id v14 = *(id *)(v12 + 16);
  uint64_t v15 = [v14 eventFor:*((void *)a2 + 85)];

  id v17 = (id)*re::audioLogObjects(v16);
  uint64_t v18 = v17;
  if (v15)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      CMTimeValue v21 = *((void *)a2 + 85);
      CMTime v37 = *a6;
      Float64 Seconds = CMTimeGetSeconds(&v37);
      LODWORD(v40.value) = 134219008;
      *(CMTimeValue *)((char *)&v40.value + 4) = v21;
      LOWORD(v40.flags) = 2048;
      *(void *)((char *)&v40.flags + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a5;
      HIWORD(v40.epoch) = 2048;
      Float64 v41 = Seconds;
      __int16 v42 = 1024;
      *(_DWORD *)__int16 v43 = a3;
      *(_WORD *)&v43[4] = 2048;
      *(double *)&v43[6] = a4;
      _os_log_debug_impl(&dword_233120000, v18, OS_LOG_TYPE_DEBUG, "scheduling token %llu at time %llu with offset %0.3f, shouldSeek=%d, rate=%0.2f", (uint8_t *)&v40, 0x30u);
    }

    if (a3)
    {
      if (a6->flags)
      {
        CMTime time = *a6;
        [v15 seekToTime:CMTimeGetSeconds(&time)];
      }
      else
      {
        memset(&v40, 0, sizeof(v40));
        HostTimeClocuint64_t k = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, HostTimeClock);
        CMClockMakeHostTimeFromSystemUnits(&rhs, a5);
        CMTimeSubtract(&v40, &lhs, &rhs);
        CMTime v33 = v40;
        [v15 seekToTime:CMTimeGetSeconds(&v33)];
      }
    }
    if (a4 == 0.0)
    {
      [v15 pause];
    }
    else
    {
      if (re::internal::enableSignposts(0, 0)) {
        kdebug_trace();
      }
      [v15 resume];
    }
  }
  else
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = re::AssetHandle::assetInfo((const re::AudioSourceState *)((char *)a2 + 32));
      if (v23[17]) {
        CMTimeValue v24 = v23[18];
      }
      else {
        CMTimeValue v24 = (CMTimeValue)v23 + 137;
      }
      uint64_t v25 = *((void *)a2 + 85);
      uint64_t v26 = re::AudioSourceState::playbackHostConnectionIdentifier(a2);
      uint64_t v27 = *((void *)a2 + 56);
      uint64_t v28 = *((void *)a2 + 62);
      uint64_t v29 = *((void *)a2 + 60);
      if (v29 && (uint64_t v30 = *(void *)(v29 + 16)) != 0) {
        uint64_t v31 = *(const char **)(v30 + 280);
      }
      else {
        uint64_t v31 = "";
      }
      uint64_t v32 = *((void *)a2 + 93);
      LODWORD(v40.value) = 136316674;
      *(CMTimeValue *)((char *)&v40.value + 4) = v24;
      LOWORD(v40.flags) = 2048;
      *(void *)((char *)&v40.flags + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v25;
      HIWORD(v40.epoch) = 2048;
      Float64 v41 = *(double *)&v26;
      __int16 v42 = 2048;
      *(void *)__int16 v43 = v27;
      *(_WORD *)&v43[8] = 2048;
      *(void *)&v43[10] = v28;
      __int16 v44 = 2080;
      __int16 v45 = v31;
      __int16 v46 = 2048;
      uint64_t v47 = v32;
      _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "AudioManager_PHASE::scheduleSourceState(asset=\"%s\", token=%llu, connection=%llu, sceneID=%llu, entity(%llu, '%s'), sourceID=%llu) could not find sound event", (uint8_t *)&v40, 0x48u);
    }
  }
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v12);
}

void sub_23358DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,pthread_rwlock_t **a28)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE::isPreparingSoundEvent(re::AudioManager_PHASE *this, const re::AudioSourceState *a2)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v4 = *(pthread_rwlock_t **)(v3 + 232);
  v3 += 232;
  pthread_rwlock_rdlock(v4);
  id v5 = *(id *)(v3 + 16);
  uint64_t v6 = objc_msgSend(v5, "eventBeingPrepared:", *((void *)a2 + 85), v3 + 16, v3);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
  return v6;
}

void sub_23358E048(_Unwind_Exception *a1)
{
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE::prepareMeshAsset(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  id v9 = a2;
  uint64_t v10 = *(void *)(a1 + 520);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v15, a3);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v14, a4);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v13, a5);
  uint64_t v11 = re::AudioManager_PHASE_Async::prepareMeshAsset(v10, v9, v15, v14, v13);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v13);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)v14);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)v15);

  return v11;
}

void sub_23358E11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)va1);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE::prepareMeshAsset(uint64_t a1, void *a2, uint64_t a3)
{
  return re::AudioManager_PHASE_Async::prepareMeshAsset(*(void *)(a1 + 520), a2, a3);
}

void re::AudioManager_PHASE::removeMeshAsset(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 67);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE15removeMeshAssetEy_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  void v3[4] = this;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t ___ZN2re18AudioManager_PHASE15removeMeshAssetEy_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::removeMeshAsset(*(pthread_rwlock_t ***)(*(void *)(a1 + 32) + 520), *(void *)(a1 + 40));
}

void re::AudioManager_PHASE::setMeshesForEntity(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
}

uint64_t re::AudioManager_PHASE::setTransformForEntity(re::AudioManager_PHASE_Async **this, uint64_t a2, unint64_t a3, simd_float4x4 a4, simd_float4x4 a5, int a6)
{
  return re::AudioManager_PHASE_Async::setTransformForEntity(this[65], a2, a3, a4, a5, a6);
}

void re::AudioManager_PHASE::unloadAsset(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 67);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  void v3[4] = this;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::unloadAsset(*(re::AudioManager_PHASE_Async **)(*(void *)(a1 + 32) + 520), *(void *)(a1 + 40));
}

id re::AudioManager_PHASE::getPHASEAssetForIdentifier(re::AudioManager_PHASE *this, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = __Block_byref_object_copy__4;
  uint64_t v10 = __Block_byref_object_dispose__4;
  id v11 = 0;
  uint64_t v2 = *((void *)this + 67);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZNK2re18AudioManager_PHASE26getPHASEAssetForIdentifierEy_block_invoke;
  block[3] = &unk_264BE3058;
  void block[4] = &v6;
  void block[5] = this;
  void block[6] = a2;
  dispatch_sync(v2, block);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void ___ZNK2re18AudioManager_PHASE26getPHASEAssetForIdentifierEy_block_invoke(void *a1)
{
  uint64_t v2 = re::AudioManager_PHASE_Async::getPHASEAssetForIdentifier(*(pthread_rwlock_t ***)(a1[5] + 520), a1[6]);
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t re::AudioManager_PHASE::removeSourceFromSceneIfIncorrectlyConnected(re::AudioManager_PHASE *this, const re::AudioSourceState *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::AudioManager::removeSourceFromSceneIfIncorrectlyConnected(this, a2);
  uint64_t v5 = *((void *)this + 65);
  uint64_t v7 = *(pthread_rwlock_t **)(v5 + 232);
  uint64_t v6 = v5 + 232;
  pthread_rwlock_rdlock(v7);
  id v8 = *(id *)(v6 + 16);
  int v9 = objc_msgSend(v8, "doCleanUpSoundEventForToken:ifNotInScene:", *((void *)a2 + 85), *((void *)a2 + 56), v6 + 16, v6);

  if (v9)
  {
    id v11 = (id)*re::audioLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *((void *)a2 + 85);
      *(_DWORD *)int buf = 134218240;
      uint64_t v15 = v12;
      __int16 v16 = 2048;
      uint64_t v17 = re::AudioSourceState::playbackHostConnectionIdentifier(a2);
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Playback] Stopped sound with token: %llu from connection %llu", buf, 0x16u);
    }

    *((void *)a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    *((_DWORD *)a2 + 181) = 0;
    uint64_t v4 = 1;
  }
  pthread_rwlock_unlock(*(pthread_rwlock_t **)v6);
  return v4;
}

void sub_23358E4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2re18AudioManager_PHASE25updateSourceStateInternalERKNS_16AudioSourceStateE_block_invoke(void *a1)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1[4] + 520);
  uint64_t v4 = *(pthread_rwlock_t **)(v2 + 232);
  uint64_t v3 = v2 + 232;
  uint64_t v111 = v3 + 16;
  uint64_t v112 = v3;
  pthread_rwlock_rdlock(v4);
  uint64_t v5 = [*(id *)(v3 + 16) eventFor:a1[5]];
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_53;
  }
  uint64_t v7 = [v5 soundEvent];
  if (v7)
  {

LABEL_5:
    uint64_t v9 = a1[6];
    int8x16_t v10 = *(int8x16_t *)(v9 + 320);
    int8x16_t v11 = *(int8x16_t *)(v9 + 336);
    long long v12 = *(_OWORD *)(v9 + 352);
    LODWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = HIDWORD(*(void *)(v9 + 336));
    float v14 = COERCE_FLOAT(*(void *)(v9 + 360));
    float v15 = v14 + (float)(*(float *)v10.i32 + v13);
    if (v15 >= 0.0)
    {
      float v26 = sqrtf(v15 + 1.0);
      float32_t v27 = v26 + v26;
      float32x2_t v28 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v26 + v26));
      float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v26 + v26), v28));
      v29.i32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v26 + v26), v29)).u32[0];
      *(float32x2_t *)v40.f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), *(int32x2_t *)&v12), (float32x2_t)vext_s8(*(int8x8_t *)&v12, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), 4uLL)), v29.f32[0]);
      v30.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v11.i8).u32[0];
      v30.f32[1] = v27;
      v29.i32[1] = 0.25;
      float32x2_t v42 = vmul_f32(v30, v29);
    }
    else if (*(float *)v10.i32 < v13 || *(float *)v10.i32 < v14)
    {
      float v17 = 1.0 - *(float *)v10.i32;
      if (v13 >= v14)
      {
        float v43 = sqrtf(v13 + (float)(v17 - v14));
        *(float *)&unsigned int v44 = v43 + v43;
        float32x2_t v45 = vrecpe_f32((float32x2_t)v44);
        float32x2_t v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
        v47.i32[0] = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).u32[0];
        v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v11.i8).u32[0];
        v46.i32[1] = v44;
        float32x2_t v48 = (float32x2_t)vrev64_s32(*(int32x2_t *)&v12);
        v49.i32[0] = vadd_f32(v48, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).u32[0];
        v49.i32[1] = vsub_f32(v48, (float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v10, 2)).i32[1];
        float32x2_t v42 = vmul_n_f32(v49, v47.f32[0]);
        v47.i32[1] = 0.25;
        *(float32x2_t *)v40.f32 = vmul_f32(v46, v47);
      }
      else
      {
        float v18 = sqrtf(v14 + (float)(v17 - v13));
        long long v19 = *(_OWORD *)(v9 + 320);
        *(float *)&long long v19 = v18;
        float32x2_t v20 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), *(float32x2_t *)&v12);
        float32x2_t v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 0);
        float32x2_t v22 = vsub_f32(*(float32x2_t *)v10.i8, v21);
        v21.i32[0] = 2.0;
        v21.i32[0] = vmul_f32(*(float32x2_t *)&v19, v21).u32[0];
        v21.i32[1] = v22.i32[1];
        float32x2_t v23 = vrecpe_f32((float32x2_t)v21.u32[0]);
        float32x2_t v24 = vmul_f32(v23, vrecps_f32((float32x2_t)v21.u32[0], v23));
        v22.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)v21.u32[0], v24)).u32[0];
        *(float32x2_t *)v40.f32 = vmul_n_f32(v20, v22.f32[0]);
        __asm { FMOV            V2.2S, #0.25 }
        _D2.i32[1] = v22.i32[0];
        float32x2_t v42 = vmul_f32(v21, _D2);
      }
    }
    else
    {
      float32x2_t v31 = (float32x2_t)__PAIR64__(v10.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v10.i32 + (float)((float)(1.0 - v13) - v14))));
      float32x2_t v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 0);
      float32x2_t v33 = vadd_f32(*(float32x2_t *)v10.i8, v32);
      v32.i32[0] = 2.0;
      v32.i32[0] = vmul_f32(v31, v32).u32[0];
      v32.i32[1] = v33.i32[1];
      float32x2_t v34 = vrecpe_f32((float32x2_t)v32.u32[0]);
      float32x2_t v35 = vmul_f32(v34, vrecps_f32((float32x2_t)v32.u32[0], v34));
      v31.i32[0] = vmul_f32(v35, vrecps_f32((float32x2_t)v32.u32[0], v35)).u32[0];
      __asm { FMOV            V5.2S, #0.25 }
      _D5.i32[1] = v31.i32[0];
      *(float32x2_t *)v40.f32 = vmul_f32(v32, _D5);
      v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), *(float32x2_t *)&v12).u32[0];
      v41.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v11, 2), *(float32x2_t *)&v12).i32[1];
      float32x2_t v42 = vmul_n_f32(v41, v31.f32[0]);
    }
    float32x2_t v50 = vadd_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), vmul_f32(v42, v42));
    if (vaddv_f32(v50) == 0.0)
    {
      float32x4_t v51 = (float32x4_t)xmmword_23435FBB0;
    }
    else
    {
      *(float32x2_t *)&v40.u32[2] = v42;
      unsigned __int32 v52 = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
      float32x2_t v53 = vrsqrte_f32((float32x2_t)v52);
      float32x2_t v54 = vmul_f32(v53, vrsqrts_f32((float32x2_t)v52, vmul_f32(v53, v53)));
      float32x4_t v51 = vmulq_n_f32(v40, vmul_f32(v54, vrsqrts_f32((float32x2_t)v52, vmul_f32(v54, v54))).f32[0]);
    }
    int32x4_t v55 = objc_msgSend(v6, "soundEvent", *(_OWORD *)&v51);

    if (v55) {
      [v6 soundEvent];
    }
    else {
    int32x4_t v56 = [v6 externalStreamController];
    }
    int32x4_t v57 = [v56 mixers];

    v109[0] = MEMORY[0x263EF8330];
    v109[1] = 3221225472;
    v109[2] = ___ZN2re18AudioManager_PHASE25updateSourceStateInternalERKNS_16AudioSourceStateE_block_invoke_2;
    v109[3] = &__block_descriptor_48_e15_v32__0_8_16_B24l;
    long long v110 = v108;
    [v57 enumerateKeysAndObjectsUsingBlock:v109];

    goto LABEL_22;
  }
  id v8 = [v6 externalStreamController];

  if (v8) {
    goto LABEL_5;
  }
LABEL_22:
  float v58 = *(float *)(a1[6] + 64);
  [v6 cachedPlaybackSpeed];
  if (v58 != v59)
  {
    float32x4_t v60 = [v6 paramForKey:@"rate"];
    if (v60)
    {
      LODWORD(v61) = *(_DWORD *)(a1[6] + 64);
      long long v62 = *re::audioLogObjects((re *)[v6 setCachedPlaybackSpeed:v61]);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v104 = a1[5];
        double v105 = *(float *)(a1[6] + 64);
        *(_DWORD *)std::string __p = 134218240;
        *(double *)&__p[4] = v105;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v104;
        _os_log_debug_impl(&dword_233120000, v62, OS_LOG_TYPE_DEBUG, "[RE/PHASE] [Playback] Rate=%.2f for token=%llu", __p, 0x16u);
      }
      [v60 fadeToValue:*(float *)(a1[6] + 64) duration:0.0];
    }
    else
    {
      unint64_t v98 = [v6 soundEvent];
      BOOL v99 = v98 == 0;

      if (!v99)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Could not find rate param for token");
        unint64_t v100 = (re *)re::audio::throttledLog(OS_LOG_TYPE_ERROR, (long long *)__p);
        int v101 = (int)v100;
        if (v114 < 0) {
          operator delete(*(void **)__p);
        }
        if (v101)
        {
          unint64_t v102 = *re::audioLogObjects(v100);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          {
            uint64_t v103 = a1[5];
            *(_DWORD *)std::string __p = 134217984;
            *(void *)&__p[4] = v103;
            _os_log_error_impl(&dword_233120000, v102, OS_LOG_TYPE_ERROR, "Could not find rate param for token %llu", __p, 0xCu);
          }
        }
      }
    }
  }
  uint64_t v63 = a1[6];
  float v64 = *(float *)(v63 + 80);
  float v65 = *(float *)(v63 + 84);
  [v6 cachedReverbSendLevel];
  float v66 = v64 + v65;
  if (v66 != v67)
  {
    uint64_t v68 = [v6 paramForKey:@"reverbSend"];
    if (v68)
    {
      *(float *)&double v69 = v66;
      [v6 setCachedReverbSendLevel:v69];
      float v70 = __exp10f(v66 / 20.0);
      uint64_t v72 = *re::audioLogObjects(v71);
      double v73 = v70;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v106 = a1[5];
        *(_DWORD *)std::string __p = 134218240;
        *(double *)&__p[4] = v73;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v106;
        _os_log_debug_impl(&dword_233120000, v72, OS_LOG_TYPE_DEBUG, "[RE/PHASE] [Playback] Reverb=%.2f for token=%llu", __p, 0x16u);
      }
      [v68 fadeToValue:v73 duration:0.0];
    }
  }
  uint64_t v74 = a1[6];
  float v75 = *(float *)(v74 + 96);
  float v76 = *(float *)(v74 + 88);
  [v6 cachedDirectSendLevel];
  float v77 = v75 + v76;
  if (v77 != v78)
  {
    uint64_t v79 = [v6 paramForKey:@"directSend"];
    if (v79)
    {
      *(float *)&double v80 = v77;
      [v6 setCachedDirectSendLevel:v80];
      float v81 = __exp10f(v77 / 20.0);
      uint64_t v83 = *re::audioLogObjects(v82);
      double v84 = v81;
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v107 = a1[5];
        *(_DWORD *)std::string __p = 134218240;
        *(double *)&__p[4] = v84;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v107;
        _os_log_debug_impl(&dword_233120000, v83, OS_LOG_TYPE_DEBUG, "[RE/PHASE] [Playback] Direct=%.2f for token=%llu", __p, 0x16u);
      }
      [v79 fadeToValue:v84 duration:0.0];
    }
  }
  float v85 = *(float *)(a1[6] + 220);
  [v6 prepareState];
  float v86 = *(float *)(*(void *)__p + 316);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&__p[8]);
  }
  if (v85 != v86)
  {
    int v87 = *(_DWORD *)(a1[6] + 220);
    [v6 prepareState];
    uint64_t v88 = *(std::__shared_weak_count **)&__p[8];
    *(_DWORD *)(*(void *)__p + 31re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v87;
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v88);
    }
  }
  int v89 = *(_DWORD *)(a1[6] + 224);
  [v6 prepareState];
  uint64_t v90 = *(std::__shared_weak_count **)&__p[8];
  *(_DWORD *)(*(void *)__p + 320) = v89;
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v90);
  }
  int v91 = *(_DWORD *)(a1[6] + 228);
  [v6 prepareState];
  int v92 = *(std::__shared_weak_count **)&__p[8];
  *(_DWORD *)(*(void *)__p + 324) = v91;
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v92);
  }
  char v93 = *(unsigned char *)(a1[6] + 100);
  [v6 prepareState];
  unint64_t v94 = *(std::__shared_weak_count **)&__p[8];
  *(unsigned char *)(*(void *)__p + 10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v93;
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v94);
  }
  int v95 = *(_DWORD *)(a1[6] + 92);
  [v6 prepareState];
  long long v96 = *(std::__shared_weak_count **)&__p[8];
  *(_DWORD *)(*(void *)__p + 204) = v95;
  if (v96) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v96);
  }
LABEL_53:

  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
}

void sub_23358ECCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)&a18);
  _Unwind_Resume(a1);
}

void ___ZN2re18AudioManager_PHASE25updateSourceStateInternalERKNS_16AudioSourceStateE_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [v4 setOrientation:*(double *)(a1 + 32)];
  }
}

void sub_23358EE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2re18AudioManager_PHASE23configureAndStartEngineEv_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::configureAndStartEngine(*(void *)(*(void *)(a1 + 32) + 520));
}

void re::AudioManager_PHASE::forceAudioOutputType(uint64_t a1, int a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 536);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN2re18AudioManager_PHASE20forceAudioOutputTypeE17REAudioOutputType_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t ___ZN2re18AudioManager_PHASE20forceAudioOutputTypeE17REAudioOutputType_block_invoke(uint64_t a1)
{
  return re::AudioManager_PHASE_Async::forceAudioOutputType(*(void *)(*(void *)(a1 + 32) + 520), *(_DWORD *)(a1 + 40));
}

uint64_t re::AudioManager_PHASE::currentAudioOutputType(re::AudioManager_PHASE *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *((void *)this + 67);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___ZN2re18AudioManager_PHASE22currentAudioOutputTypeEv_block_invoke;
  void v4[3] = &unk_264BE3030;
  void v4[4] = &v5;
  void v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZN2re18AudioManager_PHASE22currentAudioOutputTypeEv_block_invoke(uint64_t a1)
{
  uint64_t result = re::AudioManager_PHASE_Async::currentAudioOutputType(*(pthread_rwlock_t ***)(*(void *)(a1 + 40) + 520));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void re::AudioManager_PHASE::applyCustomHRIR(id *this)
{
  id v2 = this[37];
  uint64_t v3 = this[67];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  _DWORD v5[2] = ___ZN2re18AudioManager_PHASE15applyCustomHRIREv_block_invoke;
  void v5[3] = &unk_264BE2C48;
  id v6 = v2;
  uint64_t v7 = this;
  id v4 = v2;
  dispatch_async(v3, v5);
}

void ___ZN2re18AudioManager_PHASE15applyCustomHRIREv_block_invoke(uint64_t a1)
{
}

BOOL re::AudioManager_PHASE::applyMixGroupState(os_unfair_lock_s *this, unint64_t a2, unint64_t a3, const re::AudioMixGroup *a4, int a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  int8x16_t v10 = this + 142;
  os_unfair_lock_lock(this + 142);
  int8x16_t v11 = (char *)a4 + 9;
  if (*((void *)a4 + 1)) {
    long long v12 = (char *)*((void *)a4 + 2);
  }
  else {
    long long v12 = (char *)a4 + 9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v12);
  float v13 = re::AudioManager_PHASE::mixGroupStateFor(this, a2, a3, (uint64_t)__p);
  float v14 = v13;
  if ((v66[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v15 = *v14;
  if (*v14)
  {
    int v16 = *((unsigned __int8 *)a4 + 88);
    if (v16 != [*((id *)v14 + 1) isMuted])
    {
      float v17 = (void *)*((void *)v14 + 1);
      if (*((unsigned char *)a4 + 88)) {
        float v18 = (re *)[v17 mute];
      }
      else {
        float v18 = (re *)[v17 unmute];
      }
      float32x2_t v22 = (id)*re::audioLogObjects(v18);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        long long v62 = v10;
        uint64_t v24 = *((void *)a4 + 1);
        float32x2_t v23 = (char *)*((void *)a4 + 2);
        int v25 = *((unsigned __int8 *)a4 + 88);
        uint64_t v26 = [*((id *)v14 + 1) identifier];
        float32_t v27 = (void *)v26;
        if (v24) {
          float32x2_t v28 = v23;
        }
        else {
          float32x2_t v28 = (char *)a4 + 9;
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v28;
        __int16 v65 = 1024;
        *(_DWORD *)float v66 = v25;
        *(_WORD *)&v66[4] = 2112;
        *(void *)&v66[6] = v26;
        _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Name: %s, Set Muted: %d, PhaseID: %@ (sceneID - connectionID - name).", __p, 0x1Cu);

        int8x16_t v10 = v62;
      }
    }
    float v29 = *((float *)a4 + 26);
    [*((id *)v14 + 1) rate];
    if (vabdd_f64(v29, v30) > 0.00000011920929)
    {
      float32x2_t v31 = (id)*re::audioLogObjects((re *)[*((id *)v14 + 1) setRate:*((float *)a4 + 26)]);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v63 = v10;
        uint64_t v32 = *((void *)a4 + 1);
        float32x2_t v33 = (char *)*((void *)a4 + 2);
        float v34 = *((float *)a4 + 26);
        uint64_t v35 = [*((id *)v14 + 1) identifier];
        __int16 v36 = (void *)v35;
        if (v32) {
          CMTime v37 = v33;
        }
        else {
          CMTime v37 = (char *)a4 + 9;
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v37;
        __int16 v65 = 2048;
        *(double *)float v66 = v34;
        *(_WORD *)&v66[8] = 2112;
        *(void *)&v66[10] = v35;
        _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Name: %s, Set Speed: %.2f, PhaseID: %@ (sceneID - connectionID - name).", __p, 0x20u);

        int8x16_t v10 = v63;
      }
    }
    float v38 = __exp10f(*((float *)a4 + 24) / 20.0);
    [*((id *)v14 + 1) gainLowFrequency];
    if (vabdd_f64(v38, v39) > 0.00000011920929) {
      objc_msgSend(*((id *)v14 + 1), "setGainLowFrequency:");
    }
    float v40 = __exp10f(*((float *)a4 + 23) / 20.0);
    [*((id *)v14 + 1) gainHighFrequency];
    if (vabdd_f64(v40, v41) > 0.00000011920929) {
      objc_msgSend(*((id *)v14 + 1), "setGainHighFrequency:");
    }
    if (a5)
    {
      float v42 = *((float *)a4 + 27);
      if (v42 == 0.0)
      {
        float v43 = *((float *)a4 + 28);
      }
      else
      {
        float v43 = *((float *)a4 + 28);
        if (*((float *)a4 + 29) == v43)
        {
LABEL_43:
          if (v42 > 0.0)
          {
            unsigned __int32 v52 = (re *)[*((id *)v14 + 1) fadeGain:1668435054 duration:__exp10f(*((float *)a4 + 29) / 20.0) curveType:*((float *)a4 + 27)];
            float32x2_t v53 = (id)*re::audioLogObjects(v52);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
            {
              uint64_t v55 = *((void *)a4 + 1);
              float32x2_t v54 = (char *)*((void *)a4 + 2);
              float v56 = *((float *)a4 + 27);
              float v57 = *((float *)a4 + 29);
              uint64_t v58 = [*((id *)v14 + 1) identifier];
              float v59 = (void *)v58;
              *(_DWORD *)std::string __p = 136315906;
              if (v55) {
                float32x4_t v60 = v54;
              }
              else {
                float32x4_t v60 = v11;
              }
              *(void *)&__p[4] = v60;
              __int16 v65 = 2048;
              *(double *)float v66 = v56;
              *(_WORD *)&v66[8] = 2048;
              *(double *)&v66[10] = v57;
              __int16 v67 = 2112;
              uint64_t v68 = v58;
              _os_log_impl(&dword_233120000, v53, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Name: %s, Set Fade: %.2fs, Gain: %.2fdB, PhaseID: %@ (sceneID - connectionID - name).", __p, 0x2Au);
            }
          }
          goto LABEL_50;
        }
      }
      unsigned int v44 = (re *)[*((id *)v14 + 1) setGain:__exp10f(v43 / 20.0)];
      float32x2_t v45 = (id)*re::audioLogObjects(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        uint64_t v46 = *((void *)a4 + 1);
        float32x2_t v47 = (char *)*((void *)a4 + 2);
        float v48 = *((float *)a4 + 28);
        uint64_t v49 = [*((id *)v14 + 1) identifier];
        float32x2_t v50 = (void *)v49;
        if (v46) {
          float32x4_t v51 = v47;
        }
        else {
          float32x4_t v51 = (char *)a4 + 9;
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v51;
        __int16 v65 = 2048;
        *(double *)float v66 = v48;
        *(_WORD *)&v66[8] = 2112;
        *(void *)&v66[10] = v49;
        _os_log_impl(&dword_233120000, v45, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Name: %s, Set Gain: %.2fdB, PhaseID: %@ (sceneID - connectionID - name).", __p, 0x20u);
      }
      float v42 = *((float *)a4 + 27);
      goto LABEL_43;
    }
  }
  else
  {
    long long v19 = *re::audioLogObjects((re *)v13);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      if (*((void *)a4 + 1)) {
        float32x2_t v20 = (char *)*((void *)a4 + 2);
      }
      else {
        float32x2_t v20 = (char *)a4 + 9;
      }
      uint64_t v21 = *((void *)a4 + 4);
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v20;
      __int16 v65 = 2048;
      *(void *)float v66 = v21;
      _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Ignoring changes for mixGroup %s(id=%llu) as it isn't registered with PHASE yet.", __p, 0x16u);
    }
  }
LABEL_50:
  os_unfair_lock_unlock(v10);
  return v15 != 0;
}

void sub_23358F564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::idlePhaseEngine(re::AudioManager_PHASE_Async *this, PHASEEngine *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  id v4 = (pthread_rwlock_t *)*((void *)this + 29);
  void v10[2] = (char *)this + 248;
  int8x16_t v11 = (pthread_rwlock_t **)((char *)this + 232);
  pthread_rwlock_rdlock(v4);
  pthread_t v5 = pthread_self();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 2526, (uint64_t)v5);
  if (*((unsigned char *)this + 340))
  {
    id v6 = *re::audioLogObjects((re *)[(PHASEEngine *)v3 stop]);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      float v7 = COERCE_FLOAT(atomic_load((unsigned int *)this + 99));
      *(_DWORD *)int buf = 134217984;
      double v13 = v7;
      int v8 = "AudioManager_PHASE shutdown timer expired after %f seconds, stopping PHASEEngine";
LABEL_6:
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
    }
  }
  else
  {
    id v6 = *re::audioLogObjects((re *)[(PHASEEngine *)v3 pause]);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      float v9 = COERCE_FLOAT(atomic_load((unsigned int *)this + 99));
      *(_DWORD *)int buf = 134217984;
      double v13 = v9;
      int v8 = "AudioManager_PHASE shutdown timer expired after %f seconds, pausing PHASEEngine";
      goto LABEL_6;
    }
  }
  atomic_store(0, (unint64_t *)this + 52);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
  pthread_rwlock_unlock(*v11);
}

void sub_23358F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2re18AudioManager_PHASE16mixGroupStateForEyyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  re::AudioManager_PHASE_Async::registerMixGroup(*(re::AudioManager_PHASE_Async **)(v2 + 520), *(PHASEGroup **)(a1 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 568));
  uint64_t v3 = (long long *)(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2 + 576, (unsigned __int8 *)(a1 + 48), &v3)[40] = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 568));
}

void sub_23358F824(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

BOOL re::AudioManager_PHASE::shouldLoadFileAssetsByAbsolutePath(re::AudioManager_PHASE *this)
{
  uint64_t v1 = *((void *)this + 65);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 336);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 336));
  BOOL v3 = *(void *)(v1 + 320) != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

double re::AudioManager_PHASE::getPeerTimestamp(re::AudioManager_PHASE *this)
{
  return 0.0;
}

id re::AudioManager_PHASE::insertPostProcessingEffect(re::AudioManager_PHASE *this, const AudioComponentDescription *a2)
{
  id v3 = objc_alloc(MEMORY[0x263EF9468]);
  AudioComponentDescription v7 = *a2;
  id v4 = (void *)[v3 initWithAudioComponentDescription:&v7];
  pthread_t v5 = [v4 AUAudioUnit];

  return v5;
}

void sub_23358F948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::AudioService::getEngineQueue(id *this)
{
  return this[1];
}

float re::AudioManager::getSharedVoiceGain(re::AudioManager *this)
{
  return *((float *)this + 69);
}

float re::AudioManager::getSharedReverbSendLevel(re::AudioManager *this)
{
  return *((float *)this + 70);
}

uint64_t re::AudioManager::hasUpdatedSharedAcousticProperties(re::AudioManager *this)
{
  return *((unsigned __int8 *)this + 292);
}

uint64_t re::AudioManager::stsObject(re::AudioManager *this)
{
  return *((void *)this + 8);
}

uint64_t re::AudioManager_PHASE::setRequiresAudioSessionForPlayback(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t re::AudioManager_PHASE::getRequiresAudioSessionForPlayback(re::AudioManager_PHASE *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 656);
  return v1 & 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_0,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_1,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &&>(uint64_t **a1, id *a2)
{
  uint64_t v2 = *a1;
  id v3 = *a2;
  uint64_t v4 = v2[2];
  uint64_t v6 = *(void *)*v2;
  pthread_t v5 = *(std::__shared_weak_count **)(*v2 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v2[1];
  int v8 = (std::__shared_weak_count *)operator new(0x38uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DAF80;
  std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::__value_func[abi:ne180100]((uint64_t)&v8[1], v7);
  id v9 = *(id *)(v6 + 128);

  int8x16_t v10 = *(NSObject **)(v4 + 536);
  if (v9)
  {
    uint64_t v11 = MEMORY[0x263EF8330];
    uint64_t v12 = 3321888768;
    double v13 = ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__0clEP6NSData_block_invoke;
    uint64_t v14 = &unk_26E6DAF40;
    uint64_t v16 = v4;
    id v15 = v3;
    uint64_t v17 = v6;
    float v18 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v19 = v8 + 1;
    float32x2_t v20 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_async(v10, &v11);
  }
  else
  {
    uint64_t v11 = MEMORY[0x263EF8330];
    uint64_t v12 = 3321888768;
    double v13 = ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__0clEP6NSData_block_invoke_58;
    uint64_t v14 = &unk_26E6DAF40;
    uint64_t v16 = v4;
    id v15 = v3;
    uint64_t v17 = v6;
    float v18 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v19 = v8 + 1;
    float32x2_t v20 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_sync(v10, &v11);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
}

void sub_23358FBAC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_0,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_1,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &&>(void *a1, id *a2)
{
  uint64_t v2 = (void *)*a1;
  id v3 = *a2;
  uint64_t v4 = v2[5];
  pthread_t v5 = (uint64_t *)v2[3];
  uint64_t v7 = *v5;
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v2[4];
  id v9 = (std::__shared_weak_count *)operator new(0x38uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DAF80;
  std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::__value_func[abi:ne180100]((uint64_t)&v9[1], v8);
  int8x16_t v10 = *(NSObject **)(v4 + 536);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3321888768;
  void v12[2] = ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__1clEP16AVAudioPCMBuffer_block_invoke;
  v12[3] = &unk_26E6DAF40;
  uint64_t v14 = v4;
  id v11 = v3;
  id v13 = v11;
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v9 + 1;
  float v18 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v10, v12);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v16);
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
}

void sub_23358FD30(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_0,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_1,re::AudioManager_PHASE::loadAudio(std::shared_ptr<re::AudioAssetPayload>,std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &&>(void *a1, id *a2)
{
  uint64_t v2 = (void *)*a1;
  id v3 = *a2;
  uint64_t v4 = v2[8];
  pthread_t v5 = (uint64_t *)v2[6];
  uint64_t v7 = *v5;
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v2[7];
  id v9 = (std::__shared_weak_count *)operator new(0x38uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DAF80;
  std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::__value_func[abi:ne180100]((uint64_t)&v9[1], v8);
  int8x16_t v10 = *(NSObject **)(v4 + 536);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3321888768;
  void v12[2] = ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__2clEP5NSURL_block_invoke;
  v12[3] = &unk_26E6DAF40;
  uint64_t v14 = v4;
  id v11 = v3;
  id v13 = v11;
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v9 + 1;
  float v18 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v10, v12);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v16);
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
}

void sub_23358FEB4(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }

  _Unwind_Resume(a1);
}

void ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__0clEP6NSData_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[5] + 520);
  id v4 = *(id *)(a1[6] + 128);
  re::AudioManager_PHASE_Async::loadBuffer(v3, v2, v4, a1[6] + 16, *(_DWORD *)(a1[6] + 104), *(void *)(a1[6] + 112), &v9);

  uint64_t v5 = a1[8];
  uint64_t v7 = v9;
  uint64_t v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
}

void sub_23358FFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN2re17AudioAssetPayloadEEE64c76_ZTSNSt3__110shared_ptrINS_8functionIFvNS0_IN2re18PersistedAssetDataEEEEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  result[8] = a2[8];
  result[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN2re17AudioAssetPayloadEEE64c76_ZTSNSt3__110shared_ptrINS_8functionIFvNS0_IN2re18PersistedAssetDataEEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__0clEP6NSData_block_invoke_58(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[5] + 520);
  id v4 = *(id *)(a1[6] + 120);
  re::AudioManager_PHASE_Async::loadFileData(v3, v2, v4, (unsigned __int8 *)(a1[6] + 16), *(_DWORD *)(a1[6] + 104), *(void *)(a1[6] + 112), &v9);

  uint64_t v5 = a1[8];
  uint64_t v7 = v9;
  uint64_t v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
}

void sub_23359013C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DAF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DAF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(std::shared_ptr<re::PersistedAssetData>)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__1clEP16AVAudioPCMBuffer_block_invoke(uint64_t a1)
{
  re::AudioManager_PHASE_Async::loadBuffer(*(void *)(*(void *)(a1 + 40) + 520), *(void **)(a1 + 32), *(void *)(a1 + 48) + 16, *(_DWORD *)(*(void *)(a1 + 48) + 104), *(void *)(*(void *)(a1 + 48) + 112), &v6);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = v6;
  uint64_t v5 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
}

void sub_23359037C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZNK2re18AudioManager_PHASE9loadAudioENSt3__110shared_ptrINS_17AudioAssetPayloadEEENS1_8functionIFvNS2_INS_18PersistedAssetDataEEEEEEENK3__2clEP5NSURL_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[5] + 520);
  id v4 = *(id *)(a1[6] + 120);
  re::AudioManager_PHASE_Async::loadFile(v3, v2, v4, (unsigned __int8 *)(a1[6] + 16), *(_DWORD *)(a1[6] + 104), *(void *)(a1[6] + 112), &v9);

  uint64_t v5 = a1[8];
  uint64_t v7 = v9;
  uint64_t v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
}

void sub_23359047C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

re::AudioManager_PHASE_Async *std::unique_ptr<re::AudioManager_PHASE_Async>::reset[abi:ne180100](re::AudioManager_PHASE_Async **a1, re::AudioManager_PHASE_Async *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    re::AudioManager_PHASE_Async::~AudioManager_PHASE_Async(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

re::AudioManager_PHASE_StateMachine *std::unique_ptr<re::AudioManager_PHASE_StateMachine>::reset[abi:ne180100](re::AudioManager_PHASE_StateMachine **a1, re::AudioManager_PHASE_StateMachine *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    re::AudioManager_PHASE_StateMachine::~AudioManager_PHASE_StateMachine(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,re::AudioManager_PHASE::MixGroupState>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,re::AudioManager_PHASE::MixGroupState>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

re::DisplayStateNotificationManager *std::unique_ptr<re::DisplayStateNotificationManager>::reset[abi:ne180100](re::DisplayStateNotificationManager **a1, re::DisplayStateNotificationManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    re::DisplayStateNotificationManager::~DisplayStateNotificationManager(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void *std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>::operator()[abi:ne180100](void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    if (v2)
    {
      uint64_t v3 = v1[5];
      if (v3)
      {
        if (v1[2])
        {
          uint64_t v4 = 0;
          do
          {
            std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>,(std::__variant_detail::_Trait)1>::~__dtor(v1[5] + 48 * ((unint64_t)(v4 + v1[3]) % v1[1]));
            ++v4;
          }
          while (v4 != v1[2]);
          uint64_t v2 = *v1;
          uint64_t v3 = v1[5];
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
      }
      v1[5] = 0;
      *(_OWORD *)uint64_t v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
      *((_DWORD *)v1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    }
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26E6DAFD8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit(a2);
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 160 * v4;
        do
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(v3);
          v3 += 160;
          v5 -= 160;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 168 * v4;
        do
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>::~__dtor(v3);
          v3 += 168;
          v5 -= 168;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 160);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26E6DB000[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 120);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2 + 80);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 32);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
}

void std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::~__func()
{
}

void *std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E6DB020;
  return result;
}

void std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DB020;
}

void *std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::operator()(uint64_t a1, void **a2)
{
  return std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>::operator()[abi:ne180100](*a2);
}

uint64_t std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>,std::allocator<std::default_delete<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>,void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>*)>::target_type()
{
}

void std::__shared_ptr_emplace<re::AudioEngineRunnableManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DB0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioEngineRunnableManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DB0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<re::AudioEngineRunnableManager>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      char v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 2;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>::setCapacity(v5, a2);
        *uint64_t v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            uint64_t v8 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v8 = 0;
      if (!v3)
      {
LABEL_20:
        void v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        uint64_t v9 = 0;
        uint64_t v10 = v5[3];
        do
        {
          uint64_t v11 = v5[5] + 48 * ((unint64_t)(v9 + v5[3]) % v5[1]);
          uint64_t v12 = &v8[6 * v10];
          *(unsigned char *)uint64_t v12 = 0;
          *((_DWORD *)v12 + 10) = -1;
          uint64_t v13 = *(unsigned int *)(v11 + 40);
          if (v13 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_26E6DB0F0[v13])(&v14, &v8[6 * v10], v11);
            *((_DWORD *)v12 + 10) = v13;
          }
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
          if (v10 + 1 < a2) {
            ++v10;
          }
          else {
            uint64_t v10 = 0;
          }
          ++v9;
        }
        while (v9 != *v6);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_20;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::DynamicArray(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSC_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::DynamicArray(a2, a3);
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = 5 * v8;
      uint64_t v10 = *(void *)(a2 + 32) + 32 * v9;
      uint64_t v11 = a1[4] + 32 * v9;
      uint64_t v12 = 160 * v4 - 32 * v9;
      do
      {
        *(unsigned char *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
        uint64_t v13 = *(unsigned int *)(v10 + 152);
        if (v13 != -1)
        {
          uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6DB140[v13])(&v14, v11, v10);
          *(_DWORD *)(v11 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v13;
        }
        v10 += 160;
        v11 += 160;
        v12 -= 160;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t result = a1[4] + 160 * v4;
      uint64_t v7 = 160 * v6 - 160 * v4;
      do
      {
        uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(result)
               + 160;
        v7 -= 160;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

void sub_233591358(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void *re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          uint64_t v2 = 160 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 160 * v9;
        uint64_t v11 = v7;
        do
        {
          *(unsigned char *)uint64_t v11 = 0;
          *((_DWORD *)v11 + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = -1;
          uint64_t v12 = *(unsigned int *)(v8 + 152);
          if (v12 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_26E6DB120[v12])(&v13, v11, v8);
            *((_DWORD *)v11 + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v12;
          }
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(v8);
          v8 += 160;
          v11 += 20;
          v10 -= 160;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  *(void *)&double result = std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData>(a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  uint64_t v4 = *((void *)a3 + 3);
  *((void *)a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *(void *)(a2 + 24) = v4;
  __n128 result = (__n128)a3[2];
  *(__n128 *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    for (uint64_t i = result; i != a2; i += 160)
    {
      uint64_t v6 = *(unsigned int *)(a3 + 152);
      uint64_t v7 = *(unsigned int *)(i + 152);
      if (v6 == -1)
      {
        if (v7 != -1)
        {
LABEL_7:
          uint64_t v8 = a3;
          __n128 result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6DB130[v7])(&v8, a3, i);
        }
      }
      else
      {
        if (v7 != -1) {
          goto LABEL_7;
        }
        __n128 result = ((uint64_t (*)(char *, uint64_t))off_26E6DAFF0[v6])(&v9, a3);
        *(_DWORD *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
      }
      a3 += 160;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 152);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26E6DAFF0[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
    uint64_t result = std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData const&>(v4, (long long *)a3);
    *(_DWORD *)(v4 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    return result;
  }
  long long v7 = *(_OWORD *)a3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
  *(_OWORD *)a2 = v7;
  objc_storeStrong((id *)(a2 + 24), *(id *)(a3 + 24));
  re::DynamicArray<re::AcousticAbsorptionMaterial>::operator=(a2 + 32, (uint64_t *)(a3 + 32));
  re::DynamicArray<re::AcousticScatteringMaterial>::operator=(a2 + 72, (uint64_t *)(a3 + 72));
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::operator=(a2 + 112, (uint64_t *)(a3 + 112));
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 152);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      long long v7 = *a3;
      *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v7;
      objc_storeStrong((id *)(a2 + 24), *((id *)a3 + 3));
      __n128 result = (__n128)a3[2];
      *(__n128 *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_26E6DAFF0[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = -1;
  long long v9 = *a3;
  *(void *)(v4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v4 = v9;
  *(void *)(v4 + 24) = *((id *)a3 + 3);
  __n128 result = (__n128)a3[2];
  *(__n128 *)(v4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
  *(_DWORD *)(v4 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
  return result;
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AcousticAbsorptionMaterial>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::AcousticScatteringMaterial>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AcousticScatteringMaterial>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AcousticScatteringMaterial>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AcousticScatteringMaterial>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AcousticSoundReductionMaterial>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AcousticSoundReductionMaterial>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AcousticSoundReductionMaterial>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::AcousticAbsorptionMaterial>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    long long v3 = *(re::DynamicString **)(a1 + 32);
    uint64_t v4 = 112 * v2;
    do
    {
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
      re::DynamicString::deinit(v3);
      long long v3 = (re::DynamicString *)((char *)v3 + 112);
      v4 -= 112;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::AcousticScatteringMaterial>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    long long v3 = *(re::DynamicString **)(a1 + 32);
    uint64_t v4 = 112 * v2;
    do
    {
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
      re::DynamicString::deinit(v3);
      long long v3 = (re::DynamicString *)((char *)v3 + 112);
      v4 -= 112;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::AcousticSoundReductionMaterial>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    long long v3 = *(re::DynamicString **)(a1 + 32);
    uint64_t v4 = 112 * v2;
    do
    {
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 32);
      re::DynamicString::deinit(v3);
      long long v3 = (re::DynamicString *)((char *)v3 + 112);
      v4 -= 112;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((id *)a2 + 3);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray(a1 + 32, (uint64_t *)a2 + 4);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray(a1 + 72, (uint64_t *)a2 + 9);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray(a1 + 112, (uint64_t *)a2 + 14);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData const&>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 24) = *((id *)a3 + 3);
  __n128 result = (__n128)a3[2];
  *(__n128 *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
  return result;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = 168 * v8;
      uint64_t v10 = *(void *)(a2 + 32) + v9;
      uint64_t v11 = a1[4] + v9;
      uint64_t v12 = 168 * v4 - v9;
      do
      {
        *(unsigned char *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + 160) = -1;
        uint64_t v13 = *(unsigned int *)(v10 + 160);
        if (v13 != -1)
        {
          uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6DB170[v13])(&v14, v11, v10);
          *(_DWORD *)(v11 + 160) = v13;
        }
        v10 += 168;
        v11 += 168;
        v12 -= 168;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t result = a1[4] + 168 * v4;
      uint64_t v7 = 168 * v6 - 168 * v4;
      do
      {
        uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>::~__dtor(result)
               + 168;
        v7 -= 168;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

void sub_233591DBC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void *re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          uint64_t v2 = 168 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 168 * v9;
        uint64_t v11 = v7;
        do
        {
          *(unsigned char *)uint64_t v11 = 0;
          *((_DWORD *)v11 + 40) = -1;
          uint64_t v12 = *(unsigned int *)(v8 + 160);
          if (v12 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_26E6DB150[v12])(&v13, v11, v8);
            *((_DWORD *)v11 + 40) = v12;
          }
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>::~__dtor(v8);
          v8 += 168;
          v11 += 21;
          v10 -= 168;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v6 = *(void *)(a3 + 48);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 56);
  *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 72);
  *(void *)(a3 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v8;
  ++*(_DWORD *)(a3 + 64);
  ++*(_DWORD *)(a2 + 64);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  uint64_t v9 = *(void *)(a3 + 88);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v9;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 96);
  *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(void *)(a3 + 112);
  *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v11;
  ++*(_DWORD *)(a3 + 104);
  ++*(_DWORD *)(a2 + 104);
  *(void *)(a2 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 144) = 0;
  uint64_t v12 = *(void *)(a3 + 128);
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a2 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v12;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 136);
  *(void *)(a3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v13;
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a2 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(void *)(a3 + 152);
  *(void *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v14;
  ++*(_DWORD *)(a3 + 144);
  ++*(_DWORD *)(a2 + 144);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v3;
  uint64_t v4 = *(void *)(a3 + 32);
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v4;
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    for (uint64_t i = result; i != a2; i += 168)
    {
      uint64_t v6 = *(unsigned int *)(a3 + 160);
      uint64_t v7 = *(unsigned int *)(i + 160);
      if (v6 == -1)
      {
        if (v7 != -1)
        {
LABEL_7:
          uint64_t v8 = a3;
          __n128 result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6DB160[v7])(&v8, a3, i);
        }
      }
      else
      {
        if (v7 != -1) {
          goto LABEL_7;
        }
        __n128 result = ((uint64_t (*)(char *, uint64_t))off_26E6DB000[v6])(&v9, a3);
        *(_DWORD *)(a3 + 160) = -1;
      }
      a3 += 168;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 160);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26E6DB000[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 160) = -1;
    uint64_t result = std::__variant_detail::__alt<0ul,re::audio::AcousticMeshUpdateData>::__alt[abi:ne180100]<re::audio::AcousticMeshUpdateData const&>(v4, a3);
    *(_DWORD *)(v4 + 160) = 0;
    return result;
  }
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
  objc_storeStrong((id *)(a2 + 32), *(id *)(a3 + 32));
  re::DynamicArray<re::AcousticAbsorptionMaterial>::operator=(a2 + 40, (uint64_t *)(a3 + 40));
  re::DynamicArray<re::AcousticScatteringMaterial>::operator=(a2 + 80, (uint64_t *)(a3 + 80));
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::operator=(a2 + 120, (uint64_t *)(a3 + 120));
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 160);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      long long v7 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      objc_storeStrong((id *)(a2 + 32), *(id *)(a3 + 32));
      __n128 result = *(__n128 *)(a3 + 40);
      *(__n128 *)(a2 + 40) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_26E6DB000[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 160) = -1;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v9;
  *(void *)(v4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(id *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(_DWORD *)(v4 + 160) = 1;
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,re::audio::AcousticMeshUpdateData>::__alt[abi:ne180100]<re::audio::AcousticMeshUpdateData const&>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(id *)(a2 + 32);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray(a1 + 40, (uint64_t *)(a2 + 40));
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,re::audio::AcousticMeshUpdateData>::__alt[abi:ne180100]<re::audio::AcousticMeshUpdateData const&>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(id *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::QueueIterator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>> const&>,re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::QueueIterator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>> const&>,re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::QueueIterator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>&>>(void *result, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v10 = a3;
  if (a2 != a4 || a3 != a5)
  {
    float v29 = result;
    do
    {
      unint64_t v12 = (unint64_t)(a2[3] + v10) % a2[1];
      uint64_t v13 = a2[5];
      uint64_t v14 = (uint64_t *)(v13 + 48 * v12);
      unint64_t v15 = (unint64_t)(v8[3] + a7) % v8[1];
      uint64_t v16 = v8[5];
      uint64_t v17 = (uint64_t *)(v16 + 48 * v15);
      if (v17 != v14)
      {
        uint64_t v18 = *v14;
        if (*v17)
        {
          if (v18)
          {
            re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::copy(v17, (void *)(v13 + 48 * v12));
          }
          else
          {
            uint64_t v32 = a7;
            uint64_t v21 = v16 + 48 * v15;
            uint64_t v23 = *(void *)(v21 + 16);
            float32x2_t v22 = (unint64_t *)(v21 + 16);
            if (v23)
            {
              unint64_t v24 = 0;
              int v25 = (void *)(v16 + 48 * v15);
              uint64_t v26 = v25 + 5;
              float32_t v27 = v25 + 3;
              float32x2_t v28 = v25 + 1;
              do
              {
                std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(*v26 + 48 * ((v24 + *v27) % *v28));
                ++v24;
              }
              while (v24 < *v22);
            }
            *float32x2_t v22 = 0;
            uint64_t v8 = a6;
            a7 = v32;
            uint64_t v9 = a5;
          }
          ++*(_DWORD *)(v16 + 48 * v15 + 32);
        }
        else if (v18)
        {
          unint64_t v19 = *(void *)(v13 + 48 * v12 + 16);
          *uint64_t v17 = v18;
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(v17, v19);
          uint64_t v20 = v16 + 48 * v15;
          *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
          *(void *)(v20 + 24) = 0;
          *(_DWORD *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::copy(v17, v14);
        }
      }
      ++v10;
      ++a7;
    }
    while (a2 != a4 || v10 != v9);
    uint64_t v10 = v9;
    __n128 result = v29;
  }
  void *result = a2;
  result[1] = v10;
  result[2] = v8;
  result[3] = a7;
  return result;
}

uint64_t re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::copy(void *a1, void *a2)
{
  unint64_t v4 = a2[2];
  if (v4 >= a1[2])
  {
    re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(a1, a2[2]);
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>&>>((uint64_t)v11, a2, 0, a2, a1[2], a1, 0);
    uint64_t v7 = a1[2];
    for (a1[2] = v4; v7 != a2[2]; ++v7)
    {
      uint64_t v8 = a1[5] + 48 * ((unint64_t)(v7 + a1[3]) % a1[1]);
      uint64_t v9 = a2[5] + 48 * ((unint64_t)(v7 + a2[3]) % a2[1]);
      *(unsigned char *)uint64_t v8 = 0;
      *(_DWORD *)(v8 + 40) = -1;
      uint64_t v10 = *(unsigned int *)(v9 + 40);
      if (v10 != -1)
      {
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))off_26E6DB1B0[v10])(v11, v8);
        *(_DWORD *)(v8 + 40) = v10;
      }
    }
  }
  else
  {
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>&>>((uint64_t)v11, a2, 0, a2, a2[2], a1, 0);
    if (v4 != a1[2])
    {
      unint64_t v6 = v4;
      do
      {
        uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(a1[5] + 48 * ((v6 + a1[3]) % a1[1]));
        ++v6;
      }
      while (v6 != a1[2]);
    }
    a1[2] = v4;
  }
  return result;
}

void sub_233592744(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>,re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::QueueIterator<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>&>>(uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v11 = (void *)result;
  if (a2 != a4 || a3 != a5)
  {
    uint64_t v12 = a5 - 1;
    while (1)
    {
      uint64_t v13 = a3;
      uint64_t v14 = a6[5] + 48 * ((unint64_t)(a7 + a6[3]) % a6[1]);
      uint64_t v15 = *(unsigned int *)(v14 + 40);
      uint64_t v16 = *(unsigned int *)(a2[5] + 48 * ((unint64_t)(a3 + a2[3]) % a2[1]) + 40);
      if (v15 == -1)
      {
        if (v16 == -1) {
          goto LABEL_9;
        }
      }
      else if (v16 == -1)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E6DB180[v15])(&v19, v14);
        *(_DWORD *)(v14 + 40) = -1;
        goto LABEL_9;
      }
      uint64_t v18 = a6[5] + 48 * ((unint64_t)(a7 + a6[3]) % a6[1]);
      uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t))off_26E6DB198[v16])(&v18, v14);
LABEL_9:
      a3 = v13 + 1;
      ++a7;
      if (a2 == a4 && v12 == v13)
      {
        a3 = a5;
        break;
      }
    }
  }
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v11[2] = a6;
  void v11[3] = a7;
  return result;
}

void **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSX_EEEDcSP_DpT0_(void **result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t)*result;
  uint64_t v5 = *((unsigned int *)*result + 10);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26E6DB180[v5])(&v9, v4);
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    uint64_t result = (void **)re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray(v4, a3);
    *(_DWORD *)(v4 + 40) = 0;
    return result;
  }
  if ((uint64_t *)a2 != a3)
  {
    uint64_t v7 = *a3;
    if (*(void *)a2)
    {
      if (v7) {
        uint64_t result = re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy((void **)a2, (uint64_t)a3);
      }
      else {
        *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      }
      ++*(_DWORD *)(a2 + 24);
    }
    else if (v7)
    {
      unint64_t v8 = a3[2];
      *(void *)a2 = v7;
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)a2, v8);
      ++*(_DWORD *)(a2 + 24);
      return re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy((void **)a2, (uint64_t)a3);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 40);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26E6DB180[v5])(&v13, v4);
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    re::DynamicArray<re::audio::PHASEOccluderData>::DynamicArray(v4, a3);
    *(_DWORD *)(v4 + 40) = 1;
    return;
  }
  if ((uint64_t *)a2 != a3)
  {
    uint64_t v7 = *a3;
    if (*(void *)a2)
    {
      if (v7)
      {
        re::DynamicArray<re::audio::PHASEOccluderData>::copy((void *)a2, (uint64_t)a3);
      }
      else
      {
        uint64_t v9 = *(void *)(a2 + 16);
        *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        if (v9)
        {
          uint64_t v10 = 48 * v9;
          uint64_t v11 = (void **)(*(void *)(a2 + 32) + 24);
          do
          {
            uint64_t v12 = *v11;
            v11 += 6;

            v10 -= 48;
          }
          while (v10);
        }
      }
      ++*(_DWORD *)(a2 + 24);
    }
    else if (v7)
    {
      unint64_t v8 = a3[2];
      *(void *)a2 = v7;
      re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity((void *)a2, v8);
      ++*(_DWORD *)(a2 + 24);
      re::DynamicArray<re::audio::PHASEOccluderData>::copy((void *)a2, (uint64_t)a3);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 40);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26E6DB180[v5])(&v13, v4);
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    re::DynamicArray<re::audio::PHASEOccluderUpdateData>::DynamicArray(v4, a3);
    *(_DWORD *)(v4 + 40) = 2;
    return;
  }
  if ((uint64_t *)a2 != a3)
  {
    uint64_t v7 = *a3;
    if (*(void *)a2)
    {
      if (v7)
      {
        re::DynamicArray<re::audio::PHASEOccluderUpdateData>::copy((void *)a2, (uint64_t)a3);
      }
      else
      {
        uint64_t v9 = *(void *)(a2 + 16);
        *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        if (v9)
        {
          uint64_t v10 = 56 * v9;
          uint64_t v11 = (void **)(*(void *)(a2 + 32) + 32);
          do
          {
            uint64_t v12 = *v11;
            v11 += 7;

            v10 -= 56;
          }
          while (v10);
        }
      }
      ++*(_DWORD *)(a2 + 24);
    }
    else if (v7)
    {
      unint64_t v8 = a3[2];
      *(void *)a2 = v7;
      re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity((void *)a2, v8);
      ++*(_DWORD *)(a2 + 24);
      re::DynamicArray<re::audio::PHASEOccluderUpdateData>::copy((void *)a2, (uint64_t)a3);
    }
  }
}

void re::DynamicArray<re::audio::PHASEOccluderData>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *>(*(long long **)(a2 + 32), (long long *)(*(void *)(a2 + 32) + 48 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = (long long *)(v10 + 48 * v4);
      uint64_t v12 = 3 * v9;
      char v13 = (long long *)(v10 + 16 * v12);
      uint64_t v14 = a1[4] + 16 * v12;
      do
      {
        long long v15 = *v13;
        *(void *)(v14 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        *(void *)(v14 + 24) = *((id *)v13 + 3);
        *(_OWORD *)(v14 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v13[2];
        v13 += 3;
        v14 += 48;
      }
      while (v13 != v11);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *>(*(long long **)(a2 + 32), (long long *)(*(void *)(a2 + 32) + 48 * v4), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = 48 * v5 - 48 * v4;
      uint64_t v7 = (void **)(a1[4] + 48 * v4 + 24);
      do
      {
        unint64_t v8 = *v7;
        v7 += 6;

        v6 -= 48;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *,re::audio::PHASEOccluderData *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      objc_storeStrong((id *)(a3 + 24), *((id *)v5 + 3));
      uint64_t v7 = *((void *)v5 + 4);
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 + 40);
      *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v7;
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::audio::PHASEOccluderData>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::audio::PHASEOccluderUpdateData>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 56 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = v10 + 56 * v4;
      uint64_t v12 = 56 * v9;
      uint64_t v13 = v10 + v12;
      uint64_t v14 = a1[4] + v12;
      do
      {
        long long v15 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
        *(_OWORD *)(v14 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
        *(void *)(v14 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(id *)(v13 + 32);
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v13 + 40);
        v13 += 56;
        v14 += 56;
      }
      while (v13 != v11);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 56 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = -56 * v4 + 56 * v5;
      uint64_t v7 = (void **)(56 * v4 + a1[4] + 32);
      do
      {
        unint64_t v8 = *v7;
        v7 += 7;

        v6 -= 56;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *,re::audio::PHASEOccluderUpdateData *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      objc_storeStrong((id *)(a3 + 32), *(id *)(v5 + 32));
      uint64_t v7 = *(void *)(v5 + 40);
      *(unsigned char *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(unsigned char *)(v5 + 48);
      *(void *)(a3 + 40) = v7;
      v5 += 56;
      a3 += 56;
    }
    while (v5 != a2);
  }
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderUpdateData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::audio::PHASEOccluderUpdateData>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<re::audio::PHASEOccluderData>::DynamicArray(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::DynamicArray<re::audio::PHASEOccluderUpdateData>::DynamicArray(a2, a3);
}

uint64_t std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::__shared_ptr_pointer<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *,std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>,std::allocator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DB1D8;
  std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::~__value_func[abi:ne180100](&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

{
  uint64_t vars8;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6DB1D8;
  std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::~__value_func[abi:ne180100](&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void *std::__shared_ptr_pointer<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *,std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>,std::allocator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::operator()(a1 + 32, *(void *)(a1 + 24));
  return std::__function::__value_func<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::__shared_ptr_pointer<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *,std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>,std::allocator<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t std::function<void ()(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  uint64_t v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61) {
LABEL_23:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v12);
    uint64_t v10 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memmove(result, v6, v14);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v10) >> 3;
  if (v17 >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    char v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v10)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v10);
    uint64_t v10 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    char v19 = v10;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v10[v14];
  return result;
}

uint64_t std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26E6DB298;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  return a1;
}

void std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26E6DB298;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  *uint64_t v2 = &unk_26E6DB298;
  std::__compressed_pair_elem<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DB298;
  return std::__compressed_pair_elem<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::operator()(uint64_t a1, id *a2, void **a3)
{
  uint64_t v4 = *a3;
  id v5 = *a2;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 56);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3321888768;
  _OWORD v16[2] = ___ZZN2re18AudioManager_PHASE13prepareSourceERNS_16AudioSourceStateE6CMTimeU13block_pointerFvP7NSErrorEENK3__0clEP11AUAudioUnitS5__block_invoke;
  void v16[3] = &unk_26E6DB310;
  uint64_t v22 = v7;
  uint64_t v8 = *(NSObject **)(a1 + 16);
  id v17 = *(id *)(a1 + 24);
  id v9 = v6;
  id v18 = v9;
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 8);
  id v21 = v10;
  uint64_t v23 = v11;
  id v12 = v5;
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 48);
  id v19 = v12;
  uint64_t v24 = v14;
  int v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(void **)(a1 + 72);
  uint64_t v26 = *(void *)(a1 + 64);
  id v20 = v15;
  dispatch_async(v8, v16);

  if (v25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  }
}

uint64_t std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(id *)(a2 + 16);
  id v5 = _Block_copy(*(const void **)(a2 + 24));
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v7;
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(id *)(a2 + 64);
  return a1;
}

void std::__function::__alloc_func<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0,std::allocator<re::AudioManager_PHASE::prepareSource(re::AudioSourceState &,CMTime,void({block_pointer})(NSError *))::$_0>,void ()(AUAudioUnit *,NSError *)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  uint64_t v3 = *(void **)(a1 + 8);
}

void ___ZZN2re18AudioManager_PHASE13prepareSourceERNS_16AudioSourceStateE6CMTimeU13block_pointerFvP7NSErrorEENK3__0clEP11AUAudioUnitS5__block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v3)
  {
    uint64_t v4 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Aborting callback since the engine was shut down.", buf, 2u);
    }
  }
  else if (*(void *)(a1 + 40))
  {
    id v5 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)int buf = 138412290;
      uint64_t v12 = v9;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Could not instantiate audio generator AU. %@", buf, 0xCu);
    }
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, *(void *)(a1 + 40));
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 80) + 456), *(id *)(a1 + 48));
    objc_storeStrong((id *)(*(void *)(a1 + 88) + 280), *(id *)(a1 + 48));
    uint64_t v7 = *(void *)(v2 + 520);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
    v10[0] = *(void *)(a1 + 88);
    v10[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    re::AudioManager_PHASE_Async::prepareSourceAsync(v7, v10, *(void *)(a1 + 104), *(void **)(a1 + 56), *(void **)(v2 + 536));
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
  }
}

void sub_233593900(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_88c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  *(void *)(result + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a2 + 88);
  *(void *)(result + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_88c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = *a3;
  id v17 = (void *)(a1 + 16);
  id v18 = operator new(0x38uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  char v43 = 0;
  *id v18 = 0;
  v18[1] = v9;
  id v19 = (std::string *)(v18 + 2);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v20 = *v16;
    v18[4] = *((void *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  uint64_t v18[5] = 0;
  _OWORD v18[6] = 0;
  char v43 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float32_t v27 = operator new(8 * *(void *)&prime);
          float32x2_t v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          double v30 = (void *)*v17;
          if (*v17)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v17;
            __int16 v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *double v30 = *v36;
                  *__int16 v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  __int16 v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                double v30 = v36;
                __int16 v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        double v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  float v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    *float v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = i;
  *(void *)(*(void *)a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v17;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    float v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_233593DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::AudioManager_PHASE::MixGroupState>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,re::AudioManager_PHASE::MixGroupState>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

re::AudioTelemetryReporter *re::AudioTelemetryReporter::AudioTelemetryReporter(re::AudioTelemetryReporter *this)
{
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unint64_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v4 = dispatch_queue_create("AudioTelemetry", v3);
  id v5 = *(void **)this;
  *(void *)this = v4;

  return this;
}

void re::AudioTelemetryReporter::initializeTimerWith(uint64_t a1, NSObject *a2, void *a3, double a4)
{
  id v7 = a3;
  dispatch_object_t object = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, a2);
  dispatch_source_set_timer(object, 0, (unint64_t)(a4 * 1000000000.0), 0x989680uLL);
  re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)(a1 + 8), (id *)&object);
  unint64_t v8 = object;
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 3221225472;
  handler[2] = ___ZN2re22AudioTelemetryReporter19initializeTimerWithEdPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFNS0_15TelemetryReportEvE_block_invoke;
  handler[3] = &unk_264BE3210;
  id v11 = v7;
  uint64_t v12 = a1;
  id v9 = v7;
  dispatch_source_set_event_handler(v8, handler);
  dispatch_resume(object);
}

void sub_233593FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  id result = *a2;
  *(void *)(v5 + 8 * v4) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void ___ZN2re22AudioTelemetryReporter19initializeTimerWithEdPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFNS0_15TelemetryReportEvE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 40);
  id v6 = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  unint64_t v3 = v2;
  if (v2)
  {
    id v4 = v6;
    id v5 = v3;
    re::AudioTelemetryReporter::sendTelemetryReport(v1, v6, v3);
  }
}

void re::AudioTelemetryReporter::sendTelemetryReport(NSObject **a1, void *a2, void *a3)
{
  id v4 = *a1;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3321888768;
  v7[2] = ___ZN2re22AudioTelemetryReporter19sendTelemetryReportENS0_15TelemetryReportE_block_invoke;
  void v7[3] = &__block_descriptor_48_ea8_32c50_ZTSN2re22AudioTelemetryReporter15TelemetryReportE_e5_v8__0l;
  id v8 = a2;
  id v9 = a3;
  id v5 = a3;
  id v6 = a2;
  dispatch_async(v4, v7);
}

void re::AudioTelemetryReporter::~AudioTelemetryReporter(id *this)
{
  uint64_t v2 = *this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re22AudioTelemetryReporterD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = this;
  dispatch_sync(v2, block);
  id v3 = *this;
  *this = 0;

  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)(this + 1));
}

void ___ZN2re22AudioTelemetryReporterD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    id v3 = *(dispatch_source_t **)(v1 + 40);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        dispatch_source_cancel(*v3);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
    uint64_t v5 = *(void *)(v1 + 24);
    id v6 = *(void ***)(v1 + 40);
    *(void *)(v1 + 24) = 0;
    if (v5)
    {
      uint64_t v7 = 8 * v5;
      do
      {
        id v8 = *v6++;

        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    *(void *)(v1 + 24) = 0;
  }
  ++*(_DWORD *)(v1 + 32);
}

void ___ZN2re22AudioTelemetryReporter19sendTelemetryReportENS0_15TelemetryReportE_block_invoke(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.tdgaudio.");
  uint64_t v2 = (const char *)[*(id *)(a1 + 32) UTF8String];
  id v3 = v2;
  int v4 = SHIBYTE(v22);
  if (v22 >= 0) {
    size_t v5 = HIBYTE(v22);
  }
  else {
    size_t v5 = (size_t)__p[1];
  }
  size_t v6 = strlen(v2);
  unint64_t v7 = v5 + v6;
  if (v5 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v6;
  if (v7 <= 0x16)
  {
    unint64_t v17 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(vre::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)this + 17) = v5 + v6;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  uint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v13 = v7 | 7;
  }
  uint64_t v14 = v13 + 1;
  p_dst = (long long *)operator new(v13 + 1);
  *((void *)&__dst + 1) = v7;
  unint64_t v17 = v14 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_7:
    if (v4 >= 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    memmove(p_dst, v10, v5);
  }
LABEL_11:
  id v11 = (char *)p_dst + v5;
  if (v8) {
    memmove(v11, v3, v8);
  }
  v11[v8] = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = __dst;
  int64_t v22 = v17;
  *(void *)&long long __dst = 0;
  *((void *)&__dst + 1) = &__dst;
  unint64_t v17 = 0x3032000000;
  id v18 = __Block_byref_object_copy__5;
  id v19 = __Block_byref_object_dispose__5;
  id v20 = xpc_dictionary_create(0, 0, 0);
  uint64_t v12 = *(void **)(a1 + 40);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  void v15[2] = ___ZN2re22AudioTelemetryReporter19sendTelemetryReportENS0_15TelemetryReportE_block_invoke_3;
  _OWORD v15[3] = &unk_264BE3238;
  void v15[4] = &__dst;
  [v12 enumerateKeysAndObjectsUsingBlock:v15];
  analytics_send_event_lazy();
  _Block_object_dispose(&__dst, 8);

  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2335944F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void ___ZN2re22AudioTelemetryReporter19sendTelemetryReportENS0_15TelemetryReportE_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    xpc_dictionary_set_string(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (const char *)[v9 UTF8String], (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      size_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      unint64_t v7 = (const char *)[v9 UTF8String];
      [v5 doubleValue];
      xpc_dictionary_set_double(v6, v7, v8);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        xpc_dictionary_set_int64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (const char *)[v9 UTF8String], (int)objc_msgSend(v5, "intValue"));
      }
    }
  }
}

void sub_23359469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id ___ZN2re22AudioTelemetryReporter19sendTelemetryReportENS0_15TelemetryReportE_block_invoke_2(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id __copy_helper_block_ea8_32c50_ZTSN2re22AudioTelemetryReporter15TelemetryReportE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(id *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c50_ZTSN2re22AudioTelemetryReporter15TelemetryReportE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

void *re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    int v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::AudioManager::AudioManager(re::AudioManager *this)
{
  *(void *)this = &unk_26E6DB790;
  uint64_t v2 = MEMORY[0x263EF83A0];
  id v3 = MEMORY[0x263EF83A0];
  *(void *)this = &unk_26E6DB390;
  *((void *)this + 1) = v2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 1065353216;
  *((unsigned char *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1065353216;
  *((unsigned char *)this + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *((unsigned char *)this + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((_DWORD *)this + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((unsigned char *)this + 29re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((void *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *(_OWORD *)((char *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 32re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 29re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_DWORD *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1065353216;
  re::AudioSessionCache::AudioSessionCache((NSObject **)this + 45);
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1065353216;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 59) = 0;
  operator new();
}

void sub_233594A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id v20 = v19;

  re::InsertionOrderedMap<unsigned long long,__CFString const*,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~InsertionOrderedMap(v14 + 432);
  re::AudioSessionCache::~AudioSessionCache(v18);
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::~__hash_table(v14 + 320);
  std::unique_ptr<re::AudioManager::PrivateData>::reset[abi:ne180100](v17, 0);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(v14 + 80);

  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void re::AudioManager::updateSharedAcousticPropertiesFromDefaults(re::AudioManager *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
  *((_DWORD *)this + 71) = 1065353216;
  id v3 = [v2 objectForKey:@"com.apple.re.voiceGain_PHASE_dB"];
  int v4 = v3;
  if (v3)
  {
    [v3 floatValue];
    float v6 = fminf(v5, 10.0);
    *((float *)this + 69) = v6;
    unint64_t v7 = (re *)[v4 floatValue];
    if (v6 != v8)
    {
      id v9 = (id)*re::audioLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        [v4 floatValue];
        double v27 = *((float *)this + 69);
        int v33 = 134218240;
        double v34 = v28;
        __int16 v35 = 2048;
        double v36 = v27;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Clamping provided PHASE voice level correction %f dB to %f dB", (uint8_t *)&v33, 0x16u);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 69) = 0;
  }
  unint64_t v10 = [v2 objectForKey:@"com.apple.re.sharedReverbSendLevel_PHASE_dB"];
  id v11 = v10;
  if (v10)
  {
    [v10 floatValue];
    float v13 = fminf(v12, 20.0);
    *((float *)this + 70) = v13;
    uint64_t v14 = (re *)[v11 floatValue];
    if (v13 != v15)
    {
      uint64_t v16 = (id)*re::audioLogObjects(v14);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        [v11 floatValue];
        double v29 = *((float *)this + 70);
        int v33 = 134218240;
        double v34 = v30;
        __int16 v35 = 2048;
        double v36 = v29;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Clamping provided PHASE shared reverb send level %f dB to %f dB", (uint8_t *)&v33, 0x16u);
      }
    }
  }
  else if (_os_feature_enabled_impl())
  {
    *((_DWORD *)this + 70) = 0;
  }
  else
  {
    *((_DWORD *)this + 70) = -1046478848;
  }
  unint64_t v17 = [v2 objectForKey:@"com.apple.re.sharedReferenceDistance"];
  id v18 = v17;
  if (v17)
  {
    [v17 floatValue];
    float v20 = fmaxf(fminf(v19, 1.5), 0.2);
    *((float *)this + 71) = v20;
    unint64_t v17 = (void *)[v18 floatValue];
    if (v20 != v21)
    {
      int64_t v22 = (id)*re::audioLogObjects((re *)v17);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        [v18 floatValue];
        double v31 = *((float *)this + 71);
        int v33 = 134218240;
        double v34 = v32;
        __int16 v35 = 2048;
        double v36 = v31;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Clamping provided reference distance %f m to %f m", (uint8_t *)&v33, 0x16u);
      }
    }
  }
  BOOL v23 = *re::audioLogObjects((re *)v17);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    double v24 = *((float *)this + 70);
    double v25 = *((float *)this + 69);
    double v26 = *((float *)this + 71);
    int v33 = 134218496;
    double v34 = v24;
    __int16 v35 = 2048;
    double v36 = v25;
    __int16 v37 = 2048;
    double v38 = v26;
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Applying %f dB reverb send for PHASE control path, %f dB voice gain for PHASE control path, and %f m reference distance", (uint8_t *)&v33, 0x20u);
  }
}

void sub_233594E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2re12AudioManagerC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(re::AudioManager **)(a1 + 40);
  uint64_t v2 = (re *)[*(id *)(a1 + 32) isCancelled];
  if (v2)
  {
    id v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v4 = 0;
      _os_log_debug_impl(&dword_233120000, v3, OS_LOG_TYPE_DEBUG, "Aborting callback since the engine was shut down.", v4, 2u);
    }
  }
  else
  {
    re::AudioManager::updateSharedAcousticPropertiesFromDefaults(v1);
    *((unsigned char *)v1 + 29re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
  }
}

uint64_t re::InsertionOrderedMap<unsigned long long,__CFString const*,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~InsertionOrderedMap(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a1);
}

void re::AudioSessionCache::~AudioSessionCache(re::AudioSessionCache *this)
{
}

void re::AudioManager::~AudioManager(re::AudioManager *this)
{
  *(void *)this = &unk_26E6DB390;
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    id v3 = (const void *)i[12];
    if (v3) {
      CFRelease(v3);
    }
  }
  int v4 = (unint64_t *)*((void *)this + 59);
  float v5 = (unint64_t *)*((void *)this + 60);
  while (v4 != v5)
  {
    float v6 = (const void *)std::__hash_table<std::__hash_value_type<unsigned long long,__CFString const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,__CFString const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 432, *v4, v4)[3];
    if (v6) {
      CFRelease(v6);
    }
    ++v4;
  }
  unint64_t v7 = (const void *)*((void *)this + 8);
  if (v7) {
    CFRelease(v7);
  }
  for (unint64_t j = (CFTypeRef *)((char *)this + 96); ; CFRelease(j[3]))
  {
    unint64_t j = (CFTypeRef *)*j;
    if (!j) {
      break;
    }
  }
  for (uint64_t k = (CFTypeRef *)((char *)this + 240); ; CFRelease(k[2]))
  {
    uint64_t k = (CFTypeRef *)*k;
    if (!k) {
      break;
    }
  }
  notify_cancel(*((_DWORD *)this + 72));
  unint64_t v10 = (void *)*((void *)this + 59);
  if (v10)
  {
    *((void *)this + 60) = v10;
    operator delete(v10);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 432);
  re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 46);

  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)this + 320);
  std::unique_ptr<re::AudioManager::PrivateData>::reset[abi:ne180100]((id **)this + 39, 0);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 224);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 80);

  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::~__hash_table((uint64_t)this + 16);
}

void re::AudioManager::addServiceNotificationCallback(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)&long long v6 = a2;
  *((void *)&v6 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = a3;
  id v5 = a4;
  REAudioServicesNotificationCallbackRegistry::registerCallback(a1 + 40, &v6, v5);
  if ((unint64_t)(char)v6 <= 5 && ((0x37u >> v6) & 1) != 0 && BYTE1(v6) == 3) {
    (*(void (**)(uint64_t *, void, void))(*a1 + 96))(a1, dword_23437A4FC[(char)v6], *((void *)&v6 + 1));
  }
}

void sub_233595210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *re::AudioManager::removeServiceNotificationCallback(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  id result = REAudioServicesNotificationCallbackRegistry::unregisterCallback(a1 + 40, (unsigned __int8 *)&v5);
  if ((unint64_t)(char)v5 <= 5 && ((0x37u >> v5) & 1) != 0 && BYTE1(v5) == 3) {
    return (uint64_t *)(*(uint64_t (**)(void *, void, uint64_t))(*a1 + 104))(a1, dword_23437A4FC[(char)v5], v6);
  }
  return result;
}

void re::AudioManager::clearAllRenderingState(re::AudioManager *this)
{
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    id v3 = (const void *)i[12];
    if (v3) {
      CFRelease(v3);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::clear((uint64_t)this + 16);
  re::AudioSessionCache::clear((os_unfair_lock_s *)this + 90);
}

void re::AudioManager::triggerServiceReset(re::AudioManager *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "AudioManager %p clearing state and triggering reset callbacks", (uint8_t *)&buf, 0xCu);
  }
  (*(void (**)(re::AudioManager *))(*(void *)this + 856))(this);
  (*(void (**)(re::AudioManager *))(*(void *)this + 904))(this);
  REAudioServicesNotificationCallbackRegistry::getCallbacksForType((uint64_t)this + 320, 3, (uint64_t **)&buf);
  int v4 = (const void **)*((void *)&buf + 1);
  for (uint64_t i = (const void **)buf; i != v4; ++i)
  {
    uint64_t v5 = (void (**)(void))_Block_copy(*i);
    v5[2]();
  }
  p_long long buf = (void **)&buf;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_buf);
}

void sub_233595468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void re::AudioManager::triggerServiceLost(re::AudioManager *this)
{
  REAudioServicesNotificationCallbackRegistry::getCallbacksForType((uint64_t)this + 320, 2, v4);
  uint64_t v1 = (const void **)v4[0];
  uint64_t v2 = v4[1];
  while (v1 != (const void **)v2)
  {
    id v3 = (void (**)(void))_Block_copy(*v1);
    v3[2]();

    ++v1;
  }
  uint64_t v5 = (void **)v4;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_23359550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void re::AudioManager::forceShutdown(id **this)
{
  [*this[39] cancel];
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear((uint64_t)(this + 40));
}

id re::AudioManager::engineCancellable(id **this)
{
  return *this[39];
}

void re::AudioManager::beforeFrameUpdate(re::AudioManager *this)
{
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    for (unint64_t j = (void *)i[9]; j; unint64_t j = (void *)*j)
      std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::clear((uint64_t)(j + 8));
  }
}

void re::AudioManager::afterFrameUpdate(re::AudioManager *this, float a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 29re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  if (*((unsigned char *)this + 208))
  {
    unsigned int v44 = (char *)this + 128;
    size_t v4 = *((void *)this + 31);
  }
  else
  {
    size_t v4 = *((void *)this + 31);
    if (!v4) {
      goto LABEL_72;
    }
    unsigned int v44 = 0;
  }
  long long v48 = 0u;
  long long v49 = 0u;
  float v50 = 1.0;
  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>((uint64_t)&v48, v4);
  uint64_t v5 = (uint64_t *)*((void *)this + 30);
  float32x2_t v45 = (void *)((char *)this + 240);
  if (v5)
  {
    unint64_t v6 = *((void *)&v48 + 1);
    do
    {
      int v7 = *((_DWORD *)v5 + 24);
      uint64_t v8 = *(uint64_t *)((char *)v5 + 100);
      unint64_t v9 = v5[2];
      long long v10 = *((_OWORD *)v5 + 3);
      *(_OWORD *)&uint8_t buf[8] = *((_OWORD *)v5 + 2);
      *(_OWORD *)&unsigned char buf[24] = v10;
      long long v11 = *((_OWORD *)v5 + 5);
      *(_OWORD *)&buf[40] = *((_OWORD *)v5 + 4);
      *(_OWORD *)&buf[56] = v11;
      unint64_t v12 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v12 >> 47) ^ v12);
      unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
      if (v6)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
          if (v14 >= v6) {
            unint64_t v2 = v14 % v6;
          }
        }
        else
        {
          unint64_t v2 = v14 & (v6 - 1);
        }
        uint64_t v16 = *(void **)(v48 + 8 * v2);
        if (v16)
        {
          for (uint64_t i = (void *)*v16; i; uint64_t i = (void *)*i)
          {
            unint64_t v18 = i[1];
            if (v18 == v14)
            {
              if (i[2] == v9) {
                goto LABEL_46;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v18 >= v6) {
                  v18 %= v6;
                }
              }
              else
              {
                v18 &= v6 - 1;
              }
              if (v18 != v2) {
                break;
              }
            }
          }
        }
      }
      float v19 = (char *)operator new(0x70uLL);
      long long v20 = *(_OWORD *)buf;
      *(_OWORD *)(v19 + 40) = *(_OWORD *)&buf[16];
      long long v21 = *(_OWORD *)&buf[48];
      *(_OWORD *)(v19 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(_OWORD *)&buf[32];
      *(_OWORD *)(v19 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v21;
      *(void *)float v19 = 0;
      *((void *)v19 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v14;
      *((void *)v19 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v9;
      *((void *)v19 + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = *(void *)&buf[64];
      *(_OWORD *)(v19 + 24) = v20;
      *((_DWORD *)v19 + 24) = v7;
      *(void *)(v19 + 100) = v8;
      float v22 = (float)(unint64_t)(*((void *)&v49 + 1) + 1);
      if (!v6 || (float)(v50 * (float)v6) < v22)
      {
        BOOL v23 = v6 < 3 || (v6 & (v6 - 1)) != 0;
        unint64_t v24 = v23 | (2 * v6);
        unint64_t v25 = vcvtps_u32_f32(v22 / v50);
        if (v24 <= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v24;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>((uint64_t)&v48, v26);
        unint64_t v6 = *((void *)&v48 + 1);
        if ((*((void *)&v48 + 1) & (*((void *)&v48 + 1) - 1)) != 0)
        {
          if (v14 >= *((void *)&v48 + 1)) {
            unint64_t v2 = v14 % *((void *)&v48 + 1);
          }
          else {
            unint64_t v2 = v14;
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&v48 + 1) - 1) & v14;
        }
      }
      uint64_t v27 = v48;
      float v28 = *(void **)(v48 + 8 * v2);
      if (v28)
      {
        *(void *)float v19 = *v28;
      }
      else
      {
        *(void *)float v19 = v49;
        *(void *)&long long v49 = v19;
        *(void *)(v27 + 8 * vre::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &v49;
        if (!*(void *)v19) {
          goto LABEL_45;
        }
        unint64_t v29 = *(void *)(*(void *)v19 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v29 >= v6) {
            v29 %= v6;
          }
        }
        else
        {
          v29 &= v6 - 1;
        }
        float v28 = (void *)(v48 + 8 * v29);
      }
      *float v28 = v19;
LABEL_45:
      ++*((void *)&v49 + 1);
LABEL_46:
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  if (objc_opt_respondsToSelector())
  {
    id v30 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    double v31 = (void *)*v45;
    if (*v45)
    {
      do
      {
        if (*((unsigned char *)v31 + 108)) {
          float v32 = &unk_26E749D28;
        }
        else {
          float v32 = &unk_26E749D40;
        }
        float32x4_t v51 = @"STSAdditionalLabelInfoKey_DeferToSystemTuning";
        unsigned __int32 v52 = v32;
        int v33 = [NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
        [v30 setObject:v33 forKeyedSubscript:v31[2]];

        double v31 = (void *)*v31;
      }
      while (v31);
    }
    double v34 = (void *)*((void *)this + 9);
    id v47 = 0;
    [v34 updateGlobalState:v44 labelStates:&v48 additionalLabelInfo:v30 error:&v47];
    id v35 = v47;

    if (!v35) {
      goto LABEL_59;
    }
  }
  else
  {
    double v36 = (void *)*((void *)this + 9);
    id v46 = 0;
    [v36 updateGlobalState:v44 labelStates:&v48 error:&v46];
    id v35 = v46;
    if (!v35)
    {
LABEL_59:
      if (*((unsigned char *)this + 208)) {
        *((unsigned char *)this + 20re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      }
      for (unint64_t j = (CFTypeRef *)((char *)this + 240); ; CFRelease(j[2]))
      {
        unint64_t j = (CFTypeRef *)*j;
        if (!j) {
          break;
        }
      }
      if (*((void *)this + 31))
      {
        float v40 = (void *)*v45;
        if (*v45)
        {
          do
          {
            double v41 = (void *)*v40;
            operator delete(v40);
            float v40 = v41;
          }
          while (v41);
        }
        *((void *)this + 30) = 0;
        uint64_t v42 = *((void *)this + 29);
        if (v42)
        {
          for (uint64_t k = 0; k != v42; ++k)
            *(void *)(*((void *)this + 28) + 8 * k) = 0;
        }
        *((void *)this + 3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v48);

LABEL_72:
      re::AudioSessionCache::update((re::AudioManager *)((char *)this + 360));
    }
  }
  __int16 v37 = (re *)(*(uint64_t (**)(re::AudioManager *))(*(void *)this + 112))(this);
  if (v37)
  {
    double v38 = *re::audioLogObjects(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "[RE/STS] failed to update STS states", buf, 2u);
    }
  }
  goto LABEL_59;
}

void sub_233595AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void re::AudioManager::setMixGroupEffectiveGain(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v39 = a3;
  unint64_t v40 = a2;
  double v41 = &v40;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 16, &v40, (uint64_t)&std::piecewise_construct, &v41);
  long long v10 = std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9 + 7, a3, &v39);
  long long v11 = (uint64_t *)(v10 + 24);
  unint64_t v12 = v10 + 48;
  unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v10 + 48), a4);
  unint64_t v14 = v13;
  unint64_t v15 = *((void *)v10 + 4);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v5 = v13;
      if (v13 >= v15) {
        unint64_t v5 = v13 % v15;
      }
    }
    else
    {
      unint64_t v5 = (v15 - 1) & v13;
    }
    unint64_t v18 = *(char ***)(*((void *)v10 + 3) + 8 * v5);
    if (v18)
    {
      for (uint64_t i = *v18; i; uint64_t i = *(char **)i)
      {
        unint64_t v20 = *((void *)i + 1);
        if (v20 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(v10 + 56), (unsigned __int8 *)i + 16, (unsigned __int8 *)a4))goto LABEL_44; {
        }
          }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15) {
              v20 %= v15;
            }
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v5) {
            break;
          }
        }
      }
    }
    long long v11 = (uint64_t *)(v10 + 24);
    unint64_t v12 = v10 + 48;
  }
  long long v21 = (char *)operator new(0x38uLL);
  uint64_t i = v21;
  *(void *)long long v21 = 0;
  *((void *)v21 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v14;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v21 + 16), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v21 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = *(_OWORD *)a4;
    *((void *)v21 + 4) = *(void *)(a4 + 16);
  }
  *((_DWORD *)i + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)i + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = _D0;
  float v27 = (float)(unint64_t)(*((void *)v10 + 6) + 1);
  float v28 = *((float *)v10 + 14);
  if (!v15 || (float)(v28 * (float)v15) < v27)
  {
    BOOL v29 = 1;
    if (v15 >= 3) {
      BOOL v29 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v15);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t v32 = v31;
    }
    else {
      size_t v32 = v30;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v11, v32);
    unint64_t v15 = *((void *)v10 + 4);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v5 = v14 % v15;
      }
      else {
        unint64_t v5 = v14;
      }
    }
    else
    {
      unint64_t v5 = (v15 - 1) & v14;
    }
  }
  uint64_t v33 = *v11;
  double v34 = *(void **)(*v11 + 8 * v5);
  if (v34)
  {
    *(void *)uint64_t i = *v34;
LABEL_42:
    *double v34 = i;
    goto LABEL_43;
  }
  uint64_t v36 = *((void *)v10 + 5);
  id v35 = v10 + 40;
  *(void *)uint64_t i = v36;
  void *v35 = i;
  *(void *)(v33 + 8 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v35;
  if (*(void *)i)
  {
    unint64_t v37 = *(void *)(*(void *)i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v37 >= v15) {
        v37 %= v15;
      }
    }
    else
    {
      v37 &= v15 - 1;
    }
    double v34 = (void *)(*v11 + 8 * v37);
    goto LABEL_42;
  }
LABEL_43:
  ++*v12;
LABEL_44:
  uint64_t v38 = *a5;
  *((_WORD *)i + 24) = *((_WORD *)a5 + 4);
  *((void *)i + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v38;
}

void sub_233595DFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager::updateSourceState(re::AudioManager *this, const re::AudioSourceState *a2)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(re::AudioManager *))(*(void *)this + 920))(this);
  if (*((void *)a2 + 56) == -1)
  {
    *((void *)a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    return;
  }
  if (!*((void *)a2 + 5) && *(_OWORD *)((char *)a2 + 232) != 0)
  {
    if (*((unsigned char *)this + 272))
    {
      *((void *)a2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *((void *)a2 + 29);
      unint64_t v5 = *(void (**)(re::AudioManager *, const re::AudioSourceState *))(*(void *)this + 936);
      unint64_t v6 = this;
      int v7 = a2;
LABEL_7:
      v5(v6, v7);
      return;
    }
    return;
  }
  unint64_t v8 = *((void *)a2 + 32);
  if (v8) {
    unint64_t v9 = v8 >> 1;
  }
  else {
    unint64_t v9 = v8 >> 1;
  }
  if (!v9)
  {
    if (v4) {
      (*(void (**)(re::AudioManager *, const re::AudioSourceState *))(*(void *)this + 912))(this, a2);
    }
    unint64_t v5 = *(void (**)(re::AudioManager *, const re::AudioSourceState *))(*(void *)this + 928);
    unint64_t v6 = this;
    int v7 = a2;
    goto LABEL_7;
  }
  if (*((void *)this + 8))
  {
    long long v10 = (uint64_t *)((char *)a2 + 448);
    long long v11 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 2, (unint64_t *)a2 + 56);
    if (v11 && (unint64_t v12 = (void *)*((void *)v11 + 12)) != 0)
    {
      id v13 = v12;
    }
    else
    {
      unint64_t v14 = *re::audioLogObjects(v11);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *v10;
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "[RE/STS] Creating sts-label-count dictionary for scene %llu", buf, 0xCu);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFB78], MEMORY[0x263EFFF90]);
      *(void *)long long buf = (char *)a2 + 448;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 16, (unint64_t *)a2 + 56, (uint64_t)&std::piecewise_construct, (void **)buf)[12] = Mutable;
      id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 2, (unint64_t *)a2 + 56)[12];
      if (!v13)
      {
        unint64_t v40 = *re::audioLogObjects(0);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v41 = *v10;
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v41;
          _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, "[RE/STS] Could not find sts-label-count dictionary for scene ID %llu", buf, 0xCu);
        }
        return;
      }
    }
    unint64_t v17 = (__CFString *)*((id *)a2 + 98);
    if (!v17)
    {
      if (*((void *)a2 + 32)) {
        unint64_t v18 = (const char *)*((void *)a2 + 33);
      }
      else {
        unint64_t v18 = (char *)a2 + 257;
      }
      float v19 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v18, 0x8000100u);
      *((void *)a2 + 9re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v19;
      if (!v19)
      {
        snprintf(buf, 0x64uLL, "badlabel%llu", *((void *)a2 + 85));
        std::string::basic_string[abi:ne180100]<0>(v89, buf);
        uint64_t v42 = (re *)re::audio::throttledLog(OS_LOG_TYPE_ERROR, (long long *)v89);
        int v43 = (int)v42;
        if (v92 < 0) {
          operator delete(*(void **)v89);
        }
        if (v43)
        {
          unsigned int v44 = (id)*re::audioLogObjects(v42);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = *((void *)a2 + 85);
            if (*((void *)a2 + 32)) {
              float v77 = (char *)*((void *)a2 + 33);
            }
            else {
              float v77 = (char *)a2 + 257;
            }
            *(_DWORD *)int v89 = 134218242;
            *(void *)&v89[4] = v76;
            __int16 v90 = 2080;
            int v91 = v77;
            _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, "[RE/STS] AudioManager failed to create sts label for token %llu's introspected value %s", v89, 0x16u);
          }
        }
        goto LABEL_109;
      }
      unint64_t v17 = v19;
      unint64_t v20 = [v13 objectForKey:v17];
      long long v21 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v20, "intValue") + 1);
      [v13 setValue:v21 forKey:v17];

      BOOL v23 = (id)*re::audioLogObjects(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *((void *)a2 + 85);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v24;
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "[RE/STS] AudioManager Tracking STS label %@ with token: %llu", buf, 0x16u);
      }
    }
    unint64_t v25 = [v13 objectForKey:v17];
    if ([v25 intValue] != 1 && !*((unsigned char *)a2 + 792))
    {
LABEL_108:

LABEL_109:
      return;
    }
    if ([v25 intValue] == 1) {
      *((unsigned char *)a2 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
    }
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (*((unsigned char *)a2 + 280)) {
      unsigned __int8 v26 = 2;
    }
    else {
      unsigned __int8 v26 = *((unsigned char *)a2 + 476);
    }
    if (v26 <= 2u) {
      LODWORD(v9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = dword_23437A514[(char)v26];
    }
    ShouldConfigureTuningForSTSLabels = (re *)REAudioShouldConfigureTuningForSTSLabels();
    int v85 = (int)ShouldConfigureTuningForSTSLabels;
    if (*((unsigned char *)a2 + 793) && *((unsigned __int8 *)a2 + 794) == v26)
    {
LABEL_83:
      long long v55 = *((_OWORD *)a2 + 21);
      *(_OWORD *)long long buf = *((_OWORD *)a2 + 20);
      *(_OWORD *)&uint8_t buf[16] = v55;
      long long v56 = *((_OWORD *)a2 + 23);
      long long v94 = *((_OWORD *)a2 + 22);
      long long v95 = v56;
      if (v26 == 2)
      {
        long long v57 = xmmword_23435FD50;
        HIDWORD(v57) = *(_DWORD *)((unint64_t)buf | 0xC);
        long long v58 = xmmword_23435FD60;
        HIDWORD(v5re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_DWORD *)&buf[28];
        *(_OWORD *)long long buf = v57;
        *(_OWORD *)&uint8_t buf[16] = v58;
        long long v59 = xmmword_23435FD80;
        HIDWORD(v59) = HIDWORD(v94);
        long long v94 = v59;
      }
      float v60 = 1.0;
      float v61 = 1.0;
      if (*((unsigned char *)a2 + 136))
      {
        unint64_t v62 = *((void *)a2 + 56);
        unint64_t v63 = re::AudioSourceState::playbackHostConnectionIdentifier(a2);
        if (*((void *)a2 + 19)) {
          float v64 = (char *)*((void *)a2 + 20);
        }
        else {
          float v64 = (char *)a2 + 153;
        }
        std::string::basic_string[abi:ne180100]<0>(v89, v64);
        __int16 v65 = re::AudioManager::mixGroupState((uint64_t)this, v62, v63, v89);
        if (v92 < 0) {
          operator delete(*(void **)v89);
        }
        if (v65) {
          float v61 = *((float *)v65 + 1);
        }
      }
      char v66 = v85 ^ 1;
      if (v26) {
        char v66 = 1;
      }
      if ((v66 & 1) == 0) {
        float v60 = *((float *)this + 71);
      }
      *(void *)float v86 = (char *)a2 + 448;
      __int16 v67 = std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 16, (unint64_t *)a2 + 56, (uint64_t)&std::piecewise_construct, (void **)v86);
      float v68 = 50.0;
      if (v26 == 1)
      {
        float v69 = 1.0;
      }
      else
      {
        float v69 = 1.0;
        if (v67[4] != -1)
        {
          float v70 = *((float *)a2 + 20);
          float v71 = v70 + (float)(log10f(v60) * 20.0);
          if (v71 <= 20.0) {
            float v72 = v71 / 20.0;
          }
          else {
            float v72 = 1.0;
          }
          float v73 = __exp10f(v72);
          float v74 = (float)(v73 * v73) / (float)((float)(v73 * v73) + 1.0);
          float v69 = 1.0 / sqrtf(1.0 - v74);
          float v68 = v74 * 100.0;
        }
      }
      if (v26 == 1) {
        float v75 = 1.0;
      }
      else {
        float v75 = v60;
      }
      *((float *)&v96 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = log10f((float)(v69 / v75) * (float)(v61 * *((float *)a2 + 32))) * 20.0;
      *(float *)&uint64_t v97 = v68;
      BYTE4(v97) = *((unsigned char *)a2 + 280);
      re::AudioManager::storePendingStateForSTSLabel((uint64_t)this, *((const __CFString **)a2 + 98), (uint64_t)buf);
      goto LABEL_108;
    }
    float v28 = *re::audioLogObjects(ShouldConfigureTuningForSTSLabels);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *((void *)a2 + 98);
      *(_DWORD *)int v89 = 138412546;
      *(void *)&v89[4] = v29;
      __int16 v90 = 1024;
      LODWORD(v9re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v26;
      _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "[RE/STS] STSLabel %@ changed input mode to %d", v89, 0x12u);
    }
    if (!v85
      || (uint64_t v30 = *((void *)a2 + 98)) == 0
      || !*((void *)this + 8)
      || (unint64_t v31 = (re *)REAudioShouldConfigureTuningForSTSLabels(), !v31))
    {
LABEL_80:
      if (!*((unsigned char *)a2 + 793)) {
        *((unsigned char *)a2 + 79re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 1;
      }
      *((unsigned char *)a2 + 794) = v26;
      goto LABEL_83;
    }
    size_t v32 = *re::audioLogObjects(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v89 = 138412546;
      *(void *)&v89[4] = v30;
      __int16 v90 = 1024;
      LODWORD(v9re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v26;
      _os_log_impl(&dword_233120000, v32, OS_LOG_TYPE_DEFAULT, "[RE/STS] updating distance attenuation model for STS label %@ based on input mode %d", v89, 0x12u);
    }
    *(void *)float v86 = 0x447A00003F800000;
    int v87 = 1114636288;
    *(_DWORD *)bytes = 2;
    if (!v26)
    {
      int v87 = 1114636288;
      *(_DWORD *)bytes = 1;
      float v33 = *((float *)this + 71) * 1000.0;
      *(_DWORD *)float v86 = *((_DWORD *)this + 71);
      *(float *)&v86[4] = v33;
    }
    uint64_t HexCFStringForInt = re::AudioManager::getHexCFStringForInt(this, 3013);
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDataRef cf = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 4);
    uint64_t v34 = *((void *)this + 8);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v38 = *(void *)(VTable + 16);
    uint64_t v36 = (re *)(VTable + 16);
    uint64_t v37 = v38;
    if (v38) {
      uint64_t v39 = v37;
    }
    else {
      uint64_t v39 = 0;
    }
    float32x2_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v39 + 24);
    if (v45)
    {
      uint64_t v36 = (re *)v45(v34, v30, HexCFStringForInt, cf);
      int v79 = (int)v36;
      if (!v36) {
        goto LABEL_70;
      }
    }
    else
    {
      int v79 = -12782;
    }
    id v46 = *re::audioLogObjects(v36);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v89 = 138412546;
      *(void *)&v89[4] = v30;
      __int16 v90 = 1024;
      LODWORD(v9re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v79;
      _os_log_error_impl(&dword_233120000, v46, OS_LOG_TYPE_ERROR, "[RE/STS] FigSTSSetPropertyByLabel for label %@ attenuation curve error=%d", v89, 0x12u);
    }
LABEL_70:
    CFRelease(cf);
    uint64_t v80 = re::AudioManager::getHexCFStringForInt(this, 3010);
    CFDataRef cfa = CFDataCreate(allocator, v86, 12);
    uint64_t v47 = *((void *)this + 8);
    uint64_t v48 = CMBaseObjectGetVTable();
    uint64_t v51 = *(void *)(v48 + 16);
    long long v49 = (re *)(v48 + 16);
    uint64_t v50 = v51;
    if (v51) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = 0;
    }
    float32x2_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v52 + 24);
    if (v53)
    {
      long long v49 = (re *)v53(v47, v30, v80, cfa);
      int allocatora = (int)v49;
      if (!v49)
      {
LABEL_79:
        CFRelease(cfa);
        goto LABEL_80;
      }
    }
    else
    {
      int allocatora = -12782;
    }
    uint64_t v54 = *re::audioLogObjects(v49);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v89 = 138412546;
      *(void *)&v89[4] = v30;
      __int16 v90 = 1024;
      LODWORD(v9re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = allocatora;
      _os_log_error_impl(&dword_233120000, v54, OS_LOG_TYPE_ERROR, "[RE/STS] FigSTSSetPropertyByLabel for label %@ distance params error=%d", v89, 0x12u);
    }
    goto LABEL_79;
  }
}

void sub_23359694C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t *re::AudioManager::mixGroupState(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v5 = a3;
  unint64_t v18 = a3;
  unint64_t v19 = a2;
  id result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(a1 + 16), &v19);
  if (result)
  {
    int v7 = result + 7;
    unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(result + 7, v5, &v18);
    unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v8 + 48), (uint64_t)a4);
    int8x8_t v10 = *(int8x8_t *)(v8 + 32);
    if (!*(void *)&v10) {
      goto LABEL_19;
    }
    unint64_t v11 = v9;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= *(void *)&v10) {
        unint64_t v14 = v9 % *(void *)&v10;
      }
    }
    else
    {
      unint64_t v14 = (*(void *)&v10 - 1) & v9;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*((void *)v8 + 3) + 8 * v14);
    if (!v15)
    {
LABEL_19:
      uint8x8_t v16 = 0;
      goto LABEL_22;
    }
    uint8x8_t v16 = *v15;
    if (*v15)
    {
      while (1)
      {
        unint64_t v17 = *((void *)v16 + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(v8 + 56), v16 + 16, a4)) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= *(void *)&v10) {
              v17 %= *(void *)&v10;
            }
          }
          else
          {
            v17 &= *(void *)&v10 - 1;
          }
          if (v17 != v14)
          {
            uint8x8_t v16 = 0;
LABEL_21:
            unint64_t v5 = v18;
            break;
          }
        }
        uint8x8_t v16 = *(unsigned __int8 **)v16;
        if (!v16) {
          goto LABEL_21;
        }
      }
    }
LABEL_22:
    std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v7, v5, &v18);
    if (v16) {
      return (uint64_t *)(v16 + 40);
    }
    else {
      return 0;
    }
  }
  return result;
}

float re::AudioManager::mixGroupSignalPresent(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v22 = a3;
  unint64_t v23 = a2;
  unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(a1 + 16), &v23);
  float v7 = 0.0;
  if (v6)
  {
    unint64_t v8 = v6 + 7;
    unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v6 + 7, a3, &v22);
    unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v9 + 88), (uint64_t)a4);
    int8x8_t v11 = *(int8x8_t *)(v9 + 72);
    if (v11)
    {
      unint64_t v12 = v10;
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
      v13.i16[0] = vaddlv_u8(v13);
      unint64_t v14 = v13.u32[0];
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v15 = v10;
        if (v10 >= *(void *)&v11) {
          unint64_t v15 = v10 % *(void *)&v11;
        }
      }
      else
      {
        unint64_t v15 = (*(void *)&v11 - 1) & v10;
      }
      uint8x8_t v16 = *(uint64_t ***)(*((void *)v9 + 8) + 8 * v15);
      if (v16)
      {
        unint64_t v17 = *v16;
        if (*v16)
        {
          while (1)
          {
            unint64_t v18 = v17[1];
            if (v18 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(v9 + 96), (unsigned __int8 *)v17 + 16, a4))
              {
                std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v8, v22, &v22);
                return *((float *)v17 + 10);
              }
            }
            else
            {
              if (v14 > 1)
              {
                if (v18 >= *(void *)&v11) {
                  v18 %= *(void *)&v11;
                }
              }
              else
              {
                v18 &= *(void *)&v11 - 1;
              }
              if (v18 != v15)
              {
LABEL_18:
                unint64_t v19 = v22;
                unint64_t v20 = v8;
                goto LABEL_20;
              }
            }
            unint64_t v17 = (uint64_t *)*v17;
            if (!v17) {
              goto LABEL_18;
            }
          }
        }
      }
    }
    unint64_t v20 = v8;
    unint64_t v19 = a3;
LABEL_20:
    std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v20, v19, &v22);
  }
  return v7;
}

unint64_t *re::AudioManager::createListenerInScene(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = a2;
  for (__buf = 0; (unint64_t)__buf < 0x3E8; id v3 = __buf)
    arc4random_buf(&__buf, 8uLL);
  __long long buf = &v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 16, &v5, (uint64_t)&std::piecewise_construct, &__buf)[3] = v3;
  return v3;
}

uint64_t re::AudioManager::removeListenerFromScene(uint64_t this, uint64_t a2)
{
  for (uint64_t i = *(void **)(this + 32); i; uint64_t i = (void *)*i)
  {
    if (i[3] == a2) {
      i[3] = 0;
    }
  }
  return this;
}

simd_float4 *re::AudioManager::setListenerTransformAndLevel(simd_float4 *this, unint64_t a2, const simd_float4x4 *a3, float a4, uint64_t a5)
{
  if (this[3].i8[8])
  {
    simd_float4 v5 = a3->columns[0];
    simd_float4 v8 = a3->columns[1];
    simd_float4 v6 = a3->columns[2];
    simd_float4 v9 = a3->columns[3];
    int v7 = this[13].u8[0];
    this[8].i64[0] = a5;
    this[8].i64[1] = 0;
    this[9] = v5;
    this[10] = v8;
    this[11] = v6;
    this[12] = v9;
    if (!v7) {
      this[13].i8[0] = 1;
    }
  }
  return this;
}

void *re::AudioManager::sceneContainsSystemListener(re::AudioManager *this, unint64_t a2)
{
  unint64_t v6 = a2;
  id result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 2, &v6);
  if (result)
  {
    uint64_t v4 = *((void *)this + 33);
    return (void *)(result[3] == v4 && v4 != 0);
  }
  return result;
}

void re::AudioManager::applyReverbParametersToScene(re::AudioManager *this, unint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v31 = a2;
  if (!*((void *)this + 8)
    || !*((unsigned char *)this + 56)
    || !(*(unsigned int (**)(re::AudioManager *))(*(void *)this + 952))(this)
    || !REAudioShouldConfigureTuningForSTSLabels())
  {
    return;
  }
  id v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 2, &v31);
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = v3[4] != -1;
  }
  else {
    BOOL v5 = 0;
  }
  *(_DWORD *)bytes = v5;
  uint64_t HexCFStringForInt = re::AudioManager::getHexCFStringForInt(this, 1005);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 4);
  uint64_t v9 = *((void *)this + 8);
  uint64_t v10 = *MEMORY[0x263F54548];
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  unint64_t v12 = (re *)(VTable + 16);
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint8x8_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v15 + 24);
  if (v16)
  {
    unint64_t v12 = (re *)v16(v9, v10, HexCFStringForInt, v8);
    int v17 = (int)v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  else
  {
    int v17 = -12782;
  }
  unint64_t v18 = *re::audioLogObjects(v12);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    int v33 = v17;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "[RE/STS] FigSTSSetPropertyByLabel reverb enabled error=%d", buf, 8u);
  }
LABEL_17:
  CFRelease(v8);
  if (*(_DWORD *)bytes && v4[4] != -1)
  {
    int v29 = v4[4];
    CFDataRef v19 = CFDataCreate(v7, (const UInt8 *)&v29, 4);
    uint64_t v20 = *((void *)this + 8);
    uint64_t v21 = CMBaseObjectGetVTable();
    uint64_t v24 = *(void *)(v21 + 16);
    unint64_t v22 = (re *)(v21 + 16);
    uint64_t v23 = v24;
    if (v24) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = 0;
    }
    unsigned __int8 v26 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, CFDataRef))(v25 + 24);
    if (v26)
    {
      unint64_t v22 = (re *)v26(v20, v10, @"ReverbRoomType", v19);
      int v27 = (int)v22;
      if (!v22)
      {
LABEL_28:
        CFRelease(v19);
        return;
      }
    }
    else
    {
      int v27 = -12782;
    }
    float v28 = *re::audioLogObjects(v22);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v33 = v27;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "[RE/STS] FigSTSSetPropertyByLabel kSTSLabelProperty_ReverbRoomType error=%d", buf, 8u);
    }
    goto LABEL_28;
  }
}

uint64_t re::AudioManager::getHexCFStringForInt(re::AudioManager *this, uint64_t a2)
{
  unsigned int v2 = a2;
  int v12 = a2;
  id v3 = (float *)((char *)this + 80);
  unint64_t v4 = *((void *)this + 11);
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    CFAllocatorRef v7 = *(uint64_t ***)(*(void *)v3 + 8 * v6);
    if (v7)
    {
      for (uint64_t i = *v7; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return std::__hash_table<std::__hash_value_type<unsigned int,__CFString const*>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CFString const*>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v2, &v12)[3];
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%x", a2);
  std::__hash_table<std::__hash_value_type<unsigned int,__CFString const*>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CFString const*>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v2, &v12)[3] = v10;
  return std::__hash_table<std::__hash_value_type<unsigned int,__CFString const*>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CFString const*>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v2, &v12)[3];
}

void *re::AudioManager::setSceneReverbPreset(void *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v11 = a2;
  uint64_t v7 = (uint64_t)(a1 + 2);
  id result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1 + 2, &v11);
  if (!result || (result[4] == a3 ? (BOOL v9 = *((unsigned __int8 *)result + 40) == a4) : (BOOL v9 = 0), !v9))
  {
    unint64_t v10 = v11;
    int v12 = &v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v7, &v11, (uint64_t)&std::piecewise_construct, &v12)[6] = v10;
    int v12 = &v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v7, &v11, (uint64_t)&std::piecewise_construct, &v12)[4] = a3;
    int v12 = &v11;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v7, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 40) = a4;
    return (void *)(*(uint64_t (**)(void *, unint64_t))(*a1 + 944))(a1, v11);
  }
  return result;
}

uint64_t re::AudioManager::getSceneReverbPreset(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[3];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint8x8_t v5 = *(void **)(*(void *)&this[2] + 8 * v4);
    if (v5)
    {
      for (uint64_t i = (void *)*v5; i; uint64_t i = (void *)*i)
      {
        unint64_t v7 = i[1];
        if (v7 == a2)
        {
          if (i[2] == a2) {
            return i[4];
          }
        }
        else
        {
          if (v3.u32[0] > 1uLL)
          {
            if (v7 >= *(void *)&v2) {
              v7 %= *(void *)&v2;
            }
          }
          else
          {
            v7 &= *(void *)&v2 - 1;
          }
          if (v7 != v4) {
            return -1;
          }
        }
      }
    }
  }
  return -1;
}

uint64_t re::AudioManager::removeSourceFromSceneIfIncorrectlyConnected(re::AudioManager *this, const re::AudioSourceState *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 56) == -1)
  {
    unint64_t v4 = (const void *)*((void *)a2 + 98);
    if (v4)
    {
      uint8x8_t v5 = (void *)*((void *)this + 4);
      if (v5)
      {
        do
        {
          unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 2, v5 + 2);
          if (v6)
          {
            unint64_t v7 = (void *)v6[12];
            if (v7)
            {
              id v8 = v7;
              id v9 = *((id *)a2 + 98);
              unint64_t v10 = [v8 objectForKey:v9];
              if ((int)[v10 intValue] < 2)
              {
                [v8 removeObjectForKey:v9];
                int v12 = (id)*re::audioLogObjects((re *)[*((id *)this + 9) cleanupLabel:*((void *)a2 + 98)]);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v13 = *((void *)a2 + 85);
                  *(_DWORD *)long long buf = 138412546;
                  id v17 = v9;
                  __int16 v18 = 2048;
                  uint64_t v19 = v13;
                  _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "[RE/STS] AudioManager is no longer tracking STSLabel %@ after removing last token %llu", buf, 0x16u);
                }

                for (uint64_t i = *((void *)this + 30);
                      i;
                      uint64_t i = std::__hash_table<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringHash,re::AudioManager::CFStringEqual,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringEqual,re::AudioManager::CFStringHash,true>,std::allocator<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>>>::erase((void *)this + 28, (uint64_t *)i))
                {
                  while (CFStringCompare(*(CFStringRef *)(i + 16), *((CFStringRef *)a2 + 98), 0))
                  {
                    uint64_t i = *(void *)i;
                    if (!i) {
                      goto LABEL_15;
                    }
                  }
                  CFRelease(*(CFTypeRef *)(i + 16));
                }
              }
              else
              {
                unint64_t v11 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v10, "intValue") - 1);
                [v8 setValue:v11 forKey:v9];
              }
LABEL_15:
            }
          }
          uint8x8_t v5 = (void *)*v5;
        }
        while (v5);
        unint64_t v4 = (const void *)*((void *)a2 + 98);
      }
      CFRelease(v4);
      *((void *)a2 + 9re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *((unsigned char *)a2 + 79re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    }
  }
  return 0;
}

void sub_233597690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager::setCustomHRIR(re::AudioManager *this, const __CFURL *a2)
{
  *((void *)this + 37) = a2;
  return (*(uint64_t (**)(void))(*(void *)this + 960))();
}

void re::AudioManager::addTrackedCALayerEntityId(re::AudioManager *this, unint64_t a2, CFStringRef theString)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 56)) {
    return;
  }
  if (!theString)
  {
    uint64_t v19 = *re::audioLogObjects(this);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v48 = 134217984;
    unint64_t v49 = a2;
    uint64_t v20 = "[RE/STS] AudioManager has been requested to track an entity but no STS label has been provided - entityId=%llu"
          " will not be tracked.";
    goto LABEL_23;
  }
  Copy = (re *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString);
  if (!Copy)
  {
    uint64_t v19 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v48 = 134217984;
    unint64_t v49 = a2;
    uint64_t v20 = "[RE/STS] failed to copy tracked CALayer's label, entityId=%llu will not be tracked";
LABEL_23:
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v48, 0xCu);
    return;
  }
  unint64_t v7 = Copy;
  id v9 = (unint64_t *)*((void *)this + 59);
  id v8 = (unint64_t *)*((void *)this + 60);
  if (v9 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        id v9 = (unint64_t *)*((void *)this + 60);
        break;
      }
    }
  }
  unint64_t v10 = (uint64_t *)((char *)this + 432);
  if (v9 != v8)
  {
    unint64_t v11 = (id)*re::audioLogObjects(Copy);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v47 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v9)[3];
      int v48 = 134218498;
      unint64_t v49 = a2;
      __int16 v50 = 2112;
      uint64_t v51 = v47;
      __int16 v52 = 2112;
      float32x2_t v53 = v7;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "[RE/STS] AudioManager is overriding STS label for entityId=%llu. Was previously %@, is now %@.", (uint8_t *)&v48, 0x20u);
    }

    unint64_t v12 = *v9;
    if (std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v9)[3])
    {
      objc_msgSend(*((id *)this + 9), "cleanupLabel:");
      uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v9);
      CFRelease((CFTypeRef)v13[3]);
      unint64_t v12 = *v9;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>>>::__erase_unique<unsigned long long>((void *)this + 54, v12);
    uint64_t v14 = (unint64_t *)*((void *)this + 60);
    int64_t v15 = (char *)v14 - (char *)(v9 + 1);
    if (v14 != v9 + 1) {
      Copy = (re *)memmove(v9, v9 + 1, (char *)v14 - (char *)(v9 + 1));
    }
    id v8 = (unint64_t *)((char *)v9 + v15);
    *((void *)this + 60) = (char *)v9 + v15;
  }
  uint8x8_t v16 = (re **)((char *)this + 472);
  unint64_t v17 = *((void *)this + 55);
  if (!v17) {
    goto LABEL_38;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v3 = a2;
    if (v17 <= a2) {
      unint64_t v3 = a2 % v17;
    }
  }
  else
  {
    unint64_t v3 = (v17 - 1) & a2;
  }
  uint64_t v21 = *(re ***)(*v10 + 8 * v3);
  if (!v21 || (unint64_t v22 = *v21) == 0)
  {
LABEL_38:
    Copy = (re *)operator new(0x20uLL);
    unint64_t v22 = Copy;
    *(void *)Copy = 0;
    *((void *)Copy + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = a2;
    float v24 = (float)(unint64_t)(*((void *)this + 57) + 1);
    *((void *)Copy + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2;
    *((void *)Copy + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v7;
    float v25 = *((float *)this + 116);
    if ((((float)(v25 * (float)v17) >= v24) & ~(v17 == 0)) == 0)
    {
      BOOL v26 = 1;
      if (v17 >= 3) {
        BOOL v26 = (v17 & (v17 - 1)) != 0;
      }
      unint64_t v27 = v26 | (2 * v17);
      unint64_t v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v27;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>((uint64_t)this + 432, v29);
      unint64_t v17 = *((void *)this + 55);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v17 <= a2) {
          unint64_t v3 = a2 % v17;
        }
        else {
          unint64_t v3 = a2;
        }
      }
      else
      {
        unint64_t v3 = (v17 - 1) & a2;
      }
    }
    uint64_t v30 = *v10;
    unint64_t v31 = *(re ***)(*v10 + 8 * v3);
    if (v31)
    {
      *(void *)unint64_t v22 = *v31;
    }
    else
    {
      *(void *)unint64_t v22 = *((void *)this + 56);
      *((void *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v30 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = (char *)this + 448;
      if (!*(void *)v22)
      {
LABEL_58:
        ++*((void *)this + 57);
        int v33 = (re *)*((void *)this + 60);
        goto LABEL_59;
      }
      unint64_t v32 = *(void *)(*(void *)v22 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v32 >= v17) {
          v32 %= v17;
        }
      }
      else
      {
        v32 &= v17 - 1;
      }
      unint64_t v31 = (re **)(*v10 + 8 * v32);
    }
    *unint64_t v31 = v22;
    goto LABEL_58;
  }
  while (1)
  {
    unint64_t v23 = *((void *)v22 + 1);
    if (v23 == a2) {
      break;
    }
    if (v18.u32[0] > 1uLL)
    {
      if (v23 >= v17) {
        v23 %= v17;
      }
    }
    else
    {
      v23 &= v17 - 1;
    }
    if (v23 != v3) {
      goto LABEL_38;
    }
LABEL_37:
    unint64_t v22 = *(re **)v22;
    if (!v22) {
      goto LABEL_38;
    }
  }
  if (*((void *)v22 + 2) != a2) {
    goto LABEL_37;
  }
  float32x2_t v45 = *v16;
  if (*v16 != (re *)v8)
  {
    while (*(void *)v45 != a2)
    {
      float32x2_t v45 = (re *)((char *)v45 + 8);
      if (v45 == (re *)v8)
      {
        float32x2_t v45 = (re *)v8;
        break;
      }
    }
  }
  int64_t v46 = (char *)v8 - ((char *)v45 + 8);
  if (v8 != (unint64_t *)((char *)v45 + 8)) {
    Copy = (re *)memmove(v45, (char *)v45 + 8, (char *)v8 - ((char *)v45 + 8));
  }
  int v33 = (re *)((char *)v45 + v46);
  *((void *)this + 60) = (char *)v45 + v46;
LABEL_59:
  unint64_t v34 = *((void *)this + 61);
  if ((unint64_t)v33 >= v34)
  {
    Copy = *v16;
    uint64_t v36 = (v33 - *v16) >> 3;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = v34 - (void)Copy;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)this + 488, v39);
      Copy = (re *)*((void *)this + 59);
      int v33 = (re *)*((void *)this + 60);
    }
    else
    {
      unint64_t v40 = 0;
    }
    uint64_t v41 = &v40[8 * v36];
    uint64_t v42 = &v40[8 * v39];
    *(void *)uint64_t v41 = *((void *)v22 + 2);
    id v35 = v41 + 8;
    while (v33 != Copy)
    {
      uint64_t v43 = *((void *)v33 - 1);
      int v33 = (re *)((char *)v33 - 8);
      *((void *)v41 - re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v43;
      v41 -= 8;
    }
    *((void *)this + 59) = v41;
    *((void *)this + 60) = v35;
    *((void *)this + 6re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v42;
    if (Copy) {
      operator delete(Copy);
    }
  }
  else
  {
    *(void *)int v33 = *((void *)v22 + 2);
    id v35 = (void *)((char *)v33 + 8);
  }
  *((void *)this + 60) = v35;
  unsigned int v44 = *re::audioLogObjects(Copy);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 134218242;
    unint64_t v49 = a2;
    __int16 v50 = 2112;
    uint64_t v51 = v7;
    _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "[RE/STS] AudioManager is now tracking CALayer entityId=%llu with STS label %@", (uint8_t *)&v48, 0x16u);
  }
}

void sub_233597C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager::removeTrackedCALayerEntityId(re::AudioManager *this, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 56))
  {
    unint64_t v4 = (unint64_t *)*((void *)this + 59);
    uint8x8_t v5 = (unint64_t *)*((void *)this + 60);
    if (v4 != v5)
    {
      while (*v4 != a2)
      {
        if (++v4 == v5)
        {
          unint64_t v4 = (unint64_t *)*((void *)this + 60);
          break;
        }
      }
    }
    unint64_t v6 = (os_log_t *)re::audioLogObjects(this);
    unint64_t v7 = *v6;
    if (v4 == v5)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v14 = 134217984;
        uint64_t v15 = a2;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[RE/STS] can't remove unknown tracked CALayer entityId %llu", (uint8_t *)&v14, 0xCu);
      }
    }
    else
    {
      id v8 = v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v4)[3];
        int v14 = 134218242;
        uint64_t v15 = a2;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "[RE/STS] no longer tracking CALayer entityId %llu with label %@", (uint8_t *)&v14, 0x16u);
      }

      unint64_t v10 = *v4;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v4)[3])
      {
        objc_msgSend(*((id *)this + 9), "cleanupLabel:");
        unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 54, *v4);
        CFRelease((CFTypeRef)v11[3]);
        unint64_t v10 = *v4;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>>>::__erase_unique<unsigned long long>((void *)this + 54, v10);
      unint64_t v12 = (unint64_t *)*((void *)this + 60);
      int64_t v13 = (char *)v12 - (char *)(v4 + 1);
      if (v12 != v4 + 1) {
        memmove(v4, v4 + 1, (char *)v12 - (char *)(v4 + 1));
      }
      *((void *)this + 60) = (char *)v4 + v13;
    }
  }
}

void re::AudioManager::updateTransformForTrackedCALayerEntities(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    unint64_t v3 = *(unint64_t **)(a1 + 472);
    unint64_t v4 = *(unint64_t **)(a1 + 480);
    if (v3 != v4)
    {
      unint64_t v6 = (_OWORD *)MEMORY[0x263EF89A8];
      do
      {
        unint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,__CFString const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,__CFString const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 432, *v3, v3);
        *(void *)&v11[0] = *v3;
        (*(void (**)(void *__return_ptr))(**(void **)(a2 + 32) + 16))(v15);
        if (LOBYTE(v15[0]))
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0x100000000;
          long long v8 = v6[1];
          v11[0] = *v6;
          v11[1] = v8;
          long long v9 = v6[3];
          uint64_t v11[2] = v6[2];
          HIDWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = HIDWORD(v9);
          long long v10 = v16;
          HIDWORD(v10) = HIDWORD(v12);
          long long v12 = v10;
          re::AudioManager::storePendingStateForSTSLabel(a1, (const __CFString *)v7[3], (uint64_t)v11);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
}

__n128 re::AudioManager::storePendingStateForSTSLabel(uint64_t a1, const __CFString *cf, uint64_t a3)
{
  if (cf)
  {
    CFRetain(cf);
    unint64_t v7 = (void *)(a1 + 224);
    CFHashCode v8 = re::AudioManager::CFStringHash::operator()(cf);
    int8x8_t v9 = *(int8x8_t *)(a1 + 232);
    if (v9)
    {
      CFHashCode v10 = v8;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      unint64_t v3 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        CFHashCode v12 = v8;
        if (v8 >= *(void *)&v9) {
          CFHashCode v12 = v8 % *(void *)&v9;
        }
      }
      else
      {
        CFHashCode v12 = (*(void *)&v9 - 1) & v8;
      }
      long long v16 = *(uint64_t **)(*v7 + 8 * v12);
      if (v16)
      {
        for (uint64_t i = *v16; i; uint64_t i = *(void *)i)
        {
          unint64_t v18 = *(void *)(i + 8);
          if (v18 == v10)
          {
            if (re::AudioManager::CFStringEqual::operator()(*(const __CFString **)(i + 16), cf))
            {
              CFRelease(*(CFTypeRef *)(i + 16));
              std::__hash_table<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringHash,re::AudioManager::CFStringEqual,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringEqual,re::AudioManager::CFStringHash,true>,std::allocator<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>>>::erase((void *)(a1 + 224), (uint64_t *)i);
              break;
            }
          }
          else
          {
            if (v3 > 1)
            {
              if (v18 >= *(void *)&v9) {
                v18 %= *(void *)&v9;
              }
            }
            else
            {
              v18 &= *(void *)&v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
        }
      }
    }
    CFHashCode v20 = re::AudioManager::CFStringHash::operator()(cf);
    CFHashCode v21 = v20;
    unint64_t v22 = *(void *)(a1 + 232);
    if (v22)
    {
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v23.i16[0] = vaddlv_u8(v23);
      unint64_t v24 = v23.u32[0];
      if (v23.u32[0] > 1uLL)
      {
        unint64_t v3 = v20;
        if (v20 >= v22) {
          unint64_t v3 = v20 % v22;
        }
      }
      else
      {
        unint64_t v3 = (v22 - 1) & v20;
      }
      float v25 = *(uint64_t ***)(*v7 + 8 * v3);
      if (v25)
      {
        for (unint64_t j = *v25; j; unint64_t j = (uint64_t *)*j)
        {
          unint64_t v27 = j[1];
          if (v27 == v21)
          {
            if (re::AudioManager::CFStringEqual::operator()((const __CFString *)j[2], cf))
            {
              *((_OWORD *)j + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_OWORD *)a3;
              __n128 result = *(__n128 *)(a3 + 16);
              long long v47 = *(_OWORD *)(a3 + 32);
              long long v48 = *(_OWORD *)(a3 + 64);
              *((_OWORD *)j + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = *(_OWORD *)(a3 + 48);
              *((_OWORD *)j + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v48;
              *((__n128 *)j + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = result;
              *((_OWORD *)j + 4) = v47;
              return result;
            }
          }
          else
          {
            if (v24 > 1)
            {
              if (v27 >= v22) {
                v27 %= v22;
              }
            }
            else
            {
              v27 &= v22 - 1;
            }
            if (v27 != v3) {
              break;
            }
          }
        }
      }
    }
    unint64_t v28 = (__n128 *)operator new(0x70uLL);
    v28->n128_u64[0] = 0;
    v28->n128_u64[1] = v21;
    v28[1].n128_u64[0] = (unint64_t)cf;
    __n128 v29 = *(__n128 *)(a3 + 48);
    v28[4] = *(__n128 *)(a3 + 32);
    v28[5] = v29;
    v28[6] = *(__n128 *)(a3 + 64);
    __n128 result = *(__n128 *)(a3 + 16);
    void v28[2] = *(__n128 *)a3;
    v28[3] = result;
    result.n128_f32[0] = (float)(unint64_t)(*(void *)(a1 + 248) + 1);
    float v30 = *(float *)(a1 + 256);
    if (v22 && (float)(v30 * (float)v22) >= result.n128_f32[0])
    {
LABEL_88:
      unsigned int v44 = (void *)*v7;
      float32x2_t v45 = *(__n128 ***)(*v7 + 8 * v3);
      if (v45)
      {
        v28->n128_u64[0] = (unint64_t)*v45;
      }
      else
      {
        v28->n128_u64[0] = *(void *)(a1 + 240);
        *(void *)(a1 + 240) = v28;
        v44[v3] = a1 + 240;
        if (!v28->n128_u64[0])
        {
LABEL_97:
          ++*(void *)(a1 + 248);
          return result;
        }
        unint64_t v46 = *(void *)(v28->n128_u64[0] + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v46 >= v22) {
            v46 %= v22;
          }
        }
        else
        {
          v46 &= v22 - 1;
        }
        float32x2_t v45 = (__n128 **)(*v7 + 8 * v46);
      }
      *float32x2_t v45 = v28;
      goto LABEL_97;
    }
    BOOL v31 = 1;
    if (v22 >= 3) {
      BOOL v31 = (v22 & (v22 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v22);
    result.n128_f32[0] = result.n128_f32[0] / v30;
    unint64_t v33 = vcvtps_u32_f32(result.n128_f32[0]);
    if (v32 <= v33) {
      int8x8_t prime = (int8x8_t)v33;
    }
    else {
      int8x8_t prime = (int8x8_t)v32;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v22 = *(void *)(a1 + 232);
    if (*(void *)&prime > v22) {
      goto LABEL_54;
    }
    if (*(void *)&prime < v22)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 248) / *(float *)(a1 + 256));
      if (v22 < 3
        || (result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v22),
            result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]),
            result.n128_u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v41;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v22)
      {
        unint64_t v22 = *(void *)(a1 + 232);
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          id v35 = operator new(8 * *(void *)&prime);
          uint64_t v36 = (void *)*v7;
          *unint64_t v7 = v35;
          if (v36) {
            operator delete(v36);
          }
          uint64_t v37 = 0;
          *(int8x8_t *)(a1 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = prime;
          do
            *(void *)(*v7 + 8 * v37++) = 0;
          while (*(void *)&prime != v37);
          uint64_t v38 = *(void **)(a1 + 240);
          if (v38)
          {
            unint64_t v39 = v38[1];
            result.n128_u64[0] = (unint64_t)vcnt_s8(prime);
            result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
            if (result.n128_u32[0] > 1uLL)
            {
              if (v39 >= *(void *)&prime) {
                v39 %= *(void *)&prime;
              }
            }
            else
            {
              v39 &= *(void *)&prime - 1;
            }
            *(void *)(*v7 + 8 * v39) = a1 + 240;
            uint64_t v42 = (void *)*v38;
            if (*v38)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (result.n128_u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }
                else
                {
                  v43 &= *(void *)&prime - 1;
                }
                if (v43 != v39)
                {
                  if (!*(void *)(*v7 + 8 * v43))
                  {
                    *(void *)(*v7 + 8 * v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v38;
                    goto LABEL_79;
                  }
                  *uint64_t v38 = *v42;
                  *uint64_t v42 = **(void **)(*v7 + 8 * v43);
                  **(void **)(*v7 + 8 * v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v42;
                  uint64_t v42 = v38;
                }
                unint64_t v43 = v39;
LABEL_79:
                uint64_t v38 = v42;
                uint64_t v42 = (void *)*v42;
                unint64_t v39 = v43;
              }
              while (v42);
            }
          }
          unint64_t v22 = (unint64_t)prime;
          goto LABEL_83;
        }
        unint64_t v49 = (void *)*v7;
        *unint64_t v7 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v22 = 0;
        *(void *)(a1 + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      }
    }
LABEL_83:
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v21 >= v22) {
        unint64_t v3 = v21 % v22;
      }
      else {
        unint64_t v3 = v21;
      }
    }
    else
    {
      unint64_t v3 = (v22 - 1) & v21;
    }
    goto LABEL_88;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "null_label");
  uint64_t v13 = (re *)re::audio::throttledLog(OS_LOG_TYPE_ERROR, (long long *)__p);
  int v15 = (int)v13;
  if (v51 < 0)
  {
    operator delete(__p[0]);
    if (!v15) {
      return result;
    }
  }
  else if (!v13)
  {
    return result;
  }
  uint64_t v19 = *re::audioLogObjects(v13);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "[RE/STS] AudioManager storePendingStateForSTSLabel given null label", (uint8_t *)__p, 2u);
  }
  return result;
}

void sub_2335984E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::AudioManager::enumerateTrackedCALayerEntities(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 56))
  {
    int8x8_t v2 = (int8x8_t *)result;
    unint64_t v3 = *(unint64_t **)(result + 472);
    for (uint64_t i = *(unint64_t **)(result + 480); v3 != i; ++v3)
    {
      int8x8_t v6 = v2[55];
      if (!*(void *)&v6) {
        goto LABEL_22;
      }
      unint64_t v7 = *v3;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = *v3;
        if (*(void *)&v6 <= v7) {
          unint64_t v9 = v7 % *(void *)&v6;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v6 - 1) & v7;
      }
      CFHashCode v10 = *(void **)(*(void *)&v2[54] + 8 * v9);
      if (!v10 || (uint8x8_t v11 = (void *)*v10) == 0) {
LABEL_22:
      }
        std::__throw_out_of_range[abi:ne180100]();
      while (1)
      {
        unint64_t v12 = v11[1];
        if (v12 == v7) {
          break;
        }
        if (v8.u32[0] > 1uLL)
        {
          if (v12 >= *(void *)&v6) {
            v12 %= *(void *)&v6;
          }
        }
        else
        {
          v12 &= *(void *)&v6 - 1;
        }
        if (v12 != v9) {
          goto LABEL_22;
        }
LABEL_18:
        uint8x8_t v11 = (void *)*v11;
        if (!v11) {
          goto LABEL_22;
        }
      }
      if (v11[2] != v7) {
        goto LABEL_18;
      }
      unint64_t v13 = *v3;
      __n128 result = (*(uint64_t (**)(void, unint64_t *))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), &v13);
    }
  }
  return result;
}

CFHashCode re::AudioManager::CFStringHash::operator()(const void *a1)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "null_hash_key");
    int8x8_t v2 = (re *)re::audio::throttledLog(OS_LOG_TYPE_FAULT, (long long *)__p);
    int v3 = (int)v2;
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if (!v3) {
        return 0;
      }
    }
    else if (!v2)
    {
      return 0;
    }
    unint64_t v4 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl(&dword_233120000, v4, OS_LOG_TYPE_FAULT, "[RE/STS] hash key is null", (uint8_t *)__p, 2u);
    }
    return 0;
  }
  return CFHash(a1);
}

void sub_233598710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL re::AudioManager::CFStringEqual::operator()(const __CFString *a1, const __CFString *a2)
{
  if (!((unint64_t)a1 | (unint64_t)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "null_equal_keys");
    int8x8_t v2 = (re *)re::audio::throttledLog(OS_LOG_TYPE_FAULT, (long long *)__p);
    int v3 = (int)v2;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (!v3) {
        return 1;
      }
    }
    else if (!v2)
    {
      return 1;
    }
    unint64_t v7 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl(&dword_233120000, v7, OS_LOG_TYPE_FAULT, "[RE/STS] equal keys are null", (uint8_t *)__p, 2u);
    }
    return 1;
  }
  if (a1 && a2) {
    return CFEqual(a1, a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "null_equal_key");
  uint8x8_t v5 = (re *)re::audio::throttledLog(OS_LOG_TYPE_FAULT, (long long *)__p);
  int v6 = (int)v5;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return 0;
    }
  }
  else if (!v5)
  {
    return 0;
  }
  uint8x8_t v8 = *re::audioLogObjects(v5);
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
  if (!result) {
    return result;
  }
  LOWORD(__p[0]) = 0;
  _os_log_fault_impl(&dword_233120000, v8, OS_LOG_TYPE_FAULT, "[RE/STS] one equal key is null", (uint8_t *)__p, 2u);
  return 0;
}

void sub_23359887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::AudioManager::setExternalSourceControl(uint64_t this, char a2)
{
  *(unsigned char *)(this + 27re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a2;
  return this;
}

uint64_t re::AudioManager::getExternalSourceControl(re::AudioManager *this)
{
  return *((unsigned __int8 *)this + 272);
}

void re::AudioManager::setSTSControl(re::AudioManager *this, int a2)
{
  *((unsigned char *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a2;
  uint64_t v2 = *((void *)this + 8);
  if (a2)
  {
    if (v2) {
      return;
    }
LABEL_5:
    re::AudioManager::configureSTS(this);
    return;
  }
  if (v2) {
    goto LABEL_5;
  }
}

void re::AudioManager::configureSTS(re::AudioManager *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v3 = (CFTypeRef *)((char *)this + 64);
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2)
  {
    CFRelease(v2);
    *int v3 = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  if (*((unsigned char *)this + 56))
  {
    int v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "[RE/STS] Configuring STS controller", buf, 2u);
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint8x8_t v8 = (re *)FigSTSCreateRemote();
    int v9 = (int)v8;
    if (v8)
    {
      char v10 = *re::audioLogObjects(v8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v9;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[RE/STS] Failed to create FigSTS object error=%d", buf, 8u);
      }
      *int v3 = 0;
      return;
    }
    id v11 = objc_alloc(MEMORY[0x263EFC0C0]);
    CFTypeRef v12 = *v3;
    id v31 = 0;
    uint64_t v13 = [v11 initWithSTSObject:v12 error:&v31];
    id v14 = v31;
    int v15 = (void *)*((void *)this + 9);
    *((void *)this + 9) = v13;

    if (!*((void *)this + 9))
    {
      float v25 = *re::audioLogObjects(v16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v33 = v14;
        _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "[RE/STS] Failed to create STSController object: %@", buf, 0xCu);
      }
      CFRelease(*v3);
      *int v3 = 0;
      goto LABEL_17;
    }
    if (!REAudioShouldConfigureTuningForSTSLabels())
    {
LABEL_27:
      for (uint64_t i = (void *)((char *)this + 32);
            ;
            (*(void (**)(re::AudioManager *, void))(*(void *)this + 944))(this, i[2]))
      {
        uint64_t i = (void *)*i;
        if (!i) {
          break;
        }
      }
LABEL_17:

      return;
    }
    *(_DWORD *)bytes = 1;
    uint64_t HexCFStringForInt = re::AudioManager::getHexCFStringForInt(this, 3109);
    CFDataRef v18 = CFDataCreate(v7, bytes, 4);
    CFTypeRef v19 = *v3;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v23 = *(void *)(VTable + 16);
    CFHashCode v21 = (re *)(VTable + 16);
    uint64_t v22 = v23;
    if (v23) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    BOOL v26 = *(uint64_t (**)(CFTypeRef, void, uint64_t, CFDataRef))(v24 + 24);
    if (v26)
    {
      CFHashCode v21 = (re *)v26(v19, *MEMORY[0x263F54548], HexCFStringForInt, v18);
      int v27 = (int)v21;
      if (!v21)
      {
LABEL_26:
        CFRelease(v18);
        goto LABEL_27;
      }
    }
    else
    {
      int v27 = -12782;
    }
    unint64_t v28 = *re::audioLogObjects(v21);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v27;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "[RE/STS] FigSTSSetPropertyByLabel propagation delay enabled error=%d", buf, 8u);
    }
    goto LABEL_26;
  }
}

void sub_233598C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioManager::setSTSObjects(uint64_t a1, const void *a2, void *a3)
{
  id v7 = a3;
  int v6 = *(const void **)(a1 + 64);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 64) = CFRetain(a2);
  objc_storeStrong((id *)(a1 + 72), a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 1);
}

void sub_233598D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager::getSTSControl(re::AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

void re::AudioManager::setSystemListenerID(re::AudioManager *this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((void *)this + 33) != a2)
  {
    unint64_t v4 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *((void *)this + 33);
      int v7 = 134218240;
      uint64_t v8 = v5;
      __int16 v9 = 2048;
      uint64_t v10 = a2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "Changing RE's system listener ID from %llu to %llu", (uint8_t *)&v7, 0x16u);
    }
    *((void *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = a2;
    for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
    {
      if (i[3] == a2) {
        (*(void (**)(re::AudioManager *, void))(*(void *)this + 944))(this, i[2]);
      }
    }
  }
}

uint64_t re::AudioManager::currentAudioOutputType(re::AudioManager *this)
{
  return 0;
}

void re::AudioManager::sessionForID(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
}

uint64_t re::AudioManager::addSession(os_unfair_lock_s *this, AVAudioSession *a2)
{
  return re::AudioSessionCache::addSession(this + 90, a2);
}

void re::AudioManager::keepSessionAlive(os_unfair_lock_s *this, unsigned int a2)
{
}

uint64_t re::AudioManager::setSessionUsageRemovalTimer(uint64_t this, uint64_t a2)
{
  *(void *)(this + 424) = a2;
  return this;
}

uint64_t re::AudioService::addPlaybackConnectionDisconnectCallback()
{
  return 0;
}

uint64_t re::AudioService::isAudioManagerStateReady(re::AudioService *this)
{
  return 1;
}

uint64_t re::AudioService::createSamplerDefinitionForToken(re::AudioService *this)
{
  return 0;
}

__n128 re::AudioService::getPHASESourceTransformForToken(re::AudioService *this)
{
  return *(__n128 *)MEMORY[0x263EF89A8];
}

uint64_t re::AudioService::getPHASEAssetForIdentifier(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::getPHASESourceForEntityID(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioManager::applyMixGroupState(re::AudioManager *this, unint64_t a2, unint64_t a3, const re::AudioMixGroup *a4)
{
  return 0;
}

void re::AudioService::setEngineQueue(uint64_t a1, void *a2)
{
}

uint64_t re::AudioService::handlesPlaybackForFileAndBufferResources(re::AudioService *this)
{
  return 1;
}

uint64_t re::AudioService::controlsPlaybackForGeneratorResources(re::AudioService *this)
{
  return 1;
}

uint64_t re::AudioService::getConfigurationForExternalStreamController()
{
  return 0;
}

uint64_t re::AudioService::copyOrCreateEndpointForPlaybackHostingService(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::shouldLoadFileAssetsByAbsolutePath(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::playbackHostConnectionIdentifier(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::getRequiresAudioSessionForPlayback(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::currentAudioOutputType(re::AudioService *this)
{
  return 0;
}

uint64_t re::AudioService::stsObject(re::AudioService *this)
{
  return 0;
}

void re::AudioService::sessionForID(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
}

uint64_t re::AudioService::addSession(re::AudioService *this, AVAudioSession *a2)
{
  return 0;
}

uint64_t std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::~__hash_table((uint64_t)(v2 + 7));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(v2 + 8));
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

id **std::unique_ptr<re::AudioManager::PrivateData>::reset[abi:ne180100](id **result, id *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {

    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,__CFString const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,__CFString const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,__CFString const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    __int16 v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  CFTypeRef v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *CFTypeRef v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = i;
  *(void *)(v18 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    CFTypeRef v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2335993BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  BOOL v14 = (char *)operator new(0x68uLL);
  v36[0] = v14;
  v36[1] = a1 + 16;
  *(void *)BOOL v14 = 0;
  *((void *)v14 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v7;
  *((void *)v14 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((void *)v14 + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)v14 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_OWORD *)(v14 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(v14 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((void *)v14 + 4) = -1;
  unsigned char v14[40] = 1;
  *((void *)v14 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = -1;
  *((_DWORD *)v14 + 2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1065353216;
  char v37 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          CFHashCode v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *(int8x8_t *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*v13;
          if (*v13)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v13;
            float v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  *float v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v30;
                  float v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                float v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        id v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t i = (void *)v36[0];
  if (v32)
  {
    *(void *)v36[0] = *v32;
LABEL_72:
    *unint64_t v32 = i;
    goto LABEL_73;
  }
  *(void *)v36[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = i;
  *(void *)(*(void *)a1 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
  return i;
}

void sub_233599868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::~__hash_table((uint64_t)v1 + 56);
    }
    operator delete(v1);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint64_t v10 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v5;
  *((void *)v10 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *a3;
  *(_OWORD *)(v10 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v10 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(v10 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0u;
  *((_DWORD *)v10 + 24) = 1065353216;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v12;
    uint8x8_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          *uint8x8_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint8x8_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        uint8x8_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *(void *)uint64_t v10 = *v31;
LABEL_72:
    *unint64_t v31 = v10;
    goto LABEL_73;
  }
  *(void *)uint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v12;
  if (*(void *)v10)
  {
    unint64_t v32 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_233599CD8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,re::AudioManager::AudioScene::PerConnectionState>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)__p + 64);
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)__p + 24);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringHash,re::AudioManager::CFStringEqual,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>,re::AudioManager::CFStringEqual,re::AudioManager::CFStringHash,true>,std::allocator<std::__hash_value_type<__CFString const*,re::AudioManager::RESTSPerLabelState>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *__p;
  unint64_t v3 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  int v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    unint64_t v7 = v6;
    int v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    uint64_t v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v_ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = v7;
    uint64_t v9 = *__p;
  }
LABEL_27:
  *unint64_t v7 = v9;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

void std::__throw_out_of_range[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_264BDF0E0, MEMORY[0x263F8C068]);
}

void sub_233599EE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  BOOL result = std::logic_error::logic_error(a1, "unordered_map::at: key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,__CFString const*>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CFString const*>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CFString const*>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v18 = operator new(8 * *(void *)&prime);
  unint64_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  uint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a1 + 4;
    uint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v21;
            goto LABEL_56;
          }
          void *v21 = *v27;
          *uint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v27;
          uint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        uint64_t v21 = v27;
        uint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  unint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v6);
  if (v30)
  {
    *unint64_t v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_23359A310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re::ecs2::AudioPlayerTelemetryReporter::shouldSendReport(re::ecs2::AudioPlayerTelemetryReporter *this)
{
  if (NSClassFromString(&cfstr_Xctest.isa)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 18);
  if (!v3) {
    return 0;
  }
  if (!*(void *)(v3 + 160)) {
    return 0;
  }
  uint64_t v4 = *(void **)(v3 + 256);
  if (!v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = (*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 18) + 160) + 16))(*(void *)(*((void *)this + 18) + 160), v4[2]);
    if (v5)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 544))(v5)) {
        break;
      }
    }
    uint64_t v4 = (void *)*v4;
    if (!v4) {
      return 0;
    }
  }
  return 1;
}

id re::ecs2::AudioPlayerTelemetryReporter::collectTelemetryStatistics(re::ecs2::AudioPlayerTelemetryReporter *this)
{
  v53[21] = *MEMORY[0x263EF8340];
  if (!NSClassFromString(&cfstr_Xctest.isa))
  {
    uint64_t v5 = *((void *)this + 18);
    if (v5)
    {
      for (uint64_t i = *(void **)(v5 + 256); i; uint64_t i = (void *)*i)
      {
        unint64_t v7 = (re::ecs2::SceneComponentTable *)(i[2] + 200);
        uint64_t v8 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v9 = *(void *)(v8 + 24);
        if (v9)
        {
          unint64_t v10 = *(uint64_t **)(v8 + 40);
          uint64_t v11 = 8 * v9;
          do
          {
            uint64_t v12 = *v10++;
            *(_DWORD *)this += atomic_exchange((atomic_uint *volatile)(v12 + 312), 0);
            *((_DWORD *)this + 3) += atomic_exchange((atomic_uint *volatile)(v12 + 316), 0);
            v11 -= 8;
          }
          while (v11);
        }
        uint64_t v13 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v14 = *(void *)(v13 + 24);
        if (v14)
        {
          uint64_t v15 = *(void *)(v13 + 40);
          int v16 = *((_DWORD *)this + 5);
          uint64_t v17 = 8 * v14;
          do
          {
            switch(*(_DWORD *)(*(void *)v15 + 40))
            {
              case 0:
                ++*((_DWORD *)this + 7);
                break;
              case 1:
                ++*((_DWORD *)this + 9);
                break;
              case 2:
                ++*((_DWORD *)this + 8);
                break;
              case 3:
                ++*((_DWORD *)this + 10);
                break;
              default:
                break;
            }
            v15 += 8;
            ++v16;
            v17 -= 8;
          }
          while (v17);
          *((_DWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v16;
        }
        *((_DWORD *)this + 6) += *(_DWORD *)(re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 24);
        *((_DWORD *)this + 4) += *(_DWORD *)(re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 24);
      }
    }
  }
  uint64_t v48 = 0;
  memset(__s2, 0, sizeof(__s2));
  long long v49 = xmmword_23437A520;
  long long v50 = xmmword_23437A530;
  long long v51 = xmmword_23437A540;
  if (!memcmp(this, __s2, 0x68uLL))
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (*((_DWORD *)this + 12))
    {
      double v3 = *((double *)this + 7);
      double v2 = *((double *)this + 8);
      double v4 = *((double *)this + 9);
    }
    else
    {
      double v4 = -100.0;
      double v2 = -100.0;
      double v3 = -100.0;
    }
    if (*((_DWORD *)this + 13))
    {
      double v19 = *((double *)this + 10);
      double v20 = *((double *)this + 8);
      double v21 = *((double *)this + 12);
    }
    else
    {
      double v21 = -100.0;
      double v20 = -100.0;
      double v19 = -100.0;
    }
    v52[0] = @"bundleId";
    unint64_t v46 = [MEMORY[0x263F086E0] mainBundle];
    uint64_t v22 = [v46 bundleIdentifier];
    uint8x8_t v23 = &stru_26E738380;
    if (v22) {
      uint8x8_t v23 = (__CFString *)v22;
    }
    v53[0] = v23;
    v52[1] = @"play";
    float32x2_t v45 = (void *)v22;
    unsigned int v44 = [NSNumber numberWithUnsignedLong:*(unsigned int *)this];
    v53[1] = v44;
    v52[2] = @"maxConcurrentPlayCount";
    unint64_t v43 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 1)];
    v53[2] = v43;
    v52[3] = @"prepare";
    uint64_t v42 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 3)];
    v53[3] = v42;
    v52[4] = @"maxConcurrentPrepareCount";
    uint64_t v41 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 2)];
    v53[4] = v41;
    id v52[5] = @"channelComponent";
    unint64_t v40 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 4)];
    v53[5] = v40;
    v52[6] = @"ambientComponent";
    unint64_t v39 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 6)];
    v53[6] = v39;
    v52[7] = @"spatialComponent";
    uint64_t v38 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 5)];
    unsigned char v53[7] = v38;
    v52[8] = @"spatialComponentOmniCount";
    char v37 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 7)];
    v53[8] = v37;
    v52[9] = @"spatialComponentHumanDirectivityCount";
    uint64_t v36 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 8)];
    v53[9] = v36;
    v52[10] = @"spatialComponentBeamDirectivityCount";
    id v35 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 9)];
    v53[10] = v35;
    v52[11] = @"spatialComponentSphericalApproximationDirectivityCount";
    uint64_t v34 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 10)];
    v53[11] = v34;
    v52[12] = @"calibrationModeNoneCount";
    unint64_t v33 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 11)];
    v53[12] = v33;
    v52[13] = @"calibrationModeRelativeSplCount";
    unint64_t v24 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 12)];
    v53[13] = v24;
    v52[14] = @"calibrationModeAbsoluteSplCount";
    uint8x8_t v25 = [NSNumber numberWithUnsignedLong:*((unsigned int *)this + 13)];
    v53[14] = v25;
    v52[15] = @"calibrationModeRelativeSplMinValue";
    uint64_t v26 = [MEMORY[0x263F087B0] numberWithDouble:v3];
    v53[15] = v26;
    v52[16] = @"calibrationModeRelativeSplAverage";
    uint64_t v27 = [MEMORY[0x263F087B0] numberWithDouble:v2];
    unsigned __int8 v53[16] = v27;
    v52[17] = @"calibrationModeRelativeSplMaxValue";
    unint64_t v28 = [MEMORY[0x263F087B0] numberWithDouble:v4];
    v53[17] = v28;
    v52[18] = @"calibrationModeAbsoluteSplMinValue";
    unint64_t v29 = [MEMORY[0x263F087B0] numberWithDouble:v19];
    v53[18] = v29;
    v52[19] = @"calibrationModeAbsoluteSplAverage";
    uint64_t v30 = [MEMORY[0x263F087B0] numberWithDouble:v20];
    v53[19] = v30;
    v52[20] = @"calibrationModeAbsoluteSplMaxValue";
    unint64_t v31 = [MEMORY[0x263F087B0] numberWithDouble:v21];
    v53[20] = v31;
    unint64_t v18 = [NSDictionary dictionaryWithObjects:v53 forKeys:v52 count:21];
  }
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *((_OWORD *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23437A520;
  *(_OWORD *)((char *)this + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = xmmword_23437A530;
  *(_OWORD *)((char *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = xmmword_23437A540;
  return v18;
}

void sub_23359AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t re::ecs2::AudioPlayerTelemetryReporter::getInstance(re::ecs2::AudioPlayerTelemetryReporter *this)
{
  uint64_t v1 = (id *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
  {
    double v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    double v4 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
    re::ecs2::AudioPlayerTelemetryReporter::getInstance(void)::onceQueue = (uint64_t)dispatch_queue_create("AudioTelemetry", v4);

    uint64_t v1 = (id *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
  }
  objc_storeStrong((id *)&re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, v1[331]);
  uint64_t result = re::ecs2::AudioPlayerTelemetryReporter::sharedReporter;
  if (!re::ecs2::AudioPlayerTelemetryReporter::sharedReporter)
  {
    dispatch_sync((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, &__block_literal_global_6);
    return re::ecs2::AudioPlayerTelemetryReporter::sharedReporter;
  }
  return result;
}

re *___ZN2re4ecs228AudioPlayerTelemetryReporter11getInstanceEv_block_invoke(re *result)
{
  void v12[4] = *MEMORY[0x263EF8340];
  if (!re::ecs2::AudioPlayerTelemetryReporter::sharedReporter)
  {
    uint64_t v1 = re::globalAllocators(result);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 152, 8);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_OWORD *)(v2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
    *(void *)(v2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)(v2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23437A520;
    *(_OWORD *)(v2 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = xmmword_23437A530;
    *(_OWORD *)(v2 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = xmmword_23437A540;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    double v3 = (uint64_t *)(v2 + 136);
    *(void *)(v2 + 144) = 0;
    double v4 = re::globalAllocators((re *)v2);
    uint64_t v5 = (re::AudioTelemetryReporter *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
    v12[3] = v12;
    uint64_t v11 = v10;
    v12[0] = &unk_26E6DBB38;
    uint64_t v9 = re::AudioTelemetryReporter::AudioTelemetryReporter(v5);
    v10[0] = &unk_26E6DBB38;
    std::__function::__value_func<void ()(re::AudioTelemetryReporter *)>::~__value_func[abi:ne180100](v12);
    uint64_t v6 = (uint64_t)v9;
    uint64_t v9 = 0;
    std::unique_ptr<re::AudioTelemetryReporter,std::function<void ()(re::AudioTelemetryReporter*)>>::reset[abi:ne180100]((uint64_t *)(v2 + 104), v6);
    uint64_t v7 = v2 + 112;
    uint64_t v8 = *(void *)(v2 + 136);
    *(void *)(v2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    if (v8 == v2 + 112)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v2 + 112);
    }
    else if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    if (v11)
    {
      if (v11 == v10)
      {
        *double v3 = v7;
        (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, v2 + 112);
        goto LABEL_11;
      }
      *double v3 = (uint64_t)v11;
      double v3 = (uint64_t *)&v11;
    }
    *double v3 = 0;
LABEL_11:
    std::unique_ptr<re::AudioTelemetryReporter,std::function<void ()(re::AudioTelemetryReporter*)>>::reset[abi:ne180100]((uint64_t *)&v9, 0);
    uint64_t result = (re *)std::__function::__value_func<void ()(re::AudioTelemetryReporter *)>::~__value_func[abi:ne180100](v10);
    re::ecs2::AudioPlayerTelemetryReporter::sharedReporter = v2;
  }
  return result;
}

void sub_23359AF10(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void re::ecs2::AudioPlayerTelemetryReporter::initializeTimerWith(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re4ecs228AudioPlayerTelemetryReporter19initializeTimerWithEPU28objcproto17OS_dispatch_queue8NSObjectPNS0_17AudioPlayerSystemE_block_invoke;
  block[3] = &unk_264BE31B0;
  uint64_t v10 = a1;
  uint64_t v11 = a3;
  id v9 = v5;
  id v7 = v5;
  dispatch_async(v6, block);
}

void ___ZN2re4ecs228AudioPlayerTelemetryReporter19initializeTimerWithEPU28objcproto17OS_dispatch_queue8NSObjectPNS0_17AudioPlayerSystemE_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  *(void *)(v1 + 144) = a1[6];
  uint64_t v2 = *(void *)(v1 + 104);
  double v3 = a1[4];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___ZN2re4ecs228AudioPlayerTelemetryReporter19initializeTimerWithEPU28objcproto17OS_dispatch_queue8NSObjectPNS0_17AudioPlayerSystemE_block_invoke_2;
  void v4[3] = &__block_descriptor_40_e24__TelemetryReport____8__0l;
  void v4[4] = v1;
  re::AudioTelemetryReporter::initializeTimerWith(v2, v3, v4, 300.0);
}

__CFString *___ZN2re4ecs228AudioPlayerTelemetryReporter19initializeTimerWithEPU28objcproto17OS_dispatch_queue8NSObjectPNS0_17AudioPlayerSystemE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(re::ecs2::AudioPlayerTelemetryReporter **)(a1 + 32);
  if (re::ecs2::AudioPlayerTelemetryReporter::shouldSendReport(v1))
  {
    re::ecs2::AudioPlayerTelemetryReporter::collectTelemetryStatistics(v1);
    objc_claimAutoreleasedReturnValue();
  }
  return @"app_usage";
}

re *___ZN2re4ecs228AudioPlayerTelemetryReporter22stopAndCleanupReporterEv_block_invoke(re *result)
{
  uint64_t v1 = (uint64_t *)re::ecs2::AudioPlayerTelemetryReporter::sharedReporter;
  if (re::ecs2::AudioPlayerTelemetryReporter::sharedReporter)
  {
    uint64_t v2 = re::globalAllocators(result)[2];
    if (re::ecs2::AudioPlayerTelemetryReporter::shouldSendReport((re::ecs2::AudioPlayerTelemetryReporter *)v1))
    {
      re::ecs2::AudioPlayerTelemetryReporter::collectTelemetryStatistics((re::ecs2::AudioPlayerTelemetryReporter *)v1);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      double v4 = (NSObject **)v1[13];
      id v5 = v3;
      re::AudioTelemetryReporter::sendTelemetryReport(v4, @"app_usage", v5);
    }
    v1[18] = 0;
    std::unique_ptr<re::AudioTelemetryReporter,std::function<void ()(re::AudioTelemetryReporter*)>>::reset[abi:ne180100](v1 + 13, 0);
    std::unique_ptr<re::AudioTelemetryReporter,std::function<void ()(re::AudioTelemetryReporter*)>>::reset[abi:ne180100](v1 + 13, 0);
    std::__function::__value_func<void ()(re::AudioTelemetryReporter *)>::~__value_func[abi:ne180100](v1 + 14);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 40))(v2, v1);
    re::ecs2::AudioPlayerTelemetryReporter::sharedReporter = 0;
  }
  return result;
}

uint64_t ___ZN2re4ecs228AudioPlayerTelemetryReporter11updateCountEjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  *v1 += *(_DWORD *)(result + 40);
  v1[3] += *(_DWORD *)(result + 44);
  return result;
}

void re::ecs2::AudioPlayerTelemetryReporter::updateCalibrationModeStatistics(uint64_t a1, int a2, double a3)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re4ecs228AudioPlayerTelemetryReporter31updateCalibrationModeStatisticsE22REAudioCalibrationModed_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  void block[4] = a1;
  int v4 = a2;
  *(double *)&void block[5] = a3;
  dispatch_async((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, block);
}

uint64_t ___ZN2re4ecs228AudioPlayerTelemetryReporter31updateCalibrationModeStatisticsE22REAudioCalibrationModed_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(result + 48);
  switch(v2)
  {
    case 2:
      double v3 = *(double *)(v1 + 80);
      unsigned int v4 = *(_DWORD *)(v1 + 52) + 1;
      *(double *)(v1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(double *)(v1 + 88) + (*(double *)(result + 40) - *(double *)(v1 + 88)) / (double)v4;
      *(_DWORD *)(v1 + 5re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v4;
      double v5 = *(double *)(result + 40);
      if (v5 >= v3) {
        double v5 = v3;
      }
      *(double *)(v1 + 80) = v5;
      double v6 = *(double *)(result + 40);
      if (v6 <= *(double *)(v1 + 96)) {
        double v6 = *(double *)(v1 + 96);
      }
      *(double *)(v1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
      break;
    case 1:
      double v7 = *(double *)(v1 + 56);
      unsigned int v8 = *(_DWORD *)(v1 + 48) + 1;
      *(double *)(v1 + 64) = *(double *)(v1 + 64) + (*(double *)(result + 40) - *(double *)(v1 + 64)) / (double)v8;
      *(_DWORD *)(v1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v8;
      double v9 = *(double *)(result + 40);
      if (v9 >= v7) {
        double v9 = v7;
      }
      *(double *)(v1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v9;
      double v10 = *(double *)(result + 40);
      if (v10 <= *(double *)(v1 + 72)) {
        double v10 = *(double *)(v1 + 72);
      }
      *(double *)(v1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v10;
      break;
    case 0:
      ++*(_DWORD *)(v1 + 44);
      break;
  }
  return result;
}

uint64_t ___ZN2re4ecs228AudioPlayerTelemetryReporter25updateConcurrentPlayCountEj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  unsigned int v2 = *(_DWORD *)(result + 40);
  if (v2 <= *(_DWORD *)(v1 + 4)) {
    unsigned int v2 = *(_DWORD *)(v1 + 4);
  }
  *(_DWORD *)(v1 + 4) = v2;
  return result;
}

uint64_t ___ZN2re4ecs228AudioPlayerTelemetryReporter28updateConcurrentPrepareCountEj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  unsigned int v2 = *(_DWORD *)(result + 40);
  if (v2 <= *(_DWORD *)(v1 + 8)) {
    unsigned int v2 = *(_DWORD *)(v1 + 8);
  }
  *(_DWORD *)(v1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  return result;
}

uint64_t *std::unique_ptr<re::AudioTelemetryReporter,std::function<void ()(re::AudioTelemetryReporter*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  std::logic_error *result = a2;
  if (v2)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = v2;
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

void *std::__function::__value_func<void ()(re::AudioTelemetryReporter *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E6DBB38;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DBB38;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t a1, id **a2)
{
  return re::internal::destroyPersistent<re::AudioTelemetryReporter>((re *)"operator()", 36, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_22AudioTelemetryReporterEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

re *re::internal::destroyPersistent<re::AudioTelemetryReporter>(re *result, uint64_t a2, id *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::AudioTelemetryReporter::~AudioTelemetryReporter(a3);
    double v5 = *(uint64_t (**)(uint64_t, id *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::AudioManager_PHASE_StateMachine::AudioManager_PHASE_StateMachine(re::AudioManager_PHASE_StateMachine *this)
{
}

void sub_23359B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *v9;
  uint64_t *v9 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_StateMachine::~AudioManager_PHASE_StateMachine(re::AudioManager_PHASE_StateMachine *this)
{
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___ZN2re31AudioManager_PHASE_StateMachineD2Ev_block_invoke;
  void v4[3] = &__block_descriptor_40_e5_v8__0l;
  void v4[4] = this;
  dispatch_sync(v2, v4);

  double v5 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
}

void *___ZN2re31AudioManager_PHASE_StateMachineD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  uint64_t v2 = *v1;
  uint64_t *v1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
  uint64_t v4 = (uint64_t *)v1[2];
  double v5 = (uint64_t *)v1[3];
  uint64_t v3 = v1 + 2;
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    *uint64_t v4 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    ++v4;
  }
  return std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__clear[abi:ne180100](v3);
}

void re::AudioManager_PHASE_StateMachine::handleStateChangeEvent(uint64_t a1, int a2, unint64_t __val, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if ((_BYTE)a4)
  {
    std::to_string(&v16, __val);
    unsigned int v8 = std::string::insert(&v16, 0, " for scene ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v18 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unsigned int v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  double v10 = (id)*re::audioLogObjects((re *)v8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    re::nameForAudioManagerStateMachineEvent(a2, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v16;
    }
    else {
      uint64_t v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    uint64_t v12 = __p;
    if (v18 < 0) {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    double v20 = v11;
    __int16 v21 = 2080;
    uint64_t v22 = v12;
    _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] Received state change event '%s'%s.", buf, 0x16u);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v13 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re31AudioManager_PHASE_StateMachine22handleStateChangeEventENS_36AudioManager_PHASE_StateMachineEventENSt3__18optionalIyEE_block_invoke;
  block[3] = &__block_descriptor_60_e5_v8__0l;
  int v15 = a2;
  void block[4] = a1;
  void block[5] = __val;
  void block[6] = a4;
  dispatch_async(v13, block);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23359BA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN2re31AudioManager_PHASE_StateMachine22handleStateChangeEventENS_36AudioManager_PHASE_StateMachineEventENSt3__18optionalIyEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unint64_t v2 = (***(uint64_t (****)(void, void, void, void))&v1->_os_unfair_lock_opaque)(*(void *)&v1->_os_unfair_lock_opaque, *(unsigned int *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
  if ((v2 & 0xFF00000000) != 0)
  {
    switch(v2)
    {
      case 2:
        operator new();
      case 1:
        __p[1] = 0;
        uint64_t v22 = 0;
        __p[0] = 0;
        uint64_t v3 = *(void *)&v1[4]._os_unfair_lock_opaque;
        for (uint64_t i = *(void *)&v1[6]._os_unfair_lock_opaque; v3 != i; v3 += 8)
        {
          (*(void (**)(unsigned char *__return_ptr))(**(void **)v3 + 64))(buf);
          double v5 = (char *)__p[1];
          if (__p[1] >= v22)
          {
            int64_t v8 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v8 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v9 = (int64_t)((uint64_t)v22 - (unint64_t)__p[0]) >> 2;
            if (v9 <= v8 + 1) {
              unint64_t v9 = v8 + 1;
            }
            if ((unint64_t)v22 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v10 = v9;
            }
            uint64_t v26 = &v22;
            if (v10) {
              uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v22, v10);
            }
            else {
              uint64_t v11 = 0;
            }
            uint64_t v12 = &v11[8 * v8];
            v23[0] = v11;
            v23[1] = v12;
            uint8x8_t v25 = &v11[8 * v10];
            uint64_t v13 = *(void *)buf;
            *(void *)long long buf = 0;
            *(void *)uint64_t v12 = v13;
            unint64_t v24 = v12 + 8;
            std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__swap_out_circular_buffer((uint64_t *)__p, v23);
            double v7 = __p[1];
            std::__split_buffer<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::~__split_buffer(v23);
          }
          else
          {
            uint64_t v6 = *(void *)buf;
            *(void *)long long buf = 0;
            *(void *)__p[1] = v6;
            double v7 = v5 + 8;
          }
          __p[1] = v7;
          uint64_t v14 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        operator new();
      case 0:
        operator new();
    }
    int v15 = (id)*re::audioLogObjects((re *)v2);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(**(void **)&v1->_os_unfair_lock_opaque + 8))(v23);
      int v16 = SHIBYTE(v24);
      uint64_t v17 = (void **)v23[0];
      (*(void (**)(void **__return_ptr, void))(MEMORY[0] + 8))(__p, 0);
      int64_t v18 = v23;
      if (v16 < 0) {
        int64_t v18 = v17;
      }
      if (SHIBYTE(v22) >= 0) {
        double v19 = __p;
      }
      else {
        double v19 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v28 = 2080;
      unint64_t v29 = v19;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] State was changed from %s to %s", buf, 0x16u);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
    }

    os_unfair_lock_lock(v1 + 2);
    uint64_t v20 = *(void *)&v1->_os_unfair_lock_opaque;
    *(void *)&v1->_uint64_t os_unfair_lock_opaque = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
    }
    os_unfair_lock_unlock(v1 + 2);
  }
}

void sub_23359BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  a20 = &a9;
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_StateMachine::getCurrentStateType(os_unfair_lock_s *this)
{
  unint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)&this->_os_unfair_lock_opaque + 16))();
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_23359BFFC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2re31AudioManager_PHASE_StateMachine28registerRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = (id)*re::audioLogObjects((re *)a1);
  double v5 = v4;
  if (v3 > 4)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      re::nameForAudioManagerStateMachineEvent(*(_DWORD *)(a1 + 48), __p);
      int64_t v8 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = v8;
      _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, "[RE/MediaServices] [EngineState] Registered a recovery step for event %s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = *(void *)(*(void *)(v2 + 16) + 8 * *(unsigned int *)(a1 + 48));
    (*(void (**)(uint64_t, void))(*(void *)v6 + 48))(v6, *(void *)(a1 + 40));
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      re::nameForAudioManagerStateMachineEvent(*(_DWORD *)(a1 + 48), __p);
      if (v10 >= 0) {
        double v7 = __p;
      }
      else {
        double v7 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = v7;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "[RE/MediaServices] [EngineState] Invalid recovery step registered for event %s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_23359C1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2re31AudioManager_PHASE_StateMachine30unregisterRequiredRecoveryStepENS_36AudioManager_PHASE_StateMachineEventEy_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = (id)*re::audioLogObjects((re *)a1);
  double v5 = v4;
  if (v3 > 4)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      re::nameForAudioManagerStateMachineEvent(*(_DWORD *)(a1 + 48), __p);
      int64_t v8 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = v8;
      _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, "[RE/MediaServices] [EngineState] Unregistered a recovery step for event %s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = *(void *)(v2[2] + 8 * *(unsigned int *)(a1 + 48));
    (*(void (**)(uint64_t, void))(*(void *)v6 + 40))(v6, *(void *)(a1 + 40));
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 16))() == 1) {
      (**(void (***)(void, void, void, uint64_t))*v2)(*v2, *(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 1);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      re::nameForAudioManagerStateMachineEvent(*(_DWORD *)(a1 + 48), __p);
      if (v10 >= 0) {
        double v7 = __p;
      }
      else {
        double v7 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = v7;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "[RE/MediaServices] [EngineState] Invalid recovery step unregistered from event %s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_23359C3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__clear[abi:ne180100](v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unsigned int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *unsigned int v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>,std::reverse_iterator<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void re::audio::REPHASEAudioScene::create(re::audio::REPHASEAudioScene *this, REPHASEContext *a2)
{
}

void sub_23359C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::destroy(re::audio::REPHASEAudioScene *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::clear((uint64_t)this + 24);
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>>>::clear((uint64_t)this + 88);
}

void re::audio::REPHASEAudioScene::fillOutDebugInformation(re::audio::REPHASEAudioScene *this, NSMutableDictionary *a2)
{
  __int16 v52 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  id v3 = *((id *)this + 9);
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x263EFF9A0] dictionary];
    [v3 transform];
    long long v53 = v5;
    long long v54 = v6;
    long long v55 = v7;
    long long v56 = v8;
    unint64_t v9 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
    [v4 setObject:v9 forKey:@"transform"];

    [v3 worldTransform];
    long long v53 = v10;
    long long v54 = v11;
    long long v55 = v12;
    long long v56 = v13;
    char v14 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
    [v4 setObject:v14 forKey:@"worldTransform"];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  locuint64_t k = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  long long v15 = (void *)*((void *)this + 5);
  if (v15)
  {
    unint64_t v16 = 0x263EFF000uLL;
    do
    {
      uint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      double v19 = (std::__shared_weak_count *)v15[4];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18)
      {
        id v20 = *(id *)(v18 + 24);
        if (v20)
        {
          __int16 v21 = [*(id *)(v16 + 2464) dictionary];
          uint64_t v22 = [NSNumber numberWithUnsignedLongLong:v17];
          [v21 setObject:v22 forKey:@"entityID"];

          if (*(void *)(v18 + 32)) {
            uint64_t v23 = *(__CFString **)(v18 + 32);
          }
          else {
            uint64_t v23 = @"(null)";
          }
          [v21 setObject:v23 forKey:@"name"];
          [v20 transform];
          long long v53 = v24;
          long long v54 = v25;
          long long v55 = v26;
          long long v56 = v27;
          __int16 v28 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
          [v21 setObject:v28 forKey:@"transform"];

          [v20 worldTransform];
          long long v53 = v29;
          long long v54 = v30;
          long long v55 = v31;
          long long v56 = v32;
          unint64_t v33 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
          [v21 setObject:v33 forKey:@"worldTransform"];

          uint64_t v34 = objc_msgSend(NSString, "stringWithFormat:", @"Occluder Entity-%llu", v17);
          [(NSMutableDictionary *)v52 setObject:v21 forKey:v34];
        }
        id v35 = *(id *)(v18 + 16);
        if (v35)
        {
          unint64_t v36 = v16;
          char v37 = [*(id *)(v16 + 2464) dictionary];
          uint64_t v38 = [NSNumber numberWithUnsignedLongLong:v17];
          [v37 setObject:v38 forKey:@"entityID"];

          if (*(void *)(v18 + 32)) {
            unint64_t v39 = *(__CFString **)(v18 + 32);
          }
          else {
            unint64_t v39 = @"(null)";
          }
          [v37 setObject:v39 forKey:@"name"];
          [v35 transform];
          long long v53 = v40;
          long long v54 = v41;
          long long v55 = v42;
          long long v56 = v43;
          unsigned int v44 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
          [v37 setObject:v44 forKey:@"transform"];

          [v35 worldTransform];
          long long v53 = v45;
          long long v54 = v46;
          long long v55 = v47;
          long long v56 = v48;
          long long v49 = re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(&v53);
          [v37 setObject:v49 forKey:@"worldTransform"];

          long long v50 = objc_msgSend(NSString, "stringWithFormat:", @"Source Entity-%llu", v17);
          [(NSMutableDictionary *)v52 setObject:v37 forKey:v50];

          unint64_t v16 = v36;
        }
      }
      else
      {
        id v20 = [NSDictionary dictionary];
        objc_msgSend(NSString, "stringWithFormat:", @"null Entity-%llu", v17);
        id v35 = (id)objc_claimAutoreleasedReturnValue();
        [(NSMutableDictionary *)v52 setObject:v20 forKey:v35];
      }

      if (v19) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v19);
      }
      long long v15 = (void *)*v15;
    }
    while (v15);
  }
  os_unfair_lock_unlock(lock);
}

void sub_23359CC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

id re::audio::REPHASEAudioScene::fillOutDebugInformation(NSMutableDictionary *)::$_0::operator()(_DWORD *a1)
{
  v43[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = [MEMORY[0x263EFF980] array];
  LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *a1;
  uint64_t v4 = [NSNumber numberWithFloat:v3];
  v43[0] = v4;
  LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = a1[4];
  long long v6 = [NSNumber numberWithFloat:v5];
  v43[1] = v6;
  LODWORD(v7) = a1[8];
  long long v8 = [NSNumber numberWithFloat:v7];
  void v43[2] = v8;
  LODWORD(v9) = a1[12];
  long long v10 = [NSNumber numberWithFloat:v9];
  v43[3] = v10;
  long long v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v43 count:4];
  [v2 addObject:v11];

  LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = a1[1];
  long long v13 = [NSNumber numberWithFloat:v12];
  v42[0] = v13;
  LODWORD(v14) = a1[5];
  long long v15 = [NSNumber numberWithFloat:v14];
  v42[1] = v15;
  LODWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a1[9];
  uint64_t v17 = [NSNumber numberWithFloat:v16];
  void v42[2] = v17;
  LODWORD(v1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a1[13];
  double v19 = [NSNumber numberWithFloat:v18];
  v42[3] = v19;
  id v20 = [MEMORY[0x263EFF8C0] arrayWithObjects:v42 count:4];
  [v2 addObject:v20];

  LODWORD(v2re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = a1[2];
  uint64_t v22 = [NSNumber numberWithFloat:v21];
  v41[0] = v22;
  LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = a1[6];
  long long v24 = [NSNumber numberWithFloat:v23];
  v41[1] = v24;
  LODWORD(v2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = a1[10];
  long long v26 = [NSNumber numberWithFloat:v25];
  uint64_t v41[2] = v26;
  LODWORD(v27) = a1[14];
  __int16 v28 = [NSNumber numberWithFloat:v27];
  v41[3] = v28;
  long long v29 = [MEMORY[0x263EFF8C0] arrayWithObjects:v41 count:4];
  [v2 addObject:v29];

  LODWORD(v30) = a1[3];
  long long v31 = [NSNumber numberWithFloat:v30];
  v40[0] = v31;
  LODWORD(v3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = a1[7];
  unint64_t v33 = [NSNumber numberWithFloat:v32];
  v40[1] = v33;
  LODWORD(v34) = a1[11];
  id v35 = [NSNumber numberWithFloat:v34];
  v40[2] = v35;
  LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = a1[15];
  char v37 = [NSNumber numberWithFloat:v36];
  v40[3] = v37;
  uint64_t v38 = [MEMORY[0x263EFF8C0] arrayWithObjects:v40 count:4];
  [v2 addObject:v38];

  return v2;
}

void sub_23359CFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::getOrCreateEntity(os_unfair_lock_s *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v8 = a2;
  double v5 = this + 4;
  os_unfair_lock_lock(this + 4);
  long long v6 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[6]._os_unfair_lock_opaque, &v8);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = v6[4];
  *a3 = v6[3];
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v5);
}

void sub_23359D204(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::getOrCreateEntityWithIncrementedCount(os_unfair_lock_s *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v9 = a2;
  double v5 = this + 4;
  os_unfair_lock_lock(this + 4);
  long long v6 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[6]._os_unfair_lock_opaque, &v9);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = v6[3];
  ++*(_DWORD *)(v7 + 112);
  uint64_t v8 = v6[4];
  *a3 = v7;
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v5);
}

void sub_23359D368(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::decrementOrDestroyEntityWithZeroCount(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  *(void *)long long v13 = a2;
  double v5 = this + 6;
  long long v6 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[6]._os_unfair_lock_opaque, (unint64_t *)v13);
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 3);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 + 4);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      int v9 = *(_DWORD *)(v7 + 112);
      BOOL v10 = __OFSUB__(v9--, 1);
      *(_DWORD *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = v9;
      if ((v9 < 0) ^ v10 | (v9 == 0))
      {
        long long v11 = *re::audioLogObjects(v6);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v13 = 134217984;
          *(void *)&void v13[4] = a2;
          _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Removing PHASEEntity with ID: %llu", v13, 0xCu);
        }
        *(void *)long long v13 = a2;
        std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>(v5, (unint64_t *)v13);
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  double v12 = *re::audioLogObjects(v6);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long v13 = 0;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "decrementOrDestroyEntityWithZeroCount: PHASEEntity is a nullptr", v13, 2u);
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_12:
  if (v8) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
LABEL_14:
  os_unfair_lock_unlock(v4);
}

void sub_23359D508(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *re::audio::REPHASEAudioScene::getEntityUnderLock@<X0>(re::audio::REPHASEAudioScene *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)this + 3, &v6);
  if (result)
  {
    uint64_t v5 = result[4];
    *a3 = result[3];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void re::audio::REPHASEAudioScene::getEntity(os_unfair_lock_s *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = this + 4;
  os_unfair_lock_lock(this + 4);
  re::audio::REPHASEAudioScene::getEntityUnderLock((re::audio::REPHASEAudioScene *)this, a2, a3);
  os_unfair_lock_unlock(v6);
}

void sub_23359D5EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::removeEntity(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v4 = a2;
  double v3 = this + 4;
  os_unfair_lock_lock(this + 4);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>(&this[6]._os_unfair_lock_opaque, &v4);
  os_unfair_lock_unlock(v3);
}

void sub_23359D64C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::createListener(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 144) = a2;
  double v3 = (id *)(a1 + 128);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
  uint64_t v5 = [WeakRetained maybeEngine];

  if (v5)
  {
    unint64_t v6 = (id *)(a1 + 72);
    if (!*(void *)(a1 + 72))
    {
      id v7 = objc_alloc(MEMORY[0x263F14950]);
      id v8 = objc_loadWeakRetained(v3);
      int v9 = [v8 engine];
      BOOL v10 = (void *)[v7 initWithEngine:v9];

      id v11 = objc_loadWeakRetained(v3);
      double v12 = [v11 engine];
      long long v13 = [v12 rootObject];
      id v17 = 0;
      int v14 = [v13 addChild:v10 error:&v17];
      id v15 = v17;

      double v16 = (os_unfair_lock_s *)(a1 + 64);
      os_unfair_lock_lock(v16);
      if (v14) {
        objc_storeStrong(v6, v10);
      }
      os_unfair_lock_unlock(v16);
    }
  }
}

void sub_23359D794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::createListenerIfPending(re::audio::REPHASEAudioScene *this)
{
  if (!*((void *)this + 9))
  {
    char v1 = *((unsigned char *)this + 144);
    if (v1)
    {
      re::audio::REPHASEAudioScene::createListener((uint64_t)this, v1);
    }
    else
    {
      uint64_t v2 = *re::audioLogObjects(this);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)double v3 = 0;
        _os_log_debug_impl(&dword_233120000, v2, OS_LOG_TYPE_DEBUG, "Cannot create a listener without a valid listener type.", v3, 2u);
      }
    }
  }
}

id re::audio::REPHASEAudioScene::getListener(re::audio::REPHASEAudioScene *this)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  id v3 = *((id *)this + 9);
  os_unfair_lock_unlock(v2);
  return v3;
}

void re::audio::REPHASEAudioScene::removeListener(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  id v3 = *(void **)&this[18]._os_unfair_lock_opaque;
  *(void *)&this[18]._uint64_t os_unfair_lock_opaque = 0;

  os_unfair_lock_unlock(v2);
}

id re::audio::REPHASEAudioScene::getSessionRoot(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v7 = a2;
  id v3 = this + 20;
  os_unfair_lock_lock(this + 20);
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[22]._os_unfair_lock_opaque, &v7);
  if (v4) {
    id v5 = (id)v4[3];
  }
  else {
    id v5 = 0;
  }
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_23359D990(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::removeSessionRoot(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v6 = a2;
  id v3 = this + 20;
  os_unfair_lock_lock(this + 20);
  unint64_t v4 = this + 22;
  id v5 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(v4, &v6);
  if (v5)
  {
    objc_msgSend((id)v5[3], "setTransform:", *MEMORY[0x263EF89A8], *(double *)(MEMORY[0x263EF89A8] + 16), *(double *)(MEMORY[0x263EF89A8] + 32), *(double *)(MEMORY[0x263EF89A8] + 48));
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__erase_unique<unsigned long long>(v4, &v6);
  }
  os_unfair_lock_unlock(v3);
}

void sub_23359DA1C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::audio::REPHASEAudioScene::getSourceCount(os_unfair_lock_s *this, unsigned int *a2, unsigned int *a3)
{
  unint64_t v6 = this + 4;
  os_unfair_lock_lock(this + 4);
  unint64_t v7 = *(void **)&this[10]._os_unfair_lock_opaque;
  if (v7)
  {
    int32x2_t v8 = 0;
    do
    {
      int32x2_t v8 = vsub_s32(v8, vmovn_s64(vtstq_s64(*(int64x2_t *)(v7[3] + 16), *(int64x2_t *)(v7[3] + 16))));
      unint64_t v7 = (void *)*v7;
    }
    while (v7);
    if (a2) {
      goto LABEL_5;
    }
  }
  else
  {
    int32x2_t v8 = 0;
    if (a2) {
LABEL_5:
    }
      *a2 = v8.i32[0];
  }
  if (a3) {
    *a3 = v8.u32[1];
  }
  os_unfair_lock_unlock(v6);
}

void std::shared_ptr<re::audio::REPHASEAudioScene>::shared_ptr[abi:ne180100]<re::audio::REPHASEAudioScene,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23359DB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<re::audio::REPHASEAudioScene>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<re::audio::REPHASEAudioScene *,std::shared_ptr<re::audio::REPHASEAudioScene>::__shared_ptr_default_delete<re::audio::REPHASEAudioScene,re::audio::REPHASEAudioScene>,std::allocator<re::audio::REPHASEAudioScene>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_pointer<re::audio::REPHASEAudioScene *,std::shared_ptr<re::audio::REPHASEAudioScene>::__shared_ptr_default_delete<re::audio::REPHASEAudioScene,re::audio::REPHASEAudioScene>,std::allocator<re::audio::REPHASEAudioScene>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<re::audio::REPHASEAudioScene *,std::shared_ptr<re::audio::REPHASEAudioScene>::__shared_ptr_default_delete<re::audio::REPHASEAudioScene,re::audio::REPHASEAudioScene>,std::allocator<re::audio::REPHASEAudioScene>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<re::audio::REPHASEAudioScene>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    objc_destroyWeak((id *)(a2 + 128));
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table(a2 + 88);

    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table(a2 + 24);
    id v3 = *(std::__shared_weak_count **)(a2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x237DBCBD0);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEObject * {__strong}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = a1 + 2;
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = a1[1];
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          id v20 = operator new(8 * *(void *)&prime);
          double v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          double v23 = (void *)*v13;
          if (*v13)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v13;
            long long v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *double v23 = *v29;
                  *long long v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v30) = v29;
                  long long v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                double v23 = v29;
                long long v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        id v35 = (void *)*a1;
        *a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v31 = *a1;
  double v32 = *(void **)(*a1 + 8 * v4);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *double v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v13;
  *long long v13 = i;
  *(void *)(v31 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    double v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_23359E128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove(a1, a2, (uint64_t)&__p);
  id v3 = __p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t re::DisplayStateNotificationManager::DisplayStateNotificationManager(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v6 = *(float **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
      uint64_t v6 = *(float **)(a1 + 8);
    }
  }
  else
  {
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v6;
  }
  re::AudioEngineRunnableManager::addReason(v6, 0);

  return a1;
}

void sub_23359E2B8(_Unwind_Exception *a1)
{
  if (*v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*v2);
  }

  _Unwind_Resume(a1);
}

void re::DisplayStateNotificationManager::~DisplayStateNotificationManager(re::DisplayStateNotificationManager *this)
{
  notify_cancel(*(_DWORD *)this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

id re::audio::SoundAssetRegistrar_Plain::registerSoundAssetWithAudioFileData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = objc_msgSend(a2, "registerSoundAssetWithAudioFileData:identifier:assetType:fileTypeHint:channelLayout:normalizationMode:error:", a11);
  return v11;
}

id re::audio::SoundAssetRegistrar_Plain::registerSoundAssetAtURL(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = [a2 registerSoundAssetAtURL:a3 identifier:a4 assetType:a5 channelLayout:a7 normalizationMode:a8 error:a11];
  return v11;
}

id re::audio::SoundAssetRegistrar_Plain::registerSoundAssetWithData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint8x8_t v9 = [a2 registerSoundAssetWithData:a3 identifier:a4 format:a5 normalizationMode:a6 error:a9];
  return v9;
}

void re::audio::SoundAssetRegistrar_Plain::~SoundAssetRegistrar_Plain(re::audio::SoundAssetRegistrar_Plain *this)
{
}

uint64_t re::audio::phasePrivateReverbPresetFor(re *a1)
{
  uint64_t v1 = 1917742958;
  if ((uint64_t)a1 > 200)
  {
    switch((unint64_t)a1)
    {
      case 0x3E9uLL:
        unsigned __int16 v2 = 28209;
        return v2 | 0x72450000u;
      case 0x3EAuLL:
        return 1917152818;
      case 0x3EBuLL:
        unsigned __int16 v8 = 28209;
        goto LABEL_44;
      case 0x3ECuLL:
        return 1917152820;
      case 0x3EDuLL:
        return 1917152821;
      case 0x3EEuLL:
        return 1917152822;
      case 0x3EFuLL:
        return 1917152823;
      case 0x3F0uLL:
        return 1917152824;
      case 0x3F1uLL:
        return 1917152825;
      case 0x3F2uLL:
        unsigned __int16 v2 = 12592;
        return v2 | 0x72450000u;
      case 0x3F3uLL:
        return v1;
      case 0x3F4uLL:
        unsigned __int16 v8 = 12592;
LABEL_44:
        uint64_t v1 = v8 | 0x72450002;
        break;
      default:
        switch((unint64_t)a1)
        {
          case 0xC9uLL:
            uint64_t v1 = 1917022062;
            break;
          case 0xCAuLL:
LABEL_10:
            unsigned __int16 v3 = 29549;
LABEL_24:
            uint64_t v1 = v3 | 0x724D0000u;
            break;
          case 0xCBuLL:
LABEL_11:
            uint64_t v1 = 1917604403;
            break;
          case 0xCCuLL:
LABEL_12:
            uint64_t v1 = 1917604404;
            break;
          case 0xCDuLL:
LABEL_13:
            uint64_t v1 = 1917020526;
            break;
          case 0xCEuLL:
LABEL_14:
            unsigned __int16 v4 = 29293;
LABEL_26:
            uint64_t v1 = v4 | 0x724C0000u;
            break;
          case 0xCFuLL:
LABEL_15:
            uint64_t v1 = 1917613682;
            break;
          case 0xD0uLL:
LABEL_16:
            uint64_t v1 = 1917547630;
            break;
          case 0xD1uLL:
LABEL_17:
            uint64_t v1 = 1916952948;
            break;
          default:
            return v1;
        }
        break;
    }
  }
  else
  {
    switch((unint64_t)a1)
    {
      case 1uLL:
        return 1917669997;
      case 2uLL:
        return v1;
      case 3uLL:
        uint64_t v5 = 1917666152;
        return v5 + 1225;
      case 4uLL:
        uint64_t v5 = 1917600616;
        return v5 + 1225;
      case 5uLL:
        uint64_t v1 = 1917600616;
        uint64_t v6 = *re::audioLogObjects(a1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "No PHASEPrivateReverbPreset matches kPlate", v10, 2u);
        }
        return v1;
      case 6uLL:
        unsigned __int16 v3 = 17256;
        goto LABEL_24;
      case 7uLL:
        unsigned __int16 v4 = 17256;
        goto LABEL_26;
      case 8uLL:
        return 1917023336;
      case 9uLL:
        return 1917604402;
      case 0xAuLL:
        uint64_t v7 = 1917666152;
        goto LABEL_32;
      case 0xBuLL:
        return 1917667379;
      case 0xCuLL:
        uint64_t v7 = 1917600616;
LABEL_32:
        uint64_t v1 = v7 + 1226;
        break;
      default:
        switch((unint64_t)a1)
        {
          case 'd':
            uint64_t v1 = 1916890725;
            break;
          case 'e':
            uint64_t v1 = 1917810036;
            break;
          case 'f':
            goto LABEL_10;
          case 'g':
            goto LABEL_11;
          case 'h':
            goto LABEL_12;
          case 'i':
            goto LABEL_13;
          case 'j':
            goto LABEL_14;
          case 'k':
            goto LABEL_15;
          case 'l':
            goto LABEL_16;
          case 'm':
            goto LABEL_17;
          default:
            return v1;
        }
        break;
    }
  }
  return v1;
}

const char *re::audio::phasePrivateReverbPresetName(uint64_t a1)
{
  uint64_t v1 = "None";
  if (a1 > 1917547629)
  {
    if (a1 > 1917613681)
    {
      if (a1 > 1917667378)
      {
        uint64_t v3 = 1917678444;
        float v15 = "Outside";
        if (a1 != 1917810036) {
          float v15 = "None";
        }
        if (a1 == 1917678445) {
          uint64_t v5 = "VeryLargeRoom";
        }
        else {
          uint64_t v5 = v15;
        }
        uint64_t v6 = "MediumHall3";
        BOOL v7 = a1 == 1917669997;
        unsigned __int16 v8 = "MediumRoom";
        uint64_t v9 = 1917667379;
        goto LABEL_45;
      }
      uint64_t v3 = 1917667376;
      uint64_t v10 = "MediumHall2";
      if (a1 != 1917667378) {
        uint64_t v10 = "None";
      }
      if (a1 == 1917667377) {
        uint64_t v5 = "MediumHall";
      }
      else {
        uint64_t v5 = v10;
      }
      uint64_t v6 = "SmallRoom";
      BOOL v7 = a1 == 1917666152;
      unsigned __int16 v8 = "MediumChamber";
      unsigned __int16 v11 = 30322;
    }
    else
    {
      if (a1 <= 1917604401)
      {
        uint64_t v3 = 1917601840;
        unsigned __int16 v4 = "LargeHall2";
        if (a1 != 1917601842) {
          unsigned __int16 v4 = "None";
        }
        if (a1 == 1917601841) {
          uint64_t v5 = "LargeHall";
        }
        else {
          uint64_t v5 = v4;
        }
        uint64_t v6 = "SmallRoomBright";
        BOOL v7 = a1 == 1917600616;
        unsigned __int16 v8 = "LargeChamber";
        uint64_t v9 = 1917547630;
        goto LABEL_45;
      }
      uint64_t v3 = 1917604403;
      float v14 = "MediumRoomTreated";
      if (a1 != 1917612653) {
        float v14 = "None";
      }
      if (a1 == 1917604404) {
        uint64_t v5 = "LargeRoomTreated";
      }
      else {
        uint64_t v5 = v14;
      }
      uint64_t v6 = "LargeRoom2";
      BOOL v7 = a1 == 1917604403;
      unsigned __int16 v8 = "LargeRoom";
      unsigned __int16 v11 = 21042;
    }
    uint64_t v9 = v11 | 0x724C0000u;
LABEL_45:
    if (v7) {
      uint64_t v1 = v8;
    }
    if (a1 == v9) {
      uint64_t v1 = v6;
    }
    goto LABEL_49;
  }
  if (a1 <= 1917137200)
  {
    uint64_t v3 = 1917022061;
    unint64_t v12 = "Cathedral";
    long long v13 = "Environment10";
    if (a1 != 1917137200) {
      long long v13 = "None";
    }
    if (a1 != 1917023336) {
      unint64_t v12 = v13;
    }
    if (a1 == 1917022062) {
      uint64_t v5 = "ConcertHall";
    }
    else {
      uint64_t v5 = v12;
    }
    if (a1 == 1917020526) {
      uint64_t v1 = "MediumRoomDry";
    }
    if (a1 == 1916952948) {
      uint64_t v1 = "VerySmallRoomBright";
    }
LABEL_49:
    if (a1 <= v3) {
      return v1;
    }
    else {
      return v5;
    }
  }
  switch(a1)
  {
    case 1917152817:
      uint64_t result = "Environment01";
      break;
    case 1917152818:
      uint64_t result = "Environment02";
      break;
    case 1917152819:
      uint64_t result = "Environment03";
      break;
    case 1917152820:
      uint64_t result = "Environment04";
      break;
    case 1917152821:
      uint64_t result = "Environment05";
      break;
    case 1917152822:
      uint64_t result = "Environment06";
      break;
    case 1917152823:
      uint64_t result = "Environment07";
      break;
    case 1917152824:
      uint64_t result = "Environment08";
      break;
    case 1917152825:
      uint64_t result = "Environment09";
      break;
    default:
      if (a1 == 1917137202) {
        uint64_t v1 = "Environment12";
      }
      if (a1 == 1917137201) {
        uint64_t result = "Environment11";
      }
      else {
        uint64_t result = v1;
      }
      break;
  }
  return result;
}

void sub_23359EB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359EC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359ECD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359F170(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v6 - 144));

  _Unwind_Resume(a1);
}

void sub_23359F344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359F4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23359F768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359F9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359FC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23359FF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  uint64_t v28 = v26;

  objc_destroyWeak(v27);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_2335A0114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2335A0244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2335A06C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *re::audio::AudioFileAssetReader::init(unsigned char *this, re::SeekableInputStream *a2, char a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *(void (****)(void))this;
  if (*(void *)this && this[8])
  {
    uint64_t v7 = re::globalAllocators((re *)this)[2];
    (**v6)(v6);
     this = (unsigned char *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v7 + 40))(v7, v6);
  }
  *(void *)uint64_t v5 = a2;
  v5[8] = a3;
  return this;
}

void sub_2335A09F0(_Unwind_Exception *exception_object)
{
}

void sub_2335A0ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::audio::CanStreamAudioFiles(re::audio *this)
{
  if (qword_26AF7F390 != -1) {
    dispatch_once(&qword_26AF7F390, &__block_literal_global_7);
  }
  return _MergedGlobals_118;
}

uint64_t ___ZN2re5audio19CanStreamAudioFilesEv_block_invoke()
{
  uint64_t result = [MEMORY[0x263EF9380] instancesRespondToSelector:sel_initForReadingFromExtAudioFile_error_];
  _MergedGlobals_118 = result;
  return result;
}

uint64_t re::audio::ConvertBufferFrameLength(re::audio *this, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a3 * a2;
    if ((a3 * (unsigned __int128)a2) >> 64 == v7 >> 63)
    {
      uint64_t v8 = 0;
      *a4 = v7 / this;
      return v8;
    }
    uint64_t v8 = 1685348671;
    uint64_t v9 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v15 = 134218240;
      uint64_t v16 = a3;
      __int16 v17 = 2048;
      uint64_t v18 = v6;
      uint64_t v10 = "ConvertBufferFrameLength: frame length (%lld) * buffer sample rate (%lld) overflows SInt64";
      unsigned __int16 v11 = v9;
      uint32_t v12 = 22;
LABEL_7:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, v12);
    }
  }
  else
  {
    uint64_t v8 = 1685348671;
    long long v13 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(vre::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = 0;
      uint64_t v10 = "ConvertBufferFrameLength: invalid file sample rate = 0";
      unsigned __int16 v11 = v13;
      uint32_t v12 = 2;
      goto LABEL_7;
    }
  }
  return v8;
}

void re::audio::AudioFileAssetReader::~AudioFileAssetReader(re::audio::AudioFileAssetReader *this)
{
  uint64_t v1 = this;
  unsigned __int16 v2 = *(void (****)(void))this;
  if (*(void *)this)
  {
    if (*((unsigned char *)this + 8))
    {
      uint64_t v3 = re::globalAllocators(this)[2];
      (**v2)(v2);
       this = (re::audio::AudioFileAssetReader *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v2);
    }
    *(void *)uint64_t v1 = 0;
  }
  unsigned __int16 v4 = (re::SeekableInputStreamBufferedReader *)*((void *)v1 + 2);
  if (v4)
  {
    uint64_t v5 = re::globalAllocators(this)[2];
    re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader(v4);
    (*(void (**)(uint64_t, re::SeekableInputStreamBufferedReader *))(*(void *)v5 + 40))(v5, v4);
    *((void *)v1 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  }
  uint64_t v6 = (OpaqueAudioFileID *)*((void *)v1 + 3);
  if (v6)
  {
    AudioFileClose(v6);
    *((void *)v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  uint64_t v7 = (OpaqueExtAudioFile *)*((void *)v1 + 4);
  if (v7)
  {
    ExtAudioFileDispose(v7);
    *((void *)v1 + 4) = 0;
  }
  uint64_t v8 = (void *)*((void *)v1 + 6);
  *((void *)v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
}

uint64_t re::audio::AudioFileAssetReader::createExtAudioFile(AudioFileID *this)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unsigned __int16 v2 = this + 3;
  uint64_t v3 = AudioFileOpenWithCallbacks(this, (AudioFile_ReadProc)re::audio::AudioFileAssetReader::readProc, 0, (AudioFile_GetSizeProc)re::audio::AudioFileAssetReader::getSizeProc, 0, 0x6D346166u, this + 3);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *re::audioLogObjects((re *)v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed to read audio file, err = %d", buf, 8u);
    }
    return v4;
  }
  uint64_t v6 = this + 4;
  uint64_t v7 = ExtAudioFileWrapAudioFileID(this[3], 0, this + 4);
  if (v7)
  {
    uint64_t v4 = v7;
    uint64_t v8 = *re::audioLogObjects((re *)v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Failed to read audio file, err = %d", buf, 8u);
    }
    AudioFileClose(*v2);
    return v4;
  }
  UInt32 outSize = 0;
  uint64_t PropertyInfo = ExtAudioFileGetPropertyInfo(*v6, 0x66636C6Fu, &outSize, 0);
  uint64_t v4 = PropertyInfo;
  if (PropertyInfo)
  {
    uint64_t v10 = *re::audioLogObjects((re *)PropertyInfo);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to get property info for file channel layout. err = %d", buf, 8u);
    }
    ExtAudioFileDispose(*v6);
    AudioFileClose(*v2);
    return v4;
  }
  unsigned __int16 v11 = malloc_type_malloc(outSize, 0xF8B19F29uLL);
  uint64_t Property = ExtAudioFileGetProperty(*v6, 0x66636C6Fu, &outSize, v11);
  uint64_t v4 = Property;
  if (!Property)
  {
    int v14 = (unsigned __int16)*v11;
    if (*v11)
    {
LABEL_18:
      *(void *)long long v48 = 0x96C70636DLL;
      *(double *)long long buf = 48000.0;
      uint64_t v52 = 32;
      int v50 = 4 * v14;
      int v51 = v14;
      *(_DWORD *)&v48[8] = 4 * v14;
      int v49 = 1;
      UInt32 ioPropertyDataSize = 40;
      uint64_t v15 = ExtAudioFileGetProperty(*v6, 0x66666D74u, &ioPropertyDataSize, outPropertyData);
      uint64_t v4 = v15;
      if (v15)
      {
        uint64_t v16 = *re::audioLogObjects((re *)v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v43 = 67109120;
          *(_DWORD *)&v43[4] = v4;
          _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Failed to get file data format. err = %d", v43, 8u);
        }
LABEL_35:
        ExtAudioFileDispose(*v6);
        AudioFileClose(*v2);
        goto LABEL_36;
      }
      uint64_t v19 = ExtAudioFileSetProperty(*v6, 0x63666D74u, 0x28u, buf);
      uint64_t v4 = v19;
      if (v19)
      {
        id v20 = *re::audioLogObjects((re *)v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v43 = 67109120;
          *(_DWORD *)&v43[4] = v4;
          _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Failed to set client memory format. err = %d", v43, 8u);
        }
        goto LABEL_35;
      }
      UInt32 outSize = 8;
      uint64_t v22 = (uint64_t *)(this + 5);
      uint64_t v23 = ExtAudioFileGetProperty(this[4], 0x2366726Du, &outSize, this + 5);
      uint64_t v4 = v23;
      if (v23)
      {
        uint8x8_t v25 = *re::audioLogObjects((re *)v23);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v43 = 67109120;
          *(_DWORD *)&v43[4] = v4;
          _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Failed to get file length. err = %d", v43, 8u);
        }
        goto LABEL_35;
      }
      uint64_t v31 = *v22;
      if (*v22 < 0)
      {
        uint64_t v4 = 1685348671;
        double v34 = *re::audioLogObjects((re *)v23);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = *v22;
          *(_DWORD *)long long v43 = 134218240;
          *(void *)&v43[4] = v38;
          __int16 v44 = 1024;
          int v45 = 1685348671;
          _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "Invalid file length = %lld, err = %d (kAudioFileInvalidFileError)", v43, 0x12u);
        }
      }
      else
      {
        *(void *)long long v43 = 0;
        double v32 = (re *)re::audio::ConvertBufferFrameLength((re::audio *)outPropertyData[0], *(double *)buf, v31, (uint64_t *)v43, v24);
        uint64_t v4 = (uint64_t)v32;
        if (!v32)
        {
          *uint64_t v22 = *(void *)v43;
          int v50 = 4;
          *(void *)&v48[4] = 0x400000029;
          id v35 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayout:v11];
          uint64_t v36 = [objc_alloc(MEMORY[0x263EF9388]) initWithStreamDescription:buf channelLayout:v35];
          AudioFileID v37 = this[6];
          this[6] = (AudioFileID)v36;

          goto LABEL_36;
        }
        unint64_t v33 = *re::audioLogObjects(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v41 = 67109120;
          int v42 = v4;
          _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to convert buffer frame length, err = %d", v41, 8u);
        }
      }
      *uint64_t v22 = 0;
      ExtAudioFileDispose(*v6);
      AudioFileClose(*v2);
LABEL_36:
      free(v11);
      return v4;
    }
    *(_DWORD *)long long v43 = 40;
    uint64_t v17 = ExtAudioFileGetProperty(*v6, 0x66666D74u, (UInt32 *)v43, buf);
    uint64_t v4 = v17;
    if (v17)
    {
      uint64_t v18 = *re::audioLogObjects((re *)v17);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        ExtAudioFileDispose(*v6);
        AudioFileClose(*v2);
        goto LABEL_36;
      }
      LODWORD(outPropertyData[0]) = 67109120;
      HIDWORD(outPropertyData[0]) = v4;
      uint64_t v28 = "Failed to get property for file data layout. err = %d";
      long long v29 = v18;
      uint32_t v30 = 8;
LABEL_51:
      _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)outPropertyData, v30);
      goto LABEL_24;
    }
    int v14 = v51;
    if (v51 == 1)
    {
      int v21 = 6553601;
    }
    else
    {
      if (v51 != 2)
      {
        uint8x8_t v27 = *re::audioLogObjects((re *)v17);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        LOWORD(outPropertyData[0]) = 0;
        uint64_t v28 = "Loaded audio file with >2 channels is missing a layout tag.";
        long long v29 = v27;
        uint32_t v30 = 2;
        goto LABEL_51;
      }
      int v21 = 6619138;
    }
    *(_DWORD *)unsigned __int16 v11 = v21;
    goto LABEL_18;
  }
  long long v13 = *re::audioLogObjects((re *)Property);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Failed to get property for file channel layout. err = %d", buf, 8u);
  }
  ExtAudioFileDispose(*v6);
  AudioFileClose(*v2);
  if (v11) {
    goto LABEL_36;
  }
  return v4;
}

void sub_2335A1538(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t re::audio::AudioFileAssetReader::readProc(re **this, re *a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int *a6)
{
  unsigned int v8 = a3;
  uint64_t v9 = a2;
  unsigned __int16 v11 = (re *)(*(uint64_t (**)(re *, re *, uint64_t, uint64_t, _DWORD *, unsigned int *))(*(void *)*this + 64))(*this, a2, a3, a4, a5, a6);
  if (v11 < v9) {
    uint64_t v9 = v11;
  }
  if (v11 >= (re *)((char *)v9 + v8)) {
    uint32_t v12 = (re *)((char *)v9 + v8);
  }
  else {
    uint32_t v12 = v11;
  }
  if (v12 <= v9)
  {
    uint64_t v17 = *re::audioLogObjects(v11);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 0;
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "AudioFileAssetReader::readProc() invalid request.", (uint8_t *)v18, 2u);
    }
    uint64_t result = 4294967256;
    if (a5)
    {
      int v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(re *, re *))(*(void *)*this + 56))(*this, v9);
    int v14 = re::CopyRead(*this, (re::SeekableInputStream *)((int)v12 - (int)v9), a4, v13);
    if (a5)
    {
      int v15 = v14;
      uint64_t result = 0;
LABEL_13:
      *a5 = v15;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t re::audio::AudioFileAssetReader::getSizeProc(re::audio::AudioFileAssetReader *this, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)this + 64))();
}

id re::audio::AudioFileAssetReader::readFromData(re::audio::AudioFileAssetReader *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  ExtAudioFile = (re *)re::audio::AudioFileAssetReader::createExtAudioFile((AudioFileID *)this);
  if (ExtAudioFile)
  {
    id v3 = 0;
    goto LABEL_32;
  }
  uint64_t v4 = *re::audioLogObjects(ExtAudioFile);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *((void *)this + 5);
    ioData.mNumberBuffers = 134217984;
    *(void *)(&ioData.mNumberBuffers + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v30;
    _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "About to read %lld samples into memory", (uint8_t *)&ioData, 0xCu);
  }
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:*((void *)this + 6) frameCapacity:*((unsigned int *)this + 10)];
  [v5 setFrameLength:*((unsigned int *)this + 10)];
  uint64_t v6 = (AudioBufferList *)[v5 mutableAudioBufferList];
  UInt32 v7 = *((_DWORD *)this + 10);
  UInt32 ioNumberFrames = v7;
  UInt32 v8 = [*((id *)this + 6) channelCount];
  UInt32 v9 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = (re *)ExtAudioFileRead(*((ExtAudioFileRef *)this + 4), &ioNumberFrames, v6);
    UInt32 v11 = v10;
    if (v10)
    {
      uint32_t v12 = *re::audioLogObjects(v10);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        ioData.mNumberBuffers = 67109120;
        *(&ioData.mNumberBuffers + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v11;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to read the audio samples. err = %d", (uint8_t *)&ioData, 8u);
      }
      id v3 = 0;
      goto LABEL_31;
    }
    [v5 setFrameLength:ioNumberFrames];
  }
  else
  {
    uint64_t v31 = v5;
    UInt32 v13 = v8 << 12;
    int v14 = malloc_type_malloc(v8 << 12, 0x934CDEDuLL);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = v9;
    ioData.mBuffers[0].mDataByteSize = v13;
    ioData.mBuffers[0].mData = v14;
    if (v7)
    {
      unsigned int v15 = 0;
      p_mData = &v6->mBuffers[0].mData;
      unsigned int v17 = v7;
      while (1)
      {
        UInt32 v18 = v17 >= 0x400 ? 1024 : v17;
        UInt32 v32 = v18;
        uint64_t v19 = (re *)ExtAudioFileRead(*((ExtAudioFileRef *)this + 4), &v32, &ioData);
        int v20 = (int)v19;
        if (v19) {
          break;
        }
        UInt32 v21 = v32;
        if (!v32)
        {
          [v31 setFrameLength:v7 - v17];
          goto LABEL_29;
        }
        UInt32 v22 = v32 + v15;
        uint64_t v23 = v14;
        do
        {
          if (v9)
          {
            unint64_t v24 = p_mData;
            uint64_t v25 = v9;
            do
            {
              uint8x8_t v27 = *v24;
              v24 += 2;
              unint64_t v26 = v27;
              LODWORD(v27) = *v23++;
              v26[v15] = v27;
              --v25;
            }
            while (v25);
          }
          ++v15;
        }
        while (v15 != v22);
        unsigned int v15 = v22;
        v17 -= v21;
        if (!v17) {
          goto LABEL_29;
        }
      }
      uint64_t v28 = *re::audioLogObjects(v19);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v35 = v20;
        _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Failed to read the audio samples. err = %d", buf, 8u);
      }
      free(v14);
      id v3 = 0;
      uint64_t v5 = v31;
      goto LABEL_31;
    }
LABEL_29:
    free(v14);
    uint64_t v5 = v31;
  }
  id v3 = v5;
LABEL_31:

LABEL_32:
  return v3;
}

void sub_2335A19E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

BOOL re::audio::AudioFileAssetWriter::writeToStreamWithDefaultCompression(id *this)
{
  unsigned __int16 v2 = [*this format];
  id v3 = (const AudioStreamBasicDescription *)[v2 streamDescription];

  inFormat.mSampleRate = 48000.0;
  UInt32 mChannelsPerFrame = v3->mChannelsPerFrame;
  *(void *)&inFormat.mBitsPerChannel = 0;
  inFormat.mBytesPerFrame = 0;
  inFormat.UInt32 mChannelsPerFrame = mChannelsPerFrame;
  *(_OWORD *)&inFormat.mFormatID = xmmword_23437A840;
  return re::audio::AudioFileAssetWriter::writeToStream(this, v3, &inFormat, 0x6D346166u);
}

void sub_2335A1AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL re::audio::AudioFileAssetWriter::writeToStream(id *this, const AudioStreamBasicDescription *a2, AudioStreamBasicDescription *inFormat, AudioFileTypeID inFileType)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  ExtAudioFileRef outExtAudioFile = 0;
  AudioFileID inFileID = 0;
  uint64_t v6 = (re *)AudioFileInitializeWithCallbacks(this, (AudioFile_ReadProc)re::audio::AudioFileAssetWriter::readProc, (AudioFile_WriteProc)re::audio::AudioFileAssetWriter::writeProc, (AudioFile_GetSizeProc)re::audio::AudioFileAssetWriter::getSizeProc, (AudioFile_SetSizeProc)re::audio::AudioFileAssetWriter::setSizeProc, inFileType, inFormat, 0, &inFileID);
  int v7 = (int)v6;
  if (!v6)
  {
    uint64_t v10 = (re *)ExtAudioFileWrapAudioFileID(inFileID, 1u, &outExtAudioFile);
    int v11 = (int)v10;
    if (v10)
    {
      uint32_t v12 = *re::audioLogObjects(v10);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v35 = v11;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to open ExtAudioFile for writing. Err = %d", buf, 8u);
      }
      AudioFileClose(inFileID);
      return 0;
    }
    UInt32 v13 = [*this format];
    int v14 = [v13 channelLayout];
    unsigned int v15 = (unsigned int *)[v14 layout];

    if (!v15)
    {
LABEL_32:
      uint64_t v23 = (re *)ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, a2);
      int v24 = (int)v23;
      if (v23)
      {
        uint64_t v25 = *re::audioLogObjects(v23);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          int v35 = v24;
          _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Failed to set client data format. Err = %d", buf, 8u);
        }
      }
      else
      {
        unint64_t v26 = (re *)ExtAudioFileSetProperty(outExtAudioFile, 0x63636C6Fu, 0x20u, v15);
        int v27 = (int)v26;
        if (v26)
        {
          uint64_t v28 = *re::audioLogObjects(v26);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            int v35 = v27;
            _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Failed to set client channel layout. Err = %d", buf, 8u);
          }
        }
        else
        {
          long long v29 = (re *)ExtAudioFileWrite(outExtAudioFile, [*this frameLength], (const AudioBufferList *)objc_msgSend(*this, "audioBufferList"));
          int v30 = (int)v29;
          if (!v29)
          {
            ExtAudioFileDispose(outExtAudioFile);
            AudioFileClose(inFileID);
            (*(void (**)(id, id, int64_t))(*(void *)this[1] + 16))(this[1], this[2], (unsigned char *)this[3] - (unsigned char *)this[2]);
            return 1;
          }
          uint64_t v31 = *re::audioLogObjects(v29);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            int v35 = v30;
            _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Failed to write audio buffer data. Err = %d", buf, 8u);
          }
        }
      }
      ExtAudioFileDispose(outExtAudioFile);
      AudioFileClose(inFileID);
      return 0;
    }
    uint64_t v16 = *v15;
    if ((int)v16 <= 9240581)
    {
      if ((int)v16 > 7864324)
      {
        if (v16 == 7864325 || v16 == 8126470) {
          goto LABEL_27;
        }
        int v17 = 8323080;
      }
      else
      {
        if (v16 == 7077892 || v16 == 7471107) {
          goto LABEL_27;
        }
        int v17 = 7602180;
      }
    }
    else
    {
      if ((int)v16 > 9437191)
      {
        if ((int)v16 > 12058631)
        {
          if (v16 != 12058632)
          {
            if (v16 != 12386312) {
              goto LABEL_32;
            }
            uint64_t v16 = 11993096;
          }
        }
        else if (v16 != 9437192)
        {
          int v17 = 11993096;
          goto LABEL_26;
        }
LABEL_27:
        UInt32 v18 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:v16];
        uint64_t v19 = (const void *)[v18 layout];
        int v20 = (re *)ExtAudioFileSetProperty(outExtAudioFile, 0x66636C6Fu, 0x20u, v19);
        int v21 = (int)v20;
        if (v20)
        {
          UInt32 v22 = *re::audioLogObjects(v20);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            int v35 = v21;
            _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to set file channel layout. Err = %d", buf, 8u);
          }
          ExtAudioFileDispose(outExtAudioFile);
          AudioFileClose(inFileID);

          return 0;
        }

        goto LABEL_32;
      }
      if (v16 == 9240582 || v16 == 9306119) {
        goto LABEL_27;
      }
      int v17 = 9371655;
    }
LABEL_26:
    if (v16 != v17) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  UInt32 v8 = *re::audioLogObjects(v6);
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  *(_DWORD *)long long buf = 67109120;
  int v35 = v7;
  _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Failed to open AudioFile for writing. Err = %d", buf, 8u);
  return 0;
}

void sub_2335A2014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL re::audio::AudioFileAssetWriter::writeToStreamWithCustomOutputDescription(id *a1, AudioStreamBasicDescription *a2, uint64_t a3)
{
  uint64_t v6 = [*a1 format];
  int v7 = (const AudioStreamBasicDescription *)[v6 streamDescription];

  if ((a3 & 0xFF00000000) != 0) {
    AudioFileTypeID v8 = a3;
  }
  else {
    AudioFileTypeID v8 = 1667327590;
  }
  return re::audio::AudioFileAssetWriter::writeToStream(a1, v7, a2, v8);
}

void sub_2335A20BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::audio::AudioFileAssetWriter::readProc(re::audio::AudioFileAssetWriter *this, char *a2, int a3, void *__dst, int *a5, unsigned int *a6)
{
  uint64_t v6 = *((void *)this + 2);
  int v7 = (char *)(*((void *)this + 3) - v6);
  if (v7 <= a2) {
    return 4294967256;
  }
  if (v7 >= &a2[a3]) {
    int v7 = &a2[a3];
  }
  int v9 = v7 - a2;
  memcpy(__dst, &a2[v6], v7 - a2);
  uint64_t result = 0;
  if (a5) {
    *a5 = v9;
  }
  return result;
}

uint64_t re::audio::AudioFileAssetWriter::writeProc(re::audio::AudioFileAssetWriter *this, char *a2, size_t __n, void *__src, _DWORD *a5, unsigned int *a6)
{
  int v8 = __n;
  size_t v10 = __n;
  uint64_t v11 = *((void *)this + 2);
  uint32_t v12 = (uint64_t *)((char *)this + 16);
  unint64_t v13 = *((void *)this + 3) - v11;
  int v14 = &a2[__n];
  if ((unint64_t)v14 > v13)
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 2, (size_t)&v14[-v13]);
    uint64_t v11 = *v12;
  }
  memcpy(&a2[v11], __src, v10);
  if (a5) {
    *a5 = v8;
  }
  return 0;
}

uint64_t re::audio::AudioFileAssetWriter::getSizeProc(re::audio::AudioFileAssetWriter *this, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 3) - *((void *)this + 2);
  id v3 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 134217984;
    uint64_t v6 = v2;
    _os_log_debug_impl(&dword_233120000, v3, OS_LOG_TYPE_DEBUG, "AudioFileAsset.writer.getSize() -> %lld", (uint8_t *)&v5, 0xCu);
  }
  return v2;
}

uint64_t re::audio::AudioFileAssetWriter::setSizeProc(re::audio::AudioFileAssetWriter *this, char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 134217984;
    int v9 = a2;
    _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "AudioFileAsset.writer.setSize(%lld)", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v5 = *((void *)this + 2);
  unint64_t v6 = *((void *)this + 3) - v5;
  if ((unint64_t)a2 <= v6)
  {
    if ((unint64_t)a2 < v6) {
      *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = &a2[v5];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 2, (size_t)&a2[-v6]);
  }
  return 0;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint32_t v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void re::AudioManager_PHASE_State_Recovering::~AudioManager_PHASE_State_Recovering(re::AudioManager_PHASE_State_Recovering *this)
{
  *(void *) this = &unk_26E6DBCC0;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  id v3 = (uint64_t *)*((void *)this + 2);
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    ++v2;
  }
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__clear[abi:ne180100](v1);
  uint64_t v5 = v1;
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

{
  uint64_t vars8;

  re::AudioManager_PHASE_State_Recovering::~AudioManager_PHASE_State_Recovering(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AudioManager_PHASE_State_Recovering::handleStateChangeEvent(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 - 2 < 8)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8 * a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3, a4);
LABEL_3:
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v6 == v7)
    {
      uint64_t v9 = 0x100000000;
      uint64_t v8 = 2;
    }
    else
    {
      uint64_t v8 = 2;
      while (((*(uint64_t (**)(void))(**(void **)v6 + 24))() & 1) != 0)
      {
        v6 += 8;
        if (v6 == v7) {
          goto LABEL_14;
        }
      }
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    return v8 | v9;
  }
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v9 = 0x100000000;
      uint64_t v8 = 1;
      return v8 | v9;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 0;
LABEL_14:
  uint64_t v9 = 0x100000000;
  return v8 | v9;
}

void re::AudioManager_PHASE_State_Recovering::stateDescription(re::AudioManager_PHASE_State_Recovering *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 16) + 32))(&v61);
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v63, "), (");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 24) + 32))(v59);
  if ((v60 & 0x80u) == 0) {
    uint64_t v6 = v59;
  }
  else {
    uint64_t v6 = (void **)v59[0];
  }
  if ((v60 & 0x80u) == 0) {
    std::string::size_type v7 = v60;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v59[1];
  }
  uint64_t v8 = std::string::append(&v64, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  size_t v10 = std::string::append(&v65, "), (");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 40) + 32))(v57);
  if ((v58 & 0x80u) == 0) {
    uint32_t v12 = v57;
  }
  else {
    uint32_t v12 = (void **)v57[0];
  }
  if ((v58 & 0x80u) == 0) {
    std::string::size_type v13 = v58;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v57[1];
  }
  int v14 = std::string::append(&v66, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v67, "), (");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 48) + 32))(v55);
  if ((v56 & 0x80u) == 0) {
    UInt32 v18 = v55;
  }
  else {
    UInt32 v18 = (void **)v55[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v19 = v56;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)v55[1];
  }
  int v20 = std::string::append(&v68, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  UInt32 v22 = std::string::append(&v69, "), (");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 32) + 32))(v53);
  if ((v54 & 0x80u) == 0) {
    int v24 = v53;
  }
  else {
    int v24 = (void **)v53[0];
  }
  if ((v54 & 0x80u) == 0) {
    std::string::size_type v25 = v54;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v53[1];
  }
  unint64_t v26 = std::string::append(&v70, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t v28 = std::string::append(&v71, "), (");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 56) + 32))(v51);
  if ((v52 & 0x80u) == 0) {
    int v30 = v51;
  }
  else {
    int v30 = (void **)v51[0];
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v31 = v52;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)v51[1];
  }
  UInt32 v32 = std::string::append(&v72, (const std::string::value_type *)v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  double v34 = std::string::append(&v73, "), (");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 64) + 32))(v49);
  if ((v50 & 0x80u) == 0) {
    uint64_t v36 = v49;
  }
  else {
    uint64_t v36 = (void **)v49[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v37 = v50;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)v49[1];
  }
  uint64_t v38 = std::string::append(&v74, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  long long v40 = std::string::append(&v75, "), (");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 72) + 32))(__p);
  if ((v48 & 0x80u) == 0) {
    int v42 = __p;
  }
  else {
    int v42 = (void **)__p[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v43 = v48;
  }
  else {
    std::string::size_type v43 = (std::string::size_type)__p[1];
  }
  __int16 v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  long long v46 = std::string::append(&v77, ").");
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if ((char)v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if ((char)v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if ((char)v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if ((char)v58 < 0) {
    operator delete(v57[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if ((char)v60 < 0) {
    operator delete(v59[0]);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
}

void sub_2335A2C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (*(char *)(v84 - 57) < 0) {
    operator delete(*(void **)(v84 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v84 - 89) < 0) {
    operator delete(*(void **)(v84 - 112));
  }
  if (*(char *)(v84 - 121) < 0) {
    operator delete(*(void **)(v84 - 144));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v84 - 153) < 0) {
    operator delete(*(void **)(v84 - 176));
  }
  if (*(char *)(v84 - 185) < 0) {
    operator delete(*(void **)(v84 - 208));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v84 - 217) < 0) {
    operator delete(*(void **)(v84 - 240));
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void sub_2335A2E34()
{
}

void sub_2335A2E3C()
{
}

void sub_2335A2E44()
{
}

void sub_2335A2E4C()
{
}

void sub_2335A2E54()
{
}

void sub_2335A2E5C()
{
}

void sub_2335A2E64()
{
}

void sub_2335A2E6C()
{
}

void sub_2335A2E74()
{
}

void sub_2335A2E7C()
{
}

void sub_2335A2E84()
{
}

void sub_2335A2E8C()
{
}

void sub_2335A2E94()
{
}

void sub_2335A2E9C()
{
}

uint64_t re::AudioManager_PHASE_State_Recovering::stateType(re::AudioManager_PHASE_State_Recovering *this)
{
  return 1;
}

void re::AudioManager_PHASE_State_Recovering::getInitialRequiredRecoverySteps(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_2335A3154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::unique_ptr<re::AudioManager_PHASE_StateMachine_RecoveryStep>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

re::REPHASESpatialMixerDefinitionCache *re::REPHASESpatialMixerDefinitionCache::REPHASESpatialMixerDefinitionCache(re::REPHASESpatialMixerDefinitionCache *this)
{
  *(_DWORD *) this = 0;
  *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v2 = (id *)((char *)this + 8);
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  id v3 = objc_alloc_init(MEMORY[0x263EFF8E0]);
  id v4 = *v2;
  *uint64_t v2 = v3;

  [*v2 setTotalCostLimit:50];
  long long v5 = (void *)[objc_alloc(MEMORY[0x263F14968]) initWithValue:@"reverbSend" minimum:1.0 maximum:0.0 identifier:10.0];
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F14968]) initWithValue:@"directSend" minimum:1.0 maximum:0.0 identifier:1.0];
  uint64_t v7 = [objc_alloc(MEMORY[0x263F149B8]) initWithFlags:7];
  uint64_t v8 = (void *)*((void *)this + 2);
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v7;

  long long v9 = [*((id *)this + 2) entries];
  size_t v10 = [v9 objectForKeyedSubscript:*MEMORY[0x263F149F0]];
  [v10 setSendLevelMetaParameterDefinition:v5];

  long long v11 = [*((id *)this + 2) entries];
  uint32_t v12 = [v11 objectForKeyedSubscript:*MEMORY[0x263F149E8]];
  [v12 setSendLevelMetaParameterDefinition:v5];

  std::string::size_type v13 = [*((id *)this + 2) entries];
  int v14 = [v13 objectForKeyedSubscript:*MEMORY[0x263F149E0]];
  [v14 setSendLevelMetaParameterDefinition:v6];

  return this;
}

void sub_2335A3374(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(re::REPHASESpatialMixerDefinitionCache *this)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26E6DBD10;
  v3[1] = this;
  v3[3] = v3;
  uint64_t v1 = re::REPHASESpatialMixerDefinitionCache::getFromCacheOrCreateAndCache((uint64_t)this, @"Omnidirectional", 0, (uint64_t)v3);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_2335A3484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getFromCacheOrCreateAndCache(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = [*(id *)(a1 + 8) objectForKey:v7];
  if (!v8)
  {
    uint64_t v9 = *(void *)(a4 + 24);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
    if (v8) {
      [*(id *)(a1 + 8) setObject:v8 forKey:v7 cost:a3];
    }
  }
  id v10 = v8;

  return v10;
}

void sub_2335A3574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(re::REPHASESpatialMixerDefinitionCache *this)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26E6DBDA0;
  v3[1] = this;
  v3[3] = v3;
  uint64_t v1 = re::REPHASESpatialMixerDefinitionCache::getFromCacheOrCreateAndCache((uint64_t)this, @"Frequency Independent Human", 0, (uint64_t)v3);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_2335A363C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(re::REPHASESpatialMixerDefinitionCache *this, double a2, double a3)
{
  void v10[4] = *MEMORY[0x263EF8340];
  double v8 = a3;
  double v9 = a2;
  id v4 = [NSString stringWithFormat:@"Spherical with radius %.2f and opening angle %.2f.", *(void *)&a2, *(void *)&a3];
  long long v5 = operator new(0x20uLL);
  *long long v5 = &unk_26E6DBE20;
  v5[1] = &v9;
  _DWORD v5[2] = &v8;
  void v5[3] = this;
  void v10[3] = v5;
  uint64_t v6 = re::REPHASESpatialMixerDefinitionCache::getFromCacheOrCreateAndCache((uint64_t)this, v4, 1u, (uint64_t)v10);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100](v10);

  return v6;
}

void sub_2335A373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(re::REPHASESpatialMixerDefinitionCache *this, double a2)
{
  void v7[4] = *MEMORY[0x263EF8340];
  double v6 = a2;
  if (a2 <= 0.0)
  {
    id v4 = re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(this);
  }
  else
  {
    id v3 = [NSString stringWithFormat:@"Beam with focus: %.2f", *(void *)&a2];
    v7[0] = &unk_26E6DBEA0;
    v7[1] = this;
    v7[2] = &v6;
    void v7[3] = v7;
    id v4 = re::REPHASESpatialMixerDefinitionCache::getFromCacheOrCreateAndCache((uint64_t)this, v3, 1u, (uint64_t)v7);
    std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100](v7);
  }
  return v4;
}

void sub_2335A385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::getSpatialMixerDefinitionWithDirectivity(re::REPHASESpatialMixerDefinitionCache *this, PHASEDirectivityModelParameters *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(this);
  long long v5 = (id)*re::audioLogObjects((re *)[v4 setSourceDirectivityModelParameters:v3]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    double v6 = [v4 sourceDirectivityModelParameters];
    int v8 = 138412290;
    double v9 = v6;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_INFO, "REPHASESpatialMixerDefinitionCache::getSpatialMixerDefinitionWithDirectivity returning a definition with the provided directivity: %@.", (uint8_t *)&v8, 0xCu);
  }
  return v4;
}

void sub_2335A3978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(re::REPHASESpatialMixerDefinitionCache *this)
{
  uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"spatialMixer-%d", *(unsigned int *)this);
  id v3 = (void *)[objc_alloc(MEMORY[0x263F149B0]) initWithSpatialPipeline:*((void *)this + 2) identifier:v2];
  id v4 = objc_alloc_init(MEMORY[0x263F14940]);
  [v3 setDistanceModelParameters:v4];

  ++*(_DWORD *)this;
  return v3;
}

void sub_2335A3A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::~__func()
{
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6DBD10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DBD10;
  a2[1] = v2;
  return result;
}

id std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(*(re::REPHASESpatialMixerDefinitionCache **)(a1 + 8));
  uint64_t v2 = *re::audioLogObjects((re *)[v1 setSourceDirectivityModelParameters:0]);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_INFO, "REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition created and cached a new omnidirectional spatial mixer definition.", v4, 2u);
  }
  return v1;
}

void sub_2335A3BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getOmniSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target_type()
{
}

void *std::__function::__value_func<PHASESpatialMixerDefinition * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::~__func()
{
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6DBDA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DBDA0;
  a2[1] = v2;
  return result;
}

id std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::operator()(uint64_t a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(re::REPHASESpatialMixerDefinitionCache **)(a1 + 8);
  id v2 = objc_alloc_init(MEMORY[0x263F14910]);
  [v2 setPattern:1.0];
  id v3 = objc_alloc(MEMORY[0x263F14908]);
  v12[0] = v2;
  id v4 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:1];
  long long v5 = (void *)[v3 initWithSubbandParameters:v4];

  double v6 = re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(v1);
  id v7 = (id)*re::audioLogObjects((re *)[v6 setSourceDirectivityModelParameters:v5]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = [v6 sourceDirectivityModelParameters];
    int v10 = 138412290;
    long long v11 = v8;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_INFO, "REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition created and cached a new frequency-independent human directivity %@.", (uint8_t *)&v10, 0xCu);
  }
  return v6;
}

void sub_2335A3E68(_Unwind_Exception *a1)
{
  long long v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getHumanSpatialMixerDefinition(void)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target_type()
{
}

void std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x20uLL);
  *(void *)id v2 = &unk_26E6DBE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  *((void *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DBE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v2 = *(re::REPHASESpatialMixerDefinitionCache **)(a1 + 24);
  id v3 = objc_alloc_init(MEMORY[0x263F149C0]);
  [v3 setSphereRadius:**(double **)(a1 + 8)];
  [v3 setCapOpeningAngle:**(double **)(a1 + 16)];
  id v4 = re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(v2);
  long long v5 = *re::audioLogObjects((re *)[v4 setSourceDirectivityModelParameters:v3]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = **(void **)(a1 + 8);
    uint64_t v7 = **(void **)(a1 + 16);
    int v9 = 134218240;
    uint64_t v10 = v6;
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_INFO, "REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition created and cached a definition for radius %f and opening angle %f.", (uint8_t *)&v9, 0x16u);
  }

  return v4;
}

void sub_2335A40C8(_Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getSphericalSpatialMixerDefinition(double,double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target_type()
{
}

void std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_26E6DBEA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DBEA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v2 = re::REPHASESpatialMixerDefinitionCache::createBaseSpatialMixerDefinition(*(re::REPHASESpatialMixerDefinitionCache **)(a1 + 8));
  double v3 = **(double **)(a1 + 16);
  double v4 = 1.0;
  if (v3 <= 1.0) {
    double v4 = **(double **)(a1 + 16);
  }
  if (v3 >= 0.0) {
    double v5 = v4;
  }
  else {
    double v5 = 0.0;
  }
  id v6 = objc_alloc_init(MEMORY[0x263F14910]);
  [v6 setFrequency:250.0];
  [v6 setPattern:v5 * 0.25];
  [v6 setSharpness:1.0];
  id v7 = objc_alloc_init(MEMORY[0x263F14910]);
  [v7 setFrequency:1000.0];
  [v7 setPattern:v5 * 0.5];
  [v7 setSharpness:1.0];
  id v8 = objc_alloc_init(MEMORY[0x263F14910]);
  [v8 setFrequency:4000.0];
  if (v5 >= 0.5)
  {
    objc_msgSend(v8, "setPattern:");
    float v9 = v5 + -0.5 + v5 + -0.5;
    [v8 setSharpness:(float)((float)(1.0 - v9) + (float)(v9 * 10.0))];
  }
  else
  {
    [v8 setPattern:v5];
    [v8 setSharpness:1.0];
  }
  id v10 = objc_alloc(MEMORY[0x263F14908]);
  *(void *)&long long v17 = v6;
  *((void *)&v17 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v7;
  id v18 = v8;
  __int16 v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v17 count:3];
  uint64_t v12 = (void *)[v10 initWithSubbandParameters:v11];

  [v2 setSourceDirectivityModelParameters:v12];
  int v14 = *re::audioLogObjects(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = **(void **)(a1 + 16);
    LODWORD(vre::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)this + 17) = 134217984;
    *(void *)((char *)&v17 + 4) = v15;
    _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_INFO, "REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition created and cached a definition with focus %f.", (uint8_t *)&v17, 0xCu);
  }
  return v2;
}

void sub_2335A4424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0,std::allocator<re::REPHASESpatialMixerDefinitionCache::getBeamSpatialMixerDefinition(double)::$_0>,PHASESpatialMixerDefinition * ()(void)>::target_type()
{
}

void std::shared_ptr<re::audio::REPHASEEntity>::shared_ptr[abi:ne180100]<re::audio::REPHASEEntity,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2335A4558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<re::audio::REPHASEEntity>::reset[abi:ne180100]((id **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<re::audio::REPHASEEntity *,std::shared_ptr<re::audio::REPHASEEntity>::__shared_ptr_default_delete<re::audio::REPHASEEntity,re::audio::REPHASEEntity>,std::allocator<re::audio::REPHASEEntity>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

id *std::__shared_ptr_pointer<re::audio::REPHASEEntity *,std::shared_ptr<re::audio::REPHASEEntity>::__shared_ptr_default_delete<re::audio::REPHASEEntity,re::audio::REPHASEEntity>,std::allocator<re::audio::REPHASEEntity>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(id **)(a1 + 24);
  if (result)
  {
    re::audio::REPHASEEntity::~REPHASEEntity(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<re::audio::REPHASEEntity *,std::shared_ptr<re::audio::REPHASEEntity>::__shared_ptr_default_delete<re::audio::REPHASEEntity,re::audio::REPHASEEntity>,std::allocator<re::audio::REPHASEEntity>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void re::audio::REPHASEEntity::~REPHASEEntity(id *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((int *)this + 28) <= 0)
  {
    double v4 = [this[2] parent];
    [v4 removeChild:this[2]];

    double v5 = [this[3] parent];
    [v5 removeChild:this[3]];
  }
  else
  {
    id v2 = *re::audioLogObjects((re *)this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *((_DWORD *)this + 28);
      v7[0] = 67109120;
      v7[1] = v3;
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "REPHASEEntity: Cannot destroy source and occluder from the engine. soundCount(%d) is greater than 0", (uint8_t *)v7, 8u);
    }
  }

  id v6 = (std::__shared_weak_count *)this[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_2335A474C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

id *std::unique_ptr<re::audio::REPHASEEntity>::reset[abi:ne180100](id **a1, id *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    re::audio::REPHASEEntity::~REPHASEEntity(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t re::AudioManager_PHASE_State_Ready::handleStateChangeEvent(re *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((a2 - 1) >= 9)
  {
    if (!a2) {
      return 0x100000000;
    }
  }
  else
  {
    double v4 = (id)*re::audioLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, re *))(*(void *)a1 + 8))(v12, a1);
      int v5 = v13;
      id v6 = (void **)v12[0];
      re::nameForAudioManagerStateMachineEvent(a2, __p);
      id v7 = v12;
      if (v5 < 0) {
        id v7 = v6;
      }
      if (v11 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v15 = v7;
      __int16 v16 = 2080;
      long long v17 = v8;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] Invalid state change event. Current state : %s, event '%s'.", buf, 0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
  }
  return 0;
}

void sub_2335A490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *re::AudioManager_PHASE_State_Ready::stateDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Ready");
}

uint64_t re::AudioManager_PHASE_State_Ready::stateType(re::AudioManager_PHASE_State_Ready *this)
{
  return 2;
}

void re::AudioManager_PHASE_State_Ready::~AudioManager_PHASE_State_Ready(re::AudioManager_PHASE_State_Ready *this)
{
}

void sub_2335A4B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_2335A4C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2335A4CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2335A4D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)REAudioManagerNotificationListener;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2335A4F68(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2335A52AC(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2335A563C(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2335A585C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::audio::allocInfo_AudioSourceDirectivityConfiguration(re::audio *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_119, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_119))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7F3C8, "AudioSourceDirectivityConfiguration");
    __cxa_guard_release(&_MergedGlobals_119);
  }
  return &unk_26AF7F3C8;
}

void re::audio::initInfo_AudioSourceDirectivityConfiguration(re::audio *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xE5B34C3C52C3FC9ELL;
  v22[1] = "AudioSourceDirectivityConfiguration";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F3A0, memory_order_acquire) & 1) == 0)
  {
    double v4 = (re *)__cxa_guard_acquire(&qword_26AF7F3A0);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      id v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "directivityFocus";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x400000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7F3A8 = v8;
      float v9 = re::introspectionAllocator((re *)v8);
      char v11 = introspect_REAudioSourceDirectivityMode(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "sourceDirectivityMode";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 2;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7F3B0 = v12;
      char v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "sphericalCapDiameter";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7F3B8 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "sphericalCapOpeningAngle";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7F3C0 = v20;
      __cxa_guard_release(&qword_26AF7F3A0);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7F3A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::audio::AudioSourceDirectivityConfiguration>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::audio::AudioSourceDirectivityConfiguration>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::audio::AudioSourceDirectivityConfiguration>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::audio::AudioSourceDirectivityConfiguration>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void sub_2335A5C50(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::audio::AudioSourceDirectivityConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 1;
  double result = 6.14672757e-10;
  *(void *)(a3 + 4) = 0x3E051EB800000000;
  *(_DWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 1106247680;
  return result;
}

double re::internal::defaultConstructV2<re::audio::AudioSourceDirectivityConfiguration>(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  double result = 6.14672757e-10;
  *(void *)(a1 + 4) = 0x3E051EB800000000;
  *(_DWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 1106247680;
  return result;
}

uint64_t re::audio::introspect_AudioSourceDirectivityConfiguration(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSourceDirectivityConfiguration", (uint64_t (*)(re::internal *))re::audio::allocInfo_AudioSourceDirectivityConfiguration, (re::IntrospectionBase *(*)(void))re::audio::initInfo_AudioSourceDirectivityConfiguration, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::audio::AudioSourceDirectivityConfiguration>, this);
}

void re::AudioManagerTelemetryReporter::initializeTimerWith(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = re::AudioManagerTelemetryReporter::m_managerQueue;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  block[3] = &unk_264BE31B0;
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  id v9 = v5;
  id v7 = v5;
  dispatch_async(v6, block);
}

void ___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  *(void *)(v2 + 40) = a1[6];
  uint64_t v3 = *(void *)(v2 + 32);
  double v4 = a1[4];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
  void v8[3] = &__block_descriptor_40_e24__TelemetryReport____8__0l;
  v8[4] = v2;
  re::AudioTelemetryReporter::initializeTimerWith(v3, v4, v8, 600.0);
  uint64_t v5 = *(void *)(v2 + 32);
  id v6 = a1[4];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  _DWORD v7[2] = ___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_15;
  void v7[3] = &__block_descriptor_40_e24__TelemetryReport____8__0l;
  void v7[4] = v2;
  re::AudioTelemetryReporter::initializeTimerWith(v5, v6, v7, 300.0);
}

__CFString *___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(re *ReverbPreset)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*((void *)ReverbPreset + 4) + 40);
  if (v1)
  {
    ReverbPreset = (re *)re::AudioManager_PHASE_Async::getReverbPreset(*(pthread_rwlock_t ***)(v1 + 520));
    uint64_t v2 = (uint64_t)ReverbPreset;
  }
  else
  {
    uint64_t v2 = -1;
  }
  uint64_t v3 = *re::audioLogObjects(ReverbPreset);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    uint64_t v8 = v2;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[AudioManagerTelemetryReporter::immersion] - Report: reverbPreset: %lld", (uint8_t *)&v7, 0xCu);
  }
  id v4 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  uint64_t v5 = [NSNumber numberWithLongLong:v2];
  [v4 setObject:v5 forKey:@"reverbPreset"];

  return @"immersion";
}

void sub_2335A5F98(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

__CFString *___ZN2re29AudioManagerTelemetryReporter19initializeTimerWithEPNS_18AudioManager_PHASEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_15(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!NSClassFromString(&cfstr_Xctest.isa))
  {
    uint64_t v30 = 0;
    memset(__s2, 0, sizeof(__s2));
    long long v31 = xmmword_23437A520;
    long long v32 = xmmword_23437A530;
    long long v33 = xmmword_23437A540;
    if (memcmp((const void *)(v1 + 48), __s2, 0x68uLL))
    {
      if (*(_DWORD *)(v1 + 96))
      {
        double v3 = *(double *)(v1 + 104);
        double v2 = *(double *)(v1 + 112);
        double v4 = *(double *)(v1 + 120);
      }
      else
      {
        double v4 = -100.0;
        double v2 = -100.0;
        double v3 = -100.0;
      }
      if (*(_DWORD *)(v1 + 100))
      {
        double v5 = *(double *)(v1 + 128);
        double v6 = *(double *)(v1 + 112);
        double v7 = *(double *)(v1 + 144);
      }
      else
      {
        double v7 = -100.0;
        double v6 = -100.0;
        double v5 = -100.0;
      }
      v34[0] = @"play";
      uint64_t v28 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 48)];
      long long v35 = v28;
      v34[1] = @"maxConcurrentPlayCount";
      uint64_t v36 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 52)];
      v34[2] = @"prepare";
      long long v27 = (void *)v36;
      unint64_t v26 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 60)];
      std::string::size_type v37 = v26;
      v34[3] = @"maxConcurrentPrepareCount";
      std::string::size_type v25 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 56)];
      uint64_t v38 = v25;
      v34[4] = @"channelComponent";
      int v24 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 64)];
      long long v39 = v24;
      v34[5] = @"ambientComponent";
      long long v23 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 72)];
      long long v40 = v23;
      v34[6] = @"spatialComponent";
      UInt32 v22 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 68)];
      long long v41 = v22;
      v34[7] = @"spatialComponentOmniCount";
      long long v21 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 76)];
      int v42 = v21;
      v34[8] = @"spatialComponentHumanDirectivityCount";
      uint64_t v20 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 80)];
      std::string::size_type v43 = v20;
      v34[9] = @"spatialComponentBeamDirectivityCount";
      uint64_t v19 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 84)];
      __int16 v44 = v19;
      v34[10] = @"spatialComponentSphericalApproximationDirectivityCount";
      uint64_t v18 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 88)];
      long long v45 = v18;
      v34[11] = @"calibrationModeNoneCount";
      long long v17 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 92)];
      long long v46 = v17;
      v34[12] = @"calibrationModeRelativeSplCount";
      uint64_t v16 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 96)];
      long long v47 = v16;
      v34[13] = @"calibrationModeAbsoluteSplCount";
      uint64_t v15 = [NSNumber numberWithUnsignedLong:*(unsigned int *)(v1 + 100)];
      unsigned __int8 v48 = v15;
      v34[14] = @"calibrationModeRelativeSplMinValue";
      int v14 = [MEMORY[0x263F087B0] numberWithDouble:v3];
      int v49 = v14;
      v34[15] = @"calibrationModeRelativeSplAverage";
      uint64_t v8 = [MEMORY[0x263F087B0] numberWithDouble:v2];
      unsigned __int8 v50 = v8;
      v34[16] = @"calibrationModeRelativeSplMaxValue";
      uint64_t v9 = [MEMORY[0x263F087B0] numberWithDouble:v4];
      int v51 = v9;
      v34[17] = @"calibrationModeAbsoluteSplMinValue";
      uint64_t v10 = [MEMORY[0x263F087B0] numberWithDouble:v5];
      unsigned __int8 v52 = v10;
      v34[18] = @"calibrationModeAbsoluteSplAverage";
      uint64_t v11 = [MEMORY[0x263F087B0] numberWithDouble:v6];
      uint64_t v53 = v11;
      v34[19] = @"calibrationModeAbsoluteSplMaxValue";
      uint64_t v12 = [MEMORY[0x263F087B0] numberWithDouble:v7];
      unsigned __int8 v54 = v12;
      [NSDictionary dictionaryWithObjects:&v35 forKeys:v34 count:20];
      objc_claimAutoreleasedReturnValue();
    }
  }
  *(void *)(v1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v1 + 104) = xmmword_23437A520;
  *(_OWORD *)(v1 + 120) = xmmword_23437A530;
  *(_OWORD *)(v1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23437A540;
  return @"system_usage";
}

void sub_2335A64D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void ___ZN2re29AudioManagerTelemetryReporter23mediaServicesResetEventEv_block_invoke(uint64_t a1)
{
  void v15[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 16);
  double v4 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    if (mach_timebase_info(&v13))
    {
      double v7 = NAN;
      goto LABEL_6;
    }
    LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v13.numer;
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v13.denom;
    double v4 = (double)v5 / (double)v6;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v4;
  }
  double v7 = v4 * (double)(v2 - v3);
LABEL_6:
  uint64_t v8 = mach_absolute_time();
  double v9 = v7 / 1000000.0;
  *(float *)&double v9 = v7 / 1000000.0;
  *(void *)uint64_t v1 = v8;
  v14[0] = @"timeSinceLastReset";
  uint64_t v10 = [MEMORY[0x263F087B0] numberWithFloat:v9];
  v14[1] = @"resetType";
  v15[0] = v10;
  if (*(unsigned char *)(v1 + 8)) {
    uint64_t v11 = @"mediaServicesReset";
  }
  else {
    uint64_t v11 = @"deviceReboot";
  }
  v15[1] = v11;
  uint64_t v12 = [NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];

  *(unsigned char *)(v1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
  re::AudioTelemetryReporter::sendTelemetryReport(*(NSObject ***)(v1 + 32), @"media_service_reset", v12);
}

void sub_2335A6764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioManagerTelemetryReporter::getInstance(re::AudioManagerTelemetryReporter *this)
{
  uint64_t v1 = (id *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
  {
    uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    double v4 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
    re::AudioManagerTelemetryReporter::getInstance(void)::onceQueue = (uint64_t)dispatch_queue_create("AudioTelemetry", v4);

    uint64_t v1 = (id *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
  }
  objc_storeStrong((id *)&re::AudioManagerTelemetryReporter::m_managerQueue, v1[335]);
  uint64_t result = re::AudioManagerTelemetryReporter::sharedReporter;
  if (!re::AudioManagerTelemetryReporter::sharedReporter)
  {
    dispatch_sync((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &__block_literal_global_8);
    return re::AudioManagerTelemetryReporter::sharedReporter;
  }
  return result;
}

re *___ZN2re29AudioManagerTelemetryReporter11getInstanceEv_block_invoke(re *result)
{
  if (!re::AudioManagerTelemetryReporter::sharedReporter)
  {
    uint64_t v1 = re::globalAllocators(result);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 152, 8);
    *(void *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)(v2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(void *)(v2 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(v2 + 24) = 0;
    *(_OWORD *)(v2 + 104) = xmmword_23437A520;
    *(_OWORD *)(v2 + 120) = xmmword_23437A530;
    *(_OWORD *)(v2 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = xmmword_23437A540;
    uint64_t v3 = (re *)mach_absolute_time();
    *(void *)uint64_t v2 = v3;
    double v4 = re::globalAllocators(v3);
    unint64_t v5 = (re::AudioTelemetryReporter *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
    uint64_t result = re::AudioTelemetryReporter::AudioTelemetryReporter(v5);
    *(void *)(v2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = result;
    re::AudioManagerTelemetryReporter::sharedReporter = v2;
  }
  return result;
}

re *___ZN2re29AudioManagerTelemetryReporter22stopAndCleanupReporterEv_block_invoke(re *result)
{
  uint64_t v1 = re::AudioManagerTelemetryReporter::sharedReporter;
  if (re::AudioManagerTelemetryReporter::sharedReporter)
  {
    uint64_t v2 = re::globalAllocators(result)[2];
    *(void *)(v1 + 40) = 0;
    re::internal::destroyPersistent<re::AudioTelemetryReporter>((re *)"~AudioManagerTelemetryReporter", 144, *(id **)(v1 + 32));
    *(void *)(v1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v1);
    re::AudioManagerTelemetryReporter::sharedReporter = 0;
  }
  return result;
}

uint64_t ___ZN2re29AudioManagerTelemetryReporter22reportSoundEventPlayedEv_block_invoke(uint64_t result)
{
  return result;
}

void re::AudioManagerTelemetryReporter::addPreparedSourceState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = re::AudioManagerTelemetryReporter::m_managerQueue;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re29AudioManagerTelemetryReporter22addPreparedSourceStateENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEE_block_invoke;
  block[3] = &__block_descriptor_56_ea8_40c64_ZTSKNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE_e5_v8__0l;
  uint64_t v5 = *a2;
  double v4 = (std::__shared_weak_count *)a2[1];
  void block[4] = a1;
  void block[5] = v5;
  double v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v3, block);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
}

uint64_t ___ZN2re29AudioManagerTelemetryReporter22addPreparedSourceStateENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  uint64_t v2 = *(void *)(result + 40);
  ++v1[15];
  int v3 = *(unsigned __int8 *)(v2 + 100);
  if (v3 == 2)
  {
    ++v1[18];
  }
  else if (v3 == 1)
  {
    ++v1[16];
  }
  else if (!*(unsigned char *)(v2 + 100))
  {
    ++v1[17];
    switch(*(_DWORD *)(v2 + 312))
    {
      case 0:
        ++v1[19];
        break;
      case 1:
        ++v1[21];
        break;
      case 2:
        ++v1[20];
        break;
      case 3:
        ++v1[22];
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t __copy_helper_block_ea8_40c64_ZTSKNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c64_ZTSKNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t ___ZN2re29AudioManagerTelemetryReporter31updateCalibrationModeStatisticsE22REAudioCalibrationModed_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(result + 48);
  switch(v2)
  {
    case 2:
      double v3 = *(double *)(v1 + 128);
      unsigned int v4 = *(_DWORD *)(v1 + 100) + 1;
      *(double *)(v1 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(double *)(v1 + 136) + (*(double *)(result + 40) - *(double *)(v1 + 136)) / (double)v4;
      *(_DWORD *)(v1 + 100) = v4;
      double v5 = *(double *)(result + 40);
      if (v5 >= v3) {
        double v5 = v3;
      }
      *(double *)(v1 + 12re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v5;
      double v6 = *(double *)(result + 40);
      if (v6 <= *(double *)(v1 + 144)) {
        double v6 = *(double *)(v1 + 144);
      }
      *(double *)(v1 + 144) = v6;
      break;
    case 1:
      double v7 = *(double *)(v1 + 104);
      unsigned int v8 = *(_DWORD *)(v1 + 96) + 1;
      *(double *)(v1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = *(double *)(v1 + 112) + (*(double *)(result + 40) - *(double *)(v1 + 112)) / (double)v8;
      *(_DWORD *)(v1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v8;
      double v9 = *(double *)(result + 40);
      if (v9 >= v7) {
        double v9 = v7;
      }
      *(double *)(v1 + 104) = v9;
      double v10 = *(double *)(result + 40);
      if (v10 <= *(double *)(v1 + 120)) {
        double v10 = *(double *)(v1 + 120);
      }
      *(double *)(v1 + 120) = v10;
      break;
    case 0:
      ++*(_DWORD *)(v1 + 92);
      break;
  }
  return result;
}

uint64_t ___ZN2re29AudioManagerTelemetryReporter25updateConcurrentPlayCountEj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  unsigned int v2 = *(_DWORD *)(result + 40);
  if (v2 <= *(_DWORD *)(v1 + 52)) {
    unsigned int v2 = *(_DWORD *)(v1 + 52);
  }
  *(_DWORD *)(v1 + 5re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v2;
  return result;
}

uint64_t ___ZN2re29AudioManagerTelemetryReporter28updateConcurrentPrepareCountEj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  unsigned int v2 = *(_DWORD *)(result + 40);
  if (v2 <= *(_DWORD *)(v1 + 56)) {
    unsigned int v2 = *(_DWORD *)(v1 + 56);
  }
  *(_DWORD *)(v1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v2;
  return result;
}

void REAudioServicesNotificationCallbackRegistry::registerCallback(uint64_t *a1, _OWORD *a2, void *a3)
{
  id v5 = a3;
  double v6 = _Block_copy(v5);
  double v9 = a2;
  double v7 = std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<REAudioServicesNotificationCallbackConfiguration,std::piecewise_construct_t const&,std::tuple<REAudioServicesNotificationCallbackConfiguration const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v9);
  unsigned int v8 = (void *)v7[4];
  void v7[4] = v6;
}

void sub_2335A6CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *REAudioServicesNotificationCallbackRegistry::unregisterCallback(void *a1, unsigned __int8 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::find<REAudioServicesNotificationCallbackConfiguration>(a1, a2);
  if (result)
  {
    return (uint64_t *)std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::erase(a1, result);
  }
  return result;
}

void REAudioServicesNotificationCallbackRegistry::getCallbacksForType(uint64_t a1@<X0>, int a2@<W1>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double v3 = *(uint64_t ***)(a1 + 16);
  if (v3)
  {
    double v6 = 0;
    do
    {
      int v7 = *((unsigned __int8 *)v3 + 17);
      unsigned int v8 = _Block_copy(v3[4]);
      double v9 = v8;
      if (v7 == a2)
      {
        uint64_t v10 = [v8 copy];
        uint64_t v11 = v10;
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v6 >= v12)
        {
          int v14 = *a3;
          uint64_t v15 = v6 - *a3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v12 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            if (v18 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v19 = (char *)operator new(8 * v18);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (uint64_t *)&v19[8 * v15];
          long long v21 = (uint64_t *)&v19[8 * v18];
          *uint64_t v20 = v11;
          mach_timebase_info v13 = v20 + 1;
          if (v6 == v14)
          {
            *a3 = v20;
            a3[1] = v13;
            a3[2] = v21;
          }
          else
          {
            do
            {
              uint64_t v22 = *--v6;
              *double v6 = 0;
              *--uint64_t v20 = v22;
            }
            while (v6 != v14);
            double v6 = *a3;
            long long v23 = a3[1];
            *a3 = v20;
            a3[1] = v13;
            a3[2] = v21;
            while (v23 != v6)
            {
              int v24 = (void *)*--v23;
            }
          }
          if (v6) {
            operator delete(v6);
          }
        }
        else
        {
          *double v6 = v10;
          mach_timebase_info v13 = v6 + 1;
        }
        a3[1] = v13;
        double v6 = v13;
      }

      double v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
}

void sub_2335A6EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<REAudioServicesNotificationCallbackConfiguration,std::piecewise_construct_t const&,std::tuple<REAudioServicesNotificationCallbackConfiguration const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *((void *)a2 + 1);
  unint64_t v9 = (4 * a2[1]) | (2 * v7) | (8 * v8);
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v4 = (4 * a2[1]) | (2 * v7) | (8 * v8);
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
    }
    else
    {
      uint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*a1 + 8 * v4);
    if (v12)
    {
      mach_timebase_info v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (__PAIR64__(*((unsigned __int8 *)v13 + 17), *((unsigned __int8 *)v13 + 16)) == __PAIR64__(a2[1], v7)
              && v13[3] == v8)
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          mach_timebase_info v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 2;
  mach_timebase_info v13 = operator new(0x28uLL);
  *mach_timebase_info v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = **a4;
  void v13[4] = 0;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = a1[1];
    }
    if (*(void *)&prime > v10) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          long long v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          std::string::size_type v25 = (void *)*v15;
          if (*v15)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
            long long v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v25;
                    goto LABEL_56;
                  }
                  *std::string::size_type v25 = *v31;
                  *long long v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v31;
                  long long v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                std::string::size_type v25 = v31;
                long long v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_60;
        }
        std::string::size_type v37 = (void *)*a1;
        *a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
      else {
        uint64_t v4 = v9;
      }
    }
    else
    {
      uint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v33 = *a1;
  double v34 = *(void **)(*a1 + 8 * v4);
  if (v34)
  {
    *mach_timebase_info v13 = *v34;
LABEL_73:
    *double v34 = v13;
    goto LABEL_74;
  }
  *mach_timebase_info v13 = *v15;
  *uint64_t v15 = v13;
  *(void *)(v33 + 8 * v4) = v15;
  if (*v13)
  {
    unint64_t v35 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    double v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++a1[3];
  return v13;
}

void sub_2335A7354(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::find<REAudioServicesNotificationCallbackConfiguration>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
  unint64_t v5 = (4 * a2[1]) | (2 * v3) | (8 * (void)v4);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = (4 * a2[1]) | (2 * v3) | (8 * (void)v4);
    if (v5 >= *(void *)&v2) {
      uint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(uint64_t ****)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v10 = (unint64_t)result[1];
    if (v10 == v5)
    {
      if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(a2[1], v3)
        && result[3] == v4)
      {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v2) {
          v10 %= *(void *)&v2;
        }
      }
      else
      {
        v10 &= *(void *)&v2 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (id *)__p;
  std::string __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void sub_2335A752C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::allocInfo_AudioSourceSyncState(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_120))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7F460, "AudioSourceSyncState");
    __cxa_guard_release(&_MergedGlobals_120);
  }
  return &unk_26AF7F460;
}

void re::initInfo_AudioSourceSyncState(re *this, re::IntrospectionBase *a2)
{
  v85[0] = 0x66DEFDF30BAE648ALL;
  v85[1] = "AudioSourceSyncState";
  re::StringID::destroyString((re::StringID *)v85);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v86;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F448, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7F448);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "asset";
      *(void *)(v8 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7F4D8 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint8x8_t v11 = introspect_REAudioPlaybackState(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "playbackState";
      *(void *)(v12 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000003;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7F4E0 = v12;
      mach_timebase_info v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "playbackSpeed";
      *(void *)(v16 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2800000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7F4E8 = v16;
      float v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "reverbSendLevel";
      *(void *)(v20 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x3800000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7F4F0 = v20;
      long long v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "currentGain";
      *(void *)(v24 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5000000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v24 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7F4F8 = v24;
      std::string::size_type v25 = re::introspectionAllocator((re *)v24);
      uint8x8_t v27 = re::introspect_float((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "targetGain";
      *(void *)(v28 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5400000007;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v28 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7F500 = v28;
      uint8x8_t v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::introspect_double((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "fadeDuration";
      *(void *)(v32 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x6000000008;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v32 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7F508 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      unint64_t v35 = re::introspect_uint64_t((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "version";
      *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 11;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v36 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF7F510 = v36;
      std::string::size_type v37 = re::introspectionAllocator((re *)v36);
      long long v39 = re::introspect_uint64_t((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "timebaseID";
      *(void *)(v40 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x300000000CLL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v40 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF7F518 = v40;
      long long v41 = re::introspectionAllocator((re *)v40);
      std::string::size_type v43 = re::introspect_uint64_t((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "firstHalfExternalStreamUUID";
      *(void *)(v44 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xD00000000FLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v44 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF7F520 = v44;
      long long v45 = re::introspectionAllocator((re *)v44);
      long long v47 = re::introspect_uint64_t((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "secondHalfExternalStreamUUID";
      *(void *)(v48 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xD800000010;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v48 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF7F528 = v48;
      int v49 = re::introspectionAllocator((re *)v48);
      int v51 = re::introspect_float((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "directSendLevel";
      *(void *)(v52 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4800000012;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v52 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF7F530 = v52;
      uint64_t v53 = re::introspectionAllocator((re *)v52);
      uint64_t v55 = re::IntrospectionInfo<re::DynamicString>::get(1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "stsLabel";
      *(void *)(v56 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xE000000013;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v56 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26AF7F538 = v56;
      long long v57 = re::introspectionAllocator((re *)v56);
      long long v59 = re::introspect_BOOL((re *)1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "deferToSystemAcousticTuning";
      *(void *)(v60 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v59;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x10000000016;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v60 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_26AF7F540 = v60;
      float v61 = re::introspectionAllocator((re *)v60);
      std::string v63 = re::introspect_uint32_t((re *)1, v62);
      uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 72, 8);
      *(_DWORD *)uint64_t v64 = 1;
      *(void *)(v64 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "gainActivationCounter";
      *(void *)(v64 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v63;
      *(void *)(v64 + 24) = 0;
      *(void *)(v64 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x5800000017;
      *(_DWORD *)(v64 + 40) = 0;
      *(void *)(v64 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v64 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_26AF7F548 = v64;
      std::string v65 = re::introspectionAllocator((re *)v64);
      std::string v67 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v66);
      uint64_t v68 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v65 + 32))(v65, 72, 8);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "mixGroupName";
      *(void *)(v68 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v67;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x7000000018;
      *(_DWORD *)(v68 + 40) = 0;
      *(void *)(v68 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v68 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_26AF7F550 = v68;
      std::string v69 = re::introspectionAllocator((re *)v68);
      std::string v71 = re::introspect_BOOL((re *)1, v70);
      uint64_t v72 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v69 + 32))(v69, 72, 8);
      *(_DWORD *)uint64_t v72 = 1;
      *(void *)(v72 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "oneShotSound";
      *(void *)(v72 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v71;
      *(void *)(v72 + 24) = 0;
      *(void *)(v72 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x4C00000019;
      *(_DWORD *)(v72 + 40) = 0;
      *(void *)(v72 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v72 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v72 + 64) = 0;
      qword_26AF7F558 = v72;
      std::string v73 = re::introspectionAllocator((re *)v72);
      uint64_t v74 = re::audio::introspect_AudioSourceDirectivityConfiguration((re::IntrospectionBase **)1);
      uint64_t v75 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v73 + 32))(v73, 72, 8);
      *(_DWORD *)uint64_t v75 = 1;
      *(void *)(v75 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "directivityConfig";
      *(void *)(v75 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v74;
      *(void *)(v75 + 24) = 0;
      *(void *)(v75 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0xC00000001CLL;
      *(_DWORD *)(v75 + 40) = 0;
      *(void *)(v75 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v75 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v75 + 64) = 0;
      qword_26AF7F560 = v75;
      std::string v76 = re::introspectionAllocator((re *)v75);
      float v78 = re::introspect_BOOL((re *)1, v77);
      uint64_t v79 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v76 + 32))(v76, 72, 8);
      *(_DWORD *)uint64_t v79 = 1;
      *(void *)(v79 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "shouldRedactSensitiveInfoFromLogs";
      *(void *)(v79 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v78;
      *(void *)(v79 + 24) = 0;
      *(void *)(v79 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x1010000001DLL;
      *(_DWORD *)(v79 + 40) = 0;
      *(void *)(v79 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v79 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v79 + 64) = 0;
      qword_26AF7F568 = v79;
      uint64_t v80 = re::introspectionAllocator((re *)v79);
      unint64_t v82 = re::introspect_float((re *)1, v81);
      uint64_t v83 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v80 + 32))(v80, 72, 8);
      *(_DWORD *)uint64_t v83 = 1;
      *(void *)(v83 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "rolloffFactor";
      *(void *)(v83 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v82;
      *(void *)(v83 + 24) = 0;
      *(void *)(v83 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x440000001ELL;
      *(_DWORD *)(v83 + 40) = 0;
      *(void *)(v83 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v83 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v83 + 64) = 0;
      qword_26AF7F570 = v83;
      __cxa_guard_release(&qword_26AF7F448);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 20;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7F4D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioSourceSyncState>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioSourceSyncState>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::AudioSourceSyncState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioSourceSyncState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v84 = v86;
}

void sub_2335A80D4(_Unwind_Exception *a1)
{
}

void *re::internal::defaultConstruct<re::AudioSourceSyncState>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 9;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(void *)(a3 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)(a3 + 6re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1065353216;
  *(unsigned char *)(a3 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a3 + 80) = _D0;
  *(_DWORD *)(a3 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a3 + 104) = 1065353216;
  *(unsigned char *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(unsigned char *)(a3 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a3 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  unint64_t v9 = (void *)(a3 + 160);
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
  *(_OWORD *)(v3 + 224) = 0u;
  v3 += 224;
  *(_DWORD *)(v3 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
  *(void *)(v3 - 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0x3E051EB800000000;
  *(_DWORD *)(v3 - 20) = 1106247680;
  *(_OWORD *)(v3 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  uint64_t result = re::DynamicString::setCapacity((void *)v3, 0);
  *(_WORD *)(v3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AudioSourceSyncState>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 224));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 160));
  if (a3[112]) {
    re::DynamicString::deinit((re::DynamicString *)(a3 + 120));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::AudioSourceSyncState>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 9;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 6re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1065353216;
  *(unsigned char *)(a1 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 80) = _D0;
  *(_DWORD *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(unsigned char *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(unsigned char *)(a1 + 15re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v7 = (void *)(a1 + 160);
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
  *(_OWORD *)(v1 + 224) = 0u;
  v1 += 224;
  *(_DWORD *)(v1 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
  *(void *)(v1 - 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0x3E051EB800000000;
  *(_DWORD *)(v1 - 20) = 1106247680;
  *(_OWORD *)(v1 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  uint64_t result = re::DynamicString::setCapacity((void *)v1, 0);
  *(_WORD *)(v1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AudioSourceSyncState>(unsigned char *a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 224));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 160));
  if (a1[112]) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 120));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 8));
}

uint64_t re::introspect_AudioSourceSyncState(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSourceSyncState", (uint64_t (*)(re::internal *))re::allocInfo_AudioSourceSyncState, (re::IntrospectionBase *(*)(void))re::initInfo_AudioSourceSyncState, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioSourceSyncState>, this);
}

re::AudioSourceState *re::AudioSourceState::AudioSourceState(re::AudioSourceState *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *) this = &unk_26E6DC058;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 9;
  *((_DWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1065353216;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)((char *)this + 9re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1065353216;
  *((unsigned char *)this + 100) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = _D0;
  *((_DWORD *)this + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)this + 15) = 0;
  *((_DWORD *)this + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1065353216;
  *((unsigned char *)this + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *((unsigned char *)this + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 23, 0);
  *(_OWORD *)((char *)this + 24re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 54) = 1;
  *(void *)((char *)this + 220) = 0x3E051EB800000000;
  *((_DWORD *)this + 57) = 1106247680;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 23re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  re::DynamicString::setCapacity((void *)this + 31, 0);
  *((_WORD *)this + 140) = 0;
  *((_DWORD *)this + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((unsigned char *)this + 29re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((void *)this + 37) = 1065353216;
  *((void *)this + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 7re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1065353216;
  uint64_t v9 = MEMORY[0x263EF89A8];
  long long v10 = *MEMORY[0x263EF89A8];
  long long v11 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *((_OWORD *)this + 20) = *MEMORY[0x263EF89A8];
  *((_OWORD *)this + 2re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v11;
  long long v12 = *(_OWORD *)(v9 + 32);
  long long v13 = *(_OWORD *)(v9 + 48);
  *((_OWORD *)this + 2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v12;
  *((_OWORD *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v13;
  *((_OWORD *)this + 24) = v10;
  *((_OWORD *)this + 2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v11;
  *((_OWORD *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
  *((_OWORD *)this + 27) = v13;
  *((void *)this + 57) = 0;
  *((void *)this + 5re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = -1;
  *((_DWORD *)this + 11re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 6553601;
  *(void *)((char *)this + 47re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)((char *)this + 48re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((_OWORD *)this + 3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 524) = 0u;
  *(void *)((char *)this + 540) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 55re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 14re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)((char *)this + 58re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 600) = 0;
  *((unsigned char *)this + 624) = 0;
  *((unsigned char *)this + 62re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 65re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((unsigned char *)this + 65re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *((unsigned char *)this + 664) = 0;
  *((unsigned char *)this + 67re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *((_DWORD *)this + 18re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((unsigned char *)this + 72re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 73re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *((_DWORD *)this + 18re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 100) = 0;
  *(_OWORD *)((char *)this + 70re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 69re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  *((_WORD *)this + 39re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 77re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  unint64_t v14 = [[REAudioSourceStateWrapper alloc] initWithState:this];
  uint64_t v15 = (void *)*((void *)this + 100);
  *((void *)this + 100) = v14;

  return this;
}

void sub_2335A8624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v5);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v4);

  re::AudioSourceSyncState::~AudioSourceSyncState(v3);
  *(void *)uint64_t v2 = &unk_26E6DECE0;
  objc_destructInstance((id)(v2 + 8));
  _Unwind_Resume(a1);
}

void re::AudioSourceSyncState::~AudioSourceSyncState(re::AudioSourceSyncState *this)
{
  if (*((unsigned char *)this + 112)) {
    re::DynamicString::deinit((re::AudioSourceSyncState *)((char *)this + 120));
  }
  re::AssetHandle::~AssetHandle((re::AudioSourceSyncState *)((char *)this + 8));
}

void re::AudioSourceState::~AudioSourceState(re::AudioSourceState *this)
{
  *(void *) this = &unk_26E6DC058;
  uint64_t v2 = (void *)*((void *)this + 57);
  *((void *)this + 57) = 0;

  *((void *)this + 60) = 0;
  *((void *)this + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v3 = (const void *)*((void *)this + 98);
  if (v3) {
    CFRelease(v3);
  }
  re::AudioSourceState::setTimebase(this, 0, 0, 0);
  re::AudioSourceState::setTimebaseDispatchSource((uint64_t)this, 0);
  uint64_t v4 = (const void *)*((void *)this + 88);
  *((void *)this + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 58);
  if (v5)
  {
    v8[0] = 0;
    v8[1] = (void **)v8;
    v8[2] = (void **)0x3032000000;
    void v8[3] = (void **)__Block_byref_object_copy__6;
    v8[4] = (void **)__Block_byref_object_dispose__6;
    id v9 = v5;
    if (qword_26AF7F458 != -1) {
      dispatch_once(&qword_26AF7F458, &__block_literal_global_9);
    }
    char v6 = (id)qword_26AF7F450;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZNK2re16AudioSourceState24releaseAudioSessionAsyncEv_block_invoke;
    block[3] = &unk_264BE2D98;
    void block[4] = v8;
    dispatch_async(v6, block);

    _Block_object_dispose(v8, 8);
  }

  v8[0] = (void **)((char *)this + 760);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](v8);

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 69);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 63);

  re::DynamicString::deinit((re::AudioSourceState *)((char *)this + 248));
  re::DynamicString::deinit((re::AudioSourceState *)((char *)this + 184));
  if (*((unsigned char *)this + 136)) {
    re::DynamicString::deinit((re::AudioSourceState *)((char *)this + 144));
  }
  re::AssetHandle::~AssetHandle((re::AudioSourceState *)((char *)this + 32));
  *(void *) this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AudioSourceState::~AudioSourceState(this);
  JUMPOUT(0x237DBCBD0);
}

void re::AudioSourceState::setTimebase(re::AudioSourceState *this, CFTypeRef cf, char a3, void (__cdecl *a4)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  char v6 = (void *)*((void *)this + 87);
  *((void *)this + 87) = cf;
  uint64_t v7 = (CFStringRef *)MEMORY[0x263F01108];
  uint64_t v8 = (CFStringRef *)MEMORY[0x263F010F8];
  id v9 = (CFStringRef *)MEMORY[0x263F01100];
  if (cf)
  {
    CFRetain(cf);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, this, a4, *v7, *((const void **)this + 87), CFNotificationSuspensionBehaviorDrop);
    long long v12 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v12, this, a4, *v8, *((const void **)this + 87), CFNotificationSuspensionBehaviorDrop);
    long long v13 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v13, this, a4, *v9, *((const void **)this + 87), CFNotificationSuspensionBehaviorDrop);
    unint64_t v14 = *((void *)this + 89);
    if (v14) {
      CMTimebaseAddTimerDispatchSource(*((CMTimebaseRef *)this + 87), v14);
    }
  }
  if (v6)
  {
    uint64_t v15 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(v15, this, *v7, v6);
    uint64_t v16 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(v16, this, *v8, v6);
    float v17 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(v17, this, *v9, v6);
    BOOL v18 = *((void *)this + 89);
    if (v18) {
      CMTimebaseRemoveTimerDispatchSource((CMTimebaseRef)v6, v18);
    }
    CFRelease(v6);
  }
  *((unsigned char *)this + 720) = a3;
}

void re::AudioSourceState::setTimebaseDispatchSource(uint64_t a1, void *a2)
{
  id v8 = a2;
  uint64_t v4 = (dispatch_object_t *)(a1 + 712);
  unint64_t v5 = *(NSObject **)(a1 + 712);
  if (v5)
  {
    char v6 = *(OpaqueCMTimebase **)(a1 + 696);
    if (v6)
    {
      CMTimebaseRemoveTimerDispatchSource(v6, v5);
      unint64_t v5 = *v4;
    }
    dispatch_source_cancel(v5);
  }
  objc_storeStrong((id *)(a1 + 712), a2);
  if (*v4)
  {
    dispatch_resume(*v4);
    uint64_t v7 = *(OpaqueCMTimebase **)(a1 + 696);
    if (v7) {
      CMTimebaseAddTimerDispatchSource(v7, *v4);
    }
  }
}

void sub_2335A8AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2re13getAsyncQueueEv_block_invoke()
{
  int v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.re.AudioSourceState_SessionRelease", attr);
  uint64_t v2 = (void *)qword_26AF7F450;
  qword_26AF7F450 = (uint64_t)v1;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void ___ZNK2re16AudioSourceState24releaseAudioSessionAsyncEv_block_invoke(re *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(*(void *)(*((void *)a1 + 4) + 8) + 40);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_debug_impl(&dword_233120000, v2, OS_LOG_TYPE_DEBUG, "AudioSourceState::releaseAudioSessionAsync: releasing %@", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v3 = *(void *)(*((void *)a1 + 4) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void re::AudioSourceState::enqueuePendingCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 752);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 752));
  std::vector<std::function<void ()(void)>>::push_back[abi:ne180100]((uint64_t *)(a1 + 760), a2);
  os_unfair_lock_unlock(v4);
}

void sub_2335A8CDC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(void)>>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    BOOL v18 = &v14[32 * v13];
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v16, a2);
    float v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100](*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_2335A8DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v11;
  _Unwind_Resume(exception_object);
}

void re::AudioSourceState::callPendingCallbacks(re::AudioSourceState *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 752);
  os_unfair_lock_lock((os_unfair_lock_t)this + 188);
  if (&v7 != (uint64_t *)((char *)this + 760)) {
    std::vector<std::function<void ()(void)>>::__assign_with_size[abi:ne180100]<std::function<void ()(void)>*,std::function<void ()(void)>*>((uint64_t)&v7, *((void *)this + 95), *((void *)this + 96), (uint64_t)(*((void *)this + 96) - *((void *)this + 95)) >> 5);
  }
  uint64_t v3 = (void *)*((void *)this + 96);
  uint64_t v4 = (void *)*((void *)this + 95);
  while (v3 != v4)
    uint64_t v3 = std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v3 - 4);
  *((void *)this + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v4;
  os_unfair_lock_unlock(v2);
  uint64_t v5 = v7;
  uint64_t v6 = v8;
  while (v5 != v6)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v10, v5);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v10);
    v5 += 32;
  }
  v10[0] = (void **)&v7;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_2335A8F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  os_unfair_lock_unlock(v12);
  a12 = &a9;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t re::AudioSourceState::playbackHostConnectionIdentifier(re::AudioSourceState *this)
{
  uint64_t v1 = *((void *)this + 60);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(void)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = i - 32;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::function<void ()(void)>>::__assign_with_size[abi:ne180100]<std::function<void ()(void)>*,std::function<void ()(void)>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(void **)a1;
  if (a4 > (v8 - *(void *)a1) >> 5)
  {
    if (v10)
    {
      uint64_t v11 = *(void **)(a1 + 8);
      uint64_t v12 = v10;
      if (v11 != v10)
      {
        do
          uint64_t v11 = std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v11 - 4);
        while (v11 != v10);
        uint64_t v12 = *(void **)a1;
      }
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    }
    if (a4 >> 59) {
      goto LABEL_30;
    }
    uint64_t v13 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v13;
    if (v14 >> 59) {
LABEL_30:
    }
      std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(void)>>>(v9, v14);
    *(void *)a1 = v15;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v15;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &v15[32 * v16];
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*,std::function<void ()(void)>*,std::function<void ()(void)>*>(v6, a3, (uint64_t)v15);
LABEL_21:
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
    return result;
  }
  uint64_t result = *(void *)(a1 + 8);
  unint64_t v18 = (result - (uint64_t)v10) >> 5;
  if (v18 < a4)
  {
    uint64_t v19 = a2 + 32 * v18;
    if ((void *)result != v10)
    {
      uint64_t v20 = 32 * v18;
      do
      {
        std::function<void ()(void)>::operator=(v10, v6);
        v6 += 32;
        v10 += 4;
        v20 -= 32;
      }
      while (v20);
      uint64_t v10 = *(void **)(a1 + 8);
    }
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*,std::function<void ()(void)>*,std::function<void ()(void)>*>(v19, a3, (uint64_t)v10);
    goto LABEL_21;
  }
  if (a2 == a3)
  {
    long long v21 = v10;
  }
  else
  {
    long long v21 = v10;
    do
    {
      std::function<void ()(void)>::operator=(v10, v6);
      v6 += 32;
      v10 += 4;
      v21 += 4;
    }
    while (v6 != a3);
    uint64_t result = *(void *)(a1 + 8);
  }
  while ((void *)result != v21)
    uint64_t result = (uint64_t)std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100]((void *)(result - 32));
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v21;
  return result;
}

void sub_2335A9380(_Unwind_Exception *a1)
{
  *(void *)(v1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*,std::function<void ()(void)>*,std::function<void ()(void)>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100](a3 + v6, a1 + v6);
      v6 += 32;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2335A93EC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100]((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v6);
  return a1;
}

void sub_2335A9698(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t re::internal::BindNodeImplBase::readBindingKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = 0;
  *(void *)(a4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  if (*(unsigned char *)(a4 + 16)) {
    *(unsigned char *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  }
  long long v6 = 0uLL;
  uint64_t result = re::internal::parseNextBindingKey(a2, &v6, a3);
  if (result)
  {
    *(_OWORD *)a4 = v6;
    if (*(unsigned char *)(a4 + 16)) {
      *(unsigned char *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    }
  }
  return result;
}

double re::BindNode::deinit(re::BindNode *this)
{
  if (*(void *)this)
  {
    (**(void (***)(re::BindNode *))this)(this);
  }
  else
  {
    uint64_t v2 = (void (***)(void))*((void *)this + 2);
    if (!v2) {
      return result;
    }
    uint64_t v3 = *((void *)this + 1);
    (**v2)(*((void *)this + 2));
    (*(void (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v2);
  }
  double result = 0.0;
  *(_OWORD *) this = 0u;
  *((_OWORD *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  return result;
}

uint64_t re::BindNode::copy(re::BindNode *this, const re::BindNode *a2)
{
  v4.n128_f64[0] = re::BindNode::deinit(this);
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2)
  {
    long long v6 = this;
  }
  else
  {
    uint64_t result = *((void *)a2 + 2);
    if (!result) {
      return result;
    }
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, double))(*(void *)result + 16))(result, v4.n128_f64[0]);
    long long v6 = (re::BindNode *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 32))(v9, *v10, v10[1]);
    *(void *) this = 0;
    *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v9;
    *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
    uint64_t v5 = *(void *)a2;
    if (!*(void *)a2)
    {
      a2 = (const re::BindNode *)*((void *)a2 + 2);
      uint64_t v5 = *(void *)a2;
    }
  }
  uint64_t v7 = *(uint64_t (**)(const re::BindNode *, re::BindNode *, __n128))(v5 + 24);
  return v7(a2, v6, v4);
}

uint64_t re::BindNode::move(re::BindNode *this, re::BindNode *a2)
{
  v4.n128_f64[0] = re::BindNode::deinit(this);
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2)
  {
    long long v6 = this;
  }
  else
  {
    uint64_t result = *((void *)a2 + 2);
    if (!result) {
      return result;
    }
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, double))(*(void *)result + 16))(result, v4.n128_f64[0]);
    long long v6 = (re::BindNode *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 32))(v9, *v10, v10[1]);
    *(void *) this = 0;
    *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v9;
    *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
    uint64_t v5 = *(void *)a2;
    if (!*(void *)a2)
    {
      a2 = (re::BindNode *)*((void *)a2 + 2);
      uint64_t v5 = *(void *)a2;
    }
  }
  uint64_t v7 = *(uint64_t (**)(re::BindNode *, re::BindNode *, __n128))(v5 + 32);
  return v7(a2, v6, v4);
}

uint64_t re::BindNode::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[2];
    if (!*a2) {
      a2 = (uint64_t *)a2[2];
    }
    if (a2 != a1)
    {
      uint64_t v5 = v3 | v4;
      if (!v5) {
        return v5;
      }
      return (*(uint64_t (**)(void))(v2 + 40))();
    }
  }
  else
  {
    long long v6 = (uint64_t *)a1[2];
    uint64_t v7 = *a2;
    uint64_t v8 = a2[2];
    if (!*a2) {
      a2 = (uint64_t *)a2[2];
    }
    if (v6 != a2)
    {
      uint64_t v5 = 0;
      BOOL v9 = (v7 | v8) == 0;
      if (!v6 || v9) {
        return v5;
      }
      uint64_t v2 = *v6;
      return (*(uint64_t (**)(void))(v2 + 40))();
    }
  }
  return 1;
}

double re::BindNode::relativeNode@<D0>(re::BindNode *a1@<X0>, long long *a2@<X1>, re::BindNode *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((*(void *)a1 || *((void *)a1 + 2)) && *((void *)a2 + 1))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    re::BindNode::copy((re::BindNode *)&v11, a1);
    long long v9 = *a2;
    while (1)
    {
      uint64_t v5 = v11;
      if ((void)v11)
      {
        if (!*((void *)&v9 + 1)) {
          goto LABEL_19;
        }
      }
      else
      {
        if ((void)v12) {
          BOOL v6 = *((void *)&v9 + 1) == 0;
        }
        else {
          BOOL v6 = 1;
        }
        if (v6)
        {
LABEL_19:
          *(_OWORD *)a3 = 0u;
          *((_OWORD *)a3 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
          re::BindNode::move(a3, (re::BindNode *)&v11);
          return re::BindNode::deinit((re::BindNode *)&v11);
        }
        uint64_t v5 = *(void *)v12;
      }
      if (((*(uint64_t (**)(void))(v5 + 64))() & 1) == 0) {
        break;
      }
      if ((void)v11) {
        uint64_t v7 = &v11;
      }
      else {
        uint64_t v7 = (long long *)v12;
      }
      (*(void (**)(void *__return_ptr))(*(void *)v7 + 56))(v10);
      re::BindNode::move((re::BindNode *)&v11, (re::BindNode *)v10);
      re::BindNode::deinit((re::BindNode *)v10);
    }
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    return re::BindNode::deinit((re::BindNode *)&v11);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  }
  return result;
}

double re::BindNode::bindPoint@<D0>(re::BindNode **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  v8[0] = 0;
  v8[1] = 0;
  char v9 = 0;
  if (re::BindNode::processBindingPath(a1, a3, (re::BindNode **)&v10, (uint64_t)v8))
  {
    if ((void)v10) {
      BOOL v6 = &v10;
    }
    else {
      BOOL v6 = (long long *)v11;
    }
    (*(void (**)(long long *, uint64_t, void *))(*(void *)v6 + 72))(v6, a2, v8);
  }
  else
  {
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  }
  return re::BindNode::deinit((re::BindNode *)&v10);
}

uint64_t re::BindNode::processBindingPath(re::BindNode **a1, uint64_t *a2, re::BindNode **this, uint64_t a4)
{
  void v13[4] = *MEMORY[0x263EF8340];
  if (!*a1 && !a1[2]) {
    return 0;
  }
  if (this != a1) {
    re::BindNode::copy((re::BindNode *)this, (const re::BindNode *)a1);
  }
  long long v12 = *(_OWORD *)a2;
  v11[0] = 0;
  v11[1] = 0;
  if (re::internal::parseBindingURI(a2, v11, (uint64_t *)&v12))
  {
    if (*this) {
      uint64_t v7 = (re::BindNode *)this;
    }
    else {
      uint64_t v7 = this[2];
    }
    (*(void (**)(void *__return_ptr))(*(void *)v7 + 48))(v13);
    if (v13 != this) {
      re::BindNode::move((re::BindNode *)this, (re::BindNode *)v13);
    }
    re::BindNode::deinit((re::BindNode *)v13);
    if (!((unint64_t)*this | (unint64_t)this[2])) {
      return 0;
    }
  }
  if (!*((void *)&v12 + 1)) {
    return 0;
  }
  while (1)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    if (*(unsigned char *)(a4 + 16)) {
      *(unsigned char *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    }
    uint64_t v8 = *this;
    if (!*this) {
      uint64_t v8 = *(re::BindNode **)this[2];
    }
    uint64_t result = (*((uint64_t (**)(void))v8 + 8))();
    if (!result) {
      break;
    }
    if (!*((void *)&v12 + 1)) {
      return 1;
    }
    if (*this) {
      long long v10 = (re::BindNode *)this;
    }
    else {
      long long v10 = this[2];
    }
    (*(void (**)(void *__return_ptr))(*(void *)v10 + 56))(v13);
    if (v13 != this) {
      re::BindNode::move((re::BindNode *)this, (re::BindNode *)v13);
    }
    re::BindNode::deinit((re::BindNode *)v13);
    if (!((unint64_t)*this | (unint64_t)this[2])) {
      return 0;
    }
  }
  return result;
}

double re::BindNode::bindPointWithOverride@<D0>(re::BindNode **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  v8[0] = 0;
  v8[1] = 0;
  char v9 = 0;
  if (re::BindNode::processBindingPath(a1, a3, (re::BindNode **)&v10, (uint64_t)v8))
  {
    if ((void)v10) {
      BOOL v6 = &v10;
    }
    else {
      BOOL v6 = (long long *)v11;
    }
    (*(void (**)(long long *, uint64_t, void *))(*(void *)v6 + 80))(v6, a2, v8);
  }
  else
  {
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  }
  return re::BindNode::deinit((re::BindNode *)&v10);
}

uint64_t re::DynamicArray<re::BindPoint::BindPointData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::BindPoint::BindPointData **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        do
        {
          re::BindPoint::BindPointData::deinit(v3);
          uint64_t v3 = (re::BindPoint::BindPointData *)((char *)v3 + 32);
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::BindPoint::BindPointData **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::BindPoint::BindPointData *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::BindPoint::addToBindPointStack(re::BindPoint *this, const re::BindPoint *a2)
{
  uint64_t v3 = (re::BindPoint *)((char *)this + 8);
  uint64_t v4 = *((void *)a2 + 3);
  unint64_t v5 = v4 + *((void *)this + 3);
  if (*((void *)this + 2) < v5)
  {
    re::DynamicArray<re::BindPoint::BindPointData>::setCapacity((void *)this + 1, v5);
    uint64_t v4 = *((void *)a2 + 3);
  }
  if (v4)
  {
    BOOL v6 = (re::BindPoint::BindPointData *)*((void *)a2 + 5);
    uint64_t v7 = 32 * v4;
    do
    {
      re::DynamicArray<re::BindPoint::BindPointData>::add(v3, v6);
      BOOL v6 = (re::BindPoint::BindPointData *)((char *)v6 + 32);
      v7 -= 32;
    }
    while (v7);
  }
}

void re::DynamicArray<re::BindPoint::BindPointData>::add(_anonymous_namespace_ *this, re::BindPoint::BindPointData *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::BindPoint::BindPointData>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  unint64_t v5 = (re::BindPoint::BindPointData *)(*((void *)this + 4) + 32 * v4);
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  re::BindPoint::BindPointData::copy(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
}

void re::BindPoint::addToBindPointStack(void *a1, uint64_t a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)(a1 + 1);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = v4 + a1[3];
  if (a1[2] < v5)
  {
    re::DynamicArray<re::BindPoint::BindPointData>::setCapacity(a1 + 1, v5);
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if (v4)
  {
    BOOL v6 = *(_OWORD **)(a2 + 40);
    uint64_t v7 = 32 * v4;
    do
    {
      re::DynamicArray<re::BindPoint::BindPointData>::add(v3, v6);
      v6 += 2;
      v7 -= 32;
    }
    while (v7);
  }
}

BOOL re::BindPoint::operator==(re::BindPoint *a1, re::BindPoint *a2)
{
  uint64_t v4 = re::BindPoint::baseValueUntyped(a1);
  if (v4 == re::BindPoint::baseValueUntyped(a2)
    && (uint64_t v5 = re::BindPoint::overrideValueUntyped(a1), v5 == re::BindPoint::overrideValueUntyped(a2)))
  {
    return *(void *)a1 == *(void *)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::BindPoint::baseValueUntyped(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 88))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::overrideValueUntyped(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 120))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::isWeak(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 56))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::isAlive(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 64))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::makeAlive(uint64_t this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = this;
    MEMORY[0x270FA5388](this);
    uint64_t v4 = (void *)((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v3 >= 0x200) {
      size_t v5 = 512;
    }
    else {
      size_t v5 = v3;
    }
    bzero((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v2 + 24);
    do
    {
      if (v8 == v7)
      {
        v10[1] = 0;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v11 = 136315906;
        int v12 = "operator[]";
        __int16 v13 = 1024;
        int v14 = 797;
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      char v9 = (void *)(*(void *)(v2 + 40) + v6);
      if (!*v9) {
        char v9 = (void *)v9[2];
      }
      v4[v7++] = v9;
      v6 += 32;
    }
    while (v1 != v7);
    return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 72))(*v4, 0, v4 + 1, v1 - 1);
  }
  return this;
}

uint64_t re::BindPoint::targetIdentifier(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      __int16 v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 80))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::boundOwner(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      __int16 v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 136))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::supportsOverrideValue(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      __int16 v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 96))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::isOverridden(re::BindPoint *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  MEMORY[0x270FA5388](this);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v3 >= 0x200) {
    size_t v5 = 512;
  }
  else {
    size_t v5 = v3;
  }
  bzero((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    if (v8 == v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      __int16 v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (void *)(*((void *)this + 5) + v6);
    if (!*v9) {
      char v9 = (void *)v9[2];
    }
    v4[v7++] = v9;
    v6 += 32;
  }
  while (v1 != v7);
  return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 104))(*v4, 0, v4 + 1, v1 - 1);
}

uint64_t re::BindPoint::valueUntyped(re::BindPoint *this)
{
  if (re::BindPoint::isOverridden(this))
  {
    return re::BindPoint::overrideValueUntyped(this);
  }
  else
  {
    return re::BindPoint::baseValueUntyped(this);
  }
}

uint64_t re::BindPoint::setIsOverridden(uint64_t this, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 24);
  if (v2)
  {
    uint64_t v4 = this;
    MEMORY[0x270FA5388](this);
    uint64_t v6 = (void *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v4 + 24);
    do
    {
      if (v10 == v9)
      {
        v12[1] = 0;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v13 = 136315906;
        __int16 v14 = "operator[]";
        __int16 v15 = 1024;
        int v16 = 797;
        __int16 v17 = 2048;
        uint64_t v18 = v10;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v11 = (void *)(*(void *)(v4 + 40) + v8);
      if (!*v11) {
        int v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t))(*(void *)*v6 + 112))(*v6, 0, v6 + 1, v2 - 1, a2);
  }
  return this;
}

uint64_t re::BindPoint::markAsWritten(uint64_t this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = this;
    MEMORY[0x270FA5388](this);
    uint64_t v4 = (void *)((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v3 >= 0x200) {
      size_t v5 = 512;
    }
    else {
      size_t v5 = v3;
    }
    bzero((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v2 + 24);
    do
    {
      if (v8 == v7)
      {
        v10[1] = 0;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v11 = 136315906;
        int v12 = "operator[]";
        __int16 v13 = 1024;
        int v14 = 797;
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = (void *)(*(void *)(v2 + 40) + v6);
      if (!*v9) {
        uint64_t v9 = (void *)v9[2];
      }
      v4[v7++] = v9;
      v6 += 32;
    }
    while (v1 != v7);
    return (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v4 + 128))(*v4, 0, v4 + 1, v1 - 1);
  }
  return this;
}

void re::BindPoint::BindPointData::copy(re::BindPoint::BindPointData *this, const re::BindPoint::BindPointData *a2)
{
  unint64_t v3 = this;
  v4.n128_f64[0] = re::BindPoint::BindPointData::deinit(this);
  uint64_t v5 = *(void *)a2;
  if (!*(void *)a2)
  {
    uint64_t v6 = (const re::BindPoint::BindPointData *)*((void *)a2 + 2);
    if (!v6) {
      return;
    }
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = (void *)(*(uint64_t (**)(const re::BindPoint::BindPointData *, double))(*(void *)v6 + 16))(v6, v4.n128_f64[0]);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 32))(v7, *v8, v8[1]);
    *(void *)unint64_t v3 = 0;
    *((void *)v3 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v7;
    *((void *)v3 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v9;
    uint64_t v5 = *(void *)v6;
    a2 = v6;
    unint64_t v3 = (re::BindPoint::BindPointData *)v9;
  }
  uint64_t v10 = *(void (**)(const re::BindPoint::BindPointData *, re::BindPoint::BindPointData *, __n128))(v5 + 24);
  v10(a2, v3, v4);
}

double re::BindPoint::BindPointData::move(re::BindPoint::BindPointData *a1, _OWORD *a2)
{
  v4.n128_f64[0] = re::BindPoint::BindPointData::deinit(a1);
  if (*(void *)a2)
  {
    uint64_t v5 = *(void (**)(_OWORD *, re::BindPoint::BindPointData *, __n128))(*(void *)a2 + 32);
    v5(a2, a1, v4);
  }
  else if (*((void *)a2 + 2))
  {
    long long v6 = a2[1];
    *(_OWORD *)a1 = *a2;
    *((_OWORD *)a1 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v6;
    v4.n128_u64[0] = 0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return v4.n128_f64[0];
}

uint64_t re::makeBindNode@<X0>(re *this@<X0>, const re::IntrospectionBase *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = this;
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  uint64_t v7 = 0;
  memset(v5, 0, sizeof(v5));
  int v6 = 0;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 + 8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 + 8);
}

double anonymous namespace'::makeBindNodeInternal@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *(unsigned char *)(a1 + 24) == 0;
  }
  if (v4)
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(void *)uint64_t v7 = &unk_26E6DC0D0;
    long long v8 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)a1;
    *(_OWORD *)(v7 + 24) = v8;
    re::BindPoint::BindPoint(v7 + 40, a2);
    *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v7;
  }
  return result;
}

void re::BindPoint::addToBindPointStack<anonymous namespace'::RelativeBindPointImpl,re::IntrospectionBase const*&>(void *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  uint64_t v5 = *a2;
  *(void *)(v4 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCEA8;
  *(void *)(v4 - 24) = v5;
}

double re::makeRelativeBindNode@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v9 = a1;
  v7[1] = 0;
  _DWORD v7[2] = 0;
  v7[0] = a1;
  char v8 = 0;
}

void re::makeBindPoint(re *this@<X0>, const re::IntrospectionBase *a2@<X1>, uint64_t a3@<X8>)
{
  if (this && a2)
  {
    if (*((_DWORD *)this + 4) == 8 && (uint64_t v7 = *((unsigned int *)this + 14), v7))
    {
      uint64_t v8 = *((void *)this + 8);
      while (**(_DWORD **)v8 != 7)
      {
        v8 += 8;
        if (!--v7) {
          goto LABEL_8;
        }
      }
      char v9 = *(void (**)(const re::IntrospectionBase *, re *))(*(void *)v8 + 8);
      v9(a2, this);
    }
    else
    {
LABEL_8:
      *(void *)(a3 + 40) = 0;
      *(void *)a3 = this;
      *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      v10[0] = (uint64_t)this;
      v10[1] = 0;
      void v10[2] = (uint64_t)a2;
      char v11 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 40) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a3 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  }
}

void re::BindPoint::addToBindPointStack<anonymous namespace'::IntrospectionBindPointImpl,anonymous namespace'::IntrospectedObject>(void *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v7);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v7);
  uint64_t v4 = a1[5] + 32 * a1[3];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  *(void *)(v4 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC4A8;
  *(void *)(v4 - 24) = v5;
  *(void *)(v4 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v6;
}

void re::BindPoint::addToBindPointStack<anonymous namespace'::OverridableBindPointImpl,void *&,void *&,BOOL *&>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v12);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v12);
  uint64_t v8 = a1[5] + 32 * a1[3];
  uint64_t v9 = *a2;
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  *(void *)(v8 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCF78;
  *(void *)(v8 - 24) = v9;
  *(void *)(v8 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
  *(void *)(v8 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v11;
}

void re::makeBindPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = a2;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    re::BindPoint::addToBindPointStack((void *)a1, a4);
    if (*(_DWORD *)(a2 + 16) == 8 && (uint64_t v8 = *(unsigned int *)(a2 + 56), v8))
    {
      uint64_t v9 = *(void *)(a2 + 64);
      while (**(_DWORD **)v9 != 7)
      {
        v9 += 8;
        if (!--v8) {
          goto LABEL_7;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 8))(&v10, a3, a2);
      re::BindPoint::addToBindPointStack((void *)a1, (uint64_t)&v10);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v11);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v11);
    }
    else
    {
LABEL_7:
      uint64_t v10 = a2;
      v11[0] = 0;
      v11[1] = a3;
      char v12 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  }
}

void anonymous namespace'::IntrospectionBindNodeImpl::~IntrospectionBindNodeImpl(_anonymous_namespace_::IntrospectionBindNodeImpl *this)
{
  uint64_t v1 = (char *)this + 48;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + 48;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<anonymous namespace'::IntrospectionBindNodeImpl>::implTypeInfo()
{
  return "X";
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::IntrospectionBindNodeImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC0D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(a2 + 48, (uint64_t *)(a1 + 48));
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::IntrospectionBindNodeImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC0D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v2;
  return re::BindPoint::BindPoint(a2 + 40, (uint64_t *)(a1 + 40));
}

BOOL re::internal::BindNodeImpl<anonymous namespace'::IntrospectionBindNodeImpl>::equals(void *a1, void *a2)
{
  if ((char *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != "X" || a1[3] != a2[3] || a1[2] != a2[2]) {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 5), (re::BindPoint *)(a2 + 5));
}

double anonymous namespace'::IntrospectionBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t anonymous namespace'::IntrospectionBindNodeImpl::relativeNodeForKey@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v9 = *a2;
  uint64_t v7 = *(void *)(a1 + 40);
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v8, (uint64_t *)(a1 + 48));
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8);
}

void anonymous namespace'::IntrospectionBindNodeImpl::bindPointForKey(uint64_t a1@<X0>, uint64_t a2@<X1>, const re::IntrospectionBase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(const re::IntrospectionBase **)(a1 + 8);
  if (!v7 && !*(unsigned char *)(a1 + 32)) {
    goto LABEL_18;
  }
  long long v20 = *(_OWORD *)a3;
  if (*((void *)&v20 + 1))
  {
    uint64_t v24 = 0;
    long long v21 = (unint64_t)a2;
    long long v22 = 0uLL;
    int v23 = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)&v21, (const re::BindPoint *)(a1 + 40));
    if (v17[0] || v19)
    {
      if (!v17[1])
      {
        if (v18)
        {
          if (a2) {
            uint64_t v15 = a2;
          }
          else {
            uint64_t v15 = v17[0];
          }
          re::makeBindPoint((uint64_t)buf, v15, v18, (uint64_t)&v21);
          *(void *)&long long v21 = *(void *)buf;
          re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&v21 + 8, (uint64_t)&buf[8]);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        }
        long long v16 = v22;
        *(_OWORD *)a4 = v21;
        *(_OWORD *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v16;
        *((void *)&v21 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
        long long v22 = 0uLL;
        *(void *)(a4 + 40) = v24;
        uint64_t v24 = 0;
        ++v23;
        *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v10 = *re::foundationBindingLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Invalid binding key: %s.", buf, 0xCu);
      }
    }
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
LABEL_21:
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v21 + 8);
LABEL_22:
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v21 + 8);
    return;
  }
  {
LABEL_18:
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    return;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    if (a2 || (a2 = *v8) != 0)
    {
      *(void *)(a4 + 40) = 0;
      *(void *)a4 = a2;
      *(void *)(a4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 40));
      if (*(_DWORD *)(a2 + 16) != 8 || (uint64_t v13 = *(unsigned int *)(a2 + 56), !v13))
      {
LABEL_17:
        long long v21 = (unint64_t)a2;
        *(void *)&long long v22 = v11;
        BYTE8(v2re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
        return;
      }
      uint64_t v14 = *(void *)(a2 + 64);
      while (**(_DWORD **)v14 != 7)
      {
        v14 += 8;
        if (!--v13) {
          goto LABEL_17;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v14 + 8))(&v21, v11, a2);
      re::BindPoint::addToBindPointStack((void *)a4, (uint64_t)&v21);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v21 + 8);
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  if (!a2) {
    a2 = *v8;
  }
  *(void *)(a4 + 40) = 0;
  *(void *)a4 = a2;
  *(void *)(a4 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a4 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 40));
}

void anonymous namespace'::walk(uint64_t a1, uint64_t a2, _anonymous_namespace_ *a3, const char **a4, void *a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)long long buf = 0u;
    long long v30 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
    double v9 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
    uint64_t v10 = a5[5] + 32 * a5[3];
    *(void *)(v10 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)uint64_t v11 = &unk_26E6DC168;
    *(void *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a3;
    char v12 = *a4;
    size_t v13 = (size_t)a4[1];
    *(void *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(v11 + 24) = "";
    *(_OWORD *)(v11 + 57) = 0u;
    *(_OWORD *)(v11 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
    *(_OWORD *)(v11 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
    *(void *)(v11 + 120) = 0;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(v11 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
    *(void *)(v10 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v11;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
    *(unsigned char *)(a1 + 24) = 1;
    return;
  }
  if (!*(void *)(a2 + 8))
  {
    switch(*(_DWORD *)(*(void *)a2 + 16))
    {
      case 0:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
        goto LABEL_14;
      case 1:
        return;
      case 2:
        long long v25 = (char *)*a4;
        return;
      case 3:
        uint64_t v26 = (char *)*a4;
        return;
      case 4:
        uint8x8_t v27 = (char *)*a4;
        return;
      case 7:
        return;
      case 8:
        return;
      case 0xD:
        return;
      default:
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected introspection type.", "!\"Unreachable code\"", "walk", 919);
        _os_crash();
        __break(1u);
        JUMPOUT(0x2335AC998);
    }
  }
  uint64_t v28 = 0;
  uint64_t v15 = (re *)*a4;
  if (**a4 == 45 || (uint64_t v15 = (re *)sscanf((const char *)v15, "%zu", &v28), v15 != 1))
  {
    int v23 = *re::foundationBindingLogObjects(v15);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      *(void *)a1 = 0;
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v24 = "Invalid binding key: Array index expected.";
LABEL_12:
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 2u);
    goto LABEL_14;
  }
  uint64_t v17 = *(void *)(*(void *)(a2 + 8) + 16);
  if (!isCompatibleType)
  {
    int v23 = *re::foundationBindingLogObjects((re *)isCompatibleType);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v24 = "Invalid binding key: Array type does not match expected type.";
    goto LABEL_12;
  }
  if (*(void *)(a2 + 16))
  {
    *(void *)long long buf = *(void *)a2;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&long long v30 = *(void *)(a2 + 16);
    BYTE8(v30) = 0;
    *(void *)long long buf = *(void *)(a2 + 8);
  }
  uint64_t v20 = v28;
  *(_OWORD *)long long buf = 0u;
  long long v30 = 0u;
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
  uint64_t v21 = a5[5] + 32 * a5[3];
  *(void *)(v21 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC308;
  *(void *)(v21 - 24) = v20;
  uint64_t v22 = *(void *)(v17 + 48);
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = v22;
  *(unsigned char *)(a1 + 24) = 0;
}

void anonymous namespace'::walkCStyleArray(re *a1, void *a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v5 = a1;
  unint64_t v18 = 0;
  if (*a4 == 45 || (a1 = (re *)sscanf(a4, "%zu", &v18), a1 != 1))
  {
    uint64_t v10 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      buf.n128_u16[0] = 0;
      uint64_t v11 = "Invalid binding key: Array index expected.";
      goto LABEL_10;
    }
LABEL_11:
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
    *((unsigned char *)v5 + 24) = 0;
    *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    return;
  }
  uint64_t v9 = *a2;
  if (v18 >= *(int *)(*a2 + 64))
  {
    uint64_t v10 = *re::foundationBindingLogObjects(a1);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    buf.n128_u16[0] = 0;
    uint64_t v11 = "Invalid binding key: Array index out of range.";
    goto LABEL_10;
  }
  if (a3 && *(void *)(v9 + 48) != a3)
  {
    uint64_t v10 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      buf.n128_u16[0] = 0;
      uint64_t v11 = "Invalid binding key: Array type does not match expected type.";
LABEL_10:
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, 2u);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  uint64_t v12 = a2[2];
  if (v12)
  {
    uint64_t v13 = *(void *)(v9 + 48);
    uint64_t v14 = v12 + v18 * *(int *)(v13 + 20);
    *(void *)uint64_t v5 = v13;
    *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
    *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v14;
  }
  else
  {
    unint64_t v15 = v18 * *(int *)(*(void *)(v9 + 48) + 20);
    buf.n128_u64[0] = *(void *)(v9 + 48);
    buf.n128_u64[1] = v15;
    uint64_t v16 = *(void *)(v9 + 48);
    *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
    *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)uint64_t v5 = v16;
  }
  *((unsigned char *)v5 + 24) = 0;
}

void anonymous namespace'::walkDynamicArray(re *a1, uint64_t *a2, _anonymous_namespace_ *a3, char *a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  if (*a4 == 45 || (a1 = (re *)sscanf(a4, "%zu", &v17), a1 != 1))
  {
    unint64_t v15 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      uint64_t v16 = "Invalid binding key: Array index expected.";
LABEL_9:
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
    }
  }
  else
  {
    if (a2[2])
    {
    }
    uint64_t v10 = *a2;
    if (isCompatibleType)
    {
      uint64_t v12 = v17;
      *(_OWORD *)__n128 buf = 0u;
      long long v19 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
      uint64_t v13 = a5[5] + 32 * a5[3];
      *(void *)(v13 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC578;
      *(void *)(v13 - 24) = v10;
      *(void *)(v13 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      uint64_t v14 = *(void *)(v10 + 48);
      *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      *(void *)uint64_t v5 = v14;
      *((unsigned char *)v5 + 24) = 0;
      return;
    }
    unint64_t v15 = *re::foundationBindingLogObjects((re *)isCompatibleType);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      uint64_t v16 = "Invalid binding key: Dynamic Array type does not match expected type.";
      goto LABEL_9;
    }
  }
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((unsigned char *)v5 + 24) = 0;
  *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
}

void anonymous namespace'::walkFixedArray(re *a1, uint64_t *a2, _anonymous_namespace_ *a3, char *a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  if (*a4 == 45 || (a1 = (re *)sscanf(a4, "%zu", &v17), a1 != 1))
  {
    unint64_t v15 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      uint64_t v16 = "Invalid binding key: Array index expected.";
LABEL_9:
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
    }
  }
  else
  {
    if (a2[2])
    {
    }
    uint64_t v10 = *a2;
    if (isCompatibleType)
    {
      uint64_t v12 = v17;
      *(_OWORD *)__n128 buf = 0u;
      long long v19 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
      uint64_t v13 = a5[5] + 32 * a5[3];
      *(void *)(v13 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC648;
      *(void *)(v13 - 24) = v10;
      *(void *)(v13 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v12;
      uint64_t v14 = *(void *)(v10 + 48);
      *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
      *(void *)uint64_t v5 = v14;
      *((unsigned char *)v5 + 24) = 0;
      return;
    }
    unint64_t v15 = *re::foundationBindingLogObjects((re *)isCompatibleType);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      uint64_t v16 = "Invalid binding key: Fixed Array type does not match expected type.";
      goto LABEL_9;
    }
  }
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((unsigned char *)v5 + 24) = 0;
  *((void *)v5 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
}

void anonymous namespace'::walkPointer(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a2[2])
  {
  }
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(*a2 + 48);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F580, memory_order_acquire) & 1) == 0)
  {
    a1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF7F580);
    if (a1)
    {
      _MergedGlobals_121 = re::introspect_KeyValueStoreInterface(0);
      __cxa_guard_release(&qword_26AF7F580);
    }
  }
  if (v11 == _MergedGlobals_121)
  {
    uint64_t v24 = *(const char **)a4;
    size_t v23 = *(void *)(a4 + 8);
    *(void *)&v28.char var0 = 0;
    v28.var1 = "";
    uint64_t v29 = a3;
    long long v30 = 0u;
    long long v31 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), &v30);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v30);
    uint64_t v26 = a5[5] + 32 * a5[3];
    *(void *)(v26 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC718;
    re::StringID::StringID((re::StringID *)(v26 - 24), &v28);
    *(void *)(v26 - re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a3;
    re::StringID::destroyString((re::StringID *)&v28);
    uint64_t v27 = *(void *)(v10 + 48);
    *((void *)v9 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
    *((void *)v9 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
    *(void *)uint64_t v9 = v27;
    *((unsigned char *)v9 + 24) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 48);
    uint64_t v13 = *(unsigned int *)(v12 + 56);
    if (!v13) {
      goto LABEL_20;
    }
    uint64_t v14 = *(void **)(v12 + 64);
    unint64_t v15 = v14;
    uint64_t v16 = v13;
    do
    {
      uint64_t v17 = (_DWORD *)*v15;
      if (*(_DWORD *)*v15 == 2) {
        goto LABEL_10;
      }
      ++v15;
      --v16;
    }
    while (v16);
    uint64_t v17 = 0;
LABEL_10:
    while (1)
    {
      unint64_t v18 = (_DWORD *)*v14;
      if (*(_DWORD *)*v14 == 3) {
        break;
      }
      ++v14;
      if (!--v13)
      {
        unint64_t v18 = 0;
        break;
      }
    }
    if (v17 && (v18 ? (BOOL v19 = *((void *)v17 + 1) == 0) : (BOOL v19 = 1), !v19 && *((void *)v18 + 1)))
    {
      long long v30 = 0u;
      long long v31 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), &v30);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v30);
      uint64_t v20 = a5[5] + 32 * a5[3];
      *(void *)(v20 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC7E8;
      *(void *)(v20 - 24) = v10;
      long long v30 = 0uLL;
      *(void *)&long long v31 = 0;
      BYTE8(v3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 1;
    }
    else
    {
LABEL_20:
      long long v30 = 0u;
      long long v31 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), &v30);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v30);
      uint64_t v21 = a5[5] + 32 * a5[3];
      *(void *)(v21 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC8B8;
      *(void *)(v21 - 24) = v10;
      unint64_t v22 = *(void *)(v10 + 48);
      *(void *)&long long v31 = 0;
      long long v30 = v22;
      BYTE8(v3re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
    }
  }
}

void anonymous namespace'::walkHashTable(uint64_t a1, uint64_t *a2, _anonymous_namespace_ *a3, uint64_t a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  int v7 = *(_DWORD *)(*(void *)(*a2 + 48) + 16);
  if (v7 != 6 && v7 != 10)
  {
    uint64_t v20 = *re::foundationBindingLogObjects((re *)a1);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    LOWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    unint64_t v22 = "Failed to create binding. Hash table keys need to be of type DynamicString or StringID.";
    goto LABEL_20;
  }
  if (!isCompatibleType)
  {
    uint64_t v20 = *re::foundationBindingLogObjects((re *)isCompatibleType);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
LABEL_21:
      *(void *)a1 = 0;
      *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      return;
    }
    LOWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    unint64_t v22 = "Invalid binding key: Hash Table Value type does not match expected type.";
LABEL_20:
    _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v23, 2u);
    goto LABEL_21;
  }
  if (a2[2])
  {
  }
  uint64_t v23 = v6;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v14 = *(void *)(a4 + 8);
  if (v14) {
    size_t v15 = v14 + 1;
  }
  else {
    size_t v15 = 0;
  }
  uint64_t v25 = 0;
  re::DynamicString::setCapacity(&v24, v15);
  re::DynamicString::operator=((re::DynamicString *)&v24, a4);
  memset(v28, 0, sizeof(v28));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), v28);
  double v16 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v28);
  uint64_t v17 = a5[5] + 32 * a5[3];
  *(void *)(v17 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *unint64_t v18 = &unk_26E6DC988;
  v18[1] = v23;
  re::DynamicString::DynamicString((re::DynamicString *)(v18 + 2), (const re::DynamicString *)&v24);
  *(void *)(v17 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v18;
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(void))(*v24 + 40))();
  }
  uint64_t v19 = *(void *)(v6 + 64);
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = v19;
  *(unsigned char *)(a1 + 24) = 0;
}

void anonymous namespace'::walkStructure(uint64_t a1, uint64_t *a2, _anonymous_namespace_ *a3, uint64_t a4, void *a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  if (!*(_DWORD *)(*a2 + 56))
  {
LABEL_15:
    *(void *)a1 = 0;
    *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
    return;
  }
  uint64_t v36 = a1;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    uint64_t v11 = *(void *)(*(void *)(v5 + 64) + 8 * v9);
    if (*(_DWORD *)v11 != 1) {
      goto LABEL_9;
    }
    if (*(_DWORD *)(v11 + 40) != 3)
    {
      a1 = re::introspectionPrettyNameCompare(*(const char **)(v11 + 8), *(const char **)a4, *(void *)(a4 + 8));
      if (!a1) {
        goto LABEL_9;
      }
      uint64_t v20 = a2[2];
      if (v20)
      {
        if (!*(_DWORD *)(v11 + 40))
        {
          uint64_t v31 = *(int *)(v11 + 36);
          if (isCompatibleType)
          {
            *(void *)uint64_t v36 = *(void *)(v11 + 16);
            *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
            *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v20 + v31;
            *(unsigned char *)(v36 + 24) = 0;
            return;
          }
          uint64_t v33 = *re::foundationBindingLogObjects((re *)isCompatibleType);
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_43;
          }
          *(_WORD *)__n128 buf = 0;
          double v34 = "Invalid binding key: Absolute struct member type does not match expected type.";
          goto LABEL_42;
        }
      }
      int v21 = *(_DWORD *)(v11 + 40);
      if (v21 == 2)
      {
        *(_OWORD *)__n128 buf = 0u;
        long long v40 = 0u;
        re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
        re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
        uint64_t v29 = a5[5] + 32 * a5[3];
        *(void *)(v29 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCD08;
        *(void *)(v29 - 24) = v11;
        *(_OWORD *)uint64_t v36 = 0u;
        *(_OWORD *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
        *(unsigned char *)(v36 + 24) = 1;
        return;
      }
      if (v21 == 1)
      {
        if (v30)
        {
          *(void *)__n128 buf = v11;
          uint64_t v25 = v36;
          *(void *)uint64_t v36 = *a2;
          *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v11;
          *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
          goto LABEL_33;
        }
        uint64_t v33 = *re::foundationBindingLogObjects((re *)v30);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          double v34 = "Invalid binding key: Struct array member type does not match expected type.";
LABEL_42:
          _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
        }
      }
      else
      {
        if (v21)
        {
          re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Invalid structure member type.", "!\"Unreachable code\"", "walkStructure", 838);
          _os_crash();
          __break(1u);
          return;
        }
        if (v22)
        {
          uint64_t v23 = *(int *)(v11 + 36);
          *(void *)__n128 buf = *(void *)(v11 + 16);
          *(void *)&uint8_t buf[8] = v23;
          uint64_t v24 = *(void *)(v11 + 16);
          uint64_t v25 = v36;
          *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
          *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
          *(void *)uint64_t v36 = v24;
LABEL_33:
          *(unsigned char *)(v25 + 24) = 0;
          return;
        }
        uint64_t v33 = *re::foundationBindingLogObjects((re *)v22);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          double v34 = "Invalid binding key: Struct member type does not match expected type.";
          goto LABEL_42;
        }
      }
LABEL_43:
      *(void *)uint64_t v36 = 0;
      *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(unsigned char *)(v36 + 24) = 0;
      *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      return;
    }
    uint64_t v12 = *(void *)(v11 + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F580, memory_order_acquire) & 1) == 0)
    {
      a1 = __cxa_guard_acquire(&qword_26AF7F580);
      if (a1)
      {
        _MergedGlobals_121 = re::introspect_KeyValueStoreInterface(0);
        __cxa_guard_release(&qword_26AF7F580);
      }
    }
    uint64_t v10 = v11;
    if (v12 == _MergedGlobals_121)
    {
      if (a2[2])
      {
      }
      if (a3)
      {
        unint64_t v18 = *(const char **)a4;
        size_t v17 = *(void *)(a4 + 8);
        *(void *)&v37.char var0 = a3;
        v37.var1 = 0;
        uint64_t v38 = "";
        *(_OWORD *)__n128 buf = 0u;
        long long v40 = 0u;
        re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
        re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
        uint64_t v19 = a5[5] + 32 * a5[3];
        *(void *)(v19 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCB68;
        *(void *)(v19 - 24) = a3;
        re::StringID::StringID((re::StringID *)(v19 - 16), (const StringID *)&v37.var1);
        re::StringID::destroyString((re::StringID *)&v37.var1);
        *(void *)(v36 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
        *(void *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
        *(void *)uint64_t v36 = a3;
        *(unsigned char *)(v36 + 24) = 0;
      }
      else
      {
        uint64_t v26 = *(const char **)a4;
        size_t v27 = *(void *)(a4 + 8);
        *(void *)&v37.char var0 = 0;
        v37.var1 = "";
        *(_OWORD *)__n128 buf = 0u;
        long long v40 = 0u;
        re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), buf);
        re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
        uint64_t v28 = a5[5] + 32 * a5[3];
        *(void *)(v28 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCC38;
        re::StringID::StringID((re::StringID *)(v28 - 24), &v37);
        re::StringID::destroyString((re::StringID *)&v37);
        *(_OWORD *)uint64_t v36 = 0u;
        *(_OWORD *)(v36 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
        *(unsigned char *)(v36 + 24) = 1;
      }
      return;
    }
LABEL_9:
    ++v9;
  }
  while (v9 < *(unsigned int *)(v5 + 56));
  a1 = v36;
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v15 = a2[2] + *(int *)(v10 + 36);
  *(void *)__n128 buf = *(void *)(v10 + 16);
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&long long v40 = v15;
  BYTE8(v40) = 0;
}

uint64_t anonymous namespace'::walkOptional(_anonymous_namespace_ *a1, uint64_t *a2, int a3, uint64_t a4, void *a5)
{
  int v7 = (int)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  if (a2[2])
  {
  }
  long long v13 = 0u;
  long long v14 = 0u;
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a5 + 1), &v13);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v13);
  uint64_t v10 = a5[5] + 32 * a5[3];
  *(void *)(v10 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DCDD8;
  *(void *)(v10 - 24) = v8;
  unint64_t v11 = *(void *)(v8 + 48);
  *(void *)&long long v14 = 0;
  long long v13 = v11;
  BYTE8(v14) = 0;
}

void anonymous namespace'::PolymorphicMemberBindPointImpl::~PolymorphicMemberBindPointImpl(_anonymous_namespace_::PolymorphicMemberBindPointImpl *this)
{
  long long v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::PolymorphicMemberBindPointImpl *)((char *)this + 16));
}

{
  char *v2;
  uint64_t vars8;

  long long v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::PolymorphicMemberBindPointImpl *)((char *)this + 16));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<anonymous namespace'::PolymorphicMemberBindPointImpl>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PolymorphicMemberBindPointImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6DC168;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4;
  re::StringID::StringID((re::StringID *)(a2 + 16), (const StringID *)(a1 + 16));
  *(_OWORD *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(a2 + 88, (uint64_t *)(a1 + 88));
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PolymorphicMemberBindPointImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC168;
  *(void *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(void *)(a2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 24) = "";
  *(_OWORD *)(a2 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  re::BindPoint::BindPoint(a2 + 80, (uint64_t *)(a1 + 80));
  v10[0] = 0;
  v10[1] = "";
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)&v7[0] = *(void *)(a1 + 16) & 1;
  *((void *)&v7[0] + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v5;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 24) = "";
  re::StringID::destroyString((re::StringID *)v7);
  re::StringID::destroyString((re::StringID *)v10);
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0u;
  uint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  *(void *)(a1 + 80) = 0;
  re::DynamicArray<re::RigDataValue>::operator=(a1 + 88, (uint64_t)v7 + 8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7 + 8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7 + 8);
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PolymorphicMemberBindPointImpl>::equals(uint64_t a1, void *a2)
{
    || *(void *)(a1 + 8) != a2[1])
  {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 16), a2 + 2);
}

unint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::hash(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v18[0] = a3;
  v18[1] = a4;
  unint64_t v7 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 5));
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (v7 && a4)
  {
    long long v10 = a1[4];
    long long v15 = a1[3];
    uint64_t v17 = *((void *)&v10 + 1);
    unint64_t v16 = v7;
    uint64_t v11 = *a3;
    uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v18, 1uLL, a4);
    v9 ^= (v9 << 6)
        + (v9 >> 2)
        + (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, &v15, v12, v13)- 0x61C8864680B583E9;
  }
  return v9;
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::isAlive(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t result = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 5));
  if (result)
  {
    long long v8 = a1[4];
    long long v12 = a1[3];
    uint64_t v14 = *((void *)&v8 + 1);
    uint64_t v13 = result;
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, &v12, v10, v11);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::baseValueUntyped(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t result = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 5));
  if (result)
  {
    long long v8 = a1[4];
    long long v12 = a1[3];
    uint64_t v14 = *((void *)&v8 + 1);
    uint64_t v13 = result;
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, &v12, v10, v11);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::supportsOverrideValue(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (a4
  {
    long long v8 = a1[4];
    long long v13 = a1[3];
    uint64_t v15 = *((void *)&v8 + 1);
    uint64_t v14 = v7;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 96))(v9, &v13, v10, v11);
  }
  else
  {
    return re::BindPoint::supportsOverrideValue((re::BindPoint *)(a1 + 5));
  }
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::isOverridden(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (a4
  {
    long long v8 = a1[4];
    long long v13 = a1[3];
    uint64_t v15 = *((void *)&v8 + 1);
    uint64_t v14 = v7;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 104))(v9, &v13, v10, v11);
  }
  else
  {
    return re::BindPoint::isOverridden((re::BindPoint *)(a1 + 5));
  }
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::setIsOverridden(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v18[0] = a3;
  v18[1] = a4;
  if (a4)
  {
    uint64_t v9 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 5));
    if (v9)
    {
      long long v10 = a1[4];
      long long v15 = a1[3];
      uint64_t v17 = *((void *)&v10 + 1);
      uint64_t v16 = v9;
      uint64_t v11 = *a3;
      uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v18, 1uLL, a4);
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 112))(v11, &v15, v12, v13, a5);
    }
  }
  return re::BindPoint::setIsOverridden((uint64_t)(a1 + 5), a5);
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::overrideValueUntyped(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (a4
  {
    long long v8 = a1[4];
    long long v13 = a1[3];
    uint64_t v15 = *((void *)&v8 + 1);
    uint64_t v14 = v7;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 120))(v9, &v13, v10, v11);
  }
  else
  {
    return re::BindPoint::overrideValueUntyped((re::BindPoint *)(a1 + 5));
  }
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::markAsWritten(_OWORD *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (a4
  {
    long long v8 = a1[4];
    long long v13 = a1[3];
    uint64_t v15 = *((void *)&v8 + 1);
    uint64_t v14 = v7;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 128))(v9, &v13, v10, v11);
  }
  else
  {
    return re::BindPoint::markAsWritten((uint64_t)(a1 + 5));
  }
}

uint64_t anonymous namespace'::PolymorphicMemberBindPointImpl::boundOwner()
{
  return 0;
}

void anonymous namespace'::PolymorphicMemberBindPointImpl::updateCachedBinding(_anonymous_namespace_::PolymorphicMemberBindPointImpl *this, void *a2)
{
  uint64_t v4 = a2[2];
  if (*a2 != *((void *)this + 5) || v4 != *((void *)this + 4))
  {
    *((void *)this + 4) = v4;
    unint64_t v5 = *((void *)this + 1);
    uint64_t v15 = 0;
    *(_OWORD *)long long v13 = v5;
    *(void *)&v13[16] = 0;
    *(void *)&unsigned char v13[24] = 0;
    int v14 = 0;
    *((void *)this + 10) = v5;
    uint64_t v6 = (void *)((char *)this + 80);
    uint64_t v7 = (char *)this + 88;
    re::DynamicArray<re::RigDataValue>::operator=((uint64_t)this + 88, (uint64_t)&v13[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0;
    long long v8 = (_anonymous_namespace_ *)*((void *)this + 1);
    uint64_t v9 = (const char *)strlen(*((const char **)this + 3));
    v12[0] = *((const char **)this + 3);
    v12[1] = v9;
    *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_OWORD *)v13;
    *(_OWORD *)((char *)this + 57) = *(_OWORD *)&v13[9];
    uint64_t v10 = *((void *)this + 6);
    if (v10 || *((unsigned char *)this + 72))
    {
      *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = *a2;
      uint64_t v11 = *((void *)this + 8);
      if (v11)
      {
        re::makeBindPoint((uint64_t)v13, v10, v11, (uint64_t)v6);
        *uint64_t v6 = *(void *)v13;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)v7, (uint64_t)&v13[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
      }
    }
  }
}

uint64_t re::Slice<re::internal::BindPointImplBase const*>::range(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3 < a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, std::string::size_type size = %zu", "fromInclusive <= size()", "range", 241, a2, v3);
    _os_crash();
    __break(1u);
  }
  else if (v3 >= a3)
  {
    return *a1 + 8 * a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, std::string::size_type size = %zu", "toExclusive <= size()", "range", 242, a2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL anonymous namespace'::isCompatibleType(_anonymous_namespace_ *this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3)
{
  if (!this) {
    return 1;
  }
  unint64_t v3 = 0x268771000uLL;
  {
    uint64_t v33 = this;
    uint64_t v29 = a2;
    unint64_t v3 = 0x268771000;
    a2 = v29;
    int v19 = v18;
     this = v33;
    if (v19)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v29);
      unint64_t v3 = 0x268771000;
       this = v33;
      a2 = v29;
    }
  }
  uint64_t v4 = *(_anonymous_namespace_ **)(v3 + 3632);
  {
    double v34 = this;
    uint64_t v26 = v4;
    BOOL v30 = a2;
    uint64_t v4 = v26;
    a2 = v30;
    unint64_t v3 = 0x268771000;
    int v21 = v20;
     this = v34;
    if (v21)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v30);
      uint64_t v4 = v26;
      a2 = v30;
      unint64_t v3 = 0x268771000;
       this = v34;
    }
  }
  BOOL v6 = v4 != this && *(void *)(v3 + 3632) != (void)a2;
  unint64_t v7 = 0x268771000uLL;
  {
    unint64_t v35 = this;
    uint64_t v31 = a2;
    BOOL v27 = v6;
    BOOL v6 = v27;
    unint64_t v7 = 0x268771000;
    a2 = v31;
    int v23 = v22;
     this = v35;
    if (v23)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v31);
      BOOL v6 = v27;
      unint64_t v7 = 0x268771000;
       this = v35;
      a2 = v31;
    }
  }
  if (*(_anonymous_namespace_ **)(v7 + 3648) == this) {
    BOOL v6 = 0;
  }
  {
    uint64_t v36 = this;
    uint64_t v32 = a2;
    BOOL v28 = v6;
    BOOL v6 = v28;
    unint64_t v7 = 0x268771000;
    a2 = v32;
    int v25 = v24;
     this = v36;
    if (v25)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v32);
      BOOL v6 = v28;
      unint64_t v7 = 0x268771000;
       this = v36;
      a2 = v32;
    }
  }
  long long v8 = *(const re::IntrospectionBase **)(v7 + 3648);
  int v9 = *((_DWORD *)this + 4);
  if (v9) {
    BOOL v10 = v9 == 9;
  }
  else {
    BOOL v10 = 1;
  }
  int v11 = v10;
  int v12 = *((_DWORD *)a2 + 4);
  if (v12) {
    BOOL v13 = v12 == 9;
  }
  else {
    BOOL v13 = 1;
  }
  int v14 = v13;
  char v15 = !v6;
  if (v8 == a2) {
    char v15 = 1;
  }
  if ((v15 & 1) == 0 && v11 && v14) {
    return *((_DWORD *)this + 5) == *((_DWORD *)a2 + 5);
  }
  else {
    return this == a2;
  }
}

void re::BindPoint::addToBindPointStack<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>,anonymous namespace'::ArrayMemberWithSizePointerInfo>(void *a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(v5, 0, sizeof(v5));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v5);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v5);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC238;
  *(void *)(v4 - 24) = *a2;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC238;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC238;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::hash(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  unint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v4 + *(int *)(v5 + 36));
  if (v6)
  {
    uint64_t v6 = *a2;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v4 = 0;
  }
  v13[0] = v6;
  v13[1] = v5;
  void v13[2] = v4;
  char v14 = 0;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (a4 && v4)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    v8 ^= (v8 << 6)
        + (v8 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v13, v10, v11)
        - 0x61C8864680B583E9;
  }
  return v8;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::isAlive(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + *(int *)(v5 + 36))) {
    return 0;
  }
  v10[0] = *a2;
  v10[1] = v5;
  void v10[2] = v4;
  char v11 = 0;
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::baseValueUntyped(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = a2[2];
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(void *)(result + *(int *)(v6 + 36))) {
    return 0;
  }
  v10[0] = *a2;
  v10[1] = v6;
  void v10[2] = result;
  char v11 = 0;
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::supportsOverrideValue(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + *(int *)(v5 + 36))) {
    return 0;
  }
  v10[0] = *a2;
  v10[1] = v5;
  void v10[2] = v4;
  char v11 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::isOverridden(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + *(int *)(v5 + 36))) {
    return 0;
  }
  v10[0] = *a2;
  v10[1] = v5;
  void v10[2] = v4;
  char v11 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::setIsOverridden(uint64_t result, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    uint64_t v5 = a2[2];
    uint64_t v6 = *(void *)(result + 8);
    if (*(void *)(v5 + *(int *)(v6 + 36)))
    {
      v11[0] = *a2;
      v11[1] = v6;
      void v11[2] = v5;
      char v12 = 0;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::overrideValueUntyped(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + *(int *)(v5 + 36))) {
    return 0;
  }
  v10[0] = *a2;
  v10[1] = v5;
  void v10[2] = v4;
  char v11 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::markAsWritten(uint64_t result, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v4 = a2[2];
    uint64_t v5 = *(void *)(result + 8);
    if (*(void *)(v4 + *(int *)(v5 + 36)))
    {
      v9[0] = *a2;
      v9[1] = v5;
      void v9[2] = v4;
      char v10 = 0;
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizePointerInfo>::boundOwner()
{
  return 0;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC308;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC308;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::setIsOverridden(void *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::markAsWritten(void *result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo>::boundOwner()
{
  return 0;
}

void *anonymous namespace'::ArrayMemberWithSizeIndexPointerInfo::pointerReference(void *result, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (*(_DWORD *)(a3 + 40) == 1
    && (uint64_t v6 = *(void *)(a3 + 48)) != 0
    && (uint64_t v9 = (const void *)(a4 + *(int *)(a3 + 64)),
        unint64_t __dst = 0,
        uint64_t result = memcpy(&__dst, v9, *(int *)(v6 + 20)),
        unint64_t v10 = *a2,
        *a2 < __dst)
    && (uint64_t v11 = *(void *)(a4 + *(int *)(a3 + 36))) != 0)
  {
    uint64_t v12 = *(void *)(*(void *)(a3 + 16) + 48);
    *uint64_t v4 = v12;
    v4[1] = 0;
    _DWORD v4[2] = v11 + v10 * *(int *)(v12 + 20);
    *((unsigned char *)v4 + 24) = 0;
  }
  else
  {
    *uint64_t v4 = 0;
    v4[1] = 0;
    *((unsigned char *)v4 + 24) = 0;
    _DWORD v4[2] = 0;
  }
  return result;
}

__n128 re::BindPoint::addToBindPointStack<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>,anonymous namespace'::RelativeMemberOffsetPointerInfo>(void *a1, __n128 *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = &unk_26E6DC3D8;
  __n128 result = *a2;
  *(__n128 *)(v4 - 24) = *a2;
  return result;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>>::implTypeInfo()
{
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC3D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC3D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1]
      && *(void *)(a1 + 16) == a2[2];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t v4 = *(void *)(a1 + 16);
  v12[0] = *(void *)(a1 + 8);
  v12[1] = 0;
  unint64_t v5 = v4 + *(void *)(a2 + 16);
  void v12[2] = v5;
  char v13 = 0;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v5)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = *(void *)(a1 + 8);
  v10[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  char v11 = 0;
  void v10[2] = v4 + v5;
  if (!(v4 + v5)) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = *(void *)(a1 + 8);
  v10[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  char v11 = 0;
  uint64_t result = v4 + v5;
  void v10[2] = v4 + v5;
  if (v4 + v5)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = *(void *)(a1 + 8);
  v10[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  char v11 = 0;
  void v10[2] = v4 + v5;
  if (!(v4 + v5)) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = *(void *)(a1 + 8);
  v10[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  char v11 = 0;
  void v10[2] = v4 + v5;
  if (!(v4 + v5)) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(result + 16);
    v11[0] = *(void *)(result + 8);
    v11[1] = 0;
    uint64_t v6 = *(void *)(a2 + 16);
    char v12 = 0;
    void v11[2] = v5 + v6;
    if (v5 + v6)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = *(void *)(a1 + 8);
  v10[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  char v11 = 0;
  void v10[2] = v4 + v5;
  if (!(v4 + v5)) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 16);
    v9[0] = *(void *)(result + 8);
    v9[1] = 0;
    uint64_t v5 = *(void *)(a2 + 16);
    char v10 = 0;
    void v9[2] = v4 + v5;
    if (v4 + v5)
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RelativeMemberOffsetPointerInfo>::boundOwner()
{
  return 0;
}

void anonymous namespace'::IntrospectionBindPointImpl::~IntrospectionBindPointImpl(_anonymous_namespace_::IntrospectionBindPointImpl *this)
{
}

void *re::internal::BindPointImpl<anonymous namespace'::IntrospectionBindPointImpl>::implTypeInfo()
{
}

__n128 re::internal::BindPointImpl<anonymous namespace'::IntrospectionBindPointImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 re::internal::BindPointImpl<anonymous namespace'::IntrospectionBindPointImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::IntrospectionBindPointImpl>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1]
      && *(void *)(a1 + 16) == a2[2];
}

unint64_t anonymous namespace'::IntrospectionBindPointImpl::hash(uint64_t a1)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 16) ^ (*(void *)(a1 + 16) >> 30));
  return (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 16);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 56))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 16);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  v9[0] = v5;
  v9[1] = 0;
  void v9[2] = result;
  char v10 = 0;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v9, v7, v8);
  }
  return result;
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t v6 = *(void *)(result + 16);
    v10[0] = *(void *)(result + 8);
    v10[1] = 0;
    void v10[2] = v6;
    char v11 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 112))(v7, v10, v8, v9, a5);
  }
  return result;
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 16);
    v8[0] = *(void *)(result + 8);
    v8[1] = 0;
    void v8[2] = v4;
    char v9 = 0;
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v8, v6, v7);
  }
  return result;
}

uint64_t anonymous namespace'::IntrospectionBindPointImpl::boundOwner()
{
  return 0;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>>::implTypeInfo()
{
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1]
      && *(void *)(a1 + 16) == a2[2];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>>::boundOwner()
{
  return 0;
}

uint64_t anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionDynamicArrayBase>::pointerReference(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >= (*(uint64_t (**)(void, void))(*(void *)*a2 + 88))(*a2, *(void *)(a3 + 16)))
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 40))(*a2, 0);
    uint64_t result = (*(uint64_t (**)(void, void, void))(*(void *)*a2 + 96))(*a2, *(void *)(a3 + 16), a2[1]);
  }
  *(void *)a1 = v7;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>>::implTypeInfo()
{
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DC648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1]
      && *(void *)(a1 + 16) == a2[2];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>>::boundOwner()
{
  return 0;
}

uint64_t anonymous namespace'::ArrayIndexPointerInfo<re::IntrospectionFixedArrayBase>::pointerReference(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >= (*(uint64_t (**)(void, void))(*(void *)*a2 + 80))(*a2, *(void *)(a3 + 16)))
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 40))(*a2, 0);
    uint64_t result = (*(uint64_t (**)(void, void, void))(*(void *)*a2 + 96))(*a2, *(void *)(a3 + 16), a2[1]);
  }
  *(void *)a1 = v7;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  return a1;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>>::implTypeInfo()
{
  return " ";
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DC718;
  uint64_t result = re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
  a2[3] = *(void *)(a1 + 24);
  return result;
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DC718;
  uint64_t result = re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
  a2[3] = *(void *)(a1 + 24);
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>>::equals(uint64_t a1, void *a2)
{
  if ((char *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != " ") {
    return 0;
  }
  BOOL result = re::StringID::operator==((void *)(a1 + 8), a2 + 1);
  if (result) {
    return *(void *)(a1 + 24) == a2[3];
  }
  return result;
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  unint64_t v7 = **(void **)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    unint64_t v7 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)v7 + 8))(v7, v8, a1 + 8);
  }
  else
  {
    uint64_t v8 = 0;
  }
  v15[0] = v8;
  v15[1] = 0;
  void v15[2] = v7;
  char v16 = 0;
  unint64_t v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v10 = v9 ^ (v9 >> 31);
  if (a4 && v7)
  {
    uint64_t v11 = *a3;
    uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    v10 ^= (v10 << 6)
         + (v10 >> 2)
         + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v15, v12, v13)
         - 0x61C8864680B583E9;
  }
  return v10;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = **(void **)(a2 + 16);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 8))(result, v8, a1 + 8);
    v12[0] = v8;
    v12[1] = 0;
    void v12[2] = result;
    char v13 = 0;
    if (result)
    {
      if (a4)
      {
        uint64_t v9 = *a3;
        uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, v12, v10, v11);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = **(void **)(a2 + 16);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 8))(result, v8, a1 + 8);
    v12[0] = v8;
    v12[1] = 0;
    void v12[2] = result;
    char v13 = 0;
    if (result)
    {
      if (a4)
      {
        uint64_t v9 = *a3;
        uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, v12, v10, v11);
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = **(void **)(a2 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8))(v5, v8, a1 + 8);
  v14[0] = v8;
  v14[1] = 0;
  void v14[2] = v9;
  char v15 = 0;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v14, v11, v12);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = **(void **)(a2 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8))(v5, v8, a1 + 8);
  v14[0] = v8;
  v14[1] = 0;
  void v14[2] = v9;
  char v15 = 0;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 104))(v10, v14, v11, v12);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    uint64_t v5 = **(void **)(a2 + 16);
    if (v5)
    {
      uint64_t v9 = *(void *)(result + 24);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v5 + 8))(**(void **)(a2 + 16), v9, result + 8);
      v13[0] = v9;
      v13[1] = 0;
      void v13[2] = result;
      char v14 = 0;
      if (result)
      {
        uint64_t v10 = *a3;
        uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 112))(v10, v13, v11, v12, a5);
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = **(void **)(a2 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8))(v5, v8, a1 + 8);
  v14[0] = v8;
  v14[1] = 0;
  void v14[2] = v9;
  char v15 = 0;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 120))(v10, v14, v11, v12);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    uint64_t v4 = **(void **)(a2 + 16);
    if (v4)
    {
      uint64_t v7 = *(void *)(result + 24);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v4 + 8))(**(void **)(a2 + 16), v7, result + 8);
      v11[0] = v7;
      v11[1] = 0;
      void v11[2] = result;
      char v12 = 0;
      if (result)
      {
        uint64_t v8 = *a3;
        uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v11, v9, v10);
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStorePointerInfo>::boundOwner()
{
  return 0;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC7E8;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC7E8;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::setIsOverridden(void *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::markAsWritten(void *result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicPointerInfo>::boundOwner()
{
  return 0;
}

void *anonymous namespace'::PolymorphicPointerInfo::pointerReference(void *result, uint64_t a2, re::IntrospectionBase *a3)
{
  uint64_t v3 = (uint64_t)result;
  if (a3)
  {
    re::PolymorphicData::makeWithPointer(*(void *)(*(void *)a2 + 48), a3, v5);
  }
  else
  {
    re::StringID *result = 0;
    result[1] = 0;
    *((unsigned char *)result + 24) = 0;
    result[2] = 0;
  }
  return result;
}

void *anonymous namespace'::makePolymorphicPointer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t __dst = 0;
  uint64_t result = memcpy(&__dst, v6, *(int *)(v7 + 20));
  uint64_t v9 = *(unsigned int **)(a2 + 16);
  uint64_t v10 = *v9;
  if (v10)
  {
    uint64_t v11 = (int *)(*((void *)v9 + 1) + 32);
    while (*((void *)v11 - 1) != __dst)
    {
      v11 += 10;
      if (!--v10)
      {
        uint64_t v12 = 0;
        goto LABEL_8;
      }
    }
    uint64_t v10 = a3 + *v11;
    uint64_t v12 = *((void *)v11 - 3);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v10 = 0;
  }
LABEL_8:
  *(void *)a1 = v12;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v10;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC8B8;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DC8B8;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v4 = **(void **)(a2 + 16);
  if (v4) {
    uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  v12[0] = v5;
  v12[1] = 0;
  void v12[2] = v4;
  char v13 = 0;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v4)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = **(void **)(a2 + 16);
  if (!v4) {
    return 0;
  }
  v9[0] = *(void *)(*(void *)(a1 + 8) + 48);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t result = **(void **)(a2 + 16);
  if (result)
  {
    v9[0] = *(void *)(*(void *)(a1 + 8) + 48);
    v9[1] = 0;
    void v9[2] = result;
    char v10 = 0;
    if (a4)
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = **(void **)(a2 + 16);
  if (!v4) {
    return 0;
  }
  v9[0] = *(void *)(*(void *)(a1 + 8) + 48);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = **(void **)(a2 + 16);
  if (!v4) {
    return 0;
  }
  v9[0] = *(void *)(*(void *)(a1 + 8) + 48);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t v5 = **(void **)(a2 + 16);
    if (v5)
    {
      v10[0] = *(void *)(*(void *)(result + 8) + 48);
      v10[1] = 0;
      void v10[2] = v5;
      char v11 = 0;
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 112))(v7, v10, v8, v9, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = **(void **)(a2 + 16);
  if (!v4) {
    return 0;
  }
  v9[0] = *(void *)(*(void *)(a1 + 8) + 48);
  v9[1] = 0;
  void v9[2] = v4;
  char v10 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v9, v6, v7);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v4 = **(void **)(a2 + 16);
    if (v4)
    {
      v8[0] = *(void *)(*(void *)(result + 8) + 48);
      v8[1] = 0;
      void v8[2] = v4;
      char v9 = 0;
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v8, v6, v7);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::RawPointerInfo>::boundOwner()
{
  return 0;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  return a1;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>>::implTypeInfo()
{
  return "0";
}

re::DynamicString *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6DC988;
  a2[1] = v2;
  return re::DynamicString::DynamicString((re::DynamicString *)(a2 + 2), (const re::DynamicString *)(a1 + 16));
}

re::DynamicString *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6DC988;
  a2[1] = v2;
  return re::DynamicString::DynamicString((re::DynamicString *)(a2 + 2), (const re::DynamicString *)(a1 + 16));
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>>::equals(uint64_t a1, void *a2)
{
  if ((char *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != "0" || *(void *)(a1 + 8) != a2[1]) {
    return 0;
  }
  return re::DynamicString::operator==(a1 + 16, (uint64_t)(a2 + 2));
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::HashTableKeyPointerInfo>::boundOwner()
{
  return 0;
}

void anonymous namespace'::HashTableKeyPointerInfo::pointerReference(uint64_t a1, char *a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)(*(void *)a2 + 64);
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = (char *)*((void *)a2 + 3);
  if ((v6 & 1) == 0) {
    uint64_t v7 = a2 + 17;
  }
  unint64_t v8 = v6 >> 1;
  unint64_t v9 = v6 >> 1;
  if (*((void *)a2 + 2)) {
    unint64_t v9 = v8;
  }
  v23[0] = v7;
  v23[1] = v9;
  uint64_t v10 = v4[6];
  uint64_t v11 = &qword_268772000;
  {
    uint64_t v21 = v10;
    uint64_t v11 = &qword_268772000;
    uint64_t v10 = v21;
    if (v17)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v18);
      uint64_t v11 = &qword_268772000;
      uint64_t v10 = v21;
    }
  }
  if (v10 == v11[452])
  {
    uint64_t v24 = 0;
    char v15 = operator new(0x20uLL);
    char v16 = &unk_26E6DCA58;
LABEL_12:
    *char v15 = v16;
    v15[1] = v4;
    void v15[2] = v23;
    void v15[3] = &v24;
    v25[3] = v15;
    (*(void (**)(void *, uint64_t, void *))(*v4 + 104))(v4, v5, v25);
    std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](v25);
    uint64_t v14 = v24;
    goto LABEL_13;
  }
  uint64_t v12 = (char **)v4[6];
  unint64_t v13 = &off_268773000;
  {
    int v22 = v12;
    unint64_t v13 = &off_268773000;
    uint64_t v12 = v22;
    if (v19)
    {
      re::introspect<re::StringID>(void)::info = (uint64_t)re::IntrospectionInfo<re::StringID>::get(0, v20);
      unint64_t v13 = &off_268773000;
      uint64_t v12 = v22;
    }
  }
  if (v12 == v13[458])
  {
    uint64_t v24 = 0;
    char v15 = operator new(0x20uLL);
    char v16 = &unk_26E6DCAE8;
    goto LABEL_12;
  }
  uint64_t v14 = 0;
LABEL_13:
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v14;
  *(unsigned char *)(a1 + 24) = 0;
}

void std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26E6DCA58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  *((void *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DCA58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(*a2 + 8);
  if (v6) {
    size_t v7 = v6 >> 1;
  }
  else {
    size_t v7 = v6 >> 1;
  }
  if (*(void *)(v5 + 8) != v7) {
    return 1;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = v4 + 9;
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v12 = (const void *)((v6 & 1) != 0 ? v11 : v10);
  uint64_t result = memcmp(*(const void **)v5, v12, v7);
  if (result) {
    return 1;
  }
  **(void **)(a1 + 24) = v9;
  return result;
}

uint64_t std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::DynamicString>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26E6DCAE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  *((void *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DCAE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(const char **)(*(void *)a2 + 8);
  size_t v7 = strlen(v6);
  if (*(void *)(v5 + 8) != v7) {
    return 1;
  }
  uint64_t result = memcmp(*(const void **)v5, v6, v7);
  if (result) {
    return 1;
  }
  **(void **)(a1 + 24) = v4;
  return result;
}

uint64_t std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1},std::allocator<void * anonymous namespace'::tryGetValue<re::StringID>(re::IntrospectionHashTableBase const*,void *,re::StringSlice const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::target_type()
{
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  return a1;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>>::implTypeInfo()
{
  return " ";
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>>::copyInto(const StringID *a1, void *a2)
{
  var1 = a1->var1;
  *a2 = &unk_26E6DCB68;
  a2[1] = var1;
  return re::StringID::StringID((re::StringID *)(a2 + 2), a1 + 1);
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>>::moveInto(const StringID *a1, void *a2)
{
  var1 = a1->var1;
  *a2 = &unk_26E6DCB68;
  a2[1] = var1;
  return re::StringID::StringID((re::StringID *)(a2 + 2), a1 + 1);
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>>::equals(uint64_t a1, void *a2)
{
  if ((char *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != " " || *(void *)(a1 + 8) != a2[1]) {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 16), a2 + 2);
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  uint64_t v6 = *(void *)(a2 + 16);
  v14[0] = *(void *)(a1 + 8);
  v14[1] = 0;
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v14[2] = v7;
  char v15 = 0;
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (a4 && v7)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
    v9 ^= (v9 << 6)
        + (v9 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v14, v11, v12)
        - 0x61C8864680B583E9;
  }
  return v9;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a1 + 8);
  v11[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v11[2] = result;
  char v12 = 0;
  if (result)
  {
    if (a4)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 64))(v8, v11, v9, v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a1 + 8);
  v11[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v11[2] = result;
  char v12 = 0;
  if (result)
  {
    if (a4)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, v11, v9, v10);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a1 + 8);
  v11[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v11[2] = result;
  char v12 = 0;
  if (result)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 96))(v8, v11, v9, v10);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a1 + 8);
  v11[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v11[2] = result;
  char v12 = 0;
  if (result)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v11, v9, v10);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    v12[0] = *(void *)(result + 8);
    v12[1] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    void v12[2] = result;
    char v13 = 0;
    if (result)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, v12, v10, v11, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a1 + 8);
  v11[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  void v11[2] = result;
  char v12 = 0;
  if (result)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 120))(v8, v11, v9, v10);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v10[0] = *(void *)(result + 8);
    v10[1] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    void v10[2] = result;
    char v11 = 0;
    if (result)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 128))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreTypedMemberPointerInfo>::boundOwner()
{
  return 0;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  return a1;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::~PointerBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>>::implTypeInfo()
{
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DCC38;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

re::StringID *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6DCC38;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>>::equals(uint64_t a1, void *a2)
{
    return 0;
  return re::StringID::operator==((void *)(a1 + 8), a2 + 1);
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v15[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v15[1] = 0;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v15[2] = v8;
  char v16 = 0;
  unint64_t v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
  unint64_t v10 = v9 ^ (v9 >> 31);
  if (a4 && v8)
  {
    uint64_t v11 = *a3;
    uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    v10 ^= (v10 << 6)
         + (v10 >> 2)
         + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v15, v12, v13)
         - 0x61C8864680B583E9;
  }
  return v10;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v12[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v12[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v12[2] = result;
  char v13 = 0;
  if (result)
  {
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, v12, v10, v11);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v12[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v12[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v12[2] = result;
  char v13 = 0;
  if (result)
  {
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, v12, v10, v11);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v12[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v12[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v12[2] = result;
  char v13 = 0;
  if (result)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 96))(v9, v12, v10, v11);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v12[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v12[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v12[2] = result;
  char v13 = 0;
  if (result)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 104))(v9, v12, v10, v11);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    uint64_t v8 = result + 8;
    uint64_t v9 = *(void *)(a2 + 16);
    v13[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, result + 8);
    v13[1] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 8))(v9, 0, v8);
    void v13[2] = result;
    char v14 = 0;
    if (result)
    {
      uint64_t v10 = *a3;
      uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 112))(v10, v13, v11, v12, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  v12[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1 + 8);
  v12[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
  void v12[2] = result;
  char v13 = 0;
  if (result)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 120))(v9, v12, v10, v11);
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    uint64_t v6 = result + 8;
    uint64_t v7 = *(void *)(a2 + 16);
    v11[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, result + 8);
    v11[1] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 8))(v7, 0, v6);
    void v11[2] = result;
    char v12 = 0;
    if (result)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v11, v9, v10);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::KeyValueStoreMemberPointerInfo>::boundOwner()
{
  return 0;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCD08;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCD08;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::setIsOverridden(void *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

void *anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::markAsWritten(void *result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::PolymorphicMemberPointerInfo>::boundOwner()
{
  return 0;
}

void *anonymous namespace'::PolymorphicMemberPointerInfo::pointerReference(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + *(int *)(a2 + 36));
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 48);
    uint64_t v6 = *(void **)(v5 + 64);
    uint64_t v7 = (_DWORD *)*v6;
    if (*(_DWORD *)*v6 != 2)
    {
      uint64_t v8 = (_DWORD **)(v6 + 1);
      uint64_t v9 = *(unsigned int *)(v5 + 56) - 1;
      do
      {
        uint64_t v10 = *v8++;
        uint64_t v7 = v10;
        --v9;
      }
      while (*v10 != 2);
    }
    uint64_t v11 = *(void *)(a2 + 48);
    v12[0] = a3 + *(int *)(a2 + 64);
    v12[1] = v11;
    void v12[2] = *((void *)v7 + 1);
  }
  else
  {
    void *result = 0;
    result[1] = 0;
    *((unsigned char *)result + 24) = 0;
    result[2] = 0;
  }
  return result;
}

void anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::~PointerBindPointImpl()
{
}

void *re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCDD8;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCDD8;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4 && v13)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    v7 ^= (v7 << 6)
        + (v7 >> 2)
        + (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v12, v9, v10)
        - 0x61C8864680B583E9;
  }
  return v7;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::isWeak()
{
  return 1;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!v10[2]) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = v11;
  if (v11)
  {
    if (a4)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v10, v8, v9);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    if (v11[2])
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v11, v9, v10, a5);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  if (!v10[2]) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v10, v7, v8);
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    if (v9[2])
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v9, v7, v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::PointerBindPointImpl<anonymous namespace'::OptionalValuePointerInfo>::boundOwner()
{
  return 0;
}

uint64_t anonymous namespace'::OptionalValuePointerInfo::pointerReference(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void, void))(*(void *)*a2 + 56))(*a2, *(void *)(a3 + 16)))
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)(*a2 + 48);
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 72))(v6, *(void *)(a3 + 16));
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void anonymous namespace'::RelativeBindPointImpl::~RelativeBindPointImpl(_anonymous_namespace_::RelativeBindPointImpl *this)
{
}

void *re::internal::BindPointImpl<anonymous namespace'::RelativeBindPointImpl>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::RelativeBindPointImpl>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCEA8;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<anonymous namespace'::RelativeBindPointImpl>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6DCEA8;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::RelativeBindPointImpl>::equals(uint64_t a1, void *a2)
{
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t anonymous namespace'::RelativeBindPointImpl::hash(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t anonymous namespace'::RelativeBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 56))(v4, v8, v5, v6);
}

uint64_t anonymous namespace'::RelativeBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (!a4) {
    return 1;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 64))(v4, v8, v5, v6);
}

uint64_t anonymous namespace'::RelativeBindPointImpl::targetIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t anonymous namespace'::RelativeBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 88))(v4, v8, v5, v6);
  }
  return a2;
}

uint64_t anonymous namespace'::RelativeBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v8, v5, v6);
}

uint64_t anonymous namespace'::RelativeBindPointImpl::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 104))(v4, v8, v5, v6);
}

uint64_t anonymous namespace'::RelativeBindPointImpl::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v9[0] = *(void *)(result + 8);
    v9[1] = 0;
    void v9[2] = a2;
    char v10 = 0;
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 112))(v6, v9, v7, v8, a5);
  }
  return result;
}

uint64_t anonymous namespace'::RelativeBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = *(void *)(a1 + 8);
  v8[1] = 0;
  void v8[2] = a2;
  char v9 = 0;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 120))(v4, v8, v5, v6);
  }
  return a2;
}

uint64_t anonymous namespace'::RelativeBindPointImpl::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v7[0] = *(void *)(result + 8);
    v7[1] = 0;
    _OWORD v7[2] = a2;
    char v8 = 0;
    uint64_t v4 = *a3;
    uint64_t v5 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 128))(v4, v7, v5, v6);
  }
  return result;
}

uint64_t anonymous namespace'::RelativeBindPointImpl::boundOwner()
{
  return 0;
}

void anonymous namespace'::OverridableBindPointImpl::~OverridableBindPointImpl(_anonymous_namespace_::OverridableBindPointImpl *this)
{
}

const char *re::internal::BindPointImpl<anonymous namespace'::OverridableBindPointImpl>::implTypeInfo()
{
  return " ";
}

__n128 re::internal::BindPointImpl<anonymous namespace'::OverridableBindPointImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DCF78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  return result;
}

__n128 re::internal::BindPointImpl<anonymous namespace'::OverridableBindPointImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6DCF78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  return result;
}

BOOL re::internal::BindPointImpl<anonymous namespace'::OverridableBindPointImpl>::equals(void *a1, void *a2)
{
  return (char *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == " "
      && a1[2] == a2[2]
      && a1[1] == a2[1]
      && a1[3] == a2[3];
}

unint64_t anonymous namespace'::OverridableBindPointImpl::hash(uint64_t a1)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 8) ^ (*(void *)(a1 + 8) >> 30));
  return (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
}

uint64_t anonymous namespace'::OverridableBindPointImpl::isWeak()
{
  return 0;
}

uint64_t anonymous namespace'::OverridableBindPointImpl::isAlive()
{
  return 1;
}

uint64_t anonymous namespace'::OverridableBindPointImpl::targetIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t anonymous namespace'::OverridableBindPointImpl::baseValueUntyped(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t anonymous namespace'::OverridableBindPointImpl::supportsOverrideValue()
{
  return 1;
}

uint64_t anonymous namespace'::OverridableBindPointImpl::isOverridden(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 24);
}

uint64_t anonymous namespace'::OverridableBindPointImpl::setIsOverridden(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  **(unsigned char **)(result + 24) = a5;
  return result;
}

uint64_t anonymous namespace'::OverridableBindPointImpl::overrideValueUntyped(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t anonymous namespace'::OverridableBindPointImpl::boundOwner()
{
  return 0;
}

void *re::allocInfo_KeyValueStoreInterface(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_122, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_122))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7F590, "KeyValueStoreInterface");
    __cxa_guard_release(&_MergedGlobals_122);
  }
  return &unk_26AF7F590;
}

void re::initInfo_KeyValueStoreInterface(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x8BFD87A3D5E850D4;
  v5[1] = "KeyValueStoreInterface";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v6;
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &re::initInfo_KeyValueStoreInterface(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_KeyValueStoreInterface(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"KeyValueStoreInterface", (uint64_t (*)(re::internal *))re::allocInfo_KeyValueStoreInterface, (re::IntrospectionBase *(*)(void))re::initInfo_KeyValueStoreInterface, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::KeyValueStoreInterface>, this);
}

uint64_t *re::foundationBindingLogObjects(re *this)
{
  {
    re::foundationBindingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.Binding");
  }
  return &re::foundationBindingLogObjects(void)::logObjects;
}

BOOL re::internal::doesBindingKeyNeedUnescaping(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = *a1;
    BOOL v4 = 1;
    do
    {
      if (v2 < v1 - 1 && *(unsigned char *)(v3 + v2) == 92)
      {
        int v5 = *(char *)(v3 + v2 + 1);
        long long v6 = (char *)memchr(".[]", v5, 3uLL);
        uint64_t v7 = "";
        if (v6) {
          uint64_t v7 = v6;
        }
        int64_t v8 = v7 - ".[]";
        if (v5 == 92 || v8 != 3) {
          break;
        }
      }
      BOOL v4 = ++v2 < v1;
    }
    while (v1 != v2);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t re::internal::escapeBindingKey(void *a1, re::DynamicString *this)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 1;
    int v5 = (unsigned char *)*((void *)this + 2);
  }
  else
  {
    *((unsigned char *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v4 & 1;
    int v5 = (char *)this + 9;
  }
  *int v5 = 0;
  uint64_t result = (uint64_t)re::DynamicString::setCapacity(this, a1[1] + 10);
  unint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v8 = 0;
    while (1)
    {
      int v9 = *(char *)(*a1 + v8);
      char v10 = (char *)memchr(".[]", v9, 3uLL);
      char v12 = "";
      if (v10) {
        char v12 = v10;
      }
      int64_t v13 = v12 - ".[]";
      if (v9 == 92 || v13 != 3)
      {
        char __src = 92;
        re::DynamicString::append(this, &__src, 1uLL);
        unint64_t v7 = a1[1];
      }
      if (v7 <= v8) {
        break;
      }
      char v16 = *(unsigned char *)(*a1 + v8);
      uint64_t result = (uint64_t)re::DynamicString::append(this, &v16, 1uLL);
      ++v8;
      unint64_t v7 = a1[1];
      if (v8 >= v7) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v8, v7);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::unescapeBindingKey(uint64_t *a1, re::DynamicString *this)
{
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 1;
    long long v6 = (unsigned char *)*((void *)this + 2);
  }
  else
  {
    *((unsigned char *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v5 & 1;
    long long v6 = (char *)this + 9;
  }
  *long long v6 = 0;
  uint64_t result = (uint64_t)re::DynamicString::setCapacity(this, a1[1]);
  unint64_t v9 = a1[1];
  if (v9)
  {
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *a1;
      if (*(unsigned char *)(*a1 + v10) == 92)
      {
        if (v10 >= v9 - 1) {
          return result;
        }
        unint64_t v2 = v10 + 1;
        if (v9 <= v10 + 1) {
          goto LABEL_20;
        }
        int v12 = *(char *)(v11 + v2);
        int64_t v13 = (char *)memchr(".[]", v12, 3uLL);
        char v14 = "";
        if (v13) {
          char v14 = v13;
        }
        if (v14 - ".[]" != 3 || v12 == 92) {
          ++v10;
        }
      }
      if (v9 <= v10) {
        break;
      }
      char __src = *(unsigned char *)(v11 + v10);
      uint64_t result = (uint64_t)re::DynamicString::append(this, &__src, 1uLL);
      ++v10;
      unint64_t v9 = a1[1];
      if (v10 >= v9) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v10, v9);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v2, v9);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::parseBindingURI(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1[1];
  if (v4 < 3)
  {
    int v15 = 0;
    return v15 & v3;
  }
  unint64_t v8 = 0;
  uint64_t v9 = *a1;
  while (1)
  {
    if (v4 == v8)
    {
      re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v4, v4);
      _os_crash();
      __break(1u);
      goto LABEL_26;
    }
    int v10 = *(char *)(v9 + v8);
    uint64_t v11 = (char *)memchr(".[]", v10, 3uLL);
    int v12 = "";
    if (v11) {
      int v12 = v11;
    }
    int64_t v13 = v12 - ".[]";
    BOOL v14 = v10 != 92 && v13 == 3;
    int v15 = !v14;
    if (!v14)
    {
LABEL_16:
      int v3 = 0;
      return v15 & v3;
    }
    unint64_t v16 = v8 + 1;
    if (v10 == 58) {
      break;
    }
    ++v8;
    if (v4 - 2 == v16) {
      goto LABEL_16;
    }
  }
  if (v4 <= v16)
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v16, v4);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  if (*(unsigned char *)(v9 + v8 + 1) != 47)
  {
LABEL_24:
    int v3 = 0;
    int v15 = 1;
    return v15 & v3;
  }
  unint64_t v18 = v8 + 2;
  if (v4 > v8 + 2)
  {
    if (*(unsigned char *)(v9 + v8 + 2) == 47)
    {
      *a2 = re::Slice<char>::range(a1, 0, v8);
      a2[1] = v19;
      *a3 = re::Slice<char>::range(a1, v8 + 3, a1[1]);
      a3[1] = v20;
      int v15 = 1;
      int v3 = 1;
      return v15 & v3;
    }
    goto LABEL_24;
  }
LABEL_27:
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v18, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::parseNextBindingKey(char *a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a1;
  a2[1] = 0;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  unint64_t v3 = *((void *)a1 + 1);
  if (!v3) {
    return 1;
  }
  unint64_t v20 = 0;
  uint64_t v7 = *(void *)a1;
  if (**(unsigned char **)a1 == 91)
  {
    unint64_t v18 = "]";
    uint64_t v19 = 1;
    if (v20 >= v3)
    {
      int v12 = *re::foundationBindingLogObjects((re *)v8);
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      LOWORD(v1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      int v15 = "Invalid binding path: Closing bracket is missing.";
LABEL_17:
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v18, 2u);
      return 0;
    }
    unint64_t v9 = v20 - 1;
    uint64_t v10 = v7 + 1;
    unint64_t v11 = v20 + 1;
  }
  else
  {
    unint64_t v18 = ".[]";
    uint64_t v19 = 3;
    unint64_t v11 = v20;
    uint64_t v10 = v7;
    unint64_t v9 = v20;
  }
  if (v11 >= v3)
  {
LABEL_12:
    *a2 = v10;
    a2[1] = v9;
    *(void *)a3 = re::Slice<char>::range(a1, v11, *((void *)a1 + 1));
    *(void *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v16;
    return 1;
  }
  if (*(unsigned char *)(v7 + v11) == 46)
  {
    ++v11;
    goto LABEL_12;
  }
  if (v9) {
    goto LABEL_12;
  }
  int v12 = *re::foundationBindingLogObjects((re *)v8);
  BOOL v17 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v17)
  {
    LOWORD(v1re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
    int v15 = "Delimiter . expected";
    goto LABEL_17;
  }
  return result;
}

char *anonymous namespace'::extractBindingKey(char *result, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  *a4 = a2;
  unint64_t v5 = *((void *)result + 1);
  if (v5 > a2)
  {
    unint64_t v6 = a2;
    char v7 = 0;
    uint64_t v8 = *(void *)result;
    unint64_t v9 = *(void **)a3;
    size_t v10 = *(void *)(a3 + 8);
    size_t v11 = *(void *)a3 + v10;
    while (1)
    {
      if (v7) {
        goto LABEL_10;
      }
      int v12 = *(char *)(v8 + v6);
      if (v12 != 92) {
        break;
      }
      char v7 = 1;
LABEL_11:
      if (v5 == ++v6) {
        goto LABEL_14;
      }
    }
    uint64_t result = (char *)memchr(v9, v12, v10);
    if (result) {
      BOOL v13 = result;
    }
    else {
      BOOL v13 = (char *)v11;
    }
    if (v13 - (unsigned char *)v9 != v10)
    {
      unint64_t v5 = v6;
      goto LABEL_14;
    }
LABEL_10:
    char v7 = 0;
    goto LABEL_11;
  }
LABEL_14:
  *a4 = v5;
  return result;
}

uint64_t *re::internal::parseSkeletalPoseJointPinName(uint64_t a1, uint64_t a2, re::StringID *this, re::StringID *a4, re::StringID *a5)
{
  re::StringID::destroyString(this);
  *(void *) this = 0;
  *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = "";
  re::StringID::destroyString(a4);
  *(void *)a4 = 0;
  *((void *)a4 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = "";
  re::StringID::destroyString(a5);
  *(void *)a5 = 0;
  *((void *)a5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = "";
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  v42[0] = 0;
  v42[1] = 0;
  BindingKey = (_anonymous_namespace_ *)re::internal::parseNextBindingKey((char *)&v43, v42, (uint64_t)&v43);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  re::DynamicString::setCapacity(&v38, 0);
  re::internal::unescapeBindingKey(v42, (re::DynamicString *)&v38);
  re::StringID::StringID((re::StringID *)&v28, (const re::DynamicString *)&v38);
  size_t v11 = v28;
  int v12 = v29;
  BOOL v28 = 0;
  uint64_t v29 = "";
  uint64_t v13 = *(void *)this;
  uint64_t v14 = *((void *)this + 1);
  *(void *) this = v11;
  *((void *)this + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v12;
  uint64_t v33 = (uint64_t *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1);
  uint64_t v34 = v14;
  re::StringID::destroyString((re::StringID *)&v33);
  re::StringID::destroyString((re::StringID *)&v28);
  if (v44)
  {
    v37[0] = 0;
    v37[1] = 0;
    int v15 = (_anonymous_namespace_ *)re::internal::parseNextBindingKey((char *)&v43, v37, (uint64_t)&v43);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    re::DynamicString::setCapacity(&v33, 0);
    re::internal::unescapeBindingKey(v37, (re::DynamicString *)&v33);
    re::StringID::StringID((re::StringID *)&v45, (const re::DynamicString *)&v33);
    unint64_t v16 = v45;
    BOOL v17 = v46;
    unint64_t v45 = 0;
    long long v46 = "";
    uint64_t v18 = *(void *)a4;
    uint64_t v19 = (const char *)*((void *)a4 + 1);
    *(void *)a4 = v16;
    *((void *)a4 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v17;
    BOOL v28 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFELL | v18 & 1);
    uint64_t v29 = v19;
    re::StringID::destroyString((re::StringID *)&v28);
    re::StringID::destroyString((re::StringID *)&v45);
    if (v44)
    {
      v32[0] = 0;
      v32[1] = 0;
      unint64_t v20 = (_anonymous_namespace_ *)re::internal::parseNextBindingKey((char *)&v43, v32, (uint64_t)&v43);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      re::DynamicString::setCapacity(&v28, 0);
      re::internal::unescapeBindingKey(v32, (re::DynamicString *)&v28);
      re::StringID::StringID((re::StringID *)&v26, (const re::DynamicString *)&v28);
      uint64_t v21 = v26;
      int v22 = v27;
      uint64_t v26 = 0;
      BOOL v27 = "";
      uint64_t v23 = *(void *)a5;
      uint64_t v24 = (const char *)*((void *)a5 + 1);
      *(void *)a5 = v21;
      *((void *)a5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = v22;
      unint64_t v45 = v21 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
      long long v46 = v24;
      re::StringID::destroyString((re::StringID *)&v45);
      re::StringID::destroyString((re::StringID *)&v26);
      if (v28)
      {
        if (v29) {
          (*(void (**)(void))(*v28 + 40))();
        }
      }
    }
    if (v33 && (v34 & 1) != 0) {
      (*(void (**)(void))(*v33 + 40))();
    }
  }
  uint64_t result = v38;
  if (v38)
  {
    if (v39) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v38 + 40))();
    }
  }
  return result;
}

uint64_t re::GeometricObjectBase::aabb(re::GeometricObjectBase *this)
{
  uint64_t v2 = (*(uint64_t (**)(re::GeometricObjectBase *))(*(void *)this + 24))(this);
  (*(void (**)(void *__return_ptr, re::GeometricObjectBase *))(*(void *)this + 40))(v4, this);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v4);
}

uint64_t re::GeometricObjectBase::scalePose(float32x4_t *a1, float32x4_t *a2, char a3)
{
  uint64_t v6 = (*(uint64_t (**)(float32x4_t *))(a1->i64[0] + 16))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  if (result == 7)
  {
    uint64_t result = (*(uint64_t (**)(float32x4_t *))(a1->i64[0] + 16))(a1);
    uint64_t v8 = *(void *)(result + 32);
    if (v8)
    {
      uint64_t v9 = *(void *)(result + 40);
      uint64_t v10 = 240 * v8;
      do
      {
        uint64_t result = re::GeometricObjectBase::scalePose(v9, a2, 0);
        v9 += 240;
        v10 -= 240;
      }
      while (v10);
    }
  }
  if ((a3 & 1) == 0)
  {
    float32x4_t v11 = a1[2];
    v12[0] = a1[1];
    v12[1] = v11;
    v12[0] = vmulq_f32(v12[0], *a2);
    return (*(uint64_t (**)(float32x4_t *, float32x4_t *))(a1->i64[0] + 64))(a1, v12);
  }
  return result;
}

uint64_t re::GeometricObjectBase::onScaleChanged(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  return re::GeometricObjectBase::scalePose(a1, a3, 1);
}

float32x4_t re::GeometricObjectBase::parentPose@<Q0>(re::GeometricObjectBase *this@<X0>, float32x4_t *a2@<X8>, float32x4_t result@<Q0>)
{
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2[1].i64[1] = 0x3F80000000000000;
  unint64_t v4 = (void *)*((void *)this + 6);
  if (v4 && v4[6])
  {
    float32x4_t v5 = (float32x4_t)xmmword_23435FBB0;
    uint64_t result = 0uLL;
    do
    {
      float32x4_t v19 = result;
      float32x4_t v20 = v5;
      (*(void (**)(float32x4_t *__return_ptr, void *))(*v4 + 40))(&v21, v4);
      _Q0 = (int32x4_t)v22;
      float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), v22, 0xCuLL);
      float32x4_t v8 = vnegq_f32((float32x4_t)v22);
      float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v8), v19, v7);
      int32x4_t v10 = (int32x4_t)vaddq_f32(v9, v9);
      float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
      _Q6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
      float32x4_t v13 = vaddq_f32(vaddq_f32(v19, vmulq_laneq_f32(v11, (float32x4_t)v22, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)_Q6, 0xCuLL));
      _Q4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v8), v20, v7);
      float32x4_t v5 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q4, _Q4), (int8x16_t)_Q4, 0xCuLL), v20, (float32x4_t)v22, 3), (float32x4_t)v22, v20, 3);
      _Q6.i32[0] = v20.i32[3];
      __asm { FMLA            S4, S6, V0.S[3] }
      v5.i32[3] = _Q4.i32[0];
      uint64_t result = vaddq_f32(v21, v13);
      *a2 = result;
      a2[1] = v5;
      unint64_t v4 = (void *)v4[6];
    }
    while (v4[6]);
  }
  return result;
}

uint64_t re::GeometricObject::deinit(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 232);
  if (v2)
  {
    unint64_t v3 = *(void (****)(void))(this + 64);
    if (v3)
    {
      (**v3)(*(void *)(this + 64));
       this = (*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v2 + 40))(v2, v3);
    }
    *(void *)(v1 + 64) = 0;
  }
  uint64_t v5 = *(void *)(v1 + 144);
  uint64_t v4 = v1 + 144;
  if (v5)
  {
    return re::DynamicArray<unsigned long>::deinit(v4);
  }
  return this;
}

void re::GeometricObject::setPoseInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 112);
  if (!re::areAlmostEqual<float>((float *)a2, (float *)(a1 + 112)))
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *uint64_t v4 = *(_OWORD *)a2;
    v4[1] = v5;
    re::Event<re::GeometricObjectBase>::raise(a1 + 144, a1);
  }
}

BOOL re::areAlmostEqual<float>(float *a1, float *a2)
{
  float v2 = a1[4];
  float v3 = a2[4];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v4 = a1[5];
  float v5 = a2[5];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v6 = a1[6];
  float v7 = a2[6];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v8 = a1[7];
  float v9 = a2[7];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001)) {
    return 0;
  }
  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v10 = a1[1];
  float v11 = a2[1];
  if (v10 != v11 && vabds_f32(v10, v11) >= (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v12 = a1[2];
  float v13 = a2[2];
  return v12 == v13 || vabds_f32(v12, v13) < (float)((float)((float)(fabsf(v12) + fabsf(v13)) + 1.0) * 0.00001);
}

{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;

  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v2 = a1[1];
  float v3 = a2[1];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v4 = a1[2];
  float v5 = a2[2];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v6 = a1[3];
  float v7 = a2[3];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v8 = a1[4];
  float v9 = a2[4];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v10 = a1[5];
  float v11 = a2[5];
  if (v10 != v11 && vabds_f32(v10, v11) >= (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v12 = a1[6];
  float v13 = a2[6];
  if (v12 != v13 && vabds_f32(v12, v13) >= (float)((float)((float)(fabsf(v12) + fabsf(v13)) + 1.0) * 0.00001)) {
    return 0;
  }
  uint64_t v14 = a1[7];
  int v15 = a2[7];
  if (v14 != v15 && vabds_f32(v14, v15) >= (float)((float)((float)(fabsf(v14) + fabsf(v15)) + 1.0) * 0.00001)) {
    return 0;
  }
  unint64_t v16 = a1[8];
  BOOL v17 = a2[8];
  if (v16 != v17 && vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001)) {
    return 0;
  }
  uint64_t v18 = a1[9];
  float32x4_t v19 = a2[9];
  if (v18 != v19 && vabds_f32(v18, v19) >= (float)((float)((float)(fabsf(v18) + fabsf(v19)) + 1.0) * 0.00001)) {
    return 0;
  }
  float32x4_t v20 = a1[10];
  float32x4_t v21 = a2[10];
  if (v20 != v21 && vabds_f32(v20, v21) >= (float)((float)((float)(fabsf(v20) + fabsf(v21)) + 1.0) * 0.00001)) {
    return 0;
  }
  int8x16_t v22 = a1[11];
  uint64_t v23 = a2[11];
  if (v22 != v23 && vabds_f32(v22, v23) >= (float)((float)((float)(fabsf(v22) + fabsf(v23)) + 1.0) * 0.00001)) {
    return 0;
  }
  uint64_t v24 = a1[12];
  int v25 = a2[12];
  if (v24 != v25 && vabds_f32(v24, v25) >= (float)((float)((float)(fabsf(v24) + fabsf(v25)) + 1.0) * 0.00001)) {
    return 0;
  }
  uint64_t v26 = a1[13];
  BOOL v27 = a2[13];
  if (v26 != v27 && vabds_f32(v26, v27) >= (float)((float)((float)(fabsf(v26) + fabsf(v27)) + 1.0) * 0.00001)) {
    return 0;
  }
  BOOL v28 = a1[14];
  uint64_t v29 = a2[14];
  if (v28 != v29 && vabds_f32(v28, v29) >= (float)((float)((float)(fabsf(v28) + fabsf(v29)) + 1.0) * 0.00001)) {
    return 0;
  }
  uint64_t v30 = a1[15];
  uint64_t v31 = a2[15];
  return v30 == v31 || vabds_f32(v30, v31) < (float)((float)((float)(fabsf(v30) + fabsf(v31)) + 1.0) * 0.00001);
}

void re::Event<re::GeometricObjectBase>::raise(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    re::Event<re::GeometricObjectBase>::doDeferredActions((_anonymous_namespace_ *)a1);
  }
}

void *re::introspect_GeometricObjectType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      float v10 = re::introspectionAllocator(v9);
      float v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)float v11 = 1;
      *((void *)v11 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v11 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Unknown";
      re::introspect_GeometricObjectType(BOOL)::enumAttributes = (uint64_t)v11;
      float v12 = re::introspectionAllocator(v11);
      float v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)float v13 = 1;
      *((void *)v13 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v13 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "GeometricObject";
      qword_26879EAA0 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v15 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "RigidBody";
      qword_26879EAA8 = v15;
    }
  }
  {
    unint64_t v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_GeometricObjectType(BOOL)::info, "GeometricObjectType", 4, 4, 1, 1);
    *(void *)unint64_t v16 = &unk_26E715E00;
    *((void *)v16 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &re::introspect_GeometricObjectType(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_GeometricObjectType(BOOL)::isInitialized) {
      return &re::introspect_GeometricObjectType(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = re::introspect_GeometricObjectType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::introspect_GeometricObjectType(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_GeometricObjectType(BOOL)::isInitialized)
    {
LABEL_9:
      float v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_GeometricObjectType(BOOL)::info;
    }
  }
  re::introspect_GeometricObjectType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_GeometricObjectType(BOOL)::info, a2);
  v17[0] = 0x871260762363F434;
  v17[1] = (uint64_t)"GeometricObjectType";
  xmmword_26879EAD8 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_GeometricObjectType(BOOL)::info;
}

void re::internal::registerEnumType<re::GeometricObjectType>(re::TypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  v33[0] = 208862;
  v33[1] = "int";
  float v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v33);
  if (!v8)
  {
    re::StringID::destroyString((re::StringID *)v33);
    goto LABEL_29;
  }
  uint64_t v9 = *v8;
  re::StringID::destroyString((re::StringID *)v33);
  if (!a1)
  {
LABEL_29:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, a3[1]);
    _os_crash();
    __break(1u);
    return;
  }
  float v12 = *(unsigned int **)(a2 + 64);
  v32[0] = a1;
  v32[1] = v9;
  re::TypeBuilder::beginEnumType((uint64_t)v33, a3, 1, 1, (uint64_t)v32);
  unint64_t v13 = *v12;
  if (v13)
  {
    for (unint64_t i = 0; i < v13; ++i)
    {
      uint64_t v15 = *(void *)(*((void *)v12 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        unint64_t v16 = *(char **)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *v16;
          if (*v16)
          {
            char v18 = v16[1];
            if (v18)
            {
              float32x4_t v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                uint64_t v17 = 31 * v17 + v18;
                int v20 = *v19++;
                char v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v21 = *(void *)(v15 + 8);
        *(void *)&v31.char var0 = 2 * v17;
        v31.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v21, &v31);
        re::StringID::destroyString((re::StringID *)&v31);
        unint64_t v13 = *v12;
      }
    }
    if (v13)
    {
      for (unint64_t j = 0; j < v13; ++j)
      {
        uint64_t v23 = *(void *)(*((void *)v12 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          uint64_t v24 = *(char **)(v23 + 16);
          if (v24)
          {
            uint64_t v25 = *v24;
            if (*v24)
            {
              char v26 = v24[1];
              if (v26)
              {
                BOOL v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  uint64_t v25 = 31 * v25 + v26;
                  int v28 = *v27++;
                  char v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v29 = *(void *)(v23 + 8);
          *(void *)&v31.char var0 = 2 * v25;
          v31.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v29, &v31);
          re::StringID::destroyString((re::StringID *)&v31);
          unint64_t v13 = *v12;
        }
      }
    }
  }
  re::TypeBuilder::commitTo((re::TypeBuilder *)v33, a1, a4);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v30);
}

void re::GeometricObject::~GeometricObject(re::GeometricObject *this)
{
}

{
  uint64_t vars8;

  re::GeometricObject::deinit((uint64_t)this);
  re::Event<re::GeometricObjectBase>::~Event((void *)this + 18);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::GeometricObject::shape(re::GeometricObject *this)
{
  return *((void *)this + 8);
}

{
  return *((void *)this + 8);
}

__n128 re::GeometricObject::pose@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[7];
  __n128 v3 = this[8];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t re::GeometricObject::poseDidChange(re::GeometricObject *this)
{
  return (uint64_t)this + 144;
}

uint64_t re::GeometricObject::type(re::GeometricObject *this)
{
  return 1;
}

void *re::Event<re::GeometricObjectBase>::~Event(void *a1)
{
  if (*a1) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)a1);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 5));
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1);
  return a1;
}

void re::Event<re::GeometricObjectBase>::doDeferredActions(_anonymous_namespace_ *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)a1 + 7);
  if (v1)
  {
    uint64_t v3 = 0;
    for (unint64_t i = 0; i != v1; ++i)
    {
      unint64_t v5 = *((void *)a1 + 7);
      if (v5 <= i)
      {
        memset(v19, 0, sizeof(v19));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v11 = 136315906;
        float v12 = "operator[]";
        __int16 v13 = 1024;
        int v14 = 789;
        __int16 v15 = 2048;
        unint64_t v16 = i;
        __int16 v17 = 2048;
        unint64_t v18 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v6 = *((void *)a1 + 9) + v3;
      uint64_t v7 = *(void *)(v6 + 32);
      long long v8 = *(_OWORD *)(v6 + 16);
      v9[0] = *(_OWORD *)v6;
      v9[1] = v8;
      uint64_t v10 = v7;
      if (LOBYTE(v9[0]))
      {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf((uint64_t)a1, (void *)v9 + 1, (uint64_t)v19);
        if (!LOBYTE(v19[0])) {
          re::DynamicArray<re::EvaluationRegister>::add(a1, (uint64_t)v9 + 8);
        }
      }
      else
      {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable(a1, (void *)v9 + 1);
      }
      v3 += 40;
    }
  }
}

void *re::introspect_CollisionObjectType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      int v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)int v11 = 1;
      *((void *)v11 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v11 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Default";
      re::introspect_CollisionObjectType(BOOL)::enumAttributes = (uint64_t)v11;
      float v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 1;
      *(void *)(v13 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "Trigger";
      qword_26879EB18 = v13;
    }
  }
  {
    int v14 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_CollisionObjectType(BOOL)::info, "CollisionObjectType", 1, 1, 1, 1);
    *(void *)int v14 = &unk_26E715E00;
    *((void *)v14 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &re::introspect_CollisionObjectType(BOOL)::enumTable;
    *((_DWORD *)v14 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_CollisionObjectType(BOOL)::isInitialized) {
      return &re::introspect_CollisionObjectType(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    char v3 = re::introspect_CollisionObjectType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v3) {
      return &re::introspect_CollisionObjectType(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_CollisionObjectType(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_CollisionObjectType(BOOL)::info;
    }
  }
  re::introspect_CollisionObjectType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_CollisionObjectType(BOOL)::info, a2);
  v15[0] = 0x601C7BD2D83C0796;
  v15[1] = (uint64_t)"CollisionObjectType";
  xmmword_26879EB48 = v16;
  re::StringID::destroyString((re::StringID *)v15);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_CollisionObjectType(BOOL)::info;
}

float re::PhysXCapsuleShape::height(re::PhysXCapsuleShape *this)
{
  return (float)(*((float *)this + 7) + *((float *)this + 6)) + (float)(*((float *)this + 7) + *((float *)this + 6));
}

float re::PhysXCapsuleShape::radius(re::PhysXCapsuleShape *this)
{
  return *((float *)this + 6);
}

double re::PhysXCapsuleShape::aabb@<D0>(re::PhysXCapsuleShape *a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  re::PhysXCapsuleShape::localTransform(a1);
  _Q0 = a2[1];
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL);
  float32x4_t v8 = vnegq_f32(_Q0);
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)xmmword_26AF7F620, (int32x4_t)xmmword_26AF7F620), (int8x16_t)xmmword_26AF7F620, 0xCuLL), v8), (float32x4_t)xmmword_26AF7F620, v7);
  int8x16_t v10 = (int8x16_t)vaddq_f32(v9, v9);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  int8x16_t v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
  int8x16_t v13 = (int8x16_t)vaddq_f32(*a2, vaddq_f32(vaddq_f32((float32x4_t)xmmword_26AF7F620, vmulq_laneq_f32(v11, _Q0, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL)));
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&qword_26AF7F630, *(int32x4_t *)&qword_26AF7F630), *(int8x16_t *)&qword_26AF7F630, 0xCuLL), v8), *(float32x4_t *)&qword_26AF7F630, v7);
  float32x4_t v15 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), *(float32x4_t *)&qword_26AF7F630, _Q0, 3);
  _Q3.i32[0] = unk_26AF7F63C;
  float32x4_t v16 = vmlaq_laneq_f32(v15, _Q0, *(float32x4_t *)&qword_26AF7F630, 3);
  float32x4_t v17 = vmulq_f32(_Q0, *(float32x4_t *)&qword_26AF7F630);
  float32x4_t v18 = vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1));
  _Q4 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), v18);
  __int32 v31 = v16.i32[2];
  __asm { FMLA            S4, S3, V0.S[3] }
  __int32 v32 = _Q4.i32[0];
  uint64_t v33 = v13.i64[0];
  __int32 v34 = v13.i32[2];
  _Q0.i64[0] = 0;
  v13.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)v35, (uint64_t)a1 + 20, (uint64_t)&v30, 0, _Q0, v13, *(double *)v16.i64, *(double *)_Q3.i64, *(double *)_Q4.i64, *(double *)v18.i64, *(double *)v8.i64, (int32x4_t)v12, v24, v25, v26, v27, v16.i8[0]);
  double result = *(double *)v35;
  *(void *)&long long v29 = *(void *)&v35[12];
  DWORD2(v29) = v36;
  *a3 = *(_OWORD *)v35;
  a3[1] = v29;
  return result;
}

long long *re::PhysXCapsuleShape::localTransform(re::PhysXCapsuleShape *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_123, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(_MergedGlobals_123))
  {
    v4.i64[0] = 0;
    v4.i64[1] = 1065353216;
    uint64_t Rotation = re::Quaternion<float>::makeRotation(&v4, 1.5708);
    xmmword_26AF7F620 = 0uLL;
    qword_26AF7F630 = Rotation;
    unk_26AF7F638 = v3;
    __cxa_guard_release(_MergedGlobals_123);
  }
  return &xmmword_26AF7F620;
}

void re::PhysXCapsuleShape::~PhysXCapsuleShape(re::PhysXCapsuleShape *this)
{
}

uint64_t re::CapsuleShape::type(re::CapsuleShape *this)
{
  return 4;
}

uint64_t re::PhysXCapsuleShape::requiresLocalTransform(re::PhysXCapsuleShape *this)
{
  return 1;
}

uint64_t re::CollisionShape::isStaticShape(re::CollisionShape *this)
{
  return 0;
}

void re::introspect_CollisionQueryType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F648, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF7F648);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v26 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "Nearest";
      qword_26AF7F678 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      int v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)int v28 = 1;
      *((void *)v28 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v28 + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = "All";
      qword_26AF7F680 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v30 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = "Any";
      qword_26AF7F688 = v30;
      __cxa_guard_release(&qword_26AF7F648);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7F650))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7F690, "CollisionQueryType", 1, 1, 1, 1);
    qword_26AF7F690 = (uint64_t)&unk_26E715E00;
    qword_26AF7F6D0 = (uint64_t)&re::introspect_CollisionQueryType(BOOL)::enumTable;
    dword_26AF7F6A0 = 9;
    __cxa_guard_release(&qword_26AF7F650);
  }
  if ((_MergedGlobals_124 & 1) == 0)
  {
    _MergedGlobals_124 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7F690, a2);
    uint64_t v32 = 0x139DD67E02300A60;
    uint64_t v33 = "CollisionQueryType";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      float32x4_t v4 = (unsigned int *)qword_26AF7F6D0;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  int8x16_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.char var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              float32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.char var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF7F6B0 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CollisionQueryType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_CollisionCastConfiguration(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F658, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7F658))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7F6D8, "CollisionCastConfiguration");
    __cxa_guard_release(&qword_26AF7F658);
  }
  return &unk_26AF7F6D8;
}

void re::initInfo_CollisionCastConfiguration(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x577B5ED3A5088E0ALL;
  v12[1] = "CollisionCastConfiguration";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7F660, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7F660);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_CollisionQueryType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "queryType";
      *(void *)(v7 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = &qword_26AF7F690;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7F668 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_CollisionFilter((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = "filter";
      *(void *)(v10 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x400000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7F670 = v10;
      __cxa_guard_release(&qword_26AF7F660);
    }
  }
  *((void *)this + re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = &qword_26AF7F668;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CollisionCastConfiguration>;
  *((void *)this + _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CollisionCastConfiguration>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::CollisionCastConfiguration>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CollisionCastConfiguration>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::internal::defaultConstruct<re::CollisionCastConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 4) = 0xFFFFFFFF00000001;
  *(void *)(a3 + 20) = 0;
  *(void *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a3 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::CollisionCastConfiguration>(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(void *)(result + 4) = 0xFFFFFFFF00000001;
  *(void *)(result + 20) = 0;
  *(void *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(result + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::introspect_CollisionCastConfiguration(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CollisionCastConfiguration", (uint64_t (*)(re::internal *))re::allocInfo_CollisionCastConfiguration, (re::IntrospectionBase *(*)(void))re::initInfo_CollisionCastConfiguration, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CollisionCastConfiguration>, this);
}

re *re::PhysXCPUDispatcher::reset(re *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    int v2 = this;
    do
    {
       this = re::internal::destroyPersistent<re::Job>((re *)"reset", 26, *(void *)(*((void *)v2 + 7) + 8 * v1 - 8));
      uint64_t v3 = *((void *)v2 + 5);
      ++*((_DWORD *)v2 + 12);
      uint64_t v1 = v3 - 1;
      *((void *)v2 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = v1;
    }
    while (v1);
  }
  return this;
}

re *re::internal::destroyPersistent<re::Job>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];

    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::PhysXCPUDispatcher::submitTask(os_unfair_lock_s *this, physx::PxBaseTask *a2)
{
  if (*(void *)&this[2]._os_unfair_lock_opaque && LOBYTE(this[4]._os_unfair_lock_opaque))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)&this[16], 1u, memory_order_relaxed);
    uint64_t v4 = re::globalAllocators((re *)this);
    unint64_t v5 = (uint64_t (**)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 64, 8);
    v5[1] = 0;
    void v5[2] = 0;
    void v5[3] = (uint64_t (*)(uint64_t))"Unnamed";
    void v5[4] = (uint64_t (*)(uint64_t))this;
    *unint64_t v5 = re::Job::init<re::PhysXCPUDispatcher::submitTask(physx::PxBaseTask &)::$_0>(re::PhysXCPUDispatcher::submitTask(physx::PxBaseTask &)::$_0 &&)::{lambda(re::Job&)#1}::__invoke;
    void v5[5] = (uint64_t (*)(uint64_t))a2;
    os_unfair_lock_lock(this + 5);
    unint64_t v7 = *(void *)&this[8]._os_unfair_lock_opaque;
    unint64_t v8 = *(void *)&this[10]._os_unfair_lock_opaque;
    if (v8 >= v7)
    {
      unint64_t v9 = v8 + 1;
      if (v7 < v8 + 1)
      {
        if (*(void *)&this[6]._os_unfair_lock_opaque)
        {
          uint64_t v10 = 2 * v7;
          BOOL v11 = v7 == 0;
          unint64_t v12 = 8;
          if (!v11) {
            unint64_t v12 = v10;
          }
          if (v12 <= v9) {
            unint64_t v13 = v9;
          }
          else {
            unint64_t v13 = v12;
          }
          re::DynamicArray<float *>::setCapacity(&this[6]._os_unfair_lock_opaque, v13);
        }
        else
        {
          re::DynamicArray<float *>::setCapacity(&this[6]._os_unfair_lock_opaque, v9);
          ++this[12]._os_unfair_lock_opaque;
        }
      }
      unint64_t v8 = *(void *)&this[10]._os_unfair_lock_opaque;
    }
    *(void *)(*(void *)&this[14]._os_unfair_lock_opaque + 8 * vre::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = v5;
    *(void *)&this[10]._uint64_t os_unfair_lock_opaque = v8 + 1;
    ++this[12]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(this + 5);
    float32x4_t v15 = *(uint64_t (**)(void))(**(void **)&this[2]._os_unfair_lock_opaque + 48);
    return v15();
  }
  else
  {
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0)) {
      kdebug_trace();
    }
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 16))(a2);
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 56))(a2);
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      uint64_t result = re::internal::enableHighFrequencyTracing(0, 0);
      if (result)
      {
        return kdebug_trace();
      }
    }
  }
  return result;
}

uint64_t re::PhysXCPUDispatcher::getWorkerCount(re::PhysXCPUDispatcher *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && *((unsigned char *)this + 16)) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return 0;
  }
}

void re::PhysXCPUDispatcher::~PhysXCPUDispatcher(re::PhysXCPUDispatcher *this)
{
  *(void *) this = &unk_26E6DD1A8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *) this = &unk_26E6DD1A8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Job::init<re::PhysXCPUDispatcher::submitTask(physx::PxBaseTask &)::$_0>(re::PhysXCPUDispatcher::submitTask(physx::PxBaseTask &)::$_0 &&)::{lambda(re::Job&)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0)) {
    kdebug_trace();
  }
  (*(void (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  (*(void (**)(void))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40));
  atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 64), 0xFFFFFFFF, memory_order_release);
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyTracing(0, 0);
    if (result) {
      uint64_t result = kdebug_trace();
    }
  }
  *(void *)a1 = 0;
  return result;
}

double re::EmptyShape::massProperties(uint64_t a1, _DWORD *a2, void *a3, _OWORD *a4)
{
  *a2 = 0;
  *a3 = 0;
  a3[1] = 0;
  double result = 0.0;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  return result;
}

uint64_t re::EmptyShape::type(re::EmptyShape *this)
{
  return 1;
}

uint64_t re::CollisionShape::requiresLocalTransform(re::CollisionShape *this)
{
  return 0;
}

re::PhysXCollisionFactory *re::initCollision(re *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (re::PhysXCollisionFactory *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 56, 8);
  double result = re::PhysXCollisionFactory::PhysXCollisionFactory(v2);
  return result;
}

re *re::internal::destroyPersistent<re::CollisionFactory>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::PhysXPlaneShape::PhysXPlaneShape(uint64_t a1, _OWORD *a2, float a3)
{
  *(_DWORD *)(a1 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a1 = &unk_26E6DD218;
  *(void *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a1 + 96;
  *(_OWORD *)(a1 + 3re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = *a2;
  *(float *)(a1 + 4re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7re::FixedArray<re::GeometricObjectData>::deinit((void *)this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 1;
  int v4 = *(_DWORD *)(a1 + 40);
  int32x2_t v9 = *(int32x2_t *)(a1 + 32);
  int v10 = v4;
  float v11 = -a3;
  physx::PxTransformFromPlaneEquation((float *)&v9, (uint64_t)v7, v9);
  re::internal::nvphysx::fromPhysX((uint64_t)v7, v8);
  long long v5 = v8[1];
  *(_OWORD *)(a1 + 64) = v8[0];
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

void *re::internal::nvphysx::fromPhysX@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = re::internal::nvphysx::fromPhysX(a1 + 16);
  uint64_t v8 = v4;
  uint64_t v7 = v3;
  long long v5 = (uint64_t *)re::internal::nvphysx::fromPhysX(a1);
  return re::Pose<float>::Pose(a2, v7, v8, *v5, v5[1]);
}

uint64_t re::PhysXPlaneShape::normal(re::PhysXPlaneShape *this)
{
  return (uint64_t)this + 32;
}

float re::PhysXPlaneShape::distanceFromOrigin(re::PhysXPlaneShape *this)
{
  return *((float *)this + 12);
}

double re::PhysXPlaneShape::aabb@<D0>(_OWORD *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_125, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = a1;
    int v4 = __cxa_guard_acquire(_MergedGlobals_125);
    a1 = v3;
    if (v4)
    {
      *(void *)&long long v5 = 0x7F0000007FLL;
      *((void *)&v5 + re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
      xmmword_26AF7F760 = v5;
      unk_26AF7F770 = vdupq_n_s32(0x7F800000u);
      __cxa_guard_release(_MergedGlobals_125);
      a1 = v3;
    }
  }
  double result = *(double *)&xmmword_26AF7F760;
  long long v2 = unk_26AF7F770;
  *a1 = xmmword_26AF7F760;
  a1[1] = v2;
  return result;
}

uint64_t re::PhysXPlaneShape::localTransform(re::PhysXPlaneShape *this)
{
  return (uint64_t)this + 64;
}

void re::PhysXPlaneShape::~PhysXPlaneShape(re::PhysXPlaneShape *this)
{
}

uint64_t re::PlaneShape::type(re::PlaneShape *this)
{
  return 6;
}

uint64_t re::PhysXPlaneShape::requiresLocalTransform(re::PhysXPlaneShape *this)
{
  return 1;
}

uint64_t re::PlaneShape::isStaticShape(re::PlaneShape *this)
{
  return 1;
}

uint64_t re::internal::nvphysx::fromPhysX(uint64_t a1)
{
  return *(void *)a1;
}

const void **re::PhysXDebugRenderer::deinit(const void **this)
{
  if (*this)
  {
    uint64_t v1 = this;
    _Block_release(this[13]);
    _Block_release(v1[12]);
    _Block_release(v1[11]);
    _Block_release(v1[10]);
    *((_OWORD *)v1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5) = 0u;
    *((_OWORD *)v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6) = 0u;
     this = (const void **)(*(uint64_t (**)(double))(*(void *)*v1 + 552))(0.0);
    uint64_t *v1 = 0;
  }
  return this;
}

void *re::PhysXDebugRenderer::init(void *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  re::PhysXDebugRenderer::setScene((uint64_t)a1, a2);
  float v11 = (const void *)a1[10];
  if (v11) {
    _Block_release(v11);
  }
  unint64_t v12 = (const void *)a1[11];
  if (v12) {
    _Block_release(v12);
  }
  unint64_t v13 = (const void *)a1[12];
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = (const void *)a1[13];
  if (v14) {
    _Block_release(v14);
  }
  a1[10] = _Block_copy(a3);
  a1[11] = _Block_copy(a4);
  a1[12] = _Block_copy(a5);
  double result = _Block_copy(a6);
  a1[13] = result;
  return result;
}